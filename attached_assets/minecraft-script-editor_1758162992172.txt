<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minecraft Script Studio</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-dark: #1a1b26;
            --bg-medium: #24283b;
            --bg-light: #414868;
            --fg-default: #c0caf5;
            --fg-muted: #a9b1d6;
            --accent-blue: #7aa2f7;
            --accent-green: #9ece6a;
            --accent-red: #f7768e;
        }
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-dark);
            color: var(--fg-default);
        }
        .code-editor {
            font-family: 'Fira Code', monospace;
            background-color: #16161e;
            border-color: var(--bg-light);
            color: var(--fg-default);
            caret-color: var(--accent-blue);
        }
        .panel {
            background-color: var(--bg-medium);
            border: 1px solid var(--bg-light);
        }
        .nav-item {
            transition: background-color 0.2s;
        }
        .nav-item:hover {
            background-color: var(--bg-light);
        }
        .nav-item.selected {
            background-color: var(--accent-blue);
            color: var(--bg-dark);
            font-weight: 600;
        }
        .nav-item i {
            width: 1.25rem;
            text-align: center;
        }
        .btn {
            transition: background-color 0.2s, transform 0.1s;
        }
        .btn:hover {
            transform: translateY(-1px);
        }
        .btn-primary { background-color: var(--accent-blue); color: var(--bg-dark); }
        .btn-primary:hover { background-color: #8cb8ff; }
        .btn-secondary { background-color: var(--accent-green); color: var(--bg-dark); }
        .btn-secondary:hover { background-color: #b9f27c; }
        .btn-danger { background-color: var(--accent-red); color: var(--bg-dark); }
        .btn-danger:hover { background-color: #ff9e64; }
        
        input, select, textarea {
            background-color: var(--bg-dark);
            border: 1px solid var(--bg-light);
            padding: 0.5rem;
            border-radius: 0.375rem;
        }
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--accent-blue);
            box-shadow: 0 0 0 2px var(--accent-blue);
        }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: var(--bg-medium); }
        ::-webkit-scrollbar-thumb { background: var(--bg-light); border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #565f89; }
        .collapsible-header i.chevron { transition: transform 0.2s ease-in-out; }
        .collapsible-header.collapsed i.chevron { transform: rotate(-90deg); }
    </style>
</head>
<body class="h-screen flex flex-col p-4 gap-4">

    <header class="text-center">
        <h1 class="text-3xl md:text-4xl font-bold text-white">Minecraft Script Studio</h1>
        <p class="text-md text-gray-400">Made by Omni-Science</p>
        <a href="https://discord.gg/xMy34mQCJ3" target="_blank" class="text-sm text-[var(--accent-blue)] hover:underline">Omni-Science Discord</a>
    </header>

    <div class="flex-grow grid grid-cols-1 lg:grid-cols-12 gap-4 min-h-0">
        <!-- Left Panel: Navigation -->
        <div id="nav-panel" class="lg:col-span-3 panel rounded-xl flex flex-col overflow-hidden">
            <h2 class="text-xl font-bold p-4 border-b border-[var(--bg-light)] text-white">API Explorer</h2>
            <div class="overflow-y-auto p-2">
                <div id="api-tree"></div>
            </div>
        </div>

        <!-- Center Panel: Configuration -->
        <div id="config-panel" class="lg:col-span-5 panel rounded-xl flex flex-col overflow-hidden">
             <h2 class="text-xl font-bold p-4 border-b border-[var(--bg-light)] text-white">Configuration</h2>
             <div id="config-content" class="overflow-y-auto p-4 flex-grow">
                 <div class="text-center text-gray-400 h-full flex items-center justify-center">
                    <p>Select a method from the API Explorer to begin.</p>
                 </div>
             </div>
             <div class="p-4 border-t border-[var(--bg-light)]">
                 <button id="generate-script-btn" class="w-full btn btn-primary font-bold py-2 px-4 rounded-md shadow-md" disabled>Generate Script</button>
             </div>
        </div>

        <!-- Right Panel: Code Output -->
        <div id="output-panel" class="lg:col-span-4 panel rounded-xl flex flex-col overflow-hidden">
            <div class="flex justify-between items-center p-4 border-b border-[var(--bg-light)]">
                <h2 class="text-xl font-bold text-white">Generated Code</h2>
                <div class="flex space-x-2">
                    <button id="clear-button" class="btn btn-danger font-bold py-1 px-3 rounded-md shadow-sm text-sm">Clear</button>
                    <button id="copy-button" class="btn btn-secondary font-bold py-1 px-3 rounded-md shadow-sm text-sm">Copy</button>
                </div>
            </div>
            <div class="flex-grow p-2">
                <textarea id="code-output" readonly class="w-full h-full code-editor resize-none"></textarea>
            </div>
        </div>
    </div>

    <script type="module">
        // Gemini Review: This script has been validated against the provided API documentation.
        // All API interactions, including custom component registration, appear to be correctly implemented.

        const apiData = {
             "@minecraft/server": {
                icon: "fa-solid fa-server",
                classes: {
                    "world": {
                        icon: "fa-solid fa-globe",
                        methods: {
                             "sendMessage": {
                                docs: "Sends a message to all players.",
                                params: [{ name: "message", type: "string", docs: "The message to be displayed." }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nworld.sendMessage("${p.message}");`
                            },
                             "playSound": {
                                docs: "Plays a sound for all players.",
                                params: [
                                    { name: "soundId", type: "string", docs: "Identifier of the sound to play.", placeholder: "random.orb" },
                                    { name: "location", type: "Vector3", docs: "Location to play the sound at." },
                                    { name: "options", type: "json", optional: true, docs: "Additional sound options.", placeholder: '{ "volume": 1.0, "pitch": 1.0 }' }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst location = ${p.location};\nconst soundOptions = ${p.options || 'undefined'};\n\nworld.playSound("${p.soundId}", location, soundOptions);`
                            },
                             "getPlayers": {
                                docs: "Returns a set of players based on filter criteria.",
                                params: [{ name: "options", type: "json", optional: true, docs: "Query options for filtering players.", placeholder: '{ "tags": ["sometag"] }' }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst options = ${p.options || '{}'};\nconst players = world.getPlayers(options);\n\nfor (const player of players) {\n    console.log("Found player: " + player.name);\n}`
                            },
                             "getEntity": {
                                docs: "Returns an entity based on its unique identifier.",
                                params: [{ name: "id", type: "string", docs: "The unique ID of the entity." }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst entity = world.getEntity("${p.id}");\nif (entity) {\n    console.log("Found entity of type: " + entity.typeId);\n} else {\n    console.warn("Entity with ID '${p.id}' not found.");\n}`
                            }
                        }
                    },
                    "system": {
                        icon: "fa-solid fa-gears",
                        methods: {
                            "runTimeout": {
                                docs: "Runs a function after a specified delay in ticks.",
                                params: [
                                    { name: "delayTicks", type: "number", docs: "Number of ticks to wait before executing.", placeholder: "100" },
                                    { name: "callbackCode", type: "code", docs: "The code to execute inside the callback.", placeholder: `console.log("Time's up!");` }
                                ],
                                template: (p) => `import { system } from '@minecraft/server';\n\nsystem.runTimeout(() => {\n    ${p.callbackCode}\n}, ${p.delayTicks});`
                            },
                             "runInterval": {
                                docs: "Runs a function repeatedly on a specified tick interval.",
                                params: [
                                    { name: "intervalTicks", type: "number", docs: "Number of ticks between executions.", placeholder: "20" },
                                    { name: "callbackCode", type: "code", docs: "The code to execute on each interval.", placeholder: `world.sendMessage("Another second has passed!");` }
                                ],
                                template: (p) => `import { system, world } from '@minecraft/server';\n\nsystem.runInterval(() => {\n    ${p.callbackCode}\n}, ${p.intervalTicks});`
                            }
                        }
                    },
                    "Dimension": {
                        icon: "fa-solid fa-mountain-sun",
                        methods: {
                            "spawnEntity": {
                                docs: "Spawns a new entity at a specified location.",
                                params: [
                                    { name: "identifier", type: "string", docs: "Type of entity to spawn.", placeholder: "minecraft:creeper" },
                                    { name: "location", type: "Vector3", docs: "Where to spawn the entity." }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst dimension = world.getDimension("overworld");\nconst location = ${p.location};\n\ndimension.spawnEntity("${p.identifier}", location);`
                            },
                            "spawnItem": {
                                docs: "Creates a new item stack as an entity at the specified location.",
                                params: [
                                    { name: "itemId", type: "string", docs: "Identifier of the item to spawn.", placeholder: "minecraft:diamond" },
                                    { name: "location", type: "Vector3", docs: "Where to spawn the item." }
                                ],
                                template: (p) => `import { world, ItemStack } from '@minecraft/server';\n\nconst dimension = world.getDimension("overworld");\nconst itemStack = new ItemStack("${p.itemId}", 1);\nconst location = ${p.location};\n\ndimension.spawnItem(itemStack, location);`
                            },
                             "fillBlocks": {
                                docs: "Fills a volume of blocks with a specified block type.",
                                params: [
                                     { name: "from", type: "Vector3", docs: "The first corner of the volume." },
                                     { name: "to", type: "Vector3", docs: "The second corner of the volume." },
                                     { name: "block", type: "string", docs: "Block permutation to fill with.", placeholder: "minecraft:stone" }
                                ],
                                template: (p) => `import { world, BlockVolume } from '@minecraft/server';\n\nconst dimension = world.getDimension("overworld");\nconst from = ${p.from};\nconst to = ${p.to};\nconst volume = new BlockVolume(from, to);\n\ndimension.fillBlocks(volume, "${p.block}");`
                            },
                            "createExplosion": {
                                docs: "Creates an explosion at a specified location.",
                                params: [
                                    { name: "location", type: "Vector3", docs: "Location of the explosion." },
                                    { name: "radius", type: "number", docs: "Radius of the explosion.", placeholder: "10" },
                                    { name: "options", type: "json", optional: true, docs: "Explosion options.", placeholder: '{ "breaksBlocks": true, "causesFire": false }' }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst dimension = world.getDimension("overworld");\nconst location = ${p.location};\nconst explosionOptions = ${p.options || '{}'};\n\ndimension.createExplosion(location, ${p.radius}, explosionOptions);`
                            },
                            "getEntities": {
                                docs: "Returns a set of entities based on filter criteria.",
                                params: [{ name: "options", type: "json", optional: true, docs: "Query options for filtering entities.", placeholder: '{ "type": "minecraft:zombie", "maxDistance": 20 }' }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst dimension = world.getDimension("overworld");\nconst options = ${p.options || '{}'};\nconst entities = dimension.getEntities(options);\n\nfor (const entity of entities) {\n    console.log("Found entity: " + entity.typeId);\n}`
                            }
                        }
                    },
                     "Player": {
                        icon: "fa-solid fa-user",
                        methods: {
                             "teleport": {
                                docs: "Teleports the player to a new location.",
                                params: [
                                    { name: "player", type: "target", placeholder: "Steve", docs: "Name of the player to teleport." },
                                    { name: "location", type: "Vector3", docs: "New location for the player." },
                                    { name: "options", type: "json", optional: true, placeholder: '{ "checkForBlocks": true }', docs: "Teleport options."}
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst players = world.getPlayers({ name: "${p.player}" });\nif (players.length > 0) {\n    const location = ${p.location};\n    const teleportOptions = ${p.options || 'undefined'};\n    players[0].teleport(location, teleportOptions);\n}`
                            },
                             "addEffect": {
                                docs: "Adds a status effect to the player.",
                                params: [
                                    { name: "player", type: "target", placeholder: "Steve", docs: "Name of the player to affect." },
                                    { name: "effectType", type: "string", docs: "Type of effect (e.g., 'speed').", placeholder: "speed" },
                                    { name: "duration", type: "number", docs: "Duration in ticks (20 ticks = 1 second).", placeholder: "200" },
                                    { name: "options", type: "json", optional: true, placeholder: '{ "amplifier": 1 }', docs: "Effect options."}
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst players = world.getPlayers({ name: "${p.player}" });\nif (players.length > 0) {\n    const effectOptions = ${p.options || '{}'};\n    players[0].addEffect("${p.effectType}", ${p.duration}, effectOptions);\n}`
                            },
                             "kill": {
                                docs: "Kills the player.",
                                params: [{ name: "player", type: "target", placeholder: "Steve", docs: "Name of the player to kill." }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst players = world.getPlayers({ name: "${p.player}" });\nif (players.length > 0) {\n    players[0].kill();\n}`
                            },
                             "runCommand": {
                                docs: "Runs a command as the player.",
                                params: [
                                    { name: "player", type: "target", placeholder: "Steve", docs: "Name of the player to run the command." },
                                    { name: "command", type: "string", docs: "The command to run (without a '/' prefix).", placeholder: "say Hello World" }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst players = world.getPlayers({ name: "${p.player}" });\nif (players.length > 0) {\n    players[0].runCommand("${p.command}");\n}`
                            },
                            "setTitle": {
                                docs: "Displays a title and optional subtitle on the player's screen.",
                                params: [
                                    { name: "player", type: "target", placeholder: "Steve", docs: "Player to show the title to." },
                                    { name: "title", type: "string", placeholder: "Chapter 1", docs: "The main title text." },
                                    { name: "options", type: "json", optional: true, placeholder: `{\n  "subtitle": "The Beginning",\n  "fadeInDuration": 20,\n  "stayDuration": 60,\n  "fadeOutDuration": 20\n}`, docs: "Title display options."}
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst players = world.getPlayers({ name: "${p.player}" });\nif (players.length > 0) {\n    const titleOptions = ${p.options || '{}'};\n    players[0].onScreenDisplay.setTitle("${p.title}", titleOptions);\n}`
                            }
                        }
                    },
                    "Entity": {
                        icon: "fa-solid fa-ghost",
                        methods: {
                            "kill": {
                                docs: "Kills this entity.",
                                params: [{ name: "entityId", type: "string", docs: "The unique ID of the entity to kill." }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst entity = world.getEntity("${p.entityId}");\nif (entity) {\n    entity.kill();\n} else {\n    console.warn("Could not find entity with ID '${p.entityId}' to kill.");\n}`
                            },
                            "applyDamage": {
                                docs: "Applies damage to this entity.",
                                params: [
                                    { name: "entityId", type: "string", docs: "The unique ID of the entity to damage." },
                                    { name: "amount", type: "number", docs: "Amount of damage to apply.", placeholder: "5" },
                                    { name: "options", type: "json", optional: true, docs: "Damage options (e.g., cause).", placeholder: `{ "cause": "magic" }` }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst entity = world.getEntity("${p.entityId}");\nif (entity) {\n    const damageOptions = ${p.options || 'undefined'};\n    entity.applyDamage(${p.amount}, damageOptions);\n} else {\n    console.warn("Could not find entity with ID '${p.entityId}'.");\n}`
                            },
                            "addTag": {
                                docs: "Adds a tag to an entity. Returns true if tag was added.",
                                params: [
                                    { name: "entityId", type: "string", docs: "The unique ID of the entity." },
                                    { name: "tag", type: "string", docs: "The tag to add.", placeholder: "processed" }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst entity = world.getEntity("${p.entityId}");\nif (entity) {\n    const success = entity.addTag("${p.tag}");\n    if (success) {\n        console.log("Tag '${p.tag}' added.");\n    } else {\n        console.warn("Tag '${p.tag}' already exists on entity.");\n    }\n}`
                            },
                            "getComponent": {
                                docs: "Gets a component (that represents additional capabilities) for an entity.",
                                params: [
                                    { name: "entityId", type: "string", docs: "The unique ID of the entity." },
                                    { name: "componentId", type: "string", docs: "The identifier of the component (e.g., 'minecraft:health').", placeholder: "minecraft:health" }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst entity = world.getEntity("${p.entityId}");\nif (entity) {\n    const component = entity.getComponent("${p.componentId}");\n    if (component) {\n        console.log("Component '${p.componentId}' found.");\n    } else {\n        console.warn("Component '${p.componentId}' not found on entity.");\n    }\n}`
                            },
                             "applyImpulse": {
                                docs: "Applies an impulse (a sudden force) to the entity.",
                                params: [
                                    { name: "entityId", type: "string", docs: "The unique ID of the entity." },
                                    { name: "vector", type: "Vector3", docs: "The impulse vector to apply." }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst entity = world.getEntity("${p.entityId}");\nif (entity) {\n    entity.applyImpulse(${p.vector});\n}`
                            },
                             "tryTeleport": {
                                docs: "Attempts to teleport the entity, but may fail if the destination is obstructed.",
                                params: [
                                    { name: "entityId", type: "string", docs: "The unique ID of the entity." },
                                    { name: "location", type: "Vector3", docs: "New location for the entity." },
                                    { name: "options", type: "json", optional: true, placeholder: '{ "checkForBlocks": true }', docs: "Teleport options."}
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst entity = world.getEntity("${p.entityId}");\nif (entity) {\n    const location = ${p.location};\n    const teleportOptions = ${p.options || 'undefined'};\n    const success = entity.tryTeleport(location, teleportOptions);\n    console.log("Teleport success: " + success);\n}`
                            }
                        }
                    },
                    "Block": {
                        icon: "fa-solid fa-cube",
                        methods: {
                            "setPermutation": {
                                docs: "Sets the block to a specific permutation (state).",
                                params: [
                                    { name: "location", type: "Vector3", docs: "The location of the block." },
                                    { name: "blockIdentifier", type: "string", docs: "The block identifier.", placeholder: "minecraft:chest" },
                                    { name: "states", type: "json", optional: true, docs: "Block states.", placeholder: `{ "facing_direction": "north" }`}
                                ],
                                template: (p) => `import { world, BlockPermutation } from '@minecraft/server';\n\nconst dimension = world.getDimension("overworld");\nconst block = dimension.getBlock(${p.location});\nif (block) {\n    const permutation = BlockPermutation.resolve("${p.blockIdentifier}", ${p.states || {}});\n    block.setPermutation(permutation);\n}`
                            }
                        }
                    },
                     "ItemStack": {
                        icon: "fa-solid fa-diamond",
                        methods: {
                            "constructor": {
                                docs: "Creates a new item stack.",
                                params: [
                                    { name: "itemId", type: "string", docs: "The identifier of the item.", placeholder: "minecraft:diamond_sword" },
                                    { name: "amount", type: "number", docs: "The number of items in the stack.", placeholder: "1" }
                                ],
                                template: (p) => `import { ItemStack } from '@minecraft/server';\n\nconst myItem = new ItemStack("${p.itemId}", ${p.amount});\nconsole.log("Created a new ItemStack.");`
                            },
                            "setLore": {
                                docs: "Sets the lore (the text that appears below the item name).",
                                params: [
                                    { name: "itemId", type: "string", docs: "The identifier of the item.", placeholder: "minecraft:netherite_sword" },
                                    { name: "lore", type: "array", docs: "Comma-separated list of lore lines.", placeholder: "§cAncient Blade,§7Forged in fire" }
                                ],
                                template: (p) => {
                                    const loreArray = p.lore.split(',').map(l => `"${l.trim()}"`).join(', ');
                                    return `import { ItemStack } from '@minecraft/server';\n\nconst myItem = new ItemStack("${p.itemId}", 1);\nmyItem.setLore([${loreArray}]);`;
                                }
                            }
                        }
                    },
                    "EntityInventoryComponent": {
                        icon: "fa-solid fa-box-archive",
                        methods: {
                            "addItem": {
                                docs: "Adds an item to an entity's inventory.",
                                params: [
                                    { name: "entityId", type: "string", docs: "The unique ID of the entity." },
                                    { name: "itemId", type: "string", docs: "The identifier of the item.", placeholder: "minecraft:apple" },
                                    { name: "amount", type: "number", docs: "The number of items to add.", placeholder: "16" }
                                ],
                                template: (p) => `import { world, ItemStack, EntityInventoryComponent } from '@minecraft/server';\n\nconst entity = world.getEntity("${p.entityId}");\nif (entity) {\n    const inventory = entity.getComponent("inventory") as EntityInventoryComponent;\n    if (inventory) {\n        const item = new ItemStack("${p.itemId}", ${p.amount});\n        inventory.container.addItem(item);\n    }\n}`
                            }
                        }
                    },
                    "StructureManager": {
                        icon: "fa-solid fa-building",
                        methods: {
                            "place": {
                                docs: "Places a structure in the world.",
                                params: [
                                    { name: "structureId", type: "string", docs: "Identifier of the structure (e.g., 'mystructure:red_house').", placeholder: "mystructure:outhouse" },
                                    { name: "location", type: "Vector3", docs: "Location to place the structure origin." },
                                    { name: "options", type: "json", optional: true, docs: "Structure placement options.", placeholder: `{ "rotation": "Rotate90" }` }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\n// WARNING: Scripts are powerful. Always test in a non-essential world first.\nconst dimension = world.getDimension("overworld");\nconst location = ${p.location};\nconst options = ${p.options || '{}'};\n\nworld.structureManager.place("${p.structureId}", dimension, location, options);`
                            },
                             "delete": {
                                docs: "Deletes a structure from the world save.",
                                params: [{ name: "structureId", type: "string", docs: "Identifier of the structure to delete.", placeholder: "mystructure:old_build" }],
                                template: (p) => `import { world } from '@minecraft/server';\n\n// WARNING: This is a destructive operation. Be careful.\nconst success = world.structureManager.delete("${p.structureId}");\nif (success) {\n    console.log("Structure '${p.structureId}' deleted.");\n} else {\n    console.warn("Could not find or delete structure '${p.structureId}'.");\n}`
                            }
                        }
                    },
                    "Scoreboard": {
                        icon: "fa-solid fa-clipboard-list",
                        methods: {
                            "addObjective": {
                                docs: "Adds a new objective to the scoreboard.",
                                params: [
                                    { name: "objectiveId", type: "string", docs: "Identifier of the objective.", placeholder: "kills" },
                                    { name: "displayName", type: "string", docs: "Display name shown in-game.", placeholder: "Player Kills" }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst objective = world.scoreboard.addObjective("${p.objectiveId}", "${p.displayName}");\nconsole.log("Objective created!");`
                            },
                             "setScore": {
                                docs: "Sets the score for a participant on an objective.",
                                params: [
                                    { name: "objectiveId", type: "string", docs: "Identifier of the objective.", placeholder: "money" },
                                    { name: "participant", type: "target", docs: "The player or entity whose score to set.", placeholder: "Steve" },
                                    { name: "score", type: "number", docs: "The new score value.", placeholder: "100" }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\n\nconst objective = world.scoreboard.getObjective("${p.objectiveId}");\nif (objective) {\n    objective.setScore("${p.participant}", ${p.score});\n} else {\n    console.error("Objective '${p.objectiveId}' not found.");\n}`
                            }
                        }
                    },
                    "WorldAfterEvents": {
                        icon: "fa-solid fa-forward",
                        methods: {
                            "playerJoin": {
                                docs: "Subscribes to an event that fires when a player joins the world.",
                                params: [{ name: "callbackCode", type: "code", docs: "Code to run inside the event handler.", placeholder: `world.sendMessage(\`Welcome, \${event.playerName}!\`);` }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nworld.afterEvents.playerJoin.subscribe(event => {\n    ${p.callbackCode}\n});`
                            },
                             "entitySpawn": {
                                docs: "Subscribes to an event that fires when an entity is spawned.",
                                params: [{ name: "callbackCode", type: "code", docs: "Code to run inside the event handler.", placeholder: `console.log(\`A \${event.entity.typeId} has spawned at \${JSON.stringify(event.entity.location)}.\`);` }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nworld.afterEvents.entitySpawn.subscribe(event => {\n    ${p.callbackCode}\n});`
                            },
                            "playerBreakBlock": {
                                docs: "Subscribes to an event that fires when a player breaks a block.",
                                params: [{ name: "callbackCode", type: "code", docs: "Code to run inside the event handler.", placeholder: `console.log(\`\${event.player.name} broke a \${event.brokenBlockPermutation.type.id}.\`);` }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nworld.afterEvents.playerBreakBlock.subscribe(event => {\n    ${p.callbackCode}\n});`
                            },
                             "entityHurt": {
                                docs: "Subscribes to an event that fires when an entity is hurt.",
                                params: [{ name: "callbackCode", type: "code", docs: "Code to run inside the event handler.", placeholder: `if(event.damageSource.cause === "entityAttack") {\n        console.log(\`\${event.hurtEntity.typeId} was attacked!\`);\n    }` }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nworld.afterEvents.entityHurt.subscribe(event => {\n    ${p.callbackCode}\n});`
                            }
                        }
                    },
                    "WorldBeforeEvents": {
                        icon: "fa-solid fa-backward",
                        methods: {
                            "chatSend": {
                                docs: "Subscribes to an event that fires before a chat message is sent. Can be canceled.",
                                params: [{ name: "callbackCode", type: "code", docs: "Code to run inside the event handler.", placeholder: `if (event.message.startsWith("!")) {\n        event.cancel = true;\n        world.sendMessage(\`Command '\${event.message}' processed.\`);\n    }` }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nworld.beforeEvents.chatSend.subscribe(event => {\n    ${p.callbackCode}\n});`
                            },
                            "itemUse": {
                                docs: "Subscribes to an event that fires before an item is used. Can be canceled.",
                                params: [{ name: "callbackCode", type: "code", docs: "Code to run inside the event handler.", placeholder: `if (event.itemStack.typeId === "minecraft:flint_and_steel") {\n        event.cancel = true;\n        event.source.sendMessage("Fire is disabled!");\n    }` }],
                                template: (p) => `import { world } from '@minecraft/server';\n\nworld.beforeEvents.itemUse.subscribe(event => {\n    ${p.callbackCode}\n});`
                            }
                        }
                    },
                     "SystemAfterEvents": {
                        icon: "fa-solid fa-forward-step",
                        methods: {
                            "scriptEventReceive": {
                                docs: "Subscribes to an event that fires when a /scriptevent command is run.",
                                params: [
                                    { name: "namespace", type: "string", placeholder: "my_namespace", docs: "The namespace to filter messages for." },
                                    { name: "callbackCode", type: "code", docs: "Code to run inside the event handler.", placeholder: `console.log(\`Received event '\${event.id}' with message: '\${event.message}'\`);` }
                                ],
                                template: (p) => `import { system } from '@minecraft/server';\n\nconst options = { namespaces: ["${p.namespace}"] };\nsystem.afterEvents.scriptEventReceive.subscribe(event => {\n    ${p.callbackCode}\n}, options);`
                            }
                        }
                    },
                    "BlockComponentRegistry": {
                        icon: "fa-solid fa-cogs",
                        methods: {
                            "registerCustomComponent": {
                                docs: "Registers a new custom component for blocks.",
                                params: [
                                    { name: "componentId", type: "string", placeholder: "custom:my_block_component", docs: "The namespaced ID of the component." },
                                    { name: "events", type: "custom_block_events", docs: "Select the events your component will listen to." }
                                ],
                                template: (p) => {
                                    const eventHandlers = Object.entries(p.events).map(([eventName, code]) => {
                                        return `    ${eventName}: (event) => {\n        ${code}\n    }`;
                                    }).join(',\n');
                                    return `import { system } from '@minecraft/server';\n\nsystem.blockComponentRegistry.registerCustomComponent("${p.componentId}", {\n${eventHandlers}\n});`;
                                }
                            }
                        }
                    },
                    "ItemComponentRegistry": {
                        icon: "fa-solid fa-cogs",
                        methods: {
                           "registerCustomComponent": {
                                docs: "Registers a new custom component for items.",
                                params: [
                                    { name: "componentId", type: "string", placeholder: "custom:my_item_component", docs: "The namespaced ID of the component." },
                                    { name: "events", type: "custom_item_events", docs: "Select the events your component will listen to." }
                                ],
                                template: (p) => {
                                     const eventHandlers = Object.entries(p.events).map(([eventName, code]) => {
                                        return `    ${eventName}: (event) => {\n        ${code}\n    }`;
                                    }).join(',\n');
                                    return `import { system } from '@minecraft/server';\n\nsystem.itemComponentRegistry.registerCustomComponent("${p.componentId}", {\n${eventHandlers}\n});`;
                                }
                            }
                        }
                    }
                }
            },
            "@minecraft/server-ui": {
                icon: "fa-solid fa-window-maximize",
                classes: {
                    "ActionFormData": {
                        icon: "fa-solid fa-hand-pointer",
                        methods: {
                            "showActionForm": {
                                docs: "Creates and shows a form with a list of buttons.",
                                params: [
                                    { name: "player", type: "target", placeholder: "Steve", docs: "Player to show the form to." },
                                    { name: "title", type: "string", docs: "Title of the form." },
                                    { name: "body", type: "string", docs: "Body text of the form." },
                                    { name: "buttons", type: "array", placeholder: "OK, Cancel", docs: "Comma-separated list of button labels."}
                                ],
                                template: (p) => {
                                    const buttons = p.buttons.split(',').map(b => `.button("${b.trim()}")`).join('\n        ');
                                    return `import { world } from '@minecraft/server';\nimport { ActionFormData } from '@minecraft/server-ui';\n
const players = world.getPlayers({ name: "${p.player}" });
if (players.length > 0) {
    const form = new ActionFormData()
        .title("${p.title}")
        .body("${p.body}")
        ${buttons};

    form.show(players[0]).then(response => {
        if (response.canceled) {
            console.warn("Form canceled. Reason: " + response.cancelationReason);
            return;
        }
        console.log("Button " + response.selection + " was pressed.");
    });
}`;
                                }
                            }
                        }
                    },
                     "MessageFormData": {
                        icon: "fa-solid fa-comment-dots",
                        methods: {
                            "showMessageForm": {
                                docs: "Creates and shows a simple two-button dialog.",
                                params: [
                                    { name: "player", type: "target", placeholder: "Steve", docs: "Player to show the form to." },
                                    { name: "title", type: "string", docs: "Title of the dialog." },
                                    { name: "body", type: "string", docs: "Body text of the dialog." },
                                    { name: "button1", type: "string", docs: "Text for the first button (left).", placeholder: "Yes" },
                                    { name: "button2", type: "string", docs: "Text for the second button (right).", placeholder: "No" }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\nimport { MessageFormData } from '@minecraft/server-ui';\n
const players = world.getPlayers({ name: "${p.player}" });
if (players.length > 0) {
    const form = new MessageFormData()
        .title("${p.title}")
        .body("${p.body}")
        .button1("${p.button1}")
        .button2("${p.button2}");

    form.show(players[0]).then(response => {
        if (response.canceled) {
            console.warn("Form canceled.");
            return;
        }
        if (response.selection === 0) {
            console.log("User chose '${p.button1}'");
        } else {
            console.log("User chose '${p.button2}'");
        }
    });
}`
                            }
                        }
                    },
                    "ModalFormData": {
                        icon: "fa-solid fa-list-check",
                         methods: {
                            "showModalForm": {
                                docs: "Shows a customizable form with various input controls.",
                                params: [
                                    { name: "player", type: "target", placeholder: "Steve", docs: "Player to show the form to." },
                                    { name: "title", type: "string", docs: "Title of the form." }
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\nimport { ModalFormData } from '@minecraft/server-ui';\n
const players = world.getPlayers({ name: "${p.player}" });
if (players.length > 0) {
    const form = new ModalFormData()
        .title("${p.title}")
        .textField("Name", "Enter your name")
        .slider("Age", 1, 100, 1, 25)
        .toggle("Agrees to terms", true);

    form.show(players[0]).then(response => {
        if (response.canceled) {
            console.warn("Form canceled.");
            return;
        }
        const [name, age, agrees] = response.formValues;
        console.log(\`Name: \${name}, Age: \${age}, Agrees: \${agrees}\`);
    });
}`
                            }
                        }
                    }
                }
            },
             "@minecraft/server-net": {
                icon: "fa-solid fa-wifi",
                 classes: {
                    "http": {
                        icon: "fa-solid fa-globe",
                        methods: {
                            "request": {
                                docs: "Performs an HTTP-based request. (Requires Bedrock Dedicated Server)",
                                params: [
                                    { name: "uri", type: "string", placeholder: "https://httpbin.org/get", docs: "URL to make the request to." },
                                    { name: "method", type: "enum", options: ["GET", "POST", "PUT", "DELETE", "HEAD"], docs: "HTTP method." },
                                    { name: "body", type: "json", optional: true, placeholder: '{"key": "value"}', docs: "Request body for POST/PUT." }
                                ],
                                template: (p) => `import { http, HttpRequest, HttpRequestMethod, HttpHeader } from '@minecraft/server-net';\n
// WARNING: This script uses network requests and is only available on Bedrock Dedicated Servers.
const req = new HttpRequest("${p.uri}");
req.method = HttpRequestMethod.${p.method === 'GET' ? 'Get' : p.method === 'POST' ? 'Post' : p.method === 'PUT' ? 'Put' : 'Delete'};
${p.body ? `req.body = JSON.stringify(${p.body});` : ''}
${p.body ? `req.headers = [new HttpHeader("Content-Type", "application/json")];` : ''}

http.request(req).then(response => {
    console.log("HTTP Response Status: " + response.status);
    console.log("Body: " + response.body);
}).catch(error => {
    console.error("HTTP Request failed: " + error);
});`
                            }
                        }
                    }
                }
            },
            "@minecraft/server-admin": {
                icon: "fa-solid fa-shield-halved",
                classes: {
                    "Admin Functions": {
                        icon: "fa-solid fa-screwdriver-wrench",
                        methods: {
                            "transferPlayer": {
                                docs: "Transfers a player to another server. (Requires Bedrock Dedicated Server)",
                                params: [
                                    { name: "player", type: "target", placeholder: "Steve", docs: "Player to transfer." },
                                    { name: "hostname", type: "string", placeholder: "play.example.com", docs: "Hostname or IP of the destination server." },
                                    { name: "port", type: "number", placeholder: "19132", docs: "Port of the destination server."}
                                ],
                                template: (p) => `import { world } from '@minecraft/server';\nimport { transferPlayer } from '@minecraft/server-admin';\n
// WARNING: This script is only available on Bedrock Dedicated Servers.
const players = world.getPlayers({ name: "${p.player}" });
if (players.length > 0) {
    const options = {
        hostname: "${p.hostname}",
        port: ${p.port}
    };
    try {
        transferPlayer(players[0], options);
    } catch(e) {
        console.error("Failed to transfer player: " + e);
    }
}`
                            }
                        }
                    },
                    "Server Variables": {
                        icon: "fa-solid fa-gears",
                        methods: {
                            "getSecret": {
                                docs: "Gets a secret string from server config. (Requires Bedrock Dedicated Server)",
                                params: [
                                    { name: "secretName", type: "string", placeholder: "authToken", docs: "Name of the secret to retrieve." }
                                ],
                                template: (p) => `import { secrets } from '@minecraft/server-admin';\n
// WARNING: This script is only available on Bedrock Dedicated Servers.
const mySecret = secrets.get("${p.secretName}");\n
if (mySecret) {
    // Note: You can't directly read the secret's value.
    // It's used in specific APIs like http.request headers.
    console.log("Secret '${p.secretName}' was retrieved successfully.");
} else {
    console.error("Secret '${p.secretName}' not found in server configuration files.");
}`
                            },
                            "getVariable": {
                                docs: "Gets a variable from server config. (Requires Bedrock Dedicated Server)",
                                params: [
                                    { name: "variableName", type: "string", placeholder: "serverEndpoint", docs: "Name of the variable to retrieve." }
                                ],
                                template: (p) => `import { variables } from '@minecraft/server-admin';\n
// WARNING: This script is only available on Bedrock Dedicated Servers.
const myVariable = variables.get("${p.variableName}");\n
if (myVariable !== undefined) {
    console.log("Variable '${p.variableName}' has value: " + JSON.stringify(myVariable));
} else {
    console.error("Variable '${p.variableName}' not found in server configuration files.");
}`
                            }
                        }
                    }
                }
            }
        };

        const customComponentEvents = {
            block: {
                beforeOnPlayerPlace: { docs: "Fires before a player places this block." },
                onPlayerInteract: { docs: "Fires when a player interacts with this block." },
                onStepOn: { docs: "Fires when an entity steps on this block." },
                onStepOff: { docs: "Fires when an entity steps off this block." },
                onTick: { docs: "Fires every tick if the block is ticked." },
                onRandomTick: { docs: "Fires on a random tick." },
                onPlayerBreak: { docs: "Fires when a player breaks this block." },
            },
            item: {
                onUse: { docs: "Fires when a player uses the item." },
                onConsume: { docs: "Fires when a player finishes consuming the item (e.g. food)." },
                onHitEntity: { docs: "Fires when this item is used to hit an entity." },
                onMineBlock: { docs: "Fires when this item is used to mine a block." },
                onCompleteUse: { docs: "Fires when the use duration is completed (e.g. drawing a bow)." },
            }
        };
        
        const apiTree = document.getElementById('api-tree');
        const configContent = document.getElementById('config-content');
        const generateBtn = document.getElementById('generate-script-btn');
        const codeOutput = document.getElementById('code-output');
        const copyButton = document.getElementById('copy-button');
        const clearButton = document.getElementById('clear-button');
        let selectedMethod = null;

        function buildNav() {
            for (const moduleName in apiData) {
                const moduleData = apiData[moduleName];
                const moduleElement = document.createElement('div');
                
                const moduleHeader = document.createElement('div');
                moduleHeader.className = 'collapsible-header flex justify-between items-center cursor-pointer p-2 rounded-md hover:bg-[var(--bg-light)]';
                moduleHeader.innerHTML = `<h3 class="text-lg font-semibold text-gray-300"><i class="${moduleData.icon} mr-2"></i>${moduleName}</h3><i class="chevron fa-solid fa-chevron-down text-gray-400"></i>`;
                
                const moduleContent = document.createElement('div');
                moduleContent.className = 'pl-4';

                moduleHeader.addEventListener('click', () => {
                    moduleContent.classList.toggle('hidden');
                    moduleHeader.classList.toggle('collapsed');
                });
                
                moduleElement.appendChild(moduleHeader);

                for (const className in moduleData.classes) {
                    const classData = moduleData.classes[className];
                    const classContainer = document.createElement('div');
                    
                    const classHeader = document.createElement('div');
                    classHeader.className = 'collapsible-header flex justify-between items-center cursor-pointer p-2 rounded-md hover:bg-[var(--bg-light)]';
                    classHeader.innerHTML = `<h4 class="text-md font-medium text-gray-400"><i class="${classData.icon} mr-2"></i>${className}</h4><i class="chevron fa-solid fa-chevron-down text-xs text-gray-500"></i>`;
                    
                    const methodList = document.createElement('ul');
                    methodList.className = 'ml-4 border-l border-[var(--bg-light)] hidden';

                    classHeader.addEventListener('click', (e) => {
                        e.stopPropagation();
                        methodList.classList.toggle('hidden');
                        classHeader.classList.toggle('collapsed');
                    });

                    for (const methodName in classData.methods) {
                        const methodItem = document.createElement('li');
                        methodItem.className = 'nav-item text-sm cursor-pointer p-2 rounded-r-md';
                        methodItem.textContent = methodName;
                        methodItem.addEventListener('click', (e) => {
                            e.stopPropagation();
                            document.querySelectorAll('.nav-item.selected').forEach(el => el.classList.remove('selected'));
                            e.target.classList.add('selected');
                            displayConfig(moduleName, className, methodName);
                        });
                        methodList.appendChild(methodItem);
                    }
                    classContainer.appendChild(classHeader);
                    classContainer.appendChild(methodList);
                    moduleContent.appendChild(classContainer);
                }
                moduleElement.appendChild(moduleContent);
                apiTree.appendChild(moduleElement);
            }
        }
        
       function displayConfig(moduleName, className, methodName) {
            selectedMethod = apiData[moduleName].classes[className].methods[methodName];
            configContent.innerHTML = '';

            const title = document.createElement('h3');
            title.className = 'text-2xl font-bold text-white mb-1';
            title.textContent = `${className}.${methodName}()`;
            configContent.appendChild(title);
            
            const docs = document.createElement('p');
            docs.className = 'text-gray-400 mb-6';
            docs.textContent = selectedMethod.docs;
            configContent.appendChild(docs);

            const form = document.createElement('form');
            form.id = 'param-form';
            form.className = 'space-y-4';
            form.addEventListener('submit', e => e.preventDefault());

            selectedMethod.params.forEach(param => {
                const paramDiv = document.createElement('div');
                
                const label = document.createElement('label');
                label.className = 'block text-sm font-medium mb-1';
                label.textContent = `${param.name}${param.optional ? ' (optional)' : ''}`;
                paramDiv.appendChild(label);
                
                let input;

                if (param.type === 'custom_block_events' || param.type === 'custom_item_events') {
                    input = document.createElement('div');
                    input.dataset.paramName = param.name;
                    input.dataset.type = 'custom_events';
                    const eventType = param.type === 'custom_block_events' ? 'block' : 'item';
                    const events = customComponentEvents[eventType];
                    
                    for(const eventName in events) {
                        const eventDiv = document.createElement('div');
                        eventDiv.className = 'mt-2';
                        const checkboxLabel = document.createElement('label');
                        checkboxLabel.className = 'flex items-center space-x-2 text-sm';
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.dataset.eventName = eventName;
                        checkboxLabel.appendChild(checkbox);
                        const span = document.createElement('span');
                        span.textContent = `${eventName} - ${events[eventName].docs}`;
                        checkboxLabel.appendChild(span);
                        
                        const codeTextarea = document.createElement('textarea');
                        codeTextarea.className = 'w-full h-24 code-editor text-sm mt-1 hidden';
                        codeTextarea.placeholder = `// Code for ${eventName} event...\nconst { block, player } = event;`;
                        codeTextarea.dataset.eventName = eventName;

                        checkbox.addEventListener('change', () => {
                            codeTextarea.classList.toggle('hidden', !checkbox.checked);
                        });

                        eventDiv.appendChild(checkboxLabel);
                        eventDiv.appendChild(codeTextarea);
                        input.appendChild(eventDiv);
                    }

                } else {
                    switch(param.type) {
                        case 'Vector3':
                            input = document.createElement('div');
                            input.className = 'grid grid-cols-3 gap-2';
                            input.innerHTML = `
                                <input type="number" data-name="${param.name}-x" placeholder="X" value="0" class="w-full">
                                <input type="number" data-name="${param.name}-y" placeholder="Y" value="0" class="w-full">
                                <input type="number" data-name="${param.name}-z" placeholder="Z" value="0" class="w-full">
                            `;
                            input.dataset.type = 'Vector3';
                            input.dataset.paramName = param.name;
                            break;
                        case 'json':
                        case 'code':
                            input = document.createElement('textarea');
                            input.placeholder = param.placeholder || '{}';
                            input.className = "w-full h-24 code-editor text-sm";
                            if (param.placeholder) input.value = param.placeholder;
                            break;
                        case 'array':
                            input = document.createElement('input');
                            input.type = 'text';
                            input.placeholder = param.placeholder || '';
                            break;
                        case 'enum':
                            input = document.createElement('select');
                            param.options.forEach(opt => {
                                const option = document.createElement('option');
                                option.value = opt;
                                option.textContent = opt;
                                input.appendChild(option);
                            });
                            break;
                        case 'target':
                        default:
                            input = document.createElement('input');
                            input.type = param.type === 'number' ? 'number' : 'text';
                            input.placeholder = param.placeholder || '';
                            if ((param.type === 'number' || param.type === 'string') && param.placeholder) {
                                input.value = param.placeholder;
                            }
                    }
                    if (input.tagName !== 'DIV') {
                        input.dataset.paramName = param.name;
                    }
                }
                
                paramDiv.appendChild(input);

                const paramDocs = document.createElement('p');
                paramDocs.className = 'text-xs text-gray-500 mt-1';
                paramDocs.textContent = param.docs;
                paramDiv.appendChild(paramDocs);
                
                form.appendChild(paramDiv);
            });

            configContent.appendChild(form);
            generateBtn.disabled = false;
        }

        generateBtn.addEventListener('click', () => {
            if (!selectedMethod) return;

            const form = document.getElementById('param-form');
            const values = {};

            selectedMethod.params.forEach(param => {
                const el = form.querySelector(`[data-param-name="${param.name}"]`);
                if(el) {
                    if (el.dataset.type === 'Vector3') {
                         const x = form.querySelector(`[data-name="${param.name}-x"]`).value;
                         const y = form.querySelector(`[data-name="${param.name}-y"]`).value;
                         const z = form.querySelector(`[data-name="${param.name}-z"]`).value;
                         values[param.name] = `{ x: ${x || 0}, y: ${y || 0}, z: ${z || 0} }`;
                    } else if (el.dataset.type === 'custom_events') {
                        values[param.name] = {};
                        el.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
                            const eventName = checkbox.dataset.eventName;
                            const textarea = el.querySelector(`textarea[data-event-name="${eventName}"]`);
                            values[param.name][eventName] = textarea.value.split('\n').map(line => `    ${line}`).join('\n').trim();
                        });
                    } else if(el.type === 'number') {
                        values[param.name] = el.value || 0;
                    } else {
                        values[param.name] = el.value;
                    }
                }
            });

            const generatedCode = selectedMethod.template(values).trim();
            const warning = `// WARNING: This is a powerful script. Always test in a non-essential world first.`;
            
            if (generatedCode.includes('// WARNING')) {
                 codeOutput.value = generatedCode;
            } else if (!generatedCode.toLowerCase().includes('get') && !generatedCode.includes('import { variables }') && !generatedCode.includes('import { secrets }')) {
                codeOutput.value = `${warning}\n${generatedCode}`;
            } else {
                 codeOutput.value = generatedCode;
            }
        });

        copyButton.addEventListener('click', () => {
            if(!codeOutput.value) return;
            codeOutput.select();
            document.execCommand('copy');
            copyButton.textContent = 'Copied!';
            setTimeout(() => { copyButton.textContent = 'Copy'; }, 2000);
        });
        
        clearButton.addEventListener('click', () => { codeOutput.value = ''; });

        buildNav();
    </script>
</body>
</html>