/**
 * Generated Minecraft Script API Registry
 * Generated on: 2025-09-18T04:47:52.701Z
 * Source: all minecraft script info_1758169723748.txt
 * Total Elements: 476
 */

import { ScriptRegistry } from './scriptRegistry';

export const minecraftRegistry: ScriptRegistry = {
  "metadata": {
    "generatedAt": "2025-09-18T04:47:52.698Z",
    "sourceFile": "all minecraft script info_1758169723748.txt",
    "totalElements": 476,
    "modules": [
      "@minecraft/server",
      "@minecraft/server-admin",
      "@minecraft/server-net",
      "@minecraft/server-ui"
    ],
    "parserVersion": "1.0.0"
  },
  "modules": {
    "@minecraft/server": {
      "module": "@minecraft/server",
      "version": "2.2.0",
      "description": "Contains many types related to manipulating a Minecraft world, including entities, blocks, dimensions, and more.",
      "elements": [
        {
          "id": "@minecraft/server.BlockComponentTypes",
          "name": "BlockComponentTypes",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The types of block components that are accessible via\r function Block.getComponent.\r /",
          "definition": "export enum BlockComponentTypes {\n    FluidContainer = 'minecraft:fluid_container',\r\n    /**\r\n     * @remarks\r\n     * Represents the inventory of a block in the world. Used with\r\n     * blocks like chests.\r\n     *\r\n     */\r\n    Inventory = 'minecraft:inventory',\r\n    /**\r\n     * @remarks\r\n     * When present, this block has piston-like behavior. Contains\r\n     * additional properties for discovering block piston state.\r\n     *\r\n     */\r\n    Piston = 'minecraft:piston',\r\n    /**\r\n     * @remarks\r\n     * Represents a block that can play a record.\r\n     *\r\n     */\r\n    RecordPlayer = 'minecraft:record_player',\r\n    /**\r\n     * @remarks\r\n     * Represents a block that can display text on it.\r\n     *\r\n     */\r\n    Sign = 'minecraft:sign',\r\n}\r",
          "jsdoc": "/**\r\n * The types of block components that are accessible via\r\n * function Block.getComponent.\r\n */\r",
          "enumValues": [
            {
              "name": "FluidContainer",
              "value": "minecraft:fluid_container"
            },
            {
              "name": "Inventory",
              "value": "minecraft:inventory",
              "description": ""
            },
            {
              "name": "Piston",
              "value": "minecraft:piston",
              "description": ""
            },
            {
              "name": "RecordPlayer",
              "value": "minecraft:record_player",
              "description": ""
            },
            {
              "name": "Sign",
              "value": "minecraft:sign",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponenttypes",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockPistonState",
          "name": "BlockPistonState",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "An enumeration describing the state of a block piston.\r /",
          "definition": "export enum BlockPistonState {\n    /**\r\n     * @remarks\r\n     * Whether the piston is fully expanded.\r\n     *\r\n     */\r\n    Expanded = 'Expanded',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of expanding.\r\n     *\r\n     */\r\n    Expanding = 'Expanding',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is fully retracted.\r\n     *\r\n     */\r\n    Retracted = 'Retracted',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of retracting.\r\n     *\r\n     */\r\n    Retracting = 'Retracting',\r\n}\r",
          "jsdoc": "/**\r\n * An enumeration describing the state of a block piston.\r\n */\r",
          "enumValues": [
            {
              "name": "Expanded",
              "value": "Expanded",
              "description": ""
            },
            {
              "name": "Expanding",
              "value": "Expanding",
              "description": ""
            },
            {
              "name": "Retracted",
              "value": "Retracted",
              "description": ""
            },
            {
              "name": "Retracting",
              "value": "Retracting",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockpistonstate",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockVolumeIntersection",
          "name": "BlockVolumeIntersection",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Description of the resulting intersection test on two\r BlockVolume objects\r /",
          "definition": "export enum BlockVolumeIntersection {\n    /**\r\n     * @remarks\r\n     * Volume B has no intersection points with Volume A\r\n     *\r\n     */\r\n    Disjoint = 0,\r\n    /**\r\n     * @remarks\r\n     * Volume B resides completely inside Volume A\r\n     *\r\n     */\r\n    Contains = 1,\r\n    /**\r\n     * @remarks\r\n     * Volume B partially intersects Volume A\r\n     *\r\n     */\r\n    Intersects = 2,\r\n}\r",
          "jsdoc": "/**\r\n * Description of the resulting intersection test on two\r\n * BlockVolume objects\r\n */\r",
          "enumValues": [
            {
              "name": "Disjoint",
              "value": 0,
              "description": ""
            },
            {
              "name": "Contains",
              "value": 1,
              "description": ""
            },
            {
              "name": "Intersects",
              "value": 2,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockvolumeintersection",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ButtonState",
          "name": "ButtonState",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The state of a button on a keyboard, controller, or touch\r interface.\r /",
          "definition": "export enum ButtonState {\n    Pressed = 'Pressed',\r\n    Released = 'Released',\r\n}\r",
          "jsdoc": "/**\r\n * The state of a button on a keyboard, controller, or touch\r\n * interface.\r\n */\r",
          "enumValues": [
            {
              "name": "Pressed",
              "value": "Pressed"
            },
            {
              "name": "Released",
              "value": "Released"
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "buttonstate",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CommandPermissionLevel",
          "name": "CommandPermissionLevel",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The required permission level to execute the custom command.\r /",
          "definition": "export enum CommandPermissionLevel {\n    /**\r\n     * @remarks\r\n     * Anything can run this level.\r\n     *\r\n     */\r\n    Any = 0,\r\n    /**\r\n     * @remarks\r\n     * Any operator can run this command, including command blocks.\r\n     *\r\n     */\r\n    GameDirectors = 1,\r\n    /**\r\n     * @remarks\r\n     * Any operator can run this command, but NOT command blocks.\r\n     *\r\n     */\r\n    Admin = 2,\r\n    /**\r\n     * @remarks\r\n     * Any server host can run this command.\r\n     *\r\n     */\r\n    Host = 3,\r\n    /**\r\n     * @remarks\r\n     * Only dedicated server can run this command.\r\n     *\r\n     */\r\n    Owner = 4,\r\n}\r",
          "jsdoc": "/**\r\n * The required permission level to execute the custom command.\r\n */\r",
          "enumValues": [
            {
              "name": "Any",
              "value": 0,
              "description": ""
            },
            {
              "name": "GameDirectors",
              "value": 1,
              "description": ""
            },
            {
              "name": "Admin",
              "value": 2,
              "description": ""
            },
            {
              "name": "Host",
              "value": 3,
              "description": ""
            },
            {
              "name": "Owner",
              "value": 4,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "commandpermissionlevel",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandErrorReason",
          "name": "CustomCommandErrorReason",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Reason why custom command registration failed.\r /",
          "definition": "export enum CustomCommandErrorReason {\n    /**\r\n     * @remarks\r\n     * Command name already registered.\r\n     *\r\n     */\r\n    AlreadyRegistered = 'AlreadyRegistered',\r\n    /**\r\n     * @remarks\r\n     * Custom Command references an enum that has not been\r\n     * registered.\r\n     *\r\n     */\r\n    EnumDependencyMissing = 'EnumDependencyMissing',\r\n    /**\r\n     * @remarks\r\n     * Supplied Custom Command namespace does not match previous\r\n     * registrations for this add-on.\r\n     *\r\n     */\r\n    NamespaceMismatch = 'NamespaceMismatch',\r\n    /**\r\n     * @remarks\r\n     * Too many command parameters defined in CustomCommand.\r\n     *\r\n     */\r\n    ParameterLimit = 'ParameterLimit',\r\n    /**\r\n     * @remarks\r\n     * Custom command registry can not be accessed after world\r\n     * initialized event.\r\n     *\r\n     */\r\n    RegistryInvalid = 'RegistryInvalid',\r\n    /**\r\n     * @remarks\r\n     * Command parameters cannot be redefined during reload. Only\r\n     * the script closure itself can be changed.\r\n     *\r\n     */\r\n    RegistryReadOnly = 'RegistryReadOnly',\r\n}\r",
          "jsdoc": "/**\r\n * Reason why custom command registration failed.\r\n */\r",
          "enumValues": [
            {
              "name": "AlreadyRegistered",
              "value": "AlreadyRegistered",
              "description": ""
            },
            {
              "name": "EnumDependencyMissing",
              "value": "EnumDependencyMissing",
              "description": ""
            },
            {
              "name": "NamespaceMismatch",
              "value": "NamespaceMismatch",
              "description": ""
            },
            {
              "name": "ParameterLimit",
              "value": "ParameterLimit",
              "description": ""
            },
            {
              "name": "RegistryInvalid",
              "value": "RegistryInvalid",
              "description": ""
            },
            {
              "name": "RegistryReadOnly",
              "value": "RegistryReadOnly",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommanderrorreason",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandParamType",
          "name": "CustomCommandParamType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The types of paramaters accepted by a custom command.\r /",
          "definition": "export enum CustomCommandParamType {\n    /**\r\n     * @remarks\r\n     * Block type parameter provides a {@link BlockType}.\r\n     *\r\n     */\r\n    BlockType = 'BlockType',\r\n    /**\r\n     * @remarks\r\n     * Boolean parameter.\r\n     *\r\n     */\r\n    Boolean = 'Boolean',\r\n    /**\r\n     * @remarks\r\n     * Entity selector parameter provides an {@link Entity}.\r\n     *\r\n     */\r\n    EntitySelector = 'EntitySelector',\r\n    /**\r\n     * @remarks\r\n     * Entity type parameter provides an {@link EntityType}.\r\n     *\r\n     */\r\n    EntityType = 'EntityType',\r\n    /**\r\n     * @remarks\r\n     * Command enum parameter.\r\n     *\r\n     */\r\n    Enum = 'Enum',\r\n    /**\r\n     * @remarks\r\n     * Float parameter.\r\n     *\r\n     */\r\n    Float = 'Float',\r\n    /**\r\n     * @remarks\r\n     * Integer parameter.\r\n     *\r\n     */\r\n    Integer = 'Integer',\r\n    /**\r\n     * @remarks\r\n     * Item type parameter provides an {@link ItemType}.\r\n     *\r\n     */\r\n    ItemType = 'ItemType',\r\n    /**\r\n     * @remarks\r\n     * Location parameter provides a {@link\r\n     * @minecraft/server.Location}.\r\n     *\r\n     */\r\n    Location = 'Location',\r\n    /**\r\n     * @remarks\r\n     * Player selector parameter provides a {@link Player}.\r\n     *\r\n     */\r\n    PlayerSelector = 'PlayerSelector',\r\n    /**\r\n     * @remarks\r\n     * String parameter.\r\n     *\r\n     */\r\n    String = 'String',\r\n}\r",
          "jsdoc": "/**\r\n * The types of paramaters accepted by a custom command.\r\n */\r",
          "enumValues": [
            {
              "name": "BlockType",
              "value": "BlockType",
              "description": ""
            },
            {
              "name": "Boolean",
              "value": "Boolean",
              "description": ""
            },
            {
              "name": "EntitySelector",
              "value": "EntitySelector",
              "description": ""
            },
            {
              "name": "EntityType",
              "value": "EntityType",
              "description": ""
            },
            {
              "name": "Enum",
              "value": "Enum",
              "description": ""
            },
            {
              "name": "Float",
              "value": "Float",
              "description": ""
            },
            {
              "name": "Integer",
              "value": "Integer",
              "description": ""
            },
            {
              "name": "ItemType",
              "value": "ItemType",
              "description": ""
            },
            {
              "name": "Location",
              "value": "Location",
              "description": ""
            },
            {
              "name": "PlayerSelector",
              "value": "PlayerSelector",
              "description": ""
            },
            {
              "name": "String",
              "value": "String",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommandparamtype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandSource",
          "name": "CustomCommandSource",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Who executed the command.\r /",
          "definition": "export enum CustomCommandSource {\n    /**\r\n     * @remarks\r\n     * Command originated from a command block.\r\n     *\r\n     */\r\n    Block = 'Block',\r\n    /**\r\n     * @remarks\r\n     * Command originated from an entity or player.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    NPCDialogue = 'NPCDialogue',\r\n    /**\r\n     * @remarks\r\n     * Command originated from the server.\r\n     *\r\n     */\r\n    Server = 'Server',\r\n}\r",
          "jsdoc": "/**\r\n * Who executed the command.\r\n */\r",
          "enumValues": [
            {
              "name": "Block",
              "value": "Block",
              "description": ""
            },
            {
              "name": "Entity",
              "value": "Entity",
              "description": ""
            },
            {
              "name": "NPCDialogue",
              "value": "NPCDialogue"
            },
            {
              "name": "Server",
              "value": "Server",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommandsource",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandStatus",
          "name": "CustomCommandStatus",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Command originated from the server.",
          "definition": "export enum CustomCommandStatus {\n    Success = 0,\r\n    Failure = 1,\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Command originated from the server.\r\n     *\r\n     */\r",
          "enumValues": [
            {
              "name": "Success",
              "value": 0
            },
            {
              "name": "Failure",
              "value": 1
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommandstatus",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomComponentNameErrorReason",
          "name": "CustomComponentNameErrorReason",
          "type": "enum",
          "module": "@minecraft/server",
          "definition": "export enum CustomComponentNameErrorReason {\n    NoNamespace = 1,\r\n    DisallowedNamespace = 2,\r\n}\r",
          "jsdoc": "",
          "enumValues": [
            {
              "name": "NoNamespace",
              "value": 1
            },
            {
              "name": "DisallowedNamespace",
              "value": 2
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcomponentnameerrorreason",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Difficulty",
          "name": "Difficulty",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "An enumeration for the various difficulty levels of\r Minecraft.\r /",
          "definition": "export enum Difficulty {\n    /**\r\n     * @remarks\r\n     * Easy difficulty level.\r\n     *\r\n     */\r\n    Easy = 'Easy',\r\n    /**\r\n     * @remarks\r\n     * Hard difficulty level.\r\n     *\r\n     */\r\n    Hard = 'Hard',\r\n    /**\r\n     * @remarks\r\n     * Normal difficulty level.\r\n     *\r\n     */\r\n    Normal = 'Normal',\r\n    /**\r\n     * @remarks\r\n     * Peaceful difficulty level.\r\n     *\r\n     */\r\n    Peaceful = 'Peaceful',\r\n}\r",
          "jsdoc": "/**\r\n * An enumeration for the various difficulty levels of\r\n * Minecraft.\r\n */\r",
          "enumValues": [
            {
              "name": "Easy",
              "value": "Easy",
              "description": ""
            },
            {
              "name": "Hard",
              "value": "Hard",
              "description": ""
            },
            {
              "name": "Normal",
              "value": "Normal",
              "description": ""
            },
            {
              "name": "Peaceful",
              "value": "Peaceful",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "difficulty",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Direction",
          "name": "Direction",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "A general purpose relative direction enumeration.\r /",
          "definition": "export enum Direction {\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} beneath (y - 1) of this item.\r\n     *\r\n     */\r\n    Down = 'Down',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east (x + 1) of this item.\r\n     *\r\n     */\r\n    East = 'East',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east (z + 1) of this item.\r\n     *\r\n     */\r\n    North = 'North',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the south (z - 1) of this item.\r\n     *\r\n     */\r\n    South = 'South',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} above (y + 1) of this item.\r\n     *\r\n     */\r\n    Up = 'Up',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the west (x - 1) of this item.\r\n     *\r\n     */\r\n    West = 'West',\r\n}\r",
          "jsdoc": "/**\r\n * A general purpose relative direction enumeration.\r\n */\r",
          "enumValues": [
            {
              "name": "Down",
              "value": "Down",
              "description": ""
            },
            {
              "name": "East",
              "value": "East",
              "description": ""
            },
            {
              "name": "North",
              "value": "North",
              "description": ""
            },
            {
              "name": "South",
              "value": "South",
              "description": ""
            },
            {
              "name": "Up",
              "value": "Up",
              "description": ""
            },
            {
              "name": "West",
              "value": "West",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "direction",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.DisplaySlotId",
          "name": "DisplaySlotId",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Specifies a mechanism for displaying scores on a scoreboard.\r /",
          "definition": "export enum DisplaySlotId {\n    /**\r\n     * @remarks\r\n     * Displays the score below the player's name.\r\n     *\r\n     */\r\n    BelowName = 'BelowName',\r\n    /**\r\n     * @remarks\r\n     * Displays the score as a list on the pause screen.\r\n     *\r\n     */\r\n    List = 'List',\r\n    /**\r\n     * @remarks\r\n     * Displays the score on the side of the player's screen.\r\n     *\r\n     */\r\n    Sidebar = 'Sidebar',\r\n}\r",
          "jsdoc": "/**\r\n * Specifies a mechanism for displaying scores on a scoreboard.\r\n */\r",
          "enumValues": [
            {
              "name": "BelowName",
              "value": "BelowName",
              "description": ""
            },
            {
              "name": "List",
              "value": "List",
              "description": ""
            },
            {
              "name": "Sidebar",
              "value": "Sidebar",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "displayslotid",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.DyeColor",
          "name": "DyeColor",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Specifies different colors for use as dye.\r /",
          "definition": "export enum DyeColor {\n    /**\r\n     * @remarks\r\n     * Black dye color.\r\n     *\r\n     */\r\n    Black = 'Black',\r\n    /**\r\n     * @remarks\r\n     * Blue dye color.\r\n     *\r\n     */\r\n    Blue = 'Blue',\r\n    /**\r\n     * @remarks\r\n     * Brown dye color.\r\n     *\r\n     */\r\n    Brown = 'Brown',\r\n    /**\r\n     * @remarks\r\n     * Cyan dye color.\r\n     *\r\n     */\r\n    Cyan = 'Cyan',\r\n    /**\r\n     * @remarks\r\n     * Gray dye color.\r\n     *\r\n     */\r\n    Gray = 'Gray',\r\n    /**\r\n     * @remarks\r\n     * Green dye color.\r\n     *\r\n     */\r\n    Green = 'Green',\r\n    /**\r\n     * @remarks\r\n     * Light blue dye color.\r\n     *\r\n     */\r\n    LightBlue = 'LightBlue',\r\n    /**\r\n     * @remarks\r\n     * Lime dye color.\r\n     *\r\n     */\r\n    Lime = 'Lime',\r\n    /**\r\n     * @remarks\r\n     * Magenta dye color.\r\n     *\r\n     */\r\n    Magenta = 'Magenta',\r\n    /**\r\n     * @remarks\r\n     * Orange dye color.\r\n     *\r\n     */\r\n    Orange = 'Orange',\r\n    /**\r\n     * @remarks\r\n     * Pink dye color.\r\n     *\r\n     */\r\n    Pink = 'Pink',\r\n    /**\r\n     * @remarks\r\n     * Purple dye color.\r\n     *\r\n     */\r\n    Purple = 'Purple',\r\n    /**\r\n     * @remarks\r\n     * Red dye color.\r\n     *\r\n     */\r\n    Red = 'Red',\r\n    /**\r\n     * @remarks\r\n     * Silver dye color.\r\n     *\r\n     */\r\n    Silver = 'Silver',\r\n    /**\r\n     * @remarks\r\n     * White dye color.\r\n     *\r\n     */\r\n    White = 'White',\r\n    /**\r\n     * @remarks\r\n     * Yellow dye color.\r\n     *\r\n     */\r\n    Yellow = 'Yellow',\r\n}\r",
          "jsdoc": "/**\r\n * Specifies different colors for use as dye.\r\n */\r",
          "enumValues": [
            {
              "name": "Black",
              "value": "Black",
              "description": ""
            },
            {
              "name": "Blue",
              "value": "Blue",
              "description": ""
            },
            {
              "name": "Brown",
              "value": "Brown",
              "description": ""
            },
            {
              "name": "Cyan",
              "value": "Cyan",
              "description": ""
            },
            {
              "name": "Gray",
              "value": "Gray",
              "description": ""
            },
            {
              "name": "Green",
              "value": "Green",
              "description": ""
            },
            {
              "name": "LightBlue",
              "value": "LightBlue",
              "description": ""
            },
            {
              "name": "Lime",
              "value": "Lime",
              "description": ""
            },
            {
              "name": "Magenta",
              "value": "Magenta",
              "description": ""
            },
            {
              "name": "Orange",
              "value": "Orange",
              "description": ""
            },
            {
              "name": "Pink",
              "value": "Pink",
              "description": ""
            },
            {
              "name": "Purple",
              "value": "Purple",
              "description": ""
            },
            {
              "name": "Red",
              "value": "Red",
              "description": ""
            },
            {
              "name": "Silver",
              "value": "Silver",
              "description": ""
            },
            {
              "name": "White",
              "value": "White",
              "description": ""
            },
            {
              "name": "Yellow",
              "value": "Yellow",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "dyecolor",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EasingType",
          "name": "EasingType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Yellow dye color.",
          "definition": "export enum EasingType {\n    InBack = 'InBack',\r\n    InBounce = 'InBounce',\r\n    InCirc = 'InCirc',\r\n    InCubic = 'InCubic',\r\n    InElastic = 'InElastic',\r\n    InExpo = 'InExpo',\r\n    InOutBack = 'InOutBack',\r\n    InOutBounce = 'InOutBounce',\r\n    InOutCirc = 'InOutCirc',\r\n    InOutCubic = 'InOutCubic',\r\n    InOutElastic = 'InOutElastic',\r\n    InOutExpo = 'InOutExpo',\r\n    InOutQuad = 'InOutQuad',\r\n    InOutQuart = 'InOutQuart',\r\n    InOutQuint = 'InOutQuint',\r\n    InOutSine = 'InOutSine',\r\n    InQuad = 'InQuad',\r\n    InQuart = 'InQuart',\r\n    InQuint = 'InQuint',\r\n    InSine = 'InSine',\r\n    Linear = 'Linear',\r\n    OutBack = 'OutBack',\r\n    OutBounce = 'OutBounce',\r\n    OutCirc = 'OutCirc',\r\n    OutCubic = 'OutCubic',\r\n    OutElastic = 'OutElastic',\r\n    OutExpo = 'OutExpo',\r\n    OutQuad = 'OutQuad',\r\n    OutQuart = 'OutQuart',\r\n    OutQuint = 'OutQuint',\r\n    OutSine = 'OutSine',\r\n    Spring = 'Spring',\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Yellow dye color.\r\n     *\r\n     */\r",
          "enumValues": [
            {
              "name": "InBack",
              "value": "InBack"
            },
            {
              "name": "InBounce",
              "value": "InBounce"
            },
            {
              "name": "InCirc",
              "value": "InCirc"
            },
            {
              "name": "InCubic",
              "value": "InCubic"
            },
            {
              "name": "InElastic",
              "value": "InElastic"
            },
            {
              "name": "InExpo",
              "value": "InExpo"
            },
            {
              "name": "InOutBack",
              "value": "InOutBack"
            },
            {
              "name": "InOutBounce",
              "value": "InOutBounce"
            },
            {
              "name": "InOutCirc",
              "value": "InOutCirc"
            },
            {
              "name": "InOutCubic",
              "value": "InOutCubic"
            },
            {
              "name": "InOutElastic",
              "value": "InOutElastic"
            },
            {
              "name": "InOutExpo",
              "value": "InOutExpo"
            },
            {
              "name": "InOutQuad",
              "value": "InOutQuad"
            },
            {
              "name": "InOutQuart",
              "value": "InOutQuart"
            },
            {
              "name": "InOutQuint",
              "value": "InOutQuint"
            },
            {
              "name": "InOutSine",
              "value": "InOutSine"
            },
            {
              "name": "InQuad",
              "value": "InQuad"
            },
            {
              "name": "InQuart",
              "value": "InQuart"
            },
            {
              "name": "InQuint",
              "value": "InQuint"
            },
            {
              "name": "InSine",
              "value": "InSine"
            },
            {
              "name": "Linear",
              "value": "Linear"
            },
            {
              "name": "OutBack",
              "value": "OutBack"
            },
            {
              "name": "OutBounce",
              "value": "OutBounce"
            },
            {
              "name": "OutCirc",
              "value": "OutCirc"
            },
            {
              "name": "OutCubic",
              "value": "OutCubic"
            },
            {
              "name": "OutElastic",
              "value": "OutElastic"
            },
            {
              "name": "OutExpo",
              "value": "OutExpo"
            },
            {
              "name": "OutQuad",
              "value": "OutQuad"
            },
            {
              "name": "OutQuart",
              "value": "OutQuart"
            },
            {
              "name": "OutQuint",
              "value": "OutQuint"
            },
            {
              "name": "OutSine",
              "value": "OutSine"
            },
            {
              "name": "Spring",
              "value": "Spring"
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "easingtype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EnchantmentSlot",
          "name": "EnchantmentSlot",
          "type": "enum",
          "module": "@minecraft/server",
          "definition": "export enum EnchantmentSlot {\n    ArmorFeet = 'ArmorFeet',\r\n    ArmorHead = 'ArmorHead',\r\n    ArmorLegs = 'ArmorLegs',\r\n    ArmorTorso = 'ArmorTorso',\r\n    Axe = 'Axe',\r\n    Bow = 'Bow',\r\n    CarrotStick = 'CarrotStick',\r\n    CosmeticHead = 'CosmeticHead',\r\n    Crossbow = 'Crossbow',\r\n    Elytra = 'Elytra',\r\n    FishingRod = 'FishingRod',\r\n    Flintsteel = 'Flintsteel',\r\n    Hoe = 'Hoe',\r\n    Pickaxe = 'Pickaxe',\r\n    Shears = 'Shears',\r\n    Shield = 'Shield',\r\n    Shovel = 'Shovel',\r\n    Spear = 'Spear',\r\n    Sword = 'Sword',\r\n}\r",
          "jsdoc": "",
          "enumValues": [
            {
              "name": "ArmorFeet",
              "value": "ArmorFeet"
            },
            {
              "name": "ArmorHead",
              "value": "ArmorHead"
            },
            {
              "name": "ArmorLegs",
              "value": "ArmorLegs"
            },
            {
              "name": "ArmorTorso",
              "value": "ArmorTorso"
            },
            {
              "name": "Axe",
              "value": "Axe"
            },
            {
              "name": "Bow",
              "value": "Bow"
            },
            {
              "name": "CarrotStick",
              "value": "CarrotStick"
            },
            {
              "name": "CosmeticHead",
              "value": "CosmeticHead"
            },
            {
              "name": "Crossbow",
              "value": "Crossbow"
            },
            {
              "name": "Elytra",
              "value": "Elytra"
            },
            {
              "name": "FishingRod",
              "value": "FishingRod"
            },
            {
              "name": "Flintsteel",
              "value": "Flintsteel"
            },
            {
              "name": "Hoe",
              "value": "Hoe"
            },
            {
              "name": "Pickaxe",
              "value": "Pickaxe"
            },
            {
              "name": "Shears",
              "value": "Shears"
            },
            {
              "name": "Shield",
              "value": "Shield"
            },
            {
              "name": "Shovel",
              "value": "Shovel"
            },
            {
              "name": "Spear",
              "value": "Spear"
            },
            {
              "name": "Sword",
              "value": "Sword"
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "enchantmentslot",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityComponentTypes",
          "name": "EntityComponentTypes",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The types of entity components that are accessible via\r function Entity.getComponent.\r /",
          "definition": "export enum EntityComponentTypes {\n    /**\r\n     * @remarks\r\n     * When added, this component makes the entity spawn with a\r\n     * rider of the specified entityType.\r\n     *\r\n     */\r\n    AddRider = 'minecraft:addrider',\r\n    /**\r\n     * @remarks\r\n     * Adds a timer for the entity to grow up. It can be\r\n     * accelerated by giving the entity the items it likes as\r\n     * defined by feedItems.\r\n     *\r\n     */\r\n    Ageable = 'minecraft:ageable',\r\n    /**\r\n     * @remarks\r\n     * Defines what blocks this entity can breathe in and gives\r\n     * them the ability to suffocate.\r\n     *\r\n     */\r\n    Breathable = 'minecraft:breathable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * climb up ladders.\r\n     *\r\n     */\r\n    CanClimb = 'minecraft:can_climb',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * fly, and the pathfinder won't be restricted to paths where a\r\n     * solid block is required underneath it.\r\n     *\r\n     */\r\n    CanFly = 'minecraft:can_fly',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * power jump like the horse does within Minecraft.\r\n     *\r\n     */\r\n    CanPowerJump = 'minecraft:can_power_jump',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's color. Only works on certain entities\r\n     * that have predefined color values (e.g., sheep, llama,\r\n     * shulker).\r\n     *\r\n     */\r\n    Color = 'minecraft:color',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's secondary color. Only works on certain\r\n     * entities that have predefined secondary color values (e.g.,\r\n     * tropical fish).\r\n     *\r\n     */\r\n    Color2 = 'minecraft:color2',\r\n    CursorInventory = 'minecraft:cursor_inventory',\r\n    /**\r\n     * @remarks\r\n     * Provides access to a mob's equipment slots. This component\r\n     * exists for all mob entities.\r\n     *\r\n     */\r\n    Equippable = 'minecraft:equippable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity\r\n     * doesn't take damage from fire.\r\n     *\r\n     */\r\n    FireImmune = 'minecraft:fire_immune',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can\r\n     * float in liquid blocks.\r\n     *\r\n     */\r\n    FloatsInLiquid = 'minecraft:floats_in_liquid',\r\n    /**\r\n     * @remarks\r\n     * Represents the flying speed of an entity.\r\n     *\r\n     */\r\n    FlyingSpeed = 'minecraft:flying_speed',\r\n    /**\r\n     * @remarks\r\n     * Defines how much friction affects this entity.\r\n     *\r\n     */\r\n    FrictionModifier = 'minecraft:friction_modifier',\r\n    /**\r\n     * @remarks\r\n     * Defines the interactions with this entity for healing it.\r\n     *\r\n     */\r\n    Healable = 'minecraft:healable',\r\n    /**\r\n     * @remarks\r\n     * Defines the health properties of an entity.\r\n     *\r\n     */\r\n    Health = 'minecraft:health',\r\n    /**\r\n     * @remarks\r\n     * Defines this entity's inventory properties.\r\n     *\r\n     */\r\n    Inventory = 'minecraft:inventory',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is a\r\n     * baby.\r\n     *\r\n     */\r\n    IsBaby = 'minecraft:is_baby',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * charged.\r\n     *\r\n     */\r\n    IsCharged = 'minecraft:is_charged',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently carrying a chest.\r\n     *\r\n     */\r\n    IsChested = 'minecraft:is_chested',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that dyes can be used\r\n     * on this entity to change its color.\r\n     *\r\n     */\r\n    IsDyeable = 'minecraft:is_dyeable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can\r\n     * hide from hostile mobs while invisible.\r\n     *\r\n     */\r\n    IsHiddenWhenInvisible = 'minecraft:is_hidden_when_invisible',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity this\r\n     * currently on fire.\r\n     *\r\n     */\r\n    IsIgnited = 'minecraft:is_ignited',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is an\r\n     * illager captain.\r\n     *\r\n     */\r\n    IsIllagerCaptain = 'minecraft:is_illager_captain',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently saddled.\r\n     *\r\n     */\r\n    IsSaddled = 'minecraft:is_saddled',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently shaking.\r\n     *\r\n     */\r\n    IsShaking = 'minecraft:is_shaking',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently sheared.\r\n     *\r\n     */\r\n    IsSheared = 'minecraft:is_sheared',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can be\r\n     * stacked.\r\n     *\r\n     */\r\n    IsStackable = 'minecraft:is_stackable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently stunned.\r\n     *\r\n     */\r\n    IsStunned = 'minecraft:is_stunned',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently tamed.\r\n     *\r\n     */\r\n    IsTamed = 'minecraft:is_tamed',\r\n    /**\r\n     * @remarks\r\n     * If added onto the entity, this indicates that the entity\r\n     * represents a free-floating item in the world. Lets you\r\n     * retrieve the actual item stack contents via the itemStack\r\n     * property.\r\n     *\r\n     */\r\n    Item = 'minecraft:item',\r\n    /**\r\n     * @remarks\r\n     * Defines the base movement speed in lava of this entity.\r\n     *\r\n     */\r\n    LavaMovement = 'minecraft:lava_movement',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to be leashed and defines the conditions\r\n     * and events for this entity when is leashed.\r\n     *\r\n     */\r\n    Leashable = 'minecraft:leashable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity\r\n     * contains an additional variant value. Can be used to further\r\n     * differentiate variants.\r\n     *\r\n     */\r\n    MarkVariant = 'minecraft:mark_variant',\r\n    /**\r\n     * @remarks\r\n     * Defines the general movement speed of this entity.\r\n     *\r\n     */\r\n    Movement = 'minecraft:movement',\r\n    /**\r\n     * @remarks\r\n     * When added, this movement control allows the mob to swim in\r\n     * water and walk on land.\r\n     *\r\n     */\r\n    MovementAmphibious = 'minecraft:movement.amphibious',\r\n    /**\r\n     * @remarks\r\n     * When added, this component allows the movement of an entity.\r\n     *\r\n     */\r\n    MovementBasic = 'minecraft:movement.basic',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to fly.\r\n     *\r\n     */\r\n    MovementFly = 'minecraft:movement.fly',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control allows a mob to fly, swim,\r\n     * climb, etc.\r\n     *\r\n     */\r\n    MovementGeneric = 'minecraft:movement.generic',\r\n    /**\r\n     * @remarks\r\n     * When added, this movement control allows the mob to glide.\r\n     *\r\n     */\r\n    MovementGlide = 'minecraft:movement.glide',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to hover.\r\n     *\r\n     */\r\n    MovementHover = 'minecraft:movement.hover',\r\n    /**\r\n     * @remarks\r\n     * Move control that causes the mob to jump as it moves with a\r\n     * specified delay between jumps.\r\n     *\r\n     */\r\n    MovementJump = 'minecraft:movement.jump',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to hop as it\r\n     * moves.\r\n     *\r\n     */\r\n    MovementSkip = 'minecraft:movement.skip',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to sway side to\r\n     * side giving the impression it is swimming.\r\n     *\r\n     */\r\n    MovementSway = 'minecraft:movement.sway',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths that include vertical\r\n     * walls (for example, like Minecraft spiders do.)\r\n     *\r\n     */\r\n    NavigationClimb = 'minecraft:navigation.climb',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by flying around the\r\n     * air like the regular Ghast.\r\n     *\r\n     */\r\n    NavigationFloat = 'minecraft:navigation.float',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths in the air (for\r\n     * example, like Minecraft parrots do.)\r\n     *\r\n     */\r\n    NavigationFly = 'minecraft:navigation.fly',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by walking, swimming,\r\n     * flying and/or climbing around and jumping up and down a\r\n     * block.\r\n     *\r\n     */\r\n    NavigationGeneric = 'minecraft:navigation.generic',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths in the air (for\r\n     * example, like the Minecraft Bees do.) Keeps them from\r\n     * falling out of the skies and doing predictive movement.\r\n     *\r\n     */\r\n    NavigationHover = 'minecraft:navigation.hover',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by walking around and\r\n     * jumping up and down a block like regular mobs.\r\n     *\r\n     */\r\n    NavigationWalk = 'minecraft:navigation.walk',\r\n    /**\r\n     * @remarks\r\n     * When present on an entity, this entity is on fire.\r\n     *\r\n     */\r\n    OnFire = 'minecraft:onfire',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the exhaustion of a player. This\r\n     * is only available on players.\r\n     *\r\n     */\r\n    Exhaustion = 'minecraft:player.exhaustion',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the hunger of a player. This is\r\n     * only available on players.\r\n     *\r\n     */\r\n    Hunger = 'minecraft:player.hunger',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the saturation of a player. This\r\n     * is only available on players.\r\n     *\r\n     */\r\n    Saturation = 'minecraft:player.saturation',\r\n    /**\r\n     * @remarks\r\n     * The projectile component controls the properties of a\r\n     * projectile entity and allows it to be shot in a given\r\n     * direction. This component is present when the entity has the\r\n     * minecraft:projectile component.\r\n     *\r\n     */\r\n    Projectile = 'minecraft:projectile',\r\n    /**\r\n     * @remarks\r\n     * Sets the distance through which the entity can push through.\r\n     *\r\n     */\r\n    PushThrough = 'minecraft:push_through',\r\n    /**\r\n     * @remarks\r\n     * When added, this component adds the capability that an\r\n     * entity can be ridden by another entity.\r\n     *\r\n     */\r\n    Rideable = 'minecraft:rideable',\r\n    /**\r\n     * @remarks\r\n     * This component is added to any entity when it is riding\r\n     * another entity.\r\n     *\r\n     */\r\n    Riding = 'minecraft:riding',\r\n    /**\r\n     * @remarks\r\n     * Sets the entity's visual size.\r\n     *\r\n     */\r\n    Scale = 'minecraft:scale',\r\n    /**\r\n     * @remarks\r\n     * Skin Id value. Can be used to differentiate skins, such as\r\n     * base skins for villagers.\r\n     *\r\n     */\r\n    SkinId = 'minecraft:skin_id',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's strength to carry items.\r\n     *\r\n     */\r\n    Strength = 'minecraft:strength',\r\n    /**\r\n     * @remarks\r\n     * Defines the rules for an entity to be tamed by the player.\r\n     *\r\n     */\r\n    Tameable = 'minecraft:tameable',\r\n    /**\r\n     * @remarks\r\n     * Contains options for taming a rideable entity based on the\r\n     * entity that mounts it.\r\n     *\r\n     */\r\n    TameMount = 'minecraft:tamemount',\r\n    /**\r\n     * @remarks\r\n     * Used to determine the type families the entity belongs to.\r\n     *\r\n     */\r\n    TypeFamily = 'minecraft:type_family',\r\n    /**\r\n     * @remarks\r\n     * Defines the general movement speed underwater of this\r\n     * entity.\r\n     *\r\n     */\r\n    UnderwaterMovement = 'minecraft:underwater_movement',\r\n    /**\r\n     * @remarks\r\n     * Used to differentiate the component group of a variant of an\r\n     * entity from others. (e.g. ocelot, villager).\r\n     *\r\n     */\r\n    Variant = 'minecraft:variant',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity wants\r\n     * to become a jockey.\r\n     *\r\n     */\r\n    WantsJockey = 'minecraft:wants_jockey',\r\n}\r",
          "jsdoc": "/**\r\n * The types of entity components that are accessible via\r\n * function Entity.getComponent.\r\n */\r",
          "enumValues": [
            {
              "name": "AddRider",
              "value": "minecraft:addrider",
              "description": ""
            },
            {
              "name": "Ageable",
              "value": "minecraft:ageable",
              "description": ""
            },
            {
              "name": "Breathable",
              "value": "minecraft:breathable",
              "description": ""
            },
            {
              "name": "CanClimb",
              "value": "minecraft:can_climb",
              "description": ""
            },
            {
              "name": "CanFly",
              "value": "minecraft:can_fly",
              "description": ""
            },
            {
              "name": "CanPowerJump",
              "value": "minecraft:can_power_jump",
              "description": ""
            },
            {
              "name": "Color",
              "value": "minecraft:color",
              "description": ""
            },
            {
              "name": "Color2",
              "value": "minecraft:color2",
              "description": ""
            },
            {
              "name": "CursorInventory",
              "value": "minecraft:cursor_inventory"
            },
            {
              "name": "Equippable",
              "value": "minecraft:equippable",
              "description": ""
            },
            {
              "name": "FireImmune",
              "value": "minecraft:fire_immune",
              "description": ""
            },
            {
              "name": "FloatsInLiquid",
              "value": "minecraft:floats_in_liquid",
              "description": ""
            },
            {
              "name": "FlyingSpeed",
              "value": "minecraft:flying_speed",
              "description": ""
            },
            {
              "name": "FrictionModifier",
              "value": "minecraft:friction_modifier",
              "description": ""
            },
            {
              "name": "Healable",
              "value": "minecraft:healable",
              "description": ""
            },
            {
              "name": "Health",
              "value": "minecraft:health",
              "description": ""
            },
            {
              "name": "Inventory",
              "value": "minecraft:inventory",
              "description": ""
            },
            {
              "name": "IsBaby",
              "value": "minecraft:is_baby",
              "description": ""
            },
            {
              "name": "IsCharged",
              "value": "minecraft:is_charged",
              "description": ""
            },
            {
              "name": "IsChested",
              "value": "minecraft:is_chested",
              "description": ""
            },
            {
              "name": "IsDyeable",
              "value": "minecraft:is_dyeable",
              "description": ""
            },
            {
              "name": "IsHiddenWhenInvisible",
              "value": "minecraft:is_hidden_when_invisible",
              "description": ""
            },
            {
              "name": "IsIgnited",
              "value": "minecraft:is_ignited",
              "description": ""
            },
            {
              "name": "IsIllagerCaptain",
              "value": "minecraft:is_illager_captain",
              "description": ""
            },
            {
              "name": "IsSaddled",
              "value": "minecraft:is_saddled",
              "description": ""
            },
            {
              "name": "IsShaking",
              "value": "minecraft:is_shaking",
              "description": ""
            },
            {
              "name": "IsSheared",
              "value": "minecraft:is_sheared",
              "description": ""
            },
            {
              "name": "IsStackable",
              "value": "minecraft:is_stackable",
              "description": ""
            },
            {
              "name": "IsStunned",
              "value": "minecraft:is_stunned",
              "description": ""
            },
            {
              "name": "IsTamed",
              "value": "minecraft:is_tamed",
              "description": ""
            },
            {
              "name": "Item",
              "value": "minecraft:item",
              "description": ""
            },
            {
              "name": "LavaMovement",
              "value": "minecraft:lava_movement",
              "description": ""
            },
            {
              "name": "Leashable",
              "value": "minecraft:leashable",
              "description": ""
            },
            {
              "name": "MarkVariant",
              "value": "minecraft:mark_variant",
              "description": ""
            },
            {
              "name": "Movement",
              "value": "minecraft:movement",
              "description": ""
            },
            {
              "name": "MovementAmphibious",
              "value": "minecraft:movement.amphibious",
              "description": ""
            },
            {
              "name": "MovementBasic",
              "value": "minecraft:movement.basic",
              "description": ""
            },
            {
              "name": "MovementFly",
              "value": "minecraft:movement.fly",
              "description": ""
            },
            {
              "name": "MovementGeneric",
              "value": "minecraft:movement.generic",
              "description": ""
            },
            {
              "name": "MovementGlide",
              "value": "minecraft:movement.glide",
              "description": ""
            },
            {
              "name": "MovementHover",
              "value": "minecraft:movement.hover",
              "description": ""
            },
            {
              "name": "MovementJump",
              "value": "minecraft:movement.jump",
              "description": ""
            },
            {
              "name": "MovementSkip",
              "value": "minecraft:movement.skip",
              "description": ""
            },
            {
              "name": "MovementSway",
              "value": "minecraft:movement.sway",
              "description": ""
            },
            {
              "name": "NavigationClimb",
              "value": "minecraft:navigation.climb",
              "description": ""
            },
            {
              "name": "NavigationFloat",
              "value": "minecraft:navigation.float",
              "description": ""
            },
            {
              "name": "NavigationFly",
              "value": "minecraft:navigation.fly",
              "description": ""
            },
            {
              "name": "NavigationGeneric",
              "value": "minecraft:navigation.generic",
              "description": ""
            },
            {
              "name": "NavigationHover",
              "value": "minecraft:navigation.hover",
              "description": ""
            },
            {
              "name": "NavigationWalk",
              "value": "minecraft:navigation.walk",
              "description": ""
            },
            {
              "name": "OnFire",
              "value": "minecraft:onfire",
              "description": ""
            },
            {
              "name": "Exhaustion",
              "value": "minecraft:player.exhaustion",
              "description": ""
            },
            {
              "name": "Hunger",
              "value": "minecraft:player.hunger",
              "description": ""
            },
            {
              "name": "Saturation",
              "value": "minecraft:player.saturation",
              "description": ""
            },
            {
              "name": "Projectile",
              "value": "minecraft:projectile",
              "description": ""
            },
            {
              "name": "PushThrough",
              "value": "minecraft:push_through",
              "description": ""
            },
            {
              "name": "Rideable",
              "value": "minecraft:rideable",
              "description": ""
            },
            {
              "name": "Riding",
              "value": "minecraft:riding",
              "description": ""
            },
            {
              "name": "Scale",
              "value": "minecraft:scale",
              "description": ""
            },
            {
              "name": "SkinId",
              "value": "minecraft:skin_id",
              "description": ""
            },
            {
              "name": "Strength",
              "value": "minecraft:strength",
              "description": ""
            },
            {
              "name": "Tameable",
              "value": "minecraft:tameable",
              "description": ""
            },
            {
              "name": "TameMount",
              "value": "minecraft:tamemount",
              "description": ""
            },
            {
              "name": "TypeFamily",
              "value": "minecraft:type_family",
              "description": ""
            },
            {
              "name": "UnderwaterMovement",
              "value": "minecraft:underwater_movement",
              "description": ""
            },
            {
              "name": "Variant",
              "value": "minecraft:variant",
              "description": ""
            },
            {
              "name": "WantsJockey",
              "value": "minecraft:wants_jockey",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitycomponenttypes",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityDamageCause",
          "name": "EntityDamageCause",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Describes the source of damage from an Entity.\r /",
          "definition": "export enum EntityDamageCause {\n    /**\r\n     * @remarks\r\n     * Damage caused by a falling anvil.\r\n     *\r\n     */\r\n    anvil = 'anvil',\r\n    /**\r\n     * @remarks\r\n     * Damage caused from a non-Entity explosion. For example, an\r\n     * exploding bed.\r\n     *\r\n     */\r\n    blockExplosion = 'blockExplosion',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by Campfires.\r\n     *\r\n     */\r\n    campfire = 'campfire',\r\n    /**\r\n     * @remarks\r\n     * Unused.\r\n     *\r\n     */\r\n    charging = 'charging',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by physically touching an Entity or Block. For\r\n     * example, touching a Sweet Berry bush or Pufferfish.\r\n     *\r\n     */\r\n    contact = 'contact',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being out of air and inside a\r\n     * liquid block.\r\n     *\r\n     */\r\n    drowning = 'drowning',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity attack.\r\n     *\r\n     */\r\n    entityAttack = 'entityAttack',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity explosion. For example, a Creeper\r\n     * or Wither.\r\n     *\r\n     */\r\n    entityExplosion = 'entityExplosion',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by falling onto the ground.\r\n     *\r\n     */\r\n    fall = 'fall',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by falling blocks. Note: Anvils and\r\n     * Stalactites have their own damage causes.\r\n     *\r\n     */\r\n    fallingBlock = 'fallingBlock',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by catching on fire.\r\n     *\r\n     */\r\n    fire = 'fire',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by burning over time.\r\n     *\r\n     */\r\n    fireTick = 'fireTick',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by fireworks.\r\n     *\r\n     */\r\n    fireworks = 'fireworks',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by flying into a wall at high speed while\r\n     * gliding with Elytra.\r\n     *\r\n     */\r\n    flyIntoWall = 'flyIntoWall',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by staying inside a Powder Snow block.\r\n     *\r\n     */\r\n    freezing = 'freezing',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Lava block.\r\n     *\r\n     */\r\n    lava = 'lava',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by being struck by lightning.\r\n     *\r\n     */\r\n    lightning = 'lightning',\r\n    maceSmash = 'maceSmash',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by magical attacks. For example, Evoker Fang\r\n     * or Conduit Block.\r\n     *\r\n     */\r\n    magic = 'magic',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Magma block.\r\n     *\r\n     */\r\n    magma = 'magma',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by no source. For example, from a command or\r\n     * script.\r\n     *\r\n     */\r\n    none = 'none',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an indirect source. For example, setting a\r\n     * mob's health to 0 in a behavior pack.\r\n     *\r\n     */\r\n    override = 'override',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a Piston.\r\n     *\r\n     */\r\n    piston = 'piston',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a projectile.\r\n     *\r\n     */\r\n    projectile = 'projectile',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by Goat ramming.\r\n     *\r\n     */\r\n    ramAttack = 'ramAttack',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the /kill command.\r\n     *\r\n     */\r\n    selfDestruct = 'selfDestruct',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Warden's Sonic Boom attack.\r\n     *\r\n     */\r\n    sonicBoom = 'sonicBoom',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a Soul Campfire.\r\n     *\r\n     */\r\n    soulCampfire = 'soulCampfire',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a falling Stalactite block.\r\n     *\r\n     */\r\n    stalactite = 'stalactite',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Stalagmite block.\r\n     *\r\n     */\r\n    stalagmite = 'stalagmite',\r\n    /**\r\n     * @remarks\r\n     * Damage caused over time by having an empty hunger bar.\r\n     *\r\n     */\r\n    starve = 'starve',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being out of air and inside a\r\n     * non-liquid block.\r\n     *\r\n     */\r\n    suffocation = 'suffocation',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being in an inhabitable climate.\r\n     * For example, a Snow Golem in a biome with a temperature\r\n     * greater than 1.\r\n     *\r\n     */\r\n    temperature = 'temperature',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Thorns armor enchantment and by the\r\n     * Guardian thorns effect.\r\n     *\r\n     */\r\n    thorns = 'thorns',\r\n    /**\r\n     * @remarks\r\n     * Damage caused over time by falling into the void.\r\n     *\r\n     */\r\n    'void' = 'void',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Wither effect. For example, from\r\n     * touching a Wither Rose.\r\n     *\r\n     */\r\n    wither = 'wither',\r\n}\r",
          "jsdoc": "/**\r\n * Describes the source of damage from an Entity.\r\n */\r",
          "enumValues": [
            {
              "name": "anvil",
              "value": "anvil",
              "description": ""
            },
            {
              "name": "blockExplosion",
              "value": "blockExplosion",
              "description": ""
            },
            {
              "name": "campfire",
              "value": "campfire",
              "description": ""
            },
            {
              "name": "charging",
              "value": "charging",
              "description": ""
            },
            {
              "name": "contact",
              "value": "contact",
              "description": ""
            },
            {
              "name": "drowning",
              "value": "drowning",
              "description": ""
            },
            {
              "name": "entityAttack",
              "value": "entityAttack",
              "description": ""
            },
            {
              "name": "entityExplosion",
              "value": "entityExplosion",
              "description": ""
            },
            {
              "name": "fall",
              "value": "fall",
              "description": ""
            },
            {
              "name": "fallingBlock",
              "value": "fallingBlock",
              "description": ""
            },
            {
              "name": "fire",
              "value": "fire",
              "description": ""
            },
            {
              "name": "fireTick",
              "value": "fireTick",
              "description": ""
            },
            {
              "name": "fireworks",
              "value": "fireworks",
              "description": ""
            },
            {
              "name": "flyIntoWall",
              "value": "flyIntoWall",
              "description": ""
            },
            {
              "name": "freezing",
              "value": "freezing",
              "description": ""
            },
            {
              "name": "lava",
              "value": "lava",
              "description": ""
            },
            {
              "name": "lightning",
              "value": "lightning",
              "description": ""
            },
            {
              "name": "maceSmash",
              "value": "maceSmash"
            },
            {
              "name": "magic",
              "value": "magic",
              "description": ""
            },
            {
              "name": "magma",
              "value": "magma",
              "description": ""
            },
            {
              "name": "none",
              "value": "none",
              "description": ""
            },
            {
              "name": "override",
              "value": "override",
              "description": ""
            },
            {
              "name": "piston",
              "value": "piston",
              "description": ""
            },
            {
              "name": "projectile",
              "value": "projectile",
              "description": ""
            },
            {
              "name": "ramAttack",
              "value": "ramAttack",
              "description": ""
            },
            {
              "name": "selfDestruct",
              "value": "selfDestruct",
              "description": ""
            },
            {
              "name": "sonicBoom",
              "value": "sonicBoom",
              "description": ""
            },
            {
              "name": "soulCampfire",
              "value": "soulCampfire",
              "description": ""
            },
            {
              "name": "stalactite",
              "value": "stalactite",
              "description": ""
            },
            {
              "name": "stalagmite",
              "value": "stalagmite",
              "description": ""
            },
            {
              "name": "starve",
              "value": "starve",
              "description": ""
            },
            {
              "name": "suffocation",
              "value": "suffocation",
              "description": ""
            },
            {
              "name": "temperature",
              "value": "temperature",
              "description": ""
            },
            {
              "name": "thorns",
              "value": "thorns",
              "description": ""
            },
            {
              "name": "wither",
              "value": "wither",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitydamagecause",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityInitializationCause",
          "name": "EntityInitializationCause",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "An enumeration describing initialization cause of an entity.\r /",
          "definition": "export enum EntityInitializationCause {\n    /**\r\n     * @remarks\r\n     * Case when an entity is created as child of other entity or\r\n     * entities, e.g., cows making a cow or slimes making smaller\r\n     * slimes after dying.\r\n     *\r\n     */\r\n    Born = 'Born',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is created by an event, e.g., a\r\n     * Wandering trader spawning llamas.\r\n     *\r\n     */\r\n    Event = 'Event',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is loaded into the world.\r\n     *\r\n     */\r\n    Loaded = 'Loaded',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is naturally spawned in the world.\r\n     *\r\n     */\r\n    Spawned = 'Spawned',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is transformed into another entity.\r\n     *\r\n     */\r\n    Transformed = 'Transformed',\r\n}\r",
          "jsdoc": "/**\r\n * An enumeration describing initialization cause of an entity.\r\n */\r",
          "enumValues": [
            {
              "name": "Born",
              "value": "Born",
              "description": ""
            },
            {
              "name": "Event",
              "value": "Event",
              "description": ""
            },
            {
              "name": "Loaded",
              "value": "Loaded",
              "description": ""
            },
            {
              "name": "Spawned",
              "value": "Spawned",
              "description": ""
            },
            {
              "name": "Transformed",
              "value": "Transformed",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityinitializationcause",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EquipmentSlot",
          "name": "EquipmentSlot",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The equipment slot of the mob. This includes armor, offhand\r and mainhand slots.\r /",
          "definition": "export enum EquipmentSlot {\n    /**\r\n     * @remarks\r\n     * The chest slot. This slot is used to hold items such as\r\n     * Chestplate or Elytra.\r\n     *\r\n     */\r\n    Chest = 'Chest',\r\n    /**\r\n     * @remarks\r\n     * The feet slot. This slot is used to hold items such as\r\n     * Boots.\r\n     *\r\n     */\r\n    Feet = 'Feet',\r\n    /**\r\n     * @remarks\r\n     * The head slot. This slot is used to hold items such as\r\n     * Helmets or Carved Pumpkins.\r\n     *\r\n     */\r\n    Head = 'Head',\r\n    /**\r\n     * @remarks\r\n     * The legs slot. This slot is used to hold items such as\r\n     * Leggings.\r\n     *\r\n     */\r\n    Legs = 'Legs',\r\n    /**\r\n     * @remarks\r\n     * The mainhand slot. For players, the mainhand slot refers to\r\n     * the currently active hotbar slot.\r\n     *\r\n     */\r\n    Mainhand = 'Mainhand',\r\n    /**\r\n     * @remarks\r\n     * The offhand slot. This slot is used to hold items such as\r\n     * shields and maps.\r\n     *\r\n     */\r\n    Offhand = 'Offhand',\r\n}\r",
          "jsdoc": "/**\r\n * The equipment slot of the mob. This includes armor, offhand\r\n * and mainhand slots.\r\n */\r",
          "enumValues": [
            {
              "name": "Chest",
              "value": "Chest",
              "description": ""
            },
            {
              "name": "Feet",
              "value": "Feet",
              "description": ""
            },
            {
              "name": "Head",
              "value": "Head",
              "description": ""
            },
            {
              "name": "Legs",
              "value": "Legs",
              "description": ""
            },
            {
              "name": "Mainhand",
              "value": "Mainhand",
              "description": ""
            },
            {
              "name": "Offhand",
              "value": "Offhand",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "equipmentslot",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.FluidType",
          "name": "FluidType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Represents the type of fluid for use within a fluid\r containing block, like a cauldron.\r /",
          "definition": "export enum FluidType {\n    /**\r\n     * @remarks\r\n     * Represents lava as a type of fluid.\r\n     *\r\n     */\r\n    Lava = 'Lava',\r\n    /**\r\n     * @remarks\r\n     * Represents a potion as a type of fluid.\r\n     *\r\n     */\r\n    Potion = 'Potion',\r\n    /**\r\n     * @remarks\r\n     * Represents powder snow as a type of fluid.\r\n     *\r\n     */\r\n    PowderSnow = 'PowderSnow',\r\n    /**\r\n     * @remarks\r\n     * Represents water as a type of fluida.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
          "jsdoc": "/**\r\n * Represents the type of fluid for use within a fluid\r\n * containing block, like a cauldron.\r\n */\r",
          "enumValues": [
            {
              "name": "Lava",
              "value": "Lava",
              "description": ""
            },
            {
              "name": "Potion",
              "value": "Potion",
              "description": ""
            },
            {
              "name": "PowderSnow",
              "value": "PowderSnow",
              "description": ""
            },
            {
              "name": "Water",
              "value": "Water",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "fluidtype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.GameMode",
          "name": "GameMode",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Represents a game mode for the current world experience.\r /",
          "definition": "export enum GameMode {\n    /**\r\n     * @remarks\r\n     * World is in a more locked-down experience, where blocks may\r\n     * not be manipulated.\r\n     *\r\n     */\r\n    Adventure = 'Adventure',\r\n    /**\r\n     * @remarks\r\n     * World is in a full creative mode. In creative mode, the\r\n     * player has all the resources available in the item selection\r\n     * tabs and the survival selection tab. They can also destroy\r\n     * blocks instantly including those which would normally be\r\n     * indestructible. Command and structure blocks can also be\r\n     * used in creative mode. Items also do not lose durability or\r\n     * disappear.\r\n     *\r\n     */\r\n    Creative = 'Creative',\r\n    /**\r\n     * @remarks\r\n     * World is in spectator mode. In spectator mode, spectators\r\n     * are always flying and cannot become grounded. Spectators can\r\n     * pass through solid blocks and entities without any\r\n     * collisions, and cannot use items or interact with blocks or\r\n     * mobs. Spectators cannot be seen by mobs or other players,\r\n     * except for other spectators; spectators appear as a\r\n     * transparent floating head.\r\n     *\r\n     */\r\n    Spectator = 'Spectator',\r\n    /**\r\n     * @remarks\r\n     * World is in a survival mode, where players can take damage\r\n     * and entities may not be peaceful. Survival mode is where the\r\n     * player must collect resources, build structures while\r\n     * surviving in their generated world. Activities can, over\r\n     * time, chip away at player health and hunger bar.\r\n     *\r\n     */\r\n    Survival = 'Survival',\r\n}\r",
          "jsdoc": "/**\r\n * Represents a game mode for the current world experience.\r\n */\r",
          "enumValues": [
            {
              "name": "Adventure",
              "value": "Adventure",
              "description": ""
            },
            {
              "name": "Creative",
              "value": "Creative",
              "description": ""
            },
            {
              "name": "Spectator",
              "value": "Spectator",
              "description": ""
            },
            {
              "name": "Survival",
              "value": "Survival",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "gamemode",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.GameRule",
          "name": "GameRule",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Game rules. These values can also be controlled via the\r /gamerule command.\r /",
          "definition": "export enum GameRule {\n    /**\r\n     * @remarks\r\n     * Whether command blocks should notify admins when they\r\n     * perform commands.\r\n     *\r\n     */\r\n    CommandBlockOutput = 'commandBlockOutput',\r\n    /**\r\n     * @remarks\r\n     * Controls whether command blocks can execute commands.\r\n     *\r\n     */\r\n    CommandBlocksEnabled = 'commandBlocksEnabled',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the day and night cycles progress.\r\n     *\r\n     */\r\n    DoDayLightCycle = 'doDayLightCycle',\r\n    /**\r\n     * @remarks\r\n     * Controls whether non-mob entities do drops. ie. Item Frame\r\n     *\r\n     */\r\n    DoEntityDrops = 'doEntityDrops',\r\n    /**\r\n     * @remarks\r\n     * Controls whether fire spreads.\r\n     *\r\n     */\r\n    DoFireTick = 'doFireTick',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players immediately respawn or are shown\r\n     * the death screen.\r\n     *\r\n     */\r\n    DoImmediateRespawn = 'doImmediateRespawn',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players deal with the effects of not\r\n     * sleeping (such as Phantom spawning).\r\n     *\r\n     */\r\n    DoInsomnia = 'doInsomnia',\r\n    /**\r\n     * @remarks\r\n     * Determines whether players should be able to craft only\r\n     * those recipes that they've unlocked first - when\r\n     * dolimitedcrafting is set to true.\r\n     *\r\n     */\r\n    DoLimitedCrafting = 'doLimitedCrafting',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mobs drop loot.\r\n     *\r\n     */\r\n    DoMobLoot = 'doMobLoot',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mobs spawn naturally in the world.\r\n     *\r\n     */\r\n    DoMobSpawning = 'doMobSpawning',\r\n    /**\r\n     * @remarks\r\n     * Controls whether blocks drop items when destroyed.\r\n     *\r\n     */\r\n    DoTileDrops = 'doTileDrops',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the weather can change naturally.\r\n     *\r\n     */\r\n    DoWeatherCycle = 'doWeatherCycle',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from drowning.\r\n     *\r\n     */\r\n    DrowningDamage = 'drowningDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from falling.\r\n     *\r\n     */\r\n    FallDamage = 'fallDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from fire.\r\n     *\r\n     */\r\n    FireDamage = 'fireDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether there is damage from freezing.\r\n     *\r\n     */\r\n    FreezeDamage = 'freezeDamage',\r\n    /**\r\n     * @remarks\r\n     * The maximum number of commands that can be executed\r\n     * simultaneously by the /function command.\r\n     *\r\n     */\r\n    FunctionCommandLimit = 'functionCommandLimit',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players keep their inventories when they\r\n     * die.\r\n     *\r\n     */\r\n    KeepInventory = 'keepInventory',\r\n    /**\r\n     * @remarks\r\n     * The maximum number of chained commands that can execute per\r\n     * tick.\r\n     *\r\n     */\r\n    MaxCommandChainLength = 'maxCommandChainLength',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mob griefing can happen in the world.\r\n     * Example: A Creeper explosion destroying blocks.\r\n     *\r\n     */\r\n    MobGriefing = 'mobGriefing',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players can regenerate health.\r\n     *\r\n     */\r\n    NaturalRegeneration = 'naturalRegeneration',\r\n    /**\r\n     * @remarks\r\n     * The percentage of players required to be sleeping in order\r\n     * to advance to the next day.\r\n     *\r\n     */\r\n    PlayersSleepingPercentage = 'playersSleepingPercentage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether projectiles (entities with a projectile\r\n     * component, like Arrows, thrown Tridents or Fireworks) can\r\n     * destroy certain blocks that support this interaction (such\r\n     * as Chorus Fruit, Dripstone or Decorated Pots). Restrictions\r\n     * on which projectiles can destroy certain blocks apply.\r\n     *\r\n     */\r\n    ProjectilesCanBreakBlocks = 'projectilesCanBreakBlocks',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players can damage each other.\r\n     *\r\n     */\r\n    Pvp = 'pvp',\r\n    /**\r\n     * @remarks\r\n     * Controls how frequently random ticks occur. A value of 0 or\r\n     * less will disable random ticks. The default value is 1.\r\n     *\r\n     */\r\n    RandomTickSpeed = 'randomTickSpeed',\r\n    /**\r\n     * @remarks\r\n     * Controls whether built-in (vanilla) recipes automatically\r\n     * unlock as the player progresses through the game (one\r\n     * alternative to this is to use the /recipe command based on\r\n     * custom gameplay logic.)\r\n     *\r\n     */\r\n    RecipesUnlock = 'recipesUnlock',\r\n    /**\r\n     * @remarks\r\n     * Controls whether respawn blocks (e.g. Bed, Respawn Anchor)\r\n     * explode in other dimensions.\r\n     *\r\n     */\r\n    RespawnBlocksExplode = 'respawnBlocksExplode',\r\n    /**\r\n     * @remarks\r\n     * Controls whether command output is displayed to players.\r\n     * Also controls whether Command Block output is stored by\r\n     * default.\r\n     *\r\n     */\r\n    SendCommandFeedback = 'sendCommandFeedback',\r\n    /**\r\n     * @remarks\r\n     * Controls whether Border Block effects are shown.\r\n     *\r\n     */\r\n    ShowBorderEffect = 'showBorderEffect',\r\n    /**\r\n     * @remarks\r\n     * Controls whether player coordinates are displayed.\r\n     *\r\n     */\r\n    ShowCoordinates = 'showCoordinates',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the days a player has played is displayed.\r\n     *\r\n     */\r\n    ShowDaysPlayed = 'showDaysPlayed',\r\n    /**\r\n     * @remarks\r\n     * Controls whether death messages are displayed in chat.\r\n     *\r\n     */\r\n    ShowDeathMessages = 'showDeathMessages',\r\n    /**\r\n     * @remarks\r\n     * Controls whether standard player notifications for recipes\r\n     * will show. When set to false, 'player unlocked recipes' are\r\n     * no longer sent as player notifications.\r\n     *\r\n     */\r\n    ShowRecipeMessages = 'showRecipeMessages',\r\n    /**\r\n     * @remarks\r\n     * Controls whether item tags are shown. E.g. 'Can Place On',\r\n     * 'Can Destroy', item lock icons, etc.\r\n     *\r\n     */\r\n    ShowTags = 'showTags',\r\n    /**\r\n     * @remarks\r\n     * The block radius from world spawn that a player is allowed\r\n     * to spawn in. Does not affect Adventure mode. The default\r\n     * value is 10 blocks.\r\n     *\r\n     */\r\n    SpawnRadius = 'spawnRadius',\r\n    /**\r\n     * @remarks\r\n     * Affects whether TNT blocks can be lit.\r\n     *\r\n     */\r\n    TntExplodes = 'tntExplodes',\r\n    /**\r\n     * @remarks\r\n     * Controls whether blocks randomly drop loot or all blocks\r\n     * drop loot when destroyed by an explosion. Defaults to false.\r\n     *\r\n     */\r\n    TntExplosionDropDecay = 'tntExplosionDropDecay',\r\n}\r",
          "jsdoc": "/**\r\n * Game rules. These values can also be controlled via the\r\n * /gamerule command.\r\n */\r",
          "enumValues": [
            {
              "name": "CommandBlockOutput",
              "value": "commandBlockOutput",
              "description": ""
            },
            {
              "name": "CommandBlocksEnabled",
              "value": "commandBlocksEnabled",
              "description": ""
            },
            {
              "name": "DoDayLightCycle",
              "value": "doDayLightCycle",
              "description": ""
            },
            {
              "name": "DoEntityDrops",
              "value": "doEntityDrops",
              "description": ""
            },
            {
              "name": "DoFireTick",
              "value": "doFireTick",
              "description": ""
            },
            {
              "name": "DoImmediateRespawn",
              "value": "doImmediateRespawn",
              "description": ""
            },
            {
              "name": "DoInsomnia",
              "value": "doInsomnia",
              "description": ""
            },
            {
              "name": "DoLimitedCrafting",
              "value": "doLimitedCrafting",
              "description": ""
            },
            {
              "name": "DoMobLoot",
              "value": "doMobLoot",
              "description": ""
            },
            {
              "name": "DoMobSpawning",
              "value": "doMobSpawning",
              "description": ""
            },
            {
              "name": "DoTileDrops",
              "value": "doTileDrops",
              "description": ""
            },
            {
              "name": "DoWeatherCycle",
              "value": "doWeatherCycle",
              "description": ""
            },
            {
              "name": "DrowningDamage",
              "value": "drowningDamage",
              "description": ""
            },
            {
              "name": "FallDamage",
              "value": "fallDamage",
              "description": ""
            },
            {
              "name": "FireDamage",
              "value": "fireDamage",
              "description": ""
            },
            {
              "name": "FreezeDamage",
              "value": "freezeDamage",
              "description": ""
            },
            {
              "name": "FunctionCommandLimit",
              "value": "functionCommandLimit",
              "description": ""
            },
            {
              "name": "KeepInventory",
              "value": "keepInventory",
              "description": ""
            },
            {
              "name": "MaxCommandChainLength",
              "value": "maxCommandChainLength",
              "description": ""
            },
            {
              "name": "MobGriefing",
              "value": "mobGriefing",
              "description": ""
            },
            {
              "name": "NaturalRegeneration",
              "value": "naturalRegeneration",
              "description": ""
            },
            {
              "name": "PlayersSleepingPercentage",
              "value": "playersSleepingPercentage",
              "description": ""
            },
            {
              "name": "ProjectilesCanBreakBlocks",
              "value": "projectilesCanBreakBlocks",
              "description": ""
            },
            {
              "name": "Pvp",
              "value": "pvp",
              "description": ""
            },
            {
              "name": "RandomTickSpeed",
              "value": "randomTickSpeed",
              "description": ""
            },
            {
              "name": "RecipesUnlock",
              "value": "recipesUnlock",
              "description": ""
            },
            {
              "name": "RespawnBlocksExplode",
              "value": "respawnBlocksExplode",
              "description": ""
            },
            {
              "name": "SendCommandFeedback",
              "value": "sendCommandFeedback",
              "description": ""
            },
            {
              "name": "ShowBorderEffect",
              "value": "showBorderEffect",
              "description": ""
            },
            {
              "name": "ShowCoordinates",
              "value": "showCoordinates",
              "description": ""
            },
            {
              "name": "ShowDaysPlayed",
              "value": "showDaysPlayed",
              "description": ""
            },
            {
              "name": "ShowDeathMessages",
              "value": "showDeathMessages",
              "description": ""
            },
            {
              "name": "ShowRecipeMessages",
              "value": "showRecipeMessages",
              "description": ""
            },
            {
              "name": "ShowTags",
              "value": "showTags",
              "description": ""
            },
            {
              "name": "SpawnRadius",
              "value": "spawnRadius",
              "description": ""
            },
            {
              "name": "TntExplodes",
              "value": "tntExplodes",
              "description": ""
            },
            {
              "name": "TntExplosionDropDecay",
              "value": "tntExplosionDropDecay",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "gamerule",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.GraphicsMode",
          "name": "GraphicsMode",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Player.graphicsMode}\r /",
          "definition": "export enum GraphicsMode {\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Deferred Technical\r\n     * Preview graphics mode setting.\r\n     *\r\n     */\r\n    Deferred = 'Deferred',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Fancy graphics mode\r\n     * setting. Most special graphics effects are turned on in this\r\n     * setting.\r\n     *\r\n     */\r\n    Fancy = 'Fancy',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Ray Traced graphics mode\r\n     * setting. This setting enables ray tracing.\r\n     *\r\n     */\r\n    RayTraced = 'RayTraced',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Simple graphics mode\r\n     * setting. Most graphics effects are turned off in this\r\n     * setting.\r\n     *\r\n     */\r\n    Simple = 'Simple',\r\n}\r",
          "jsdoc": "/**\r\n * Describes the graphics mode of a client. Used by {@link\r\n * Player.graphicsMode}\r\n */\r",
          "enumValues": [
            {
              "name": "Deferred",
              "value": "Deferred",
              "description": ""
            },
            {
              "name": "Fancy",
              "value": "Fancy",
              "description": ""
            },
            {
              "name": "RayTraced",
              "value": "RayTraced",
              "description": ""
            },
            {
              "name": "Simple",
              "value": "Simple",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "graphicsmode",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.HudElement",
          "name": "HudElement",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "A graphics mode that refers to the Simple graphics mode\r setting. Most graphics effects are turned off in this\r setting.",
          "definition": "export enum HudElement {\n    PaperDoll = 0,\r\n    Armor = 1,\r\n    ToolTips = 2,\r\n    TouchControls = 3,\r\n    Crosshair = 4,\r\n    Hotbar = 5,\r\n    Health = 6,\r\n    ProgressBar = 7,\r\n    Hunger = 8,\r\n    AirBubbles = 9,\r\n    HorseHealth = 10,\r\n    StatusEffects = 11,\r\n    ItemText = 12,\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Simple graphics mode\r\n     * setting. Most graphics effects are turned off in this\r\n     * setting.\r\n     *\r\n     */\r",
          "enumValues": [
            {
              "name": "PaperDoll",
              "value": 0
            },
            {
              "name": "Armor",
              "value": 1
            },
            {
              "name": "ToolTips",
              "value": 2
            },
            {
              "name": "TouchControls",
              "value": 3
            },
            {
              "name": "Crosshair",
              "value": 4
            },
            {
              "name": "Hotbar",
              "value": 5
            },
            {
              "name": "Health",
              "value": 6
            },
            {
              "name": "ProgressBar",
              "value": 7
            },
            {
              "name": "Hunger",
              "value": 8
            },
            {
              "name": "AirBubbles",
              "value": 9
            },
            {
              "name": "HorseHealth",
              "value": 10
            },
            {
              "name": "StatusEffects",
              "value": 11
            },
            {
              "name": "ItemText",
              "value": 12
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "hudelement",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.HudVisibility",
          "name": "HudVisibility",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Enumeration that specifies how to treat the visibility of a\r HUD element.\r /",
          "definition": "export enum HudVisibility {\n    /**\r\n     * @remarks\r\n     * Specifies that this HUD element should be hidden.\r\n     *\r\n     */\r\n    Hide = 0,\r\n    /**\r\n     * @remarks\r\n     * Specifies that this HUD element should be reset to its\r\n     * default state (while most HUD elements are visible, some HUD\r\n     * elements can be hidden by the player via settings.)\r\n     *\r\n     */\r\n    Reset = 1,\r\n}\r",
          "jsdoc": "/**\r\n * Enumeration that specifies how to treat the visibility of a\r\n * HUD element.\r\n */\r",
          "enumValues": [
            {
              "name": "Hide",
              "value": 0,
              "description": ""
            },
            {
              "name": "Reset",
              "value": 1,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "hudvisibility",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InputButton",
          "name": "InputButton",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "All the different input buttons that are supported. Use with\r /",
          "definition": "export enum InputButton {\n    /**\r\n     * @remarks\r\n     * This is mapped to the 'Jump' button on controllers,\r\n     * keyboards, and touch interfaces.\r\n     *\r\n     */\r\n    Jump = 'Jump',\r\n    /**\r\n     * @remarks\r\n     * This is mapped to the 'Sneak' button on controllers,\r\n     * keyboards, and touch interfaces. By default, this is shift\r\n     * on a keyboard or B on an Xbox controller. On touch\r\n     * interfaces this will only be pressed for 1 tick or less and\r\n     * then it will be released immediately even if the player\r\n     * holds their finger down. Dismounting a horse or exiting a\r\n     * boat will not send a Sneak button change event.\r\n     *\r\n     */\r\n    Sneak = 'Sneak',\r\n}\r",
          "jsdoc": "/**\r\n * All the different input buttons that are supported. Use with\r\n * {@link InputInfo.getButtonState} via {@link\r\n * Player.inputInfo} or {@link PlayerButtonInputAfterEvent} via\r\n * {@link WorldAfterEvents.playerButtonInput}\r\n */\r",
          "enumValues": [
            {
              "name": "Jump",
              "value": "Jump",
              "description": ""
            },
            {
              "name": "Sneak",
              "value": "Sneak",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "inputbutton",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InputMode",
          "name": "InputMode",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Describes the type of input of a device.\r /",
          "definition": "export enum InputMode {\n    /**\r\n     * @remarks\r\n     * Gamepad input.\r\n     *\r\n     */\r\n    Gamepad = 'Gamepad',\r\n    /**\r\n     * @remarks\r\n     * Keyboard and mouse input.\r\n     *\r\n     */\r\n    KeyboardAndMouse = 'KeyboardAndMouse',\r\n    /**\r\n     * @remarks\r\n     * Motion controller input.\r\n     *\r\n     */\r\n    MotionController = 'MotionController',\r\n    /**\r\n     * @remarks\r\n     * Touch input.\r\n     *\r\n     */\r\n    Touch = 'Touch',\r\n}\r",
          "jsdoc": "/**\r\n * Describes the type of input of a device.\r\n */\r",
          "enumValues": [
            {
              "name": "Gamepad",
              "value": "Gamepad",
              "description": ""
            },
            {
              "name": "KeyboardAndMouse",
              "value": "KeyboardAndMouse",
              "description": ""
            },
            {
              "name": "MotionController",
              "value": "MotionController",
              "description": ""
            },
            {
              "name": "Touch",
              "value": "Touch",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "inputmode",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InputPermissionCategory",
          "name": "InputPermissionCategory",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "PlayerInputPermissionCategoryChangeAfterEvent} to specify\r PlayerInputPermissions} to get or set permissions.\r /",
          "definition": "export enum InputPermissionCategory {\n    /**\r\n     * @remarks\r\n     * Player input relating to camera movement.\r\n     *\r\n     */\r\n    Camera = 1,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to all player movement. Disabling this\r\n     * is equivalent to disabling jump, sneak, lateral movement,\r\n     * mount, and dismount.\r\n     *\r\n     */\r\n    Movement = 2,\r\n    /**\r\n     * @remarks\r\n     * Player input for moving laterally in the world. This would\r\n     * be WASD on a keyboard or the movement joystick on gamepad or\r\n     * touch.\r\n     *\r\n     */\r\n    LateralMovement = 4,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to sneak. This also affects flying\r\n     * down.\r\n     *\r\n     */\r\n    Sneak = 5,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to jumping. This also affects flying\r\n     * up.\r\n     *\r\n     */\r\n    Jump = 6,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to mounting vehicles.\r\n     *\r\n     */\r\n    Mount = 7,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to dismounting. When disabled, the\r\n     * player can still dismount vehicles by other means, for\r\n     * example on horses players can still jump off and in boats\r\n     * players can go into another boat.\r\n     *\r\n     */\r\n    Dismount = 8,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player forward.\r\n     *\r\n     */\r\n    MoveForward = 9,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player backward.\r\n     *\r\n     */\r\n    MoveBackward = 10,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player left.\r\n     *\r\n     */\r\n    MoveLeft = 11,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player right.\r\n     *\r\n     */\r\n    MoveRight = 12,\r\n}\r",
          "jsdoc": "/**\r\n * Input permission categories. Used by {@link\r\n * PlayerInputPermissionCategoryChangeAfterEvent} to specify\r\n * which category was changed and {@link\r\n * PlayerInputPermissions} to get or set permissions.\r\n */\r",
          "enumValues": [
            {
              "name": "Camera",
              "value": 1,
              "description": ""
            },
            {
              "name": "Movement",
              "value": 2,
              "description": ""
            },
            {
              "name": "LateralMovement",
              "value": 4,
              "description": ""
            },
            {
              "name": "Sneak",
              "value": 5,
              "description": ""
            },
            {
              "name": "Jump",
              "value": 6,
              "description": ""
            },
            {
              "name": "Mount",
              "value": 7,
              "description": ""
            },
            {
              "name": "Dismount",
              "value": 8,
              "description": ""
            },
            {
              "name": "MoveForward",
              "value": 9,
              "description": ""
            },
            {
              "name": "MoveBackward",
              "value": 10,
              "description": ""
            },
            {
              "name": "MoveLeft",
              "value": 11,
              "description": ""
            },
            {
              "name": "MoveRight",
              "value": 12,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "inputpermissioncategory",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentTypes",
          "name": "ItemComponentTypes",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The types of item components that are accessible via\r function ItemStack.getComponent.\r /",
          "definition": "export enum ItemComponentTypes {\n    Compostable = 'minecraft:compostable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:cooldown component.\r\n     *\r\n     */\r\n    Cooldown = 'minecraft:cooldown',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:durability component.\r\n     *\r\n     */\r\n    Durability = 'minecraft:durability',\r\n    Dyeable = 'minecraft:dyeable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:enchantable component.\r\n     *\r\n     */\r\n    Enchantable = 'minecraft:enchantable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:food component.\r\n     *\r\n     */\r\n    Food = 'minecraft:food',\r\n}\r",
          "jsdoc": "/**\r\n * The types of item components that are accessible via\r\n * function ItemStack.getComponent.\r\n */\r",
          "enumValues": [
            {
              "name": "Compostable",
              "value": "minecraft:compostable"
            },
            {
              "name": "Cooldown",
              "value": "minecraft:cooldown",
              "description": ""
            },
            {
              "name": "Durability",
              "value": "minecraft:durability",
              "description": ""
            },
            {
              "name": "Dyeable",
              "value": "minecraft:dyeable"
            },
            {
              "name": "Enchantable",
              "value": "minecraft:enchantable",
              "description": ""
            },
            {
              "name": "Food",
              "value": "minecraft:food",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponenttypes",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemLockMode",
          "name": "ItemLockMode",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Describes how an an item can be moved within a container.\r /",
          "definition": "export enum ItemLockMode {\n    /**\r\n     * @remarks\r\n     * The item cannot be dropped or crafted with.\r\n     *\r\n     */\r\n    inventory = 'inventory',\r\n    /**\r\n     * @remarks\r\n     * The item has no container restrictions.\r\n     *\r\n     */\r\n    none = 'none',\r\n    /**\r\n     * @remarks\r\n     * The item cannot be moved from its slot, dropped or crafted\r\n     * with.\r\n     *\r\n     */\r\n    slot = 'slot',\r\n}\r",
          "jsdoc": "/**\r\n * Describes how an an item can be moved within a container.\r\n */\r",
          "enumValues": [
            {
              "name": "inventory",
              "value": "inventory",
              "description": ""
            },
            {
              "name": "none",
              "value": "none",
              "description": ""
            },
            {
              "name": "slot",
              "value": "slot",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemlockmode",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.LiquidType",
          "name": "LiquidType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Represents the type of liquid that can be placed on a block\r or flow dynamically in the world.\r /",
          "definition": "export enum LiquidType {\n    /**\r\n     * @remarks\r\n     * Represents water as a type of liquid.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
          "jsdoc": "/**\r\n * Represents the type of liquid that can be placed on a block\r\n * or flow dynamically in the world.\r\n */\r",
          "enumValues": [
            {
              "name": "Water",
              "value": "Water",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "liquidtype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.MemoryTier",
          "name": "MemoryTier",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Describes the memory of a device.\r /",
          "definition": "export enum MemoryTier {\n    /**\r\n     * @remarks\r\n     * Max memory for Super Low Tier is 1.5GBs.\r\n     *\r\n     */\r\n    SuperLow = 0,\r\n    /**\r\n     * @remarks\r\n     *  Max memory for Low Tier is 2GBs.\r\n     *\r\n     */\r\n    Low = 1,\r\n    /**\r\n     * @remarks\r\n     * Max memory for Mid Tier is 4GBs.\r\n     *\r\n     */\r\n    Mid = 2,\r\n    /**\r\n     * @remarks\r\n     * Max memory for High Tier is 8GBs.\r\n     *\r\n     */\r\n    High = 3,\r\n    /**\r\n     * @remarks\r\n     * Memory for Super High Tier is above 8GBs.\r\n     *\r\n     */\r\n    SuperHigh = 4,\r\n}\r",
          "jsdoc": "/**\r\n * Describes the memory of a device.\r\n */\r",
          "enumValues": [
            {
              "name": "SuperLow",
              "value": 0,
              "description": ""
            },
            {
              "name": "Low",
              "value": 1,
              "description": ""
            },
            {
              "name": "Mid",
              "value": 2,
              "description": ""
            },
            {
              "name": "High",
              "value": 3,
              "description": ""
            },
            {
              "name": "SuperHigh",
              "value": 4,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "memorytier",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.MoonPhase",
          "name": "MoonPhase",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Enum containing the different phases of the moon based on\r the current day.,Obtain the current MoonPhase using\r world.getMoonPhase.\r  The fullness of the moon controls various mob behaviors such\r as the number of slimes that spawn in Swamp biomes, the\r chance skeletons and zombies have to spawn with armor, as\r well as the chance for spiders to spawn with certain status\r effects.\r /",
          "definition": "export enum MoonPhase {\n    /**\r\n     * @remarks\r\n     * The brightest moon phase. During this phase, cats have a 50%\r\n     * chance of spawning as black cats.\r\n     *\r\n     */\r\n    FullMoon = 0,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Full Moon.\r\n     *\r\n     */\r\n    WaningGibbous = 1,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Waxing Crescent.\r\n     *\r\n     */\r\n    FirstQuarter = 2,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Last Quarter.\r\n     *\r\n     */\r\n    WaningCrescent = 3,\r\n    /**\r\n     * @remarks\r\n     * The darkest moon phase.\r\n     *\r\n     */\r\n    NewMoon = 4,\r\n    /**\r\n     * @remarks\r\n     * The phase following the New Moon.\r\n     *\r\n     */\r\n    WaxingCrescent = 5,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Waning Gibbous.\r\n     *\r\n     */\r\n    LastQuarter = 6,\r\n    /**\r\n     * @remarks\r\n     * The phase following the First Quarter.\r\n     *\r\n     */\r\n    WaxingGibbous = 7,\r\n}\r",
          "jsdoc": "/**\r\n * Enum containing the different phases of the moon based on\r\n * the current day.,Obtain the current MoonPhase using\r\n * world.getMoonPhase.\r\n *\r\n * The fullness of the moon controls various mob behaviors such\r\n * as the number of slimes that spawn in Swamp biomes, the\r\n * chance skeletons and zombies have to spawn with armor, as\r\n * well as the chance for spiders to spawn with certain status\r\n * effects.\r\n */\r",
          "enumValues": [
            {
              "name": "FullMoon",
              "value": 0,
              "description": ""
            },
            {
              "name": "WaningGibbous",
              "value": 1,
              "description": ""
            },
            {
              "name": "FirstQuarter",
              "value": 2,
              "description": ""
            },
            {
              "name": "WaningCrescent",
              "value": 3,
              "description": ""
            },
            {
              "name": "NewMoon",
              "value": 4,
              "description": ""
            },
            {
              "name": "WaxingCrescent",
              "value": 5,
              "description": ""
            },
            {
              "name": "LastQuarter",
              "value": 6,
              "description": ""
            },
            {
              "name": "WaxingGibbous",
              "value": 7,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "moonphase",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.MovementType",
          "name": "MovementType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The phase following the First Quarter.",
          "definition": "export enum MovementType {\n    Immovable = 'Immovable',\r\n    Popped = 'Popped',\r\n    Push = 'Push',\r\n    PushPull = 'PushPull',\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * The phase following the First Quarter.\r\n     *\r\n     */\r",
          "enumValues": [
            {
              "name": "Immovable",
              "value": "Immovable"
            },
            {
              "name": "Popped",
              "value": "Popped"
            },
            {
              "name": "Push",
              "value": "Push"
            },
            {
              "name": "PushPull",
              "value": "PushPull"
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "movementtype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.NamespaceNameErrorReason",
          "name": "NamespaceNameErrorReason",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "An enumeration describing the reason for the namespace name\r error being thrown\r /",
          "definition": "export enum NamespaceNameErrorReason {\n    /**\r\n     * @remarks\r\n     * A restricted namespace was used as the namespace\r\n     *\r\n     */\r\n    DisallowedNamespace = 'DisallowedNamespace',\r\n    /**\r\n     * @remarks\r\n     * The name was missing a namespace when one is required\r\n     *\r\n     */\r\n    NoNamespace = 'NoNamespace',\r\n}\r",
          "jsdoc": "/**\r\n * An enumeration describing the reason for the namespace name\r\n * error being thrown\r\n */\r",
          "enumValues": [
            {
              "name": "DisallowedNamespace",
              "value": "DisallowedNamespace",
              "description": ""
            },
            {
              "name": "NoNamespace",
              "value": "NoNamespace",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "namespacenameerrorreason",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ObjectiveSortOrder",
          "name": "ObjectiveSortOrder",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Used for specifying a sort order for how to display an\r objective and its list of participants.\r /",
          "definition": "export enum ObjectiveSortOrder {\n    /**\r\n     * @remarks\r\n     * Objective participant list is displayed in ascending (e.g.,\r\n     * A-Z) order.\r\n     *\r\n     */\r\n    Ascending = 0,\r\n    /**\r\n     * @remarks\r\n     * Objective participant list is displayed in descending (e.g.,\r\n     * Z-A) order.\r\n     *\r\n     */\r\n    Descending = 1,\r\n}\r",
          "jsdoc": "/**\r\n * Used for specifying a sort order for how to display an\r\n * objective and its list of participants.\r\n */\r",
          "enumValues": [
            {
              "name": "Ascending",
              "value": 0,
              "description": ""
            },
            {
              "name": "Descending",
              "value": 1,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "objectivesortorder",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PaletteColor",
          "name": "PaletteColor",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Enum containing colors to be used with EntityColorComponent\r and EntityColor2Component\r /",
          "definition": "export enum PaletteColor {\n    /**\r\n     * @remarks\r\n     * Hex color #f0f0f0\r\n     *\r\n     */\r\n    White = 0,\r\n    /**\r\n     * @remarks\r\n     * Hex color #F9801D\r\n     *\r\n     */\r\n    Orange = 1,\r\n    /**\r\n     * @remarks\r\n     * Hex color #C74EBD\r\n     *\r\n     */\r\n    Magenta = 2,\r\n    /**\r\n     * @remarks\r\n     * Hex color #3AB3DA\r\n     *\r\n     */\r\n    LightBlue = 3,\r\n    /**\r\n     * @remarks\r\n     * Hex color #FED83D\r\n     *\r\n     */\r\n    Yellow = 4,\r\n    /**\r\n     * @remarks\r\n     * Hex color #80C71F\r\n     *\r\n     */\r\n    Lime = 5,\r\n    /**\r\n     * @remarks\r\n     * Hex color #F38BAA\r\n     *\r\n     */\r\n    Pink = 6,\r\n    /**\r\n     * @remarks\r\n     * Hex color #474F52\r\n     *\r\n     */\r\n    Gray = 7,\r\n    /**\r\n     * @remarks\r\n     * Hex color #9D9D97\r\n     *\r\n     */\r\n    Silver = 8,\r\n    /**\r\n     * @remarks\r\n     * Hex color #169C9C\r\n     *\r\n     */\r\n    Cyan = 9,\r\n    /**\r\n     * @remarks\r\n     * Hex color #8932B8\r\n     *\r\n     */\r\n    Purple = 10,\r\n    /**\r\n     * @remarks\r\n     * Hex color #3C44AA\r\n     *\r\n     */\r\n    Blue = 11,\r\n    /**\r\n     * @remarks\r\n     * Hex color #835432\r\n     *\r\n     */\r\n    Brown = 12,\r\n    /**\r\n     * @remarks\r\n     * Hex color #5E7C16\r\n     *\r\n     */\r\n    Green = 13,\r\n    /**\r\n     * @remarks\r\n     * Hex color #B02E26\r\n     *\r\n     */\r\n    Red = 14,\r\n    /**\r\n     * @remarks\r\n     * Hex color #1D1D21\r\n     *\r\n     */\r\n    Black = 15,\r\n}\r",
          "jsdoc": "/**\r\n * Enum containing colors to be used with EntityColorComponent\r\n * and EntityColor2Component\r\n */\r",
          "enumValues": [
            {
              "name": "White",
              "value": 0,
              "description": ""
            },
            {
              "name": "Orange",
              "value": 1,
              "description": ""
            },
            {
              "name": "Magenta",
              "value": 2,
              "description": ""
            },
            {
              "name": "LightBlue",
              "value": 3,
              "description": ""
            },
            {
              "name": "Yellow",
              "value": 4,
              "description": ""
            },
            {
              "name": "Lime",
              "value": 5,
              "description": ""
            },
            {
              "name": "Pink",
              "value": 6,
              "description": ""
            },
            {
              "name": "Gray",
              "value": 7,
              "description": ""
            },
            {
              "name": "Silver",
              "value": 8,
              "description": ""
            },
            {
              "name": "Cyan",
              "value": 9,
              "description": ""
            },
            {
              "name": "Purple",
              "value": 10,
              "description": ""
            },
            {
              "name": "Blue",
              "value": 11,
              "description": ""
            },
            {
              "name": "Brown",
              "value": 12,
              "description": ""
            },
            {
              "name": "Green",
              "value": 13,
              "description": ""
            },
            {
              "name": "Red",
              "value": 14,
              "description": ""
            },
            {
              "name": "Black",
              "value": 15,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "palettecolor",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlatformType",
          "name": "PlatformType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Describes what kind of platform is a device.\r /",
          "definition": "export enum PlatformType {\n    /**\r\n     * @remarks\r\n     * Specialized gaming device.\r\n     *\r\n     */\r\n    Console = 'Console',\r\n    /**\r\n     * @remarks\r\n     * Personal Computer (PC).\r\n     *\r\n     */\r\n    Desktop = 'Desktop',\r\n    /**\r\n     * @remarks\r\n     *  Handheld device such smartphone or tablet.\r\n     *\r\n     */\r\n    Mobile = 'Mobile',\r\n}\r",
          "jsdoc": "/**\r\n * Describes what kind of platform is a device.\r\n */\r",
          "enumValues": [
            {
              "name": "Console",
              "value": "Console",
              "description": ""
            },
            {
              "name": "Desktop",
              "value": "Desktop",
              "description": ""
            },
            {
              "name": "Mobile",
              "value": "Mobile",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "platformtype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInventoryType",
          "name": "PlayerInventoryType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Specifies the player inventory type.\r /",
          "definition": "export enum PlayerInventoryType {\n    /**\r\n     * @remarks\r\n     * Hotbar inventory.\r\n     *\r\n     */\r\n    Hotbar = 'Hotbar',\r\n    /**\r\n     * @remarks\r\n     * Main inventory.\r\n     *\r\n     */\r\n    Inventory = 'Inventory',\r\n}\r",
          "jsdoc": "/**\r\n * Specifies the player inventory type.\r\n */\r",
          "enumValues": [
            {
              "name": "Hotbar",
              "value": "Hotbar",
              "description": ""
            },
            {
              "name": "Inventory",
              "value": "Inventory",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinventorytype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerPermissionLevel",
          "name": "PlayerPermissionLevel",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The player permission level.\r /",
          "definition": "export enum PlayerPermissionLevel {\n    /**\r\n     * @remarks\r\n     * Visitors can only observe the world, not interact with it.\r\n     *\r\n     */\r\n    Visitor = 0,\r\n    /**\r\n     * @remarks\r\n     * Members can build and mine, attack players and mobs, and\r\n     * interact with items and entities.\r\n     *\r\n     */\r\n    Member = 1,\r\n    /**\r\n     * @remarks\r\n     * Operators can teleport and use commands, in addition to\r\n     * everything Members can do.\r\n     *\r\n     */\r\n    Operator = 2,\r\n    Custom = 3,\r\n}\r",
          "jsdoc": "/**\r\n * The player permission level.\r\n */\r",
          "enumValues": [
            {
              "name": "Visitor",
              "value": 0,
              "description": ""
            },
            {
              "name": "Member",
              "value": 1,
              "description": ""
            },
            {
              "name": "Operator",
              "value": 2,
              "description": ""
            },
            {
              "name": "Custom",
              "value": 3
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerpermissionlevel",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScoreboardIdentityType",
          "name": "ScoreboardIdentityType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Contains objectives and participants for the scoreboard.\r /",
          "definition": "export enum ScoreboardIdentityType {\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to an entity.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to a pseudo player\r\n     * entity - typically this is used to store scores as data or\r\n     * as abstract progress.\r\n     *\r\n     */\r\n    FakePlayer = 'FakePlayer',\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to a player.\r\n     *\r\n     */\r\n    Player = 'Player',\r\n}\r",
          "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n */\r",
          "enumValues": [
            {
              "name": "Entity",
              "value": "Entity",
              "description": ""
            },
            {
              "name": "FakePlayer",
              "value": "FakePlayer",
              "description": ""
            },
            {
              "name": "Player",
              "value": "Player",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scoreboardidentitytype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScriptEventSource",
          "name": "ScriptEventSource",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Describes where the script event originated from.\r /",
          "definition": "export enum ScriptEventSource {\n    /**\r\n     * @remarks\r\n     * The script event originated from a Block such as a Command\r\n     * Block.\r\n     *\r\n     */\r\n    Block = 'Block',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from an Entity such as a Player,\r\n     * Command Block Minecart or Animation Controller.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from an NPC dialogue.\r\n     *\r\n     */\r\n    NPCDialogue = 'NPCDialogue',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from the server, such as from a\r\n     * runCommand API call or a dedicated server console.\r\n     *\r\n     */\r\n    Server = 'Server',\r\n}\r",
          "jsdoc": "/**\r\n * Describes where the script event originated from.\r\n */\r",
          "enumValues": [
            {
              "name": "Block",
              "value": "Block",
              "description": ""
            },
            {
              "name": "Entity",
              "value": "Entity",
              "description": ""
            },
            {
              "name": "NPCDialogue",
              "value": "NPCDialogue",
              "description": ""
            },
            {
              "name": "Server",
              "value": "Server",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scripteventsource",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.SignSide",
          "name": "SignSide",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Represents a side of a sign.\r /",
          "definition": "export enum SignSide {\n    /**\r\n     * @remarks\r\n     * The back of the sign.\r\n     *\r\n     */\r\n    Back = 'Back',\r\n    /**\r\n     * @remarks\r\n     * The front of the sign.\r\n     *\r\n     */\r\n    Front = 'Front',\r\n}\r",
          "jsdoc": "/**\r\n * Represents a side of a sign.\r\n */\r",
          "enumValues": [
            {
              "name": "Back",
              "value": "Back",
              "description": ""
            },
            {
              "name": "Front",
              "value": "Front",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "signside",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StickyType",
          "name": "StickyType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "The front of the sign.",
          "definition": "export enum StickyType {\n    None = 'None',\r\n    Same = 'Same',\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * The front of the sign.\r\n     *\r\n     */\r",
          "enumValues": [
            {
              "name": "None",
              "value": "None"
            },
            {
              "name": "Same",
              "value": "Same"
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "stickytype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StructureAnimationMode",
          "name": "StructureAnimationMode",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Specifies how structure blocks should be animated when a\r structure is placed.\r /",
          "definition": "export enum StructureAnimationMode {\n    /**\r\n     * @remarks\r\n     * Blocks will be randomly placed one at at time. Use\r\n     * @minecraft/server.StructurePlaceOptions.animationSeconds to\r\n     * control how long it takes for all blocks to be placed.\r\n     *\r\n     */\r\n    Blocks = 'Blocks',\r\n    /**\r\n     * @remarks\r\n     * Blocks will be placed one layer at a time from bottom to\r\n     * top. Use\r\n     * @minecraft/server.StructurePlaceOptions.animationSeconds to\r\n     * control how long it takes for all blocks to be placed.\r\n     *\r\n     */\r\n    Layers = 'Layers',\r\n    /**\r\n     * @remarks\r\n     * All blocks will be placed immediately.\r\n     *\r\n     */\r\n    None = 'None',\r\n}\r",
          "jsdoc": "/**\r\n * Specifies how structure blocks should be animated when a\r\n * structure is placed.\r\n */\r",
          "enumValues": [
            {
              "name": "Blocks",
              "value": "Blocks",
              "description": ""
            },
            {
              "name": "Layers",
              "value": "Layers",
              "description": ""
            },
            {
              "name": "None",
              "value": "None",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "structureanimationmode",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StructureMirrorAxis",
          "name": "StructureMirrorAxis",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Specifies how a structure should be mirrored when placed.\r /",
          "definition": "export enum StructureMirrorAxis {\n    /**\r\n     * @remarks\r\n     * No mirroring.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across the X axis.\r\n     *\r\n     */\r\n    X = 'X',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across both the X and Z axes.\r\n     *\r\n     */\r\n    XZ = 'XZ',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across the Z axis.\r\n     *\r\n     */\r\n    Z = 'Z',\r\n}\r",
          "jsdoc": "/**\r\n * Specifies how a structure should be mirrored when placed.\r\n */\r",
          "enumValues": [
            {
              "name": "None",
              "value": "None",
              "description": ""
            },
            {
              "name": "X",
              "value": "X",
              "description": ""
            },
            {
              "name": "XZ",
              "value": "XZ",
              "description": ""
            },
            {
              "name": "Z",
              "value": "Z",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "structuremirroraxis",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StructureRotation",
          "name": "StructureRotation",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Enum describing a structure's placement rotation.\r /",
          "definition": "export enum StructureRotation {\n    /**\r\n     * @remarks\r\n     * No rotation.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * 180 degree rotation.\r\n     *\r\n     */\r\n    Rotate180 = 'Rotate180',\r\n    /**\r\n     * @remarks\r\n     * 270 degree rotation.\r\n     *\r\n     */\r\n    Rotate270 = 'Rotate270',\r\n    /**\r\n     * @remarks\r\n     * 90 degree rotation.\r\n     *\r\n     */\r\n    Rotate90 = 'Rotate90',\r\n}\r",
          "jsdoc": "/**\r\n * Enum describing a structure's placement rotation.\r\n */\r",
          "enumValues": [
            {
              "name": "None",
              "value": "None",
              "description": ""
            },
            {
              "name": "Rotate180",
              "value": "Rotate180",
              "description": ""
            },
            {
              "name": "Rotate270",
              "value": "Rotate270",
              "description": ""
            },
            {
              "name": "Rotate90",
              "value": "Rotate90",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "structurerotation",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StructureSaveMode",
          "name": "StructureSaveMode",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Specifies how a structure should be saved.\r /",
          "definition": "export enum StructureSaveMode {\n    /**\r\n     * @remarks\r\n     * The structure will be temporarily saved to memory. The\r\n     * structure will persist until the world is shut down.\r\n     *\r\n     */\r\n    Memory = 'Memory',\r\n    /**\r\n     * @remarks\r\n     * The structure will be saved to the world file and persist\r\n     * between world loads. A saved structure can be removed from\r\n     * the world via @minecraft/server.StructureManager.delete.\r\n     *\r\n     */\r\n    World = 'World',\r\n}\r",
          "jsdoc": "/**\r\n * Specifies how a structure should be saved.\r\n */\r",
          "enumValues": [
            {
              "name": "Memory",
              "value": "Memory",
              "description": ""
            },
            {
              "name": "World",
              "value": "World",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "structuresavemode",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.TimeOfDay",
          "name": "TimeOfDay",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Provides numeric values for common periods in the Minecraft\r day.\r /",
          "definition": "export enum TimeOfDay {\n    /**\r\n     * @remarks\r\n     * Sets the time to the start of the day, which is time of the\r\n     * day 1,000 (or the equivalent of 7am) in Minecraft.\r\n     *\r\n     */\r\n    Day = 1000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to noon, which is time of the day 6,000 in\r\n     * Minecraft.\r\n     *\r\n     */\r\n    Noon = 6000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to sunset, which is time of the day 12,000 (or\r\n     * the equivalent of 6pm) in Minecraft.\r\n     *\r\n     */\r\n    Sunset = 12000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to night, which is time of the day 13,000 (or\r\n     * the equivalent of 7:00pm) in Minecraft.\r\n     *\r\n     */\r\n    Night = 13000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to midnight, which is time of the day 18,000\r\n     * (or the equivalent of 12:00am) in Minecraft.\r\n     *\r\n     */\r\n    Midnight = 18000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to sunrise, which is time of the day 23,000\r\n     * (or the equivalent of 5am) in Minecraft.\r\n     *\r\n     */\r\n    Sunrise = 23000,\r\n}\r",
          "jsdoc": "/**\r\n * Provides numeric values for common periods in the Minecraft\r\n * day.\r\n */\r",
          "enumValues": [
            {
              "name": "Day",
              "value": 1000,
              "description": ""
            },
            {
              "name": "Noon",
              "value": 6000,
              "description": ""
            },
            {
              "name": "Sunset",
              "value": 12000,
              "description": ""
            },
            {
              "name": "Night",
              "value": 13000,
              "description": ""
            },
            {
              "name": "Midnight",
              "value": 18000,
              "description": ""
            },
            {
              "name": "Sunrise",
              "value": 23000,
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "timeofday",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.TintMethod",
          "name": "TintMethod",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Tint logic applied to a block or part of a block. The color\r may vary when a world position is part of the context, as\r biomes often have an influence on the resulting tint.\r /",
          "definition": "export enum TintMethod {\n    /**\r\n     * @remarks\r\n     * Specifies a birch foliage tint method.\r\n     *\r\n     */\r\n    BirchFoliage = 'BirchFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a default foliage tint method.\r\n     *\r\n     */\r\n    DefaultFoliage = 'DefaultFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a dry foliage tint method.\r\n     *\r\n     */\r\n    DryFoliage = 'DryFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies an evergreen foliage tint method.\r\n     *\r\n     */\r\n    EvergreenFoliage = 'EvergreenFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a grass tint method.\r\n     *\r\n     */\r\n    Grass = 'Grass',\r\n    /**\r\n     * @remarks\r\n     * Specifies no tint method, resulting in a white tint.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * Specifies a water tint method.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
          "jsdoc": "/**\r\n * Tint logic applied to a block or part of a block. The color\r\n * may vary when a world position is part of the context, as\r\n * biomes often have an influence on the resulting tint.\r\n */\r",
          "enumValues": [
            {
              "name": "BirchFoliage",
              "value": "BirchFoliage",
              "description": ""
            },
            {
              "name": "DefaultFoliage",
              "value": "DefaultFoliage",
              "description": ""
            },
            {
              "name": "DryFoliage",
              "value": "DryFoliage",
              "description": ""
            },
            {
              "name": "EvergreenFoliage",
              "value": "EvergreenFoliage",
              "description": ""
            },
            {
              "name": "Grass",
              "value": "Grass",
              "description": ""
            },
            {
              "name": "None",
              "value": "None",
              "description": ""
            },
            {
              "name": "Water",
              "value": "Water",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "tintmethod",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WeatherType",
          "name": "WeatherType",
          "type": "enum",
          "module": "@minecraft/server",
          "description": "Used to specify the type of weather condition within the\r world.\r /",
          "definition": "export enum WeatherType {\n    /**\r\n     * @remarks\r\n     * Specifies a clear weather condition.\r\n     *\r\n     */\r\n    Clear = 'Clear',\r\n    /**\r\n     * @remarks\r\n     * Specifies a rain weather condition.\r\n     *\r\n     */\r\n    Rain = 'Rain',\r\n    /**\r\n     * @remarks\r\n     * Specifies a rain and thunder weather condition.\r\n     *\r\n     */\r\n    Thunder = 'Thunder',\r\n}\r",
          "jsdoc": "/**\r\n * Used to specify the type of weather condition within the\r\n * world.\r\n */\r",
          "enumValues": [
            {
              "name": "Clear",
              "value": "Clear",
              "description": ""
            },
            {
              "name": "Rain",
              "value": "Rain",
              "description": ""
            },
            {
              "name": "Thunder",
              "value": "Thunder",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "weathertype",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentTypeMap",
          "name": "BlockComponentTypeMap",
          "type": "type",
          "module": "@minecraft/server",
          "definition": "export type BlockComponentTypeMap = {",
          "jsdoc": "",
          "typeDefinition": "{",
          "categories": [
            "Types",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponenttypemap",
            "type"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityComponentTypeMap",
          "name": "EntityComponentTypeMap",
          "type": "type",
          "module": "@minecraft/server",
          "definition": "export type EntityComponentTypeMap = {",
          "jsdoc": "",
          "typeDefinition": "{",
          "categories": [
            "Types",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitycomponenttypemap",
            "type"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentTypeMap",
          "name": "ItemComponentTypeMap",
          "type": "type",
          "module": "@minecraft/server",
          "definition": "export type ItemComponentTypeMap = {",
          "jsdoc": "",
          "typeDefinition": "{",
          "categories": [
            "Types",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponenttypemap",
            "type"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Block",
          "name": "Block",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a block in a dimension. A block represents a\r unique X, Y, and Z within a dimension and get/sets the state\r of the block at that location. This type was significantly\r updated in version 1.17.10.21.\r /",
          "definition": "export class Block {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the dimension that the block is within.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this block is an air block (i.e., empty\r\n     * space).\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this block is a liquid block - (e.g., a\r\n     * water block and a lava block are liquid, while an air block\r\n     * and a stone block are not. Water logged blocks are not\r\n     * liquid blocks).\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isLiquid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this reference to a block is still valid\r\n     * (for example, if the block is unloaded, references to that\r\n     * block will no longer be valid.)\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns or sets whether this block has water on it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isWaterlogged: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this block's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Coordinates of the specified block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Additional block configuration data that describes the\r\n     * block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly permutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Gets the type of block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly 'type': BlockType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of block for this block. Warning:\r\n     * Vanilla block names can be changed in future releases, try\r\n     * using 'Block.matches' instead for block comparison.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * X coordinate of the block.\r\n     *\r\n     */\r\n    readonly x: number;\r\n    /**\r\n     * @remarks\r\n     * Y coordinate of the block.\r\n     *\r\n     */\r\n    readonly y: number;\r\n    /**\r\n     * @remarks\r\n     * Z coordinate of the block.\r\n     *\r\n     */\r\n    readonly z: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} above this block (positive in the\r\n     * Y direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps above to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    above(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} below this block (negative in the\r\n     * Y direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps below to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    below(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Vector3} of the center of this block on\r\n     * the X and Z axis.\r\n     *\r\n     */\r\n    bottomCenter(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed when touched by\r\n     * liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed when touched by liquid.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block can have a liquid placed over it,\r\n     * i.e. be waterlogged.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block can have a liquid placed over it.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    canContainLiquid(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Vector3} of the center of this block on\r\n     * the X, Y, and Z axis.\r\n     *\r\n     */\r\n    center(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east of this block\r\n     * (positive in the X direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the east to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    east(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for a block - for example, an inventory component of a chest\r\n     * block.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g.,\r\n     * 'minecraft:inventory'). If no namespace prefix is specified,\r\n     * 'minecraft:' is assumed. Available component IDs are those\r\n     * in the {@link BlockComponentTypes} enum and custom component\r\n     * IDs registered with the {@link BlockComponentRegistry}.\r\n     * @returns\r\n     * Returns the component if it exists on the block, otherwise\r\n     * undefined.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getComponent<T extends string>(componentId: T): BlockComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Creates a prototype item stack based on this block that can\r\n     * be used with Container/ContainerSlot APIs.\r\n     *\r\n     * @param amount\r\n     * Number of instances of this block to place in the item\r\n     * stack.\r\n     * Defaults to: 1\r\n     * @param withData\r\n     * Whether additional data facets of the item stack are\r\n     * included.\r\n     * Defaults to: false\r\n     * @returns\r\n     * An itemStack with the specified amount of items and data.\r\n     * Returns undefined if block type is incompatible.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getItemStack(amount?: number, withData?: boolean): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the net redstone power of this block.\r\n     *\r\n     * @returns\r\n     * Returns undefined if redstone power is not applicable to\r\n     * this block.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getRedstonePower(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of tags for a block.\r\n     *\r\n     * @returns\r\n     * The list of tags that the block has.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Checks to see if the permutation of this block has a\r\n     * specific tag.\r\n     *\r\n     * @param tag\r\n     * Tag to check for.\r\n     * @returns\r\n     * Returns `true` if the permutation of this block has the tag,\r\n     * else `false`.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example checkBlockTags.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function checkBlockTags(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // Fetch the block\r\n     *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n     *\r\n     *   // check that the block is loaded\r\n     *   if (block) {\r\n     *     log(`Block is dirt: ${block.hasTag(\"dirt\")}`);\r\n     *     log(`Block is wood: ${block.hasTag(\"wood\")}`);\r\n     *     log(`Block is stone: ${block.hasTag(\"stone\")}`);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block stops liquid from flowing.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block stops liquid from flowing.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    isLiquidBlocking(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether liquid can flow into the block from the\r\n     * provided direction, or flow out from the provided direction\r\n     * when liquid is placed into it with a bucket.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether liquid can flow into the block from the provided\r\n     * direction, or flow out from the provided direction when\r\n     * liquid is placed into it with a bucket\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    liquidCanFlowFromDirection(liquidType: LiquidType, flowDirection: Direction): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed and spawns its item\r\n     * when touched by liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed and spawns its item when\r\n     * touched by liquid.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    liquidSpreadCausesSpawn(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Tests whether this block matches a specific criteria.\r\n     *\r\n     * @param blockName\r\n     * Block type identifier to match this API against.\r\n     * @param states\r\n     * Optional set of block states to test this block against.\r\n     * @returns\r\n     * Returns true if the block matches the specified criteria.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    matches(blockName: string, states?: Record<string, boolean | number | string>): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the north of this block\r\n     * (negative in the Z direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the north to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    north(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a block at an offset relative vector to this block.\r\n     *\r\n     * @param offset\r\n     * The offset vector. For example, an offset of 0, 1, 0 will\r\n     * return the block above the current block.\r\n     * @returns\r\n     * Block at the specified offset, or undefined if that block\r\n     * could not be retrieved (for example, the block and its\r\n     * relative chunk is not loaded yet.)\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    offset(offset: Vector3): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Sets the block in the dimension to the state of the\r\n     * permutation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param permutation\r\n     * Permutation that contains a set of property states for the\r\n     * Block.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setPermutation(permutation: BlockPermutation): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the type of block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockType\r\n     * Identifier of the type of block to apply - for example,\r\n     * minecraft:powered_repeater.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setType(blockType: BlockType | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets whether this block has a water logged state - for\r\n     * example, whether stairs are submerged within water.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param isWaterlogged\r\n     * true if the block should have water within it.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setWaterlogged(isWaterlogged: boolean): void;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the south of this block\r\n     * (positive in the Z direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the south to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    south(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the west of this block\r\n     * (negative in the X direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the west to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    west(steps?: number): Block | undefined;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a block in a dimension. A block represents a\r\n * unique X, Y, and Z within a dimension and get/sets the state\r\n * of the block at that location. This type was significantly\r\n * updated in version 1.17.10.21.\r\n */\r",
          "properties": [
            {
              "name": "dimension",
              "type": "Dimension",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isAir",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isLiquid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isWaterlogged",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "localizationKey",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "permutation",
              "type": "BlockPermutation",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "typeId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "x",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "y",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "z",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "above",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "above(steps?: number): Block | undefined"
            },
            {
              "name": "below",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "below(steps?: number): Block | undefined"
            },
            {
              "name": "bottomCenter",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "bottomCenter(): Vector3"
            },
            {
              "name": "canBeDestroyedByLiquidSpread",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean"
            },
            {
              "name": "canContainLiquid",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "canContainLiquid(liquidType: LiquidType): boolean"
            },
            {
              "name": "center",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "center(): Vector3"
            },
            {
              "name": "east",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "east(steps?: number): Block | undefined"
            },
            {
              "name": "getItemStack",
              "parameters": [],
              "returnType": "ItemStack | undefined",
              "accessibility": "public",
              "signature": "getItemStack(amount?: number, withData?: boolean): ItemStack | undefined"
            },
            {
              "name": "getRedstonePower",
              "parameters": [],
              "returnType": "number | undefined",
              "accessibility": "public",
              "signature": "getRedstonePower(): number | undefined"
            },
            {
              "name": "getTags",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getTags(): string[]"
            },
            {
              "name": "hasTag",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasTag(tag: string): boolean"
            },
            {
              "name": "isLiquidBlocking",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isLiquidBlocking(liquidType: LiquidType): boolean"
            },
            {
              "name": "liquidCanFlowFromDirection",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "liquidCanFlowFromDirection(liquidType: LiquidType, flowDirection: Direction): boolean"
            },
            {
              "name": "liquidSpreadCausesSpawn",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "liquidSpreadCausesSpawn(liquidType: LiquidType): boolean"
            },
            {
              "name": "matches",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "matches(blockName: string, states?: Record<string, boolean | number | string>): boolean"
            },
            {
              "name": "north",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "north(steps?: number): Block | undefined"
            },
            {
              "name": "offset",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "offset(offset: Vector3): Block | undefined"
            },
            {
              "name": "setPermutation",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setPermutation(permutation: BlockPermutation): void"
            },
            {
              "name": "setType",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setType(blockType: BlockType | string): void"
            },
            {
              "name": "setWaterlogged",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setWaterlogged(isWaterlogged: boolean): void"
            },
            {
              "name": "south",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "south(steps?: number): Block | undefined"
            },
            {
              "name": "west",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "west(steps?: number): Block | undefined"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "block",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponent",
          "name": "BlockComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Base type for components associated with blocks.\r /",
          "definition": "export class BlockComponent extends Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block instance that this component pertains to.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n}\r",
          "jsdoc": "/**\r\n * Base type for components associated with blocks.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "Component",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentEntityFallOnEvent",
          "name": "BlockComponentEntityFallOnEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an entity falling onto a\r specific block.\r /",
          "definition": "export class BlockComponentEntityFallOnEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that fell onto the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * The distance that the entity fell onto this block with.\r\n     *\r\n     */\r\n    readonly fallDistance: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an entity falling onto a\r\n * specific block.\r\n */\r",
          "properties": [
            {
              "name": "fallDistance",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponententityfallonevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentOnPlaceEvent",
          "name": "BlockComponentOnPlaceEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a specific block that was\r placed.\r /",
          "definition": "export class BlockComponentOnPlaceEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Previous block at this location that was replaced.\r\n     *\r\n     */\r\n    readonly previousBlock: BlockPermutation;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a specific block that was\r\n * placed.\r\n */\r",
          "properties": [
            {
              "name": "previousBlock",
              "type": "BlockPermutation",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponentonplaceevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentPlayerBreakEvent",
          "name": "BlockComponentPlayerBreakEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a specific block being broken\r by a player.\r /",
          "definition": "export class BlockComponentPlayerBreakEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns permutation information about this block before it\r\n     * was broken.\r\n     *\r\n     */\r\n    readonly brokenBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The player that broke this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a specific block being broken\r\n * by a player.\r\n */\r",
          "properties": [
            {
              "name": "brokenBlockPermutation",
              "type": "BlockPermutation",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponentplayerbreakevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentPlayerInteractEvent",
          "name": "BlockComponentPlayerInteractEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a specific block being\r interacted with.\r /",
          "definition": "export class BlockComponentPlayerInteractEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block face that was interacted with.\r\n     *\r\n     */\r\n    readonly face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block that the player interacted with.\r\n     *\r\n     */\r\n    readonly faceLocation?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The player that interacted with this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a specific block being\r\n * interacted with.\r\n */\r",
          "properties": [
            {
              "name": "face",
              "type": "Direction",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponentplayerinteractevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentPlayerPlaceBeforeEvent",
          "name": "BlockComponentPlayerPlaceBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event before a player\r places a block.\r /",
          "definition": "export class BlockComponentPlayerPlaceBeforeEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the block place event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The block face that was placed onto.\r\n     *\r\n     */\r\n    readonly face: Direction;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that will be placed if the event is\r\n     * not cancelled. If set to a different block permutation, that\r\n     * permutation will be placed instead.\r\n     *\r\n     */\r\n    permutationToPlace: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The player that is placing this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * places a block.\r\n */\r",
          "properties": [
            {
              "name": "face",
              "type": "Direction",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponentplayerplacebeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentRandomTickEvent",
          "name": "BlockComponentRandomTickEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a specific block randomly\r ticking.\r /",
          "definition": "export class BlockComponentRandomTickEvent extends BlockEvent {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a specific block randomly\r\n * ticking.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponentrandomtickevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentRegistry",
          "name": "BlockComponentRegistry",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class BlockComponentRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link BlockCustomComponentAlreadyRegisteredError}\r\n     *\r\n     * {@link BlockCustomComponentReloadNewComponentError}\r\n     *\r\n     * {@link BlockCustomComponentReloadNewEventError}\r\n     *\r\n     * {@link BlockCustomComponentReloadVersionError}\r\n     *\r\n     * {@link CustomComponentInvalidRegistryError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCustomComponent(name: string, customComponent: BlockCustomComponent): void;\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [
            {
              "name": "registerCustomComponent",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "registerCustomComponent(name: string, customComponent: BlockCustomComponent): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponentregistry",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentStepOffEvent",
          "name": "BlockComponentStepOffEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an entity stepping off a\r specific block.\r /",
          "definition": "export class BlockComponentStepOffEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that stepped off the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an entity stepping off a\r\n * specific block.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponentstepoffevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentStepOnEvent",
          "name": "BlockComponentStepOnEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an entity stepping onto a\r specific block.\r /",
          "definition": "export class BlockComponentStepOnEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that stepped on the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an entity stepping onto a\r\n * specific block.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponentsteponevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockComponentTickEvent",
          "name": "BlockComponentTickEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a specific block ticking.\r /",
          "definition": "export class BlockComponentTickEvent extends BlockEvent {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a specific block ticking.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcomponenttickevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockCustomComponentInstance",
          "name": "BlockCustomComponentInstance",
          "type": "class",
          "module": "@minecraft/server",
          "description": "An instance of a custom component on a block.\r /",
          "definition": "export class BlockCustomComponentInstance extends BlockComponent {\n    private constructor();\r\n    readonly customComponentParameters: CustomComponentParameters;\r\n}\r",
          "jsdoc": "/**\r\n * An instance of a custom component on a block.\r\n */\r",
          "properties": [
            {
              "name": "customComponentParameters",
              "type": "CustomComponentParameters",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcustomcomponentinstance",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockEvent",
          "name": "BlockEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event that impacts a\r specific block.\r /",
          "definition": "export class BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block currently in the world at the location of this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * Dimension that contains the block that is the subject of\r\n     * this event.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event that impacts a\r\n * specific block.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "dimension",
              "type": "Dimension",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockExplodeAfterEvent",
          "name": "BlockExplodeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an explosion that has\r occurred for a specific block.\r /",
          "definition": "export class BlockExplodeAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Description of the block that has exploded.\r\n     *\r\n     */\r\n    readonly explodedBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * occurred for a specific block.\r\n */\r",
          "properties": [
            {
              "name": "explodedBlockPermutation",
              "type": "BlockPermutation",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockexplodeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockExplodeAfterEventSignal",
          "name": "BlockExplodeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when an explosion\r occurs, as it impacts individual blocks.\r /",
          "definition": "export class BlockExplodeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an explosion\r\n     * occurs, as it impacts individual blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: BlockExplodeAfterEvent) => void): (arg0: BlockExplodeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an explosion\r\n     * occurs, as it impacts individual blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: BlockExplodeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when an explosion\r\n * occurs, as it impacts individual blocks.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockexplodeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockFluidContainerComponent",
          "name": "BlockFluidContainerComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents the fluid container of a block in the world. Used\r with blocks like cauldrons.\r /",
          "definition": "export class BlockFluidContainerComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Relative fill level of the fluid container.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fillLevel: number;\r\n    /**\r\n     * @remarks\r\n     * Custom color of the fluid in the container.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fluidColor: RGBA;\r\n    static readonly componentId = 'minecraft:fluid_container';\r\n    /**\r\n     * @remarks\r\n     * Adds a dye to the fluid. The dye color is combined with any\r\n     * existing custom color.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    addDye(dye: ItemType): void;\r\n    /**\r\n     * @remarks\r\n     * Gets the current fluid type in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFluidType(): FluidType;\r\n    /**\r\n     * @remarks\r\n     * Sets the current fluid type in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setFluidType(fluidType: FluidType): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a potion item in the container. Changes the container's\r\n     * fluid type to potion.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setPotion(itemStack: ItemStack): void;\r\n}\r",
          "jsdoc": "/**\r\n * Represents the fluid container of a block in the world. Used\r\n * with blocks like cauldrons.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "fluid_container'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "addDye",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "addDye(dye: ItemType): void"
            },
            {
              "name": "getFluidType",
              "parameters": [],
              "returnType": "FluidType",
              "accessibility": "public",
              "signature": "getFluidType(): FluidType"
            },
            {
              "name": "setFluidType",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setFluidType(fluidType: FluidType): void"
            },
            {
              "name": "setPotion",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setPotion(itemStack: ItemStack): void"
            }
          ],
          "extends": "BlockComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockfluidcontainercomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockInventoryComponent",
          "name": "BlockInventoryComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents the inventory of a block in the world. Used with\r blocks like chests.\r ```typescript\r  function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // Fetch block\r   const block = targetLocation.dimension.getBlock(targetLocation);\r    if (!block) {\r     log(\"Could not find block. Maybe it is not loaded?\", -1);\r     return;\r   }\r    // Make it a chest\r   block.setType(MinecraftBlockTypes.Chest);\r    // Get the inventory\r   const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r    if (!inventoryComponent || !inventoryComponent.container) {\r     log(\"Could not find inventory component.\", -1);\r     return;\r   }\r    const inventoryContainer = inventoryComponent.container;\r    // Set slot 0 to a stack of 10 apples\r   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r }\r ```\r /",
          "definition": "export class BlockInventoryComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The container which holds an {@link ItemStack}.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly container?: Container;\r\n    static readonly componentId = 'minecraft:inventory';\r\n}\r",
          "jsdoc": "/**\r\n * Represents the inventory of a block in the world. Used with\r\n * blocks like chests.\r\n * @example placeItemsInChest.ts\r\n * ```typescript\r\n * import { ItemStack, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes, MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // Fetch block\r\n *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (!block) {\r\n *     log(\"Could not find block. Maybe it is not loaded?\", -1);\r\n *     return;\r\n *   }\r\n *\r\n *   // Make it a chest\r\n *   block.setType(MinecraftBlockTypes.Chest);\r\n *\r\n *   // Get the inventory\r\n *   const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *\r\n *   if (!inventoryComponent || !inventoryComponent.container) {\r\n *     log(\"Could not find inventory component.\", -1);\r\n *     return;\r\n *   }\r\n *\r\n *   const inventoryContainer = inventoryComponent.container;\r\n *\r\n *   // Set slot 0 to a stack of 10 apples\r\n *   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "inventory'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockinventorycomponent",
            "class"
          ],
          "examples": [
            {
              "title": "placeItemsInChest.ts",
              "code": "import { ItemStack, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes, MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // Fetch block\r\n  const block = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (!block) {\r\n    log(\"Could not find block. Maybe it is not loaded?\", -1);\r\n    return;\r\n  }\r\n\n  // Make it a chest\r\n  block.setType(MinecraftBlockTypes.Chest);\r\n\n  // Get the inventory\r\n  const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r\n\n  if (!inventoryComponent || !inventoryComponent.container) {\r\n    log(\"Could not find inventory component.\", -1);\r\n    return;\r\n  }\r\n\n  const inventoryContainer = inventoryComponent.container;\r\n\n  // Set slot 0 to a stack of 10 apples\r\n  inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockLocationIterator",
          "name": "BlockLocationIterator",
          "type": "class",
          "module": "@minecraft/server",
          "description": "A BlockLocationIterator returns the next block location of\r the block volume across which it is iterating.\r The BlockLocationIterator is used to abstract the shape of\r the block volume it was fetched from (so it can represent\r all the block locations that make up rectangles, cubes,\r spheres, lines and complex shapes).\r Each iteration pass returns the next valid block location in\r the parent shape.\r Unless otherwise specified by the parent shape - the\r BlockLocationIterator will iterate over a 3D space in the\r order of increasing X, followed by increasing Z followed by\r increasing Y.\r (Effectively stepping across the XZ plane, and when all the\r locations in that plane are exhausted, increasing the Y\r coordinate to the next XZ slice)\r /",
          "definition": "export class BlockLocationIterator implements Iterable<Vector3> {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    [Symbol.iterator](): Iterator<Vector3>;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    next(): IteratorResult<Vector3>;\r\n}\r",
          "jsdoc": "/**\r\n * A BlockLocationIterator returns the next block location of\r\n * the block volume across which it is iterating.\r\n * The BlockLocationIterator is used to abstract the shape of\r\n * the block volume it was fetched from (so it can represent\r\n * all the block locations that make up rectangles, cubes,\r\n * spheres, lines and complex shapes).\r\n * Each iteration pass returns the next valid block location in\r\n * the parent shape.\r\n * Unless otherwise specified by the parent shape - the\r\n * BlockLocationIterator will iterate over a 3D space in the\r\n * order of increasing X, followed by increasing Z followed by\r\n * increasing Y.\r\n * (Effectively stepping across the XZ plane, and when all the\r\n * locations in that plane are exhausted, increasing the Y\r\n * coordinate to the next XZ slice)\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "next",
              "parameters": [],
              "returnType": "IteratorResult<Vector3>",
              "accessibility": "public",
              "signature": "next(): IteratorResult<Vector3>"
            }
          ],
          "implements": [
            "Iterable<Vector3>"
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blocklocationiterator",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockMapColorComponent",
          "name": "BlockMapColorComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents the color of a block when displayed on a map.\r /",
          "definition": "export class BlockMapColorComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Base map color defined for that block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly color: RGBA;\r\n    /**\r\n     * @remarks\r\n     * Returns the base color multiplied to the evaluated tint at\r\n     * the given position.\r\n     *\r\n     */\r\n    readonly tintedColor: RGBA;\r\n    /**\r\n     * @remarks\r\n     * Type of tint applied to the color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tintMethod: TintMethod;\r\n    static readonly componentId = 'minecraft:map_color';\r\n}\r",
          "jsdoc": "/**\r\n * Represents the color of a block when displayed on a map.\r\n */\r",
          "properties": [
            {
              "name": "color",
              "type": "RGBA",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "tintedColor",
              "type": "RGBA",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "tintMethod",
              "type": "TintMethod",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "map_color'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockmapcolorcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockMovableComponent",
          "name": "BlockMovableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Type of tint applied to the color.",
          "definition": "export class BlockMovableComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly movementType: MovementType;\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly stickyType: StickyType;\r\n    static readonly componentId = 'minecraft:movable';\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Type of tint applied to the color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r",
          "properties": [
            {
              "name": "movementType",
              "type": "MovementType",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "stickyType",
              "type": "StickyType",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "movable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockmovablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockPermutation",
          "name": "BlockPermutation",
          "type": "class",
          "module": "@minecraft/server",
          "description": "properties (also sometimes called block state) which\r Block}).\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
          "definition": "export class BlockPermutation {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The {@link BlockType} that the permutation has.\r\n     *\r\n     */\r\n    readonly 'type': BlockType;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed when touched by\r\n     * liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed when touched by liquid.\r\n     * @throws This function can throw errors.\r\n     */\r\n    canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block can have a liquid placed over it,\r\n     * i.e. be waterlogged.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block can have a liquid placed over it.\r\n     * @throws This function can throw errors.\r\n     */\r\n    canContainLiquid(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns all available block states associated with this\r\n     * block.\r\n     *\r\n     * @returns\r\n     * Returns the list of all of the block states that the\r\n     * permutation has.\r\n     */\r\n    getAllStates(): Record<string, boolean | number | string>;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a prototype item stack based on this block\r\n     * permutation that can be used with item\r\n     * Container/ContainerSlot APIs.\r\n     *\r\n     * @param amount\r\n     * Number of instances of this block to place in the prototype\r\n     * item stack.\r\n     * Defaults to: 1\r\n     */\r\n    getItemStack(amount?: number): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a state for the permutation.\r\n     *\r\n     * @param stateName\r\n     * Name of the block state who's value is to be returned.\r\n     * @returns\r\n     * Returns the state if the permutation has it, else\r\n     * `undefined`.\r\n     */\r\n    getState<T extends keyof minecraftvanilladata.BlockStateSuperset>(\r\n        stateName: T,\r\n    ): minecraftvanilladata.BlockStateSuperset[T] | undefined;\r\n    /**\r\n     * @remarks\r\n     * Creates a copy of the permutation.\r\n     *\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Checks to see if the permutation has a specific tag.\r\n     *\r\n     * @returns\r\n     * Returns `true` if the permutation has the tag, else `false`.\r\n     * @example checkBlockTags.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function checkBlockTags(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // Fetch the block\r\n     *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n     *\r\n     *   // check that the block is loaded\r\n     *   if (block) {\r\n     *     log(`Block is dirt: ${block.hasTag(\"dirt\")}`);\r\n     *     log(`Block is wood: ${block.hasTag(\"wood\")}`);\r\n     *     log(`Block is stone: ${block.hasTag(\"stone\")}`);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block stops liquid from flowing.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block stops liquid from flowing.\r\n     * @throws This function can throw errors.\r\n     */\r\n    isLiquidBlocking(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed and spawns its item\r\n     * when touched by liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed and spawns its item when\r\n     * touched by liquid.\r\n     * @throws This function can throw errors.\r\n     */\r\n    liquidSpreadCausesSpawn(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns a boolean whether a specified permutation matches\r\n     * this permutation. If states is not specified, matches checks\r\n     * against the set of types more broadly.\r\n     *\r\n     * @param blockName\r\n     * An optional set of states to compare against.\r\n     */\r\n    matches<T extends string = minecraftvanilladata.MinecraftBlockTypes>(\r\n        blockName: T,\r\n        states?: BlockStateArg<T>,\r\n    ): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns a derived BlockPermutation with a specific property\r\n     * set.\r\n     *\r\n     * @param name\r\n     * Identifier of the block property.\r\n     * @param value\r\n     * Value of the block property.\r\n     * @throws This function can throw errors.\r\n     */\r\n    withState<T extends keyof minecraftvanilladata.BlockStateSuperset>(\r\n        name: T,\r\n        value: minecraftvanilladata.BlockStateSuperset[T],\r\n    ): BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Given a type identifier and an optional set of properties,\r\n     * will return a BlockPermutation object that is usable in\r\n     * other block APIs (e.g., block.setPermutation)\r\n     *\r\n     * @param blockName\r\n     * Identifier of the block to check.\r\n     * @throws This function can throw errors.\r\n     * @example addBlockColorCube.ts\r\n     * ```typescript\r\n     * import { BlockPermutation, DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function addBlockColorCube(targetLocation: DimensionLocation) {\r\n     *   const allWoolBlocks: string[] = [\r\n     *     MinecraftBlockTypes.WhiteWool,\r\n     *     MinecraftBlockTypes.OrangeWool,\r\n     *     MinecraftBlockTypes.MagentaWool,\r\n     *     MinecraftBlockTypes.LightBlueWool,\r\n     *     MinecraftBlockTypes.YellowWool,\r\n     *     MinecraftBlockTypes.LimeWool,\r\n     *     MinecraftBlockTypes.PinkWool,\r\n     *     MinecraftBlockTypes.GrayWool,\r\n     *     MinecraftBlockTypes.LightGrayWool,\r\n     *     MinecraftBlockTypes.CyanWool,\r\n     *     MinecraftBlockTypes.PurpleWool,\r\n     *     MinecraftBlockTypes.BlueWool,\r\n     *     MinecraftBlockTypes.BrownWool,\r\n     *     MinecraftBlockTypes.GreenWool,\r\n     *     MinecraftBlockTypes.RedWool,\r\n     *     MinecraftBlockTypes.BlackWool,\r\n     *   ];\r\n     *\r\n     *   const cubeDim = 7;\r\n     *\r\n     *   let colorIndex = 0;\r\n     *\r\n     *   for (let x = 0; x <= cubeDim; x++) {\r\n     *     for (let y = 0; y <= cubeDim; y++) {\r\n     *       for (let z = 0; z <= cubeDim; z++) {\r\n     *         colorIndex++;\r\n     *         targetLocation.dimension\r\n     *           .getBlock(Vector3Utils.add(targetLocation, { x, y, z }))\r\n     *           ?.setPermutation(BlockPermutation.resolve(allWoolBlocks[colorIndex % allWoolBlocks.length]));\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    static resolve<T extends string = minecraftvanilladata.MinecraftBlockTypes>(\r\n        blockName: T,\r\n        states?: BlockStateArg<T>,\r\n    ): BlockPermutation;\r\n}\r",
          "jsdoc": "/**\r\n * Contains the combination of type {@link BlockType} and\r\n * properties (also sometimes called block state) which\r\n * describe a block (but does not belong to a specific {@link\r\n * Block}).\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "canBeDestroyedByLiquidSpread",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean"
            },
            {
              "name": "canContainLiquid",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "canContainLiquid(liquidType: LiquidType): boolean"
            },
            {
              "name": "getAllStates",
              "parameters": [],
              "returnType": "Record<string, boolean | number | string>",
              "accessibility": "public",
              "signature": "getAllStates(): Record<string, boolean | number | string>"
            },
            {
              "name": "getItemStack",
              "parameters": [],
              "returnType": "ItemStack | undefined",
              "accessibility": "public",
              "signature": "getItemStack(amount?: number): ItemStack | undefined"
            },
            {
              "name": "getTags",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getTags(): string[]"
            },
            {
              "name": "hasTag",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasTag(tag: string): boolean"
            },
            {
              "name": "isLiquidBlocking",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isLiquidBlocking(liquidType: LiquidType): boolean"
            },
            {
              "name": "liquidSpreadCausesSpawn",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "liquidSpreadCausesSpawn(liquidType: LiquidType): boolean"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockpermutation",
            "class"
          ],
          "examples": [
            {
              "title": "addTranslatedSign.ts",
              "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockPistonComponent",
          "name": "BlockPistonComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When present, this block has piston-like behavior. Contains\r additional properties for discovering block piston state.\r /",
          "definition": "export class BlockPistonComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of expanding or\r\n     * retracting.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isMoving: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current state of the piston.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly state: BlockPistonState;\r\n    static readonly componentId = 'minecraft:piston';\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of blocks that this piston is connected\r\n     * with.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getAttachedBlocks(): Block[];\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of block locations that this piston is\r\n     * connected with.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getAttachedBlocksLocations(): Vector3[];\r\n}\r",
          "jsdoc": "/**\r\n * When present, this block has piston-like behavior. Contains\r\n * additional properties for discovering block piston state.\r\n */\r",
          "properties": [
            {
              "name": "isMoving",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "state",
              "type": "BlockPistonState",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "piston'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getAttachedBlocks",
              "parameters": [],
              "returnType": "Block[]",
              "accessibility": "public",
              "signature": "getAttachedBlocks(): Block[]"
            },
            {
              "name": "getAttachedBlocksLocations",
              "parameters": [],
              "returnType": "Vector3[]",
              "accessibility": "public",
              "signature": "getAttachedBlocksLocations(): Vector3[]"
            }
          ],
          "extends": "BlockComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockpistoncomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockRecordPlayerComponent",
          "name": "BlockRecordPlayerComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a block that can play a record.\r /",
          "definition": "export class BlockRecordPlayerComponent extends BlockComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:record_player';\r\n    /**\r\n     * @remarks\r\n     * Ejects the currently set record of this record-playing\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Gets the currently set record of this record-playing block.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRecord(): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the record-playing block is currently\r\n     * playing a record.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    isPlaying(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Pauses the currently playing record of this record-playing\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    pauseRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Plays the currently set record of this record-playing block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    playRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets and plays a record based on an item type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param startPlaying\r\n     * Defaults to: true\r\n     * @throws This function can throw errors.\r\n     */\r\n    setRecord(recordItemType?: ItemType | string, startPlaying?: boolean): void;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a block that can play a record.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "record_player'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "ejectRecord",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "ejectRecord(): void"
            },
            {
              "name": "getRecord",
              "parameters": [],
              "returnType": "ItemStack | undefined",
              "accessibility": "public",
              "signature": "getRecord(): ItemStack | undefined"
            },
            {
              "name": "isPlaying",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isPlaying(): boolean"
            },
            {
              "name": "pauseRecord",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "pauseRecord(): void"
            },
            {
              "name": "playRecord",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "playRecord(): void"
            },
            {
              "name": "setRecord",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setRecord(recordItemType?: ItemType | string, startPlaying?: boolean): void"
            }
          ],
          "extends": "BlockComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockrecordplayercomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockSignComponent",
          "name": "BlockSignComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a block that can display text on it.\r ```typescript\r  function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r }\r ```\r ```typescript\r  function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const signBlock = targetLocation.dimension.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    if (signComponent) {\r     signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r     signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r     signComponent.setTextDyeColor(DyeColor.Green);\r     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r      // players cannot edit sign!\r     signComponent.setWaxed(true);\r   } else {\r     log(\"Could not find sign component.\");\r   }\r }\r ```\r ```typescript\r  function updateSignText(targetLocation: DimensionLocation) {\r   const block = targetLocation.dimension.getBlock(targetLocation);\r   if (!block) {\r     console.warn(\"Could not find a block at specified location.\");\r     return;\r   }\r    const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r   if (sign) {\r     // RawMessage\r     const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r     sign.setText(helloWorldMessage);\r      // RawText\r     const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r     sign.setText(helloWorldText);\r      // Regular string\r     sign.setText(\"Hello World\");\r   } else {\r     console.warn(\"Could not find a sign component on the block.\");\r   }\r }\r ```\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
          "definition": "export class BlockSignComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether or not players can edit the sign. This happens if a\r\n     * sign has had a honeycomb used on it or `setWaxed` was called\r\n     * on the sign.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isWaxed: boolean;\r\n    static readonly componentId = 'minecraft:sign';\r\n    /**\r\n     * @remarks\r\n     * Returns the RawText of the sign if `setText` was called with\r\n     * a RawMessage or a RawText object, otherwise returns\r\n     * undefined.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the message from. If not\r\n     * provided, this will return the message from the front side\r\n     * of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRawText(side?: SignSide): RawText | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the text of the sign if `setText` was called with a\r\n     * string, otherwise returns undefined.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the message from. If not\r\n     * provided, this will return the message from the front side\r\n     * of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getText(side?: SignSide): string | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the dye that is on the text or undefined if the sign\r\n     * has not been dyed.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the dye from. If not provided,\r\n     * this will return the dye on the front side of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTextDyeColor(side?: SignSide): DyeColor | undefined;\r\n    /**\r\n     * @remarks\r\n     * Sets the text of the sign component.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param message\r\n     * The message to set on the sign. If set to a string, then\r\n     * call `getText` to read that string. If set to a RawMessage,\r\n     * then calling `getRawText` will return a RawText.\r\n     * @param side\r\n     * The side of the sign the message will be set on. If not\r\n     * provided, the message will be set on the front side of the\r\n     * sign.\r\n     * Defaults to: 0\r\n     * @throws\r\n     * Throws if the provided message is greater than 512\r\n     * characters in length.\r\n     */\r\n    setText(message: RawMessage | string, side?: SignSide): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the dye color of the text.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param color\r\n     * The dye color to apply to the sign or undefined to clear the\r\n     * dye on the sign.\r\n     * Defaults to: null\r\n     * @param side\r\n     * The side of the sign the color will be set on. If not\r\n     * provided, the color will be set on the front side of the\r\n     * sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    setTextDyeColor(color?: DyeColor, side?: SignSide): void;\r\n    /**\r\n     * @remarks\r\n     * Makes it so players cannot edit this sign.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setWaxed(waxed: boolean): void;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a block that can display text on it.\r\n * @example addSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r\n * }\r\n * ```\r\n * @example addTwoSidedSign.ts\r\n * ```typescript\r\n * import { BlockPermutation, BlockSignComponent, SignSide, DyeColor, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const signBlock = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   if (signComponent) {\r\n *     signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r\n *     signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r\n *     signComponent.setTextDyeColor(DyeColor.Green);\r\n *     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r\n *\r\n *     // players cannot edit sign!\r\n *     signComponent.setWaxed(true);\r\n *   } else {\r\n *     log(\"Could not find sign component.\");\r\n *   }\r\n * }\r\n * ```\r\n * @example updateSignText.ts\r\n * ```typescript\r\n * import { BlockSignComponent, BlockComponentTypes, DimensionLocation, RawMessage, RawText } from \"@minecraft/server\";\r\n *\r\n * function updateSignText(targetLocation: DimensionLocation) {\r\n *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n *   if (!block) {\r\n *     console.warn(\"Could not find a block at specified location.\");\r\n *     return;\r\n *   }\r\n *\r\n *   const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *   if (sign) {\r\n *     // RawMessage\r\n *     const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r\n *     sign.setText(helloWorldMessage);\r\n *\r\n *     // RawText\r\n *     const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r\n *     sign.setText(helloWorldText);\r\n *\r\n *     // Regular string\r\n *     sign.setText(\"Hello World\");\r\n *   } else {\r\n *     console.warn(\"Could not find a sign component on the block.\");\r\n *   }\r\n * }\r\n * ```\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "isWaxed",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "sign'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getRawText",
              "parameters": [],
              "returnType": "RawText | undefined",
              "accessibility": "public",
              "signature": "getRawText(side?: SignSide): RawText | undefined"
            },
            {
              "name": "getText",
              "parameters": [],
              "returnType": "string | undefined",
              "accessibility": "public",
              "signature": "getText(side?: SignSide): string | undefined"
            },
            {
              "name": "getTextDyeColor",
              "parameters": [],
              "returnType": "DyeColor | undefined",
              "accessibility": "public",
              "signature": "getTextDyeColor(side?: SignSide): DyeColor | undefined"
            },
            {
              "name": "setText",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setText(message: RawMessage | string, side?: SignSide): void"
            },
            {
              "name": "setTextDyeColor",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setTextDyeColor(color?: DyeColor, side?: SignSide): void"
            },
            {
              "name": "setWaxed",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setWaxed(waxed: boolean): void"
            }
          ],
          "extends": "BlockComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blocksigncomponent",
            "class"
          ],
          "examples": [
            {
              "title": "addSign.ts",
              "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r\n}"
            },
            {
              "title": "addTwoSidedSign.ts",
              "code": "import { BlockPermutation, BlockSignComponent, SignSide, DyeColor, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const signBlock = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  if (signComponent) {\r\n    signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r\n    signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r\n    signComponent.setTextDyeColor(DyeColor.Green);\r\n    signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r\n\n    // players cannot edit sign!\r\n    signComponent.setWaxed(true);\r\n  } else {\r\n    log(\"Could not find sign component.\");\r\n  }\r\n}"
            },
            {
              "title": "updateSignText.ts",
              "code": "import { BlockSignComponent, BlockComponentTypes, DimensionLocation, RawMessage, RawText } from \"@minecraft/server\";\r\n\nfunction updateSignText(targetLocation: DimensionLocation) {\r\n  const block = targetLocation.dimension.getBlock(targetLocation);\r\n  if (!block) {\r\n    console.warn(\"Could not find a block at specified location.\");\r\n    return;\r\n  }\r\n\n  const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n  if (sign) {\r\n    // RawMessage\r\n    const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r\n    sign.setText(helloWorldMessage);\r\n\n    // RawText\r\n    const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r\n    sign.setText(helloWorldText);\r\n\n    // Regular string\r\n    sign.setText(\"Hello World\");\r\n  } else {\r\n    console.warn(\"Could not find a sign component on the block.\");\r\n  }\r\n}"
            },
            {
              "title": "addTranslatedSign.ts",
              "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockStates",
          "name": "BlockStates",
          "type": "class",
          "module": "@minecraft/server",
          "description": "/",
          "definition": "export class BlockStates {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves a specific block state instance.\r\n     *\r\n     * @returns\r\n     * Returns the {@link Block} state instance if it is found. If\r\n     * the block state instance is not found returns undefined.\r\n     */\r\n    static get(stateName: string): BlockStateType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of all available block states.\r\n     *\r\n     */\r\n    static getAll(): BlockStateType[];\r\n}\r",
          "jsdoc": "/**\r\n * Enumerates all {@link BlockStateType}s.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "BlockStateType | undefined",
              "accessibility": "public",
              "signature": "get(stateName: string): BlockStateType | undefined"
            },
            {
              "name": "getAll",
              "parameters": [],
              "returnType": "BlockStateType[]",
              "accessibility": "public",
              "signature": "getAll(): BlockStateType[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockstates",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockStateType",
          "name": "BlockStateType",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a configurable state value of a block instance.\r For example, the facing direction of stairs is accessible as\r a block state.\r /",
          "definition": "export class BlockStateType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of the block property.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * A set of valid values for the block property.\r\n     *\r\n     */\r\n    readonly validValues: (boolean | number | string)[];\r\n}\r",
          "jsdoc": "/**\r\n * Represents a configurable state value of a block instance.\r\n * For example, the facing direction of stairs is accessible as\r\n * a block state.\r\n */\r",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "validValues",
              "type": "(boolean | number | string)[]",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockstatetype",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockType",
          "name": "BlockType",
          "type": "class",
          "module": "@minecraft/server",
          "description": "The type (or template) of a block. Does not contain\r permutation data (state) other than the type of block it\r represents. This type was introduced as of version\r 1.17.10.21.\r /",
          "definition": "export class BlockType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block type name - for example, `minecraft:acacia_stairs`.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
          "jsdoc": "/**\r\n * The type (or template) of a block. Does not contain\r\n * permutation data (state) other than the type of block it\r\n * represents. This type was introduced as of version\r\n * 1.17.10.21.\r\n */\r",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blocktype",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockTypes",
          "name": "BlockTypes",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains a catalog of Minecraft Block Types that are\r available in this world.\r /",
          "definition": "export class BlockTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a BlockType object for the specified identifier.\r\n     *\r\n     * @param typeName\r\n     * Identifier of the block type. Should follow a namespace:id\r\n     * pattern, such as minecraft:dirt.\r\n     * @returns\r\n     * BlockType object, or undefined if the block type is not\r\n     * available within this world.\r\n     */\r\n    static get(typeName: string): BlockType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of all available block types.\r\n     *\r\n     */\r\n    static getAll(): BlockType[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains a catalog of Minecraft Block Types that are\r\n * available in this world.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "BlockType | undefined",
              "accessibility": "public",
              "signature": "get(typeName: string): BlockType | undefined"
            },
            {
              "name": "getAll",
              "parameters": [],
              "returnType": "BlockType[]",
              "accessibility": "public",
              "signature": "getAll(): BlockType[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blocktypes",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockVolume",
          "name": "BlockVolume",
          "type": "class",
          "module": "@minecraft/server",
          "description": "A BlockVolume is a simple interface to an object which\r represents a 3D rectangle of a given size (in blocks) at a\r world block location.\r Note that these are not analogous to \"min\" and \"max\" values,\r in that the vector components are not guaranteed to be in\r any order.\r In addition, these vector positions are not interchangeable\r with BlockLocation.\r If you want to get this volume represented as range of of\r BlockLocations, you can use the getBoundingBox utility\r function.\r This volume class will maintain the ordering of the corner\r indexes as initially set. imagine that each corner is\r assigned in Editor - as you move the corner around\r (potentially inverting the min/max relationship of the\r bounds) - what\r you had originally selected as the top/left corner would\r traditionally become the bottom/right.\r When manually editing these kinds of volumes, you need to\r maintain the identity of the corner as you edit - the\r BlockVolume utility functions do this.\r  Important to note that this measures block sizes (to/from) -\r a normal AABB (0,0,0) to (0,0,0) would traditionally be of\r size (0,0,0)\r However, because we're measuring blocks - the size or span\r of a BlockVolume would actually be (1,1,1)\r  /",
          "definition": "export class BlockVolume extends BlockVolumeBase {\n    /**\r\n     * @remarks\r\n     * A world block location that represents a corner in a 3D\r\n     * rectangle\r\n     *\r\n     */\r\n    'from': Vector3;\r\n    /**\r\n     * @remarks\r\n     * A world block location that represents the opposite corner\r\n     * in a 3D rectangle\r\n     *\r\n     */\r\n    to: Vector3;\r\n    constructor(from: Vector3, to: Vector3);\r\n    /**\r\n     * @remarks\r\n     * Check to see if the given location is directly adjacent to\r\n     * the outer surface of a BlockVolume.\r\n     *\r\n     *\r\n     * @param pos\r\n     * The world block location to test\r\n     * @returns\r\n     * If the location is either inside or more than 0 blocks away,\r\n     * the function will return false.\r\n     * If the location is directly contacting the outer surface of\r\n     * the BlockVolume, the function will return true.\r\n     */\r\n    doesLocationTouchFaces(pos: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Check to see if a two block volumes are directly adjacent\r\n     * and two faces touch.\r\n     *\r\n     * @param other\r\n     * The volume to test\r\n     * @returns\r\n     * If the outer faces of both block volumes touch and are\r\n     * directly adjacent at any point, return true.\r\n     */\r\n    doesVolumeTouchFaces(other: BlockVolume): boolean;\r\n    /**\r\n     * @remarks\r\n     * Return an enumeration which represents the intersection\r\n     * between two BlockVolume objects\r\n     *\r\n     */\r\n    intersects(other: BlockVolume): BlockVolumeIntersection;\r\n}\r",
          "jsdoc": "/**\r\n * A BlockVolume is a simple interface to an object which\r\n * represents a 3D rectangle of a given size (in blocks) at a\r\n * world block location.\r\n * Note that these are not analogous to \"min\" and \"max\" values,\r\n * in that the vector components are not guaranteed to be in\r\n * any order.\r\n * In addition, these vector positions are not interchangeable\r\n * with BlockLocation.\r\n * If you want to get this volume represented as range of of\r\n * BlockLocations, you can use the getBoundingBox utility\r\n * function.\r\n * This volume class will maintain the ordering of the corner\r\n * indexes as initially set. imagine that each corner is\r\n * assigned in Editor - as you move the corner around\r\n * (potentially inverting the min/max relationship of the\r\n * bounds) - what\r\n * you had originally selected as the top/left corner would\r\n * traditionally become the bottom/right.\r\n * When manually editing these kinds of volumes, you need to\r\n * maintain the identity of the corner as you edit - the\r\n * BlockVolume utility functions do this.\r\n *\r\n * Important to note that this measures block sizes (to/from) -\r\n * a normal AABB (0,0,0) to (0,0,0) would traditionally be of\r\n * size (0,0,0)\r\n * However, because we're measuring blocks - the size or span\r\n * of a BlockVolume would actually be (1,1,1)\r\n *\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "doesLocationTouchFaces",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "doesLocationTouchFaces(pos: Vector3): boolean"
            },
            {
              "name": "doesVolumeTouchFaces",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "doesVolumeTouchFaces(other: BlockVolume): boolean"
            },
            {
              "name": "intersects",
              "parameters": [],
              "returnType": "BlockVolumeIntersection",
              "accessibility": "public",
              "signature": "intersects(other: BlockVolume): BlockVolumeIntersection"
            }
          ],
          "extends": "BlockVolumeBase",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockvolume",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockVolumeBase",
          "name": "BlockVolumeBase",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Base type for BlockVolumes.\r /",
          "definition": "export class BlockVolumeBase {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Fetch a {@link BlockLocationIterator} that represents all of\r\n     * the block world locations within the specified volume\r\n     *\r\n     */\r\n    getBlockLocationIterator(): BlockLocationIterator;\r\n    /**\r\n     * @remarks\r\n     * Return the capacity (volume) of the BlockVolume (W*D*H)\r\n     *\r\n     */\r\n    getCapacity(): number;\r\n    /**\r\n     * @remarks\r\n     * Get the largest corner position of the volume (guaranteed to\r\n     * be >= min)\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getMax(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Get the smallest corner position of the volume (guaranteed\r\n     * to be <= max)\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getMin(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Get a {@link Vector3} object where each component represents\r\n     * the number of blocks along that axis\r\n     *\r\n     */\r\n    getSpan(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Check to see if a given world block location is inside a\r\n     * BlockVolume\r\n     *\r\n     */\r\n    isInside(location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Move a BlockVolume by a specified amount\r\n     *\r\n     * @param delta\r\n     * Amount of blocks to move by\r\n     */\r\n    translate(delta: Vector3): void;\r\n}\r",
          "jsdoc": "/**\r\n * Base type for BlockVolumes.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "getBlockLocationIterator",
              "parameters": [],
              "returnType": "BlockLocationIterator",
              "accessibility": "public",
              "signature": "getBlockLocationIterator(): BlockLocationIterator"
            },
            {
              "name": "getCapacity",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getCapacity(): number"
            },
            {
              "name": "getMax",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "getMax(): Vector3"
            },
            {
              "name": "getMin",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "getMin(): Vector3"
            },
            {
              "name": "getSpan",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "getSpan(): Vector3"
            },
            {
              "name": "isInside",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isInside(location: Vector3): boolean"
            },
            {
              "name": "translate",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "translate(delta: Vector3): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockvolumebase",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ButtonPushAfterEvent",
          "name": "ButtonPushAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to a button push.\r ```typescript\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a button on cobblestone\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r     const eventLoc = buttonPushEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Button push event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
          "definition": "export class ButtonPushAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Optional source that triggered the button push.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to a button push.\r\n * @example buttonPushEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a button on cobblestone\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n *     const eventLoc = buttonPushEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Button push event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "source",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "buttonpushafterevent",
            "class"
          ],
          "examples": [
            {
              "title": "buttonPushEvent.ts",
              "code": "import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a button on cobblestone\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n    const eventLoc = buttonPushEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Button push event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ButtonPushAfterEventSignal",
          "name": "ButtonPushAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a button is\r pushed.\r ```typescript\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a button on cobblestone\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r     const eventLoc = buttonPushEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Button push event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
          "definition": "export class ButtonPushAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a button is pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ButtonPushAfterEvent) => void): (arg0: ButtonPushAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a button is\r\n     * pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ButtonPushAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a button is\r\n * pushed.\r\n * @example buttonPushEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a button on cobblestone\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n *     const eventLoc = buttonPushEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Button push event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "buttonpushaftereventsignal",
            "class"
          ],
          "examples": [
            {
              "title": "buttonPushEvent.ts",
              "code": "import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a button on cobblestone\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n    const eventLoc = buttonPushEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Button push event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Camera",
          "name": "Camera",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains methods relating to the active camera for the\r specified player.\r /",
          "definition": "export class Camera {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns whether the Camera is valid to access and use. A\r\n     * Camera is considered valid when the owning Player of the\r\n     * Camera is loaded and valid itself.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Clears the active camera for the specified player. Causes\r\n     * the specified players to end any in-progress camera\r\n     * perspectives, including any eased camera motions, and return\r\n     * to their normal perspective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    clear(): void;\r\n    /**\r\n     * @remarks\r\n     * Begins a camera fade transition. A fade transition is a\r\n     * full-screen color that fades-in, holds, and then fades-out.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fadeCameraOptions\r\n     * Additional options around camera fade operations.\r\n     * @throws This function can throw errors.\r\n     */\r\n    fade(fadeCameraOptions?: CameraFadeOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current active camera for the specified player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cameraPreset\r\n     * Identifier of a camera preset file defined within JSON.\r\n     * @param setOptions\r\n     * Additional options for the camera.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setCamera(\r\n        cameraPreset: string,\r\n        setOptions?:\r\n            | CameraFixedBoomOptions\r\n            | CameraSetFacingOptions\r\n            | CameraSetLocationOptions\r\n            | CameraSetPosOptions\r\n            | CameraSetRotOptions\r\n            | CameraTargetOptions,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current active camera for the specified player and\r\n     * resets the position and rotation to the values defined in\r\n     * the JSON.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cameraPreset\r\n     * Identifier of a camera preset file defined within JSON.\r\n     * @param easeOptions\r\n     * Options to ease the camera back to its original position and\r\n     * rotation.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setDefaultCamera(cameraPreset: string, easeOptions?: EaseOptions): void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains methods relating to the active camera for the\r\n * specified player.\r\n */\r",
          "properties": [
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "clear",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clear(): void"
            },
            {
              "name": "fade",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "fade(fadeCameraOptions?: CameraFadeOptions): void"
            },
            {
              "name": "setDefaultCamera",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setDefaultCamera(cameraPreset: string, easeOptions?: EaseOptions): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "camera",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ClientSystemInfo",
          "name": "ClientSystemInfo",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains the device information for a client instance.\r /",
          "definition": "export class ClientSystemInfo extends SystemInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The max render distance for the device in chunks.\r\n     *\r\n     */\r\n    readonly maxRenderDistance: number;\r\n    /**\r\n     * @remarks\r\n     * The platform type of the device.\r\n     *\r\n     */\r\n    readonly platformType: PlatformType;\r\n}\r",
          "jsdoc": "/**\r\n * Contains the device information for a client instance.\r\n */\r",
          "properties": [
            {
              "name": "maxRenderDistance",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "platformType",
              "type": "PlatformType",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "SystemInfo",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "clientsysteminfo",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CommandResult",
          "name": "CommandResult",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains return data on the result of a command execution.\r /",
          "definition": "export class CommandResult {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If the command operates against a number of entities,\r\n     * blocks, or items, this returns the number of successful\r\n     * applications of this command.\r\n     *\r\n     */\r\n    readonly successCount: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains return data on the result of a command execution.\r\n */\r",
          "properties": [
            {
              "name": "successCount",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "commandresult",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Component",
          "name": "Component",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Base class for downstream Component implementations.\r /",
          "definition": "export class Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns whether the component is valid. A component is\r\n     * considered valid if its owner is valid, in addition to any\r\n     * addition to any additional validation required by the\r\n     * component.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the component.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
          "jsdoc": "/**\r\n * Base class for downstream Component implementations.\r\n */\r",
          "properties": [
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "typeId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "component",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Container",
          "name": "Container",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a container that can hold sets of items. Used\r with entities such as Players, Chest Minecarts, Llamas, and\r more.\r ```typescript\r  function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const xLocation = targetLocation; // left chest location\r   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r    const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r     x: targetLocation.x + 4,\r     y: targetLocation.y,\r     z: targetLocation.z,\r   });\r    const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r    if (!xChestBlock || !xPlusTwoChestBlock) {\r     log(\"Could not retrieve chest blocks.\");\r     return;\r   }\r    xChestBlock.setType(MinecraftBlockTypes.Chest);\r   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r    const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r   const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r   const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r    const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r   const xChestContainer = xChestInventoryComponent.container;\r   const chestCartContainer = chestCartInventoryComp.container;\r    if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r     log(\"Could not retrieve chest containers.\");\r     return;\r   }\r    xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r     log(\"Expected apple in x+2 container slot index 0\", -1);\r   }\r    xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r     log(\"Expected emerald in x+2 container slot index 1\", -1);\r   }\r    if (xPlusTwoChestContainer.size !== 27) {\r     log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r   }\r    if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r     log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r   }\r    xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r    xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r    if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r     log(\"Expected apple in minecraft chest container slot index 0\", -1);\r   }\r    if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r     log(\"Expected emerald in x container slot index 0\", -1);\r   }\r    if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r     log(\"Expected cake in x+2 container slot index 1\", -1);\r   }\r }\r ```\r /",
          "definition": "export class Container {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Count of the slots in the container that are empty.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    readonly emptySlotsCount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether a container object (or the entity or block\r\n     * that this container is associated with) is still available\r\n     * for use in this context.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * The number of slots in this container. For example, a\r\n     * standard single-block chest has a size of 27. Note, a\r\n     * player's inventory container contains a total of 36 slots, 9\r\n     * hotbar slots plus 27 inventory slots.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    readonly size: number;\r\n    /**\r\n     * @remarks\r\n     * Adds an item to the container. The item is placed in the\r\n     * first available slot(s) and can be stacked with existing\r\n     * items of the same type. Note, use {@link Container.setItem}\r\n     * if you wish to set the item in a particular slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param itemStack\r\n     * The stack of items to add.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addItem(itemStack: ItemStack): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Clears all inventory items in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    clearAll(): void;\r\n    /**\r\n     * @remarks\r\n     * Attempts to find an item inside the container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    contains(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * Find the index of the first instance of an item inside the\r\n     * container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    find(itemStack: ItemStack): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Find the index of the last instance of an item inside the\r\n     * container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    findLast(itemStack: ItemStack): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Finds the index of the first empty slot inside the container\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    firstEmptySlot(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Finds the index of the first item inside the container\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    firstItem(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets an {@link ItemStack} of the item at the specified slot.\r\n     * If the slot is empty, returns `undefined`. This method does\r\n     * not change or clear the contents of the specified slot. To\r\n     * get a reference to a particular slot, see {@link\r\n     * Container.getSlot}.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to retrieve items from.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     * @example getFirstHotbarItem.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function getFirstHotbarItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const inventory = player.getComponent(EntityInventoryComponent.componentId) as EntityInventoryComponent;\r\n     *     if (inventory && inventory.container) {\r\n     *       const firstItem = inventory.container.getItem(0);\r\n     *\r\n     *       if (firstItem) {\r\n     *         log(\"First item in hotbar is: \" + firstItem.typeId);\r\n     *       }\r\n     *\r\n     *       return inventory.container.getItem(0);\r\n     *     }\r\n     *     return undefined;\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getItem(slot: number): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a container slot. This acts as a reference to a slot\r\n     * at the given index for this container.\r\n     *\r\n     * @param slot\r\n     * The index of the slot to return. This index must be within\r\n     * the bounds of the container.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     */\r\n    getSlot(slot: number): ContainerSlot;\r\n    /**\r\n     * @remarks\r\n     * Moves an item from one slot to another, potentially across\r\n     * containers.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fromSlot\r\n     * Zero-based index of the slot to transfer an item from, on\r\n     * this container.\r\n     * @param toSlot\r\n     * Zero-based index of the slot to transfer an item to, on\r\n     * `toContainer`.\r\n     * @param toContainer\r\n     * Target container to transfer to. Note this can be the same\r\n     * container as the source.\r\n     * @throws\r\n     * Throws if either this container or `toContainer` are invalid\r\n     * or if the `fromSlot` or `toSlot` indices out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     * @example moveBetweenContainers.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function moveBetweenContainers(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getAllPlayers();\r\n     *\r\n     *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     const fromPlayer = players[0];\r\n     *\r\n     *     const fromInventory = fromPlayer.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     const toInventory = chestCart.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *\r\n     *     if (fromInventory && toInventory && fromInventory.container && toInventory.container) {\r\n     *       fromInventory.container.moveItem(0, 0, toInventory.container);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    moveItem(fromSlot: number, toSlot: number, toContainer: Container): void;\r\n    /**\r\n     * @remarks\r\n     * Sets an item stack within a particular slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to set an item at.\r\n     * @param itemStack\r\n     * Stack of items to place within the specified slot. Setting\r\n     * `itemStack` to undefined will clear the slot.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    setItem(slot: number, itemStack?: ItemStack): void;\r\n    /**\r\n     * @remarks\r\n     * Swaps items between two different slots within containers.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to swap from this container.\r\n     * @param otherSlot\r\n     * Zero-based index of the slot to swap with.\r\n     * @param otherContainer\r\n     * Target container to swap with. Note this can be the same\r\n     * container as this source.\r\n     * @throws\r\n     * Throws if either this container or `otherContainer` are\r\n     * invalid or if the `slot` or `otherSlot` are out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): void;\r\n    /**\r\n     * @remarks\r\n     * Moves an item from one slot to another container, or to the\r\n     * first available slot in the same container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fromSlot\r\n     * Zero-based index of the slot to transfer an item from, on\r\n     * this container.\r\n     * @param toContainer\r\n     * Target container to transfer to. Note this can be the same\r\n     * container as the source.\r\n     * @returns\r\n     * An itemStack with the items that couldn't be transferred.\r\n     * Returns undefined if all items were transferred.\r\n     * @throws\r\n     * Throws if either this container or `toContainer` are invalid\r\n     * or if the `fromSlot` or `toSlot` indices out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     * @example transferBetweenContainers.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function transferBetweenContainers(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getAllPlayers();\r\n     *\r\n     *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     const fromPlayer = players[0];\r\n     *\r\n     *     const fromInventory = fromPlayer.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     const toInventory = chestCart.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *\r\n     *     if (fromInventory && toInventory && fromInventory.container && toInventory.container) {\r\n     *       fromInventory.container.transferItem(0, toInventory.container);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    transferItem(fromSlot: number, toContainer: Container): ItemStack | undefined;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a container that can hold sets of items. Used\r\n * with entities such as Players, Chest Minecarts, Llamas, and\r\n * more.\r\n * @example containers.ts\r\n * ```typescript\r\n * import { ItemStack, EntityInventoryComponent, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes, MinecraftItemTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const xLocation = targetLocation; // left chest location\r\n *   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r\n *\r\n *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n *     x: targetLocation.x + 4,\r\n *     y: targetLocation.y,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r\n *   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r\n *\r\n *   if (!xChestBlock || !xPlusTwoChestBlock) {\r\n *     log(\"Could not retrieve chest blocks.\");\r\n *     return;\r\n *   }\r\n *\r\n *   xChestBlock.setType(MinecraftBlockTypes.Chest);\r\n *   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r\n *\r\n *   const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *   const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *   const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r\n *\r\n *   const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r\n *   const xChestContainer = xChestInventoryComponent.container;\r\n *   const chestCartContainer = chestCartInventoryComp.container;\r\n *\r\n *   if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r\n *     log(\"Could not retrieve chest containers.\");\r\n *     return;\r\n *   }\r\n *\r\n *   xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n *   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n *     log(\"Expected apple in x+2 container slot index 0\", -1);\r\n *   }\r\n *\r\n *   xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r\n *   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r\n *     log(\"Expected emerald in x+2 container slot index 1\", -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.size !== 27) {\r\n *     log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r\n *     log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r\n *   }\r\n *\r\n *   xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r\n *\r\n *   xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r\n *   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r\n *\r\n *   if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n *     log(\"Expected apple in minecraft chest container slot index 0\", -1);\r\n *   }\r\n *\r\n *   if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r\n *     log(\"Expected emerald in x container slot index 0\", -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r\n *     log(\"Expected cake in x+2 container slot index 1\", -1);\r\n *   }\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "emptySlotsCount",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "size",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "addItem",
              "parameters": [],
              "returnType": "ItemStack | undefined",
              "accessibility": "public",
              "signature": "addItem(itemStack: ItemStack): ItemStack | undefined"
            },
            {
              "name": "clearAll",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearAll(): void"
            },
            {
              "name": "contains",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "contains(itemStack: ItemStack): boolean"
            },
            {
              "name": "find",
              "parameters": [],
              "returnType": "number | undefined",
              "accessibility": "public",
              "signature": "find(itemStack: ItemStack): number | undefined"
            },
            {
              "name": "findLast",
              "parameters": [],
              "returnType": "number | undefined",
              "accessibility": "public",
              "signature": "findLast(itemStack: ItemStack): number | undefined"
            },
            {
              "name": "firstEmptySlot",
              "parameters": [],
              "returnType": "number | undefined",
              "accessibility": "public",
              "signature": "firstEmptySlot(): number | undefined"
            },
            {
              "name": "firstItem",
              "parameters": [],
              "returnType": "number | undefined",
              "accessibility": "public",
              "signature": "firstItem(): number | undefined"
            },
            {
              "name": "getItem",
              "parameters": [],
              "returnType": "ItemStack | undefined",
              "accessibility": "public",
              "signature": "getItem(slot: number): ItemStack | undefined"
            },
            {
              "name": "getSlot",
              "parameters": [],
              "returnType": "ContainerSlot",
              "accessibility": "public",
              "signature": "getSlot(slot: number): ContainerSlot"
            },
            {
              "name": "moveItem",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "moveItem(fromSlot: number, toSlot: number, toContainer: Container): void"
            },
            {
              "name": "setItem",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setItem(slot: number, itemStack?: ItemStack): void"
            },
            {
              "name": "swapItems",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "swapItems(slot: number, otherSlot: number, otherContainer: Container): void"
            },
            {
              "name": "transferItem",
              "parameters": [],
              "returnType": "ItemStack | undefined",
              "accessibility": "public",
              "signature": "transferItem(fromSlot: number, toContainer: Container): ItemStack | undefined"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "container",
            "class"
          ],
          "examples": [
            {
              "title": "containers.ts",
              "code": "import { ItemStack, EntityInventoryComponent, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes, MinecraftItemTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const xLocation = targetLocation; // left chest location\r\n  const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r\n\n  const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n    x: targetLocation.x + 4,\r\n    y: targetLocation.y,\r\n    z: targetLocation.z,\r\n  });\r\n\n  const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r\n  const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r\n\n  if (!xChestBlock || !xPlusTwoChestBlock) {\r\n    log(\"Could not retrieve chest blocks.\");\r\n    return;\r\n  }\r\n\n  xChestBlock.setType(MinecraftBlockTypes.Chest);\r\n  xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r\n\n  const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n  const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n  const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r\n\n  const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r\n  const xChestContainer = xChestInventoryComponent.container;\r\n  const chestCartContainer = chestCartInventoryComp.container;\r\n\n  if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r\n    log(\"Could not retrieve chest containers.\");\r\n    return;\r\n  }\r\n\n  xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n  if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n    log(\"Expected apple in x+2 container slot index 0\", -1);\r\n  }\r\n\n  xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r\n  if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r\n    log(\"Expected emerald in x+2 container slot index 1\", -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.size !== 27) {\r\n    log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r\n    log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r\n  }\r\n\n  xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r\n\n  xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r\n  xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r\n\n  if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n    log(\"Expected apple in minecraft chest container slot index 0\", -1);\r\n  }\r\n\n  if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r\n    log(\"Expected emerald in x container slot index 0\", -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r\n    log(\"Expected cake in x+2 container slot index 1\", -1);\r\n  }\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ContainerSlot",
          "name": "ContainerSlot",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a slot within a broader container (e.g., entity\r inventory.)\r /",
          "definition": "export class ContainerSlot {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Number of the items in the stack. Valid values range between\r\n     * 1-255. The provided value will be clamped to the item's\r\n     * maximum stack size.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the value is outside the range of 1-255.\r\n     */\r\n    amount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item is stackable. An item is considered\r\n     * stackable if the item's maximum stack size is greater than 1\r\n     * and the item does not contain any custom data or properties.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly isStackable: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the ContainerSlot is valid. The container\r\n     * slot is valid if the container exists and is loaded, and the\r\n     * slot index is valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets whether the item is kept on death.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     */\r\n    keepOnDeath: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets the item's lock mode. The default value is\r\n     * `ItemLockMode.none`.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     */\r\n    lockMode: ItemLockMode;\r\n    /**\r\n     * @remarks\r\n     * The maximum stack size. This value varies depending on the\r\n     * type of item. For example, torches have a maximum stack size\r\n     * of 64, while eggs have a maximum stack size of 16.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly maxAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Given name of this stack of items. The name tag is displayed\r\n     * when hovering over the item. Setting the name tag to an\r\n     * empty string or `undefined` will remove the name tag.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * the length exceeds 255 characters.\r\n     */\r\n    nameTag?: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the item.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly 'type': ItemType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of items for the stack. If a\r\n     * namespace is not specified, 'minecraft:' is assumed.\r\n     * Examples include 'wheat' or 'apple'.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * item stack.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item within this container slot can be\r\n     * destroyed.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getCanDestroy(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns if the item in this container slot can be placed on.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getCanPlaceOn(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this item stack.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Creates an exact copy of the item stack, including any\r\n     * custom data or properties.\r\n     *\r\n     * @returns\r\n     * Returns a copy of the item in the slot. Returns undefined if\r\n     * the slot is empty.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getItem(): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * @returns\r\n     * An array of lore strings. If the item does not have lore,\r\n     * returns an empty array.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getLore(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns all tags for the item in the slot.\r\n     *\r\n     * @returns\r\n     * Returns all tags for the item in the slot. Return an empty\r\n     * array if the the slot is empty.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if this slot has an item.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    hasItem(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item in the slot slot has the given tag.\r\n     *\r\n     * @param tag\r\n     * The item tag.\r\n     * @returns\r\n     * Returns false when the slot is empty or the item in the slot\r\n     * does not have the given tag.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`. This is determined by comparing the item\r\n     * type and any custom data and properties associated with the\r\n     * item stacks. The amount of each item stack is not taken into\r\n     * consideration.\r\n     *\r\n     * @param itemStack\r\n     * The ItemStack that is being compared.\r\n     * @returns\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    isStackableWith(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can break in Adventure\r\n     * mode. The block names are displayed in the item's tooltip.\r\n     * Setting the value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * The list of blocks, given by their identifiers.\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * any of the provided block identifiers are invalid.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setCanDestroy(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can be placed on in\r\n     * Adventure mode. This is only applicable to block items. The\r\n     * block names are displayed in the item's tooltip. Setting the\r\n     * value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * The list of blocks, given by their identifiers.\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * any of the provided block identifiers are invalid.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setCanPlaceOn(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the given ItemStack in the slot, replacing any existing\r\n     * item.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param itemStack\r\n     * The ItemStack to be placed in the slot.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setItem(itemStack?: ItemStack): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param loreList\r\n     * A list of lore strings. Setting this argument to undefined\r\n     * will clear the lore.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setLore(loreList?: string[]): void;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a slot within a broader container (e.g., entity\r\n * inventory.)\r\n */\r",
          "properties": [
            {
              "name": "isStackable",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "maxAmount",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "typeId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "clearDynamicProperties",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearDynamicProperties(): void"
            },
            {
              "name": "getCanDestroy",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getCanDestroy(): string[]"
            },
            {
              "name": "getCanPlaceOn",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getCanPlaceOn(): string[]"
            },
            {
              "name": "getDynamicProperty",
              "parameters": [],
              "returnType": "boolean | number | string | Vector3 | undefined",
              "accessibility": "public",
              "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
            },
            {
              "name": "getDynamicPropertyIds",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getDynamicPropertyIds(): string[]"
            },
            {
              "name": "getDynamicPropertyTotalByteCount",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getDynamicPropertyTotalByteCount(): number"
            },
            {
              "name": "getItem",
              "parameters": [],
              "returnType": "ItemStack | undefined",
              "accessibility": "public",
              "signature": "getItem(): ItemStack | undefined"
            },
            {
              "name": "getLore",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getLore(): string[]"
            },
            {
              "name": "getTags",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getTags(): string[]"
            },
            {
              "name": "hasItem",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasItem(): boolean"
            },
            {
              "name": "hasTag",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasTag(tag: string): boolean"
            },
            {
              "name": "isStackableWith",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isStackableWith(itemStack: ItemStack): boolean"
            },
            {
              "name": "setCanDestroy",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setCanDestroy(blockIdentifiers?: string[]): void"
            },
            {
              "name": "setCanPlaceOn",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setCanPlaceOn(blockIdentifiers?: string[]): void"
            },
            {
              "name": "setDynamicProperty",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
            },
            {
              "name": "setItem",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setItem(itemStack?: ItemStack): void"
            },
            {
              "name": "setLore",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setLore(loreList?: string[]): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "containerslot",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandOrigin",
          "name": "CustomCommandOrigin",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Details about the origins of the command.\r /",
          "definition": "export class CustomCommandOrigin {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If this command was initiated via an NPC, returns the entity\r\n     * that initiated the NPC dialogue.\r\n     *\r\n     */\r\n    readonly initiator?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Source block if this command was triggered via a block\r\n     * (e.g., a commandblock.)\r\n     *\r\n     */\r\n    readonly sourceBlock?: Block;\r\n    /**\r\n     * @remarks\r\n     * Source entity if this command was triggered by an entity\r\n     * (e.g., a NPC).\r\n     *\r\n     */\r\n    readonly sourceEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Returns the type of source that fired this command.\r\n     *\r\n     */\r\n    readonly sourceType: CustomCommandSource;\r\n}\r",
          "jsdoc": "/**\r\n * Details about the origins of the command.\r\n */\r",
          "properties": [
            {
              "name": "sourceType",
              "type": "CustomCommandSource",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommandorigin",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandRegistry",
          "name": "CustomCommandRegistry",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Provides the functionality for registering custom commands.\r /",
          "definition": "export class CustomCommandRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a custom command that when executed triggers a\r\n     * script callback.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * The callback triggered when the command executes.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomCommandError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCommand(\r\n        customCommand: CustomCommand,\r\n        callback: (origin: CustomCommandOrigin, ...args: any[]) => CustomCommandResult | undefined,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Registers a custom command enum.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomCommandError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerEnum(name: string, values: string[]): void;\r\n}\r",
          "jsdoc": "/**\r\n * Provides the functionality for registering custom commands.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "registerEnum",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "registerEnum(name: string, values: string[]): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommandregistry",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomComponentParameters",
          "name": "CustomComponentParameters",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains the custom component's JSON parameters\r /",
          "definition": "export class CustomComponentParameters {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * JSON object containing the parameters from the custom\r\n     * component definition\r\n     *\r\n     */\r\n    readonly params: unknown;\r\n}\r",
          "jsdoc": "/**\r\n * Contains the custom component's JSON parameters\r\n */\r",
          "properties": [
            {
              "name": "params",
              "type": "unknown",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcomponentparameters",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.DataDrivenEntityTriggerAfterEvent",
          "name": "DataDrivenEntityTriggerAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to firing of a data driven\r entity event - for example, the minecraft:ageable_grow_up\r event on a chicken.\r /",
          "definition": "export class DataDrivenEntityTriggerAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that the event triggered on.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Name of the data driven event being triggered.\r\n     *\r\n     */\r\n    readonly eventId: string;\r\n    /**\r\n     * @remarks\r\n     * An updateable list of modifications to component state that\r\n     * are the effect of this triggered event.\r\n     *\r\n     */\r\n    getModifiers(): DefinitionModifier[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to firing of a data driven\r\n * entity event - for example, the minecraft:ageable_grow_up\r\n * event on a chicken.\r\n */\r",
          "properties": [
            {
              "name": "entity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "eventId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getModifiers",
              "parameters": [],
              "returnType": "DefinitionModifier[]",
              "accessibility": "public",
              "signature": "getModifiers(): DefinitionModifier[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "datadrivenentitytriggerafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.DataDrivenEntityTriggerAfterEventSignal",
          "name": "DataDrivenEntityTriggerAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains event registration related to firing of a data\r driven entity event - for example, the\r minecraft:ageable_grow_up event on a chicken.\r /",
          "definition": "export class DataDrivenEntityTriggerAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a data driven\r\n     * entity event is triggered.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: DataDrivenEntityTriggerAfterEvent) => void,\r\n        options?: EntityDataDrivenTriggerEventOptions,\r\n    ): (arg0: DataDrivenEntityTriggerAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback that will be called after a data driven\r\n     * entity event is triggered.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: DataDrivenEntityTriggerAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains event registration related to firing of a data\r\n * driven entity event - for example, the\r\n * minecraft:ageable_grow_up event on a chicken.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "datadrivenentitytriggeraftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Dimension",
          "name": "Dimension",
          "type": "class",
          "module": "@minecraft/server",
          "description": "A class that represents a particular dimension (e.g., The\r End) within a world.\r /",
          "definition": "export class Dimension {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Height range of the dimension.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly heightRange: minecraftcommon.NumberRange;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the dimension.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of a dimension's name used by\r\n     * language files.\r\n     *\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Searches the block volume for a block that satisfies the\r\n     * block filter.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks that will be checked.\r\n     * @param filter\r\n     * Block filter that will be checked against each block in the\r\n     * volume.\r\n     * @param allowUnloadedChunks\r\n     * If set to true will suppress the UnloadedChunksError if some\r\n     * or all of the block volume is outside of the loaded chunks.\r\n     * Will only check the block locations that are within the\r\n     * loaded chunks in the volume.\r\n     * Defaults to: false\r\n     * @returns\r\n     * Returns true if at least one block in the volume satisfies\r\n     * the filter, false otherwise.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    containsBlock(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Creates an explosion at the specified location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location of the explosion.\r\n     * @param radius\r\n     * Radius, in blocks, of the explosion to create.\r\n     * @param explosionOptions\r\n     * Additional configurable options for the explosion.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example createExplosion.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function createExplosion(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   log(\"Creating an explosion of radius 10.\");\r\n     *   targetLocation.dimension.createExplosion(targetLocation, 10);\r\n     * }\r\n     * ```\r\n     * @example createNoBlockExplosion.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function createNoBlockExplosion(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r\n     *\r\n     *   log(\"Creating an explosion of radius 15 that does not break blocks.\");\r\n     *   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r\n     * }\r\n     * ```\r\n     * @example createExplosions.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r\n     *\r\n     *   log(\"Creating an explosion of radius 15 that causes fire.\");\r\n     *   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r\n     *\r\n     *   const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r\n     *\r\n     *   log(\"Creating an explosion of radius 10 that can go underwater.\");\r\n     *   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r\n     * }\r\n     * ```\r\n     */\r\n    createExplosion(location: Vector3, radius: number, explosionOptions?: ExplosionOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Fills an area of blocks with a specific block type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks to be filled.\r\n     * @param block\r\n     * Type of block to fill the volume with.\r\n     * @param options\r\n     * A set of additional options, such as a block filter which\r\n     * can be used to include / exclude specific blocks in the\r\n     * fill.\r\n     * @returns\r\n     * Returns a ListBlockVolume which contains all the blocks that\r\n     * were placed.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    fillBlocks(\r\n        volume: BlockVolumeBase,\r\n        block: BlockPermutation | BlockType | string,\r\n        options?: BlockFillOptions,\r\n    ): ListBlockVolume;\r\n    /**\r\n     * @remarks\r\n     * Returns a block instance at the given location.\r\n     *\r\n     * @param location\r\n     * The location at which to return a block.\r\n     * @returns\r\n     * Block at the specified location, or 'undefined' if asking\r\n     * for a block at an unloaded chunk.\r\n     * @throws\r\n     * PositionInUnloadedChunkError: Exception thrown when trying\r\n     * to interact with a Block object that isn't in a loaded and\r\n     * ticking chunk anymore\r\n     *\r\n     * PositionOutOfWorldBoundariesError: Exception thrown when\r\n     * trying to interact with a position outside of dimension\r\n     * height range\r\n     *\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getBlock(location: Vector3): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block found above a given block location\r\n     * based on the given options (by default will find the first\r\n     * solid block above).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to retrieve the block above from.\r\n     * @param options\r\n     * The options to decide if a block is a valid result.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockAbove(location: Vector3, options?: BlockRaycastOptions): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block found below a given block location\r\n     * based on the given options (by default will find the first\r\n     * solid block below).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to retrieve the block below from.\r\n     * @param options\r\n     * The options to decide if a block is a valid result.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockBelow(location: Vector3, options?: BlockRaycastOptions): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block that intersects with a vector emanating\r\n     * from a location.\r\n     *\r\n     * @param location\r\n     * Location from where to initiate the ray check.\r\n     * @param direction\r\n     * Vector direction to cast the ray.\r\n     * @param options\r\n     * Additional options for processing this raycast query.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockFromRay(location: Vector3, direction: Vector3, options?: BlockRaycastOptions): BlockRaycastHit | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all the blocks in a volume that satisfy the filter.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks that will be checked.\r\n     * @param filter\r\n     * Block filter that will be checked against each block in the\r\n     * volume.\r\n     * @param allowUnloadedChunks\r\n     * If set to true will suppress the UnloadedChunksError if some\r\n     * or all of the block volume is outside of the loaded chunks.\r\n     * Will only check the block locations that are within the\r\n     * loaded chunks in the volume.\r\n     * Defaults to: false\r\n     * @returns\r\n     * Returns the ListBlockVolume that contains all the block\r\n     * locations that satisfied the block filter.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    getBlocks(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): ListBlockVolume;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of entities based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * entities returned.\r\n     * @returns\r\n     * An entity array.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     * @example bounceSkeletons.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     type: \"skeleton\",\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.applyKnockback(0, 0, 0, 1);\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example testThatEntityIsFeatherItem.ts\r\n     * ```typescript\r\n     * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function testThatEntityIsFeatherItem(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const items = targetLocation.dimension.getEntities({\r\n     *     location: targetLocation,\r\n     *     maxDistance: 20,\r\n     *   });\r\n     *\r\n     *   for (const item of items) {\r\n     *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n     *\r\n     *     if (itemComp) {\r\n     *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n     *         log(\"Success! Found a feather\", 1);\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getEntities(options?: EntityQueryOptions): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of entities at a particular location.\r\n     *\r\n     * @param location\r\n     * The location at which to return entities.\r\n     * @returns\r\n     * Zero or more entities at the specified location.\r\n     */\r\n    getEntitiesAtBlockLocation(location: Vector3): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Gets entities that intersect with a specified vector\r\n     * emanating from a location.\r\n     *\r\n     * @param options\r\n     * Additional options for processing this raycast query.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    getEntitiesFromRay(location: Vector3, direction: Vector3, options?: EntityRaycastOptions): EntityRaycastHit[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of players based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * players returned.\r\n     * @returns\r\n     * A player array.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getPlayers(options?: EntityQueryOptions): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the highest block at the given XZ location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param locationXZ\r\n     * Location to retrieve the topmost block for.\r\n     * @param minHeight\r\n     * The Y height to begin the search from. Defaults to the\r\n     * maximum dimension height.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTopmostBlock(locationXZ: VectorXZ, minHeight?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Places the given feature into the dimension at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param featureName\r\n     * The string identifier for the feature.\r\n     * @param location\r\n     * Location to place the feature.\r\n     * @param shouldThrow\r\n     * Specifies if the function call will throw an error if the\r\n     * feature could not be placed.\r\n     * Note: The function call will always throw an error if using\r\n     * an unknown feature name or trying to place in a unloaded\r\n     * chunk.\r\n     * Defaults to: false\r\n     * @throws\r\n     * An error will be thrown if the feature name is invalid.\r\n     * An error will be thrown if the location is in an unloaded\r\n     * chunk.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     */\r\n    placeFeature(featureName: string, location: Vector3, shouldThrow?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Places the given feature rule into the dimension at the\r\n     * specified location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param featureRuleName\r\n     * The string identifier for the feature rule.\r\n     * @param location\r\n     * Location to place the feature rule.\r\n     * @throws\r\n     * An error will be thrown if the feature rule name is invalid.\r\n     * An error will be thrown if the location is in an unloaded\r\n     * chunk.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     */\r\n    placeFeatureRule(featureRuleName: string, location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Plays a sound for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param soundId\r\n     * Identifier of the sound.\r\n     * @param location\r\n     * Location of the sound.\r\n     * @param soundOptions\r\n     * Additional options for configuring additional effects for\r\n     * the sound.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     * An error will be thrown if pitch is less than 0.01.\r\n     * An error will be thrown if volume is less than 0.0.\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     */\r\n    playSound(soundId: string, location: Vector3, soundOptions?: WorldSoundOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Runs a command synchronously using the context of the\r\n     * broader dimenion.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param commandString\r\n     * Command to run. Note that command strings should not start\r\n     * with slash.\r\n     * @returns\r\n     * Returns a command result with a count of successful values\r\n     * from the command.\r\n     * @throws\r\n     * Throws an exception if the command fails due to incorrect\r\n     * parameters or command syntax, or in erroneous cases for the\r\n     * command. Note that in many cases, if the command does not\r\n     * operate (e.g., a target selector found no matches), this\r\n     * method will not throw an exception.\r\n     *\r\n     * {@link CommandError}\r\n     */\r\n    runCommand(commandString: string): CommandResult;\r\n    /**\r\n     * @remarks\r\n     * Sets a block in the world using a BlockPermutation.\r\n     * BlockPermutations are blocks with a particular state.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location within the dimension to set the block.\r\n     * @param permutation\r\n     * The block permutation to set.\r\n     * @throws\r\n     * Throws if the location is within an unloaded chunk or\r\n     * outside of the world bounds.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setBlockPermutation(location: Vector3, permutation: BlockPermutation): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a block at a given location within the dimension.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location within the dimension to set the block.\r\n     * @param blockType\r\n     * The type of block to set. This can be either a string\r\n     * identifier or a BlockType. The default block permutation is\r\n     * used.\r\n     * @throws\r\n     * Throws if the location is within an unloaded chunk or\r\n     * outside of the world bounds.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setBlockType(location: Vector3, blockType: BlockType | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current weather within the dimension\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param weatherType\r\n     * Set the type of weather to apply.\r\n     * @param duration\r\n     * Sets the duration of the weather (in ticks). If no duration\r\n     * is provided, the duration will be set to a random duration\r\n     * between 300 and 900 seconds.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setWeather(weatherType: WeatherType, duration?: number): void;\r\n    /**\r\n     * @remarks\r\n     * Creates a new entity (e.g., a mob) at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * Identifier of the type of entity to spawn. If no namespace\r\n     * is specified, 'minecraft:' is assumed.\r\n     * @param location\r\n     * The location at which to create the entity.\r\n     * @returns\r\n     * Newly created entity at the specified location.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link EntitySpawnError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnAdultHorse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from '@minecraft/server';\r\n     * import { Vector3Utils } from '@minecraft/math';\r\n     *\r\n     * function spawnAdultHorse(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *     log('Create a horse and triggering the ageable_grow_up event, ensuring the horse is created as an adult');\r\n     *     targetLocation.dimension.spawnEntity(\r\n     *         'minecraft:horse<minecraft:ageable_grow_up>',\r\n     *         Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n     *     );\r\n     * }\r\n     * ```\r\n     * @example quickFoxLazyDog.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes, MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function quickFoxLazyDog(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const fox = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Fox, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *\r\n     *   fox.addEffect(MinecraftEffectTypes.Speed, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   log(\"Created a fox.\");\r\n     *\r\n     *   const wolf = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Wolf, {\r\n     *     x: targetLocation.x + 4,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *   wolf.addEffect(MinecraftEffectTypes.Slowness, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   wolf.isSneaking = true;\r\n     *   log(\"Created a sneaking wolf.\", 1);\r\n     * }\r\n     * ```\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function triggerEvent(targetLocation: DimensionLocation) {\r\n     *   const creeper = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Creeper, targetLocation);\r\n     *\r\n     *   creeper.triggerEvent(\"minecraft:start_exploding_forced\");\r\n     * }\r\n     * ```\r\n     */\r\n    spawnEntity(identifier: EntityType | string, location: Vector3, options?: SpawnEntityOptions): Entity;\r\n    /**\r\n     * @remarks\r\n     * Creates a new item stack as an entity at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location at which to create the item stack.\r\n     * @returns\r\n     * Newly created item stack entity at the specified location.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example itemStacks.ts\r\n     * ```typescript\r\n     * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n     *   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n     *   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n     *\r\n     *   const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n     *   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n     *   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n     *\r\n     *   log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n     *\r\n     *   log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n     *\r\n     *   log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n     * }\r\n     * ```\r\n     * @example spawnFeatherItem.ts\r\n     * ```typescript\r\n     * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n     *\r\n     *   targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n     *   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n     * }\r\n     * ```\r\n     */\r\n    spawnItem(itemStack: ItemStack, location: Vector3): Entity;\r\n    /**\r\n     * @remarks\r\n     * Creates a new particle emitter at a specified location in\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectName\r\n     * Identifier of the particle to create.\r\n     * @param location\r\n     * The location at which to create the particle emitter.\r\n     * @param molangVariables\r\n     * A set of optional, customizable variables that can be\r\n     * adjusted for this particle.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnParticle.ts\r\n     * ```typescript\r\n     * import { MolangVariableMap, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function spawnParticle(targetLocation: DimensionLocation) {\r\n     *   for (let i = 0; i < 100; i++) {\r\n     *     const molang = new MolangVariableMap();\r\n     *\r\n     *     molang.setColorRGB(\"variable.color\", { red: Math.random(), green: Math.random(), blue: Math.random() });\r\n     *\r\n     *     const newLocation = {\r\n     *       x: targetLocation.x + Math.floor(Math.random() * 8) - 4,\r\n     *       y: targetLocation.y + Math.floor(Math.random() * 8) - 4,\r\n     *       z: targetLocation.z + Math.floor(Math.random() * 8) - 4,\r\n     *     };\r\n     *     targetLocation.dimension.spawnParticle(\"minecraft:colored_flame_particle\", newLocation, molang);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void;\r\n}\r",
          "jsdoc": "/**\r\n * A class that represents a particular dimension (e.g., The\r\n * End) within a world.\r\n */\r",
          "properties": [
            {
              "name": "heightRange",
              "type": "minecraftcommon.NumberRange",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "localizationKey",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "containsBlock",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "containsBlock(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): boolean"
            },
            {
              "name": "createExplosion",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "createExplosion(location: Vector3, radius: number, explosionOptions?: ExplosionOptions): boolean"
            },
            {
              "name": "getBlock",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "getBlock(location: Vector3): Block | undefined"
            },
            {
              "name": "getBlockAbove",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "getBlockAbove(location: Vector3, options?: BlockRaycastOptions): Block | undefined"
            },
            {
              "name": "getBlockBelow",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "getBlockBelow(location: Vector3, options?: BlockRaycastOptions): Block | undefined"
            },
            {
              "name": "getBlockFromRay",
              "parameters": [],
              "returnType": "BlockRaycastHit | undefined",
              "accessibility": "public",
              "signature": "getBlockFromRay(location: Vector3, direction: Vector3, options?: BlockRaycastOptions): BlockRaycastHit | undefined"
            },
            {
              "name": "getBlocks",
              "parameters": [],
              "returnType": "ListBlockVolume",
              "accessibility": "public",
              "signature": "getBlocks(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): ListBlockVolume"
            },
            {
              "name": "getEntities",
              "parameters": [],
              "returnType": "Entity[]",
              "accessibility": "public",
              "signature": "getEntities(options?: EntityQueryOptions): Entity[]"
            },
            {
              "name": "getEntitiesAtBlockLocation",
              "parameters": [],
              "returnType": "Entity[]",
              "accessibility": "public",
              "signature": "getEntitiesAtBlockLocation(location: Vector3): Entity[]"
            },
            {
              "name": "getEntitiesFromRay",
              "parameters": [],
              "returnType": "EntityRaycastHit[]",
              "accessibility": "public",
              "signature": "getEntitiesFromRay(location: Vector3, direction: Vector3, options?: EntityRaycastOptions): EntityRaycastHit[]"
            },
            {
              "name": "getPlayers",
              "parameters": [],
              "returnType": "Player[]",
              "accessibility": "public",
              "signature": "getPlayers(options?: EntityQueryOptions): Player[]"
            },
            {
              "name": "getTopmostBlock",
              "parameters": [],
              "returnType": "Block | undefined",
              "accessibility": "public",
              "signature": "getTopmostBlock(locationXZ: VectorXZ, minHeight?: number): Block | undefined"
            },
            {
              "name": "placeFeature",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "placeFeature(featureName: string, location: Vector3, shouldThrow?: boolean): boolean"
            },
            {
              "name": "placeFeatureRule",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "placeFeatureRule(featureRuleName: string, location: Vector3): boolean"
            },
            {
              "name": "playSound",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "playSound(soundId: string, location: Vector3, soundOptions?: WorldSoundOptions): void"
            },
            {
              "name": "runCommand",
              "parameters": [],
              "returnType": "CommandResult",
              "accessibility": "public",
              "signature": "runCommand(commandString: string): CommandResult"
            },
            {
              "name": "setBlockPermutation",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setBlockPermutation(location: Vector3, permutation: BlockPermutation): void"
            },
            {
              "name": "setBlockType",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setBlockType(location: Vector3, blockType: BlockType | string): void"
            },
            {
              "name": "setWeather",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setWeather(weatherType: WeatherType, duration?: number): void"
            },
            {
              "name": "spawnEntity",
              "parameters": [],
              "returnType": "Entity",
              "accessibility": "public",
              "signature": "spawnEntity(identifier: EntityType | string, location: Vector3, options?: SpawnEntityOptions): Entity"
            },
            {
              "name": "spawnItem",
              "parameters": [],
              "returnType": "Entity",
              "accessibility": "public",
              "signature": "spawnItem(itemStack: ItemStack, location: Vector3): Entity"
            },
            {
              "name": "spawnParticle",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "dimension",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.DimensionType",
          "name": "DimensionType",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a type of dimension.\r /",
          "definition": "export class DimensionType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of the dimension type.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a type of dimension.\r\n */\r",
          "properties": [
            {
              "name": "typeId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "dimensiontype",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.DimensionTypes",
          "name": "DimensionTypes",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Used for accessing all available dimension types.\r /",
          "definition": "export class DimensionTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves a dimension type using a string-based identifier.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    static get(dimensionTypeId: string): DimensionType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves an array of all dimension types.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    static getAll(): DimensionType[];\r\n}\r",
          "jsdoc": "/**\r\n * Used for accessing all available dimension types.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "DimensionType | undefined",
              "accessibility": "public",
              "signature": "get(dimensionTypeId: string): DimensionType | undefined"
            },
            {
              "name": "getAll",
              "parameters": [],
              "returnType": "DimensionType[]",
              "accessibility": "public",
              "signature": "getAll(): DimensionType[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "dimensiontypes",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Effect",
          "name": "Effect",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents an effect - like poison - that has been added to\r an Entity.\r /",
          "definition": "export class Effect {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Gets an amplifier that may have been applied to this effect.\r\n     * Sample values range typically from 0 to 4. Example: The\r\n     * effect 'Jump Boost II' will have an amplifier value of 1.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly amplifier: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the player-friendly name of this effect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Gets the entire specified duration, in ticks, of this\r\n     * effect. There are 20 ticks per second. Use {@link\r\n     * TicksPerSecond} constant to convert between ticks and\r\n     * seconds.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether an effect instance is available for use in\r\n     * this context.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets the type id of this effect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly typeId: string;\r\n}\r",
          "jsdoc": "/**\r\n * Represents an effect - like poison - that has been added to\r\n * an Entity.\r\n */\r",
          "properties": [
            {
              "name": "amplifier",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "displayName",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "duration",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "typeId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "effect",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EffectAddAfterEvent",
          "name": "EffectAddAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to an effect - like\r poison - being added to an entity.\r /",
          "definition": "export class EffectAddAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Additional properties and details of the effect.\r\n     *\r\n     */\r\n    readonly effect: Effect;\r\n    /**\r\n     * @remarks\r\n     * Entity that the effect is being added to.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to an effect - like\r\n * poison - being added to an entity.\r\n */\r",
          "properties": [
            {
              "name": "effect",
              "type": "Effect",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "effectaddafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EffectAddAfterEventSignal",
          "name": "EffectAddAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when an effect is\r added to an entity.\r /",
          "definition": "export class EffectAddAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EffectAddAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EffectAddAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EffectAddAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when an effect is\r\n * added to an entity.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "effectaddaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EffectAddBeforeEvent",
          "name": "EffectAddBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to an effect - like\r poison - being added to an entity.\r /",
          "definition": "export class EffectAddBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * When set to true will cancel the event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Effect duration.\r\n     *\r\n     */\r\n    duration: number;\r\n    /**\r\n     * @remarks\r\n     * The type of the effect that is being added.\r\n     *\r\n     */\r\n    readonly effectType: string;\r\n    /**\r\n     * @remarks\r\n     * Entity that the effect is being added to.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to an effect - like\r\n * poison - being added to an entity.\r\n */\r",
          "properties": [
            {
              "name": "effectType",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "effectaddbeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EffectAddBeforeEventSignal",
          "name": "EffectAddBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when an effect is\r added to an entity.\r /",
          "definition": "export class EffectAddBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: EffectAddBeforeEvent) => void): (arg0: EffectAddBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EffectAddBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when an effect is\r\n * added to an entity.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "effectaddbeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EffectType",
          "name": "EffectType",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a type of effect - like poison - that can be\r applied to an entity.\r /",
          "definition": "export class EffectType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier name of this effect type.\r\n     *\r\n     * @returns\r\n     * Identifier of the effect type.\r\n     */\r\n    getName(): string;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a type of effect - like poison - that can be\r\n * applied to an entity.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "getName",
              "parameters": [],
              "returnType": "string",
              "accessibility": "public",
              "signature": "getName(): string"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "effecttype",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EffectTypes",
          "name": "EffectTypes",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a type of effect - like poison - that can be\r applied to an entity.\r /",
          "definition": "export class EffectTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Effect type for the given identifier.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The identifier for the effect.\r\n     * @returns\r\n     * Effect type for the given identifier or undefined if the\r\n     * effect does not exist.\r\n     */\r\n    static get(identifier: string): EffectType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all effects.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * A list of all effects.\r\n     */\r\n    static getAll(): EffectType[];\r\n}\r",
          "jsdoc": "/**\r\n * Represents a type of effect - like poison - that can be\r\n * applied to an entity.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "EffectType | undefined",
              "accessibility": "public",
              "signature": "get(identifier: string): EffectType | undefined"
            },
            {
              "name": "getAll",
              "parameters": [],
              "returnType": "EffectType[]",
              "accessibility": "public",
              "signature": "getAll(): EffectType[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "effecttypes",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EnchantmentType",
          "name": "EnchantmentType",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information on a type of enchantment.\r /",
          "definition": "export class EnchantmentType {\n    /**\r\n     * @remarks\r\n     * The name of the enchantment type.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * The maximum level this type of enchantment can have.\r\n     *\r\n     */\r\n    readonly maxLevel: number;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    constructor(enchantmentType: string);\r\n}\r",
          "jsdoc": "/**\r\n * Contains information on a type of enchantment.\r\n */\r",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "maxLevel",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "enchantmenttype",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EnchantmentTypes",
          "name": "EnchantmentTypes",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains a catalog of Minecraft Enchantment Types that are\r available in this world.\r /",
          "definition": "export class EnchantmentTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves an enchantment with the specified identifier.\r\n     *\r\n     * @param enchantmentId\r\n     * Identifier of the enchantment.  For example,\r\n     * \"minecraft:flame\".\r\n     * @returns\r\n     * If available, returns an EnchantmentType object that\r\n     * represents the specified enchantment.\r\n     */\r\n    static get(enchantmentId: string): EnchantmentType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of all available enchantment types.\r\n     *\r\n     */\r\n    static getAll(): EnchantmentType[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains a catalog of Minecraft Enchantment Types that are\r\n * available in this world.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "EnchantmentType | undefined",
              "accessibility": "public",
              "signature": "get(enchantmentId: string): EnchantmentType | undefined"
            },
            {
              "name": "getAll",
              "parameters": [],
              "returnType": "EnchantmentType[]",
              "accessibility": "public",
              "signature": "getAll(): EnchantmentType[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "enchantmenttypes",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Entity",
          "name": "Entity",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents the state of an entity (a mob, the player, or\r other moving objects like minecarts) in the world.\r /",
          "definition": "export class Entity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension that the entity is currently within.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Unique identifier of the entity. This identifier is intended\r\n     * to be consistent across loads of a world instance. No\r\n     * meaning should be inferred from the value and structure of\r\n     * this unique identifier - do not parse or interpret it. This\r\n     * property is accessible even if {@link Entity.isValid} is\r\n     * false.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is touching a climbable block. For\r\n     * example, a player next to a ladder or a spider next to a\r\n     * stone wall.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isClimbing: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity has a fall distance greater than 0, or\r\n     * greater than 1 while gliding.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isFalling: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether any part of the entity is inside a water block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isInWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is on top of a solid block. This property\r\n     * may behave in unexpected ways. This property will always be\r\n     * true when an Entity is first spawned, and if the Entity has\r\n     * no gravity this property may be incorrect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isOnGround: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity is currently sleeping.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSleeping: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is sneaking - that is, moving more slowly\r\n     * and more quietly.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    isSneaking: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is sprinting. For example, a player using\r\n     * the sprint action, an ocelot running away or a pig boosting\r\n     * with Carrot on a Stick.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSprinting: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is in the swimming state. For example, a\r\n     * player using the swim action or a fish in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSwimming: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the entity can be manipulated by script. A\r\n     * Player is considered valid when it's EntityLifetimeState is\r\n     * set to Loaded.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this entity's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Current location of the entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Given name of the entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    nameTag: string;\r\n    /**\r\n     * @remarks\r\n     * Returns a scoreboard identity that represents this entity.\r\n     * Will remain valid when the entity is killed.\r\n     *\r\n     */\r\n    readonly scoreboardIdentity?: ScoreboardIdentity;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of the entity - for example,\r\n     * 'minecraft:skeleton'. This property is accessible even if\r\n     * {@link Entity.isValid} is false.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Adds or updates an effect, like poison, to the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectType\r\n     * Type of effect to add to the entity.\r\n     * @param duration\r\n     * Amount of time, in ticks, for the effect to apply. There are\r\n     * 20 ticks per second. Use {@link TicksPerSecond} constant to\r\n     * convert between ticks and seconds. The value must be within\r\n     * the range [0, 20000000].\r\n     * @param options\r\n     * Additional options for the effect.\r\n     * @returns\r\n     * Returns nothing if the effect was added or updated\r\n     * successfully. This can throw an error if the duration or\r\n     * amplifier are outside of the valid ranges, or if the effect\r\n     * does not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example spawnPoisonedVillager.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function spawnPoisonedVillager(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const villagerType = \"minecraft:villager_v2<minecraft:ageable_grow_up>\";\r\n     *   const villager = targetLocation.dimension.spawnEntity(villagerType, targetLocation);\r\n     *   const duration = 20;\r\n     *\r\n     *   villager.addEffect(MinecraftEffectTypes.Poison, duration, { amplifier: 1 });\r\n     * }\r\n     * ```\r\n     * @example quickFoxLazyDog.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes, MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function quickFoxLazyDog(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const fox = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Fox, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *\r\n     *   fox.addEffect(MinecraftEffectTypes.Speed, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   log(\"Created a fox.\");\r\n     *\r\n     *   const wolf = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Wolf, {\r\n     *     x: targetLocation.x + 4,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *   wolf.addEffect(MinecraftEffectTypes.Slowness, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   wolf.isSneaking = true;\r\n     *   log(\"Created a sneaking wolf.\", 1);\r\n     * }\r\n     * ```\r\n     */\r\n    addEffect(effectType: EffectType | string, duration: number, options?: EntityEffectOptions): Effect | undefined;\r\n    /**\r\n     * @remarks\r\n     * Adds a specified tag to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param tag\r\n     * Content of the tag to add. The tag must be less than 256\r\n     * characters.\r\n     * @returns\r\n     * Returns true if the tag was added successfully. This can\r\n     * fail if the tag already exists on the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    addTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Applies a set of damage to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount of damage to apply.\r\n     * @param options\r\n     * Additional options about the source of damage, which may add\r\n     * additional effects or spur additional behaviors on this\r\n     * entity.\r\n     * @returns\r\n     * Whether the entity takes any damage. This can return false\r\n     * if the entity is invulnerable or if the damage applied is\r\n     * less than or equal to 0.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example applyDamageThenHeal.ts\r\n     * ```typescript\r\n     * import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyDamageThenHeal(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n     *     log(\"Skeleton health before heal: \" + health?.currentValue);\r\n     *     health?.resetToMaxValue();\r\n     *     log(\"Skeleton health after heal: \" + health?.currentValue);\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    applyDamage(amount: number, options?: EntityApplyDamageByProjectileOptions | EntityApplyDamageOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Applies impulse vector to the current velocity of the\r\n     * entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param vector\r\n     * Impulse vector.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example applyImpulse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyImpulse(targetLocation: DimensionLocation) {\r\n     *   const zombie = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Zombie, targetLocation);\r\n     *\r\n     *   zombie.clearVelocity();\r\n     *\r\n     *   // throw the zombie up in the air\r\n     *   zombie.applyImpulse({ x: 0, y: 0.5, z: 0 });\r\n     * }\r\n     * ```\r\n     */\r\n    applyImpulse(vector: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Applies impulse vector to the current velocity of the\r\n     * entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param verticalStrength\r\n     * Knockback strength for the vertical vector.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example bounceSkeletons.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     type: \"skeleton\",\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.applyKnockback(0, 0, 0, 1);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    applyKnockback(horizontalForce: VectorXZ, verticalStrength: number): void;\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current velocity of the Entity to zero.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example applyImpulse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyImpulse(targetLocation: DimensionLocation) {\r\n     *   const zombie = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Zombie, targetLocation);\r\n     *\r\n     *   zombie.clearVelocity();\r\n     *\r\n     *   // throw the zombie up in the air\r\n     *   zombie.applyImpulse({ x: 0, y: 0.5, z: 0 });\r\n     * }\r\n     * ```\r\n     */\r\n    clearVelocity(): void;\r\n    /**\r\n     * @remarks\r\n     * Extinguishes the fire if the entity is on fire. Note that\r\n     * you can call getComponent('minecraft:onfire') and, if\r\n     * present, the entity is on fire.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param useEffects\r\n     * Whether to show any visual effects connected to the\r\n     * extinguishing.\r\n     * Defaults to: true\r\n     * @returns\r\n     * Returns whether the entity was on fire.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example setOnFire.ts\r\n     * ```typescript\r\n     * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.setOnFire(20, true);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n     *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n     *\r\n     *     skelly.extinguishFire(true);\r\n     *     log(\"Never mind. Fire extinguished.\");\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    extinguishFire(useEffects?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the first intersecting block from the direction that\r\n     * this entity is looking at.\r\n     *\r\n     * @param options\r\n     * Additional configuration options for the ray cast.\r\n     * @returns\r\n     * Returns the first intersecting block from the direction that\r\n     * this entity is looking at.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getBlockFromViewDirection(options?: BlockRaycastOptions): BlockRaycastHit | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for an entity.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:health').\r\n     * If no namespace prefix is specified, 'minecraft:' is\r\n     * assumed. Available component IDs can be found as part of the\r\n     * {@link EntityComponentTypes} enum.\r\n     * @returns\r\n     * Returns the component if it exists on the entity, otherwise\r\n     * undefined.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getComponent<T extends string>(componentId: T): EntityComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all components that are both present on this entity\r\n     * and supported by the API.\r\n     *\r\n     * @returns\r\n     * Returns all components that are both present on this entity\r\n     * and supported by the API.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getComponents(): EntityComponent[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this entity.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effect for the specified EffectType on the\r\n     * entity, undefined if the effect is not present, or throws an\r\n     * error if the effect does not exist.\r\n     *\r\n     * @param effectType\r\n     * The effect identifier.\r\n     * @returns\r\n     * Effect object for the specified effect, undefined if the\r\n     * effect is not present, or throws an error if the effect does\r\n     * not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getEffect(effectType: EffectType | string): Effect | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of effects applied to this entity.\r\n     *\r\n     * @returns\r\n     * List of effects.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getEffects(): Effect[];\r\n    /**\r\n     * @remarks\r\n     * Gets the entities that this entity is looking at by\r\n     * performing a ray cast from the view of this entity.\r\n     *\r\n     * @param options\r\n     * Additional configuration options for the ray cast.\r\n     * @returns\r\n     * Returns a set of entities from the direction that this\r\n     * entity is looking at.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    getEntitiesFromViewDirection(options?: EntityRaycastOptions): EntityRaycastHit[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current location of the head component of this\r\n     * entity.\r\n     *\r\n     * @returns\r\n     * Returns the current location of the head component of this\r\n     * entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getHeadLocation(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Gets an entity Property value. If the property was set using\r\n     * the setProperty function within the same tick, the updated\r\n     * value will not be reflected until the subsequent tick.\r\n     *\r\n     * @param identifier\r\n     * The entity Property identifier.\r\n     * @returns\r\n     * Returns the current property value. For enum properties, a\r\n     * string is returned. For float and int properties, a number\r\n     * is returned. For undefined properties, undefined is\r\n     * returned.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getProperty(identifier: string): boolean | number | string | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the current rotation component of this entity.\r\n     *\r\n     * @returns\r\n     * Returns a Vec2 containing the rotation of this entity (in\r\n     * degrees).\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getRotation(): Vector2;\r\n    /**\r\n     * @remarks\r\n     * Returns all tags associated with the entity.\r\n     *\r\n     * @returns\r\n     * An array containing all tags as strings.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current velocity vector of the entity.\r\n     *\r\n     * @returns\r\n     * Returns the current velocity vector of the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example getFireworkVelocity.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function getFireworkVelocity(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const fireworkRocket = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.FireworksRocket, targetLocation);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const velocity = fireworkRocket.getVelocity();\r\n     *\r\n     *     log(\"Velocity of firework is: (x: \" + velocity.x + \", y:\" + velocity.y + \", z:\" + velocity.z + \")\");\r\n     *   }, 5);\r\n     * }\r\n     * ```\r\n     */\r\n    getVelocity(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns the current view direction of the entity.\r\n     *\r\n     * @returns\r\n     * Returns the current view direction of the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getViewDirection(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the specified component is present on this\r\n     * entity.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:rideable')\r\n     * to retrieve. If no namespace prefix is specified,\r\n     * 'minecraft:' is assumed.\r\n     * @returns\r\n     * Returns true if the specified component is present on this\r\n     * entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hasComponent(componentId: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether an entity has a particular tag.\r\n     *\r\n     * @param tag\r\n     * Identifier of the tag to test for.\r\n     * @returns\r\n     * Returns whether an entity has a particular tag.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Kills this entity. The entity will drop loot as normal.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * Returns true if entity can be killed (even if it is already\r\n     * dead), otherwise it returns false.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    kill(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets the rotation of the entity to face a target location.\r\n     * Both pitch and yaw will be set, if applicable, such as for\r\n     * mobs where the pitch controls the head tilt and the yaw\r\n     * controls the body rotation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetLocation\r\n     * The target location that this entity should face/look\r\n     * towards.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    lookAt(targetLocation: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Matches the entity against the passed in options. Uses the\r\n     * location of the entity for matching if the location is not\r\n     * specified in the passed in EntityQueryOptions.\r\n     *\r\n     * @param options\r\n     * The query to perform the match against.\r\n     * @returns\r\n     * Returns true if the entity matches the criteria in the\r\n     * passed in EntityQueryOptions, otherwise it returns false.\r\n     * @throws\r\n     * Throws if the query options are misconfigured.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    matches(options: EntityQueryOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Cause the entity to play the given animation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param animationName\r\n     * The animation identifier. e.g. animation.creeper.swelling\r\n     * @param options\r\n     * Additional options to control the playback and transitions\r\n     * of the animation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    playAnimation(animationName: string, options?: PlayAnimationOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Immediately removes the entity from the world. The removed\r\n     * entity will not perform a death animation or drop loot upon\r\n     * removal.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    remove(): void;\r\n    /**\r\n     * @remarks\r\n     * Removes the specified EffectType on the entity, or returns\r\n     * false if the effect is not present.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectType\r\n     * The effect identifier.\r\n     * @returns\r\n     * Returns true if the effect has been removed. Returns false\r\n     * if the effect is not found or does not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    removeEffect(effectType: EffectType | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes a specified tag from an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param tag\r\n     * Content of the tag to remove.\r\n     * @returns\r\n     * Returns whether the tag existed on the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    removeTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Resets an Entity Property back to its default value, as\r\n     * specified in the Entity's definition. This property change\r\n     * is not applied until the next tick.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @returns\r\n     * Returns the default property value. For enum properties, a\r\n     * string is returned. For float and int properties, a number\r\n     * is returned. For undefined properties, undefined is\r\n     * returned.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    resetProperty(identifier: string): boolean | number | string;\r\n    /**\r\n     * @remarks\r\n     * Runs a synchronous command on the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param commandString\r\n     * The command string. Note: This should not include a leading\r\n     * forward slash.\r\n     * @returns\r\n     * A command result containing whether the command was\r\n     * successful.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    runCommand(commandString: string): CommandResult;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets an entity on fire (if it is not in water or rain). Note\r\n     * that you can call getComponent('minecraft:onfire') and, if\r\n     * present, the entity is on fire.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param seconds\r\n     * Length of time to set the entity on fire.\r\n     * @param useEffects\r\n     * Whether side-effects should be applied (e.g. thawing freeze)\r\n     * and other conditions such as rain or fire protection should\r\n     * be taken into consideration.\r\n     * Defaults to: true\r\n     * @returns\r\n     * Whether the entity was set on fire. This can fail if seconds\r\n     * is less than or equal to zero, the entity is wet or the\r\n     * entity is immune to fire.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example setOnFire.ts\r\n     * ```typescript\r\n     * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.setOnFire(20, true);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n     *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n     *\r\n     *     skelly.extinguishFire(true);\r\n     *     log(\"Never mind. Fire extinguished.\");\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    setOnFire(seconds: number, useEffects?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets an Entity Property to the provided value. This property\r\n     * change is not applied until the next tick.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @param value\r\n     * The property value. The provided type must be compatible\r\n     * with the type specified in the entity's definition.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     * Throws if the provided value is outside the expected range\r\n     * (int, float properties).\r\n     * Throws if the provided string value does not match the set\r\n     * of accepted enum values (enum properties\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setProperty(identifier: string, value: boolean | number | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the main rotation of the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rotation\r\n     * The x and y rotation of the entity (in degrees). For most\r\n     * mobs, the x rotation controls the head tilt and the y\r\n     * rotation controls the body rotation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setRotation(rotation: Vector2): void;\r\n    /**\r\n     * @remarks\r\n     * Teleports the selected entity to a new location\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * New location for the entity.\r\n     * @param teleportOptions\r\n     * Options regarding the teleport operation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example teleport.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function teleport(targetLocation: DimensionLocation) {\r\n     *   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     cow.teleport(\r\n     *       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r\n     *       {\r\n     *         facingLocation: targetLocation,\r\n     *       }\r\n     *     );\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     * @example teleportMovement.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function teleportMovement(targetLocation: DimensionLocation) {\r\n     *   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r\n     *\r\n     *   let inc = 1;\r\n     *   const runId = system.runInterval(() => {\r\n     *     pig.teleport(\r\n     *       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r\n     *       {\r\n     *         facingLocation: targetLocation,\r\n     *       }\r\n     *     );\r\n     *\r\n     *     if (inc > 100) {\r\n     *       system.clearRun(runId);\r\n     *     }\r\n     *     inc++;\r\n     *   }, 4);\r\n     * }\r\n     * ```\r\n     */\r\n    teleport(location: Vector3, teleportOptions?: TeleportOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Triggers an entity type event. For every entity, a number of\r\n     * events are defined in an entities' definition for key entity\r\n     * behaviors; for example, creepers have a\r\n     * minecraft:start_exploding type event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param eventName\r\n     * Name of the entity type event to trigger. If a namespace is\r\n     * not specified, minecraft: is assumed.\r\n     * @throws\r\n     * If the event is not defined in the definition of the entity,\r\n     * an error will be thrown.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * // A function that spawns a creeper and triggers it to explode immediately\r\n     * import { DimensionLocation } from '@minecraft/server';\r\n     * import { MinecraftEntityTypes } from '@minecraft/vanilla-data';\r\n     *\r\n     * function spawnExplodingCreeper(location: DimensionLocation) {\r\n     *     const creeper = location.dimension.spawnEntity(MinecraftEntityTypes.Creeper, location);\r\n     *\r\n     *     creeper.triggerEvent('minecraft:start_exploding_forced');\r\n     * }\r\n     * ```\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function triggerEvent(targetLocation: DimensionLocation) {\r\n     *   const creeper = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Creeper, targetLocation);\r\n     *\r\n     *   creeper.triggerEvent(\"minecraft:start_exploding_forced\");\r\n     * }\r\n     * ```\r\n     */\r\n    triggerEvent(eventName: string): void;\r\n    /**\r\n     * @remarks\r\n     * Attempts to try a teleport, but may not complete the\r\n     * teleport operation (for example, if there are blocks at the\r\n     * destination.)\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to teleport the entity to.\r\n     * @param teleportOptions\r\n     * Options regarding the teleport operation.\r\n     * @returns\r\n     * Returns whether the teleport succeeded. This can fail if the\r\n     * destination chunk is unloaded or if the teleport would\r\n     * result in intersecting with blocks.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    tryTeleport(location: Vector3, teleportOptions?: TeleportOptions): boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Represents the state of an entity (a mob, the player, or\r\n * other moving objects like minecarts) in the world.\r\n */\r",
          "properties": [
            {
              "name": "dimension",
              "type": "Dimension",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isClimbing",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isFalling",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isInWater",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isOnGround",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isSleeping",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isSprinting",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isSwimming",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "localizationKey",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "typeId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "addEffect",
              "parameters": [],
              "returnType": "Effect | undefined",
              "accessibility": "public",
              "signature": "addEffect(effectType: EffectType | string, duration: number, options?: EntityEffectOptions): Effect | undefined"
            },
            {
              "name": "addTag",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "addTag(tag: string): boolean"
            },
            {
              "name": "applyDamage",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "applyDamage(amount: number, options?: EntityApplyDamageByProjectileOptions | EntityApplyDamageOptions): boolean"
            },
            {
              "name": "applyImpulse",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "applyImpulse(vector: Vector3): void"
            },
            {
              "name": "applyKnockback",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "applyKnockback(horizontalForce: VectorXZ, verticalStrength: number): void"
            },
            {
              "name": "clearDynamicProperties",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearDynamicProperties(): void"
            },
            {
              "name": "clearVelocity",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearVelocity(): void"
            },
            {
              "name": "extinguishFire",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "extinguishFire(useEffects?: boolean): boolean"
            },
            {
              "name": "getBlockFromViewDirection",
              "parameters": [],
              "returnType": "BlockRaycastHit | undefined",
              "accessibility": "public",
              "signature": "getBlockFromViewDirection(options?: BlockRaycastOptions): BlockRaycastHit | undefined"
            },
            {
              "name": "getComponents",
              "parameters": [],
              "returnType": "EntityComponent[]",
              "accessibility": "public",
              "signature": "getComponents(): EntityComponent[]"
            },
            {
              "name": "getDynamicProperty",
              "parameters": [],
              "returnType": "boolean | number | string | Vector3 | undefined",
              "accessibility": "public",
              "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
            },
            {
              "name": "getDynamicPropertyIds",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getDynamicPropertyIds(): string[]"
            },
            {
              "name": "getDynamicPropertyTotalByteCount",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getDynamicPropertyTotalByteCount(): number"
            },
            {
              "name": "getEffect",
              "parameters": [],
              "returnType": "Effect | undefined",
              "accessibility": "public",
              "signature": "getEffect(effectType: EffectType | string): Effect | undefined"
            },
            {
              "name": "getEffects",
              "parameters": [],
              "returnType": "Effect[]",
              "accessibility": "public",
              "signature": "getEffects(): Effect[]"
            },
            {
              "name": "getEntitiesFromViewDirection",
              "parameters": [],
              "returnType": "EntityRaycastHit[]",
              "accessibility": "public",
              "signature": "getEntitiesFromViewDirection(options?: EntityRaycastOptions): EntityRaycastHit[]"
            },
            {
              "name": "getHeadLocation",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "getHeadLocation(): Vector3"
            },
            {
              "name": "getProperty",
              "parameters": [],
              "returnType": "boolean | number | string | undefined",
              "accessibility": "public",
              "signature": "getProperty(identifier: string): boolean | number | string | undefined"
            },
            {
              "name": "getRotation",
              "parameters": [],
              "returnType": "Vector2",
              "accessibility": "public",
              "signature": "getRotation(): Vector2"
            },
            {
              "name": "getTags",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getTags(): string[]"
            },
            {
              "name": "getVelocity",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "getVelocity(): Vector3"
            },
            {
              "name": "getViewDirection",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "getViewDirection(): Vector3"
            },
            {
              "name": "hasComponent",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasComponent(componentId: string): boolean"
            },
            {
              "name": "hasTag",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasTag(tag: string): boolean"
            },
            {
              "name": "kill",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "kill(): boolean"
            },
            {
              "name": "lookAt",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "lookAt(targetLocation: Vector3): void"
            },
            {
              "name": "matches",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "matches(options: EntityQueryOptions): boolean"
            },
            {
              "name": "playAnimation",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "playAnimation(animationName: string, options?: PlayAnimationOptions): void"
            },
            {
              "name": "remove",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "remove(): void"
            },
            {
              "name": "removeEffect",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "removeEffect(effectType: EffectType | string): boolean"
            },
            {
              "name": "removeTag",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "removeTag(tag: string): boolean"
            },
            {
              "name": "resetProperty",
              "parameters": [],
              "returnType": "boolean | number | string",
              "accessibility": "public",
              "signature": "resetProperty(identifier: string): boolean | number | string"
            },
            {
              "name": "runCommand",
              "parameters": [],
              "returnType": "CommandResult",
              "accessibility": "public",
              "signature": "runCommand(commandString: string): CommandResult"
            },
            {
              "name": "setDynamicProperty",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
            },
            {
              "name": "setOnFire",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "setOnFire(seconds: number, useEffects?: boolean): boolean"
            },
            {
              "name": "setProperty",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setProperty(identifier: string, value: boolean | number | string): void"
            },
            {
              "name": "setRotation",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setRotation(rotation: Vector2): void"
            },
            {
              "name": "teleport",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "teleport(location: Vector3, teleportOptions?: TeleportOptions): void"
            },
            {
              "name": "triggerEvent",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "triggerEvent(eventName: string): void"
            },
            {
              "name": "tryTeleport",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "tryTeleport(location: Vector3, teleportOptions?: TeleportOptions): boolean"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entity",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityAddRiderComponent",
          "name": "EntityAddRiderComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component makes the entity spawn with a\r rider of the specified entityType.\r /",
          "definition": "export class EntityAddRiderComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The type of entity that is added as a rider for this entity\r\n     * when spawned under certain conditions.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly entityType: string;\r\n    /**\r\n     * @remarks\r\n     * Optional spawn event to trigger on the rider when that rider\r\n     * is spawned for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly spawnEvent: string;\r\n    static readonly componentId = 'minecraft:addrider';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component makes the entity spawn with a\r\n * rider of the specified entityType.\r\n */\r",
          "properties": [
            {
              "name": "entityType",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "spawnEvent",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "addrider'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityaddridercomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityAgeableComponent",
          "name": "EntityAgeableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Adds a timer for the entity to grow up. It can be\r accelerated by giving the entity the items it likes as\r defined by feedItems.\r /",
          "definition": "export class EntityAgeableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Amount of time before the entity grows up, -1 for always a\r\n     * baby.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Event that runs when this entity grows up.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly growUp: Trigger;\r\n    /**\r\n     * @remarks\r\n     * The feed item used will transform into this item upon\r\n     * successful interaction.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly transformToItem: string;\r\n    static readonly componentId = 'minecraft:ageable';\r\n    /**\r\n     * @remarks\r\n     * List of items that the entity drops when it grows up.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDropItems(): string[];\r\n    /**\r\n     * @remarks\r\n     * List of items that can be fed to the entity. Includes 'item'\r\n     * for the item name and 'growth' to define how much time it\r\n     * grows up by.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFeedItems(): EntityDefinitionFeedItem[];\r\n}\r",
          "jsdoc": "/**\r\n * Adds a timer for the entity to grow up. It can be\r\n * accelerated by giving the entity the items it likes as\r\n * defined by feedItems.\r\n */\r",
          "properties": [
            {
              "name": "duration",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "growUp",
              "type": "Trigger",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "transformToItem",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "ageable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getDropItems",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getDropItems(): string[]"
            },
            {
              "name": "getFeedItems",
              "parameters": [],
              "returnType": "EntityDefinitionFeedItem[]",
              "accessibility": "public",
              "signature": "getFeedItems(): EntityDefinitionFeedItem[]"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityageablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityAttributeComponent",
          "name": "EntityAttributeComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "This is a base abstract class for any entity component that\r centers around a number and can have a minimum, maximum, and\r default defined value.\r /",
          "definition": "export class EntityAttributeComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of this attribute for this instance.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly currentValue: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the default defined value for this attribute.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly defaultValue: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effective max of this attribute given any other\r\n     * ambient components or factors.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly effectiveMax: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effective min of this attribute given any other\r\n     * ambient components or factors.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly effectiveMin: number;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the defined\r\n     * default value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToDefaultValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the maximum\r\n     * defined value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToMaxValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the minimum\r\n     * defined value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToMinValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current value of this attribute.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * If the value is out of bounds, an ArgumentOutOfBounds Error\r\n     * is thrown.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setCurrentValue(value: number): boolean;\r\n}\r",
          "jsdoc": "/**\r\n * This is a base abstract class for any entity component that\r\n * centers around a number and can have a minimum, maximum, and\r\n * default defined value.\r\n */\r",
          "properties": [
            {
              "name": "currentValue",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "defaultValue",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "effectiveMax",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "effectiveMin",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "resetToDefaultValue",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "resetToDefaultValue(): void"
            },
            {
              "name": "resetToMaxValue",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "resetToMaxValue(): void"
            },
            {
              "name": "resetToMinValue",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "resetToMinValue(): void"
            },
            {
              "name": "setCurrentValue",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "setCurrentValue(value: number): boolean"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityattributecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityBaseMovementComponent",
          "name": "EntityBaseMovementComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Base class for a family of entity movement events.\r /",
          "definition": "export class EntityBaseMovementComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Maximum turn rate for this movement modality of the mob.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxTurn: number;\r\n}\r",
          "jsdoc": "/**\r\n * Base class for a family of entity movement events.\r\n */\r",
          "properties": [
            {
              "name": "maxTurn",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitybasemovementcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityBreathableComponent",
          "name": "EntityBreathableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines what blocks this entity can breathe in and gives\r them the ability to suffocate.\r /",
          "definition": "export class EntityBreathableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in air.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in lava.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in solid blocks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesSolids: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will have visible bubbles while in\r\n     * water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly generatesBubbles: boolean;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds to recover breath to maximum.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly inhaleTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds between suffocation damage.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly suffocateTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds the entity can hold its breath.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly totalSupply: number;\r\n    static readonly componentId = 'minecraft:breathable';\r\n    /**\r\n     * @remarks\r\n     * List of blocks this entity can breathe in, in addition to\r\n     * the separate properties for classes of blocks.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBreatheBlocks(): BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * List of blocks this entity can't breathe in.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getNonBreatheBlocks(): BlockPermutation[];\r\n}\r",
          "jsdoc": "/**\r\n * Defines what blocks this entity can breathe in and gives\r\n * them the ability to suffocate.\r\n */\r",
          "properties": [
            {
              "name": "breathesAir",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "breathesLava",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "breathesSolids",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "breathesWater",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "generatesBubbles",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "inhaleTime",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "suffocateTime",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "totalSupply",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "breathable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getBreatheBlocks",
              "parameters": [],
              "returnType": "BlockPermutation[]",
              "accessibility": "public",
              "signature": "getBreatheBlocks(): BlockPermutation[]"
            },
            {
              "name": "getNonBreatheBlocks",
              "parameters": [],
              "returnType": "BlockPermutation[]",
              "accessibility": "public",
              "signature": "getNonBreatheBlocks(): BlockPermutation[]"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitybreathablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityCanClimbComponent",
          "name": "EntityCanClimbComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that the entity can\r climb up ladders.\r /",
          "definition": "export class EntityCanClimbComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_climb';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * climb up ladders.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "can_climb'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitycanclimbcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityCanFlyComponent",
          "name": "EntityCanFlyComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that the entity can\r fly, and the pathfinder won't be restricted to paths where a\r solid block is required underneath it.\r /",
          "definition": "export class EntityCanFlyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_fly';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * fly, and the pathfinder won't be restricted to paths where a\r\n * solid block is required underneath it.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "can_fly'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitycanflycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityCanPowerJumpComponent",
          "name": "EntityCanPowerJumpComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that the entity can\r power jump like the horse does within Minecraft.\r /",
          "definition": "export class EntityCanPowerJumpComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_power_jump';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * power jump like the horse does within Minecraft.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "can_power_jump'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitycanpowerjumpcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityColor2Component",
          "name": "EntityColor2Component",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the entity's secondary color. Only works on certain\r entities that have secondary predefined color values (e.g.,\r tropical fish).\r /",
          "definition": "export class EntityColor2Component extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of this particular color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: PaletteColor;\r\n    static readonly componentId = 'minecraft:color2';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the entity's secondary color. Only works on certain\r\n * entities that have secondary predefined color values (e.g.,\r\n * tropical fish).\r\n */\r",
          "properties": [
            {
              "name": "value",
              "type": "PaletteColor",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "color2'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitycolor2component",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityColorComponent",
          "name": "EntityColorComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the entity's color. Only works on certain entities\r that have predefined color values (e.g., sheep, llama,\r shulker).\r /",
          "definition": "export class EntityColorComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of this particular color.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    value: number;\r\n    static readonly componentId = 'minecraft:color';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the entity's color. Only works on certain entities\r\n * that have predefined color values (e.g., sheep, llama,\r\n * shulker).\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "color'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitycolorcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityComponent",
          "name": "EntityComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Base class for downstream entity components.\r /",
          "definition": "export class EntityComponent extends Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that owns this component. The entity will be\r\n     * undefined if it has been removed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Base class for downstream entity components.\r\n */\r",
          "properties": [
            {
              "name": "entity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "Component",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityDefinitionFeedItem",
          "name": "EntityDefinitionFeedItem",
          "type": "class",
          "module": "@minecraft/server",
          "description": "As part of the Ageable component, represents a set of items\r that can be fed to an entity and the rate at which that\r causes them to grow.\r /",
          "definition": "export class EntityDefinitionFeedItem {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The amount by which an entity's age will increase when fed\r\n     * this item. Values usually range between 0 and 1.\r\n     *\r\n     */\r\n    readonly growth: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of type of item that can be fed. If a namespace\r\n     * is not specified, 'minecraft:' is assumed. Example values\r\n     * include 'wheat' or 'golden_apple'.\r\n     *\r\n     */\r\n    readonly item: string;\r\n}\r",
          "jsdoc": "/**\r\n * As part of the Ageable component, represents a set of items\r\n * that can be fed to an entity and the rate at which that\r\n * causes them to grow.\r\n */\r",
          "properties": [
            {
              "name": "growth",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "item",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitydefinitionfeeditem",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityDieAfterEvent",
          "name": "EntityDieAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains data related to the death of an entity in the game.\r /",
          "definition": "export class EntityDieAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If specified, provides more information on the source of\r\n     * damage that caused the death of this entity.\r\n     *\r\n     */\r\n    readonly damageSource: EntityDamageSource;\r\n    /**\r\n     * @remarks\r\n     * Now-dead entity object.\r\n     *\r\n     */\r\n    readonly deadEntity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains data related to the death of an entity in the game.\r\n */\r",
          "properties": [
            {
              "name": "damageSource",
              "type": "EntityDamageSource",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "deadEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitydieafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityDieAfterEventSignal",
          "name": "EntityDieAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Supports registering for an event that fires after an entity\r has died.\r /",
          "definition": "export class EntityDieAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Subscribes to an event that fires when an entity dies.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call when an entity dies.\r\n     * @param options\r\n     * Additional filtering options for when the subscription\r\n     * fires.\r\n     * @returns\r\n     * Returns the closure that can be used in future downstream\r\n     * calls to unsubscribe.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityDieAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityDieAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Stops this event from calling your function when an entity\r\n     * dies.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityDieAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Supports registering for an event that fires after an entity\r\n * has died.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitydieaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityEquippableComponent",
          "name": "EntityEquippableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Provides access to a mob's equipment slots. This component\r exists on player entities.\r ```typescript\r // Gives the player Elytra\r  function giveEquipment(player: Player) {\r     const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r     if (equipmentCompPlayer) {\r         equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r     }\r }\r ```\r /",
          "definition": "export class EntityEquippableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the total Armor level of the owner.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly totalArmor: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the total Toughness level of the owner.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly totalToughness: number;\r\n    static readonly componentId = 'minecraft:equippable';\r\n    /**\r\n     * @remarks\r\n     * Gets the equipped item for the given EquipmentSlot.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\"\r\n     * @returns\r\n     * Returns the item equipped to the given EquipmentSlot. If\r\n     * empty, returns undefined.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEquipment(equipmentSlot: EquipmentSlot): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the ContainerSlot corresponding to the given\r\n     * EquipmentSlot.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\".\r\n     * @returns\r\n     * Returns the ContainerSlot corresponding to the given\r\n     * EquipmentSlot.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEquipmentSlot(equipmentSlot: EquipmentSlot): ContainerSlot;\r\n    /**\r\n     * @remarks\r\n     * Replaces the item in the given EquipmentSlot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\".\r\n     * @param itemStack\r\n     * The item to equip. If undefined, clears the slot.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setEquipment(equipmentSlot: EquipmentSlot, itemStack?: ItemStack): boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Provides access to a mob's equipment slots. This component\r\n * exists on player entities.\r\n * @example givePlayerElytra.ts\r\n * ```typescript\r\n * // Gives the player Elytra\r\n * import { EquipmentSlot, ItemStack, Player, EntityComponentTypes } from '@minecraft/server';\r\n * import { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n *\r\n * function giveEquipment(player: Player) {\r\n *     const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r\n *     if (equipmentCompPlayer) {\r\n *         equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r\n *     }\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "totalArmor",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "totalToughness",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "equippable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getEquipment",
              "parameters": [],
              "returnType": "ItemStack | undefined",
              "accessibility": "public",
              "signature": "getEquipment(equipmentSlot: EquipmentSlot): ItemStack | undefined"
            },
            {
              "name": "getEquipmentSlot",
              "parameters": [],
              "returnType": "ContainerSlot",
              "accessibility": "public",
              "signature": "getEquipmentSlot(equipmentSlot: EquipmentSlot): ContainerSlot"
            },
            {
              "name": "setEquipment",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "setEquipment(equipmentSlot: EquipmentSlot, itemStack?: ItemStack): boolean"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityequippablecomponent",
            "class"
          ],
          "examples": [
            {
              "title": "givePlayerElytra.ts",
              "code": "// Gives the player Elytra\r\nimport { EquipmentSlot, ItemStack, Player, EntityComponentTypes } from '@minecraft/server';\r\nimport { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n\nfunction giveEquipment(player: Player) {\r\n    const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r\n    if (equipmentCompPlayer) {\r\n        equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r\n    }\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityExhaustionComponent",
          "name": "EntityExhaustionComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the interactions with this entity for Exhaustion.\r Wraps the `minecraft.player.exhaustion` attribute.\r /",
          "definition": "export class EntityExhaustionComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.exhaustion';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the interactions with this entity for Exhaustion.\r\n * Wraps the `minecraft.player.exhaustion` attribute.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "player.exhaustion'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityAttributeComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityexhaustioncomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityFireImmuneComponent",
          "name": "EntityFireImmuneComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity\r doesn't take damage from fire.\r /",
          "definition": "export class EntityFireImmuneComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:fire_immune';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity\r\n * doesn't take damage from fire.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "fire_immune'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityfireimmunecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityFloatsInLiquidComponent",
          "name": "EntityFloatsInLiquidComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity can\r float in liquid blocks.\r /",
          "definition": "export class EntityFloatsInLiquidComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:floats_in_liquid';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity can\r\n * float in liquid blocks.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "floats_in_liquid'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityfloatsinliquidcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityFlyingSpeedComponent",
          "name": "EntityFlyingSpeedComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents the flying speed of an entity.\r /",
          "definition": "export class EntityFlyingSpeedComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of the flying speed of the associated entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    value: number;\r\n    static readonly componentId = 'minecraft:flying_speed';\r\n}\r",
          "jsdoc": "/**\r\n * Represents the flying speed of an entity.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "flying_speed'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityflyingspeedcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityFrictionModifierComponent",
          "name": "EntityFrictionModifierComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines how much friction affects this entity.\r /",
          "definition": "export class EntityFrictionModifierComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of the friction modifier of the associated\r\n     * entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:friction_modifier';\r\n}\r",
          "jsdoc": "/**\r\n * Defines how much friction affects this entity.\r\n */\r",
          "properties": [
            {
              "name": "value",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "friction_modifier'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityfrictionmodifiercomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHealableComponent",
          "name": "EntityHealableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the interactions with this entity for healing it.\r /",
          "definition": "export class EntityHealableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Determines if an item can be used regardless of the entity\r\n     * being at full health.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly forceUse: boolean;\r\n    static readonly componentId = 'minecraft:healable';\r\n    /**\r\n     * @remarks\r\n     * A set of items that can specifically heal this entity.\r\n     *\r\n     * @returns\r\n     * Entity that this component is associated with.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFeedItems(): FeedItem[];\r\n}\r",
          "jsdoc": "/**\r\n * Defines the interactions with this entity for healing it.\r\n */\r",
          "properties": [
            {
              "name": "forceUse",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "healable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getFeedItems",
              "parameters": [],
              "returnType": "FeedItem[]",
              "accessibility": "public",
              "signature": "getFeedItems(): FeedItem[]"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhealablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHealthChangedAfterEvent",
          "name": "EntityHealthChangedAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to an entity when its health\r changes. Warning: don't change the health of an entity in\r this event, or it will cause an infinite loop!\r /",
          "definition": "export class EntityHealthChangedAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity whose health changed.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n    /**\r\n     * @remarks\r\n     * New health value of the entity.\r\n     *\r\n     */\r\n    readonly newValue: number;\r\n    /**\r\n     * @remarks\r\n     * Old health value of the entity.\r\n     *\r\n     */\r\n    readonly oldValue: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to an entity when its health\r\n * changes. Warning: don't change the health of an entity in\r\n * this event, or it will cause an infinite loop!\r\n */\r",
          "properties": [
            {
              "name": "entity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "newValue",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "oldValue",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhealthchangedafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHealthChangedAfterEventSignal",
          "name": "EntityHealthChangedAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when the health of\r an entity changes.\r /",
          "definition": "export class EntityHealthChangedAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when the health of an\r\n     * entity changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHealthChangedAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHealthChangedAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when the health of an\r\n     * entity changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHealthChangedAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when the health of\r\n * an entity changes.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhealthchangedaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHealthComponent",
          "name": "EntityHealthComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the health properties of an entity.\r ```typescript\r  function applyDamageThenHeal(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r    skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r    system.runTimeout(() => {\r     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r     log(\"Skeleton health before heal: \" + health?.currentValue);\r     health?.resetToMaxValue();\r     log(\"Skeleton health after heal: \" + health?.currentValue);\r   }, 20);\r }\r ```\r /",
          "definition": "export class EntityHealthComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:health';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the health properties of an entity.\r\n * @example applyDamageThenHeal.ts\r\n * ```typescript\r\n * import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function applyDamageThenHeal(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n *\r\n *   skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n *\r\n *   system.runTimeout(() => {\r\n *     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n *     log(\"Skeleton health before heal: \" + health?.currentValue);\r\n *     health?.resetToMaxValue();\r\n *     log(\"Skeleton health after heal: \" + health?.currentValue);\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "health'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityAttributeComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhealthcomponent",
            "class"
          ],
          "examples": [
            {
              "title": "applyDamageThenHeal.ts",
              "code": "import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction applyDamageThenHeal(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n\n  skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n\n  system.runTimeout(() => {\r\n    const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n    log(\"Skeleton health before heal: \" + health?.currentValue);\r\n    health?.resetToMaxValue();\r\n    log(\"Skeleton health after heal: \" + health?.currentValue);\r\n  }, 20);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHitBlockAfterEvent",
          "name": "EntityHitBlockAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to an entity hitting a block.\r /",
          "definition": "export class EntityHitBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Entity that made the attack.\r\n     *\r\n     */\r\n    readonly damagingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Block that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitBlock: Block;\r\n    /**\r\n     * @remarks\r\n     * Block permutation that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitBlockPermutation: BlockPermutation;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to an entity hitting a block.\r\n */\r",
          "properties": [
            {
              "name": "blockFace",
              "type": "Direction",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "damagingEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hitBlock",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hitBlockPermutation",
              "type": "BlockPermutation",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhitblockafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHitBlockAfterEventSignal",
          "name": "EntityHitBlockAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when an entity hits\r a block.\r /",
          "definition": "export class EntityHitBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHitBlockAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHitBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHitBlockAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity hits\r\n * a block.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhitblockaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHitEntityAfterEvent",
          "name": "EntityHitEntityAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to an entity hitting (melee\r attacking) another entity.\r /",
          "definition": "export class EntityHitEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that made a hit/melee attack.\r\n     *\r\n     */\r\n    readonly damagingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to an entity hitting (melee\r\n * attacking) another entity.\r\n */\r",
          "properties": [
            {
              "name": "damagingEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hitEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhitentityafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHitEntityAfterEventSignal",
          "name": "EntityHitEntityAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when an entity makes\r a melee attack on another entity.\r /",
          "definition": "export class EntityHitEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity hits\r\n     * another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHitEntityAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHitEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity makes a\r\n     * melee attack on another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHitEntityAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity makes\r\n * a melee attack on another entity.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhitentityaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHungerComponent",
          "name": "EntityHungerComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the interactions with this entity for hunger. Wraps\r the `minecraft.player.hunger` attribute.\r /",
          "definition": "export class EntityHungerComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.hunger';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the interactions with this entity for hunger. Wraps\r\n * the `minecraft.player.hunger` attribute.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "player.hunger'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityAttributeComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhungercomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHurtAfterEvent",
          "name": "EntityHurtAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to an entity getting hurt.\r /",
          "definition": "export class EntityHurtAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Describes the amount of damage caused.\r\n     *\r\n     */\r\n    readonly damage: number;\r\n    /**\r\n     * @remarks\r\n     * Source information on the entity that may have applied this\r\n     * damage.\r\n     *\r\n     */\r\n    readonly damageSource: EntityDamageSource;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hurt.\r\n     *\r\n     */\r\n    readonly hurtEntity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to an entity getting hurt.\r\n */\r",
          "properties": [
            {
              "name": "damage",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "damageSource",
              "type": "EntityDamageSource",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hurtEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhurtafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHurtAfterEventSignal",
          "name": "EntityHurtAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when an entity is\r hurt.\r /",
          "definition": "export class EntityHurtAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity is hurt.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHurtAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHurtAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity is hurt.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHurtAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity is\r\n * hurt.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhurtaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityInventoryComponent",
          "name": "EntityInventoryComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines this entity's inventory properties.\r /",
          "definition": "export class EntityInventoryComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Number of slots that this entity can gain per extra\r\n     * strength.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly additionalSlotsPerStrength: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the contents of this inventory can be removed by a\r\n     * hopper.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBeSiphonedFrom: boolean;\r\n    /**\r\n     * @remarks\r\n     * Defines the container for this entity. The container will be\r\n     * undefined if the entity has been removed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly container: Container;\r\n    /**\r\n     * @remarks\r\n     * Type of container this entity has.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly containerType: string;\r\n    /**\r\n     * @remarks\r\n     * Number of slots the container has.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly inventorySize: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity will not drop it's inventory on death.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly 'private': boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity's inventory can only be accessed by its\r\n     * owner or itself.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly restrictToOwner: boolean;\r\n    static readonly componentId = 'minecraft:inventory';\r\n}\r",
          "jsdoc": "/**\r\n * Defines this entity's inventory properties.\r\n */\r",
          "properties": [
            {
              "name": "additionalSlotsPerStrength",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canBeSiphonedFrom",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "container",
              "type": "Container",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "containerType",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "inventorySize",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "restrictToOwner",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "inventory'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityinventorycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsBabyComponent",
          "name": "EntityIsBabyComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is a\r baby.\r /",
          "definition": "export class EntityIsBabyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_baby';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is a\r\n * baby.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_baby'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityisbabycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsChargedComponent",
          "name": "EntityIsChargedComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is\r charged.\r /",
          "definition": "export class EntityIsChargedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_charged';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * charged.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_charged'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityischargedcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsChestedComponent",
          "name": "EntityIsChestedComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is\r currently carrying a chest.\r /",
          "definition": "export class EntityIsChestedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_chested';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently carrying a chest.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_chested'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityischestedcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsDyeableComponent",
          "name": "EntityIsDyeableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that dyes can be used\r on this entity to change its color.\r /",
          "definition": "export class EntityIsDyeableComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_dyeable';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that dyes can be used\r\n * on this entity to change its color.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_dyeable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityisdyeablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsHiddenWhenInvisibleComponent",
          "name": "EntityIsHiddenWhenInvisibleComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity can\r hide from hostile mobs while invisible.\r /",
          "definition": "export class EntityIsHiddenWhenInvisibleComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_hidden_when_invisible';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity can\r\n * hide from hostile mobs while invisible.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_hidden_when_invisible'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityishiddenwheninvisiblecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsIgnitedComponent",
          "name": "EntityIsIgnitedComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity this\r currently on fire.\r /",
          "definition": "export class EntityIsIgnitedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_ignited';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity this\r\n * currently on fire.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_ignited'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityisignitedcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsIllagerCaptainComponent",
          "name": "EntityIsIllagerCaptainComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is an\r illager captain.\r /",
          "definition": "export class EntityIsIllagerCaptainComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_illager_captain';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is an\r\n * illager captain.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_illager_captain'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityisillagercaptaincomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsSaddledComponent",
          "name": "EntityIsSaddledComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is\r currently saddled.\r /",
          "definition": "export class EntityIsSaddledComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_saddled';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently saddled.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_saddled'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityissaddledcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsShakingComponent",
          "name": "EntityIsShakingComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is\r currently shaking.\r /",
          "definition": "export class EntityIsShakingComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_shaking';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently shaking.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_shaking'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityisshakingcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsShearedComponent",
          "name": "EntityIsShearedComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is\r currently sheared.\r /",
          "definition": "export class EntityIsShearedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_sheared';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently sheared.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_sheared'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityisshearedcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsStackableComponent",
          "name": "EntityIsStackableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity can be\r stacked.\r /",
          "definition": "export class EntityIsStackableComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_stackable';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity can be\r\n * stacked.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_stackable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityisstackablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsStunnedComponent",
          "name": "EntityIsStunnedComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is\r currently stunned.\r /",
          "definition": "export class EntityIsStunnedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_stunned';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently stunned.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_stunned'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityisstunnedcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityIsTamedComponent",
          "name": "EntityIsTamedComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity is\r currently tamed.\r /",
          "definition": "export class EntityIsTamedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_tamed';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently tamed.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "is_tamed'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityistamedcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityItemComponent",
          "name": "EntityItemComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "If added onto the entity, this indicates that the entity\r represents a free-floating item in the world. Lets you\r retrieve the actual item stack contents via the itemStack\r property.\r ```typescript\r  function testThatEntityIsFeatherItem(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const items = targetLocation.dimension.getEntities({\r     location: targetLocation,\r     maxDistance: 20,\r   });\r    for (const item of items) {\r     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r      if (itemComp) {\r       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r         log(\"Success! Found a feather\", 1);\r       }\r     }\r   }\r }\r ```\r /",
          "definition": "export class EntityItemComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Item stack represented by this entity in the world.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    static readonly componentId = 'minecraft:item';\r\n}\r",
          "jsdoc": "/**\r\n * If added onto the entity, this indicates that the entity\r\n * represents a free-floating item in the world. Lets you\r\n * retrieve the actual item stack contents via the itemStack\r\n * property.\r\n * @example testThatEntityIsFeatherItem.ts\r\n * ```typescript\r\n * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function testThatEntityIsFeatherItem(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const items = targetLocation.dimension.getEntities({\r\n *     location: targetLocation,\r\n *     maxDistance: 20,\r\n *   });\r\n *\r\n *   for (const item of items) {\r\n *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n *\r\n *     if (itemComp) {\r\n *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n *         log(\"Success! Found a feather\", 1);\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "item'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityitemcomponent",
            "class"
          ],
          "examples": [
            {
              "title": "testThatEntityIsFeatherItem.ts",
              "code": "import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction testThatEntityIsFeatherItem(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const items = targetLocation.dimension.getEntities({\r\n    location: targetLocation,\r\n    maxDistance: 20,\r\n  });\r\n\n  for (const item of items) {\r\n    const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n\n    if (itemComp) {\r\n      if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n        log(\"Success! Found a feather\", 1);\r\n      }\r\n    }\r\n  }\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityLavaMovementComponent",
          "name": "EntityLavaMovementComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the base movement speed in lava of this entity.\r /",
          "definition": "export class EntityLavaMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:lava_movement';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the base movement speed in lava of this entity.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "lava_movement'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityAttributeComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitylavamovementcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityLeashableComponent",
          "name": "EntityLeashableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows the entity to be leashed. Defines the conditions and\r events for when an entity is leashed.\r /",
          "definition": "export class EntityLeashableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if another entity can 'steal' the leashed\r\n     * entity by attaching their own leash to it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBeStolen: boolean;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the leash stiffens, restricting\r\n     * movement.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly hardDistance: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is leashed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isLeashed: boolean;\r\n    /**\r\n     * @remarks\r\n     * Entity that is holding the leash.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly leashHolder?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Identifier of entity that is holding the leash.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly leashHolderEntityId?: string;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the leash breaks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxDistance: number;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the 'spring' effect starts\r\n     * acting to keep this entity close to the entity that leashed\r\n     * it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly softDistance: number;\r\n    static readonly componentId = 'minecraft:leashable';\r\n    /**\r\n     * @remarks\r\n     * Leashes this entity to another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param leashHolder\r\n     * The entity to leash this entity to.\r\n     * @throws\r\n     * Throws if the entity to leash to is over the max distance,\r\n     * and if the player is dead or in spectator mode.\r\n     */\r\n    leashTo(leashHolder: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Unleashes this entity if it is leashed to another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    unleash(): void;\r\n}\r",
          "jsdoc": "/**\r\n * Allows the entity to be leashed. Defines the conditions and\r\n * events for when an entity is leashed.\r\n */\r",
          "properties": [
            {
              "name": "canBeStolen",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hardDistance",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isLeashed",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "maxDistance",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "softDistance",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "leashable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "leashTo",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "leashTo(leashHolder: Entity): void"
            },
            {
              "name": "unleash",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "unleash(): void"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityleashablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityLoadAfterEvent",
          "name": "EntityLoadAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains data related to an entity loaded within the world.\r This could happen when an unloaded chunk is reloaded, or\r when an entity changes dimensions.\r /",
          "definition": "export class EntityLoadAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that was loaded.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains data related to an entity loaded within the world.\r\n * This could happen when an unloaded chunk is reloaded, or\r\n * when an entity changes dimensions.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityloadafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityLoadAfterEventSignal",
          "name": "EntityLoadAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Registers a script-based event handler for handling what\r happens when an entity loads.\r /",
          "definition": "export class EntityLoadAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Method to register an event handler for what happens when an\r\n     * entity loads.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function that handles the load event.\r\n     */\r\n    subscribe(callback: (arg0: EntityLoadAfterEvent) => void): (arg0: EntityLoadAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unregisters a method that was previously subscribed to the\r\n     * subscription event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Original function that was passed into the subscribe event,\r\n     * that is to be unregistered.\r\n     */\r\n    unsubscribe(callback: (arg0: EntityLoadAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Registers a script-based event handler for handling what\r\n * happens when an entity loads.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityloadaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMarkVariantComponent",
          "name": "EntityMarkVariantComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Additional variant value. Can be used to further\r differentiate variants.\r /",
          "definition": "export class EntityMarkVariantComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of the mark variant value for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:mark_variant';\r\n}\r",
          "jsdoc": "/**\r\n * Additional variant value. Can be used to further\r\n * differentiate variants.\r\n */\r",
          "properties": [
            {
              "name": "value",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "mark_variant'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymarkvariantcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementAmphibiousComponent",
          "name": "EntityMovementAmphibiousComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this movement control allows the mob to swim in\r water and walk on land.\r /",
          "definition": "export class EntityMovementAmphibiousComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.amphibious';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this movement control allows the mob to swim in\r\n * water and walk on land.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "movement.amphibious'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementamphibiouscomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementBasicComponent",
          "name": "EntityMovementBasicComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "This component accents the movement of an entity.\r /",
          "definition": "export class EntityMovementBasicComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.basic';\r\n}\r",
          "jsdoc": "/**\r\n * This component accents the movement of an entity.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "movement.basic'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementbasiccomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementComponent",
          "name": "EntityMovementComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the general movement speed of this entity.\r /",
          "definition": "export class EntityMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the general movement speed of this entity.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "movement'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityAttributeComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementFlyComponent",
          "name": "EntityMovementFlyComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this move control causes the mob to fly.\r /",
          "definition": "export class EntityMovementFlyComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.fly';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this move control causes the mob to fly.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "movement.fly'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementflycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementGenericComponent",
          "name": "EntityMovementGenericComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this move control allows a mob to fly, swim,\r climb, etc.\r /",
          "definition": "export class EntityMovementGenericComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.generic';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this move control allows a mob to fly, swim,\r\n * climb, etc.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "movement.generic'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementgenericcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementGlideComponent",
          "name": "EntityMovementGlideComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this movement control allows the mob to glide.\r /",
          "definition": "export class EntityMovementGlideComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Speed in effect when the entity is turning.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly speedWhenTurning: number;\r\n    /**\r\n     * @remarks\r\n     * Start speed during a glide.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly startSpeed: number;\r\n    static readonly componentId = 'minecraft:movement.glide';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this movement control allows the mob to glide.\r\n */\r",
          "properties": [
            {
              "name": "speedWhenTurning",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "startSpeed",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "movement.glide'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementglidecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementHoverComponent",
          "name": "EntityMovementHoverComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this move control causes the mob to hover.\r /",
          "definition": "export class EntityMovementHoverComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.hover';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this move control causes the mob to hover.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "movement.hover'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementhovercomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementJumpComponent",
          "name": "EntityMovementJumpComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Move control that causes the mob to jump as it moves with a\r specified delay between jumps.\r /",
          "definition": "export class EntityMovementJumpComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.jump';\r\n}\r",
          "jsdoc": "/**\r\n * Move control that causes the mob to jump as it moves with a\r\n * specified delay between jumps.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "movement.jump'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementjumpcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementSkipComponent",
          "name": "EntityMovementSkipComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this move control causes the mob to hop as it\r moves.\r /",
          "definition": "export class EntityMovementSkipComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.skip';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this move control causes the mob to hop as it\r\n * moves.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "movement.skip'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementskipcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityMovementSwayComponent",
          "name": "EntityMovementSwayComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this move control causes the mob to sway side to\r side giving the impression it is swimming.\r /",
          "definition": "export class EntityMovementSwayComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Amplitude of the sway motion.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly swayAmplitude: number;\r\n    /**\r\n     * @remarks\r\n     * Amount of sway frequency.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly swayFrequency: number;\r\n    static readonly componentId = 'minecraft:movement.sway';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this move control causes the mob to sway side to\r\n * side giving the impression it is swimming.\r\n */\r",
          "properties": [
            {
              "name": "swayAmplitude",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "swayFrequency",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "movement.sway'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityBaseMovementComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitymovementswaycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityNavigationClimbComponent",
          "name": "EntityNavigationClimbComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows this entity to generate paths that include vertical\r walls (for example, like Minecraft spiders do.)\r /",
          "definition": "export class EntityNavigationClimbComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.climb';\r\n}\r",
          "jsdoc": "/**\r\n * Allows this entity to generate paths that include vertical\r\n * walls (for example, like Minecraft spiders do.)\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "navigation.climb'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityNavigationComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitynavigationclimbcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityNavigationComponent",
          "name": "EntityNavigationComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows this entity to generate paths that include vertical\r walls (for example, like Minecraft spiders do.)\r /",
          "definition": "export class EntityNavigationComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid blocks that cause damage when\r\n     * finding a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidDamageBlocks: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid portals (like nether portals)\r\n     * when finding a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidPortals: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether or not the pathfinder should avoid tiles that are\r\n     * exposed to the sun when creating paths.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidSun: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid water when creating a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can jump out of water\r\n     * (like a dolphin).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBreach: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed door\r\n     * and break it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBreakDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can float.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canFloat: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can jump up blocks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canJump: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed door\r\n     * assuming the AI will open the door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canOpenDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed iron\r\n     * door assuming the AI will open the door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canOpenIronDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether a path can be created through a door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPassDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can start pathing when in the\r\n     * air.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathFromAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel on the\r\n     * surface of the lava.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathOverLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel on the\r\n     * surface of the water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathOverWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it will be pulled down\r\n     * by gravity while in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canSink: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can path anywhere\r\n     * through water and plays swimming animation along that path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canSwim: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can walk on the\r\n     * ground outside water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canWalk: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel in lava\r\n     * like walking on ground.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canWalkInLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can walk on the\r\n     * ground or go underwater.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isAmphibious: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Allows this entity to generate paths that include vertical\r\n * walls (for example, like Minecraft spiders do.)\r\n */\r",
          "properties": [
            {
              "name": "avoidDamageBlocks",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "avoidPortals",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "avoidSun",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "avoidWater",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canBreach",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canBreakDoors",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canFloat",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canJump",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canOpenDoors",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canOpenIronDoors",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canPassDoors",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canPathFromAir",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canPathOverLava",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canPathOverWater",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canSink",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canSwim",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canWalk",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "canWalkInLava",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isAmphibious",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitynavigationcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityNavigationFloatComponent",
          "name": "EntityNavigationFloatComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows this entity to generate paths by flying around the\r air like the regular Ghast.\r /",
          "definition": "export class EntityNavigationFloatComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.float';\r\n}\r",
          "jsdoc": "/**\r\n * Allows this entity to generate paths by flying around the\r\n * air like the regular Ghast.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "navigation.float'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityNavigationComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitynavigationfloatcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityNavigationFlyComponent",
          "name": "EntityNavigationFlyComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows this entity to generate paths in the air (for\r example, like Minecraft parrots do.)\r /",
          "definition": "export class EntityNavigationFlyComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.fly';\r\n}\r",
          "jsdoc": "/**\r\n * Allows this entity to generate paths in the air (for\r\n * example, like Minecraft parrots do.)\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "navigation.fly'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityNavigationComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitynavigationflycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityNavigationGenericComponent",
          "name": "EntityNavigationGenericComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows this entity to generate paths by walking, swimming,\r flying and/or climbing around and jumping up and down a\r block.\r /",
          "definition": "export class EntityNavigationGenericComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.generic';\r\n}\r",
          "jsdoc": "/**\r\n * Allows this entity to generate paths by walking, swimming,\r\n * flying and/or climbing around and jumping up and down a\r\n * block.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "navigation.generic'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityNavigationComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitynavigationgenericcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityNavigationHoverComponent",
          "name": "EntityNavigationHoverComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows this entity to generate paths in the air (for\r example, like the Minecraft Bees do.) Keeps them from\r falling out of the skies and doing predictive movement.\r /",
          "definition": "export class EntityNavigationHoverComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.hover';\r\n}\r",
          "jsdoc": "/**\r\n * Allows this entity to generate paths in the air (for\r\n * example, like the Minecraft Bees do.) Keeps them from\r\n * falling out of the skies and doing predictive movement.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "navigation.hover'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityNavigationComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitynavigationhovercomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityNavigationWalkComponent",
          "name": "EntityNavigationWalkComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows this entity to generate paths by walking around and\r jumping up and down a block like regular mobs.\r /",
          "definition": "export class EntityNavigationWalkComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.walk';\r\n}\r",
          "jsdoc": "/**\r\n * Allows this entity to generate paths by walking around and\r\n * jumping up and down a block like regular mobs.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "navigation.walk'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityNavigationComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitynavigationwalkcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityOnFireComponent",
          "name": "EntityOnFireComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When present on an entity, this entity is on fire.\r ```typescript\r  function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r    skelly.setOnFire(20, true);\r    system.runTimeout(() => {\r     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r      skelly.extinguishFire(true);\r     log(\"Never mind. Fire extinguished.\");\r   }, 20);\r }\r ```\r /",
          "definition": "export class EntityOnFireComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The number of ticks remaining before the fire goes out.\r\n     *\r\n     */\r\n    readonly onFireTicksRemaining: number;\r\n    static readonly componentId = 'minecraft:onfire';\r\n}\r",
          "jsdoc": "/**\r\n * When present on an entity, this entity is on fire.\r\n * @example setOnFire.ts\r\n * ```typescript\r\n * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n *\r\n *   skelly.setOnFire(20, true);\r\n *\r\n *   system.runTimeout(() => {\r\n *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n *\r\n *     skelly.extinguishFire(true);\r\n *     log(\"Never mind. Fire extinguished.\");\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "onFireTicksRemaining",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "onfire'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityonfirecomponent",
            "class"
          ],
          "examples": [
            {
              "title": "setOnFire.ts",
              "code": "import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n\n  skelly.setOnFire(20, true);\r\n\n  system.runTimeout(() => {\r\n    const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n    log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n\n    skelly.extinguishFire(true);\r\n    log(\"Never mind. Fire extinguished.\");\r\n  }, 20);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityProjectileComponent",
          "name": "EntityProjectileComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "The projectile component controls the properties of a\r projectile entity and allows it to be shot in a given\r direction.\r This component is present when the entity has the\r minecraft:projectile component.\r ```typescript\r  function shootArrow(targetLocation: DimensionLocation) {\r   const velocity = { x: 0, y: 1, z: 5 };\r    const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r     x: targetLocation.x,\r     y: targetLocation.y + 2,\r     z: targetLocation.z,\r   });\r    const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r    projectileComp?.shoot(velocity);\r }\r ```\r /",
          "definition": "export class EntityProjectileComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The fraction of the projectile's speed maintained every tick\r\n     * while traveling through air.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    airInertia: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity will be set on fire when hurt. The\r\n     * default burn duration is 5 seconds. This duration can be\r\n     * modified via the onFireTime property. The entity will not\r\n     * catch fire if immune or if the entity is wet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    catchFireOnHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will spawn crit particles when hit\r\n     * by a player. E.g. Player attacking a Shulker bullet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    critParticlesOnProjectileHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will be destroyed when it takes\r\n     * damage. E.g. Player attacking a Shulker bullet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    destroyOnProjectileHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * The gravity applied to the projectile. When the entity is\r\n     * not on the ground, subtracts this amount from the\r\n     * projectile’s change in vertical position every tick. The\r\n     * higher the value, the faster the projectile falls. If\r\n     * negative, the entity will rise instead of fall.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    gravity: number;\r\n    /**\r\n     * @remarks\r\n     * The sound that plays when the projectile hits an entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitEntitySound?: string;\r\n    /**\r\n     * @remarks\r\n     * The sound that plays when the projectile hits a block.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitGroundSound?: string;\r\n    /**\r\n     * @remarks\r\n     * The particle that spawns when the projectile hits something.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitParticle?: string;\r\n    /**\r\n     * @remarks\r\n     * If true and the weather is thunder and the entity has line\r\n     * of sight to the sky, the entity will be struck by lightning\r\n     * when hit. E.g. A thrown Trident with the Channeling\r\n     * enchantment.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    lightningStrikeOnHit: boolean;\r\n    /**\r\n     * @remarks\r\n     * The fraction of the projectile's speed maintained every tick\r\n     * while traveling through a liquid.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    liquidInertia: number;\r\n    /**\r\n     * @remarks\r\n     * Duration in seconds that the entity hit will be on fire for\r\n     * when catchFireOnHurt is set to true.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    onFireTime: number;\r\n    /**\r\n     * @remarks\r\n     * The owner of the projectile. This is used to determine what\r\n     * the projectile can collide with and damage. It also\r\n     * determines which entity is assigned as the attacker.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    owner?: Entity;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will bounce off mobs when no damage\r\n     * is taken. E.g. A spawning wither.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    shouldBounceOnHit: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will stop moving when an entity is\r\n     * hit as thought it had been blocked. E.g. Thrown trident on\r\n     * hit behavior.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    stopOnHit: boolean;\r\n    static readonly componentId = 'minecraft:projectile';\r\n    /**\r\n     * @remarks\r\n     * Shoots the projectile with a given velocity. The projectile\r\n     * will be shot from its current location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param velocity\r\n     * The velocity to fire the projectile. This controls both the\r\n     * speed and direction which which the projectile will be shot.\r\n     * @param options\r\n     * Optional configuration for the shoot.\r\n     * @throws\r\n     * Throws if the component or entity no longer exist.\r\n     */\r\n    shoot(velocity: Vector3, options?: ProjectileShootOptions): void;\r\n}\r",
          "jsdoc": "/**\r\n * The projectile component controls the properties of a\r\n * projectile entity and allows it to be shot in a given\r\n * direction.\r\n * This component is present when the entity has the\r\n * minecraft:projectile component.\r\n * @example shootArrow.ts\r\n * ```typescript\r\n * import { DimensionLocation, EntityProjectileComponent } from \"@minecraft/server\";\r\n *\r\n * function shootArrow(targetLocation: DimensionLocation) {\r\n *   const velocity = { x: 0, y: 1, z: 5 };\r\n *\r\n *   const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 2,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r\n *\r\n *   projectileComp?.shoot(velocity);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "projectile'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "shoot",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "shoot(velocity: Vector3, options?: ProjectileShootOptions): void"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityprojectilecomponent",
            "class"
          ],
          "examples": [
            {
              "title": "shootArrow.ts",
              "code": "import { DimensionLocation, EntityProjectileComponent } from \"@minecraft/server\";\r\n\nfunction shootArrow(targetLocation: DimensionLocation) {\r\n  const velocity = { x: 0, y: 1, z: 5 };\r\n\n  const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 2,\r\n    z: targetLocation.z,\r\n  });\r\n\n  const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r\n\n  projectileComp?.shoot(velocity);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityPushThroughComponent",
          "name": "EntityPushThroughComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Sets the distance through which the entity can push through.\r /",
          "definition": "export class EntityPushThroughComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of the push through distances of this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:push_through';\r\n}\r",
          "jsdoc": "/**\r\n * Sets the distance through which the entity can push through.\r\n */\r",
          "properties": [
            {
              "name": "value",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "push_through'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitypushthroughcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityRemoveAfterEvent",
          "name": "EntityRemoveAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Data for an event that happens when an entity is removed\r from the world (for example, the entity is unloaded because\r it is not close to players.)\r /",
          "definition": "export class EntityRemoveAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Id of the entity that was removed.\r\n     *\r\n     */\r\n    readonly removedEntityId: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of the entity removed - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
          "jsdoc": "/**\r\n * Data for an event that happens when an entity is removed\r\n * from the world (for example, the entity is unloaded because\r\n * it is not close to players.)\r\n */\r",
          "properties": [
            {
              "name": "removedEntityId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "typeId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityremoveafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityRemoveAfterEventSignal",
          "name": "EntityRemoveAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows registration for an event that fires when an entity\r is removed from  the game (for example, unloaded, or a few\r seconds after they are dead.)\r /",
          "definition": "export class EntityRemoveAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Will call your function every time an entity is removed from\r\n     * the game.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call.\r\n     * @param options\r\n     * Additional filtering options for this event.\r\n     * @returns\r\n     * Returns a closure that can be used in subsequent unsubscribe\r\n     * operations.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityRemoveAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityRemoveAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes your function from subsequent calls when an\r\n     * entity is removed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityRemoveAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Allows registration for an event that fires when an entity\r\n * is removed from  the game (for example, unloaded, or a few\r\n * seconds after they are dead.)\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityremoveaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityRemoveBeforeEvent",
          "name": "EntityRemoveBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Data for an event that happens when an entity is being\r removed from the world (for example, the entity is unloaded\r because it is not close to players.)\r /",
          "definition": "export class EntityRemoveBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Reference to an entity that is being removed.\r\n     *\r\n     */\r\n    readonly removedEntity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Data for an event that happens when an entity is being\r\n * removed from the world (for example, the entity is unloaded\r\n * because it is not close to players.)\r\n */\r",
          "properties": [
            {
              "name": "removedEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityremovebeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityRemoveBeforeEventSignal",
          "name": "EntityRemoveBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows registration for an event that fires when an entity\r is being removed from  the game (for example, unloaded, or a\r few seconds after they are dead.)\r /",
          "definition": "export class EntityRemoveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Will call your function every time an entity is being\r\n     * removed from the game.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call.\r\n     * @returns\r\n     * Returns a closure that can be used in subsequent unsubscribe\r\n     * operations.\r\n     */\r\n    subscribe(callback: (arg0: EntityRemoveBeforeEvent) => void): (arg0: EntityRemoveBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes your function from subsequent calls when an\r\n     * entity is being removed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityRemoveBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Allows registration for an event that fires when an entity\r\n * is being removed from  the game (for example, unloaded, or a\r\n * few seconds after they are dead.)\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityremovebeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityRideableComponent",
          "name": "EntityRideableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component adds the capability that an\r entity can be ridden by another entity.\r ```typescript\r  function minibiomes(test: Test) {\r   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r    test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r    const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r    minecartRideableComp?.addRider(pig);\r    test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r }\r register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r ```\r /",
          "definition": "export class EntityRideableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Zero-based index of the seat that can used to control this\r\n     * entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly controllingSeat: number;\r\n    /**\r\n     * @remarks\r\n     * Determines whether interactions are not supported if the\r\n     * entity is crouching.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly crouchingSkipInteract: boolean;\r\n    /**\r\n     * @remarks\r\n     * Set of text that should be displayed when a player is\r\n     * looking to ride on this entity (commonly with touch-screen\r\n     * controls).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly interactText: string;\r\n    /**\r\n     * @remarks\r\n     * The max width a mob can be to be a passenger.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly passengerMaxWidth: number;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will pull in entities that are in the\r\n     * correct family_types into any available seat.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly pullInEntities: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will be picked when looked at by the\r\n     * rider.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly riderCanInteract: boolean;\r\n    /**\r\n     * @remarks\r\n     * Number of seats for riders defined for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly seatCount: number;\r\n    static readonly componentId = 'minecraft:rideable';\r\n    /**\r\n     * @remarks\r\n     * Adds an entity to this entity as a rider.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rider\r\n     * Entity that will become the rider of this entity.\r\n     * @returns\r\n     * True if the rider entity was successfully added.\r\n     * @throws This function can throw errors.\r\n     * @example minibiomes.ts\r\n     * ```typescript\r\n     * import { EntityComponentTypes } from \"@minecraft/server\";\r\n     * import { Test, register } from \"@minecraft/server-gametest\";\r\n     * import { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function minibiomes(test: Test) {\r\n     *   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n     *   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n     *\r\n     *   test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n     *\r\n     *   const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n     *\r\n     *   minecartRideableComp?.addRider(pig);\r\n     *\r\n     *   test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n     * }\r\n     * register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r\n     * ```\r\n     */\r\n    addRider(rider: Entity): boolean;\r\n    /**\r\n     * @remarks\r\n     * Ejects the specified rider of this entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rider\r\n     * Entity that should be ejected from this entity.\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRider(rider: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Ejects all riders of this entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRiders(): void;\r\n    /**\r\n     * @remarks\r\n     * A string-list of entity types that this entity can support\r\n     * as riders.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFamilyTypes(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets a list of the all the entities currently riding this\r\n     * entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRiders(): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Gets a list of positions and number of riders for each\r\n     * position for entities riding this entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getSeats(): Seat[];\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component adds the capability that an\r\n * entity can be ridden by another entity.\r\n * @example minibiomes.ts\r\n * ```typescript\r\n * import { EntityComponentTypes } from \"@minecraft/server\";\r\n * import { Test, register } from \"@minecraft/server-gametest\";\r\n * import { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function minibiomes(test: Test) {\r\n *   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n *   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n *\r\n *   test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n *\r\n *   const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n *\r\n *   minecartRideableComp?.addRider(pig);\r\n *\r\n *   test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n * }\r\n * register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "controllingSeat",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "crouchingSkipInteract",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "interactText",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "passengerMaxWidth",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "pullInEntities",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "riderCanInteract",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "seatCount",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "rideable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "addRider",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "addRider(rider: Entity): boolean"
            },
            {
              "name": "ejectRider",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "ejectRider(rider: Entity): void"
            },
            {
              "name": "ejectRiders",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "ejectRiders(): void"
            },
            {
              "name": "getFamilyTypes",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getFamilyTypes(): string[]"
            },
            {
              "name": "getRiders",
              "parameters": [],
              "returnType": "Entity[]",
              "accessibility": "public",
              "signature": "getRiders(): Entity[]"
            },
            {
              "name": "getSeats",
              "parameters": [],
              "returnType": "Seat[]",
              "accessibility": "public",
              "signature": "getSeats(): Seat[]"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityrideablecomponent",
            "class"
          ],
          "examples": [
            {
              "title": "minibiomes.ts",
              "code": "import { EntityComponentTypes } from \"@minecraft/server\";\r\nimport { Test, register } from \"@minecraft/server-gametest\";\r\nimport { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction minibiomes(test: Test) {\r\n  const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n  const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n\n  test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n\n  const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n\n  minecartRideableComp?.addRider(pig);\r\n\n  test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n}\r\nregister(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityRidingComponent",
          "name": "EntityRidingComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "This component is added to any entity when it is riding\r another entity.\r /",
          "definition": "export class EntityRidingComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity this entity is currently riding on.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly entityRidingOn: Entity;\r\n    static readonly componentId = 'minecraft:riding';\r\n}\r",
          "jsdoc": "/**\r\n * This component is added to any entity when it is riding\r\n * another entity.\r\n */\r",
          "properties": [
            {
              "name": "entityRidingOn",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "riding'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityridingcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntitySaturationComponent",
          "name": "EntitySaturationComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the interactions with this entity for Saturation.\r Wraps the `minecraft.player.saturation` attribute.\r /",
          "definition": "export class EntitySaturationComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.saturation';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the interactions with this entity for Saturation.\r\n * Wraps the `minecraft.player.saturation` attribute.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "player.saturation'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityAttributeComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitysaturationcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityScaleComponent",
          "name": "EntityScaleComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Sets the entity's visual size.\r /",
          "definition": "export class EntityScaleComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value for the scale property set on entities.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:scale';\r\n}\r",
          "jsdoc": "/**\r\n * Sets the entity's visual size.\r\n */\r",
          "properties": [
            {
              "name": "value",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "scale'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityscalecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntitySkinIdComponent",
          "name": "EntitySkinIdComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Skin Id value. Can be used to differentiate skins, such as\r base skins for villagers.\r /",
          "definition": "export class EntitySkinIdComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the value of the skin Id identifier of the entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:skin_id';\r\n}\r",
          "jsdoc": "/**\r\n * Skin Id value. Can be used to differentiate skins, such as\r\n * base skins for villagers.\r\n */\r",
          "properties": [
            {
              "name": "value",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "skin_id'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityskinidcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntitySpawnAfterEvent",
          "name": "EntitySpawnAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains data related to an entity spawning within the\r world.\r ```typescript\r  function logEntitySpawnEvent(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   // register a new function that is called when a new entity is created.\r   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r     if (entityEvent && entityEvent.entity) {\r       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r     } else {\r       log(`The entity event did not work as expected.`, -1);\r     }\r   });\r    system.runTimeout(() => {\r     targetLocation.dimension.spawnEntity(\r       \"minecraft:horse<minecraft:ageable_grow_up>\",\r       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r     );\r   }, 20);\r }\r ```\r /",
          "definition": "export class EntitySpawnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Initialization cause (Spawned, Born ...).\r\n     *\r\n     */\r\n    readonly cause: EntityInitializationCause;\r\n    /**\r\n     * @remarks\r\n     * Entity that was spawned.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains data related to an entity spawning within the\r\n * world.\r\n * @example logEntitySpawnEvent.ts\r\n * ```typescript\r\n * import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function logEntitySpawnEvent(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   // register a new function that is called when a new entity is created.\r\n *   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n *     if (entityEvent && entityEvent.entity) {\r\n *       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n *     } else {\r\n *       log(`The entity event did not work as expected.`, -1);\r\n *     }\r\n *   });\r\n *\r\n *   system.runTimeout(() => {\r\n *     targetLocation.dimension.spawnEntity(\r\n *       \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n *       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n *     );\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "cause",
              "type": "EntityInitializationCause",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityspawnafterevent",
            "class"
          ],
          "examples": [
            {
              "title": "logEntitySpawnEvent.ts",
              "code": "import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { Vector3Utils } from \"@minecraft/math\";\r\n\nfunction logEntitySpawnEvent(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  // register a new function that is called when a new entity is created.\r\n  world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n    if (entityEvent && entityEvent.entity) {\r\n      log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n    } else {\r\n      log(`The entity event did not work as expected.`, -1);\r\n    }\r\n  });\r\n\n  system.runTimeout(() => {\r\n    targetLocation.dimension.spawnEntity(\r\n      \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n      Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n    );\r\n  }, 20);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntitySpawnAfterEventSignal",
          "name": "EntitySpawnAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Registers a script-based event handler for handling what\r happens when an entity spawns.\r /",
          "definition": "export class EntitySpawnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Method to register an event handler for what happens when an\r\n     * entity spawns.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function that handles the spawn event.\r\n     * @example logEntitySpawnEvent.ts\r\n     * ```typescript\r\n     * import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function logEntitySpawnEvent(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   // register a new function that is called when a new entity is created.\r\n     *   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n     *     if (entityEvent && entityEvent.entity) {\r\n     *       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n     *     } else {\r\n     *       log(`The entity event did not work as expected.`, -1);\r\n     *     }\r\n     *   });\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     targetLocation.dimension.spawnEntity(\r\n     *       \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n     *       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n     *     );\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    subscribe(callback: (arg0: EntitySpawnAfterEvent) => void): (arg0: EntitySpawnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unregisters a method that was previously subscribed to the\r\n     * subscription event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Original function that was passed into the subscribe event,\r\n     * that is to be unregistered.\r\n     */\r\n    unsubscribe(callback: (arg0: EntitySpawnAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Registers a script-based event handler for handling what\r\n * happens when an entity spawns.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityspawnaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityStrengthComponent",
          "name": "EntityStrengthComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the entity's ability to carry items. An entity with\r a higher strength would have higher potential carry capacity\r and more item slots.\r /",
          "definition": "export class EntityStrengthComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Maximum strength of this entity, as defined in the entity\r\n     * type definition.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly max: number;\r\n    /**\r\n     * @remarks\r\n     * Current value of the strength component that has been set\r\n     * for entities.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:strength';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the entity's ability to carry items. An entity with\r\n * a higher strength would have higher potential carry capacity\r\n * and more item slots.\r\n */\r",
          "properties": [
            {
              "name": "max",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "value",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "strength'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitystrengthcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityTameableComponent",
          "name": "EntityTameableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the rules for an entity to be tamed by the player.\r /",
          "definition": "export class EntityTameableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a set of items that can be used to tame this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly getTameItems: ItemStack[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed by player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamed: boolean;\r\n    /**\r\n     * @remarks\r\n     * The chance of taming the entity with each item use between\r\n     * 0.0 and 1.0, where 1.0 is 100%\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly probability: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the player that has tamed the entity, or 'undefined'\r\n     * if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayer?: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the id of player that has tamed the entity, or\r\n     * 'undefined' if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayerId?: string;\r\n    static readonly componentId = 'minecraft:tameable';\r\n    /**\r\n     * @remarks\r\n     * Set this entity as tamed by the given player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * The player that this entity should be tamed by.\r\n     * @returns\r\n     * Returns true if the entity was tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tame(player: Player): boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Defines the rules for an entity to be tamed by the player.\r\n */\r",
          "properties": [
            {
              "name": "getTameItems",
              "type": "ItemStack[]",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isTamed",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "probability",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "tameable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "tame",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "tame(player: Player): boolean"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitytameablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityTameMountComponent",
          "name": "EntityTameMountComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains options for taming a rideable entity based on the\r entity that mounts it.\r /",
          "definition": "export class EntityTameMountComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamed: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed by a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamedToPlayer: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the player that has tamed the entity, or 'undefined'\r\n     * if entity is not tamed by a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayer?: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the id of player that has tamed the entity, or\r\n     * 'undefined' if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayerId?: string;\r\n    static readonly componentId = 'minecraft:tamemount';\r\n    /**\r\n     * @remarks\r\n     * Sets this rideable entity as tamed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param showParticles\r\n     * Whether to show effect particles when this entity is tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tame(showParticles: boolean): void;\r\n    /**\r\n     * @remarks\r\n     * Sets this rideable entity as tamed by the given player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param showParticles\r\n     * Whether to show effect particles when this entity is tamed.\r\n     * @param player\r\n     * The player that this entity should be tamed by.\r\n     * @returns\r\n     * Returns true if the entity was tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tameToPlayer(showParticles: boolean, player: Player): boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Contains options for taming a rideable entity based on the\r\n * entity that mounts it.\r\n */\r",
          "properties": [
            {
              "name": "isTamed",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isTamedToPlayer",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "tamemount'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "tame",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "tame(showParticles: boolean): void"
            },
            {
              "name": "tameToPlayer",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "tameToPlayer(showParticles: boolean, player: Player): boolean"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitytamemountcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityType",
          "name": "EntityType",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents information about a type of entity.\r /",
          "definition": "export class EntityType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of this entity type - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
          "jsdoc": "/**\r\n * Represents information about a type of entity.\r\n */\r",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitytype",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityTypeFamilyComponent",
          "name": "EntityTypeFamilyComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Identifier of this entity type - for example,\r 'minecraft:skeleton'.",
          "definition": "export class EntityTypeFamilyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:type_family';\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTypeFamilies(): string[];\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    hasTypeFamily(typeFamily: string): boolean;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Identifier of this entity type - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "type_family'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getTypeFamilies",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getTypeFamilies(): string[]"
            },
            {
              "name": "hasTypeFamily",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasTypeFamily(typeFamily: string): boolean"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitytypefamilycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityTypes",
          "name": "EntityTypes",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Used for accessing all entity types currently available for\r use within the world.\r /",
          "definition": "export class EntityTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves an entity type using a string-based identifier.\r\n     *\r\n     */\r\n    static get(identifier: string): EntityType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of all entity types within this world.\r\n     *\r\n     */\r\n    static getAll(): EntityType[];\r\n}\r",
          "jsdoc": "/**\r\n * Used for accessing all entity types currently available for\r\n * use within the world.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "EntityType | undefined",
              "accessibility": "public",
              "signature": "get(identifier: string): EntityType | undefined"
            },
            {
              "name": "getAll",
              "parameters": [],
              "returnType": "EntityType[]",
              "accessibility": "public",
              "signature": "getAll(): EntityType[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitytypes",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityUnderwaterMovementComponent",
          "name": "EntityUnderwaterMovementComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines the general movement speed underwater of this\r entity.\r /",
          "definition": "export class EntityUnderwaterMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:underwater_movement';\r\n}\r",
          "jsdoc": "/**\r\n * Defines the general movement speed underwater of this\r\n * entity.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "underwater_movement'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityAttributeComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityunderwatermovementcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityVariantComponent",
          "name": "EntityVariantComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Used to differentiate the component group of a variant of an\r entity from others. (e.g. ocelot, villager).\r /",
          "definition": "export class EntityVariantComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value for variant for this entity, as specified via\r\n     * components.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:variant';\r\n}\r",
          "jsdoc": "/**\r\n * Used to differentiate the component group of a variant of an\r\n * entity from others. (e.g. ocelot, villager).\r\n */\r",
          "properties": [
            {
              "name": "value",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "variant'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityvariantcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityWantsJockeyComponent",
          "name": "EntityWantsJockeyComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When added, this component signifies that this entity wants\r to become a jockey.\r /",
          "definition": "export class EntityWantsJockeyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:wants_jockey';\r\n}\r",
          "jsdoc": "/**\r\n * When added, this component signifies that this entity wants\r\n * to become a jockey.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "wants_jockey'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitywantsjockeycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ExplosionAfterEvent",
          "name": "ExplosionAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an explosion that has\r happened.\r /",
          "definition": "export class ExplosionAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where the explosion has occurred.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * A collection of blocks impacted by this explosion event.\r\n     *\r\n     */\r\n    getImpactedBlocks(): Block[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * happened.\r\n */\r",
          "properties": [
            {
              "name": "dimension",
              "type": "Dimension",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getImpactedBlocks",
              "parameters": [],
              "returnType": "Block[]",
              "accessibility": "public",
              "signature": "getImpactedBlocks(): Block[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "explosionafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ExplosionAfterEventSignal",
          "name": "ExplosionAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when an explosion\r occurs.\r /",
          "definition": "export class ExplosionAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an explosion\r\n     * occurs.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ExplosionAfterEvent) => void): (arg0: ExplosionAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an explosion\r\n     * occurs.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ExplosionAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when an explosion\r\n * occurs.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "explosionaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ExplosionBeforeEvent",
          "name": "ExplosionBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an explosion that has\r happened.\r /",
          "definition": "export class ExplosionBeforeEvent extends ExplosionAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the explosion event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Updates a collection of blocks impacted by this explosion\r\n     * event.\r\n     *\r\n     * @param blocks\r\n     * New list of blocks that are impacted by this explosion.\r\n     */\r\n    setImpactedBlocks(blocks: Block[]): void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * happened.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "setImpactedBlocks",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setImpactedBlocks(blocks: Block[]): void"
            }
          ],
          "extends": "ExplosionAfterEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "explosionbeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ExplosionBeforeEventSignal",
          "name": "ExplosionBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to before an explosion\r occurs.\r /",
          "definition": "export class ExplosionBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when before an explosion\r\n     * occurs. The callback can optionally change or cancel\r\n     * explosion behavior.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ExplosionBeforeEvent) => void): (arg0: ExplosionBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called from before when an\r\n     * explosion would occur.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ExplosionBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to before an explosion\r\n * occurs.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "explosionbeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.FeedItem",
          "name": "FeedItem",
          "type": "class",
          "module": "@minecraft/server",
          "description": "As part of the Healable component, represents a specific\r item that can be fed to an entity to cause health effects.\r /",
          "definition": "export class FeedItem {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The amount of health this entity gains when fed this item.\r\n     * This number is an integer starting at 0. Sample values can\r\n     * go as high as 40.\r\n     *\r\n     */\r\n    readonly healAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of type of item that can be fed. If a namespace\r\n     * is not specified, 'minecraft:' is assumed. Example values\r\n     * include 'wheat' or 'golden_apple'.\r\n     *\r\n     */\r\n    readonly item: string;\r\n    /**\r\n     * @remarks\r\n     * As part of the Healable component, an optional collection of\r\n     * side effects that can occur from being fed an item.\r\n     *\r\n     */\r\n    getEffects(): FeedItemEffect[];\r\n}\r",
          "jsdoc": "/**\r\n * As part of the Healable component, represents a specific\r\n * item that can be fed to an entity to cause health effects.\r\n */\r",
          "properties": [
            {
              "name": "healAmount",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "item",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getEffects",
              "parameters": [],
              "returnType": "FeedItemEffect[]",
              "accessibility": "public",
              "signature": "getEffects(): FeedItemEffect[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "feeditem",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.FeedItemEffect",
          "name": "FeedItemEffect",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents an effect that is applied as a result of a food\r item being fed to an entity.\r /",
          "definition": "export class FeedItemEffect {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Gets an amplifier that may have been applied to this effect.\r\n     * Valid values are integers starting at 0 and up - but usually\r\n     * ranging between 0 and 4.\r\n     *\r\n     */\r\n    readonly amplifier: number;\r\n    /**\r\n     * @remarks\r\n     * Chance that this effect is applied as a result of the entity\r\n     * being fed this item. Valid values range between 0 and 1.\r\n     *\r\n     */\r\n    readonly chance: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the duration, in ticks, of this effect.\r\n     *\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the identifier of the effect to apply. Example values\r\n     * include 'fire_resistance' or 'regeneration'.\r\n     *\r\n     */\r\n    readonly name: string;\r\n}\r",
          "jsdoc": "/**\r\n * Represents an effect that is applied as a result of a food\r\n * item being fed to an entity.\r\n */\r",
          "properties": [
            {
              "name": "amplifier",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "chance",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "duration",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "name",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "feeditemeffect",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.FluidContainer",
          "name": "FluidContainer",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents constants related to fluid containers.\r /",
          "definition": "export class FluidContainer {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Constant that represents the maximum fill level of a fluid\r\n     * container.\r\n     *\r\n     */\r\n    static readonly maxFillLevel = 6;\r\n    /**\r\n     * @remarks\r\n     * Constant that represents the minimum fill level of a fluid\r\n     * container.\r\n     *\r\n     */\r\n    static readonly minFillLevel = 0;\r\n}\r",
          "jsdoc": "/**\r\n * Represents constants related to fluid containers.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "fluidcontainer",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.GameRuleChangeAfterEvent",
          "name": "GameRuleChangeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a changed world.gameRules\r property.\r /",
          "definition": "export class GameRuleChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The rule identifier pertaining to the changed\r\n     * world.gameRules property.\r\n     *\r\n     */\r\n    readonly rule: GameRule;\r\n    /**\r\n     * @remarks\r\n     * The value of the world.gameRules property after being\r\n     * changed.\r\n     *\r\n     */\r\n    readonly value: boolean | number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a changed world.gameRules\r\n * property.\r\n */\r",
          "properties": [
            {
              "name": "rule",
              "type": "GameRule",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "value",
              "type": "boolean | number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "gamerulechangeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.GameRuleChangeAfterEventSignal",
          "name": "GameRuleChangeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a\r world.gameRules property has changed.\r /",
          "definition": "export class GameRuleChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a world.gameRules\r\n     * property is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: GameRuleChangeAfterEvent) => void): (arg0: GameRuleChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a world.gameRules\r\n     * property is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: GameRuleChangeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a\r\n * world.gameRules property has changed.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "gamerulechangeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.GameRules",
          "name": "GameRules",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents the game rules for a world experience.\r /",
          "definition": "export class GameRules {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandBlockOutput: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandBlocksEnabled: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doDayLightCycle: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doEntityDrops: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doFireTick: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doImmediateRespawn: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doInsomnia: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doLimitedCrafting: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doMobLoot: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doMobSpawning: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doTileDrops: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doWeatherCycle: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    drowningDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fallDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fireDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    freezeDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    functionCommandLimit: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    keepInventory: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    maxCommandChainLength: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    mobGriefing: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    naturalRegeneration: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    playersSleepingPercentage: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    projectilesCanBreakBlocks: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    pvp: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    randomTickSpeed: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    recipesUnlock: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    respawnBlocksExplode: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    sendCommandFeedback: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showBorderEffect: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showCoordinates: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showDaysPlayed: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showDeathMessages: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showRecipeMessages: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showTags: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    spawnRadius: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    tntExplodes: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    tntExplosionDropDecay: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Represents the game rules for a world experience.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "gamerules",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InputInfo",
          "name": "InputInfo",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains the input information for a client instance.\r /",
          "definition": "export class InputInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The last input mode used by the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly lastInputModeUsed: InputMode;\r\n    /**\r\n     * @remarks\r\n     * Whether the player touch input only affects the touchbar or\r\n     * not.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly touchOnlyAffectsHotbar: boolean;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getButtonState(button: InputButton): ButtonState;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getMovementVector(): Vector2;\r\n}\r",
          "jsdoc": "/**\r\n * Contains the input information for a client instance.\r\n */\r",
          "properties": [
            {
              "name": "lastInputModeUsed",
              "type": "InputMode",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "touchOnlyAffectsHotbar",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getButtonState",
              "parameters": [],
              "returnType": "ButtonState",
              "accessibility": "public",
              "signature": "getButtonState(button: InputButton): ButtonState"
            },
            {
              "name": "getMovementVector",
              "parameters": [],
              "returnType": "Vector2",
              "accessibility": "public",
              "signature": "getMovementVector(): Vector2"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "inputinfo",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCompleteUseAfterEvent",
          "name": "ItemCompleteUseAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a chargeable item completing\r being charged.\r /",
          "definition": "export class ItemCompleteUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that has completed charging.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged.\r\n */\r",
          "properties": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "useDuration",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcompleteuseafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCompleteUseAfterEventSignal",
          "name": "ItemCompleteUseAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to the completion of\r charging for a chargeable item.\r /",
          "definition": "export class ItemCompleteUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * completes charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemCompleteUseAfterEvent) => void): (arg0: ItemCompleteUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * completes charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemCompleteUseAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to the completion of\r\n * charging for a chargeable item.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcompleteuseaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCompleteUseEvent",
          "name": "ItemCompleteUseEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a chargeable item completing\r being charged.\r /",
          "definition": "export class ItemCompleteUseEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that has completed charging.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged.\r\n */\r",
          "properties": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcompleteuseevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponent",
          "name": "ItemComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Base class for item components.\r /",
          "definition": "export class ItemComponent extends Component {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Base class for item components.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Component",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentBeforeDurabilityDamageEvent",
          "name": "ItemComponentBeforeDurabilityDamageEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an item before it is damaged\r from hitting an entity.\r /",
          "definition": "export class ItemComponentBeforeDurabilityDamageEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The attacking entity.\r\n     *\r\n     */\r\n    readonly attackingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The damage applied to the item's durability when the event\r\n     * occurs.\r\n     *\r\n     */\r\n    durabilityDamage: number;\r\n    /**\r\n     * @remarks\r\n     * The entity being hit.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to hit the entity.\r\n     *\r\n     */\r\n    itemStack?: ItemStack;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an item before it is damaged\r\n * from hitting an entity.\r\n */\r",
          "properties": [
            {
              "name": "attackingEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hitEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponentbeforedurabilitydamageevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentCompleteUseEvent",
          "name": "ItemComponentCompleteUseEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a chargeable item completing\r being charged via a component.\r /",
          "definition": "export class ItemComponentCompleteUseEvent extends ItemCompleteUseEvent {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged via a component.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "ItemCompleteUseEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponentcompleteuseevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentConsumeEvent",
          "name": "ItemComponentConsumeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a food item being consumed.\r /",
          "definition": "export class ItemComponentConsumeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack that was consumed.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The source entity that consumed the item.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a food item being consumed.\r\n */\r",
          "properties": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponentconsumeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentHitEntityEvent",
          "name": "ItemComponentHitEntityEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding when an item is used to hit\r an entity.\r /",
          "definition": "export class ItemComponentHitEntityEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The attacking entity.\r\n     *\r\n     */\r\n    readonly attackingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Whether the hit landed or had any effect.\r\n     *\r\n     */\r\n    readonly hadEffect: boolean;\r\n    /**\r\n     * @remarks\r\n     * The entity being hit.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to hit the entity.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding when an item is used to hit\r\n * an entity.\r\n */\r",
          "properties": [
            {
              "name": "attackingEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hadEffect",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hitEntity",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponenthitentityevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentMineBlockEvent",
          "name": "ItemComponentMineBlockEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding the mining of a block using\r an item.\r /",
          "definition": "export class ItemComponentMineBlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block impacted by this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to mine the block.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that was mined.\r\n     *\r\n     */\r\n    readonly minedBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The entity that mined the block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding the mining of a block using\r\n * an item.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minedBlockPermutation",
              "type": "BlockPermutation",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponentmineblockevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentRegistry",
          "name": "ItemComponentRegistry",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Provides the functionality for registering custom components\r for items.\r /",
          "definition": "export class ItemComponentRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers an item custom component that can be used in item\r\n     * JSON configuration.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param name\r\n     * The id that represents this custom component. Must have a\r\n     * namespace. This id can be specified in a item's JSON\r\n     * configuration under the 'minecraft:custom_components' item\r\n     * component.\r\n     * @param itemCustomComponent\r\n     * The collection of event functions that will be called when\r\n     * the event occurs on an item using this custom component id.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomComponentInvalidRegistryError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link ItemCustomComponentAlreadyRegisteredError}\r\n     *\r\n     * {@link ItemCustomComponentReloadNewComponentError}\r\n     *\r\n     * {@link ItemCustomComponentReloadNewEventError}\r\n     *\r\n     * {@link ItemCustomComponentReloadVersionError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCustomComponent(name: string, itemCustomComponent: ItemCustomComponent): void;\r\n}\r",
          "jsdoc": "/**\r\n * Provides the functionality for registering custom components\r\n * for items.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "registerCustomComponent",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "registerCustomComponent(name: string, itemCustomComponent: ItemCustomComponent): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponentregistry",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentUseEvent",
          "name": "ItemComponentUseEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding the use of an item.\r /",
          "definition": "export class ItemComponentUseEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack when the item was used.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The player who used the item.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding the use of an item.\r\n */\r",
          "properties": [
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponentuseevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemComponentUseOnEvent",
          "name": "ItemComponentUseOnEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding the use of an item on a block\r via a component.\r /",
          "definition": "export class ItemComponentUseOnEvent extends ItemUseOnEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that used the item on the block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that the item was used on.\r\n     *\r\n     */\r\n    readonly usedOnBlockPermutation: BlockPermutation;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding the use of an item on a block\r\n * via a component.\r\n */\r",
          "properties": [
            {
              "name": "source",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "usedOnBlockPermutation",
              "type": "BlockPermutation",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "ItemUseOnEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcomponentuseonevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCompostableComponent",
          "name": "ItemCompostableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When present, the item can be composted in the composter\r block if the composting chance is in the range [1 - 100].\r /",
          "definition": "export class ItemCompostableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This is the percent chance of the item composting in the\r\n     * composter block and generating a compost layer. Note this\r\n     * api will also return the composting chance for vanilla items\r\n     * that are compostable but do not use the compostable item\r\n     * component.\r\n     *\r\n     * @throws\r\n     * Throws if value outside the range [1 - 100]\r\n     */\r\n    readonly compostingChance: number;\r\n    static readonly componentId = 'minecraft:compostable';\r\n}\r",
          "jsdoc": "/**\r\n * When present, the item can be composted in the composter\r\n * block if the composting chance is in the range [1 - 100].\r\n */\r",
          "properties": [
            {
              "name": "compostingChance",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "compostable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "ItemComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcompostablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCooldownComponent",
          "name": "ItemCooldownComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When present on an item, this item has a cooldown effect\r when used by entities.\r /",
          "definition": "export class ItemCooldownComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Represents the cooldown category that this item is\r\n     * associated with.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly cooldownCategory: string;\r\n    /**\r\n     * @remarks\r\n     * Amount of time, in ticks, it will take this item to\r\n     * cooldown.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly cooldownTicks: number;\r\n    static readonly componentId = 'minecraft:cooldown';\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getCooldownTicksRemaining(player: Player): number;\r\n    /**\r\n     * @remarks\r\n     * Will return true if the item is the cooldown category passed\r\n     * in and false otherwise.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cooldownCategory\r\n     * The cooldown category that might be associated with this\r\n     * item.\r\n     * @returns\r\n     * True if the item is the given cooldown category.\r\n     * @throws This function can throw errors.\r\n     */\r\n    isCooldownCategory(cooldownCategory: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Starts a new cooldown period for this item.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    startCooldown(player: Player): void;\r\n}\r",
          "jsdoc": "/**\r\n * When present on an item, this item has a cooldown effect\r\n * when used by entities.\r\n */\r",
          "properties": [
            {
              "name": "cooldownCategory",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "cooldownTicks",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "cooldown'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getCooldownTicksRemaining",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getCooldownTicksRemaining(player: Player): number"
            },
            {
              "name": "isCooldownCategory",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isCooldownCategory(cooldownCategory: string): boolean"
            },
            {
              "name": "startCooldown",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "startCooldown(player: Player): void"
            }
          ],
          "extends": "ItemComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcooldowncomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCustomComponentInstance",
          "name": "ItemCustomComponentInstance",
          "type": "class",
          "module": "@minecraft/server",
          "description": "An instance of a custom component on an item.\r /",
          "definition": "export class ItemCustomComponentInstance extends ItemComponent {\n    private constructor();\r\n    readonly customComponentParameters: CustomComponentParameters;\r\n}\r",
          "jsdoc": "/**\r\n * An instance of a custom component on an item.\r\n */\r",
          "properties": [
            {
              "name": "customComponentParameters",
              "type": "CustomComponentParameters",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "ItemComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcustomcomponentinstance",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemDurabilityComponent",
          "name": "ItemDurabilityComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When present on an item, this item can take damage in the\r process of being used. Note that this component only applies\r to data-driven items.\r ```typescript\r  function giveHurtDiamondSword(\r     targetLocation: DimensionLocation\r ) {\r   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r    const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r    if (durabilityComponent !== undefined) {\r     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r   }\r    for (const player of world.getAllPlayers()) {\r     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r     if (inventory && inventory.container) {\r       inventory.container.addItem(hurtDiamondSword);\r     }\r   }\r }\r ```\r /",
          "definition": "export class ItemDurabilityComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the current damage level of this particular item.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    damage: number;\r\n    /**\r\n     * @remarks\r\n     * Represents the amount of damage that this item can take\r\n     * before breaking.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxDurability: number;\r\n    static readonly componentId = 'minecraft:durability';\r\n    /**\r\n     * @remarks\r\n     * Returns the maximum chance that this item would be damaged\r\n     * using the damageRange property, given an unbreaking\r\n     * enchantment level.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param unbreakingEnchantmentLevel\r\n     * Unbreaking factor to consider in factoring the damage\r\n     * chance. Incoming unbreaking parameter must be within the\r\n     * range [0, 3].\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDamageChance(unbreakingEnchantmentLevel?: number): number;\r\n    /**\r\n     * @remarks\r\n     * A range of numbers that is used to calculate the damage\r\n     * chance for an item. The damage chance will fall within this\r\n     * range.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDamageChanceRange(): minecraftcommon.NumberRange;\r\n}\r",
          "jsdoc": "/**\r\n * When present on an item, this item can take damage in the\r\n * process of being used. Note that this component only applies\r\n * to data-driven items.\r\n * @example giveHurtDiamondSword.ts\r\n * ```typescript\r\n * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function giveHurtDiamondSword(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n *\r\n *   const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n *\r\n *   if (durabilityComponent !== undefined) {\r\n *     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n *   }\r\n *\r\n *   for (const player of world.getAllPlayers()) {\r\n *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n *     if (inventory && inventory.container) {\r\n *       inventory.container.addItem(hurtDiamondSword);\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "maxDurability",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "durability'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getDamageChance",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getDamageChance(unbreakingEnchantmentLevel?: number): number"
            },
            {
              "name": "getDamageChanceRange",
              "parameters": [],
              "returnType": "minecraftcommon.NumberRange",
              "accessibility": "public",
              "signature": "getDamageChanceRange(): minecraftcommon.NumberRange"
            }
          ],
          "extends": "ItemComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemdurabilitycomponent",
            "class"
          ],
          "examples": [
            {
              "title": "giveHurtDiamondSword.ts",
              "code": "import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction giveHurtDiamondSword(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n\n  const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n\n  if (durabilityComponent !== undefined) {\r\n    durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n  }\r\n\n  for (const player of world.getAllPlayers()) {\r\n    const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n    if (inventory && inventory.container) {\r\n      inventory.container.addItem(hurtDiamondSword);\r\n    }\r\n  }\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemDyeableComponent",
          "name": "ItemDyeableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When present on an item, this item can be dyed.\r /",
          "definition": "export class ItemDyeableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Sets and returns the current color of the item.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    color?: RGB;\r\n    /**\r\n     * @remarks\r\n     * Returns the default color of the item.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly defaultColor?: RGB;\r\n    static readonly componentId = 'minecraft:dyeable';\r\n}\r",
          "jsdoc": "/**\r\n * When present on an item, this item can be dyed.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "dyeable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "ItemComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemdyeablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemEnchantableComponent",
          "name": "ItemEnchantableComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When present on an item, this item can have enchantments\r applied to it.\r /",
          "definition": "export class ItemEnchantableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly slots: EnchantmentSlot[];\r\n    static readonly componentId = 'minecraft:enchantable';\r\n    /**\r\n     * @remarks\r\n     * Adds an enchantment to the item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantment\r\n     * The enchantment interface to be added.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if the enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     * ScriptItemEnchantmentTypeNotCompatibleError: Exception\r\n     * thrown if the enchantment is not compatible with the item\r\n     * stack.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeNotCompatibleError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addEnchantment(enchantment: Enchantment): void;\r\n    /**\r\n     * @remarks\r\n     * Adds a list of enchantments to the item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantments\r\n     * The list of enchantments to be added.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if any\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if any enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     * ScriptItemEnchantmentTypeNotCompatibleError: Exception\r\n     * thrown if any enchantment is not compatible with the item\r\n     * stack.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeNotCompatibleError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addEnchantments(enchantments: Enchantment[]): void;\r\n    /**\r\n     * @remarks\r\n     * Checks whether an enchantment can be added to the item\r\n     * stack.\r\n     *\r\n     * @param enchantment\r\n     * The enchantment interface to be added.\r\n     * @returns\r\n     * Returns true if the enchantment can be added to the item\r\n     * stack.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if the enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    canAddEnchantment(enchantment: Enchantment): boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets the enchantment of a given type from the item stack.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to get.\r\n     * @returns\r\n     * Returns the enchantment if it exists on the item stack.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    getEnchantment(enchantmentType: EnchantmentType | string): Enchantment | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all enchantments on the item stack.\r\n     *\r\n     * @returns\r\n     * Returns a list of enchantments on the item stack.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEnchantments(): Enchantment[];\r\n    /**\r\n     * @remarks\r\n     * Checks whether an item stack has a given enchantment type.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to check for.\r\n     * @returns\r\n     * Returns true if the item stack has the enchantment type.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    hasEnchantment(enchantmentType: EnchantmentType | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes all enchantments applied to this item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeAllEnchantments(): void;\r\n    /**\r\n     * @remarks\r\n     * Removes an enchantment of the given type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to remove.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    removeEnchantment(enchantmentType: EnchantmentType | string): void;\r\n}\r",
          "jsdoc": "/**\r\n * When present on an item, this item can have enchantments\r\n * applied to it.\r\n */\r",
          "properties": [
            {
              "name": "slots",
              "type": "EnchantmentSlot[]",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "enchantable'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "addEnchantment",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "addEnchantment(enchantment: Enchantment): void"
            },
            {
              "name": "addEnchantments",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "addEnchantments(enchantments: Enchantment[]): void"
            },
            {
              "name": "canAddEnchantment",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "canAddEnchantment(enchantment: Enchantment): boolean"
            },
            {
              "name": "getEnchantment",
              "parameters": [],
              "returnType": "Enchantment | undefined",
              "accessibility": "public",
              "signature": "getEnchantment(enchantmentType: EnchantmentType | string): Enchantment | undefined"
            },
            {
              "name": "getEnchantments",
              "parameters": [],
              "returnType": "Enchantment[]",
              "accessibility": "public",
              "signature": "getEnchantments(): Enchantment[]"
            },
            {
              "name": "hasEnchantment",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasEnchantment(enchantmentType: EnchantmentType | string): boolean"
            },
            {
              "name": "removeAllEnchantments",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "removeAllEnchantments(): void"
            },
            {
              "name": "removeEnchantment",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "removeEnchantment(enchantmentType: EnchantmentType | string): void"
            }
          ],
          "extends": "ItemComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemenchantablecomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemFoodComponent",
          "name": "ItemFoodComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "When present on an item, this item is consumable by\r entities. Note that this component only applies to\r data-driven items.\r /",
          "definition": "export class ItemFoodComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, the player can always eat this item (even when not\r\n     * hungry).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canAlwaysEat: boolean;\r\n    /**\r\n     * @remarks\r\n     * Represents how much nutrition this food item will give an\r\n     * entity when eaten.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly nutrition: number;\r\n    /**\r\n     * @remarks\r\n     * When an item is eaten, this value is used according to this\r\n     * formula (nutrition * saturation_modifier * 2) to apply a\r\n     * saturation buff.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly saturationModifier: number;\r\n    /**\r\n     * @remarks\r\n     * When specified, converts the active item to the one\r\n     * specified by this property.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly usingConvertsTo: string;\r\n    static readonly componentId = 'minecraft:food';\r\n}\r",
          "jsdoc": "/**\r\n * When present on an item, this item is consumable by\r\n * entities. Note that this component only applies to\r\n * data-driven items.\r\n */\r",
          "properties": [
            {
              "name": "canAlwaysEat",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "nutrition",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "saturationModifier",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "usingConvertsTo",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minecraft",
              "type": "food'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "ItemComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemfoodcomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemReleaseUseAfterEvent",
          "name": "ItemReleaseUseAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a chargeable item when the\r player has finished using the item and released the build\r action.\r /",
          "definition": "export class ItemReleaseUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that triggered this item event.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a chargeable item when the\r\n * player has finished using the item and released the build\r\n * action.\r\n */\r",
          "properties": [
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "useDuration",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemreleaseuseafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemReleaseUseAfterEventSignal",
          "name": "ItemReleaseUseAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to the releasing of\r charging for a chargeable item.\r /",
          "definition": "export class ItemReleaseUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * is released from charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemReleaseUseAfterEvent) => void): (arg0: ItemReleaseUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * is released from charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemReleaseUseAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to the releasing of\r\n * charging for a chargeable item.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemreleaseuseaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStack",
          "name": "ItemStack",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Defines a collection of items.\r ```typescript\r  function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r    const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r    log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r    log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r    log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r }\r ```\r ```typescript\r  function givePlayerEquipment(\r     targetLocation: DimensionLocation\r ) {\r   const players = world.getAllPlayers();\r    const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r   const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r    const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r   if (equipmentCompPlayer) {\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r   }\r    const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r   if (equipmentCompArmorStand) {\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r   }\r }\r ```\r ```typescript\r  function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r    targetLocation.dimension.spawnItem(featherItem, targetLocation);\r   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r }\r ```\r /",
          "definition": "export class ItemStack {\n    /**\r\n     * @remarks\r\n     * Number of the items in the stack. Valid values range between\r\n     * 1-255. The provided value will be clamped to the item's\r\n     * maximum stack size.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the value is outside the range of 1-255.\r\n     */\r\n    amount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item is stackable. An item is considered\r\n     * stackable if the item's maximum stack size is greater than 1\r\n     * and the item does not contain any custom data or properties.\r\n     *\r\n     */\r\n    readonly isStackable: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets whether the item is kept on death.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    keepOnDeath: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this items's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets the item's lock mode. The default value is\r\n     * `ItemLockMode.none`.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    lockMode: ItemLockMode;\r\n    /**\r\n     * @remarks\r\n     * The maximum stack size. This value varies depending on the\r\n     * type of item. For example, torches have a maximum stack size\r\n     * of 64, while eggs have a maximum stack size of 16.\r\n     *\r\n     */\r\n    readonly maxAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Given name of this stack of items. The name tag is displayed\r\n     * when hovering over the item. Setting the name tag to an\r\n     * empty string or `undefined` will remove the name tag.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the length exceeds 255 characters.\r\n     */\r\n    nameTag?: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the item.\r\n     *\r\n     */\r\n    readonly 'type': ItemType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of items for the stack. If a\r\n     * namespace is not specified, 'minecraft:' is assumed.\r\n     * Examples include 'wheat' or 'apple'.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Creates a new instance of a stack of items for use in the\r\n     * world.\r\n     *\r\n     * @param itemType\r\n     * Type of item to create. See the {@link\r\n     * @minecraft/vanilla-data.MinecraftItemTypes} enumeration for\r\n     * a list of standard item types in Minecraft experiences.\r\n     * @param amount\r\n     * Number of items to place in the stack, between 1-255. The\r\n     * provided value will be clamped to the item's maximum stack\r\n     * size. Note that certain items can only have one item in the\r\n     * stack.\r\n     * Defaults to: 1\r\n     * @throws\r\n     * Throws if `itemType` is invalid, or if `amount` is outside\r\n     * the range of 1-255.\r\n     */\r\n    constructor(itemType: ItemType | string, amount?: number);\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * item stack.\r\n     *\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Creates an exact copy of the item stack, including any\r\n     * custom data or properties.\r\n     *\r\n     * @returns\r\n     * Returns a copy of this item stack.\r\n     */\r\n    clone(): ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Get the list of block types this item can break in Adventure\r\n     * mode.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getCanDestroy(): string[];\r\n    /**\r\n     * @remarks\r\n     * Get the list of block types this item can be placed on in\r\n     * Adventure mode.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getCanPlaceOn(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for an item stack.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:food'). If\r\n     * no namespace prefix is specified, 'minecraft:' is assumed.\r\n     * Available component IDs are those in the {@link\r\n     * ItemComponentTypes} enum and custom component IDs registered\r\n     * with the {@link ItemComponentRegistry}.\r\n     * @returns\r\n     * Returns the component if it exists on the item stack,\r\n     * otherwise undefined.\r\n     * @example giveHurtDiamondSword.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function giveHurtDiamondSword(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n     *\r\n     *   const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n     *\r\n     *   if (durabilityComponent !== undefined) {\r\n     *     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n     *   }\r\n     *\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     if (inventory && inventory.container) {\r\n     *       inventory.container.addItem(hurtDiamondSword);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getComponent<T extends string>(componentId: T): ItemComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all components that are both present on this item\r\n     * stack and supported by the API.\r\n     *\r\n     */\r\n    getComponents(): ItemComponent[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this entity.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * @returns\r\n     * An array of lore lines. If the item does not have lore,\r\n     * returns an empty array.\r\n     */\r\n    getLore(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of tags associated with this item stack.\r\n     *\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if the specified component is present on this\r\n     * item stack.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:food') to\r\n     * retrieve. If no namespace prefix is specified, 'minecraft:'\r\n     * is assumed.\r\n     */\r\n    hasComponent(componentId: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Checks whether this item stack has a particular tag\r\n     * associated with it.\r\n     *\r\n     * @param tag\r\n     * Tag to search for.\r\n     * @returns\r\n     * True if the Item Stack has the tag associated with it, else\r\n     * false.\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`. This is determined by comparing the item\r\n     * type and any custom data and properties associated with the\r\n     * item stacks. The amount of each item stack is not taken into\r\n     * consideration, but for non-stackable items this will always\r\n     * return false.\r\n     *\r\n     * @param itemStack\r\n     * ItemStack to check stacking compatibility with.\r\n     * @returns\r\n     * True if the Item Stack is stackable with the itemStack\r\n     * passed in. False for non-stackable items.\r\n     */\r\n    isStackableWith(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * Version safe way of checking if an item matches.\r\n     *\r\n     * @param itemName\r\n     * Identifier of the item.\r\n     * @param states\r\n     *  Applicable only for blocks. An optional set of states to\r\n     * compare against. If states is not specified, matches checks\r\n     * against the set of types more broadly.\r\n     * @returns\r\n     * Returns a boolean whether the specified item matches.\r\n     */\r\n    matches(itemName: string, states?: Record<string, boolean | number | string>): boolean;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can break in Adventure\r\n     * mode. The block names are displayed in the item's tooltip.\r\n     * Setting the value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * String list of block types that the item can destroy.\r\n     * @throws\r\n     * Throws if any of the provided block identifiers are invalid.\r\n     * @example giveDestroyRestrictedPickaxe.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function giveDestroyRestrictedPickaxe(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const specialPickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe);\r\n     *     specialPickaxe.setCanDestroy([MinecraftItemTypes.Cobblestone, MinecraftItemTypes.Obsidian]);\r\n     *\r\n     *     const inventory = player.getComponent(\"inventory\") as EntityInventoryComponent;\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *       return;\r\n     *     }\r\n     *\r\n     *     inventory.container.addItem(specialPickaxe);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    setCanDestroy(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can be placed on in\r\n     * Adventure mode. This is only applicable to block items. The\r\n     * block names are displayed in the item's tooltip. Setting the\r\n     * value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * String list of block types that the item can be placed on.\r\n     * @throws\r\n     * Throws if any of the provided block identifiers are invalid.\r\n     * @example givePlaceRestrictedGoldBlock.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function givePlaceRestrictedGoldBlock(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const specialGoldBlock = new ItemStack(MinecraftItemTypes.GoldBlock);\r\n     *     specialGoldBlock.setCanPlaceOn([MinecraftItemTypes.GrassBlock, MinecraftItemTypes.Dirt]);\r\n     *\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *       return;\r\n     *     }\r\n     *\r\n     *     inventory.container.addItem(specialGoldBlock);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    setCanPlaceOn(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value. Note: This function\r\n     * only works with non-stackable items.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the item stack is stackable.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the lore value - a secondary display string - for an\r\n     * ItemStack. The lore list is cleared if set to an empty\r\n     * string or undefined.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param loreList\r\n     * List of lore lines. Each element in the list represents a\r\n     * new line. The maximum lore line count is 20. The maximum\r\n     * lore line length is 50 characters.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     * @example diamondAwesomeSword.ts\r\n     * ```typescript\r\n     * import { EntityComponentTypes, ItemStack, Player } from '@minecraft/server';\r\n     * import { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n     *\r\n     * function giveAwesomeSword(player: Player) {\r\n     *     const diamondAwesomeSword = new ItemStack(MinecraftItemTypes.DiamondSword, 1);\r\n     *     diamondAwesomeSword.setLore([\r\n     *         '§c§lDiamond Sword of Awesome§r',\r\n     *          '+10 coolness', '§p+4 shiny§r'\r\n     *     ]);\r\n     *\r\n     *     // hover over/select the item in your inventory to see the lore.\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory);\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *         return;\r\n     *     }\r\n     *\r\n     *     inventory.container.setItem(0, diamondAwesomeSword);\r\n     * }\r\n     * ```\r\n     */\r\n    setLore(loreList?: string[]): void;\r\n}\r",
          "jsdoc": "/**\r\n * Defines a collection of items.\r\n * @example itemStacks.ts\r\n * ```typescript\r\n * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n *   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n *   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n *\r\n *   const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n *   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n *   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n *\r\n *   log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n *\r\n *   log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n *\r\n *   log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n * }\r\n * ```\r\n * @example givePlayerEquipment.ts\r\n * ```typescript\r\n * import { world, ItemStack, EntityEquippableComponent, EquipmentSlot, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function givePlayerEquipment(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getAllPlayers();\r\n *\r\n *   const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r\n *   const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r\n *\r\n *   const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n *   if (equipmentCompPlayer) {\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n *   }\r\n *\r\n *   const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n *   if (equipmentCompArmorStand) {\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n *   }\r\n * }\r\n * ```\r\n * @example spawnFeatherItem.ts\r\n * ```typescript\r\n * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n *\r\n *   targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n *   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "isStackable",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "localizationKey",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "maxAmount",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "typeId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "clearDynamicProperties",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearDynamicProperties(): void"
            },
            {
              "name": "clone",
              "parameters": [],
              "returnType": "ItemStack",
              "accessibility": "public",
              "signature": "clone(): ItemStack"
            },
            {
              "name": "getCanDestroy",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getCanDestroy(): string[]"
            },
            {
              "name": "getCanPlaceOn",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getCanPlaceOn(): string[]"
            },
            {
              "name": "getComponents",
              "parameters": [],
              "returnType": "ItemComponent[]",
              "accessibility": "public",
              "signature": "getComponents(): ItemComponent[]"
            },
            {
              "name": "getDynamicProperty",
              "parameters": [],
              "returnType": "boolean | number | string | Vector3 | undefined",
              "accessibility": "public",
              "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
            },
            {
              "name": "getDynamicPropertyIds",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getDynamicPropertyIds(): string[]"
            },
            {
              "name": "getDynamicPropertyTotalByteCount",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getDynamicPropertyTotalByteCount(): number"
            },
            {
              "name": "getLore",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getLore(): string[]"
            },
            {
              "name": "getTags",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getTags(): string[]"
            },
            {
              "name": "hasComponent",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasComponent(componentId: string): boolean"
            },
            {
              "name": "hasTag",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasTag(tag: string): boolean"
            },
            {
              "name": "isStackableWith",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isStackableWith(itemStack: ItemStack): boolean"
            },
            {
              "name": "matches",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "matches(itemName: string, states?: Record<string, boolean | number | string>): boolean"
            },
            {
              "name": "setCanDestroy",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setCanDestroy(blockIdentifiers?: string[]): void"
            },
            {
              "name": "setCanPlaceOn",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setCanPlaceOn(blockIdentifiers?: string[]): void"
            },
            {
              "name": "setDynamicProperty",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
            },
            {
              "name": "setLore",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setLore(loreList?: string[]): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstack",
            "class"
          ],
          "examples": [
            {
              "title": "itemStacks.ts",
              "code": "import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n  const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n  const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n\n  const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n  const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n  const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n\n  log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n  targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n\n  log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n  targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n\n  log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n  targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n}"
            },
            {
              "title": "givePlayerEquipment.ts",
              "code": "import { world, ItemStack, EntityEquippableComponent, EquipmentSlot, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction givePlayerEquipment(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getAllPlayers();\r\n\n  const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r\n  const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r\n\n  const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n  if (equipmentCompPlayer) {\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n  }\r\n\n  const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n  if (equipmentCompArmorStand) {\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n  }\r\n}"
            },
            {
              "title": "spawnFeatherItem.ts",
              "code": "import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n\n  targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n  log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStartUseAfterEvent",
          "name": "ItemStartUseAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a chargeable item starting\r to be charged.\r /",
          "definition": "export class ItemStartUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is starting to be charged.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a chargeable item starting\r\n * to be charged.\r\n */\r",
          "properties": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "useDuration",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstartuseafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStartUseAfterEventSignal",
          "name": "ItemStartUseAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to the start of\r charging for a chargeable item.\r /",
          "definition": "export class ItemStartUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * starts charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStartUseAfterEvent) => void): (arg0: ItemStartUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * starts charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStartUseAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to the start of\r\n * charging for a chargeable item.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstartuseaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStartUseOnAfterEvent",
          "name": "ItemStartUseOnAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to an item being used on a\r block. This event fires when a player presses the the Use\r Item / Place Block button to successfully use an item or\r place a block. Fires for the first block that is interacted\r with when performing a build action. Note: This event cannot\r be used with Hoe or Axe items.\r /",
          "definition": "export class ItemStartUseOnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that the item is used on.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that an item is being used on.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is starting to be used. Can be\r\n     * undefined in some gameplay scenarios like pushing a button\r\n     * with an empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to an item being used on a\r\n * block. This event fires when a player presses the the Use\r\n * Item / Place Block button to successfully use an item or\r\n * place a block. Fires for the first block that is interacted\r\n * with when performing a build action. Note: This event cannot\r\n * be used with Hoe or Axe items.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "blockFace",
              "type": "Direction",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstartuseonafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStartUseOnAfterEventSignal",
          "name": "ItemStartUseOnAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to an item starting\r being used on a block event.\r /",
          "definition": "export class ItemStartUseOnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStartUseOnAfterEvent) => void): (arg0: ItemStartUseOnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStartUseOnAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to an item starting\r\n * being used on a block event.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstartuseonaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStopUseAfterEvent",
          "name": "ItemStopUseAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a chargeable item has\r finished an items use cycle, or when the player has released\r the use action with the item.\r /",
          "definition": "export class ItemStopUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is stopping being charged.\r\n     * ItemStopUseAfterEvent can be called when teleporting to a\r\n     * different dimension and this can be undefined.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a chargeable item has\r\n * finished an items use cycle, or when the player has released\r\n * the use action with the item.\r\n */\r",
          "properties": [
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "useDuration",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstopuseafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStopUseAfterEventSignal",
          "name": "ItemStopUseAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to the stopping of\r charging for an item that has a registered\r minecraft:chargeable component.\r /",
          "definition": "export class ItemStopUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * stops charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStopUseAfterEvent) => void): (arg0: ItemStopUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * stops charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStopUseAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to the stopping of\r\n * charging for an item that has a registered\r\n * minecraft:chargeable component.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstopuseaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStopUseOnAfterEvent",
          "name": "ItemStopUseOnAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to an item that has stopped\r being used on a block. This event fires when a player\r successfully uses an item or places a block by pressing the\r Use Item / Place Block button. If multiple blocks are\r placed, this event will only occur once at the beginning of\r the block placement. Note: This event cannot be used with\r Hoe or Axe items.\r /",
          "definition": "export class ItemStopUseOnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that the item is used on.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is being used on a block.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to an item that has stopped\r\n * being used on a block. This event fires when a player\r\n * successfully uses an item or places a block by pressing the\r\n * Use Item / Place Block button. If multiple blocks are\r\n * placed, this event will only occur once at the beginning of\r\n * the block placement. Note: This event cannot be used with\r\n * Hoe or Axe items.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstopuseonafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemStopUseOnAfterEventSignal",
          "name": "ItemStopUseOnAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to an item stops used\r on a block event.\r /",
          "definition": "export class ItemStopUseOnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item stops being\r\n     * used on a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStopUseOnAfterEvent) => void): (arg0: ItemStopUseOnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStopUseOnAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to an item stops used\r\n * on a block event.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemstopuseonaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemType",
          "name": "ItemType",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents the type of an item - for example, Wool.\r /",
          "definition": "export class ItemType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the identifier of the item type - for example,\r\n     * 'minecraft:apple'.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
          "jsdoc": "/**\r\n * Represents the type of an item - for example, Wool.\r\n */\r",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemtype",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemTypes",
          "name": "ItemTypes",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Returns the set of item types registered within Minecraft.\r /",
          "definition": "export class ItemTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a specific item type, if available within Minecraft.\r\n     *\r\n     */\r\n    static get(itemId: string): ItemType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves all available item types registered within\r\n     * Minecraft.\r\n     *\r\n     */\r\n    static getAll(): ItemType[];\r\n}\r",
          "jsdoc": "/**\r\n * Returns the set of item types registered within Minecraft.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "ItemType | undefined",
              "accessibility": "public",
              "signature": "get(itemId: string): ItemType | undefined"
            },
            {
              "name": "getAll",
              "parameters": [],
              "returnType": "ItemType[]",
              "accessibility": "public",
              "signature": "getAll(): ItemType[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemtypes",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemUseAfterEvent",
          "name": "ItemUseAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to an item being used on a\r block. This event fires when an item used by a player\r successfully triggers an entity interaction.\r /",
          "definition": "export class ItemUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is being used.\r\n     *\r\n     */\r\n    itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to an item being used on a\r\n * block. This event fires when an item used by a player\r\n * successfully triggers an entity interaction.\r\n */\r",
          "properties": [
            {
              "name": "source",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemuseafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemUseAfterEventSignal",
          "name": "ItemUseAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to an item use event.\r /",
          "definition": "export class ItemUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemUseAfterEvent) => void): (arg0: ItemUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemUseAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to an item use event.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemuseaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemUseBeforeEvent",
          "name": "ItemUseBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to an item being used.\r /",
          "definition": "export class ItemUseBeforeEvent extends ItemUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, this will cancel the item use behavior.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to an item being used.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "ItemUseAfterEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemusebeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemUseBeforeEventSignal",
          "name": "ItemUseBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that fire before an item is used.\r /",
          "definition": "export class ItemUseBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemUseBeforeEvent) => void): (arg0: ItemUseBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemUseBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that fire before an item is used.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemusebeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemUseOnEvent",
          "name": "ItemUseOnEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding the use of an item on a\r block.\r /",
          "definition": "export class ItemUseOnEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block impacted by this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that the item was used on.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block that the item was used on.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The item stack used on the block.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding the use of an item on a\r\n * block.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "blockFace",
              "type": "Direction",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "faceLocation",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemStack",
              "type": "ItemStack",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemuseonevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.LeverActionAfterEvent",
          "name": "LeverActionAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to a lever\r activating or deactivating.\r ```typescript\r  function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a lever\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const lever = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || lever === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   lever.setPermutation(\r     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r   );\r    world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r     const eventLoc = leverActionEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Lever activate event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
          "definition": "export class LeverActionAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * True if the lever is activated (that is, transmitting\r\n     * power).\r\n     *\r\n     */\r\n    readonly isPowered: boolean;\r\n    /**\r\n     * @remarks\r\n     * Optional player that triggered the lever activation.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to a lever\r\n * activating or deactivating.\r\n * @example leverActionEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a lever\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const lever = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || lever === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   lever.setPermutation(\r\n *     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n *   );\r\n *\r\n *   world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n *     const eventLoc = leverActionEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Lever activate event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "isPowered",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "leveractionafterevent",
            "class"
          ],
          "examples": [
            {
              "title": "leverActionEvent.ts",
              "code": "import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a lever\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const lever = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || lever === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  lever.setPermutation(\r\n    BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n  );\r\n\n  world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n    const eventLoc = leverActionEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Lever activate event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.LeverActionAfterEventSignal",
          "name": "LeverActionAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to lever moves\r (activates or deactivates).\r ```typescript\r  function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a lever\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const lever = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || lever === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   lever.setPermutation(\r     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r   );\r    world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r     const eventLoc = leverActionEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Lever activate event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
          "definition": "export class LeverActionAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a lever is moved\r\n     * (activates or deactivates).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: LeverActionAfterEvent) => void): (arg0: LeverActionAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a lever is moved\r\n     * (activates or deactivates).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: LeverActionAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to lever moves\r\n * (activates or deactivates).\r\n * @example leverActionEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a lever\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const lever = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || lever === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   lever.setPermutation(\r\n *     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n *   );\r\n *\r\n *   world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n *     const eventLoc = leverActionEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Lever activate event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "leveractionaftereventsignal",
            "class"
          ],
          "examples": [
            {
              "title": "leverActionEvent.ts",
              "code": "import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a lever\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const lever = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || lever === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  lever.setPermutation(\r\n    BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n  );\r\n\n  world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n    const eventLoc = leverActionEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Lever activate event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ListBlockVolume",
          "name": "ListBlockVolume",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Volume composed of an unordered container of unique block\r locations.\r /",
          "definition": "export class ListBlockVolume extends BlockVolumeBase {\n    /**\r\n     * @remarks\r\n     * Creates a new instance of ListBlockVolume.\r\n     *\r\n     * @param locations\r\n     * Initial array of block locations that ListBlockVolume will\r\n     * be constructed with.\r\n     */\r\n    constructor(locations: Vector3[]);\r\n    /**\r\n     * @remarks\r\n     * Insert block locations into container.\r\n     *\r\n     * @param locations\r\n     * Array of block locations to be inserted into container.\r\n     */\r\n    add(locations: Vector3[]): void;\r\n    /**\r\n     * @remarks\r\n     * Remove block locations from container.\r\n     *\r\n     * @param locations\r\n     * Array of block locations to be removed from container.\r\n     */\r\n    remove(locations: Vector3[]): void;\r\n}\r",
          "jsdoc": "/**\r\n * Volume composed of an unordered container of unique block\r\n * locations.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "add",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "add(locations: Vector3[]): void"
            },
            {
              "name": "remove",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "remove(locations: Vector3[]): void"
            }
          ],
          "extends": "BlockVolumeBase",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "listblockvolume",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.MolangVariableMap",
          "name": "MolangVariableMap",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains a set of additional variable values for further\r defining how rendering and animations function.\r /",
          "definition": "export class MolangVariableMap {\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.r` - Red color value [0-1]\r\n     * - `<variable_name>.g` - Green color value [0-1]\r\n     * - `<variable_name>.b` - Blue color value [0-1]\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setColorRGB(variableName: string, color: RGB): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.r` - Red color value [0-1]\r\n     * - `<variable_name>.g` - Green color value [0-1]\r\n     * - `<variable_name>.b` - Blue color value [0-1]\r\n     * - `<variable_name>.a` - Alpha (transparency) color value\r\n     * [0-1]\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setColorRGBA(variableName: string, color: RGBA): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a numeric (decimal) value within the Molang variable\r\n     * map.\r\n     *\r\n     * @param variableName\r\n     * Name of the float-based number to set.\r\n     * @param number\r\n     * Value for the Molang-based variable to set.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setFloat(variableName: string, number: number): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.speed` - Speed number provided\r\n     * - `<variable_name>.direction_x` - X value from the {@link\r\n     * Vector3} provided\r\n     * - `<variable_name>.direction_y` - Y value from the {@link\r\n     * Vector3} provided\r\n     * - `<variable_name>.direction_z` - Z value from the {@link\r\n     * Vector3} provided\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setSpeedAndDirection(variableName: string, speed: number, direction: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.x` - X value from the {@link Vector3}\r\n     * provided\r\n     * - `<variable_name>.y` - Y value from the {@link Vector3}\r\n     * provided\r\n     * - `<variable_name>.z` - Z value from the {@link Vector3}\r\n     * provided\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setVector3(variableName: string, vector: Vector3): void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains a set of additional variable values for further\r\n * defining how rendering and animations function.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "setColorRGB",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setColorRGB(variableName: string, color: RGB): void"
            },
            {
              "name": "setColorRGBA",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setColorRGBA(variableName: string, color: RGBA): void"
            },
            {
              "name": "setFloat",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setFloat(variableName: string, number: number): void"
            },
            {
              "name": "setSpeedAndDirection",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setSpeedAndDirection(variableName: string, speed: number, direction: Vector3): void"
            },
            {
              "name": "setVector3",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setVector3(variableName: string, vector: Vector3): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "molangvariablemap",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PistonActivateAfterEvent",
          "name": "PistonActivateAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to a piston\r expanding or retracting.\r ```typescript\r  function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a couple of piston blocks\r   const piston = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (piston === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r     const eventLoc = pistonEvent.piston.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Piston event at \" +\r           system.currentTick +\r           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r       );\r     }\r   });\r }\r ```\r /",
          "definition": "export class PistonActivateAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * True if the piston is the process of expanding.\r\n     *\r\n     */\r\n    readonly isExpanding: boolean;\r\n    /**\r\n     * @remarks\r\n     * Contains additional properties and details of the piston.\r\n     *\r\n     */\r\n    readonly piston: BlockPistonComponent;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to a piston\r\n * expanding or retracting.\r\n * @example pistonAfterEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a couple of piston blocks\r\n *   const piston = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (piston === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n *     const eventLoc = pistonEvent.piston.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Piston event at \" +\r\n *           system.currentTick +\r\n *           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "isExpanding",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "piston",
              "type": "BlockPistonComponent",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "pistonactivateafterevent",
            "class"
          ],
          "examples": [
            {
              "title": "pistonAfterEvent.ts",
              "code": "import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a couple of piston blocks\r\n  const piston = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (piston === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n    const eventLoc = pistonEvent.piston.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Piston event at \" +\r\n          system.currentTick +\r\n          (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PistonActivateAfterEventSignal",
          "name": "PistonActivateAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to piston activations.\r /",
          "definition": "export class PistonActivateAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @example pistonAfterEvent.ts\r\n     * ```typescript\r\n     * import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // set up a couple of piston blocks\r\n     *   const piston = targetLocation.dimension.getBlock(targetLocation);\r\n     *   const button = targetLocation.dimension.getBlock({\r\n     *     x: targetLocation.x,\r\n     *     y: targetLocation.y + 1,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (piston === undefined || button === undefined) {\r\n     *     log(\"Could not find block at location.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n     *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n     *\r\n     *   world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n     *     const eventLoc = pistonEvent.piston.block.location;\r\n     *\r\n     *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n     *       log(\r\n     *         \"Piston event at \" +\r\n     *           system.currentTick +\r\n     *           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n     *       );\r\n     *     }\r\n     *   });\r\n     * }\r\n     * ```\r\n     */\r\n    subscribe(callback: (arg0: PistonActivateAfterEvent) => void): (arg0: PistonActivateAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a piston expands\r\n     * or retracts.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PistonActivateAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to piston activations.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "pistonactivateaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Player",
          "name": "Player",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a player within the world.\r /",
          "definition": "export class Player extends Entity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The player's Camera.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly camera: Camera;\r\n    /**\r\n     * @remarks\r\n     * Contains the player's device information.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly clientSystemInfo: ClientSystemInfo;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandPermissionLevel: CommandPermissionLevel;\r\n    /**\r\n     * @remarks\r\n     * Gets the current graphics mode of the player's client. This\r\n     * can be changed in the Video section of the settings menu\r\n     * based on what hardware is available.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly graphicsMode: GraphicsMode;\r\n    /**\r\n     * @remarks\r\n     * Contains the player's input information.\r\n     *\r\n     */\r\n    readonly inputInfo: InputInfo;\r\n    /**\r\n     * @remarks\r\n     * Input permissions of the player.\r\n     *\r\n     */\r\n    readonly inputPermissions: PlayerInputPermissions;\r\n    /**\r\n     * @remarks\r\n     * If true, the player is currently emoting.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isEmoting: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is flying. For example, in Creative or\r\n     * Spectator mode.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isFlying: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is gliding with Elytra.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isGliding: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is jumping. This will remain true while\r\n     * the player is holding the jump action.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isJumping: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current overall level for the player, based on their\r\n     * experience.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly level: number;\r\n    /**\r\n     * @remarks\r\n     * Name of the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * @remarks\r\n     * Contains methods for manipulating the on-screen display of a\r\n     * Player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly onScreenDisplay: ScreenDisplay;\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly playerPermissionLevel: PlayerPermissionLevel;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    selectedSlotIndex: number;\r\n    /**\r\n     * @remarks\r\n     * The overall total set of experience needed to achieve the\r\n     * next level for a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly totalXpNeededForNextLevel: number;\r\n    /**\r\n     * @remarks\r\n     * The current set of experience achieved for the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly xpEarnedAtCurrentLevel: number;\r\n    /**\r\n     * @remarks\r\n     * Adds/removes experience to/from the Player and returns the\r\n     * current experience of the Player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount of experience to add. Note that this can be negative.\r\n     * Min/max bounds at -2^24 ~ 2^24\r\n     * @returns\r\n     * Returns the current experience of the Player.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addExperience(amount: number): number;\r\n    /**\r\n     * @remarks\r\n     * Adds/removes level to/from the Player and returns the\r\n     * current level of the Player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount to add to the player. Min/max bounds at -2^24 ~ 2^24\r\n     * @returns\r\n     * Returns the current level of the Player.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addLevels(amount: number): number;\r\n    /**\r\n     * @remarks\r\n     * For this player, removes all overrides of any Entity\r\n     * Properties on the target Entity. This change is not applied\r\n     * until the next tick and will not apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property overrides are being\r\n     * cleared.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     */\r\n    clearPropertyOverridesForEntity(targetEntity: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Retrieves the active gamemode for this player, if specified.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getGameMode(): GameMode;\r\n    /**\r\n     * @remarks\r\n     * Gets the current item cooldown time for a particular\r\n     * cooldown category.\r\n     *\r\n     * @param cooldownCategory\r\n     * Specifies the cooldown category to retrieve the current\r\n     * cooldown for.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getItemCooldown(cooldownCategory: string): number;\r\n    /**\r\n     * @remarks\r\n     * Gets the current spawn point of the player.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getSpawnPoint(): DimensionLocation | undefined;\r\n    /**\r\n     * @remarks\r\n     *  Gets the total experience of the Player.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTotalXp(): number;\r\n    /**\r\n     * @remarks\r\n     * Plays a music track that only this particular player can\r\n     * hear.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws This function can throw errors.\r\n     */\r\n    playMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Plays a sound that only this particular player can hear.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param soundOptions\r\n     * Additional optional options for the sound.\r\n     * @throws This function can throw errors.\r\n     * @example playMusicAndSound.ts\r\n     * ```typescript\r\n     * import { world, MusicOptions, WorldSoundOptions, PlayerSoundOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function playMusicAndSound(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   const musicOptions: MusicOptions = {\r\n     *     fade: 0.5,\r\n     *     loop: true,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *   world.playMusic(\"music.menu\", musicOptions);\r\n     *\r\n     *   const worldSoundOptions: WorldSoundOptions = {\r\n     *     pitch: 0.5,\r\n     *     volume: 4.0,\r\n     *   };\r\n     *   world.playSound(\"ambient.weather.thunder\", targetLocation, worldSoundOptions);\r\n     *\r\n     *   const playerSoundOptions: PlayerSoundOptions = {\r\n     *     pitch: 1.0,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *\r\n     *   players[0].playSound(\"bucket.fill_water\", playerSoundOptions);\r\n     * }\r\n     * ```\r\n     */\r\n    playSound(soundId: string, soundOptions?: PlayerSoundOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Queues an additional music track that only this particular\r\n     * player can hear. If a track is not playing, a music track\r\n     * will play.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     *\r\n     */\r\n    queueMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * For this player, removes the override on an Entity Property.\r\n     * This change is not applied until the next tick and will not\r\n     * apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property override is being removed.\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     */\r\n    removePropertyOverrideForEntity(targetEntity: Entity, identifier: string): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the level of the player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetLevel(): void;\r\n    /**\r\n     * @remarks\r\n     * Sends a message to the player.\r\n     *\r\n     * @param message\r\n     * The message to be displayed.\r\n     * @throws\r\n     * This method can throw if the provided {@link RawMessage} is\r\n     * in an invalid format. For example, if an empty `name` string\r\n     * is provided to `score`.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example nestedTranslation.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function nestedTranslation(targetLocation: DimensionLocation) {\r\n     *   // Displays \"Apple or Coal\"\r\n     *   const rawMessage = {\r\n     *     translate: \"accessibility.list.or.two\",\r\n     *     with: { rawtext: [{ translate: \"item.apple.name\" }, { translate: \"item.coal.name\" }] },\r\n     *   };\r\n     *   world.sendMessage(rawMessage);\r\n     * }\r\n     * ```\r\n     * @example scoreWildcard.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function scoreWildcard(targetLocation: DimensionLocation) {\r\n     *   // Displays the player's score for objective \"obj\". Each player will see their own score.\r\n     *   const rawMessage = { score: { name: \"*\", objective: \"obj\" } };\r\n     *   world.sendMessage(rawMessage);\r\n     * }\r\n     * ```\r\n     * @example sendBasicMessage.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendBasicMessage(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].sendMessage(\"Hello World!\");\r\n     * }\r\n     * ```\r\n     * @example sendPlayerMessages.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendPlayerMessages(targetLocation: DimensionLocation) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     // Displays \"First or Second\"\r\n     *     const rawMessage = { translate: \"accessibility.list.or.two\", with: [\"First\", \"Second\"] };\r\n     *     player.sendMessage(rawMessage);\r\n     *\r\n     *     // Displays \"Hello, world!\"\r\n     *     player.sendMessage(\"Hello, world!\");\r\n     *\r\n     *     // Displays \"Welcome, Amazing Player 1!\"\r\n     *     player.sendMessage({ translate: \"authentication.welcome\", with: [\"Amazing Player 1\"] });\r\n     *\r\n     *     // Displays the player's score for objective \"obj\". Each player will see their own score.\r\n     *     const rawMessageWithScore = { score: { name: \"*\", objective: \"obj\" } };\r\n     *     player.sendMessage(rawMessageWithScore);\r\n     *\r\n     *     // Displays \"Apple or Coal\"\r\n     *     const rawMessageWithNestedTranslations = {\r\n     *       translate: \"accessibility.list.or.two\",\r\n     *       with: { rawtext: [{ translate: \"item.apple.name\" }, { translate: \"item.coal.name\" }] },\r\n     *     };\r\n     *     player.sendMessage(rawMessageWithNestedTranslations);\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example sendTranslatedMessage.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendTranslatedMessage(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].sendMessage({ translate: \"authentication.welcome\", with: [\"Amazing Player 1\"] });\r\n     * }\r\n     * ```\r\n     */\r\n    sendMessage(message: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a gamemode override for this player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param gameMode\r\n     * Active gamemode.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setGameMode(gameMode?: GameMode): void;\r\n    /**\r\n     * @remarks\r\n     * For this player, overrides an Entity Property on the target\r\n     * Entity to the provided value. This property must be client\r\n     * synced. This change is not applied until the next tick and\r\n     * will not apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property is being overriden.\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @param value\r\n     * The override value. The provided type must be compatible\r\n     * with the type specified in the entity's definition.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     * Throws if the provided value is outside the expected range\r\n     * (int, float properties).\r\n     * Throws if the provided string value does not match the set\r\n     * of accepted enum values (enum properties)\r\n     */\r\n    setPropertyOverrideForEntity(targetEntity: Entity, identifier: string, value: boolean | number | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current starting spawn point for this particular\r\n     * player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setSpawnPoint(spawnPoint?: DimensionLocation): void;\r\n    /**\r\n     * @remarks\r\n     * Creates a new particle emitter at a specified location in\r\n     * the world. Only visible to the target player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectName\r\n     * Identifier of the particle to create.\r\n     * @param location\r\n     * The location at which to create the particle emitter.\r\n     * @param molangVariables\r\n     * A set of optional, customizable variables that can be\r\n     * adjusted for this particle.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnParticle.ts\r\n     * ```typescript\r\n     * import { world, MolangVariableMap, Vector3 } from '@minecraft/server';\r\n     *\r\n     * world.afterEvents.playerSpawn.subscribe(event => {\r\n     *     const targetLocation = event.player.location;\r\n     *     for (let i = 0; i < 100; i++) {\r\n     *         const molang = new MolangVariableMap();\r\n     *\r\n     *         molang.setColorRGB('variable.color', {\r\n     *             red: Math.random(),\r\n     *             green: Math.random(),\r\n     *             blue: Math.random()\r\n     *         });\r\n     *\r\n     *         const newLocation: Vector3 = {\r\n     *             x: targetLocation.x + Math.floor(Math.random() * 8) - 4,\r\n     *             y: targetLocation.y + Math.floor(Math.random() * 8) - 4,\r\n     *             z: targetLocation.z + Math.floor(Math.random() * 8) - 4,\r\n     *         };\r\n     *         event.player.spawnParticle('minecraft:colored_flame_particle', newLocation, molang);\r\n     *     }\r\n     * });\r\n     * ```\r\n     */\r\n    spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the item cooldown time for a particular cooldown\r\n     * category.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cooldownCategory\r\n     * Specifies the cooldown category to retrieve the current\r\n     * cooldown for.\r\n     * @param tickDuration\r\n     * Duration in ticks of the item cooldown.\r\n     * @throws This function can throw errors.\r\n     */\r\n    startItemCooldown(cooldownCategory: string, tickDuration: number): void;\r\n    /**\r\n     * @remarks\r\n     * Stops any music tracks from playing for this particular\r\n     * player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    stopMusic(): void;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a player within the world.\r\n */\r",
          "properties": [
            {
              "name": "camera",
              "type": "Camera",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "clientSystemInfo",
              "type": "ClientSystemInfo",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "graphicsMode",
              "type": "GraphicsMode",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "inputInfo",
              "type": "InputInfo",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "inputPermissions",
              "type": "PlayerInputPermissions",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isEmoting",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isFlying",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isGliding",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isJumping",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "level",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "name",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "onScreenDisplay",
              "type": "ScreenDisplay",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerPermissionLevel",
              "type": "PlayerPermissionLevel",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "totalXpNeededForNextLevel",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "xpEarnedAtCurrentLevel",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "addExperience",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "addExperience(amount: number): number"
            },
            {
              "name": "addLevels",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "addLevels(amount: number): number"
            },
            {
              "name": "clearPropertyOverridesForEntity",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearPropertyOverridesForEntity(targetEntity: Entity): void"
            },
            {
              "name": "getGameMode",
              "parameters": [],
              "returnType": "GameMode",
              "accessibility": "public",
              "signature": "getGameMode(): GameMode"
            },
            {
              "name": "getItemCooldown",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getItemCooldown(cooldownCategory: string): number"
            },
            {
              "name": "getSpawnPoint",
              "parameters": [],
              "returnType": "DimensionLocation | undefined",
              "accessibility": "public",
              "signature": "getSpawnPoint(): DimensionLocation | undefined"
            },
            {
              "name": "getTotalXp",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getTotalXp(): number"
            },
            {
              "name": "playMusic",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "playMusic(trackId: string, musicOptions?: MusicOptions): void"
            },
            {
              "name": "playSound",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "playSound(soundId: string, soundOptions?: PlayerSoundOptions): void"
            },
            {
              "name": "queueMusic",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "queueMusic(trackId: string, musicOptions?: MusicOptions): void"
            },
            {
              "name": "removePropertyOverrideForEntity",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "removePropertyOverrideForEntity(targetEntity: Entity, identifier: string): void"
            },
            {
              "name": "resetLevel",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "resetLevel(): void"
            },
            {
              "name": "setGameMode",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setGameMode(gameMode?: GameMode): void"
            },
            {
              "name": "setPropertyOverrideForEntity",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setPropertyOverrideForEntity(targetEntity: Entity, identifier: string, value: boolean | number | string): void"
            },
            {
              "name": "setSpawnPoint",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setSpawnPoint(spawnPoint?: DimensionLocation): void"
            },
            {
              "name": "spawnParticle",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void"
            },
            {
              "name": "startItemCooldown",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "startItemCooldown(cooldownCategory: string, tickDuration: number): void"
            },
            {
              "name": "stopMusic",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "stopMusic(): void"
            }
          ],
          "extends": "Entity",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "player",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerBreakBlockAfterEvent",
          "name": "PlayerBreakBlockAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event after a player\r breaks a block.\r /",
          "definition": "export class PlayerBreakBlockAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns permutation information about this block before it\r\n     * was broken.\r\n     *\r\n     */\r\n    readonly brokenBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The item stack that was used to break the block after the\r\n     * block was broken, or undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStackAfterBreak?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The item stack that was used to break the block before the\r\n     * block was broken, or undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStackBeforeBreak?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Player that broke the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * breaks a block.\r\n */\r",
          "properties": [
            {
              "name": "brokenBlockPermutation",
              "type": "BlockPermutation",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerbreakblockafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerBreakBlockAfterEventSignal",
          "name": "PlayerBreakBlockAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a player breaks\r a block.\r /",
          "definition": "export class PlayerBreakBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a block is broken\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerBreakBlockAfterEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerBreakBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player breaks a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerBreakBlockAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a player breaks\r\n * a block.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerbreakblockaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerBreakBlockBeforeEvent",
          "name": "PlayerBreakBlockBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event before a player\r breaks a block.\r /",
          "definition": "export class PlayerBreakBlockBeforeEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the block break event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used to break the block, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Player breaking the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * breaks a block.\r\n */\r",
          "properties": [
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerbreakblockbeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerBreakBlockBeforeEventSignal",
          "name": "PlayerBreakBlockBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to before a player\r breaks a block.\r /",
          "definition": "export class PlayerBreakBlockBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a block is broken\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerBreakBlockBeforeEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerBreakBlockBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player breaks\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerBreakBlockBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * breaks a block.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerbreakblockbeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerButtonInputAfterEvent",
          "name": "PlayerButtonInputAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Event data for when a player presses a button.\r /",
          "definition": "export class PlayerButtonInputAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The button this event is about.\r\n     *\r\n     */\r\n    readonly button: InputButton;\r\n    /**\r\n     * @remarks\r\n     * The state that this button transferred to.\r\n     *\r\n     */\r\n    readonly newButtonState: ButtonState;\r\n    /**\r\n     * @remarks\r\n     * The player that performed the input event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Event data for when a player presses a button.\r\n */\r",
          "properties": [
            {
              "name": "button",
              "type": "InputButton",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "newButtonState",
              "type": "ButtonState",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerbuttoninputafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerButtonInputAfterEventSignal",
          "name": "PlayerButtonInputAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to player inputs.\r /",
          "definition": "export class PlayerButtonInputAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after the player\r\n     * performs an input.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerButtonInputAfterEvent) => void,\r\n        options?: InputEventOptions,\r\n    ): (arg0: PlayerButtonInputAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after the player\r\n     * performs an input.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerButtonInputAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to player inputs.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerbuttoninputaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerCursorInventoryComponent",
          "name": "PlayerCursorInventoryComponent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents the players cursor inventory. Used when moving\r items between between containers in the inventory UI. Not\r used with touch controls.\r /",
          "definition": "export class PlayerCursorInventoryComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack currently in the players cursor inventory.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly item?: ItemStack;\r\n    static readonly componentId = 'minecraft:cursor_inventory';\r\n    /**\r\n     * @remarks\r\n     * Clears the players cursor inventory.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    clear(): void;\r\n}\r",
          "jsdoc": "/**\r\n * Represents the players cursor inventory. Used when moving\r\n * items between between containers in the inventory UI. Not\r\n * used with touch controls.\r\n */\r",
          "properties": [
            {
              "name": "minecraft",
              "type": "cursor_inventory'",
              "readonly": false,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "clear",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clear(): void"
            }
          ],
          "extends": "EntityComponent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playercursorinventorycomponent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerDimensionChangeAfterEvent",
          "name": "PlayerDimensionChangeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to a player's\r dimension having been changed.\r /",
          "definition": "export class PlayerDimensionChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The dimension the player is changing from.\r\n     *\r\n     */\r\n    readonly fromDimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * The location the player was at before changing dimensions.\r\n     *\r\n     */\r\n    readonly fromLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Handle to the player that is changing dimensions.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The dimension that the player is changing to.\r\n     *\r\n     */\r\n    readonly toDimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * The location the player will spawn to after changing\r\n     * dimensions.\r\n     *\r\n     */\r\n    readonly toLocation: Vector3;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to a player's\r\n * dimension having been changed.\r\n */\r",
          "properties": [
            {
              "name": "fromDimension",
              "type": "Dimension",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "fromLocation",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "toDimension",
              "type": "Dimension",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "toLocation",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerdimensionchangeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerDimensionChangeAfterEventSignal",
          "name": "PlayerDimensionChangeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to successful player\r dimension changes.\r /",
          "definition": "export class PlayerDimensionChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Subscribes the specified callback to a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerDimensionChangeAfterEvent) => void,\r\n    ): (arg0: PlayerDimensionChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes the specified callback from a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerDimensionChangeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to successful player\r\n * dimension changes.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerdimensionchangeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerEmoteAfterEvent",
          "name": "PlayerEmoteAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Removes the specified callback from a player dimension\r change after event.\r  This function can't be called in read-only mode.\r  This function can be called in early-execution mode.",
          "definition": "export class PlayerEmoteAfterEvent {\n    private constructor();\r\n    readonly personaPieceId: string;\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Removes the specified callback from a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r",
          "properties": [
            {
              "name": "personaPieceId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [
            "readonly-restricted"
          ],
          "keywords": [
            "playeremoteafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerEmoteAfterEventSignal",
          "name": "PlayerEmoteAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class PlayerEmoteAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerEmoteAfterEvent) => void): (arg0: PlayerEmoteAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerEmoteAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playeremoteaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerGameModeChangeAfterEvent",
          "name": "PlayerGameModeChangeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event after a players game\r mode is changed.\r /",
          "definition": "export class PlayerGameModeChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The previous game mode before the change.\r\n     *\r\n     */\r\n    readonly fromGameMode: GameMode;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The current game mode after the change.\r\n     *\r\n     */\r\n    readonly toGameMode: GameMode;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event after a players game\r\n * mode is changed.\r\n */\r",
          "properties": [
            {
              "name": "fromGameMode",
              "type": "GameMode",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "toGameMode",
              "type": "GameMode",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playergamemodechangeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerGameModeChangeAfterEventSignal",
          "name": "PlayerGameModeChangeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to after a players game\r mode is changed.\r /",
          "definition": "export class PlayerGameModeChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerGameModeChangeAfterEvent) => void): (arg0: PlayerGameModeChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerGameModeChangeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to after a players game\r\n * mode is changed.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playergamemodechangeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerGameModeChangeBeforeEvent",
          "name": "PlayerGameModeChangeBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event before a player\r interacts with an entity.\r /",
          "definition": "export class PlayerGameModeChangeBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the game mode change will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current game mode.\r\n     *\r\n     */\r\n    readonly fromGameMode: GameMode;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The game mode being changed to.\r\n     *\r\n     */\r\n    toGameMode: GameMode;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with an entity.\r\n */\r",
          "properties": [
            {
              "name": "fromGameMode",
              "type": "GameMode",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playergamemodechangebeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerGameModeChangeBeforeEventSignal",
          "name": "PlayerGameModeChangeBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to before a players\r game mode is changed.\r /",
          "definition": "export class PlayerGameModeChangeBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerGameModeChangeBeforeEvent) => void,\r\n    ): (arg0: PlayerGameModeChangeBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerGameModeChangeBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to before a players\r\n * game mode is changed.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playergamemodechangebeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEvent",
          "name": "PlayerHotbarSelectedSlotChangeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event after changing the\r selected hotbar slot for a player.\r /",
          "definition": "export class PlayerHotbarSelectedSlotChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack of the new slot selected.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The new hotbar slot index selected.\r\n     *\r\n     */\r\n    readonly newSlotSelected: number;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The previous hotbar slot index selected.\r\n     *\r\n     */\r\n    readonly previousSlotSelected: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event after changing the\r\n * selected hotbar slot for a player.\r\n */\r",
          "properties": [
            {
              "name": "newSlotSelected",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "previousSlotSelected",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerhotbarselectedslotchangeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEventSignal",
          "name": "PlayerHotbarSelectedSlotChangeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected after a player selected\r hotbar slot is changed.\r /",
          "definition": "export class PlayerHotbarSelectedSlotChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player selected\r\n     * hotbar slot is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     * @param options\r\n     * Additional filtering options for the event subscription.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void,\r\n        options?: HotbarEventOptions,\r\n    ): (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player selected\r\n     * hotbar slot is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected after a player selected\r\n * hotbar slot is changed.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerhotbarselectedslotchangeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInputModeChangeAfterEvent",
          "name": "PlayerInputModeChangeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Event data for when a player input mode changes.\r /",
          "definition": "export class PlayerInputModeChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The new input mode used by the player.\r\n     *\r\n     */\r\n    readonly newInputModeUsed: InputMode;\r\n    /**\r\n     * @remarks\r\n     * The player that had an input mode change.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The previous input mode used by the player.\r\n     *\r\n     */\r\n    readonly previousInputModeUsed: InputMode;\r\n}\r",
          "jsdoc": "/**\r\n * Event data for when a player input mode changes.\r\n */\r",
          "properties": [
            {
              "name": "newInputModeUsed",
              "type": "InputMode",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "previousInputModeUsed",
              "type": "InputMode",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinputmodechangeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInputModeChangeAfterEventSignal",
          "name": "PlayerInputModeChangeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to player input mode.\r /",
          "definition": "export class PlayerInputModeChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after the player input\r\n     * mode changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInputModeChangeAfterEvent) => void,\r\n    ): (arg0: PlayerInputModeChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after the player input\r\n     * mode changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInputModeChangeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to player input mode.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinputmodechangeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEvent",
          "name": "PlayerInputPermissionCategoryChangeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event after a players\r input permissions change.\r /",
          "definition": "export class PlayerInputPermissionCategoryChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The category of input permissions that have changed.\r\n     *\r\n     */\r\n    readonly category: InputPermissionCategory;\r\n    /**\r\n     * @remarks\r\n     * The enabled/disabled state of the players input permissions.\r\n     *\r\n     */\r\n    readonly enabled: boolean;\r\n    /**\r\n     * @remarks\r\n     * The player that has had their input permissions changed.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event after a players\r\n * input permissions change.\r\n */\r",
          "properties": [
            {
              "name": "category",
              "type": "InputPermissionCategory",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "enabled",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinputpermissioncategorychangeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEventSignal",
          "name": "PlayerInputPermissionCategoryChangeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to after a players\r input permissions change.\r /",
          "definition": "export class PlayerInputPermissionCategoryChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a players input\r\n     * permissions change.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void,\r\n    ): (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a players input\r\n     * permissions change.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to after a players\r\n * input permissions change.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinputpermissioncategorychangeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInputPermissions",
          "name": "PlayerInputPermissions",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains APIs to enable/disable player input permissions.\r /",
          "definition": "export class PlayerInputPermissions {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if an input permission is enabled.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    isPermissionCategoryEnabled(permissionCategory: InputPermissionCategory): boolean;\r\n    /**\r\n     * @remarks\r\n     * Enable or disable an input permission. When enabled the\r\n     * input will work, when disabled will not work.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setPermissionCategory(permissionCategory: InputPermissionCategory, isEnabled: boolean): void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains APIs to enable/disable player input permissions.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "isPermissionCategoryEnabled",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isPermissionCategoryEnabled(permissionCategory: InputPermissionCategory): boolean"
            },
            {
              "name": "setPermissionCategory",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setPermissionCategory(permissionCategory: InputPermissionCategory, isEnabled: boolean): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinputpermissions",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInteractWithBlockAfterEvent",
          "name": "PlayerInteractWithBlockAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event after a player\r successfully interacts with a block.\r /",
          "definition": "export class PlayerInteractWithBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack before the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The block that will be interacted with.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that is being interacted with.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block where the item is placed.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * This value will be true if the event was triggered on\r\n     * players initial interaction button press and false on events\r\n     * triggered from holding the interaction button.\r\n     *\r\n     */\r\n    readonly isFirstEvent: boolean;\r\n    /**\r\n     * @remarks\r\n     * The ItemStack after the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * successfully interacts with a block.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "blockFace",
              "type": "Direction",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "faceLocation",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isFirstEvent",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinteractwithblockafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInteractWithBlockAfterEventSignal",
          "name": "PlayerInteractWithBlockAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to after a player\r interacts with a block.\r /",
          "definition": "export class PlayerInteractWithBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player interacts\r\n     * with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithBlockAfterEvent) => void,\r\n    ): (arg0: PlayerInteractWithBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithBlockAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to after a player\r\n * interacts with a block.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinteractwithblockaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInteractWithBlockBeforeEvent",
          "name": "PlayerInteractWithBlockBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event before a player\r interacts with a block.\r /",
          "definition": "export class PlayerInteractWithBlockBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that will be interacted with.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that is being interacted with.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * If set to true the interaction will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block where the item is placed.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * This value will be true if the event was triggered on\r\n     * players initial interaction button press and false on events\r\n     * triggered from holding the interaction button.\r\n     *\r\n     */\r\n    readonly isFirstEvent: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used in the interaction, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with a block.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "blockFace",
              "type": "Direction",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "faceLocation",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isFirstEvent",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinteractwithblockbeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInteractWithBlockBeforeEventSignal",
          "name": "PlayerInteractWithBlockBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to before a player\r interacts with a block.\r /",
          "definition": "export class PlayerInteractWithBlockBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithBlockBeforeEvent) => void,\r\n    ): (arg0: PlayerInteractWithBlockBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithBlockBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * interacts with a block.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinteractwithblockbeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInteractWithEntityAfterEvent",
          "name": "PlayerInteractWithEntityAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event after a player\r successfully interacts with an entity.\r /",
          "definition": "export class PlayerInteractWithEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack before the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The ItemStack after the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The entity that will be interacted with.\r\n     *\r\n     */\r\n    readonly target: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * successfully interacts with an entity.\r\n */\r",
          "properties": [
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "target",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinteractwithentityafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInteractWithEntityAfterEventSignal",
          "name": "PlayerInteractWithEntityAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to after a player\r interacts with an entity.\r /",
          "definition": "export class PlayerInteractWithEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player interacts\r\n     * with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithEntityAfterEvent) => void,\r\n    ): (arg0: PlayerInteractWithEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithEntityAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to after a player\r\n * interacts with an entity.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinteractwithentityaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInteractWithEntityBeforeEvent",
          "name": "PlayerInteractWithEntityBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event before a player\r interacts with an entity.\r /",
          "definition": "export class PlayerInteractWithEntityBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the interaction will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used in the interaction, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The entity that will be interacted with.\r\n     *\r\n     */\r\n    readonly target: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with an entity.\r\n */\r",
          "properties": [
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "target",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinteractwithentitybeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInteractWithEntityBeforeEventSignal",
          "name": "PlayerInteractWithEntityBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to before a player\r interacts with an entity.\r /",
          "definition": "export class PlayerInteractWithEntityBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithEntityBeforeEvent) => void,\r\n    ): (arg0: PlayerInteractWithEntityBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithEntityBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * interacts with an entity.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinteractwithentitybeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInventoryItemChangeAfterEvent",
          "name": "PlayerInventoryItemChangeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event after a player's\r inventory item changes.\r /",
          "definition": "export class PlayerInventoryItemChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The previous item stack.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Inventory type.\r\n     *\r\n     */\r\n    readonly inventoryType: PlayerInventoryType;\r\n    /**\r\n     * @remarks\r\n     * The new item stack.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The slot index with the change.\r\n     *\r\n     */\r\n    readonly slot: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event after a player's\r\n * inventory item changes.\r\n */\r",
          "properties": [
            {
              "name": "inventoryType",
              "type": "PlayerInventoryType",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "slot",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinventoryitemchangeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerInventoryItemChangeAfterEventSignal",
          "name": "PlayerInventoryItemChangeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected after a player's\r inventory item is changed.\r /",
          "definition": "export class PlayerInventoryItemChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player's\r\n     * inventory item is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     * @param options\r\n     * Additional filtering options for the event subscription.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInventoryItemChangeAfterEvent) => void,\r\n        options?: InventoryItemEventOptions,\r\n    ): (arg0: PlayerInventoryItemChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player's\r\n     * inventory item is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInventoryItemChangeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected after a player's\r\n * inventory item is changed.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerinventoryitemchangeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerJoinAfterEvent",
          "name": "PlayerJoinAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a player that has joined.\r See the playerSpawn event for more detailed information that\r could be returned after the first time a player has spawned\r within the game.\r /",
          "definition": "export class PlayerJoinAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Opaque string identifier of the player that joined the game.\r\n     *\r\n     */\r\n    readonly playerId: string;\r\n    /**\r\n     * @remarks\r\n     * Name of the player that has joined.\r\n     *\r\n     */\r\n    readonly playerName: string;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a player that has joined.\r\n * See the playerSpawn event for more detailed information that\r\n * could be returned after the first time a player has spawned\r\n * within the game.\r\n */\r",
          "properties": [
            {
              "name": "playerId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerName",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerjoinafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerJoinAfterEventSignal",
          "name": "PlayerJoinAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to a player joining the\r world.\r /",
          "definition": "export class PlayerJoinAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player joins the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerJoinAfterEvent) => void): (arg0: PlayerJoinAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player joins the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerJoinAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to a player joining the\r\n * world.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerjoinaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerLeaveAfterEvent",
          "name": "PlayerLeaveAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a player that has left the\r world.\r /",
          "definition": "export class PlayerLeaveAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Opaque string identifier of the player that has left the\r\n     * event.\r\n     *\r\n     */\r\n    readonly playerId: string;\r\n    /**\r\n     * @remarks\r\n     * Player that has left the world.\r\n     *\r\n     */\r\n    readonly playerName: string;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a player that has left the\r\n * world.\r\n */\r",
          "properties": [
            {
              "name": "playerId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerName",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerleaveafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerLeaveAfterEventSignal",
          "name": "PlayerLeaveAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to a player leaving the\r world.\r /",
          "definition": "export class PlayerLeaveAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player leaves the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerLeaveAfterEvent) => void): (arg0: PlayerLeaveAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player leaves\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerLeaveAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to a player leaving the\r\n * world.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerleaveaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerLeaveBeforeEvent",
          "name": "PlayerLeaveBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding a player that is leaving the\r world.\r /",
          "definition": "export class PlayerLeaveBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The leaving player.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding a player that is leaving the\r\n * world.\r\n */\r",
          "properties": [
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerleavebeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerLeaveBeforeEventSignal",
          "name": "PlayerLeaveBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to a player leaving the\r world.\r /",
          "definition": "export class PlayerLeaveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player leaves the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerLeaveBeforeEvent) => void): (arg0: PlayerLeaveBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback that will be called when a player leaves\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerLeaveBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to a player leaving the\r\n * world.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerleavebeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerPlaceBlockAfterEvent",
          "name": "PlayerPlaceBlockAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information regarding an event where a player\r places a block.\r /",
          "definition": "export class PlayerPlaceBlockAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Player that placed the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information regarding an event where a player\r\n * places a block.\r\n */\r",
          "properties": [
            {
              "name": "player",
              "type": "Player",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerplaceblockafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerPlaceBlockAfterEventSignal",
          "name": "PlayerPlaceBlockAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a block is\r placed by a player.\r /",
          "definition": "export class PlayerPlaceBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a block is placed\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerPlaceBlockAfterEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerPlaceBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an block is placed\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerPlaceBlockAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a block is\r\n * placed by a player.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerplaceblockaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerSpawnAfterEvent",
          "name": "PlayerSpawnAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "An event that contains more information about a player\r spawning.\r /",
          "definition": "export class PlayerSpawnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, this is the initial spawn of a player after joining\r\n     * the game.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    initialSpawn: boolean;\r\n    /**\r\n     * @remarks\r\n     * Object that represents the player that joined the game.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    player: Player;\r\n}\r",
          "jsdoc": "/**\r\n * An event that contains more information about a player\r\n * spawning.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerspawnafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerSpawnAfterEventSignal",
          "name": "PlayerSpawnAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Registers an event when a player is spawned (or re-spawned\r after death) and fully ready within the world.\r /",
          "definition": "export class PlayerSpawnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a new event receiver for this particular type of\r\n     * event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerSpawnAfterEvent) => void): (arg0: PlayerSpawnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * De-registers an event receiver for the player spawn event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerSpawnAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Registers an event when a player is spawned (or re-spawned\r\n * after death) and fully ready within the world.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playerspawnaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PressurePlatePopAfterEvent",
          "name": "PressurePlatePopAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to a pressure plate\r pop.\r /",
          "definition": "export class PressurePlatePopAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate before it was\r\n     * popped.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate at the time of the\r\n     * pop.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to a pressure plate\r\n * pop.\r\n */\r",
          "properties": [
            {
              "name": "previousRedstonePower",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "redstonePower",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "pressureplatepopafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PressurePlatePopAfterEventSignal",
          "name": "PressurePlatePopAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a pressure\r plate is popped.\r /",
          "definition": "export class PressurePlatePopAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a pressure plate is\r\n     * popped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PressurePlatePopAfterEvent) => void): (arg0: PressurePlatePopAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a pressure plate\r\n     * is popped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PressurePlatePopAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a pressure\r\n * plate is popped.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "pressureplatepopaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PressurePlatePushAfterEvent",
          "name": "PressurePlatePushAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to a pressure plate\r push.\r /",
          "definition": "export class PressurePlatePushAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate before it was\r\n     * pushed.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate at the time of the\r\n     * push.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * Source that triggered the pressure plate push.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to a pressure plate\r\n * push.\r\n */\r",
          "properties": [
            {
              "name": "previousRedstonePower",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "redstonePower",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "pressureplatepushafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PressurePlatePushAfterEventSignal",
          "name": "PressurePlatePushAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a pressure\r plate is pushed.\r /",
          "definition": "export class PressurePlatePushAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a pressure plate is\r\n     * pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PressurePlatePushAfterEvent) => void): (arg0: PressurePlatePushAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a pressure plate\r\n     * is pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PressurePlatePushAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a pressure\r\n * plate is pushed.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "pressureplatepushaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ProjectileHitBlockAfterEvent",
          "name": "ProjectileHitBlockAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a projectile hitting a\r block.\r /",
          "definition": "export class ProjectileHitBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where this projectile hit took place.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Direction vector of the projectile as it hit a block.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Location where the projectile hit occurred.\r\n     *\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Entity for the projectile that hit a block.\r\n     *\r\n     */\r\n    readonly projectile: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional source entity that fired the projectile.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Contains additional information about the block that was hit\r\n     * by the projectile.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getBlockHit(): BlockHitInformation;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a projectile hitting a\r\n * block.\r\n */\r",
          "properties": [
            {
              "name": "dimension",
              "type": "Dimension",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hitVector",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "projectile",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getBlockHit",
              "parameters": [],
              "returnType": "BlockHitInformation",
              "accessibility": "public",
              "signature": "getBlockHit(): BlockHitInformation"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "projectilehitblockafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ProjectileHitBlockAfterEventSignal",
          "name": "ProjectileHitBlockAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a projectile\r hits a block.\r /",
          "definition": "export class ProjectileHitBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a projectile hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ProjectileHitBlockAfterEvent) => void): (arg0: ProjectileHitBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a projectile hits\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ProjectileHitBlockAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a projectile\r\n * hits a block.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "projectilehitblockaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ProjectileHitEntityAfterEvent",
          "name": "ProjectileHitEntityAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to a projectile hitting an\r entity.\r /",
          "definition": "export class ProjectileHitEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where this projectile hit took place.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Direction vector of the projectile as it hit an entity.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Location where the projectile hit occurred.\r\n     *\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Entity for the projectile that hit an entity.\r\n     *\r\n     */\r\n    readonly projectile: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional source entity that fired the projectile.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Contains additional information about an entity that was\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getEntityHit(): EntityHitInformation;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to a projectile hitting an\r\n * entity.\r\n */\r",
          "properties": [
            {
              "name": "dimension",
              "type": "Dimension",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "hitVector",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "projectile",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getEntityHit",
              "parameters": [],
              "returnType": "EntityHitInformation",
              "accessibility": "public",
              "signature": "getEntityHit(): EntityHitInformation"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "projectilehitentityafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ProjectileHitEntityAfterEventSignal",
          "name": "ProjectileHitEntityAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a projectile\r hits an entity.\r /",
          "definition": "export class ProjectileHitEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a projectile hits\r\n     * an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ProjectileHitEntityAfterEvent) => void): (arg0: ProjectileHitEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a projectile hits\r\n     * an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ProjectileHitEntityAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a projectile\r\n * hits an entity.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "projectilehitentityaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Scoreboard",
          "name": "Scoreboard",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains objectives and participants for the scoreboard.\r ```typescript\r  function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r    const players = world.getPlayers();\r    // Ensure a new objective.\r   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r    if (!objective) {\r     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r   }\r    // get the scoreboard identity for player 0\r   const player0Identity = players[0].scoreboardIdentity;\r    if (player0Identity === undefined) {\r     log(\"Could not get a scoreboard identity for player 0.\");\r     return -1;\r   }\r    // initialize player score to 100;\r   objective.setScore(player0Identity, 100);\r    world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r     objective: objective,\r     sortOrder: ObjectiveSortOrder.Descending,\r   });\r    const playerScore = objective.getScore(player0Identity) ?? 0;\r    // score should now be 110.\r   objective.setScore(player0Identity, playerScore + 10);\r }\r ```\r /",
          "definition": "export class Scoreboard {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a new objective to the scoreboard.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     * @example updateScoreboard.ts\r\n     * ```typescript\r\n     * import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n     *   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n     *\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   // Ensure a new objective.\r\n     *   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n     *\r\n     *   if (!objective) {\r\n     *     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n     *   }\r\n     *\r\n     *   // get the scoreboard identity for player 0\r\n     *   const player0Identity = players[0].scoreboardIdentity;\r\n     *\r\n     *   if (player0Identity === undefined) {\r\n     *     log(\"Could not get a scoreboard identity for player 0.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   // initialize player score to 100;\r\n     *   objective.setScore(player0Identity, 100);\r\n     *\r\n     *   world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n     *     objective: objective,\r\n     *     sortOrder: ObjectiveSortOrder.Descending,\r\n     *   });\r\n     *\r\n     *   const playerScore = objective.getScore(player0Identity) ?? 0;\r\n     *\r\n     *   // score should now be 110.\r\n     *   objective.setScore(player0Identity, playerScore + 10);\r\n     * }\r\n     * ```\r\n     */\r\n    addObjective(objectiveId: string, displayName?: string): ScoreboardObjective;\r\n    /**\r\n     * @remarks\r\n     * Clears the objective that occupies a display slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    clearObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjective | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a specific objective (by id).\r\n     *\r\n     * @param objectiveId\r\n     * Identifier of the objective.\r\n     */\r\n    getObjective(objectiveId: string): ScoreboardObjective | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns an objective that occupies the specified display\r\n     * slot.\r\n     *\r\n     */\r\n    getObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjectiveDisplayOptions | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all defined objectives.\r\n     *\r\n     */\r\n    getObjectives(): ScoreboardObjective[];\r\n    /**\r\n     * @remarks\r\n     * Returns all defined scoreboard identities.\r\n     *\r\n     */\r\n    getParticipants(): ScoreboardIdentity[];\r\n    /**\r\n     * @remarks\r\n     * Removes an objective from the scoreboard.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeObjective(objectiveId: ScoreboardObjective | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets an objective into a display slot with specified\r\n     * additional display settings.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * Returns the previous `ScoreboardObjective` set at the\r\n     * display slot, if no objective was previously set it returns\r\n     * `undefined`.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setObjectiveAtDisplaySlot(\r\n        displaySlotId: DisplaySlotId,\r\n        objectiveDisplaySetting: ScoreboardObjectiveDisplayOptions,\r\n    ): ScoreboardObjective | undefined;\r\n}\r",
          "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n * @example updateScoreboard.ts\r\n * ```typescript\r\n * import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n *   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n *\r\n *   const players = world.getPlayers();\r\n *\r\n *   // Ensure a new objective.\r\n *   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n *\r\n *   if (!objective) {\r\n *     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n *   }\r\n *\r\n *   // get the scoreboard identity for player 0\r\n *   const player0Identity = players[0].scoreboardIdentity;\r\n *\r\n *   if (player0Identity === undefined) {\r\n *     log(\"Could not get a scoreboard identity for player 0.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   // initialize player score to 100;\r\n *   objective.setScore(player0Identity, 100);\r\n *\r\n *   world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n *     objective: objective,\r\n *     sortOrder: ObjectiveSortOrder.Descending,\r\n *   });\r\n *\r\n *   const playerScore = objective.getScore(player0Identity) ?? 0;\r\n *\r\n *   // score should now be 110.\r\n *   objective.setScore(player0Identity, playerScore + 10);\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "addObjective",
              "parameters": [],
              "returnType": "ScoreboardObjective",
              "accessibility": "public",
              "signature": "addObjective(objectiveId: string, displayName?: string): ScoreboardObjective"
            },
            {
              "name": "clearObjectiveAtDisplaySlot",
              "parameters": [],
              "returnType": "ScoreboardObjective | undefined",
              "accessibility": "public",
              "signature": "clearObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjective | undefined"
            },
            {
              "name": "getObjective",
              "parameters": [],
              "returnType": "ScoreboardObjective | undefined",
              "accessibility": "public",
              "signature": "getObjective(objectiveId: string): ScoreboardObjective | undefined"
            },
            {
              "name": "getObjectiveAtDisplaySlot",
              "parameters": [],
              "returnType": "ScoreboardObjectiveDisplayOptions | undefined",
              "accessibility": "public",
              "signature": "getObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjectiveDisplayOptions | undefined"
            },
            {
              "name": "getObjectives",
              "parameters": [],
              "returnType": "ScoreboardObjective[]",
              "accessibility": "public",
              "signature": "getObjectives(): ScoreboardObjective[]"
            },
            {
              "name": "getParticipants",
              "parameters": [],
              "returnType": "ScoreboardIdentity[]",
              "accessibility": "public",
              "signature": "getParticipants(): ScoreboardIdentity[]"
            },
            {
              "name": "removeObjective",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "removeObjective(objectiveId: ScoreboardObjective | string): boolean"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scoreboard",
            "class"
          ],
          "examples": [
            {
              "title": "updateScoreboard.ts",
              "code": "import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n  const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n\n  const players = world.getPlayers();\r\n\n  // Ensure a new objective.\r\n  let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n\n  if (!objective) {\r\n    objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n  }\r\n\n  // get the scoreboard identity for player 0\r\n  const player0Identity = players[0].scoreboardIdentity;\r\n\n  if (player0Identity === undefined) {\r\n    log(\"Could not get a scoreboard identity for player 0.\");\r\n    return -1;\r\n  }\r\n\n  // initialize player score to 100;\r\n  objective.setScore(player0Identity, 100);\r\n\n  world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n    objective: objective,\r\n    sortOrder: ObjectiveSortOrder.Descending,\r\n  });\r\n\n  const playerScore = objective.getScore(player0Identity) ?? 0;\r\n\n  // score should now be 110.\r\n  objective.setScore(player0Identity, playerScore + 10);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScoreboardIdentity",
          "name": "ScoreboardIdentity",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains an identity of the scoreboard item.\r /",
          "definition": "export class ScoreboardIdentity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the player-visible name of this identity.\r\n     *\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard identity.\r\n     *\r\n     */\r\n    readonly id: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the ScoreboardIdentity reference is still\r\n     * valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Type of the scoreboard identity.\r\n     *\r\n     */\r\n    readonly 'type': ScoreboardIdentityType;\r\n    /**\r\n     * @remarks\r\n     * If the scoreboard identity is an entity or player, returns\r\n     * the entity that this scoreboard item corresponds to.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEntity(): Entity | undefined;\r\n}\r",
          "jsdoc": "/**\r\n * Contains an identity of the scoreboard item.\r\n */\r",
          "properties": [
            {
              "name": "displayName",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "id",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getEntity",
              "parameters": [],
              "returnType": "Entity | undefined",
              "accessibility": "public",
              "signature": "getEntity(): Entity | undefined"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scoreboardidentity",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScoreboardObjective",
          "name": "ScoreboardObjective",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains objectives and participants for the scoreboard.\r /",
          "definition": "export class ScoreboardObjective {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the player-visible name of this scoreboard\r\n     * objective.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard objective.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the ScoreboardObjective reference is still\r\n     * valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Adds a score to the given participant and objective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Participant to apply the scoreboard value addition to.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addScore(participant: Entity | ScoreboardIdentity | string, scoreToAdd: number): number;\r\n    /**\r\n     * @remarks\r\n     * Returns all objective participant identities.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getParticipants(): ScoreboardIdentity[];\r\n    /**\r\n     * @remarks\r\n     * Returns a specific score for a participant.\r\n     *\r\n     * @param participant\r\n     * Identifier of the participant to retrieve a score for.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getScore(participant: Entity | ScoreboardIdentity | string): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns specific scores for this objective for all\r\n     * participants.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getScores(): ScoreboardScoreInfo[];\r\n    /**\r\n     * @remarks\r\n     * Returns if the specified identity is a participant of the\r\n     * scoreboard objective.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    hasParticipant(participant: Entity | ScoreboardIdentity | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes a participant from this scoreboard objective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Participant to remove from being tracked with this\r\n     * objective.\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeParticipant(participant: Entity | ScoreboardIdentity | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets a score for a participant.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Identity of the participant.\r\n     * @param score\r\n     * New value of the score.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setScore(participant: Entity | ScoreboardIdentity | string, score: number): void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n */\r",
          "properties": [
            {
              "name": "displayName",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "addScore",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "addScore(participant: Entity | ScoreboardIdentity | string, scoreToAdd: number): number"
            },
            {
              "name": "getParticipants",
              "parameters": [],
              "returnType": "ScoreboardIdentity[]",
              "accessibility": "public",
              "signature": "getParticipants(): ScoreboardIdentity[]"
            },
            {
              "name": "getScore",
              "parameters": [],
              "returnType": "number | undefined",
              "accessibility": "public",
              "signature": "getScore(participant: Entity | ScoreboardIdentity | string): number | undefined"
            },
            {
              "name": "getScores",
              "parameters": [],
              "returnType": "ScoreboardScoreInfo[]",
              "accessibility": "public",
              "signature": "getScores(): ScoreboardScoreInfo[]"
            },
            {
              "name": "hasParticipant",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "hasParticipant(participant: Entity | ScoreboardIdentity | string): boolean"
            },
            {
              "name": "removeParticipant",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "removeParticipant(participant: Entity | ScoreboardIdentity | string): boolean"
            },
            {
              "name": "setScore",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setScore(participant: Entity | ScoreboardIdentity | string, score: number): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scoreboardobjective",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScoreboardScoreInfo",
          "name": "ScoreboardScoreInfo",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains a pair of a scoreboard participant and its\r respective score.\r /",
          "definition": "export class ScoreboardScoreInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant for this score.\r\n     *\r\n     */\r\n    readonly participant: ScoreboardIdentity;\r\n    /**\r\n     * @remarks\r\n     * Score value of the identity for this objective.\r\n     *\r\n     */\r\n    readonly score: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains a pair of a scoreboard participant and its\r\n * respective score.\r\n */\r",
          "properties": [
            {
              "name": "participant",
              "type": "ScoreboardIdentity",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "score",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scoreboardscoreinfo",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScreenDisplay",
          "name": "ScreenDisplay",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information about user interface elements that are\r showing up on the screen.\r ```typescript\r  function setTitle(targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length > 0) {\r     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r   }\r }\r ```\r ```typescript\r  function setTitleAndSubtitle(\r     targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r     stayDuration: 100,\r     fadeInDuration: 2,\r     fadeOutDuration: 4,\r     subtitle: \"Trouble in Block Town\",\r   });\r }\r ```\r ```typescript\r  function countdown(targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r     stayDuration: 220,\r     fadeInDuration: 2,\r     fadeOutDuration: 4,\r     subtitle: \"10\",\r   });\r    let countdown = 10;\r    const intervalId = system.runInterval(() => {\r     countdown--;\r     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r      if (countdown == 0) {\r       system.clearRun(intervalId);\r     }\r   }, 20);\r }\r ```\r /",
          "definition": "export class ScreenDisplay {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if the current reference to this screen display\r\n     * manager object is valid and functional.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getHiddenHudElements(): HudElement[];\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hideAllExcept(hudElements?: HudElement[]): void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    isForcedHidden(hudElement: HudElement): boolean;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    resetHudElementsVisibility(): void;\r\n    /**\r\n     * @remarks\r\n     * Set the action bar text - a piece of text that displays\r\n     * beneath the title and above the hot-bar.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param text\r\n     * New value for the action bar text.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     */\r\n    setActionBar(text: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets visibility of a particular element of the heads up\r\n     * display (HUD).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param visible\r\n     * Whether to set the HUD element to invisible, or to reset it\r\n     * back to its default.\r\n     * @param hudElements\r\n     * Optional list of HUD elements to configure visibility for.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setHudVisibility(visible: HudVisibility, hudElements?: HudElement[]): void;\r\n    /**\r\n     * @remarks\r\n     * Will cause a title to show up on the player's on screen\r\n     * display. Will clear the title if set to empty string. You\r\n     * can optionally specify an additional subtitle as well as\r\n     * fade in, stay and fade out times.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example setTitle.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function setTitle(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example setTitleAndSubtitle.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function setTitleAndSubtitle(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n     *     stayDuration: 100,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"Trouble in Block Town\",\r\n     *   });\r\n     * }\r\n     * ```\r\n     * @example countdown.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function countdown(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n     *     stayDuration: 220,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"10\",\r\n     *   });\r\n     *\r\n     *   let countdown = 10;\r\n     *\r\n     *   const intervalId = system.runInterval(() => {\r\n     *     countdown--;\r\n     *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n     *\r\n     *     if (countdown == 0) {\r\n     *       system.clearRun(intervalId);\r\n     *     }\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    setTitle(title: (RawMessage | string)[] | RawMessage | string, options?: TitleDisplayOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Updates the subtitle if the subtitle was previously\r\n     * displayed via the setTitle method.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example countdown.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function countdown(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n     *     stayDuration: 220,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"10\",\r\n     *   });\r\n     *\r\n     *   let countdown = 10;\r\n     *\r\n     *   const intervalId = system.runInterval(() => {\r\n     *     countdown--;\r\n     *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n     *\r\n     *     if (countdown == 0) {\r\n     *       system.clearRun(intervalId);\r\n     *     }\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    updateSubtitle(subtitle: (RawMessage | string)[] | RawMessage | string): void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information about user interface elements that are\r\n * showing up on the screen.\r\n * @example setTitle.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setTitle(targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length > 0) {\r\n *     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n *   }\r\n * }\r\n * ```\r\n * @example setTitleAndSubtitle.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setTitleAndSubtitle(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n *     stayDuration: 100,\r\n *     fadeInDuration: 2,\r\n *     fadeOutDuration: 4,\r\n *     subtitle: \"Trouble in Block Town\",\r\n *   });\r\n * }\r\n * ```\r\n * @example countdown.ts\r\n * ```typescript\r\n * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function countdown(targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n *     stayDuration: 220,\r\n *     fadeInDuration: 2,\r\n *     fadeOutDuration: 4,\r\n *     subtitle: \"10\",\r\n *   });\r\n *\r\n *   let countdown = 10;\r\n *\r\n *   const intervalId = system.runInterval(() => {\r\n *     countdown--;\r\n *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n *\r\n *     if (countdown == 0) {\r\n *       system.clearRun(intervalId);\r\n *     }\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getHiddenHudElements",
              "parameters": [],
              "returnType": "HudElement[]",
              "accessibility": "public",
              "signature": "getHiddenHudElements(): HudElement[]"
            },
            {
              "name": "hideAllExcept",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "hideAllExcept(hudElements?: HudElement[]): void"
            },
            {
              "name": "isForcedHidden",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isForcedHidden(hudElement: HudElement): boolean"
            },
            {
              "name": "resetHudElementsVisibility",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "resetHudElementsVisibility(): void"
            },
            {
              "name": "setHudVisibility",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setHudVisibility(visible: HudVisibility, hudElements?: HudElement[]): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "screendisplay",
            "class"
          ],
          "examples": [
            {
              "title": "setTitle.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction setTitle(targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length > 0) {\r\n    players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n  }\r\n}"
            },
            {
              "title": "setTitleAndSubtitle.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction setTitleAndSubtitle(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n    stayDuration: 100,\r\n    fadeInDuration: 2,\r\n    fadeOutDuration: 4,\r\n    subtitle: \"Trouble in Block Town\",\r\n  });\r\n}"
            },
            {
              "title": "countdown.ts",
              "code": "import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction countdown(targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n    stayDuration: 220,\r\n    fadeInDuration: 2,\r\n    fadeOutDuration: 4,\r\n    subtitle: \"10\",\r\n  });\r\n\n  let countdown = 10;\r\n\n  const intervalId = system.runInterval(() => {\r\n    countdown--;\r\n    players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n\n    if (countdown == 0) {\r\n      system.clearRun(intervalId);\r\n    }\r\n  }, 20);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScriptEventCommandMessageAfterEvent",
          "name": "ScriptEventCommandMessageAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Returns additional data about a /scriptevent command\r invocation.\r /",
          "definition": "export class ScriptEventCommandMessageAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of this ScriptEvent command message.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * If this command was initiated via an NPC, returns the entity\r\n     * that initiated the NPC dialogue.\r\n     *\r\n     */\r\n    readonly initiator?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional additional data passed in with the script event\r\n     * command.\r\n     *\r\n     */\r\n    readonly message: string;\r\n    /**\r\n     * @remarks\r\n     * Source block if this command was triggered via a block\r\n     * (e.g., a commandblock.)\r\n     *\r\n     */\r\n    readonly sourceBlock?: Block;\r\n    /**\r\n     * @remarks\r\n     * Source entity if this command was triggered by an entity\r\n     * (e.g., a NPC).\r\n     *\r\n     */\r\n    readonly sourceEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Returns the type of source that fired this command.\r\n     *\r\n     */\r\n    readonly sourceType: ScriptEventSource;\r\n}\r",
          "jsdoc": "/**\r\n * Returns additional data about a /scriptevent command\r\n * invocation.\r\n */\r",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "message",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "sourceType",
              "type": "ScriptEventSource",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scripteventcommandmessageafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScriptEventCommandMessageAfterEventSignal",
          "name": "ScriptEventCommandMessageAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Allows for registering an event handler that responds to\r inbound /scriptevent commands.\r /",
          "definition": "export class ScriptEventCommandMessageAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a new ScriptEvent handler.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: ScriptEventCommandMessageAfterEvent) => void,\r\n        options?: ScriptEventMessageFilterOptions,\r\n    ): (arg0: ScriptEventCommandMessageAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes a particular handler for a ScriptEvent event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ScriptEventCommandMessageAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Allows for registering an event handler that responds to\r\n * inbound /scriptevent commands.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scripteventcommandmessageaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Seat",
          "name": "Seat",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Describes a particular seating position on this rideable\r entity.\r /",
          "definition": "export class Seat {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Angle in degrees that a rider is allowed to rotate while\r\n     * riding this entity.\r\n     *\r\n     */\r\n    readonly lockRiderRotation: number;\r\n    /**\r\n     * @remarks\r\n     * A maximum number of riders that this seat can support.\r\n     *\r\n     */\r\n    readonly maxRiderCount: number;\r\n    /**\r\n     * @remarks\r\n     * A minimum number of riders that can be placed in this seat\r\n     * position, if this seat is to be filled.\r\n     *\r\n     */\r\n    readonly minRiderCount: number;\r\n    /**\r\n     * @remarks\r\n     * Physical location of this seat, relative to the entity's\r\n     * location.\r\n     *\r\n     */\r\n    readonly position: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Angle in degrees to rotate riders by.\r\n     *\r\n     */\r\n    readonly seatRotation: number;\r\n}\r",
          "jsdoc": "/**\r\n * Describes a particular seating position on this rideable\r\n * entity.\r\n */\r",
          "properties": [
            {
              "name": "lockRiderRotation",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "maxRiderCount",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "minRiderCount",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "position",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "seatRotation",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "seat",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ShutdownBeforeEventSignal",
          "name": "ShutdownBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Provides an adaptable interface for callers to subscribe to\r an event that fires before the game world shuts down. This\r event occurs after players have left, but before the world\r has closed.\r /",
          "definition": "export class ShutdownBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a new subscriber callback to this event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     */\r\n    subscribe(callback: (arg0: ShutdownEvent) => void): (arg0: ShutdownEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a subscriber callback previously subscribed to via\r\n     * the subscribe method.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function closure that was previously passed to the subscribe\r\n     * method.\r\n     */\r\n    unsubscribe(callback: (arg0: ShutdownEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Provides an adaptable interface for callers to subscribe to\r\n * an event that fires before the game world shuts down. This\r\n * event occurs after players have left, but before the world\r\n * has closed.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "shutdownbeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ShutdownEvent",
          "name": "ShutdownEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "The event object that gets dispatched when the game world is\r shutting down.\r /",
          "definition": "export class ShutdownEvent {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * The event object that gets dispatched when the game world is\r\n * shutting down.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "shutdownevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StartupBeforeEventSignal",
          "name": "StartupBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class StartupBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: StartupEvent) => void): (arg0: StartupEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: StartupEvent) => void): void;\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "startupbeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StartupEvent",
          "name": "StartupEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "This function can't be called in read-only mode.\r  This function can be called in early-execution mode.",
          "definition": "export class StartupEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly blockComponentRegistry: BlockComponentRegistry;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly customCommandRegistry: CustomCommandRegistry;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemComponentRegistry: ItemComponentRegistry;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r",
          "properties": [
            {
              "name": "blockComponentRegistry",
              "type": "BlockComponentRegistry",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "customCommandRegistry",
              "type": "CustomCommandRegistry",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemComponentRegistry",
              "type": "ItemComponentRegistry",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [
            "readonly-restricted"
          ],
          "keywords": [
            "startupevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Structure",
          "name": "Structure",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a loaded structure template (.mcstructure file).\r Structures can be placed in a world using the /structure\r /",
          "definition": "export class Structure {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The name of the structure. The identifier must include a\r\n     * namespace. For structures created via the /structure command\r\n     * or structure blocks, this namespace defaults to\r\n     * \"mystructure\".\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the Structure is valid. The Structure may\r\n     * become invalid if it is deleted.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * The dimensions of the structure. For example, a single block\r\n     * structure will have a size of {x:1, y:1, z:1}\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    readonly size: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns a BlockPermutation representing the block contained\r\n     * within the Structure at the given location.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @returns\r\n     * Returns a BlockPermutation. Returns undefined if a block\r\n     * does not exist at the given location.\r\n     * @throws\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    getBlockPermutation(location: Vector3): BlockPermutation | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the block at the given location is\r\n     * waterlogged.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @returns\r\n     * Returns whether the block at the given location is\r\n     * waterlogged. Returns false if a block does not exist at the\r\n     * given location.\r\n     * @throws\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    getIsWaterlogged(location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Creates a copy of a Structure and saves it with a new name.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the newly created Structure.\r\n     * @param saveMode\r\n     * Determines how the Structure should be saved. Defaults to\r\n     * saving to the world.\r\n     * Defaults to: 1\r\n     * @returns\r\n     * Returns the newly created structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    saveAs(identifier: string, saveMode?: StructureSaveMode): Structure;\r\n    /**\r\n     * @remarks\r\n     * Saves a modified Structure to the world file.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    saveToWorld(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a BlockPermutation within a Structure.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @param blockPermutation\r\n     * The BlockPermutation to set.\r\n     * Defaults to: null\r\n     * @param waterlogged\r\n     * Specifies whether the block should be waterlogged. Air and\r\n     * undefined blocks cannot be waterlogged.\r\n     * Defaults to: false\r\n     * @throws\r\n     * Throws if the type of block is StructureVoid.\r\n     * Throws if the block is undefined and waterlogged is set to\r\n     * true.\r\n     * Throws if the block is air and waterlogged is set to true.\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    setBlockPermutation(location: Vector3, blockPermutation?: BlockPermutation, waterlogged?: boolean): void;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a loaded structure template (.mcstructure file).\r\n * Structures can be placed in a world using the /structure\r\n * command or the {@link StructureManager} APIs.\r\n */\r",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isValid",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "size",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "getBlockPermutation",
              "parameters": [],
              "returnType": "BlockPermutation | undefined",
              "accessibility": "public",
              "signature": "getBlockPermutation(location: Vector3): BlockPermutation | undefined"
            },
            {
              "name": "getIsWaterlogged",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "getIsWaterlogged(location: Vector3): boolean"
            },
            {
              "name": "saveAs",
              "parameters": [],
              "returnType": "Structure",
              "accessibility": "public",
              "signature": "saveAs(identifier: string, saveMode?: StructureSaveMode): Structure"
            },
            {
              "name": "saveToWorld",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "saveToWorld(): void"
            },
            {
              "name": "setBlockPermutation",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setBlockPermutation(location: Vector3, blockPermutation?: BlockPermutation, waterlogged?: boolean): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "structure",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StructureManager",
          "name": "StructureManager",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manager for Structure related APIs. Includes APIs for\r creating, getting, placing and deleting Structures.\r /",
          "definition": "export class StructureManager {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Creates an empty Structure in memory. Use {@link\r\n     * Structure.setBlockPermutation} to populate the structure\r\n     * with blocks and save changes with {@link Structure.saveAs}.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure. A valid identifier must include a\r\n     * namespace and must be unique.\r\n     * @param size\r\n     * The size of the structure. For example, to create a single\r\n     * block structure the size should be {x:1, y:1, z:1}.\r\n     * @param saveMode\r\n     * How the Structure should be saved upon creation. Defaults to\r\n     * StructureSaveMode.Memory.\r\n     * Defaults to: 0\r\n     * @returns\r\n     * Returns the newly created Structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    createEmpty(identifier: string, size: Vector3, saveMode?: StructureSaveMode): Structure;\r\n    /**\r\n     * @remarks\r\n     * Creates a new Structure from blocks in the world. This is\r\n     * functionally equivalent to the /structure save command.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure. A valid identifier must include a\r\n     * namespace and must be unique.\r\n     * @param dimension\r\n     * The dimension where the blocks should be read from.\r\n     * @param options\r\n     * Additional options for creating a structure from the world.\r\n     * @returns\r\n     * Returns the newly created Structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     * Throws if the structure bounds exceed the maximum size.\r\n     * Throws if the structure bounds contains blocks outside the\r\n     * world bounds.\r\n     *\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    createFromWorld(\r\n        identifier: string,\r\n        dimension: Dimension,\r\n        from: Vector3,\r\n        to: Vector3,\r\n        options?: StructureCreateOptions,\r\n    ): Structure;\r\n    /**\r\n     * @remarks\r\n     * Deletes a structure from memory and from the world if it\r\n     * exists.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param structure\r\n     * The structure identifier or Structure object that should be\r\n     * deleted. Note, a Structure object will become invalid after\r\n     * it is deleted.\r\n     * @returns\r\n     * Returns whether the structure was removed.\r\n     * @throws\r\n     * Throws if a structure cannot be removed. For example, a\r\n     * structure loaded from a Behavior Pack.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    delete(structure: string | Structure): boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets a Structure that is saved to memory or the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure to get.\r\n     * @returns\r\n     * Returns a Structure if it exists, otherwise undefined.\r\n     */\r\n    get(identifier: string): Structure | undefined;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getWorldStructureIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Places a structure in the world. Structures placed in\r\n     * unloaded chunks will be queued for loading.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param structure\r\n     * The structure's identifier or a Structure object.\r\n     * @param dimension\r\n     * The dimension where the Structure should be placed.\r\n     * @param location\r\n     * The location within the dimension where the Structure should\r\n     * be placed.\r\n     * @param options\r\n     * Additional options for Structure placement.\r\n     * @throws\r\n     * Throws if the integrity value is outside of the range [0,1]\r\n     * Throws if the integrity seed is invalid.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    place(\r\n        structure: string | Structure,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: StructurePlaceOptions,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Places a partial jigsaw structure in the world. This is\r\n     * useful for debugging connections between jigsaw blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param pool\r\n     * The identifier of the template pool to start from.\r\n     * @param targetJigsaw\r\n     * The name of the jigsaw block to start from. This block must\r\n     * be included in at least one of the starting pool structure\r\n     * templates.\r\n     * @param maxDepth\r\n     * The maximum recursion depth for the jigsaw structure.\r\n     * @param dimension\r\n     * The dimension to place the jigsaw structure in.\r\n     * @param location\r\n     * The location where the jigsaw structure will begin\r\n     * generating relative to the targetJigsaw block.\r\n     * @param options\r\n     * Optional settings to use when generating the jigsaw\r\n     * structure.\r\n     * @returns\r\n     * Returns a {@link BlockBoundingBox} object which represents\r\n     * the maximum bounds of the jigsaw structure.\r\n     * @throws\r\n     * Throws if maxDepth is outside of the range [1,20]\r\n     * Throws if generation fails due to invalid parameters or\r\n     * jigsaw configuration.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link PlaceJigsawError}\r\n     */\r\n    placeJigsaw(\r\n        pool: string,\r\n        targetJigsaw: string,\r\n        maxDepth: number,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: JigsawPlaceOptions,\r\n    ): BlockBoundingBox;\r\n    /**\r\n     * @remarks\r\n     * Places a jigsaw structure in the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The identifier of the jigsaw structure.\r\n     * @param dimension\r\n     * The dimension to place the jigsaw structure in.\r\n     * @param location\r\n     * The location where the jigsaw structure will begin\r\n     * generating. Note that the y value will be overridden by the\r\n     * structure's start height unless the\r\n     * ignoreStarJigsawStructurePlaceOptions ignoreStartHeight\r\n     * option is set.\r\n     * @param options\r\n     * Optional settings to use when generating the jigsaw\r\n     * structure.\r\n     * @returns\r\n     * Returns a {@link BlockBoundingBox} object which represents\r\n     * the maximum bounds of the jigsaw structure.\r\n     * @throws\r\n     * Throws if generation fails due to invalid parameters or\r\n     * jigsaw configuration.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link PlaceJigsawError}\r\n     */\r\n    placeJigsawStructure(\r\n        identifier: string,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: JigsawStructurePlaceOptions,\r\n    ): BlockBoundingBox;\r\n}\r",
          "jsdoc": "/**\r\n * Manager for Structure related APIs. Includes APIs for\r\n * creating, getting, placing and deleting Structures.\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "createEmpty",
              "parameters": [],
              "returnType": "Structure",
              "accessibility": "public",
              "signature": "createEmpty(identifier: string, size: Vector3, saveMode?: StructureSaveMode): Structure"
            },
            {
              "name": "delete",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "delete(structure: string | Structure): boolean"
            },
            {
              "name": "get",
              "parameters": [],
              "returnType": "Structure | undefined",
              "accessibility": "public",
              "signature": "get(identifier: string): Structure | undefined"
            },
            {
              "name": "getWorldStructureIds",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getWorldStructureIds(): string[]"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "structuremanager",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.System",
          "name": "System",
          "type": "class",
          "module": "@minecraft/server",
          "description": "A class that provides system-level events and functions.\r /",
          "definition": "export class System {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of after-events for system-level\r\n     * operations.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly afterEvents: SystemAfterEvents;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of before-events for system-level\r\n     * operations.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly beforeEvents: SystemBeforeEvents;\r\n    /**\r\n     * @remarks\r\n     * Represents the current world tick of the server.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly currentTick: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this is a world where the editor is\r\n     * currently loaded, returns false otherwise.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly isEditorWorld: boolean;\r\n    /**\r\n     * @remarks\r\n     * Contains the device information for the server.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly serverSystemInfo: SystemInfo;\r\n    /**\r\n     * @remarks\r\n     * Cancels the execution of a job queued via {@link\r\n     * System.runJob}.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param jobId\r\n     * The job ID returned from {@link System.runJob}.\r\n     */\r\n    clearJob(jobId: number): void;\r\n    /**\r\n     * @remarks\r\n     * Cancels the execution of a function run that was previously\r\n     * scheduled via {@link System.run}.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    clearRun(runId: number): void;\r\n    /**\r\n     * @remarks\r\n     * Runs a specified function at the next available future time.\r\n     * This is frequently used to implement delayed behaviors and\r\n     * game loops. When run within the context of an event handler,\r\n     * this will generally run the code at the end of the same tick\r\n     * where the event occurred. When run in other code (a\r\n     * system.run callout), this will run the function in the next\r\n     * tick. Note, however, that depending on load on the system,\r\n     * running in the same or next tick is not guaranteed.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback to run at the next game tick.\r\n     * @returns\r\n     * An opaque identifier that can be used with the `clearRun`\r\n     * function to cancel the execution of this run.\r\n     * @example trapTick.ts\r\n     * ```typescript\r\n     * import { world, system } from \"@minecraft/server\";\r\n     *\r\n     * function trapTick() {\r\n     *   try {\r\n     *     // Minecraft runs at 20 ticks per second.\r\n     *     if (system.currentTick % 1200 === 0) {\r\n     *       world.sendMessage(\"Another minute passes...\");\r\n     *     }\r\n     *   } catch (e) {\r\n     *     console.warn(\"Error: \" + e);\r\n     *   }\r\n     *\r\n     *   system.run(trapTick);\r\n     * }\r\n     * ```\r\n     */\r\n    run(callback: () => void): number;\r\n    /**\r\n     * @remarks\r\n     * Runs a set of code on an interval.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Functional code that will run when this interval occurs.\r\n     * @param tickInterval\r\n     * An interval of every N ticks that the callback will be\r\n     * called upon.\r\n     * @returns\r\n     * An opaque handle that can be used with the clearRun method\r\n     * to stop the run of this function on an interval.\r\n     * @example every30Seconds.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function every30Seconds(targetLocation: DimensionLocation) {\r\n     *   const intervalRunIdentifier = Math.floor(Math.random() * 10000);\r\n     *\r\n     *   system.runInterval(() => {\r\n     *     world.sendMessage(\"This is an interval run \" + intervalRunIdentifier + \" sending a message every 30 seconds.\");\r\n     *   }, 600);\r\n     * }\r\n     * ```\r\n     */\r\n    runInterval(callback: () => void, tickInterval?: number): number;\r\n    /**\r\n     * @remarks\r\n     * Queues a generator to run until completion.  The generator\r\n     * will be given a time slice each tick, and will be run until\r\n     * it yields or completes.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param generator\r\n     * The instance of the generator to run.\r\n     * @returns\r\n     * An opaque handle that can be used with {@link\r\n     * System.clearJob} to stop the run of this generator.\r\n     * @example cubeGenerator.ts\r\n     * ```typescript\r\n     * import { system, BlockPermutation, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function cubeGenerator(targetLocation: DimensionLocation) {\r\n     *   const blockPerm = BlockPermutation.resolve(\"minecraft:cobblestone\");\r\n     *\r\n     *   system.runJob(blockPlacingGenerator(blockPerm, targetLocation, 15));\r\n     * }\r\n     *\r\n     * function* blockPlacingGenerator(blockPerm: BlockPermutation, startingLocation: DimensionLocation, size: number) {\r\n     *   for (let x = startingLocation.x; x < startingLocation.x + size; x++) {\r\n     *     for (let y = startingLocation.y; y < startingLocation.y + size; y++) {\r\n     *       for (let z = startingLocation.z; z < startingLocation.z + size; z++) {\r\n     *         const block = startingLocation.dimension.getBlock({ x: x, y: y, z: z });\r\n     *         if (block) {\r\n     *           block.setPermutation(blockPerm);\r\n     *         }\r\n     *         yield;\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    runJob(generator: Generator<void, void, void>): number;\r\n    /**\r\n     * @remarks\r\n     * Runs a set of code at a future time specified by tickDelay.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Functional code that will run when this timeout occurs.\r\n     * @param tickDelay\r\n     * Amount of time, in ticks, before the interval will be\r\n     * called.\r\n     * @returns\r\n     * An opaque handle that can be used with the clearRun method\r\n     * to stop the run of this function on an interval.\r\n     */\r\n    runTimeout(callback: () => void, tickDelay?: number): number;\r\n    /**\r\n     * @remarks\r\n     * Causes an event to fire within script with the specified\r\n     * message ID and payload.\r\n     *\r\n     * @param id\r\n     * Identifier of the message to send. This is custom and\r\n     * dependent on the kinds of behavior packs and content you may\r\n     * have installed within the world.\r\n     * @param message\r\n     * Data component of the message to send. This is custom and\r\n     * dependent on the kinds of behavior packs and content you may\r\n     * have installed within the world.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    sendScriptEvent(id: string, message: string): void;\r\n    /**\r\n     * @remarks\r\n     * waitTicks returns a promise that resolves after the\r\n     * requested number of ticks.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param ticks\r\n     * The amount of ticks to wait. Minimum value is 1.\r\n     * @returns\r\n     * A promise that is resolved when the specified amount of\r\n     * ticks have occurred.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     */\r\n    waitTicks(ticks: number): Promise<void>;\r\n}\r",
          "jsdoc": "/**\r\n * A class that provides system-level events and functions.\r\n */\r",
          "properties": [
            {
              "name": "afterEvents",
              "type": "SystemAfterEvents",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "beforeEvents",
              "type": "SystemBeforeEvents",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "currentTick",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isEditorWorld",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "serverSystemInfo",
              "type": "SystemInfo",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "clearJob",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearJob(jobId: number): void"
            },
            {
              "name": "clearRun",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearRun(runId: number): void"
            },
            {
              "name": "runJob",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "runJob(generator: Generator<void, void, void>): number"
            },
            {
              "name": "sendScriptEvent",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "sendScriptEvent(id: string, message: string): void"
            },
            {
              "name": "waitTicks",
              "parameters": [],
              "returnType": "Promise<void>",
              "accessibility": "public",
              "signature": "waitTicks(ticks: number): Promise<void>"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "system",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.SystemAfterEvents",
          "name": "SystemAfterEvents",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Provides a set of events that fire within the broader\r scripting system within Minecraft.\r /",
          "definition": "export class SystemAfterEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * An event that fires when a /scriptevent command is set. This\r\n     * provides a way for commands and other systems to trigger\r\n     * behavior within script.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly scriptEventReceive: ScriptEventCommandMessageAfterEventSignal;\r\n}\r",
          "jsdoc": "/**\r\n * Provides a set of events that fire within the broader\r\n * scripting system within Minecraft.\r\n */\r",
          "properties": [
            {
              "name": "scriptEventReceive",
              "type": "ScriptEventCommandMessageAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "systemafterevents",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.SystemBeforeEvents",
          "name": "SystemBeforeEvents",
          "type": "class",
          "module": "@minecraft/server",
          "description": "A set of events that fire before an actual action occurs. In\r most cases, you can potentially cancel or modify the\r impending event. Note that in before events any APIs that\r modify gameplay state will not function and will throw an\r error.\r /",
          "definition": "export class SystemBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly shutdown: ShutdownBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly startup: StartupBeforeEventSignal;\r\n}\r",
          "jsdoc": "/**\r\n * A set of events that fire before an actual action occurs. In\r\n * most cases, you can potentially cancel or modify the\r\n * impending event. Note that in before events any APIs that\r\n * modify gameplay state will not function and will throw an\r\n * error.\r\n */\r",
          "properties": [
            {
              "name": "shutdown",
              "type": "ShutdownBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "startup",
              "type": "StartupBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "systembeforeevents",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.SystemInfo",
          "name": "SystemInfo",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains device information, like memory tier.\r /",
          "definition": "export class SystemInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Describes the memory of the device.\r\n     *\r\n     */\r\n    readonly memoryTier: MemoryTier;\r\n}\r",
          "jsdoc": "/**\r\n * Contains device information, like memory tier.\r\n */\r",
          "properties": [
            {
              "name": "memoryTier",
              "type": "MemoryTier",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "systeminfo",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.TargetBlockHitAfterEvent",
          "name": "TargetBlockHitAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to a target block\r hit.\r /",
          "definition": "export class TargetBlockHitAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The position where the source hit the block.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The redstone power before the block is hit.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power at the time the block is hit.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * Optional source that hit the target block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to a target block\r\n * hit.\r\n */\r",
          "properties": [
            {
              "name": "hitVector",
              "type": "Vector3",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "previousRedstonePower",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "redstonePower",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Entity",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "targetblockhitafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.TargetBlockHitAfterEventSignal",
          "name": "TargetBlockHitAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a target block\r is hit.\r /",
          "definition": "export class TargetBlockHitAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a target block is\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: TargetBlockHitAfterEvent) => void): (arg0: TargetBlockHitAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a target block is\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: TargetBlockHitAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a target block\r\n * is hit.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "targetblockhitaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Trigger",
          "name": "Trigger",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Represents a trigger for firing an event.\r /",
          "definition": "export class Trigger {\n    /**\r\n     * @remarks\r\n     * Event name of the trigger.\r\n     *\r\n     */\r\n    eventName: string;\r\n    /**\r\n     * @remarks\r\n     * Creates a new trigger.\r\n     *\r\n     */\r\n    constructor(eventName: string);\r\n}\r",
          "jsdoc": "/**\r\n * Represents a trigger for firing an event.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "trigger",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.TripWireTripAfterEvent",
          "name": "TripWireTripAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes to a trip wire trip.\r ```typescript\r  function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a tripwire\r   const redstone = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y - 1,\r     z: targetLocation.z,\r   });\r   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r    if (redstone === undefined || tripwire === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r    world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r     const eventLoc = tripWireTripEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Tripwire trip event at tick \" +\r           system.currentTick +\r           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r       );\r     }\r   });\r }\r ```\r /",
          "definition": "export class TripWireTripAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether or not the block has redstone power.\r\n     *\r\n     */\r\n    readonly isPowered: boolean;\r\n    /**\r\n     * @remarks\r\n     * The sources that triggered the trip wire to trip.\r\n     *\r\n     */\r\n    readonly sources: Entity[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes to a trip wire trip.\r\n * @example tripWireTripEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a tripwire\r\n *   const redstone = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y - 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (redstone === undefined || tripwire === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n *   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n *\r\n *   world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n *     const eventLoc = tripWireTripEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Tripwire trip event at tick \" +\r\n *           system.currentTick +\r\n *           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "isPowered",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "sources",
              "type": "Entity[]",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "extends": "BlockEvent",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "tripwiretripafterevent",
            "class"
          ],
          "examples": [
            {
              "title": "tripWireTripEvent.ts",
              "code": "import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a tripwire\r\n  const redstone = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y - 1,\r\n    z: targetLocation.z,\r\n  });\r\n  const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (redstone === undefined || tripwire === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n  tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n\n  world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n    const eventLoc = tripWireTripEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Tripwire trip event at tick \" +\r\n          system.currentTick +\r\n          (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.TripWireTripAfterEventSignal",
          "name": "TripWireTripAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to when a trip wire is\r tripped.\r ```typescript\r  function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a tripwire\r   const redstone = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y - 1,\r     z: targetLocation.z,\r   });\r   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r    if (redstone === undefined || tripwire === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r    world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r     const eventLoc = tripWireTripEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Tripwire trip event at tick \" +\r           system.currentTick +\r           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r       );\r     }\r   });\r }\r ```\r /",
          "definition": "export class TripWireTripAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a trip wire is\r\n     * tripped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: TripWireTripAfterEvent) => void): (arg0: TripWireTripAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a trip wire is\r\n     * tripped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: TripWireTripAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to when a trip wire is\r\n * tripped.\r\n * @example tripWireTripEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a tripwire\r\n *   const redstone = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y - 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (redstone === undefined || tripwire === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n *   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n *\r\n *   world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n *     const eventLoc = tripWireTripEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Tripwire trip event at tick \" +\r\n *           system.currentTick +\r\n *           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "tripwiretripaftereventsignal",
            "class"
          ],
          "examples": [
            {
              "title": "tripWireTripEvent.ts",
              "code": "import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a tripwire\r\n  const redstone = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y - 1,\r\n    z: targetLocation.z,\r\n  });\r\n  const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (redstone === undefined || tripwire === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n  tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n\n  world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n    const eventLoc = tripWireTripEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Tripwire trip event at tick \" +\r\n          system.currentTick +\r\n          (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WeatherChangeAfterEvent",
          "name": "WeatherChangeAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes in weather in the\r environment.\r /",
          "definition": "export class WeatherChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension in which the weather has changed.\r\n     *\r\n     */\r\n    readonly dimension: string;\r\n    /**\r\n     * @remarks\r\n     * The weather type after the weather was changed.\r\n     *\r\n     */\r\n    readonly newWeather: WeatherType;\r\n    /**\r\n     * @remarks\r\n     * The weather type before the weather was changed.\r\n     *\r\n     */\r\n    readonly previousWeather: WeatherType;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes in weather in the\r\n * environment.\r\n */\r",
          "properties": [
            {
              "name": "dimension",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "newWeather",
              "type": "WeatherType",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "previousWeather",
              "type": "WeatherType",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "weatherchangeafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WeatherChangeAfterEventSignal",
          "name": "WeatherChangeAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to weather changing.\r /",
          "definition": "export class WeatherChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WeatherChangeAfterEvent) => void): (arg0: WeatherChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WeatherChangeAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to weather changing.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "weatherchangeaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WeatherChangeBeforeEvent",
          "name": "WeatherChangeBeforeEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains information related to changes in weather in the\r environment.\r /",
          "definition": "export class WeatherChangeBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the weather change will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets the duration of the new weather (in ticks).\r\n     *\r\n     */\r\n    duration: number;\r\n    /**\r\n     * @remarks\r\n     * The type of weather that will be applied.\r\n     *\r\n     */\r\n    newWeather: WeatherType;\r\n    /**\r\n     * @remarks\r\n     * The type of weather that it was prior to the event being\r\n     * fired.\r\n     *\r\n     */\r\n    readonly previousWeather: WeatherType;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information related to changes in weather in the\r\n * environment.\r\n */\r",
          "properties": [
            {
              "name": "previousWeather",
              "type": "WeatherType",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "weatherchangebeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WeatherChangeBeforeEventSignal",
          "name": "WeatherChangeBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Manages callbacks that are connected to before weather\r changing.\r /",
          "definition": "export class WeatherChangeBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WeatherChangeBeforeEvent) => void): (arg0: WeatherChangeBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WeatherChangeBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "/**\r\n * Manages callbacks that are connected to before weather\r\n * changing.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "weatherchangebeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.World",
          "name": "World",
          "type": "class",
          "module": "@minecraft/server",
          "description": "A class that wraps the state of a world - a set of\r dimensions and the environment of Minecraft.\r /",
          "definition": "export class World {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Contains a set of events that are applicable to the entirety\r\n     * of the world.  Event callbacks are called in a deferred\r\n     * manner. Event callbacks are executed in read-write mode.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly afterEvents: WorldAfterEvents;\r\n    /**\r\n     * @remarks\r\n     * Contains a set of events that are applicable to the entirety\r\n     * of the world. Event callbacks are called immediately. Event\r\n     * callbacks are executed in read-only mode.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     * @example customCommand.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function customCommand(targetLocation: DimensionLocation) {\r\n     *   const chatCallback = world.beforeEvents.chatSend.subscribe((eventData) => {\r\n     *     if (eventData.message.includes(\"cancel\")) {\r\n     *       // Cancel event if the message contains \"cancel\"\r\n     *       eventData.cancel = true;\r\n     *     } else {\r\n     *       const args = eventData.message.split(\" \");\r\n     *\r\n     *       if (args.length > 0) {\r\n     *         switch (args[0].toLowerCase()) {\r\n     *           case \"echo\":\r\n     *             // Send a modified version of chat message\r\n     *             world.sendMessage(`Echo '${eventData.message.substring(4).trim()}'`);\r\n     *             break;\r\n     *           case \"help\":\r\n     *             world.sendMessage(`Available commands: echo <message>`);\r\n     *             break;\r\n     *         }\r\n     *       }\r\n     *     }\r\n     *   });\r\n     * }\r\n     * ```\r\n     */\r\n    readonly beforeEvents: WorldBeforeEvents;\r\n    /**\r\n     * @remarks\r\n     * The game rules that apply to the world.\r\n     *\r\n     */\r\n    readonly gameRules: GameRules;\r\n    readonly isHardcore: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the general global scoreboard that applies to the\r\n     * world.\r\n     *\r\n     */\r\n    readonly scoreboard: Scoreboard;\r\n    /**\r\n     * @remarks\r\n     * Returns the manager for {@link Structure} related APIs.\r\n     *\r\n     */\r\n    readonly structureManager: StructureManager;\r\n    /**\r\n     * @remarks\r\n     * Clears the set of dynamic properties declared for this\r\n     * behavior pack within the world.\r\n     *\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Returns the absolute time since the start of the world.\r\n     *\r\n     */\r\n    getAbsoluteTime(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns an array of all active players within the world.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getAllPlayers(): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current day.\r\n     *\r\n     * @returns\r\n     * The current day, determined by the world time divided by the\r\n     * number of ticks per day. New worlds start at day 0.\r\n     */\r\n    getDay(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the default Overworld spawn location.\r\n     *\r\n     * @returns\r\n     * The default Overworld spawn location. By default, the Y\r\n     * coordinate is 32767, indicating a player's spawn height is\r\n     * not fixed and will be determined by surrounding blocks.\r\n     */\r\n    getDefaultSpawnLocation(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Gets the difficulty from the world.\r\n     *\r\n     * @returns\r\n     * Returns the world difficulty.\r\n     */\r\n    getDifficulty(): Difficulty;\r\n    /**\r\n     * @remarks\r\n     * Returns a dimension object.\r\n     *\r\n     * @param dimensionId\r\n     * The name of the dimension. For example, \"overworld\",\r\n     * \"nether\" or \"the_end\".\r\n     * @returns\r\n     * The requested dimension\r\n     * @throws\r\n     * Throws if the given dimension name is invalid\r\n     */\r\n    getDimension(dimensionId: string): Dimension;\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws\r\n     * Throws if the given dynamic property identifier is not\r\n     * defined.\r\n     * @example incrementDynamicProperty.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicProperty(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let number = world.getDynamicProperty(\"samplelibrary:number\");\r\n     *\r\n     *   log(\"Current value is: \" + number);\r\n     *\r\n     *   if (number === undefined) {\r\n     *     number = 0;\r\n     *   }\r\n     *\r\n     *   if (typeof number !== \"number\") {\r\n     *     log(\"Number is of an unexpected type.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   world.setDynamicProperty(\"samplelibrary:number\", number + 1);\r\n     * }\r\n     * ```\r\n     * @example incrementDynamicPropertyInJsonBlob.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicPropertyInJsonBlob(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let paintStr = world.getDynamicProperty(\"samplelibrary:longerjson\");\r\n     *   let paint: { color: string; intensity: number } | undefined = undefined;\r\n     *\r\n     *   log(\"Current value is: \" + paintStr);\r\n     *\r\n     *   if (paintStr === undefined) {\r\n     *     paint = {\r\n     *       color: \"purple\",\r\n     *       intensity: 0,\r\n     *     };\r\n     *   } else {\r\n     *     if (typeof paintStr !== \"string\") {\r\n     *       log(\"Paint is of an unexpected type.\");\r\n     *       return -1;\r\n     *     }\r\n     *\r\n     *     try {\r\n     *       paint = JSON.parse(paintStr);\r\n     *     } catch (e) {\r\n     *       log(\"Error parsing serialized struct.\");\r\n     *       return -1;\r\n     *     }\r\n     *   }\r\n     *\r\n     *   if (!paint) {\r\n     *     log(\"Error parsing serialized struct.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   paint.intensity++;\r\n     *   paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits\r\n     *   world.setDynamicProperty(\"samplelibrary:longerjson\", paintStr);\r\n     * }\r\n     * ```\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a set of dynamic property identifiers that have been\r\n     * set in this world.\r\n     *\r\n     * @returns\r\n     * A string array of active dynamic property identifiers.\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets the total byte count of dynamic properties. This could\r\n     * potentially be used for your own analytics to ensure you're\r\n     * not storing gigantic sets of dynamic properties.\r\n     *\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns an entity based on the provided id.\r\n     *\r\n     * @param id\r\n     * The id of the entity.\r\n     * @returns\r\n     * The requested entity object.\r\n     * @throws\r\n     * Throws if the given entity id is invalid.\r\n     */\r\n    getEntity(id: string): Entity | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the MoonPhase for the current time.\r\n     *\r\n     */\r\n    getMoonPhase(): MoonPhase;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of players based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * players returned.\r\n     * @returns\r\n     * A player array.\r\n     * @throws\r\n     * Throws if the provided EntityQueryOptions are invalid.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getPlayers(options?: EntityQueryOptions): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the time of day.\r\n     *\r\n     * @returns\r\n     * The time of day, in ticks, between 0 and 24000.\r\n     */\r\n    getTimeOfDay(): number;\r\n    /**\r\n     * @remarks\r\n     * Plays a particular music track for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     * @example playMusicAndSound.ts\r\n     * ```typescript\r\n     * import { world, MusicOptions, WorldSoundOptions, PlayerSoundOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function playMusicAndSound(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   const musicOptions: MusicOptions = {\r\n     *     fade: 0.5,\r\n     *     loop: true,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *   world.playMusic(\"music.menu\", musicOptions);\r\n     *\r\n     *   const worldSoundOptions: WorldSoundOptions = {\r\n     *     pitch: 0.5,\r\n     *     volume: 4.0,\r\n     *   };\r\n     *   world.playSound(\"ambient.weather.thunder\", targetLocation, worldSoundOptions);\r\n     *\r\n     *   const playerSoundOptions: PlayerSoundOptions = {\r\n     *     pitch: 1.0,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *\r\n     *   players[0].playSound(\"bucket.fill_water\", playerSoundOptions);\r\n     * }\r\n     * ```\r\n     */\r\n    playMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Queues an additional music track for players. If a track is\r\n     * not playing, a music track will play.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     *\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     */\r\n    queueMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Sends a message to all players.\r\n     *\r\n     * @param message\r\n     * The message to be displayed.\r\n     * @throws\r\n     * This method can throw if the provided {@link RawMessage} is\r\n     * in an invalid format. For example, if an empty `name` string\r\n     * is provided to `score`.\r\n     */\r\n    sendMessage(message: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the world time.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param absoluteTime\r\n     * The world time, in ticks.\r\n     */\r\n    setAbsoluteTime(absoluteTime: number): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a default spawn location for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param spawnLocation\r\n     * Location of the spawn point. Note that this is assumed to be\r\n     * within the overworld dimension.\r\n     * @throws\r\n     * Throws if the provided spawn location is out of bounds.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setDefaultSpawnLocation(spawnLocation: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the worlds difficulty.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param difficulty\r\n     * The difficulty we want to set the world to.\r\n     */\r\n    setDifficulty(difficulty: Difficulty): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the given dynamic property identifier is not\r\n     * defined.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     * @example incrementDynamicProperty.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicProperty(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let number = world.getDynamicProperty(\"samplelibrary:number\");\r\n     *\r\n     *   log(\"Current value is: \" + number);\r\n     *\r\n     *   if (number === undefined) {\r\n     *     number = 0;\r\n     *   }\r\n     *\r\n     *   if (typeof number !== \"number\") {\r\n     *     log(\"Number is of an unexpected type.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   world.setDynamicProperty(\"samplelibrary:number\", number + 1);\r\n     * }\r\n     * ```\r\n     * @example incrementDynamicPropertyInJsonBlob.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicPropertyInJsonBlob(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let paintStr = world.getDynamicProperty(\"samplelibrary:longerjson\");\r\n     *   let paint: { color: string; intensity: number } | undefined = undefined;\r\n     *\r\n     *   log(\"Current value is: \" + paintStr);\r\n     *\r\n     *   if (paintStr === undefined) {\r\n     *     paint = {\r\n     *       color: \"purple\",\r\n     *       intensity: 0,\r\n     *     };\r\n     *   } else {\r\n     *     if (typeof paintStr !== \"string\") {\r\n     *       log(\"Paint is of an unexpected type.\");\r\n     *       return -1;\r\n     *     }\r\n     *\r\n     *     try {\r\n     *       paint = JSON.parse(paintStr);\r\n     *     } catch (e) {\r\n     *       log(\"Error parsing serialized struct.\");\r\n     *       return -1;\r\n     *     }\r\n     *   }\r\n     *\r\n     *   if (!paint) {\r\n     *     log(\"Error parsing serialized struct.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   paint.intensity++;\r\n     *   paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits\r\n     *   world.setDynamicProperty(\"samplelibrary:longerjson\", paintStr);\r\n     * }\r\n     * ```\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the time of day.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param timeOfDay\r\n     * The time of day, in ticks, between 0 and 24000.\r\n     * @throws\r\n     * Throws if the provided time of day is not within the valid\r\n     * range.\r\n     */\r\n    setTimeOfDay(timeOfDay: number | TimeOfDay): void;\r\n    /**\r\n     * @remarks\r\n     * Stops any music tracks from playing.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    stopMusic(): void;\r\n}\r",
          "jsdoc": "/**\r\n * A class that wraps the state of a world - a set of\r\n * dimensions and the environment of Minecraft.\r\n */\r",
          "properties": [
            {
              "name": "afterEvents",
              "type": "WorldAfterEvents",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "beforeEvents",
              "type": "WorldBeforeEvents",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "gameRules",
              "type": "GameRules",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "isHardcore",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "scoreboard",
              "type": "Scoreboard",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "structureManager",
              "type": "StructureManager",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "clearDynamicProperties",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "clearDynamicProperties(): void"
            },
            {
              "name": "getAbsoluteTime",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getAbsoluteTime(): number"
            },
            {
              "name": "getAllPlayers",
              "parameters": [],
              "returnType": "Player[]",
              "accessibility": "public",
              "signature": "getAllPlayers(): Player[]"
            },
            {
              "name": "getDay",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getDay(): number"
            },
            {
              "name": "getDefaultSpawnLocation",
              "parameters": [],
              "returnType": "Vector3",
              "accessibility": "public",
              "signature": "getDefaultSpawnLocation(): Vector3"
            },
            {
              "name": "getDifficulty",
              "parameters": [],
              "returnType": "Difficulty",
              "accessibility": "public",
              "signature": "getDifficulty(): Difficulty"
            },
            {
              "name": "getDimension",
              "parameters": [],
              "returnType": "Dimension",
              "accessibility": "public",
              "signature": "getDimension(dimensionId: string): Dimension"
            },
            {
              "name": "getDynamicProperty",
              "parameters": [],
              "returnType": "boolean | number | string | Vector3 | undefined",
              "accessibility": "public",
              "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
            },
            {
              "name": "getDynamicPropertyIds",
              "parameters": [],
              "returnType": "string[]",
              "accessibility": "public",
              "signature": "getDynamicPropertyIds(): string[]"
            },
            {
              "name": "getDynamicPropertyTotalByteCount",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getDynamicPropertyTotalByteCount(): number"
            },
            {
              "name": "getEntity",
              "parameters": [],
              "returnType": "Entity | undefined",
              "accessibility": "public",
              "signature": "getEntity(id: string): Entity | undefined"
            },
            {
              "name": "getMoonPhase",
              "parameters": [],
              "returnType": "MoonPhase",
              "accessibility": "public",
              "signature": "getMoonPhase(): MoonPhase"
            },
            {
              "name": "getPlayers",
              "parameters": [],
              "returnType": "Player[]",
              "accessibility": "public",
              "signature": "getPlayers(options?: EntityQueryOptions): Player[]"
            },
            {
              "name": "getTimeOfDay",
              "parameters": [],
              "returnType": "number",
              "accessibility": "public",
              "signature": "getTimeOfDay(): number"
            },
            {
              "name": "playMusic",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "playMusic(trackId: string, musicOptions?: MusicOptions): void"
            },
            {
              "name": "queueMusic",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "queueMusic(trackId: string, musicOptions?: MusicOptions): void"
            },
            {
              "name": "setAbsoluteTime",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setAbsoluteTime(absoluteTime: number): void"
            },
            {
              "name": "setDefaultSpawnLocation",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setDefaultSpawnLocation(spawnLocation: Vector3): void"
            },
            {
              "name": "setDifficulty",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setDifficulty(difficulty: Difficulty): void"
            },
            {
              "name": "setDynamicProperty",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
            },
            {
              "name": "setTimeOfDay",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "setTimeOfDay(timeOfDay: number | TimeOfDay): void"
            },
            {
              "name": "stopMusic",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "stopMusic(): void"
            }
          ],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "world",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WorldAfterEvents",
          "name": "WorldAfterEvents",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Contains a set of events that are available across the scope\r of the World.\r /",
          "definition": "export class WorldAfterEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event fires for each BlockLocation destroyed by an\r\n     * explosion. It is fired after the blocks have already been\r\n     * destroyed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly blockExplode: BlockExplodeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a button is pushed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly buttonPush: ButtonPushAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired when an entity event has been triggered\r\n     * that will update the component definition state of an\r\n     * entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly dataDrivenEntityTrigger: DataDrivenEntityTriggerAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an effect, like poisoning, is added to\r\n     * an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly effectAdd: EffectAddAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity dies.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityDie: EntityDieAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when entity health changes in any degree.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHealthChanged: EntityHealthChangedAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity hits (that is, melee\r\n     * attacks) a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHitBlock: EntityHitBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity hits (that is, melee\r\n     * attacks) another entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHitEntity: EntityHitEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity is hurt (takes damage).\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHurt: EntityHurtAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when an entity is loaded.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityLoad: EntityLoadAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when an entity is removed (for example, potentially\r\n     * unloaded, or removed after being killed).\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityRemove: EntityRemoveAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity is spawned.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entitySpawn: EntitySpawnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired after an explosion occurs.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly explosion: ExplosionAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a world.gameRules property has\r\n     * changed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly gameRuleChange: GameRuleChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item completes charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemCompleteUse: ItemCompleteUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item is released from\r\n     * charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemReleaseUse: ItemReleaseUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item starts charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStartUse: ItemStartUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player successfully uses an item or\r\n     * places a block by pressing the Use Item / Place Block\r\n     * button. If multiple blocks are placed, this event will only\r\n     * occur once at the beginning of the block placement. Note:\r\n     * This event cannot be used with Hoe or Axe items.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStartUseOn: ItemStartUseOnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item stops charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStopUse: ItemStopUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player releases the Use Item / Place\r\n     * Block button after successfully using an item. Note: This\r\n     * event cannot be used with Hoe or Axe items.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStopUseOn: ItemStopUseOnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item is successfully used by a\r\n     * player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemUse: ItemUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A lever has been pulled.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly leverAction: LeverActionAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a piston expands or retracts.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pistonActivate: PistonActivateAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires for a block that is broken by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerBreakBlock: PlayerBreakBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an {@link InputButton} state is\r\n     * changed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerButtonInput: PlayerButtonInputAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when a player moved to a different dimension.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerDimensionChange: PlayerDimensionChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerEmote: PlayerEmoteAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerGameModeChange: PlayerGameModeChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player's selected slot changes.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerHotbarSelectedSlotChange: PlayerHotbarSelectedSlotChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player's {@link InputMode} changes.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInputModeChange: PlayerInputModeChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a players input permissions change.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInputPermissionCategoryChange: PlayerInputPermissionCategoryChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * An event for when a player interacts with a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithBlock: PlayerInteractWithBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player interacts with an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithEntity: PlayerInteractWithEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item gets added or removed to the\r\n     * player's inventory.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInventoryItemChange: PlayerInventoryItemChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player joins a world.  See also\r\n     * playerSpawn for another related event you can trap for when\r\n     * a player is spawned the first time within a world.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerJoin: PlayerJoinAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player leaves a world.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerLeave: PlayerLeaveAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires for a block that is placed by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerPlaceBlock: PlayerPlaceBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player spawns or respawns. Note that\r\n     * an additional flag within this event will tell you whether\r\n     * the player is spawning right after join vs. a respawn.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerSpawn: PlayerSpawnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A pressure plate has popped back up (i.e., there are no\r\n     * entities on the pressure plate.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pressurePlatePop: PressurePlatePopAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A pressure plate has pushed (at least one entity has moved\r\n     * onto a pressure plate.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pressurePlatePush: PressurePlatePushAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a projectile hits a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly projectileHitBlock: ProjectileHitBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a projectile hits an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly projectileHitEntity: ProjectileHitEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A target block was hit.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly targetBlockHit: TargetBlockHitAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A trip wire was tripped.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly tripWireTrip: TripWireTripAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event will be triggered when the weather changes within\r\n     * Minecraft.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly weatherChange: WeatherChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly worldLoad: WorldLoadAfterEventSignal;\r\n}\r",
          "jsdoc": "/**\r\n * Contains a set of events that are available across the scope\r\n * of the World.\r\n */\r",
          "properties": [
            {
              "name": "blockExplode",
              "type": "BlockExplodeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "buttonPush",
              "type": "ButtonPushAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "dataDrivenEntityTrigger",
              "type": "DataDrivenEntityTriggerAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "effectAdd",
              "type": "EffectAddAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entityDie",
              "type": "EntityDieAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entityHealthChanged",
              "type": "EntityHealthChangedAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entityHitBlock",
              "type": "EntityHitBlockAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entityHitEntity",
              "type": "EntityHitEntityAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entityHurt",
              "type": "EntityHurtAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entityLoad",
              "type": "EntityLoadAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entityRemove",
              "type": "EntityRemoveAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entitySpawn",
              "type": "EntitySpawnAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "explosion",
              "type": "ExplosionAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "gameRuleChange",
              "type": "GameRuleChangeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemCompleteUse",
              "type": "ItemCompleteUseAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemReleaseUse",
              "type": "ItemReleaseUseAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemStartUse",
              "type": "ItemStartUseAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemStartUseOn",
              "type": "ItemStartUseOnAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemStopUse",
              "type": "ItemStopUseAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemStopUseOn",
              "type": "ItemStopUseOnAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemUse",
              "type": "ItemUseAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "leverAction",
              "type": "LeverActionAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "pistonActivate",
              "type": "PistonActivateAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerBreakBlock",
              "type": "PlayerBreakBlockAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerButtonInput",
              "type": "PlayerButtonInputAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerDimensionChange",
              "type": "PlayerDimensionChangeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerEmote",
              "type": "PlayerEmoteAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerGameModeChange",
              "type": "PlayerGameModeChangeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerHotbarSelectedSlotChange",
              "type": "PlayerHotbarSelectedSlotChangeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerInputModeChange",
              "type": "PlayerInputModeChangeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerInputPermissionCategoryChange",
              "type": "PlayerInputPermissionCategoryChangeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerInteractWithBlock",
              "type": "PlayerInteractWithBlockAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerInteractWithEntity",
              "type": "PlayerInteractWithEntityAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerInventoryItemChange",
              "type": "PlayerInventoryItemChangeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerJoin",
              "type": "PlayerJoinAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerLeave",
              "type": "PlayerLeaveAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerPlaceBlock",
              "type": "PlayerPlaceBlockAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerSpawn",
              "type": "PlayerSpawnAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "pressurePlatePop",
              "type": "PressurePlatePopAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "pressurePlatePush",
              "type": "PressurePlatePushAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "projectileHitBlock",
              "type": "ProjectileHitBlockAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "projectileHitEntity",
              "type": "ProjectileHitEntityAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "targetBlockHit",
              "type": "TargetBlockHitAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "tripWireTrip",
              "type": "TripWireTripAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "weatherChange",
              "type": "WeatherChangeAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "worldLoad",
              "type": "WorldLoadAfterEventSignal",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "worldafterevents",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WorldBeforeEvents",
          "name": "WorldBeforeEvents",
          "type": "class",
          "module": "@minecraft/server",
          "description": "A set of events that fire before an actual action occurs. In\r most cases, you can potentially cancel or modify the\r impending event. Note that in before events any APIs that\r modify gameplay state will not function and will throw an\r error. (e.g., dimension.spawnEntity)\r /",
          "definition": "export class WorldBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event is triggered after an event has been added to an\r\n     * entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly effectAdd: EffectAddBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before an entity is removed from the world (for\r\n     * example, unloaded or removed after being killed.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityRemove: EntityRemoveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired after an explosion occurs.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly explosion: ExplosionBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item is successfully used by a\r\n     * player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemUse: ItemUseBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires before a block is broken by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerBreakBlock: PlayerBreakBlockBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerGameModeChange: PlayerGameModeChangeBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before a player interacts with a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithBlock: PlayerInteractWithBlockBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before a player interacts with an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithEntity: PlayerInteractWithEntityBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when a player leaves the game.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerLeave: PlayerLeaveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly weatherChange: WeatherChangeBeforeEventSignal;\r\n}\r",
          "jsdoc": "/**\r\n * A set of events that fire before an actual action occurs. In\r\n * most cases, you can potentially cancel or modify the\r\n * impending event. Note that in before events any APIs that\r\n * modify gameplay state will not function and will throw an\r\n * error. (e.g., dimension.spawnEntity)\r\n */\r",
          "properties": [
            {
              "name": "effectAdd",
              "type": "EffectAddBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "entityRemove",
              "type": "EntityRemoveBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "explosion",
              "type": "ExplosionBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "itemUse",
              "type": "ItemUseBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerBreakBlock",
              "type": "PlayerBreakBlockBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerGameModeChange",
              "type": "PlayerGameModeChangeBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerInteractWithBlock",
              "type": "PlayerInteractWithBlockBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerInteractWithEntity",
              "type": "PlayerInteractWithEntityBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "playerLeave",
              "type": "PlayerLeaveBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "weatherChange",
              "type": "WeatherChangeBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "worldbeforeevents",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WorldLoadAfterEvent",
          "name": "WorldLoadAfterEvent",
          "type": "class",
          "module": "@minecraft/server",
          "description": "This property can be read in early-execution mode.",
          "definition": "export class WorldLoadAfterEvent {\n    private constructor();\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "worldloadafterevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WorldLoadAfterEventSignal",
          "name": "WorldLoadAfterEventSignal",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class WorldLoadAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WorldLoadAfterEvent) => void): (arg0: WorldLoadAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WorldLoadAfterEvent) => void): void;\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "worldloadaftereventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockBoundingBox",
          "name": "BlockBoundingBox",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "A BlockBoundingBox is an interface to an object which\r represents an AABB aligned rectangle.\r The BlockBoundingBox assumes that it was created in a valid\r state (min <= max) but cannot guarantee it (unless it was\r The min/max coordinates represent the diametrically opposite\r corners of the rectangle.\r The BlockBoundingBox is not a representation of blocks - it\r has no association with any type, it is just a mathematical\r construct - so a rectangle with\r ( 0,0,0 ) -> ( 0,0,0 )\r BlockVolume} object)\r /",
          "definition": "export interface BlockBoundingBox {\n    /**\r\n     * @remarks\r\n     * A {@link Vector3} that represents the largest corner of the\r\n     * rectangle\r\n     *\r\n     */\r\n    max: Vector3;\r\n    /**\r\n     * @remarks\r\n     * A {@link Vector3} that represents the smallest corner of the\r\n     * rectangle\r\n     *\r\n     */\r\n    min: Vector3;\r\n}\r",
          "jsdoc": "/**\r\n * A BlockBoundingBox is an interface to an object which\r\n * represents an AABB aligned rectangle.\r\n * The BlockBoundingBox assumes that it was created in a valid\r\n * state (min <= max) but cannot guarantee it (unless it was\r\n * created using the associated {@link\r\n * @minecraft/server.BlockBoundingBoxUtils} utility functions.\r\n * The min/max coordinates represent the diametrically opposite\r\n * corners of the rectangle.\r\n * The BlockBoundingBox is not a representation of blocks - it\r\n * has no association with any type, it is just a mathematical\r\n * construct - so a rectangle with\r\n * ( 0,0,0 ) -> ( 0,0,0 )\r\n * has a size of ( 0,0,0 ) (unlike the very similar {@link\r\n * BlockVolume} object)\r\n */\r",
          "properties": [
            {
              "name": "max",
              "type": "Vector3",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "min",
              "type": "Vector3",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockboundingbox",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockCustomComponent",
          "name": "BlockCustomComponent",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains a set of events that will be raised for a block.\r This object must be bound using the BlockRegistry.\r /",
          "definition": "export interface BlockCustomComponent {\n    /**\r\n     * @remarks\r\n     * This function will be called before a player places the\r\n     * block.\r\n     *\r\n     */\r\n    beforeOnPlayerPlace?: (arg0: BlockComponentPlayerPlaceBeforeEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity falls onto the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onEntityFallOn?: (arg0: BlockComponentEntityFallOnEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when the block that this custom\r\n     * component is bound to is placed.\r\n     *\r\n     */\r\n    onPlace?: (arg0: BlockComponentOnPlaceEvent, arg1: CustomComponentParameters) => void;\r\n    onPlayerBreak?: (arg0: BlockComponentPlayerBreakEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a player sucessfully\r\n     * interacts with the block that this custom component is bound\r\n     * to.\r\n     *\r\n     */\r\n    onPlayerInteract?: (arg0: BlockComponentPlayerInteractEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a block randomly ticks.\r\n     *\r\n     */\r\n    onRandomTick?: (arg0: BlockComponentRandomTickEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity steps off the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onStepOff?: (arg0: BlockComponentStepOffEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity steps onto the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onStepOn?: (arg0: BlockComponentStepOnEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a block ticks.\r\n     *\r\n     */\r\n    onTick?: (arg0: BlockComponentTickEvent, arg1: CustomComponentParameters) => void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains a set of events that will be raised for a block.\r\n * This object must be bound using the BlockRegistry.\r\n */\r",
          "properties": [
            {
              "name": "beforeOnPlayerPlace",
              "type": "(arg0: BlockComponentPlayerPlaceBeforeEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onEntityFallOn",
              "type": "(arg0: BlockComponentEntityFallOnEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onPlace",
              "type": "(arg0: BlockComponentOnPlaceEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onPlayerBreak",
              "type": "(arg0: BlockComponentPlayerBreakEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onPlayerInteract",
              "type": "(arg0: BlockComponentPlayerInteractEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onRandomTick",
              "type": "(arg0: BlockComponentRandomTickEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onStepOff",
              "type": "(arg0: BlockComponentStepOffEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onStepOn",
              "type": "(arg0: BlockComponentStepOnEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onTick",
              "type": "(arg0: BlockComponentTickEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcustomcomponent",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockEventOptions",
          "name": "BlockEventOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains optional parameters for registering a block event.\r /",
          "definition": "export interface BlockEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted block's type matches this parameter.\r\n     *\r\n     */\r\n    blockTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted block's permutation matches this parameter.\r\n     *\r\n     */\r\n    permutations?: BlockPermutation[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains optional parameters for registering a block event.\r\n */\r",
          "properties": [
            {
              "name": "blockTypes",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "permutations",
              "type": "BlockPermutation[]",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockeventoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockFillOptions",
          "name": "BlockFillOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for a block fill operation.\r /",
          "definition": "export interface BlockFillOptions {\n    /**\r\n     * @remarks\r\n     * When specified, the fill operation will include / exclude\r\n     * the blocks added to the block filter.\r\n     *\r\n     */\r\n    blockFilter?: BlockFilter;\r\n    /**\r\n     * @remarks\r\n     * When true fillBlocks will not error if part of the fill\r\n     * volume is outside of loaded chunks bounds. Instead it will\r\n     * just fill the blocks that are inside the loaded chunk bounds\r\n     * and ignoring blocks outside.\r\n     *\r\n     */\r\n    ignoreChunkBoundErrors?: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for a block fill operation.\r\n */\r",
          "properties": [
            {
              "name": "blockFilter",
              "type": "BlockFilter",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "ignoreChunkBoundErrors",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockfilloptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockFilter",
          "name": "BlockFilter",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Options to include or exclude blocks based on type, tag or\r permutation. If no include options are added it will select\r all blocks that are not rejected by the exclude options. If\r at least one include option is added the block must match\r one of the include options to not be rejected.\r /",
          "definition": "export interface BlockFilter {\n    /**\r\n     * @remarks\r\n     * Array of block permutations that the filter should reject if\r\n     * any matches.\r\n     *\r\n     */\r\n    excludePermutations?: BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * Array of block tags that the filter should reject if any\r\n     * matches.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block types that the filter should reject if any\r\n     * matches.\r\n     *\r\n     */\r\n    excludeTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block permutations that the filter should select if\r\n     * at least one matches.\r\n     *\r\n     */\r\n    includePermutations?: BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * Array of block tags that the filter should select if at\r\n     * least one matches.\r\n     *\r\n     */\r\n    includeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block types that the filter should select if at\r\n     * least one matches.\r\n     *\r\n     */\r\n    includeTypes?: string[];\r\n}\r",
          "jsdoc": "/**\r\n * Options to include or exclude blocks based on type, tag or\r\n * permutation. If no include options are added it will select\r\n * all blocks that are not rejected by the exclude options. If\r\n * at least one include option is added the block must match\r\n * one of the include options to not be rejected.\r\n */\r",
          "properties": [
            {
              "name": "excludePermutations",
              "type": "BlockPermutation[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "excludeTags",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "excludeTypes",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includePermutations",
              "type": "BlockPermutation[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeTags",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeTypes",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockfilter",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockHitInformation",
          "name": "BlockHitInformation",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains more information for events where a block is hit.\r /",
          "definition": "export interface BlockHitInformation {\n    /**\r\n     * @remarks\r\n     * Block that was hit.\r\n     *\r\n     */\r\n    block: Block;\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block.\r\n     *\r\n     */\r\n    faceLocation: Vector3;\r\n}\r",
          "jsdoc": "/**\r\n * Contains more information for events where a block is hit.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "face",
              "type": "Direction",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "faceLocation",
              "type": "Vector3",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockhitinformation",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockRaycastHit",
          "name": "BlockRaycastHit",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains information for block raycast hit results.\r /",
          "definition": "export interface BlockRaycastHit {\n    /**\r\n     * @remarks\r\n     * Block that was hit.\r\n     *\r\n     */\r\n    block: Block;\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Hit location relative to the bottom north-west corner of the\r\n     * block.\r\n     *\r\n     */\r\n    faceLocation: Vector3;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information for block raycast hit results.\r\n */\r",
          "properties": [
            {
              "name": "block",
              "type": "Block",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "face",
              "type": "Direction",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "faceLocation",
              "type": "Vector3",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockraycasthit",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockRaycastOptions",
          "name": "BlockRaycastOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for configuring a block raycast\r query.\r /",
          "definition": "export interface BlockRaycastOptions extends BlockFilter {\n    /**\r\n     * @remarks\r\n     * If true, liquid blocks will be considered as blocks that\r\n     * 'stop' the raycast.\r\n     *\r\n     */\r\n    includeLiquidBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, passable blocks like vines and flowers will be\r\n     * considered as blocks that 'stop' the raycast.\r\n     *\r\n     */\r\n    includePassableBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Maximum distance, in blocks, to process the raycast.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for configuring a block raycast\r\n * query.\r\n */\r",
          "properties": [
            {
              "name": "includeLiquidBlocks",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includePassableBlocks",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "maxDistance",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "extends": "BlockFilter",
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockraycastoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CameraFadeOptions",
          "name": "CameraFadeOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Used to initiate a full-screen color fade.\r /",
          "definition": "export interface CameraFadeOptions {\n    /**\r\n     * @remarks\r\n     * Fade color to use.\r\n     *\r\n     */\r\n    fadeColor?: RGB;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds for the fade-in, hold, and fade-out seconds.\r\n     *\r\n     */\r\n    fadeTime?: CameraFadeTimeOptions;\r\n}\r",
          "jsdoc": "/**\r\n * Used to initiate a full-screen color fade.\r\n */\r",
          "properties": [
            {
              "name": "fadeColor",
              "type": "RGB",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "fadeTime",
              "type": "CameraFadeTimeOptions",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "camerafadeoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CameraFadeTimeOptions",
          "name": "CameraFadeTimeOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains timings for a fade transition.\r /",
          "definition": "export interface CameraFadeTimeOptions {\n    /**\r\n     * @remarks\r\n     * Time, in seconds, for a fade-in.\r\n     *\r\n     */\r\n    fadeInTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time, in seconds, for a fade-out.\r\n     *\r\n     */\r\n    fadeOutTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time, in seconds, to hold the full screen color.\r\n     *\r\n     */\r\n    holdTime: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains timings for a fade transition.\r\n */\r",
          "properties": [
            {
              "name": "fadeInTime",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "fadeOutTime",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "holdTime",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "camerafadetimeoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CameraFixedBoomOptions",
          "name": "CameraFixedBoomOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Options to control pivot points and offsets of the third\r person boom preset.\r /",
          "definition": "export interface CameraFixedBoomOptions {\n    /**\r\n     * @remarks\r\n     * Changes the pivot point to be <x, y, z> away from the\r\n     * player.\r\n     *\r\n     */\r\n    entityOffset?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Offsets the camera from center by <x, y>.\r\n     *\r\n     */\r\n    viewOffset?: Vector2;\r\n}\r",
          "jsdoc": "/**\r\n * Options to control pivot points and offsets of the third\r\n * person boom preset.\r\n */\r",
          "properties": [
            {
              "name": "entityOffset",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "viewOffset",
              "type": "Vector2",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "camerafixedboomoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CameraSetFacingOptions",
          "name": "CameraSetFacingOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Offsets the camera from center by <x, y>.",
          "definition": "export interface CameraSetFacingOptions {\n    easeOptions?: EaseOptions;\r\n    facingEntity: Entity;\r\n    location?: Vector3;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Offsets the camera from center by <x, y>.\r\n     *\r\n     */\r",
          "properties": [
            {
              "name": "easeOptions",
              "type": "EaseOptions",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "facingEntity",
              "type": "Entity",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "camerasetfacingoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CameraSetLocationOptions",
          "name": "CameraSetLocationOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "definition": "export interface CameraSetLocationOptions {\n    easeOptions?: EaseOptions;\r\n    location: Vector3;\r\n}\r",
          "jsdoc": "",
          "properties": [
            {
              "name": "easeOptions",
              "type": "EaseOptions",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "camerasetlocationoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CameraSetPosOptions",
          "name": "CameraSetPosOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "definition": "export interface CameraSetPosOptions {\n    easeOptions?: EaseOptions;\r\n    facingLocation: Vector3;\r\n    location?: Vector3;\r\n}\r",
          "jsdoc": "",
          "properties": [
            {
              "name": "easeOptions",
              "type": "EaseOptions",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "facingLocation",
              "type": "Vector3",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "camerasetposoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CameraSetRotOptions",
          "name": "CameraSetRotOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "definition": "export interface CameraSetRotOptions {\n    easeOptions?: EaseOptions;\r\n    location?: Vector3;\r\n    rotation: Vector2;\r\n}\r",
          "jsdoc": "",
          "properties": [
            {
              "name": "easeOptions",
              "type": "EaseOptions",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "rotation",
              "type": "Vector2",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "camerasetrotoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CameraTargetOptions",
          "name": "CameraTargetOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Used to target an entity with a free camera.\r /",
          "definition": "export interface CameraTargetOptions {\n    /**\r\n     * @remarks\r\n     * Set an <x, y, z> offset from the target entity's center.\r\n     *\r\n     */\r\n    offsetFromTargetCenter?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The singular entity you want to target.\r\n     *\r\n     */\r\n    targetEntity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Used to target an entity with a free camera.\r\n */\r",
          "properties": [
            {
              "name": "offsetFromTargetCenter",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "targetEntity",
              "type": "Entity",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "cameratargetoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommand",
          "name": "CustomCommand",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Define the custom command, including name, permissions, and\r parameters.\r /",
          "definition": "export interface CustomCommand {\n    /**\r\n     * @remarks\r\n     * Cheats must be enabled to run this command. Defaults to\r\n     * true.\r\n     *\r\n     */\r\n    cheatsRequired?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Command description as seen on the command line.\r\n     *\r\n     */\r\n    description: string;\r\n    /**\r\n     * @remarks\r\n     * List of mandatory command parameters.\r\n     *\r\n     */\r\n    mandatoryParameters?: CustomCommandParameter[];\r\n    /**\r\n     * @remarks\r\n     * The name of the command. A namespace is required.\r\n     *\r\n     */\r\n    name: string;\r\n    /**\r\n     * @remarks\r\n     * List of optional command parameters.\r\n     *\r\n     */\r\n    optionalParameters?: CustomCommandParameter[];\r\n    /**\r\n     * @remarks\r\n     * The permission level required to execute the command.\r\n     *\r\n     */\r\n    permissionLevel: CommandPermissionLevel;\r\n}\r",
          "jsdoc": "/**\r\n * Define the custom command, including name, permissions, and\r\n * parameters.\r\n */\r",
          "properties": [
            {
              "name": "cheatsRequired",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "description",
              "type": "string",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "mandatoryParameters",
              "type": "CustomCommandParameter[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "name",
              "type": "string",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "optionalParameters",
              "type": "CustomCommandParameter[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "permissionLevel",
              "type": "CommandPermissionLevel",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommand",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandParameter",
          "name": "CustomCommandParameter",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Definition for each parameter expected by the custom\r command.\r /",
          "definition": "export interface CustomCommandParameter {\n    /**\r\n     * @remarks\r\n     * The name of parameter as it appears on the command line.\r\n     *\r\n     */\r\n    name: string;\r\n    /**\r\n     * @remarks\r\n     * The data type of the parameter.\r\n     *\r\n     */\r\n    type: CustomCommandParamType;\r\n}\r",
          "jsdoc": "/**\r\n * Definition for each parameter expected by the custom\r\n * command.\r\n */\r",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "type",
              "type": "CustomCommandParamType",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommandparameter",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandResult",
          "name": "CustomCommandResult",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Interface returned from custom command callback function.\r /",
          "definition": "export interface CustomCommandResult {\n    /**\r\n     * @remarks\r\n     * Message displayed to chat after command execution.\r\n     *\r\n     */\r\n    message?: string;\r\n    /**\r\n     * @remarks\r\n     * Command execution Success or Failure. Determines how the\r\n     * status message is displayed.\r\n     *\r\n     */\r\n    status: CustomCommandStatus;\r\n}\r",
          "jsdoc": "/**\r\n * Interface returned from custom command callback function.\r\n */\r",
          "properties": [
            {
              "name": "message",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "status",
              "type": "CustomCommandStatus",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommandresult",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.DefinitionModifier",
          "name": "DefinitionModifier",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains a set of updates to the component definition state\r of an entity.\r /",
          "definition": "export interface DefinitionModifier {\n    /**\r\n     * @remarks\r\n     * Retrieves the list of component groups that will be added\r\n     * via this definition modification.\r\n     *\r\n     */\r\n    addedComponentGroups: string[];\r\n    /**\r\n     * @remarks\r\n     * The list of component groups that will be removed via this\r\n     * definition modification.\r\n     *\r\n     */\r\n    removedComponentGroups: string[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains a set of updates to the component definition state\r\n * of an entity.\r\n */\r",
          "properties": [
            {
              "name": "addedComponentGroups",
              "type": "string[]",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "removedComponentGroups",
              "type": "string[]",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "definitionmodifier",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.DimensionLocation",
          "name": "DimensionLocation",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "An exact coordinate within the world, including its\r dimension and location.\r /",
          "definition": "export interface DimensionLocation {\n    /**\r\n     * @remarks\r\n     * Dimension that this coordinate is associated with.\r\n     *\r\n     */\r\n    dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * X component of this dimension-location.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of this dimension-location.\r\n     *\r\n     */\r\n    y: number;\r\n    /**\r\n     * @remarks\r\n     * Z component of this dimension-location.\r\n     *\r\n     */\r\n    z: number;\r\n}\r",
          "jsdoc": "/**\r\n * An exact coordinate within the world, including its\r\n * dimension and location.\r\n */\r",
          "properties": [
            {
              "name": "dimension",
              "type": "Dimension",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "x",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "y",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "z",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "dimensionlocation",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EaseOptions",
          "name": "EaseOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains options associated with easing between positions\r and/or rotations.\r /",
          "definition": "export interface EaseOptions {\n    /**\r\n     * @remarks\r\n     * Time for the ease operation.\r\n     *\r\n     */\r\n    easeTime?: number;\r\n    /**\r\n     * @remarks\r\n     * Type of ease operation to use.\r\n     *\r\n     */\r\n    easeType?: EasingType;\r\n}\r",
          "jsdoc": "/**\r\n * Contains options associated with easing between positions\r\n * and/or rotations.\r\n */\r",
          "properties": [
            {
              "name": "easeTime",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "easeType",
              "type": "EasingType",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "easeoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Enchantment",
          "name": "Enchantment",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "This interface represents a specific leveled enchantment\r that is applied to an item.\r /",
          "definition": "export interface Enchantment {\n    /**\r\n     * @remarks\r\n     * The level of this enchantment instance.\r\n     *\r\n     */\r\n    level: number;\r\n    /**\r\n     * @remarks\r\n     * The enchantment type of this instance.\r\n     *\r\n     */\r\n    type: EnchantmentType;\r\n}\r",
          "jsdoc": "/**\r\n * This interface represents a specific leveled enchantment\r\n * that is applied to an item.\r\n */\r",
          "properties": [
            {
              "name": "level",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "type",
              "type": "EnchantmentType",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "enchantment",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityApplyDamageByProjectileOptions",
          "name": "EntityApplyDamageByProjectileOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Additional options for when damage has been applied via a\r projectile.\r /",
          "definition": "export interface EntityApplyDamageByProjectileOptions {\n    /**\r\n     * @remarks\r\n     * Optional entity that fired the projectile.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Projectile that caused damage.\r\n     *\r\n     */\r\n    damagingProjectile: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Additional options for when damage has been applied via a\r\n * projectile.\r\n */\r",
          "properties": [
            {
              "name": "damagingEntity",
              "type": "Entity",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "damagingProjectile",
              "type": "Entity",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityapplydamagebyprojectileoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityApplyDamageOptions",
          "name": "EntityApplyDamageOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Additional descriptions and metadata for a damage event.\r /",
          "definition": "export interface EntityApplyDamageOptions {\n    /**\r\n     * @remarks\r\n     * Underlying cause of the damage.\r\n     *\r\n     */\r\n    cause: EntityDamageCause;\r\n    /**\r\n     * @remarks\r\n     * Optional entity that caused the damage.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Additional descriptions and metadata for a damage event.\r\n */\r",
          "properties": [
            {
              "name": "cause",
              "type": "EntityDamageCause",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "damagingEntity",
              "type": "Entity",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityapplydamageoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityDamageSource",
          "name": "EntityDamageSource",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Provides information about how damage has been applied to an\r entity.\r /",
          "definition": "export interface EntityDamageSource {\n    /**\r\n     * @remarks\r\n     * Cause enumeration of damage.\r\n     *\r\n     */\r\n    cause: EntityDamageCause;\r\n    /**\r\n     * @remarks\r\n     * Optional entity that caused the damage.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional projectile that may have caused damage.\r\n     *\r\n     */\r\n    damagingProjectile?: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Provides information about how damage has been applied to an\r\n * entity.\r\n */\r",
          "properties": [
            {
              "name": "cause",
              "type": "EntityDamageCause",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "damagingEntity",
              "type": "Entity",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "damagingProjectile",
              "type": "Entity",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitydamagesource",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityDataDrivenTriggerEventOptions",
          "name": "EntityDataDrivenTriggerEventOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Specifies additional filters that are used in registering a\r data driven trigger event for entities.\r /",
          "definition": "export interface EntityDataDrivenTriggerEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire for entities\r\n     * that match the entities within this collection.\r\n     *\r\n     */\r\n    entities?: Entity[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted entities' type matches this parameter.\r\n     *\r\n     */\r\n    entityTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted triggered event matches one of the events listed in\r\n     * this parameter.\r\n     *\r\n     */\r\n    eventTypes?: string[];\r\n}\r",
          "jsdoc": "/**\r\n * Specifies additional filters that are used in registering a\r\n * data driven trigger event for entities.\r\n */\r",
          "properties": [
            {
              "name": "entities",
              "type": "Entity[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "entityTypes",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "eventTypes",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entitydatadriventriggereventoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityEffectOptions",
          "name": "EntityEffectOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for entity effects.\r /",
          "definition": "export interface EntityEffectOptions {\n    /**\r\n     * @remarks\r\n     * The strength of the effect.\r\n     *\r\n     */\r\n    amplifier?: number;\r\n    /**\r\n     * @remarks\r\n     * If true, will show particles when effect is on the entity.\r\n     *\r\n     */\r\n    showParticles?: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for entity effects.\r\n */\r",
          "properties": [
            {
              "name": "amplifier",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "showParticles",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityeffectoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityEventOptions",
          "name": "EntityEventOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains optional parameters for registering an entity\r event.\r /",
          "definition": "export interface EntityEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire for entities\r\n     * that match the entities within this collection.\r\n     *\r\n     */\r\n    entities?: Entity[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted entities' type matches this parameter.\r\n     *\r\n     */\r\n    entityTypes?: string[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains optional parameters for registering an entity\r\n * event.\r\n */\r",
          "properties": [
            {
              "name": "entities",
              "type": "Entity[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "entityTypes",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityeventoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityFilter",
          "name": "EntityFilter",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains options for filtering entities.\r /",
          "definition": "export interface EntityFilter {\n    /**\r\n     * @remarks\r\n     * Excludes entities that match one or more of the specified\r\n     * families.\r\n     *\r\n     */\r\n    excludeFamilies?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities if have a specific gamemode that matches\r\n     * the specified gamemode.\r\n     *\r\n     */\r\n    excludeGameModes?: GameMode[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities that have a name that match one of the\r\n     * specified values.\r\n     *\r\n     */\r\n    excludeNames?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities with a tag that matches one of the\r\n     * specified values.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities if they are one of the specified types.\r\n     *\r\n     */\r\n    excludeTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that match all of the\r\n     * specified families.\r\n     *\r\n     */\r\n    families?: string[];\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities with a gamemode that matches\r\n     * the specified gamemode.\r\n     *\r\n     */\r\n    gameMode?: GameMode;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at most\r\n     * this horizontal rotation.\r\n     *\r\n     */\r\n    maxHorizontalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have at most this level are\r\n     * returned.\r\n     *\r\n     */\r\n    maxLevel?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, only entities that have at most this vertical\r\n     * rotation are returned.\r\n     *\r\n     */\r\n    maxVerticalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at a\r\n     * minimum this horizontal rotation.\r\n     *\r\n     */\r\n    minHorizontalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have at least this level are\r\n     * returned.\r\n     *\r\n     */\r\n    minLevel?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at least\r\n     * this vertical rotation.\r\n     *\r\n     */\r\n    minVerticalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * Includes entities with the specified name.\r\n     *\r\n     */\r\n    name?: string;\r\n    propertyOptions?: EntityQueryPropertyOptions[];\r\n    /**\r\n     * @remarks\r\n     * Gets/sets a collection of EntityQueryScoreOptions objects\r\n     * with filters for specific scoreboard objectives.\r\n     *\r\n     */\r\n    scoreOptions?: EntityQueryScoreOptions[];\r\n    /**\r\n     * @remarks\r\n     * Includes entities that match all of the specified tags.\r\n     *\r\n     */\r\n    tags?: string[];\r\n    /**\r\n     * @remarks\r\n     * If defined, entities that match this type are included.\r\n     *\r\n     */\r\n    type?: string;\r\n}\r",
          "jsdoc": "/**\r\n * Contains options for filtering entities.\r\n */\r",
          "properties": [
            {
              "name": "excludeFamilies",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "excludeGameModes",
              "type": "GameMode[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "excludeNames",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "excludeTags",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "excludeTypes",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "families",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "gameMode",
              "type": "GameMode",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "maxHorizontalRotation",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "maxLevel",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "maxVerticalRotation",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "minHorizontalRotation",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "minLevel",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "minVerticalRotation",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "propertyOptions",
              "type": "EntityQueryPropertyOptions[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "scoreOptions",
              "type": "EntityQueryScoreOptions[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "tags",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "type",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityfilter",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityHitInformation",
          "name": "EntityHitInformation",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional information about an entity that was\r hit.\r /",
          "definition": "export interface EntityHitInformation {\n    /**\r\n     * @remarks\r\n     * Entity that was hit.\r\n     *\r\n     */\r\n    entity?: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional information about an entity that was\r\n * hit.\r\n */\r",
          "properties": [
            {
              "name": "entity",
              "type": "Entity",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityhitinformation",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityQueryOptions",
          "name": "EntityQueryOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains options for selecting entities within an area.\r ```typescript\r  function blockConditional(targetLocation: DimensionLocation) {\r   targetLocation.dimension\r     .getEntities({\r       type: \"fox\",\r     })\r     .filter((entity) => {\r       const block = targetLocation.dimension.getBlock({\r         x: entity.location.x,\r         y: entity.location.y - 1,\r         z: entity.location.z,\r       });\r        return block !== undefined && block.matches(\"minecraft:stone\");\r     })\r     .forEach((entity) => {\r       targetLocation.dimension.spawnEntity(\"salmon\", entity.location);\r     });\r }\r ```\r ```typescript\r  function findEntitiesHavingPropertyEqualsTo(\r     targetLocation: DimensionLocation\r ) {\r   // Minecraft bees have a has_nectar boolean property\r   const queryOption: EntityQueryOptions = {\r     propertyOptions: [{ propertyId: \"minecraft:has_nectar\", value: { equals: true } }],\r   };\r    const entities = targetLocation.dimension.getEntities(queryOption);\r }\r ```\r ```typescript\r  function playSoundChained(targetLocation: DimensionLocation) {\r   const targetPlayers = targetLocation.dimension.getPlayers();\r   const originEntities = targetLocation.dimension.getEntities({\r     type: \"armor_stand\",\r     name: \"myArmorStand\",\r     tags: [\"dummyTag1\"],\r     excludeTags: [\"dummyTag2\"],\r   });\r    originEntities.forEach((entity) => {\r     targetPlayers.forEach((player) => {\r       player.playSound(\"raid.horn\");\r     });\r   });\r }\r ```\r ```typescript\r  function setScoreboardChained(\r     targetLocation: DimensionLocation\r ) {\r   const objective = world.scoreboard.addObjective(\"scoreObjective1\", \"dummy\");\r   targetLocation.dimension\r     .getEntities({\r       type: \"armor_stand\",\r       name: \"myArmorStand\",\r     })\r     .forEach((entity) => {\r       if (entity.scoreboardIdentity !== undefined) {\r         objective.setScore(entity.scoreboardIdentity, -1);\r       }\r     });\r }\r ```\r ```typescript\r  function summonMobChained(targetLocation: DimensionLocation) {\r   const armorStandArray = targetLocation.dimension.getEntities({\r     type: \"armor_stand\",\r   });\r   const playerArray = targetLocation.dimension.getPlayers({\r     location: { x: 0, y: -60, z: 0 },\r     closest: 4,\r     maxDistance: 15,\r   });\r   armorStandArray.forEach((entity) => {\r     playerArray.forEach((player) => {\r       targetLocation.dimension.spawnEntity(\"pig\", {\r         x: player.location.x + 1,\r         y: player.location.y,\r         z: player.location.z,\r       });\r     });\r   });\r }\r ```\r ```typescript\r  function bounceSkeletons(targetLocation: DimensionLocation) {\r   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r    // create some sample mob data\r   for (let i = 0; i < 10; i++) {\r     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r   }\r    const eqo: EntityQueryOptions = {\r     type: \"skeleton\",\r   };\r    for (const entity of targetLocation.dimension.getEntities(eqo)) {\r     entity.applyKnockback(0, 0, 0, 1);\r   }\r }\r ```\r ```typescript\r  function tagsQuery(targetLocation: DimensionLocation) {\r   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r    // create some sample mob data\r   for (let i = 0; i < 10; i++) {\r     const mobTypeId = mobs[i % mobs.length];\r     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r     entity.addTag(\"mobparty.\" + mobTypeId);\r   }\r    const eqo: EntityQueryOptions = {\r     tags: [\"mobparty.skeleton\"],\r   };\r    for (const entity of targetLocation.dimension.getEntities(eqo)) {\r     entity.kill();\r   }\r }\r ```\r ```typescript\r  function testThatEntityIsFeatherItem(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const items = targetLocation.dimension.getEntities({\r     location: targetLocation,\r     maxDistance: 20,\r   });\r    for (const item of items) {\r     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r      if (itemComp) {\r       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r         log(\"Success! Found a feather\", 1);\r       }\r     }\r   }\r }\r ```\r /",
          "definition": "export interface EntityQueryOptions extends EntityFilter {\n    /**\r\n     * @remarks\r\n     * Limits the number of entities to return, opting for the\r\n     * closest N entities as specified by this property. The\r\n     * location value must also be specified on the query options\r\n     * object.\r\n     *\r\n     */\r\n    closest?: number;\r\n    /**\r\n     * @remarks\r\n     * Limits the number of entities to return, opting for the\r\n     * farthest N entities as specified by this property. The\r\n     * location value must also be specified on the query options\r\n     * object.\r\n     *\r\n     */\r\n    farthest?: number;\r\n    /**\r\n     * @remarks\r\n     * Adds a seed location to the query that is used in\r\n     * conjunction with closest, farthest, limit, volume, and\r\n     * distance properties.\r\n     *\r\n     */\r\n    location?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that are less than this\r\n     * distance away from the location specified in the location\r\n     * property.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that are least this distance\r\n     * away from the location specified in the location property.\r\n     *\r\n     */\r\n    minDistance?: number;\r\n    /**\r\n     * @remarks\r\n     * In conjunction with location, specified a cuboid volume of\r\n     * entities to include.\r\n     *\r\n     */\r\n    volume?: Vector3;\r\n}\r",
          "jsdoc": "/**\r\n * Contains options for selecting entities within an area.\r\n * @example blockConditional.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function blockConditional(targetLocation: DimensionLocation) {\r\n *   targetLocation.dimension\r\n *     .getEntities({\r\n *       type: \"fox\",\r\n *     })\r\n *     .filter((entity) => {\r\n *       const block = targetLocation.dimension.getBlock({\r\n *         x: entity.location.x,\r\n *         y: entity.location.y - 1,\r\n *         z: entity.location.z,\r\n *       });\r\n *\r\n *       return block !== undefined && block.matches(\"minecraft:stone\");\r\n *     })\r\n *     .forEach((entity) => {\r\n *       targetLocation.dimension.spawnEntity(\"salmon\", entity.location);\r\n *     });\r\n * }\r\n * ```\r\n * @example findEntitiesHavingPropertyEqualsTo.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function findEntitiesHavingPropertyEqualsTo(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   // Minecraft bees have a has_nectar boolean property\r\n *   const queryOption: EntityQueryOptions = {\r\n *     propertyOptions: [{ propertyId: \"minecraft:has_nectar\", value: { equals: true } }],\r\n *   };\r\n *\r\n *   const entities = targetLocation.dimension.getEntities(queryOption);\r\n * }\r\n * ```\r\n * @example playSoundChained.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function playSoundChained(targetLocation: DimensionLocation) {\r\n *   const targetPlayers = targetLocation.dimension.getPlayers();\r\n *   const originEntities = targetLocation.dimension.getEntities({\r\n *     type: \"armor_stand\",\r\n *     name: \"myArmorStand\",\r\n *     tags: [\"dummyTag1\"],\r\n *     excludeTags: [\"dummyTag2\"],\r\n *   });\r\n *\r\n *   originEntities.forEach((entity) => {\r\n *     targetPlayers.forEach((player) => {\r\n *       player.playSound(\"raid.horn\");\r\n *     });\r\n *   });\r\n * }\r\n * ```\r\n * @example setScoreboardChained.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setScoreboardChained(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const objective = world.scoreboard.addObjective(\"scoreObjective1\", \"dummy\");\r\n *   targetLocation.dimension\r\n *     .getEntities({\r\n *       type: \"armor_stand\",\r\n *       name: \"myArmorStand\",\r\n *     })\r\n *     .forEach((entity) => {\r\n *       if (entity.scoreboardIdentity !== undefined) {\r\n *         objective.setScore(entity.scoreboardIdentity, -1);\r\n *       }\r\n *     });\r\n * }\r\n * ```\r\n * @example summonMobChained.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function summonMobChained(targetLocation: DimensionLocation) {\r\n *   const armorStandArray = targetLocation.dimension.getEntities({\r\n *     type: \"armor_stand\",\r\n *   });\r\n *   const playerArray = targetLocation.dimension.getPlayers({\r\n *     location: { x: 0, y: -60, z: 0 },\r\n *     closest: 4,\r\n *     maxDistance: 15,\r\n *   });\r\n *   armorStandArray.forEach((entity) => {\r\n *     playerArray.forEach((player) => {\r\n *       targetLocation.dimension.spawnEntity(\"pig\", {\r\n *         x: player.location.x + 1,\r\n *         y: player.location.y,\r\n *         z: player.location.z,\r\n *       });\r\n *     });\r\n *   });\r\n * }\r\n * ```\r\n * @example bounceSkeletons.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n *\r\n *   // create some sample mob data\r\n *   for (let i = 0; i < 10; i++) {\r\n *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n *   }\r\n *\r\n *   const eqo: EntityQueryOptions = {\r\n *     type: \"skeleton\",\r\n *   };\r\n *\r\n *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n *     entity.applyKnockback(0, 0, 0, 1);\r\n *   }\r\n * }\r\n * ```\r\n * @example tagsQuery.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function tagsQuery(targetLocation: DimensionLocation) {\r\n *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n *\r\n *   // create some sample mob data\r\n *   for (let i = 0; i < 10; i++) {\r\n *     const mobTypeId = mobs[i % mobs.length];\r\n *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n *   }\r\n *\r\n *   const eqo: EntityQueryOptions = {\r\n *     tags: [\"mobparty.skeleton\"],\r\n *   };\r\n *\r\n *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n *     entity.kill();\r\n *   }\r\n * }\r\n * ```\r\n * @example testThatEntityIsFeatherItem.ts\r\n * ```typescript\r\n * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function testThatEntityIsFeatherItem(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const items = targetLocation.dimension.getEntities({\r\n *     location: targetLocation,\r\n *     maxDistance: 20,\r\n *   });\r\n *\r\n *   for (const item of items) {\r\n *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n *\r\n *     if (itemComp) {\r\n *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n *         log(\"Success! Found a feather\", 1);\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "closest",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "farthest",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "location",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "maxDistance",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "minDistance",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "volume",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "extends": "EntityFilter",
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityqueryoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityQueryPropertyOptions",
          "name": "EntityQueryPropertyOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "In conjunction with location, specified a cuboid volume of\r entities to include.",
          "definition": "export interface EntityQueryPropertyOptions {\n    exclude?: boolean;\r\n    propertyId: string;\r\n    value?:\r\n        | boolean\r\n        | string\r\n        | EqualsComparison\r\n        | GreaterThanComparison\r\n        | GreaterThanOrEqualsComparison\r\n        | LessThanComparison\r\n        | LessThanOrEqualsComparison\r\n        | NotEqualsComparison\r\n        | RangeComparison;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * In conjunction with location, specified a cuboid volume of\r\n     * entities to include.\r\n     *\r\n     */\r",
          "properties": [
            {
              "name": "exclude",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "propertyId",
              "type": "string",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityquerypropertyoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityQueryScoreOptions",
          "name": "EntityQueryScoreOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for filtering players based on\r their score for an objective.\r /",
          "definition": "export interface EntityQueryScoreOptions {\n    /**\r\n     * @remarks\r\n     * If set to true, entities and players within this score range\r\n     * are excluded from query results.\r\n     *\r\n     */\r\n    exclude?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have a score equal to or under\r\n     * maxScore are included.\r\n     *\r\n     */\r\n    maxScore?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have a score equal to or over\r\n     * minScore are included.\r\n     *\r\n     */\r\n    minScore?: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard objective to filter on.\r\n     *\r\n     */\r\n    objective?: string;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for filtering players based on\r\n * their score for an objective.\r\n */\r",
          "properties": [
            {
              "name": "exclude",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "maxScore",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "minScore",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "objective",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityqueryscoreoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityRaycastHit",
          "name": "EntityRaycastHit",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains information for entity raycast hit results.\r /",
          "definition": "export interface EntityRaycastHit {\n    /**\r\n     * @remarks\r\n     * Distance from ray origin to entity bounds.\r\n     *\r\n     */\r\n    distance: number;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hit.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Contains information for entity raycast hit results.\r\n */\r",
          "properties": [
            {
              "name": "distance",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "entity",
              "type": "Entity",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityraycasthit",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntityRaycastOptions",
          "name": "EntityRaycastOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for an entity raycast operation.\r /",
          "definition": "export interface EntityRaycastOptions extends EntityFilter {\n    /**\r\n     * @remarks\r\n     * If true, blocks will not be considered as blocks that 'stop'\r\n     * the raycast.\r\n     *\r\n     */\r\n    ignoreBlockCollision?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, liquid blocks will be considered as blocks that\r\n     * 'stop' the raycast.\r\n     *\r\n     */\r\n    includeLiquidBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, passable blocks like vines and flowers will be\r\n     * considered as blocks that 'stop' the raycast.\r\n     *\r\n     */\r\n    includePassableBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Maximum distance, in blocks, to process the raycast.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for an entity raycast operation.\r\n */\r",
          "properties": [
            {
              "name": "ignoreBlockCollision",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeLiquidBlocks",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includePassableBlocks",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "maxDistance",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "extends": "EntityFilter",
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityraycastoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EqualsComparison",
          "name": "EqualsComparison",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Equal to operator.\r /",
          "definition": "export interface EqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    equals: boolean | number | string;\r\n}\r",
          "jsdoc": "/**\r\n * Equal to operator.\r\n */\r",
          "properties": [
            {
              "name": "equals",
              "type": "boolean | number | string",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "equalscomparison",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ExplosionOptions",
          "name": "ExplosionOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Dimension.createExplosion} method.\r ```typescript\r  function createNoBlockExplosion(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r    log(\"Creating an explosion of radius 15 that does not break blocks.\");\r   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r }\r ```\r ```typescript\r  function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r    log(\"Creating an explosion of radius 15 that causes fire.\");\r   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r    const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r    log(\"Creating an explosion of radius 10 that can go underwater.\");\r   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r }\r ```\r /",
          "definition": "export interface ExplosionOptions {\n    /**\r\n     * @remarks\r\n     * Whether parts of the explosion also impact underwater.\r\n     *\r\n     */\r\n    allowUnderwater?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the explosion will break blocks within the blast\r\n     * radius.\r\n     *\r\n     */\r\n    breaksBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the explosion is accompanied by fires within or\r\n     * near the blast radius.\r\n     *\r\n     */\r\n    causesFire?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    source?: Entity;\r\n}\r",
          "jsdoc": "/**\r\n * Additional configuration options for the {@link\r\n * Dimension.createExplosion} method.\r\n * @example createNoBlockExplosion.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function createNoBlockExplosion(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r\n *\r\n *   log(\"Creating an explosion of radius 15 that does not break blocks.\");\r\n *   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r\n * }\r\n * ```\r\n * @example createExplosions.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r\n *\r\n *   log(\"Creating an explosion of radius 15 that causes fire.\");\r\n *   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r\n *\r\n *   const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r\n *\r\n *   log(\"Creating an explosion of radius 10 that can go underwater.\");\r\n *   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "allowUnderwater",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "breaksBlocks",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "causesFire",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "source",
              "type": "Entity",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "explosionoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.GreaterThanComparison",
          "name": "GreaterThanComparison",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Greater than operator.\r /",
          "definition": "export interface GreaterThanComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    greaterThan: number;\r\n}\r",
          "jsdoc": "/**\r\n * Greater than operator.\r\n */\r",
          "properties": [
            {
              "name": "greaterThan",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "greaterthancomparison",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.GreaterThanOrEqualsComparison",
          "name": "GreaterThanOrEqualsComparison",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Greater than or equal to operator.\r /",
          "definition": "export interface GreaterThanOrEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    greaterThanOrEquals: number;\r\n}\r",
          "jsdoc": "/**\r\n * Greater than or equal to operator.\r\n */\r",
          "properties": [
            {
              "name": "greaterThanOrEquals",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "greaterthanorequalscomparison",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.HotbarEventOptions",
          "name": "HotbarEventOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional filtering options for hotbar events.\r /",
          "definition": "export interface HotbarEventOptions {\n    /**\r\n     * @remarks\r\n     * The slot indexes to consider. Values should be between 0 and\r\n     * 8, inclusive. If not specified, all slots are considered.\r\n     *\r\n     */\r\n    allowedSlots?: number[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional filtering options for hotbar events.\r\n */\r",
          "properties": [
            {
              "name": "allowedSlots",
              "type": "number[]",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "hotbareventoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InputEventOptions",
          "name": "InputEventOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "that filters out which events are passed to the provided\r callback.\r /",
          "definition": "export interface InputEventOptions {\n    /**\r\n     * @remarks\r\n     * The buttons the callback should be called for. If undefined,\r\n     * the callback will be called for all buttons.\r\n     *\r\n     */\r\n    buttons?: InputButton[];\r\n    /**\r\n     * @remarks\r\n     * The state the callback should be called for. If undefined,\r\n     * the callback will be called for all button states.\r\n     *\r\n     */\r\n    state?: ButtonState;\r\n}\r",
          "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server.PlayerButtonInputAfterEventSignal.subscribe}\r\n * that filters out which events are passed to the provided\r\n * callback.\r\n */\r",
          "properties": [
            {
              "name": "buttons",
              "type": "InputButton[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "state",
              "type": "ButtonState",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "inputeventoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InventoryItemEventOptions",
          "name": "InventoryItemEventOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional filtering options for inventory item\r events.\r /",
          "definition": "export interface InventoryItemEventOptions {\n    /**\r\n     * @remarks\r\n     * The slot indexes to consider. Values should be positive\r\n     * numbers. If not specified, all slots are considered.\r\n     *\r\n     */\r\n    allowedSlots?: number[];\r\n    /**\r\n     * @remarks\r\n     * The names for the items to exclude.\r\n     *\r\n     */\r\n    excludeItems?: string[];\r\n    /**\r\n     * @remarks\r\n     * The item tags to exclude.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Flag to specify to ignore quantity changes only. True to\r\n     * ignore quantity changes, false to not ignore quantity\r\n     * changes.\r\n     *\r\n     */\r\n    ignoreQuantityChange?: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item names to consider.\r\n     *\r\n     */\r\n    includeItems?: string[];\r\n    /**\r\n     * @remarks\r\n     * The item tags to consider.\r\n     *\r\n     */\r\n    includeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * The player inventory type to consider.\r\n     *\r\n     */\r\n    inventoryType?: PlayerInventoryType;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional filtering options for inventory item\r\n * events.\r\n */\r",
          "properties": [
            {
              "name": "allowedSlots",
              "type": "number[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "excludeItems",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "excludeTags",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "ignoreQuantityChange",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeItems",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeTags",
              "type": "string[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "inventoryType",
              "type": "PlayerInventoryType",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "inventoryitemeventoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCustomComponent",
          "name": "ItemCustomComponent",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains a set of events that will be raised for an item.\r This object must be bound using the ItemComponentRegistry.\r /",
          "definition": "export interface ItemCustomComponent {\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is hitting an entity and about to take durability\r\n     * damage.\r\n     *\r\n     */\r\n    onBeforeDurabilityDamage?: (\r\n        arg0: ItemComponentBeforeDurabilityDamageEvent,\r\n        arg1: CustomComponentParameters,\r\n    ) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component's use duration was completed.\r\n     *\r\n     */\r\n    onCompleteUse?: (arg0: ItemComponentCompleteUseEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is eaten by an entity.\r\n     *\r\n     */\r\n    onConsume?: (arg0: ItemComponentConsumeEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used to hit another entity.\r\n     *\r\n     */\r\n    onHitEntity?: (arg0: ItemComponentHitEntityEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used to mine a block.\r\n     *\r\n     */\r\n    onMineBlock?: (arg0: ItemComponentMineBlockEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used by a player.\r\n     *\r\n     */\r\n    onUse?: (arg0: ItemComponentUseEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used on a block.\r\n     *\r\n     */\r\n    onUseOn?: (arg0: ItemComponentUseOnEvent, arg1: CustomComponentParameters) => void;\r\n}\r",
          "jsdoc": "/**\r\n * Contains a set of events that will be raised for an item.\r\n * This object must be bound using the ItemComponentRegistry.\r\n */\r",
          "properties": [
            {
              "name": "onBeforeDurabilityDamage",
              "type": "(",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "arg0",
              "type": "ItemComponentBeforeDurabilityDamageEvent,",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "arg1",
              "type": "CustomComponentParameters,",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "onCompleteUse",
              "type": "(arg0: ItemComponentCompleteUseEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onConsume",
              "type": "(arg0: ItemComponentConsumeEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onHitEntity",
              "type": "(arg0: ItemComponentHitEntityEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onMineBlock",
              "type": "(arg0: ItemComponentMineBlockEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onUse",
              "type": "(arg0: ItemComponentUseEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "onUseOn",
              "type": "(arg0: ItemComponentUseOnEvent, arg1: CustomComponentParameters) => void",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcustomcomponent",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.JigsawPlaceOptions",
          "name": "JigsawPlaceOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "StructureManager.placeJigsaw}.\r /",
          "definition": "export interface JigsawPlaceOptions {\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the jigsaw blocks should be kept when generating the\r\n     * structure. Defaults to false.\r\n     *\r\n     */\r\n    keepJigsaws?: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.placeJigsaw}.\r\n */\r",
          "properties": [
            {
              "name": "includeEntities",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "keepJigsaws",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "jigsawplaceoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.JigsawStructurePlaceOptions",
          "name": "JigsawStructurePlaceOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "StructureManager.placeJigsawStructure}.\r /",
          "definition": "export interface JigsawStructurePlaceOptions {\n    /**\r\n     * @remarks\r\n     * Whether the start height defined in the jigsaw structure\r\n     * definition should be ignored and overridden with the\r\n     * specified y coordinate. Defaults to false.\r\n     *\r\n     */\r\n    ignoreStartHeight?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the jigsaw blocks should be kept when generating the\r\n     * structure. Defaults to false.\r\n     *\r\n     */\r\n    keepJigsaws?: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.placeJigsawStructure}.\r\n */\r",
          "properties": [
            {
              "name": "ignoreStartHeight",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeEntities",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "keepJigsaws",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "jigsawstructureplaceoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.LessThanComparison",
          "name": "LessThanComparison",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Less than operator.\r /",
          "definition": "export interface LessThanComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    lessThan: number;\r\n}\r",
          "jsdoc": "/**\r\n * Less than operator.\r\n */\r",
          "properties": [
            {
              "name": "lessThan",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "lessthancomparison",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.LessThanOrEqualsComparison",
          "name": "LessThanOrEqualsComparison",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Less than or equal to operator.\r /",
          "definition": "export interface LessThanOrEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    lessThanOrEquals: number;\r\n}\r",
          "jsdoc": "/**\r\n * Less than or equal to operator.\r\n */\r",
          "properties": [
            {
              "name": "lessThanOrEquals",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "lessthanorequalscomparison",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.MusicOptions",
          "name": "MusicOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "/",
          "definition": "export interface MusicOptions {\n    /**\r\n     * @remarks\r\n     * Specifies a fade overlap for music at the end of play.\r\n     *\r\n     */\r\n    fade?: number;\r\n    /**\r\n     * @remarks\r\n     * If set to true, this music track will play repeatedly.\r\n     *\r\n     */\r\n    loop?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Relative volume level of the music.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
          "jsdoc": "/**\r\n * Additional configuration options for {@link\r\n * World.playMusic}/{@link World.queueMusic} methods.\r\n */\r",
          "properties": [
            {
              "name": "fade",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "loop",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "volume",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "musicoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.NotEqualsComparison",
          "name": "NotEqualsComparison",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Not equal to operator.\r /",
          "definition": "export interface NotEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    notEquals: boolean | number | string;\r\n}\r",
          "jsdoc": "/**\r\n * Not equal to operator.\r\n */\r",
          "properties": [
            {
              "name": "notEquals",
              "type": "boolean | number | string",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "notequalscomparison",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayAnimationOptions",
          "name": "PlayAnimationOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for how an animation is played.\r /",
          "definition": "export interface PlayAnimationOptions {\n    /**\r\n     * @remarks\r\n     * Amount of time to fade out after an animation stops.\r\n     *\r\n     */\r\n    blendOutTime?: number;\r\n    /**\r\n     * @remarks\r\n     * Specifies a controller to use that has been defined on the\r\n     * entity.\r\n     *\r\n     */\r\n    controller?: string;\r\n    /**\r\n     * @remarks\r\n     * Specifies the state to transition to.\r\n     *\r\n     */\r\n    nextState?: string;\r\n    /**\r\n     * @remarks\r\n     * A list of players the animation will be visible to.\r\n     *\r\n     */\r\n    players?: Player[];\r\n    /**\r\n     * @remarks\r\n     * Specifies a Molang expression for when this animation should\r\n     * complete.\r\n     *\r\n     */\r\n    stopExpression?: string;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for how an animation is played.\r\n */\r",
          "properties": [
            {
              "name": "blendOutTime",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "controller",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "nextState",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "players",
              "type": "Player[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "stopExpression",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playanimationoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlayerSoundOptions",
          "name": "PlayerSoundOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Additional options for how a sound plays for a player.\r /",
          "definition": "export interface PlayerSoundOptions {\n    /**\r\n     * @remarks\r\n     * Location of the sound; if not specified, the sound is played\r\n     * near a player.\r\n     *\r\n     */\r\n    location?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Optional pitch of the sound.\r\n     *\r\n     */\r\n    pitch?: number;\r\n    /**\r\n     * @remarks\r\n     * Optional volume of the sound.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
          "jsdoc": "/**\r\n * Additional options for how a sound plays for a player.\r\n */\r",
          "properties": [
            {
              "name": "location",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "pitch",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "volume",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "playersoundoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ProjectileShootOptions",
          "name": "ProjectileShootOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Optional arguments for\r /",
          "definition": "export interface ProjectileShootOptions {\n    /**\r\n     * @remarks\r\n     * Controls the accuracy of the shot. A value of 0 is perfect\r\n     * accuracy.\r\n     *\r\n     */\r\n    uncertainty?: number;\r\n}\r",
          "jsdoc": "/**\r\n * Optional arguments for\r\n * @minecraft/server.EntityProjectileComponent.shoot.\r\n */\r",
          "properties": [
            {
              "name": "uncertainty",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "projectileshootoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.RangeComparison",
          "name": "RangeComparison",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Operator represents a lower/upper bound structure for\r expressing a potential range of numbers.\r /",
          "definition": "export interface RangeComparison {\n    /**\r\n     * @remarks\r\n     * Lower bound within a range.\r\n     *\r\n     */\r\n    lowerBound: number;\r\n    /**\r\n     * @remarks\r\n     * Upper bound within a range.\r\n     *\r\n     */\r\n    upperBound: number;\r\n}\r",
          "jsdoc": "/**\r\n * Operator represents a lower/upper bound structure for\r\n * expressing a potential range of numbers.\r\n */\r",
          "properties": [
            {
              "name": "lowerBound",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "upperBound",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "rangecomparison",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.RawMessage",
          "name": "RawMessage",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Defines a JSON structure that is used for more flexible.\r ```typescript\r  function placeTranslatedSign(location: DimensionLocation, text: string) {\r     const signBlock = location.dimension.getBlock(location);\r      if (!signBlock) {\r         console.warn('Could not find a block at specified location.');\r         return;\r     }\r     const signPerm = BlockPermutation.resolve('minecraft:standing_sign', { ground_sign_direction: 8 });\r     signBlock.setPermutation(signPerm);\r      const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\r     if (signComponent) {\r         signComponent.setText({ translate: 'item.skull.player.name', with: [text] });\r     } else {\r         console.error('Could not find a sign component on the block.');\r     }\r }\r  placeTranslatedSign(\r     {\r         dimension: world.getDimension('overworld'),\r         x: 0,\r         y: 0,\r         z: 0,\r     },\r     'Steve',\r );\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
          "definition": "export interface RawMessage {\n    /**\r\n     * @remarks\r\n     * Provides a raw-text equivalent of the current message.\r\n     *\r\n     */\r\n    rawtext?: RawMessage[];\r\n    /**\r\n     * @remarks\r\n     * Provides a token that will get replaced with the value of a\r\n     * score.\r\n     *\r\n     */\r\n    score?: RawMessageScore;\r\n    /**\r\n     * @remarks\r\n     * Provides a string literal value to use.\r\n     *\r\n     */\r\n    text?: string;\r\n    /**\r\n     * @remarks\r\n     * Provides a translation token where, if the client has an\r\n     * available resource in the players' language which matches\r\n     * the token, will get translated on the client.\r\n     *\r\n     */\r\n    translate?: string;\r\n    /**\r\n     * @remarks\r\n     * Arguments for the translation token. Can be either an array\r\n     * of strings or RawMessage containing an array of raw text\r\n     * objects.\r\n     *\r\n     */\r\n    with?: string[] | RawMessage;\r\n}\r",
          "jsdoc": "/**\r\n * Defines a JSON structure that is used for more flexible.\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { DimensionLocation, world, BlockPermutation, BlockComponentTypes } from '@minecraft/server';\r\n *\r\n * function placeTranslatedSign(location: DimensionLocation, text: string) {\r\n *     const signBlock = location.dimension.getBlock(location);\r\n *\r\n *     if (!signBlock) {\r\n *         console.warn('Could not find a block at specified location.');\r\n *         return;\r\n *     }\r\n *     const signPerm = BlockPermutation.resolve('minecraft:standing_sign', { ground_sign_direction: 8 });\r\n *     signBlock.setPermutation(signPerm);\r\n *\r\n *     const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\r\n *     if (signComponent) {\r\n *         signComponent.setText({ translate: 'item.skull.player.name', with: [text] });\r\n *     } else {\r\n *         console.error('Could not find a sign component on the block.');\r\n *     }\r\n * }\r\n *\r\n * placeTranslatedSign(\r\n *     {\r\n *         dimension: world.getDimension('overworld'),\r\n *         x: 0,\r\n *         y: 0,\r\n *         z: 0,\r\n *     },\r\n *     'Steve',\r\n * );\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "rawtext",
              "type": "RawMessage[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "score",
              "type": "RawMessageScore",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "text",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "translate",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "with",
              "type": "string[] | RawMessage",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "rawmessage",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.RawMessageScore",
          "name": "RawMessageScore",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Provides a description of a score token to use within a raw\r message.\r /",
          "definition": "export interface RawMessageScore {\n    /**\r\n     * @remarks\r\n     * Name of the score value to match.\r\n     *\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @remarks\r\n     * Name of the score value to match.\r\n     *\r\n     */\r\n    objective?: string;\r\n}\r",
          "jsdoc": "/**\r\n * Provides a description of a score token to use within a raw\r\n * message.\r\n */\r",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "objective",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "rawmessagescore",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.RawText",
          "name": "RawText",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "A `RawMessage` with only the `rawtext` property. When a\r `RawMessage` is serialized the contents are put into a\r rawtext property, so this is useful when reading saved\r RawMessages. See `BlockSignComponent.setText` and\r `BlockSignComponent.getRawText` for examples.\r /",
          "definition": "export interface RawText {\n    /**\r\n     * @remarks\r\n     * A serialization of the current value of an associated sign.\r\n     *\r\n     */\r\n    rawtext?: RawMessage[];\r\n}\r",
          "jsdoc": "/**\r\n * A `RawMessage` with only the `rawtext` property. When a\r\n * `RawMessage` is serialized the contents are put into a\r\n * rawtext property, so this is useful when reading saved\r\n * RawMessages. See `BlockSignComponent.setText` and\r\n * `BlockSignComponent.getRawText` for examples.\r\n */\r",
          "properties": [
            {
              "name": "rawtext",
              "type": "RawMessage[]",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "rawtext",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.RGB",
          "name": "RGB",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Represents a fully customizable color within Minecraft.\r /",
          "definition": "export interface RGB {\n    /**\r\n     * @remarks\r\n     * Determines a color's blue component. Valid values are\r\n     * between 0 and 1.0.\r\n     *\r\n     */\r\n    blue: number;\r\n    /**\r\n     * @remarks\r\n     * Determines a color's green component. Valid values are\r\n     * between 0 and 1.0.\r\n     *\r\n     */\r\n    green: number;\r\n    /**\r\n     * @remarks\r\n     * Determines a color's red component. Valid values are between\r\n     * 0 and 1.0.\r\n     *\r\n     */\r\n    red: number;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a fully customizable color within Minecraft.\r\n */\r",
          "properties": [
            {
              "name": "blue",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "green",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "red",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "rgb",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.RGBA",
          "name": "RGBA",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Represents a fully customizable color within Minecraft.\r /",
          "definition": "export interface RGBA extends RGB {\n    /**\r\n     * @remarks\r\n     * Determines a color's alpha (opacity) component. Valid values\r\n     * are between 0 (transparent) and 1.0 (opaque).\r\n     *\r\n     */\r\n    alpha: number;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a fully customizable color within Minecraft.\r\n */\r",
          "properties": [
            {
              "name": "alpha",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "extends": "RGB",
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "rgba",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScoreboardObjectiveDisplayOptions",
          "name": "ScoreboardObjectiveDisplayOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for how a scoreboard should be\r displayed within its display slot.\r /",
          "definition": "export interface ScoreboardObjectiveDisplayOptions {\n    /**\r\n     * @remarks\r\n     * Objective to be displayed.\r\n     *\r\n     */\r\n    objective: ScoreboardObjective;\r\n    /**\r\n     * @remarks\r\n     * The sort order to display the objective items within.\r\n     *\r\n     */\r\n    sortOrder?: ObjectiveSortOrder;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for how a scoreboard should be\r\n * displayed within its display slot.\r\n */\r",
          "properties": [
            {
              "name": "objective",
              "type": "ScoreboardObjective",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "sortOrder",
              "type": "ObjectiveSortOrder",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scoreboardobjectivedisplayoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ScriptEventMessageFilterOptions",
          "name": "ScriptEventMessageFilterOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for registering a script event\r event callback.\r /",
          "definition": "export interface ScriptEventMessageFilterOptions {\n    /**\r\n     * @remarks\r\n     * Optional list of namespaces to filter inbound script event\r\n     * messages.\r\n     *\r\n     */\r\n    namespaces: string[];\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for registering a script event\r\n * event callback.\r\n */\r",
          "properties": [
            {
              "name": "namespaces",
              "type": "string[]",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "scripteventmessagefilteroptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.SpawnEntityOptions",
          "name": "SpawnEntityOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for spawning an Entity.\r /",
          "definition": "export interface SpawnEntityOptions {\n    /**\r\n     * @remarks\r\n     * Optional spawn event to send to the entity after it is\r\n     * spawned.\r\n     *\r\n     */\r\n    spawnEvent?: string;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for spawning an Entity.\r\n */\r",
          "properties": [
            {
              "name": "spawnEvent",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "spawnentityoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StructureCreateOptions",
          "name": "StructureCreateOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "StructureManager.createFromWorld}\r /",
          "definition": "export interface StructureCreateOptions {\n    /**\r\n     * @remarks\r\n     * Whether blocks should be included in the structure. Defaults\r\n     * to true.\r\n     *\r\n     */\r\n    includeBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * How the Structure should be saved. Defaults to\r\n     * StructureSaveMode.World.\r\n     *\r\n     */\r\n    saveMode?: StructureSaveMode;\r\n}\r",
          "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.createFromWorld}\r\n */\r",
          "properties": [
            {
              "name": "includeBlocks",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeEntities",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "saveMode",
              "type": "StructureSaveMode",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "structurecreateoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.StructurePlaceOptions",
          "name": "StructurePlaceOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "StructureManager.place}\r /",
          "definition": "export interface StructurePlaceOptions {\n    /**\r\n     * @remarks\r\n     * How the Structure should be animated when placed.\r\n     *\r\n     */\r\n    animationMode?: StructureAnimationMode;\r\n    /**\r\n     * @remarks\r\n     * How many seconds the animation should take.\r\n     *\r\n     */\r\n    animationSeconds?: number;\r\n    /**\r\n     * @remarks\r\n     * Whether blocks should be included in the structure. Defaults\r\n     * to true.\r\n     *\r\n     */\r\n    includeBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * What percentage of blocks should be placed. A value of 1\r\n     * will place 100% of the blocks while a value of 0 will place\r\n     * none. The blocks are chosen randomly based on the {@link\r\n     * StructurePlaceOptions.integritySeed}.\r\n     *\r\n     */\r\n    integrity?: number;\r\n    /**\r\n     * @remarks\r\n     * Seed that determines which blocks are randomly chosen to be\r\n     * placed. Defaults to a random seed.\r\n     *\r\n     */\r\n    integritySeed?: string;\r\n    /**\r\n     * @remarks\r\n     * Which axes the Structure should be mirrored on when placed.\r\n     * Defaults to StructureMirrorAxis.None.\r\n     *\r\n     */\r\n    mirror?: StructureMirrorAxis;\r\n    /**\r\n     * @remarks\r\n     * How the Structure should be rotated when placed. Defaults to\r\n     * AxisAlignedRotation.None.\r\n     *\r\n     */\r\n    rotation?: StructureRotation;\r\n    /**\r\n     * @remarks\r\n     * Whether the structure should be waterlogged when placed.\r\n     * Defaults to false. If true, blocks will become waterlogged\r\n     * when placed in water.\r\n     *\r\n     */\r\n    waterlogged?: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.place}\r\n */\r",
          "properties": [
            {
              "name": "animationMode",
              "type": "StructureAnimationMode",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "animationSeconds",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeBlocks",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "includeEntities",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "integrity",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "integritySeed",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "mirror",
              "type": "StructureMirrorAxis",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "rotation",
              "type": "StructureRotation",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "waterlogged",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "structureplaceoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.TeleportOptions",
          "name": "TeleportOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for teleporting an entity.\r ```typescript\r  function teleport(targetLocation: DimensionLocation) {\r   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r    system.runTimeout(() => {\r     cow.teleport(\r       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r       {\r         facingLocation: targetLocation,\r       }\r     );\r   }, 20);\r }\r ```\r ```typescript\r  function teleportMovement(targetLocation: DimensionLocation) {\r   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r    let inc = 1;\r   const runId = system.runInterval(() => {\r     pig.teleport(\r       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r       {\r         facingLocation: targetLocation,\r       }\r     );\r      if (inc > 100) {\r       system.clearRun(runId);\r     }\r     inc++;\r   }, 4);\r }\r ```\r /",
          "definition": "export interface TeleportOptions {\n    /**\r\n     * @remarks\r\n     * Whether to check whether blocks will block the entity after\r\n     * teleport.\r\n     *\r\n     */\r\n    checkForBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Dimension to potentially move the entity to.  If not\r\n     * specified, the entity is teleported within the dimension\r\n     * that they reside.\r\n     *\r\n     */\r\n    dimension?: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Location that the entity should be facing after teleport.\r\n     *\r\n     */\r\n    facingLocation?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Whether to retain the entities velocity after teleport.\r\n     *\r\n     */\r\n    keepVelocity?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Rotation of the entity after teleport.\r\n     *\r\n     */\r\n    rotation?: Vector2;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for teleporting an entity.\r\n * @example teleport.ts\r\n * ```typescript\r\n * import { system, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function teleport(targetLocation: DimensionLocation) {\r\n *   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r\n *\r\n *   system.runTimeout(() => {\r\n *     cow.teleport(\r\n *       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r\n *       {\r\n *         facingLocation: targetLocation,\r\n *       }\r\n *     );\r\n *   }, 20);\r\n * }\r\n * ```\r\n * @example teleportMovement.ts\r\n * ```typescript\r\n * import { system, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function teleportMovement(targetLocation: DimensionLocation) {\r\n *   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r\n *\r\n *   let inc = 1;\r\n *   const runId = system.runInterval(() => {\r\n *     pig.teleport(\r\n *       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r\n *       {\r\n *         facingLocation: targetLocation,\r\n *       }\r\n *     );\r\n *\r\n *     if (inc > 100) {\r\n *       system.clearRun(runId);\r\n *     }\r\n *     inc++;\r\n *   }, 4);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "checkForBlocks",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "dimension",
              "type": "Dimension",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "facingLocation",
              "type": "Vector3",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "keepVelocity",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "rotation",
              "type": "Vector2",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "teleportoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.TitleDisplayOptions",
          "name": "TitleDisplayOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for displaying a title and\r optional subtitle.\r /",
          "definition": "export interface TitleDisplayOptions {\n    /**\r\n     * @remarks\r\n     * Fade-in duration for the title and subtitle, in ticks. There\r\n     * are 20 ticks per second. Use {@link TicksPerSecond} constant\r\n     * to convert between ticks and seconds.\r\n     *\r\n     */\r\n    fadeInDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Fade-out time for the title and subtitle, in ticks. There\r\n     * are 20 ticks per second. Use {@link TicksPerSecond} constant\r\n     * to convert between ticks and seconds.\r\n     *\r\n     */\r\n    fadeOutDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Amount of time for the title and subtitle to stay in place,\r\n     * in ticks. There are 20 ticks per second. Use {@link\r\n     * TicksPerSecond} constant to convert between ticks and\r\n     * seconds.\r\n     *\r\n     */\r\n    stayDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Optional subtitle text.\r\n     *\r\n     */\r\n    subtitle?: (RawMessage | string)[] | RawMessage | string;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for displaying a title and\r\n * optional subtitle.\r\n */\r",
          "properties": [
            {
              "name": "fadeInDuration",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "fadeOutDuration",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "stayDuration",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "subtitle",
              "type": "(RawMessage | string)[] | RawMessage | string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "titledisplayoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Vector2",
          "name": "Vector2",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Represents a two-directional vector.\r /",
          "definition": "export interface Vector2 {\n    /**\r\n     * @remarks\r\n     * X component of the two-dimensional vector.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of the two-dimensional vector.\r\n     *\r\n     */\r\n    y: number;\r\n}\r",
          "jsdoc": "/**\r\n * Represents a two-directional vector.\r\n */\r",
          "properties": [
            {
              "name": "x",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "y",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "vector2",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.Vector3",
          "name": "Vector3",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains a description of a vector.\r /",
          "definition": "export interface Vector3 {\n    /**\r\n     * @remarks\r\n     * X component of this vector.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of this vector.\r\n     *\r\n     */\r\n    y: number;\r\n    /**\r\n     * @remarks\r\n     * Z component of this vector.\r\n     *\r\n     */\r\n    z: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains a description of a vector.\r\n */\r",
          "properties": [
            {
              "name": "x",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "y",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "z",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "vector3",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.VectorXZ",
          "name": "VectorXZ",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Z component of this vector.",
          "definition": "export interface VectorXZ {\n    x: number;\r\n    z: number;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Z component of this vector.\r\n     *\r\n     */\r",
          "properties": [
            {
              "name": "x",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "z",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "vectorxz",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.WorldSoundOptions",
          "name": "WorldSoundOptions",
          "type": "interface",
          "module": "@minecraft/server",
          "description": "Contains additional options for a playSound occurrence.\r /",
          "definition": "export interface WorldSoundOptions {\n    /**\r\n     * @remarks\r\n     * Pitch of the sound played.\r\n     *\r\n     */\r\n    pitch?: number;\r\n    /**\r\n     * @remarks\r\n     * Relative volume and space by which this sound is heard.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
          "jsdoc": "/**\r\n * Contains additional options for a playSound occurrence.\r\n */\r",
          "properties": [
            {
              "name": "pitch",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "volume",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "worldsoundoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockCustomComponentAlreadyRegisteredError",
          "name": "BlockCustomComponentAlreadyRegisteredError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Relative volume and space by which this sound is heard.",
          "definition": "export class BlockCustomComponentAlreadyRegisteredError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Relative volume and space by which this sound is heard.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcustomcomponentalreadyregisterederror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockCustomComponentReloadNewComponentError",
          "name": "BlockCustomComponentReloadNewComponentError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class BlockCustomComponentReloadNewComponentError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcustomcomponentreloadnewcomponenterror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockCustomComponentReloadNewEventError",
          "name": "BlockCustomComponentReloadNewEventError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class BlockCustomComponentReloadNewEventError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcustomcomponentreloadneweventerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.BlockCustomComponentReloadVersionError",
          "name": "BlockCustomComponentReloadVersionError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class BlockCustomComponentReloadVersionError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "blockcustomcomponentreloadversionerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CommandError",
          "name": "CommandError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class CommandError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "commanderror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ContainerRulesError",
          "name": "ContainerRulesError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "broken on container operations.\r /",
          "definition": "export class ContainerRulesError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Error thrown if {@link @minecraft/server.ContainerRules} are\r\n * broken on container operations.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "containerruleserror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomCommandError",
          "name": "CustomCommandError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Error object thrown when CustomCommandRegistry errors occur.\r /",
          "definition": "export class CustomCommandError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Reason for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: CustomCommandErrorReason;\r\n}\r",
          "jsdoc": "/**\r\n * Error object thrown when CustomCommandRegistry errors occur.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcommanderror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomComponentInvalidRegistryError",
          "name": "CustomComponentInvalidRegistryError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Reason for the error.\r  This property can be read in early-execution mode.",
          "definition": "export class CustomComponentInvalidRegistryError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Reason for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcomponentinvalidregistryerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.CustomComponentNameError",
          "name": "CustomComponentNameError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class CustomComponentNameError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: CustomComponentNameErrorReason;\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "customcomponentnameerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EnchantmentLevelOutOfBoundsError",
          "name": "EnchantmentLevelOutOfBoundsError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "This property can be read in early-execution mode.",
          "definition": "export class EnchantmentLevelOutOfBoundsError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "enchantmentleveloutofboundserror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EnchantmentTypeNotCompatibleError",
          "name": "EnchantmentTypeNotCompatibleError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class EnchantmentTypeNotCompatibleError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "enchantmenttypenotcompatibleerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EnchantmentTypeUnknownIdError",
          "name": "EnchantmentTypeUnknownIdError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class EnchantmentTypeUnknownIdError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "enchantmenttypeunknowniderror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.EntitySpawnError",
          "name": "EntitySpawnError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class EntitySpawnError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "entityspawnerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InvalidContainerError",
          "name": "InvalidContainerError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "The container is invalid. This can occur if the container is\r missing or deleted.\r /",
          "definition": "export class InvalidContainerError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * The container is invalid. This can occur if the container is\r\n * missing or deleted.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "invalidcontainererror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InvalidContainerSlotError",
          "name": "InvalidContainerSlotError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "The container slot is invalid. This can occur when the\r owning container is destroyed or unloaded.\r /",
          "definition": "export class InvalidContainerSlotError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * The container slot is invalid. This can occur when the\r\n * owning container is destroyed or unloaded.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "invalidcontainersloterror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InvalidEntityError",
          "name": "InvalidEntityError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "The error called when an entity is invalid. This can occur\r when accessing components on a removed entity.\r /",
          "definition": "export class InvalidEntityError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The id of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    id: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    type: string;\r\n}\r",
          "jsdoc": "/**\r\n * The error called when an entity is invalid. This can occur\r\n * when accessing components on a removed entity.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "invalidentityerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InvalidIteratorError",
          "name": "InvalidIteratorError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "The type of the entity that is now invalid.\r  This property can be read in early-execution mode.",
          "definition": "export class InvalidIteratorError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * The type of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "invaliditeratorerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.InvalidStructureError",
          "name": "InvalidStructureError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Thrown when a Structure is invalid. A structure becomes\r invalid when it is deleted.\r /",
          "definition": "export class InvalidStructureError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Thrown when a Structure is invalid. A structure becomes\r\n * invalid when it is deleted.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "invalidstructureerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCustomComponentAlreadyRegisteredError",
          "name": "ItemCustomComponentAlreadyRegisteredError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Thrown when trying to register an item custom component with\r a name that has already been registered.\r /",
          "definition": "export class ItemCustomComponentAlreadyRegisteredError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Thrown when trying to register an item custom component with\r\n * a name that has already been registered.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcustomcomponentalreadyregisterederror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCustomComponentReloadNewComponentError",
          "name": "ItemCustomComponentReloadNewComponentError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Thrown after using the /reload command when trying to\r register a previously unregistered item custom component.\r /",
          "definition": "export class ItemCustomComponentReloadNewComponentError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously unregistered item custom component.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcustomcomponentreloadnewcomponenterror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCustomComponentReloadNewEventError",
          "name": "ItemCustomComponentReloadNewEventError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Thrown after using the /reload command when trying to\r register a previously registered item custom component that\r handles a new event.\r /",
          "definition": "export class ItemCustomComponentReloadNewEventError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously registered item custom component that\r\n * handles a new event.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcustomcomponentreloadneweventerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.ItemCustomComponentReloadVersionError",
          "name": "ItemCustomComponentReloadVersionError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Thrown after using the /reload command when trying to\r register a previously registered item custom component with\r a newer API version.\r /",
          "definition": "export class ItemCustomComponentReloadVersionError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously registered item custom component with\r\n * a newer API version.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "itemcustomcomponentreloadversionerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.LocationInUnloadedChunkError",
          "name": "LocationInUnloadedChunkError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Thrown when the chunk for provided location or bounding area\r is not loaded.\r /",
          "definition": "export class LocationInUnloadedChunkError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Thrown when the chunk for provided location or bounding area\r\n * is not loaded.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "locationinunloadedchunkerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.LocationOutOfWorldBoundariesError",
          "name": "LocationOutOfWorldBoundariesError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Thrown when a provided location or bounding area is outside\r the minimum or maximum dimension height.\r /",
          "definition": "export class LocationOutOfWorldBoundariesError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Thrown when a provided location or bounding area is outside\r\n * the minimum or maximum dimension height.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "locationoutofworldboundarieserror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.NamespaceNameError",
          "name": "NamespaceNameError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Thrown when a name requires a namespace and an error occurs\r when validating that namespace\r /",
          "definition": "export class NamespaceNameError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: NamespaceNameErrorReason;\r\n}\r",
          "jsdoc": "/**\r\n * Thrown when a name requires a namespace and an error occurs\r\n * when validating that namespace\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "namespacenameerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.PlaceJigsawError",
          "name": "PlaceJigsawError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "This property can be read in early-execution mode.",
          "definition": "export class PlaceJigsawError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "placejigsawerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.RawMessageError",
          "name": "RawMessageError",
          "type": "class",
          "module": "@minecraft/server",
          "definition": "export class RawMessageError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "rawmessageerror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server.UnloadedChunksError",
          "name": "UnloadedChunksError",
          "type": "class",
          "module": "@minecraft/server",
          "description": "Error thrown when the specified area contains one or more\r unloaded chunks.\r /",
          "definition": "export class UnloadedChunksError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * Error thrown when the specified area contains one or more\r\n * unloaded chunks.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Server"
          ],
          "tags": [],
          "keywords": [
            "unloadedchunkserror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        }
      ],
      "exports": {
        "enums": [
          {
            "id": "@minecraft/server.BlockComponentTypes",
            "name": "BlockComponentTypes",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The types of block components that are accessible via\r function Block.getComponent.\r /",
            "definition": "export enum BlockComponentTypes {\n    FluidContainer = 'minecraft:fluid_container',\r\n    /**\r\n     * @remarks\r\n     * Represents the inventory of a block in the world. Used with\r\n     * blocks like chests.\r\n     *\r\n     */\r\n    Inventory = 'minecraft:inventory',\r\n    /**\r\n     * @remarks\r\n     * When present, this block has piston-like behavior. Contains\r\n     * additional properties for discovering block piston state.\r\n     *\r\n     */\r\n    Piston = 'minecraft:piston',\r\n    /**\r\n     * @remarks\r\n     * Represents a block that can play a record.\r\n     *\r\n     */\r\n    RecordPlayer = 'minecraft:record_player',\r\n    /**\r\n     * @remarks\r\n     * Represents a block that can display text on it.\r\n     *\r\n     */\r\n    Sign = 'minecraft:sign',\r\n}\r",
            "jsdoc": "/**\r\n * The types of block components that are accessible via\r\n * function Block.getComponent.\r\n */\r",
            "enumValues": [
              {
                "name": "FluidContainer",
                "value": "minecraft:fluid_container"
              },
              {
                "name": "Inventory",
                "value": "minecraft:inventory",
                "description": ""
              },
              {
                "name": "Piston",
                "value": "minecraft:piston",
                "description": ""
              },
              {
                "name": "RecordPlayer",
                "value": "minecraft:record_player",
                "description": ""
              },
              {
                "name": "Sign",
                "value": "minecraft:sign",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponenttypes",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockPistonState",
            "name": "BlockPistonState",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "An enumeration describing the state of a block piston.\r /",
            "definition": "export enum BlockPistonState {\n    /**\r\n     * @remarks\r\n     * Whether the piston is fully expanded.\r\n     *\r\n     */\r\n    Expanded = 'Expanded',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of expanding.\r\n     *\r\n     */\r\n    Expanding = 'Expanding',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is fully retracted.\r\n     *\r\n     */\r\n    Retracted = 'Retracted',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of retracting.\r\n     *\r\n     */\r\n    Retracting = 'Retracting',\r\n}\r",
            "jsdoc": "/**\r\n * An enumeration describing the state of a block piston.\r\n */\r",
            "enumValues": [
              {
                "name": "Expanded",
                "value": "Expanded",
                "description": ""
              },
              {
                "name": "Expanding",
                "value": "Expanding",
                "description": ""
              },
              {
                "name": "Retracted",
                "value": "Retracted",
                "description": ""
              },
              {
                "name": "Retracting",
                "value": "Retracting",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockpistonstate",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockVolumeIntersection",
            "name": "BlockVolumeIntersection",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Description of the resulting intersection test on two\r BlockVolume objects\r /",
            "definition": "export enum BlockVolumeIntersection {\n    /**\r\n     * @remarks\r\n     * Volume B has no intersection points with Volume A\r\n     *\r\n     */\r\n    Disjoint = 0,\r\n    /**\r\n     * @remarks\r\n     * Volume B resides completely inside Volume A\r\n     *\r\n     */\r\n    Contains = 1,\r\n    /**\r\n     * @remarks\r\n     * Volume B partially intersects Volume A\r\n     *\r\n     */\r\n    Intersects = 2,\r\n}\r",
            "jsdoc": "/**\r\n * Description of the resulting intersection test on two\r\n * BlockVolume objects\r\n */\r",
            "enumValues": [
              {
                "name": "Disjoint",
                "value": 0,
                "description": ""
              },
              {
                "name": "Contains",
                "value": 1,
                "description": ""
              },
              {
                "name": "Intersects",
                "value": 2,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockvolumeintersection",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ButtonState",
            "name": "ButtonState",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The state of a button on a keyboard, controller, or touch\r interface.\r /",
            "definition": "export enum ButtonState {\n    Pressed = 'Pressed',\r\n    Released = 'Released',\r\n}\r",
            "jsdoc": "/**\r\n * The state of a button on a keyboard, controller, or touch\r\n * interface.\r\n */\r",
            "enumValues": [
              {
                "name": "Pressed",
                "value": "Pressed"
              },
              {
                "name": "Released",
                "value": "Released"
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "buttonstate",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CommandPermissionLevel",
            "name": "CommandPermissionLevel",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The required permission level to execute the custom command.\r /",
            "definition": "export enum CommandPermissionLevel {\n    /**\r\n     * @remarks\r\n     * Anything can run this level.\r\n     *\r\n     */\r\n    Any = 0,\r\n    /**\r\n     * @remarks\r\n     * Any operator can run this command, including command blocks.\r\n     *\r\n     */\r\n    GameDirectors = 1,\r\n    /**\r\n     * @remarks\r\n     * Any operator can run this command, but NOT command blocks.\r\n     *\r\n     */\r\n    Admin = 2,\r\n    /**\r\n     * @remarks\r\n     * Any server host can run this command.\r\n     *\r\n     */\r\n    Host = 3,\r\n    /**\r\n     * @remarks\r\n     * Only dedicated server can run this command.\r\n     *\r\n     */\r\n    Owner = 4,\r\n}\r",
            "jsdoc": "/**\r\n * The required permission level to execute the custom command.\r\n */\r",
            "enumValues": [
              {
                "name": "Any",
                "value": 0,
                "description": ""
              },
              {
                "name": "GameDirectors",
                "value": 1,
                "description": ""
              },
              {
                "name": "Admin",
                "value": 2,
                "description": ""
              },
              {
                "name": "Host",
                "value": 3,
                "description": ""
              },
              {
                "name": "Owner",
                "value": 4,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "commandpermissionlevel",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandErrorReason",
            "name": "CustomCommandErrorReason",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Reason why custom command registration failed.\r /",
            "definition": "export enum CustomCommandErrorReason {\n    /**\r\n     * @remarks\r\n     * Command name already registered.\r\n     *\r\n     */\r\n    AlreadyRegistered = 'AlreadyRegistered',\r\n    /**\r\n     * @remarks\r\n     * Custom Command references an enum that has not been\r\n     * registered.\r\n     *\r\n     */\r\n    EnumDependencyMissing = 'EnumDependencyMissing',\r\n    /**\r\n     * @remarks\r\n     * Supplied Custom Command namespace does not match previous\r\n     * registrations for this add-on.\r\n     *\r\n     */\r\n    NamespaceMismatch = 'NamespaceMismatch',\r\n    /**\r\n     * @remarks\r\n     * Too many command parameters defined in CustomCommand.\r\n     *\r\n     */\r\n    ParameterLimit = 'ParameterLimit',\r\n    /**\r\n     * @remarks\r\n     * Custom command registry can not be accessed after world\r\n     * initialized event.\r\n     *\r\n     */\r\n    RegistryInvalid = 'RegistryInvalid',\r\n    /**\r\n     * @remarks\r\n     * Command parameters cannot be redefined during reload. Only\r\n     * the script closure itself can be changed.\r\n     *\r\n     */\r\n    RegistryReadOnly = 'RegistryReadOnly',\r\n}\r",
            "jsdoc": "/**\r\n * Reason why custom command registration failed.\r\n */\r",
            "enumValues": [
              {
                "name": "AlreadyRegistered",
                "value": "AlreadyRegistered",
                "description": ""
              },
              {
                "name": "EnumDependencyMissing",
                "value": "EnumDependencyMissing",
                "description": ""
              },
              {
                "name": "NamespaceMismatch",
                "value": "NamespaceMismatch",
                "description": ""
              },
              {
                "name": "ParameterLimit",
                "value": "ParameterLimit",
                "description": ""
              },
              {
                "name": "RegistryInvalid",
                "value": "RegistryInvalid",
                "description": ""
              },
              {
                "name": "RegistryReadOnly",
                "value": "RegistryReadOnly",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommanderrorreason",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandParamType",
            "name": "CustomCommandParamType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The types of paramaters accepted by a custom command.\r /",
            "definition": "export enum CustomCommandParamType {\n    /**\r\n     * @remarks\r\n     * Block type parameter provides a {@link BlockType}.\r\n     *\r\n     */\r\n    BlockType = 'BlockType',\r\n    /**\r\n     * @remarks\r\n     * Boolean parameter.\r\n     *\r\n     */\r\n    Boolean = 'Boolean',\r\n    /**\r\n     * @remarks\r\n     * Entity selector parameter provides an {@link Entity}.\r\n     *\r\n     */\r\n    EntitySelector = 'EntitySelector',\r\n    /**\r\n     * @remarks\r\n     * Entity type parameter provides an {@link EntityType}.\r\n     *\r\n     */\r\n    EntityType = 'EntityType',\r\n    /**\r\n     * @remarks\r\n     * Command enum parameter.\r\n     *\r\n     */\r\n    Enum = 'Enum',\r\n    /**\r\n     * @remarks\r\n     * Float parameter.\r\n     *\r\n     */\r\n    Float = 'Float',\r\n    /**\r\n     * @remarks\r\n     * Integer parameter.\r\n     *\r\n     */\r\n    Integer = 'Integer',\r\n    /**\r\n     * @remarks\r\n     * Item type parameter provides an {@link ItemType}.\r\n     *\r\n     */\r\n    ItemType = 'ItemType',\r\n    /**\r\n     * @remarks\r\n     * Location parameter provides a {@link\r\n     * @minecraft/server.Location}.\r\n     *\r\n     */\r\n    Location = 'Location',\r\n    /**\r\n     * @remarks\r\n     * Player selector parameter provides a {@link Player}.\r\n     *\r\n     */\r\n    PlayerSelector = 'PlayerSelector',\r\n    /**\r\n     * @remarks\r\n     * String parameter.\r\n     *\r\n     */\r\n    String = 'String',\r\n}\r",
            "jsdoc": "/**\r\n * The types of paramaters accepted by a custom command.\r\n */\r",
            "enumValues": [
              {
                "name": "BlockType",
                "value": "BlockType",
                "description": ""
              },
              {
                "name": "Boolean",
                "value": "Boolean",
                "description": ""
              },
              {
                "name": "EntitySelector",
                "value": "EntitySelector",
                "description": ""
              },
              {
                "name": "EntityType",
                "value": "EntityType",
                "description": ""
              },
              {
                "name": "Enum",
                "value": "Enum",
                "description": ""
              },
              {
                "name": "Float",
                "value": "Float",
                "description": ""
              },
              {
                "name": "Integer",
                "value": "Integer",
                "description": ""
              },
              {
                "name": "ItemType",
                "value": "ItemType",
                "description": ""
              },
              {
                "name": "Location",
                "value": "Location",
                "description": ""
              },
              {
                "name": "PlayerSelector",
                "value": "PlayerSelector",
                "description": ""
              },
              {
                "name": "String",
                "value": "String",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommandparamtype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandSource",
            "name": "CustomCommandSource",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Who executed the command.\r /",
            "definition": "export enum CustomCommandSource {\n    /**\r\n     * @remarks\r\n     * Command originated from a command block.\r\n     *\r\n     */\r\n    Block = 'Block',\r\n    /**\r\n     * @remarks\r\n     * Command originated from an entity or player.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    NPCDialogue = 'NPCDialogue',\r\n    /**\r\n     * @remarks\r\n     * Command originated from the server.\r\n     *\r\n     */\r\n    Server = 'Server',\r\n}\r",
            "jsdoc": "/**\r\n * Who executed the command.\r\n */\r",
            "enumValues": [
              {
                "name": "Block",
                "value": "Block",
                "description": ""
              },
              {
                "name": "Entity",
                "value": "Entity",
                "description": ""
              },
              {
                "name": "NPCDialogue",
                "value": "NPCDialogue"
              },
              {
                "name": "Server",
                "value": "Server",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommandsource",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandStatus",
            "name": "CustomCommandStatus",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Command originated from the server.",
            "definition": "export enum CustomCommandStatus {\n    Success = 0,\r\n    Failure = 1,\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Command originated from the server.\r\n     *\r\n     */\r",
            "enumValues": [
              {
                "name": "Success",
                "value": 0
              },
              {
                "name": "Failure",
                "value": 1
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommandstatus",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomComponentNameErrorReason",
            "name": "CustomComponentNameErrorReason",
            "type": "enum",
            "module": "@minecraft/server",
            "definition": "export enum CustomComponentNameErrorReason {\n    NoNamespace = 1,\r\n    DisallowedNamespace = 2,\r\n}\r",
            "jsdoc": "",
            "enumValues": [
              {
                "name": "NoNamespace",
                "value": 1
              },
              {
                "name": "DisallowedNamespace",
                "value": 2
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcomponentnameerrorreason",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Difficulty",
            "name": "Difficulty",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "An enumeration for the various difficulty levels of\r Minecraft.\r /",
            "definition": "export enum Difficulty {\n    /**\r\n     * @remarks\r\n     * Easy difficulty level.\r\n     *\r\n     */\r\n    Easy = 'Easy',\r\n    /**\r\n     * @remarks\r\n     * Hard difficulty level.\r\n     *\r\n     */\r\n    Hard = 'Hard',\r\n    /**\r\n     * @remarks\r\n     * Normal difficulty level.\r\n     *\r\n     */\r\n    Normal = 'Normal',\r\n    /**\r\n     * @remarks\r\n     * Peaceful difficulty level.\r\n     *\r\n     */\r\n    Peaceful = 'Peaceful',\r\n}\r",
            "jsdoc": "/**\r\n * An enumeration for the various difficulty levels of\r\n * Minecraft.\r\n */\r",
            "enumValues": [
              {
                "name": "Easy",
                "value": "Easy",
                "description": ""
              },
              {
                "name": "Hard",
                "value": "Hard",
                "description": ""
              },
              {
                "name": "Normal",
                "value": "Normal",
                "description": ""
              },
              {
                "name": "Peaceful",
                "value": "Peaceful",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "difficulty",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Direction",
            "name": "Direction",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "A general purpose relative direction enumeration.\r /",
            "definition": "export enum Direction {\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} beneath (y - 1) of this item.\r\n     *\r\n     */\r\n    Down = 'Down',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east (x + 1) of this item.\r\n     *\r\n     */\r\n    East = 'East',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east (z + 1) of this item.\r\n     *\r\n     */\r\n    North = 'North',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the south (z - 1) of this item.\r\n     *\r\n     */\r\n    South = 'South',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} above (y + 1) of this item.\r\n     *\r\n     */\r\n    Up = 'Up',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the west (x - 1) of this item.\r\n     *\r\n     */\r\n    West = 'West',\r\n}\r",
            "jsdoc": "/**\r\n * A general purpose relative direction enumeration.\r\n */\r",
            "enumValues": [
              {
                "name": "Down",
                "value": "Down",
                "description": ""
              },
              {
                "name": "East",
                "value": "East",
                "description": ""
              },
              {
                "name": "North",
                "value": "North",
                "description": ""
              },
              {
                "name": "South",
                "value": "South",
                "description": ""
              },
              {
                "name": "Up",
                "value": "Up",
                "description": ""
              },
              {
                "name": "West",
                "value": "West",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "direction",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.DisplaySlotId",
            "name": "DisplaySlotId",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Specifies a mechanism for displaying scores on a scoreboard.\r /",
            "definition": "export enum DisplaySlotId {\n    /**\r\n     * @remarks\r\n     * Displays the score below the player's name.\r\n     *\r\n     */\r\n    BelowName = 'BelowName',\r\n    /**\r\n     * @remarks\r\n     * Displays the score as a list on the pause screen.\r\n     *\r\n     */\r\n    List = 'List',\r\n    /**\r\n     * @remarks\r\n     * Displays the score on the side of the player's screen.\r\n     *\r\n     */\r\n    Sidebar = 'Sidebar',\r\n}\r",
            "jsdoc": "/**\r\n * Specifies a mechanism for displaying scores on a scoreboard.\r\n */\r",
            "enumValues": [
              {
                "name": "BelowName",
                "value": "BelowName",
                "description": ""
              },
              {
                "name": "List",
                "value": "List",
                "description": ""
              },
              {
                "name": "Sidebar",
                "value": "Sidebar",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "displayslotid",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.DyeColor",
            "name": "DyeColor",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Specifies different colors for use as dye.\r /",
            "definition": "export enum DyeColor {\n    /**\r\n     * @remarks\r\n     * Black dye color.\r\n     *\r\n     */\r\n    Black = 'Black',\r\n    /**\r\n     * @remarks\r\n     * Blue dye color.\r\n     *\r\n     */\r\n    Blue = 'Blue',\r\n    /**\r\n     * @remarks\r\n     * Brown dye color.\r\n     *\r\n     */\r\n    Brown = 'Brown',\r\n    /**\r\n     * @remarks\r\n     * Cyan dye color.\r\n     *\r\n     */\r\n    Cyan = 'Cyan',\r\n    /**\r\n     * @remarks\r\n     * Gray dye color.\r\n     *\r\n     */\r\n    Gray = 'Gray',\r\n    /**\r\n     * @remarks\r\n     * Green dye color.\r\n     *\r\n     */\r\n    Green = 'Green',\r\n    /**\r\n     * @remarks\r\n     * Light blue dye color.\r\n     *\r\n     */\r\n    LightBlue = 'LightBlue',\r\n    /**\r\n     * @remarks\r\n     * Lime dye color.\r\n     *\r\n     */\r\n    Lime = 'Lime',\r\n    /**\r\n     * @remarks\r\n     * Magenta dye color.\r\n     *\r\n     */\r\n    Magenta = 'Magenta',\r\n    /**\r\n     * @remarks\r\n     * Orange dye color.\r\n     *\r\n     */\r\n    Orange = 'Orange',\r\n    /**\r\n     * @remarks\r\n     * Pink dye color.\r\n     *\r\n     */\r\n    Pink = 'Pink',\r\n    /**\r\n     * @remarks\r\n     * Purple dye color.\r\n     *\r\n     */\r\n    Purple = 'Purple',\r\n    /**\r\n     * @remarks\r\n     * Red dye color.\r\n     *\r\n     */\r\n    Red = 'Red',\r\n    /**\r\n     * @remarks\r\n     * Silver dye color.\r\n     *\r\n     */\r\n    Silver = 'Silver',\r\n    /**\r\n     * @remarks\r\n     * White dye color.\r\n     *\r\n     */\r\n    White = 'White',\r\n    /**\r\n     * @remarks\r\n     * Yellow dye color.\r\n     *\r\n     */\r\n    Yellow = 'Yellow',\r\n}\r",
            "jsdoc": "/**\r\n * Specifies different colors for use as dye.\r\n */\r",
            "enumValues": [
              {
                "name": "Black",
                "value": "Black",
                "description": ""
              },
              {
                "name": "Blue",
                "value": "Blue",
                "description": ""
              },
              {
                "name": "Brown",
                "value": "Brown",
                "description": ""
              },
              {
                "name": "Cyan",
                "value": "Cyan",
                "description": ""
              },
              {
                "name": "Gray",
                "value": "Gray",
                "description": ""
              },
              {
                "name": "Green",
                "value": "Green",
                "description": ""
              },
              {
                "name": "LightBlue",
                "value": "LightBlue",
                "description": ""
              },
              {
                "name": "Lime",
                "value": "Lime",
                "description": ""
              },
              {
                "name": "Magenta",
                "value": "Magenta",
                "description": ""
              },
              {
                "name": "Orange",
                "value": "Orange",
                "description": ""
              },
              {
                "name": "Pink",
                "value": "Pink",
                "description": ""
              },
              {
                "name": "Purple",
                "value": "Purple",
                "description": ""
              },
              {
                "name": "Red",
                "value": "Red",
                "description": ""
              },
              {
                "name": "Silver",
                "value": "Silver",
                "description": ""
              },
              {
                "name": "White",
                "value": "White",
                "description": ""
              },
              {
                "name": "Yellow",
                "value": "Yellow",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "dyecolor",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EasingType",
            "name": "EasingType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Yellow dye color.",
            "definition": "export enum EasingType {\n    InBack = 'InBack',\r\n    InBounce = 'InBounce',\r\n    InCirc = 'InCirc',\r\n    InCubic = 'InCubic',\r\n    InElastic = 'InElastic',\r\n    InExpo = 'InExpo',\r\n    InOutBack = 'InOutBack',\r\n    InOutBounce = 'InOutBounce',\r\n    InOutCirc = 'InOutCirc',\r\n    InOutCubic = 'InOutCubic',\r\n    InOutElastic = 'InOutElastic',\r\n    InOutExpo = 'InOutExpo',\r\n    InOutQuad = 'InOutQuad',\r\n    InOutQuart = 'InOutQuart',\r\n    InOutQuint = 'InOutQuint',\r\n    InOutSine = 'InOutSine',\r\n    InQuad = 'InQuad',\r\n    InQuart = 'InQuart',\r\n    InQuint = 'InQuint',\r\n    InSine = 'InSine',\r\n    Linear = 'Linear',\r\n    OutBack = 'OutBack',\r\n    OutBounce = 'OutBounce',\r\n    OutCirc = 'OutCirc',\r\n    OutCubic = 'OutCubic',\r\n    OutElastic = 'OutElastic',\r\n    OutExpo = 'OutExpo',\r\n    OutQuad = 'OutQuad',\r\n    OutQuart = 'OutQuart',\r\n    OutQuint = 'OutQuint',\r\n    OutSine = 'OutSine',\r\n    Spring = 'Spring',\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Yellow dye color.\r\n     *\r\n     */\r",
            "enumValues": [
              {
                "name": "InBack",
                "value": "InBack"
              },
              {
                "name": "InBounce",
                "value": "InBounce"
              },
              {
                "name": "InCirc",
                "value": "InCirc"
              },
              {
                "name": "InCubic",
                "value": "InCubic"
              },
              {
                "name": "InElastic",
                "value": "InElastic"
              },
              {
                "name": "InExpo",
                "value": "InExpo"
              },
              {
                "name": "InOutBack",
                "value": "InOutBack"
              },
              {
                "name": "InOutBounce",
                "value": "InOutBounce"
              },
              {
                "name": "InOutCirc",
                "value": "InOutCirc"
              },
              {
                "name": "InOutCubic",
                "value": "InOutCubic"
              },
              {
                "name": "InOutElastic",
                "value": "InOutElastic"
              },
              {
                "name": "InOutExpo",
                "value": "InOutExpo"
              },
              {
                "name": "InOutQuad",
                "value": "InOutQuad"
              },
              {
                "name": "InOutQuart",
                "value": "InOutQuart"
              },
              {
                "name": "InOutQuint",
                "value": "InOutQuint"
              },
              {
                "name": "InOutSine",
                "value": "InOutSine"
              },
              {
                "name": "InQuad",
                "value": "InQuad"
              },
              {
                "name": "InQuart",
                "value": "InQuart"
              },
              {
                "name": "InQuint",
                "value": "InQuint"
              },
              {
                "name": "InSine",
                "value": "InSine"
              },
              {
                "name": "Linear",
                "value": "Linear"
              },
              {
                "name": "OutBack",
                "value": "OutBack"
              },
              {
                "name": "OutBounce",
                "value": "OutBounce"
              },
              {
                "name": "OutCirc",
                "value": "OutCirc"
              },
              {
                "name": "OutCubic",
                "value": "OutCubic"
              },
              {
                "name": "OutElastic",
                "value": "OutElastic"
              },
              {
                "name": "OutExpo",
                "value": "OutExpo"
              },
              {
                "name": "OutQuad",
                "value": "OutQuad"
              },
              {
                "name": "OutQuart",
                "value": "OutQuart"
              },
              {
                "name": "OutQuint",
                "value": "OutQuint"
              },
              {
                "name": "OutSine",
                "value": "OutSine"
              },
              {
                "name": "Spring",
                "value": "Spring"
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "easingtype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EnchantmentSlot",
            "name": "EnchantmentSlot",
            "type": "enum",
            "module": "@minecraft/server",
            "definition": "export enum EnchantmentSlot {\n    ArmorFeet = 'ArmorFeet',\r\n    ArmorHead = 'ArmorHead',\r\n    ArmorLegs = 'ArmorLegs',\r\n    ArmorTorso = 'ArmorTorso',\r\n    Axe = 'Axe',\r\n    Bow = 'Bow',\r\n    CarrotStick = 'CarrotStick',\r\n    CosmeticHead = 'CosmeticHead',\r\n    Crossbow = 'Crossbow',\r\n    Elytra = 'Elytra',\r\n    FishingRod = 'FishingRod',\r\n    Flintsteel = 'Flintsteel',\r\n    Hoe = 'Hoe',\r\n    Pickaxe = 'Pickaxe',\r\n    Shears = 'Shears',\r\n    Shield = 'Shield',\r\n    Shovel = 'Shovel',\r\n    Spear = 'Spear',\r\n    Sword = 'Sword',\r\n}\r",
            "jsdoc": "",
            "enumValues": [
              {
                "name": "ArmorFeet",
                "value": "ArmorFeet"
              },
              {
                "name": "ArmorHead",
                "value": "ArmorHead"
              },
              {
                "name": "ArmorLegs",
                "value": "ArmorLegs"
              },
              {
                "name": "ArmorTorso",
                "value": "ArmorTorso"
              },
              {
                "name": "Axe",
                "value": "Axe"
              },
              {
                "name": "Bow",
                "value": "Bow"
              },
              {
                "name": "CarrotStick",
                "value": "CarrotStick"
              },
              {
                "name": "CosmeticHead",
                "value": "CosmeticHead"
              },
              {
                "name": "Crossbow",
                "value": "Crossbow"
              },
              {
                "name": "Elytra",
                "value": "Elytra"
              },
              {
                "name": "FishingRod",
                "value": "FishingRod"
              },
              {
                "name": "Flintsteel",
                "value": "Flintsteel"
              },
              {
                "name": "Hoe",
                "value": "Hoe"
              },
              {
                "name": "Pickaxe",
                "value": "Pickaxe"
              },
              {
                "name": "Shears",
                "value": "Shears"
              },
              {
                "name": "Shield",
                "value": "Shield"
              },
              {
                "name": "Shovel",
                "value": "Shovel"
              },
              {
                "name": "Spear",
                "value": "Spear"
              },
              {
                "name": "Sword",
                "value": "Sword"
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "enchantmentslot",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityComponentTypes",
            "name": "EntityComponentTypes",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The types of entity components that are accessible via\r function Entity.getComponent.\r /",
            "definition": "export enum EntityComponentTypes {\n    /**\r\n     * @remarks\r\n     * When added, this component makes the entity spawn with a\r\n     * rider of the specified entityType.\r\n     *\r\n     */\r\n    AddRider = 'minecraft:addrider',\r\n    /**\r\n     * @remarks\r\n     * Adds a timer for the entity to grow up. It can be\r\n     * accelerated by giving the entity the items it likes as\r\n     * defined by feedItems.\r\n     *\r\n     */\r\n    Ageable = 'minecraft:ageable',\r\n    /**\r\n     * @remarks\r\n     * Defines what blocks this entity can breathe in and gives\r\n     * them the ability to suffocate.\r\n     *\r\n     */\r\n    Breathable = 'minecraft:breathable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * climb up ladders.\r\n     *\r\n     */\r\n    CanClimb = 'minecraft:can_climb',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * fly, and the pathfinder won't be restricted to paths where a\r\n     * solid block is required underneath it.\r\n     *\r\n     */\r\n    CanFly = 'minecraft:can_fly',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * power jump like the horse does within Minecraft.\r\n     *\r\n     */\r\n    CanPowerJump = 'minecraft:can_power_jump',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's color. Only works on certain entities\r\n     * that have predefined color values (e.g., sheep, llama,\r\n     * shulker).\r\n     *\r\n     */\r\n    Color = 'minecraft:color',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's secondary color. Only works on certain\r\n     * entities that have predefined secondary color values (e.g.,\r\n     * tropical fish).\r\n     *\r\n     */\r\n    Color2 = 'minecraft:color2',\r\n    CursorInventory = 'minecraft:cursor_inventory',\r\n    /**\r\n     * @remarks\r\n     * Provides access to a mob's equipment slots. This component\r\n     * exists for all mob entities.\r\n     *\r\n     */\r\n    Equippable = 'minecraft:equippable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity\r\n     * doesn't take damage from fire.\r\n     *\r\n     */\r\n    FireImmune = 'minecraft:fire_immune',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can\r\n     * float in liquid blocks.\r\n     *\r\n     */\r\n    FloatsInLiquid = 'minecraft:floats_in_liquid',\r\n    /**\r\n     * @remarks\r\n     * Represents the flying speed of an entity.\r\n     *\r\n     */\r\n    FlyingSpeed = 'minecraft:flying_speed',\r\n    /**\r\n     * @remarks\r\n     * Defines how much friction affects this entity.\r\n     *\r\n     */\r\n    FrictionModifier = 'minecraft:friction_modifier',\r\n    /**\r\n     * @remarks\r\n     * Defines the interactions with this entity for healing it.\r\n     *\r\n     */\r\n    Healable = 'minecraft:healable',\r\n    /**\r\n     * @remarks\r\n     * Defines the health properties of an entity.\r\n     *\r\n     */\r\n    Health = 'minecraft:health',\r\n    /**\r\n     * @remarks\r\n     * Defines this entity's inventory properties.\r\n     *\r\n     */\r\n    Inventory = 'minecraft:inventory',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is a\r\n     * baby.\r\n     *\r\n     */\r\n    IsBaby = 'minecraft:is_baby',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * charged.\r\n     *\r\n     */\r\n    IsCharged = 'minecraft:is_charged',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently carrying a chest.\r\n     *\r\n     */\r\n    IsChested = 'minecraft:is_chested',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that dyes can be used\r\n     * on this entity to change its color.\r\n     *\r\n     */\r\n    IsDyeable = 'minecraft:is_dyeable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can\r\n     * hide from hostile mobs while invisible.\r\n     *\r\n     */\r\n    IsHiddenWhenInvisible = 'minecraft:is_hidden_when_invisible',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity this\r\n     * currently on fire.\r\n     *\r\n     */\r\n    IsIgnited = 'minecraft:is_ignited',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is an\r\n     * illager captain.\r\n     *\r\n     */\r\n    IsIllagerCaptain = 'minecraft:is_illager_captain',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently saddled.\r\n     *\r\n     */\r\n    IsSaddled = 'minecraft:is_saddled',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently shaking.\r\n     *\r\n     */\r\n    IsShaking = 'minecraft:is_shaking',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently sheared.\r\n     *\r\n     */\r\n    IsSheared = 'minecraft:is_sheared',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can be\r\n     * stacked.\r\n     *\r\n     */\r\n    IsStackable = 'minecraft:is_stackable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently stunned.\r\n     *\r\n     */\r\n    IsStunned = 'minecraft:is_stunned',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently tamed.\r\n     *\r\n     */\r\n    IsTamed = 'minecraft:is_tamed',\r\n    /**\r\n     * @remarks\r\n     * If added onto the entity, this indicates that the entity\r\n     * represents a free-floating item in the world. Lets you\r\n     * retrieve the actual item stack contents via the itemStack\r\n     * property.\r\n     *\r\n     */\r\n    Item = 'minecraft:item',\r\n    /**\r\n     * @remarks\r\n     * Defines the base movement speed in lava of this entity.\r\n     *\r\n     */\r\n    LavaMovement = 'minecraft:lava_movement',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to be leashed and defines the conditions\r\n     * and events for this entity when is leashed.\r\n     *\r\n     */\r\n    Leashable = 'minecraft:leashable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity\r\n     * contains an additional variant value. Can be used to further\r\n     * differentiate variants.\r\n     *\r\n     */\r\n    MarkVariant = 'minecraft:mark_variant',\r\n    /**\r\n     * @remarks\r\n     * Defines the general movement speed of this entity.\r\n     *\r\n     */\r\n    Movement = 'minecraft:movement',\r\n    /**\r\n     * @remarks\r\n     * When added, this movement control allows the mob to swim in\r\n     * water and walk on land.\r\n     *\r\n     */\r\n    MovementAmphibious = 'minecraft:movement.amphibious',\r\n    /**\r\n     * @remarks\r\n     * When added, this component allows the movement of an entity.\r\n     *\r\n     */\r\n    MovementBasic = 'minecraft:movement.basic',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to fly.\r\n     *\r\n     */\r\n    MovementFly = 'minecraft:movement.fly',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control allows a mob to fly, swim,\r\n     * climb, etc.\r\n     *\r\n     */\r\n    MovementGeneric = 'minecraft:movement.generic',\r\n    /**\r\n     * @remarks\r\n     * When added, this movement control allows the mob to glide.\r\n     *\r\n     */\r\n    MovementGlide = 'minecraft:movement.glide',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to hover.\r\n     *\r\n     */\r\n    MovementHover = 'minecraft:movement.hover',\r\n    /**\r\n     * @remarks\r\n     * Move control that causes the mob to jump as it moves with a\r\n     * specified delay between jumps.\r\n     *\r\n     */\r\n    MovementJump = 'minecraft:movement.jump',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to hop as it\r\n     * moves.\r\n     *\r\n     */\r\n    MovementSkip = 'minecraft:movement.skip',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to sway side to\r\n     * side giving the impression it is swimming.\r\n     *\r\n     */\r\n    MovementSway = 'minecraft:movement.sway',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths that include vertical\r\n     * walls (for example, like Minecraft spiders do.)\r\n     *\r\n     */\r\n    NavigationClimb = 'minecraft:navigation.climb',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by flying around the\r\n     * air like the regular Ghast.\r\n     *\r\n     */\r\n    NavigationFloat = 'minecraft:navigation.float',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths in the air (for\r\n     * example, like Minecraft parrots do.)\r\n     *\r\n     */\r\n    NavigationFly = 'minecraft:navigation.fly',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by walking, swimming,\r\n     * flying and/or climbing around and jumping up and down a\r\n     * block.\r\n     *\r\n     */\r\n    NavigationGeneric = 'minecraft:navigation.generic',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths in the air (for\r\n     * example, like the Minecraft Bees do.) Keeps them from\r\n     * falling out of the skies and doing predictive movement.\r\n     *\r\n     */\r\n    NavigationHover = 'minecraft:navigation.hover',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by walking around and\r\n     * jumping up and down a block like regular mobs.\r\n     *\r\n     */\r\n    NavigationWalk = 'minecraft:navigation.walk',\r\n    /**\r\n     * @remarks\r\n     * When present on an entity, this entity is on fire.\r\n     *\r\n     */\r\n    OnFire = 'minecraft:onfire',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the exhaustion of a player. This\r\n     * is only available on players.\r\n     *\r\n     */\r\n    Exhaustion = 'minecraft:player.exhaustion',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the hunger of a player. This is\r\n     * only available on players.\r\n     *\r\n     */\r\n    Hunger = 'minecraft:player.hunger',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the saturation of a player. This\r\n     * is only available on players.\r\n     *\r\n     */\r\n    Saturation = 'minecraft:player.saturation',\r\n    /**\r\n     * @remarks\r\n     * The projectile component controls the properties of a\r\n     * projectile entity and allows it to be shot in a given\r\n     * direction. This component is present when the entity has the\r\n     * minecraft:projectile component.\r\n     *\r\n     */\r\n    Projectile = 'minecraft:projectile',\r\n    /**\r\n     * @remarks\r\n     * Sets the distance through which the entity can push through.\r\n     *\r\n     */\r\n    PushThrough = 'minecraft:push_through',\r\n    /**\r\n     * @remarks\r\n     * When added, this component adds the capability that an\r\n     * entity can be ridden by another entity.\r\n     *\r\n     */\r\n    Rideable = 'minecraft:rideable',\r\n    /**\r\n     * @remarks\r\n     * This component is added to any entity when it is riding\r\n     * another entity.\r\n     *\r\n     */\r\n    Riding = 'minecraft:riding',\r\n    /**\r\n     * @remarks\r\n     * Sets the entity's visual size.\r\n     *\r\n     */\r\n    Scale = 'minecraft:scale',\r\n    /**\r\n     * @remarks\r\n     * Skin Id value. Can be used to differentiate skins, such as\r\n     * base skins for villagers.\r\n     *\r\n     */\r\n    SkinId = 'minecraft:skin_id',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's strength to carry items.\r\n     *\r\n     */\r\n    Strength = 'minecraft:strength',\r\n    /**\r\n     * @remarks\r\n     * Defines the rules for an entity to be tamed by the player.\r\n     *\r\n     */\r\n    Tameable = 'minecraft:tameable',\r\n    /**\r\n     * @remarks\r\n     * Contains options for taming a rideable entity based on the\r\n     * entity that mounts it.\r\n     *\r\n     */\r\n    TameMount = 'minecraft:tamemount',\r\n    /**\r\n     * @remarks\r\n     * Used to determine the type families the entity belongs to.\r\n     *\r\n     */\r\n    TypeFamily = 'minecraft:type_family',\r\n    /**\r\n     * @remarks\r\n     * Defines the general movement speed underwater of this\r\n     * entity.\r\n     *\r\n     */\r\n    UnderwaterMovement = 'minecraft:underwater_movement',\r\n    /**\r\n     * @remarks\r\n     * Used to differentiate the component group of a variant of an\r\n     * entity from others. (e.g. ocelot, villager).\r\n     *\r\n     */\r\n    Variant = 'minecraft:variant',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity wants\r\n     * to become a jockey.\r\n     *\r\n     */\r\n    WantsJockey = 'minecraft:wants_jockey',\r\n}\r",
            "jsdoc": "/**\r\n * The types of entity components that are accessible via\r\n * function Entity.getComponent.\r\n */\r",
            "enumValues": [
              {
                "name": "AddRider",
                "value": "minecraft:addrider",
                "description": ""
              },
              {
                "name": "Ageable",
                "value": "minecraft:ageable",
                "description": ""
              },
              {
                "name": "Breathable",
                "value": "minecraft:breathable",
                "description": ""
              },
              {
                "name": "CanClimb",
                "value": "minecraft:can_climb",
                "description": ""
              },
              {
                "name": "CanFly",
                "value": "minecraft:can_fly",
                "description": ""
              },
              {
                "name": "CanPowerJump",
                "value": "minecraft:can_power_jump",
                "description": ""
              },
              {
                "name": "Color",
                "value": "minecraft:color",
                "description": ""
              },
              {
                "name": "Color2",
                "value": "minecraft:color2",
                "description": ""
              },
              {
                "name": "CursorInventory",
                "value": "minecraft:cursor_inventory"
              },
              {
                "name": "Equippable",
                "value": "minecraft:equippable",
                "description": ""
              },
              {
                "name": "FireImmune",
                "value": "minecraft:fire_immune",
                "description": ""
              },
              {
                "name": "FloatsInLiquid",
                "value": "minecraft:floats_in_liquid",
                "description": ""
              },
              {
                "name": "FlyingSpeed",
                "value": "minecraft:flying_speed",
                "description": ""
              },
              {
                "name": "FrictionModifier",
                "value": "minecraft:friction_modifier",
                "description": ""
              },
              {
                "name": "Healable",
                "value": "minecraft:healable",
                "description": ""
              },
              {
                "name": "Health",
                "value": "minecraft:health",
                "description": ""
              },
              {
                "name": "Inventory",
                "value": "minecraft:inventory",
                "description": ""
              },
              {
                "name": "IsBaby",
                "value": "minecraft:is_baby",
                "description": ""
              },
              {
                "name": "IsCharged",
                "value": "minecraft:is_charged",
                "description": ""
              },
              {
                "name": "IsChested",
                "value": "minecraft:is_chested",
                "description": ""
              },
              {
                "name": "IsDyeable",
                "value": "minecraft:is_dyeable",
                "description": ""
              },
              {
                "name": "IsHiddenWhenInvisible",
                "value": "minecraft:is_hidden_when_invisible",
                "description": ""
              },
              {
                "name": "IsIgnited",
                "value": "minecraft:is_ignited",
                "description": ""
              },
              {
                "name": "IsIllagerCaptain",
                "value": "minecraft:is_illager_captain",
                "description": ""
              },
              {
                "name": "IsSaddled",
                "value": "minecraft:is_saddled",
                "description": ""
              },
              {
                "name": "IsShaking",
                "value": "minecraft:is_shaking",
                "description": ""
              },
              {
                "name": "IsSheared",
                "value": "minecraft:is_sheared",
                "description": ""
              },
              {
                "name": "IsStackable",
                "value": "minecraft:is_stackable",
                "description": ""
              },
              {
                "name": "IsStunned",
                "value": "minecraft:is_stunned",
                "description": ""
              },
              {
                "name": "IsTamed",
                "value": "minecraft:is_tamed",
                "description": ""
              },
              {
                "name": "Item",
                "value": "minecraft:item",
                "description": ""
              },
              {
                "name": "LavaMovement",
                "value": "minecraft:lava_movement",
                "description": ""
              },
              {
                "name": "Leashable",
                "value": "minecraft:leashable",
                "description": ""
              },
              {
                "name": "MarkVariant",
                "value": "minecraft:mark_variant",
                "description": ""
              },
              {
                "name": "Movement",
                "value": "minecraft:movement",
                "description": ""
              },
              {
                "name": "MovementAmphibious",
                "value": "minecraft:movement.amphibious",
                "description": ""
              },
              {
                "name": "MovementBasic",
                "value": "minecraft:movement.basic",
                "description": ""
              },
              {
                "name": "MovementFly",
                "value": "minecraft:movement.fly",
                "description": ""
              },
              {
                "name": "MovementGeneric",
                "value": "minecraft:movement.generic",
                "description": ""
              },
              {
                "name": "MovementGlide",
                "value": "minecraft:movement.glide",
                "description": ""
              },
              {
                "name": "MovementHover",
                "value": "minecraft:movement.hover",
                "description": ""
              },
              {
                "name": "MovementJump",
                "value": "minecraft:movement.jump",
                "description": ""
              },
              {
                "name": "MovementSkip",
                "value": "minecraft:movement.skip",
                "description": ""
              },
              {
                "name": "MovementSway",
                "value": "minecraft:movement.sway",
                "description": ""
              },
              {
                "name": "NavigationClimb",
                "value": "minecraft:navigation.climb",
                "description": ""
              },
              {
                "name": "NavigationFloat",
                "value": "minecraft:navigation.float",
                "description": ""
              },
              {
                "name": "NavigationFly",
                "value": "minecraft:navigation.fly",
                "description": ""
              },
              {
                "name": "NavigationGeneric",
                "value": "minecraft:navigation.generic",
                "description": ""
              },
              {
                "name": "NavigationHover",
                "value": "minecraft:navigation.hover",
                "description": ""
              },
              {
                "name": "NavigationWalk",
                "value": "minecraft:navigation.walk",
                "description": ""
              },
              {
                "name": "OnFire",
                "value": "minecraft:onfire",
                "description": ""
              },
              {
                "name": "Exhaustion",
                "value": "minecraft:player.exhaustion",
                "description": ""
              },
              {
                "name": "Hunger",
                "value": "minecraft:player.hunger",
                "description": ""
              },
              {
                "name": "Saturation",
                "value": "minecraft:player.saturation",
                "description": ""
              },
              {
                "name": "Projectile",
                "value": "minecraft:projectile",
                "description": ""
              },
              {
                "name": "PushThrough",
                "value": "minecraft:push_through",
                "description": ""
              },
              {
                "name": "Rideable",
                "value": "minecraft:rideable",
                "description": ""
              },
              {
                "name": "Riding",
                "value": "minecraft:riding",
                "description": ""
              },
              {
                "name": "Scale",
                "value": "minecraft:scale",
                "description": ""
              },
              {
                "name": "SkinId",
                "value": "minecraft:skin_id",
                "description": ""
              },
              {
                "name": "Strength",
                "value": "minecraft:strength",
                "description": ""
              },
              {
                "name": "Tameable",
                "value": "minecraft:tameable",
                "description": ""
              },
              {
                "name": "TameMount",
                "value": "minecraft:tamemount",
                "description": ""
              },
              {
                "name": "TypeFamily",
                "value": "minecraft:type_family",
                "description": ""
              },
              {
                "name": "UnderwaterMovement",
                "value": "minecraft:underwater_movement",
                "description": ""
              },
              {
                "name": "Variant",
                "value": "minecraft:variant",
                "description": ""
              },
              {
                "name": "WantsJockey",
                "value": "minecraft:wants_jockey",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitycomponenttypes",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityDamageCause",
            "name": "EntityDamageCause",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Describes the source of damage from an Entity.\r /",
            "definition": "export enum EntityDamageCause {\n    /**\r\n     * @remarks\r\n     * Damage caused by a falling anvil.\r\n     *\r\n     */\r\n    anvil = 'anvil',\r\n    /**\r\n     * @remarks\r\n     * Damage caused from a non-Entity explosion. For example, an\r\n     * exploding bed.\r\n     *\r\n     */\r\n    blockExplosion = 'blockExplosion',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by Campfires.\r\n     *\r\n     */\r\n    campfire = 'campfire',\r\n    /**\r\n     * @remarks\r\n     * Unused.\r\n     *\r\n     */\r\n    charging = 'charging',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by physically touching an Entity or Block. For\r\n     * example, touching a Sweet Berry bush or Pufferfish.\r\n     *\r\n     */\r\n    contact = 'contact',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being out of air and inside a\r\n     * liquid block.\r\n     *\r\n     */\r\n    drowning = 'drowning',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity attack.\r\n     *\r\n     */\r\n    entityAttack = 'entityAttack',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity explosion. For example, a Creeper\r\n     * or Wither.\r\n     *\r\n     */\r\n    entityExplosion = 'entityExplosion',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by falling onto the ground.\r\n     *\r\n     */\r\n    fall = 'fall',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by falling blocks. Note: Anvils and\r\n     * Stalactites have their own damage causes.\r\n     *\r\n     */\r\n    fallingBlock = 'fallingBlock',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by catching on fire.\r\n     *\r\n     */\r\n    fire = 'fire',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by burning over time.\r\n     *\r\n     */\r\n    fireTick = 'fireTick',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by fireworks.\r\n     *\r\n     */\r\n    fireworks = 'fireworks',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by flying into a wall at high speed while\r\n     * gliding with Elytra.\r\n     *\r\n     */\r\n    flyIntoWall = 'flyIntoWall',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by staying inside a Powder Snow block.\r\n     *\r\n     */\r\n    freezing = 'freezing',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Lava block.\r\n     *\r\n     */\r\n    lava = 'lava',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by being struck by lightning.\r\n     *\r\n     */\r\n    lightning = 'lightning',\r\n    maceSmash = 'maceSmash',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by magical attacks. For example, Evoker Fang\r\n     * or Conduit Block.\r\n     *\r\n     */\r\n    magic = 'magic',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Magma block.\r\n     *\r\n     */\r\n    magma = 'magma',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by no source. For example, from a command or\r\n     * script.\r\n     *\r\n     */\r\n    none = 'none',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an indirect source. For example, setting a\r\n     * mob's health to 0 in a behavior pack.\r\n     *\r\n     */\r\n    override = 'override',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a Piston.\r\n     *\r\n     */\r\n    piston = 'piston',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a projectile.\r\n     *\r\n     */\r\n    projectile = 'projectile',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by Goat ramming.\r\n     *\r\n     */\r\n    ramAttack = 'ramAttack',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the /kill command.\r\n     *\r\n     */\r\n    selfDestruct = 'selfDestruct',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Warden's Sonic Boom attack.\r\n     *\r\n     */\r\n    sonicBoom = 'sonicBoom',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a Soul Campfire.\r\n     *\r\n     */\r\n    soulCampfire = 'soulCampfire',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a falling Stalactite block.\r\n     *\r\n     */\r\n    stalactite = 'stalactite',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Stalagmite block.\r\n     *\r\n     */\r\n    stalagmite = 'stalagmite',\r\n    /**\r\n     * @remarks\r\n     * Damage caused over time by having an empty hunger bar.\r\n     *\r\n     */\r\n    starve = 'starve',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being out of air and inside a\r\n     * non-liquid block.\r\n     *\r\n     */\r\n    suffocation = 'suffocation',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being in an inhabitable climate.\r\n     * For example, a Snow Golem in a biome with a temperature\r\n     * greater than 1.\r\n     *\r\n     */\r\n    temperature = 'temperature',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Thorns armor enchantment and by the\r\n     * Guardian thorns effect.\r\n     *\r\n     */\r\n    thorns = 'thorns',\r\n    /**\r\n     * @remarks\r\n     * Damage caused over time by falling into the void.\r\n     *\r\n     */\r\n    'void' = 'void',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Wither effect. For example, from\r\n     * touching a Wither Rose.\r\n     *\r\n     */\r\n    wither = 'wither',\r\n}\r",
            "jsdoc": "/**\r\n * Describes the source of damage from an Entity.\r\n */\r",
            "enumValues": [
              {
                "name": "anvil",
                "value": "anvil",
                "description": ""
              },
              {
                "name": "blockExplosion",
                "value": "blockExplosion",
                "description": ""
              },
              {
                "name": "campfire",
                "value": "campfire",
                "description": ""
              },
              {
                "name": "charging",
                "value": "charging",
                "description": ""
              },
              {
                "name": "contact",
                "value": "contact",
                "description": ""
              },
              {
                "name": "drowning",
                "value": "drowning",
                "description": ""
              },
              {
                "name": "entityAttack",
                "value": "entityAttack",
                "description": ""
              },
              {
                "name": "entityExplosion",
                "value": "entityExplosion",
                "description": ""
              },
              {
                "name": "fall",
                "value": "fall",
                "description": ""
              },
              {
                "name": "fallingBlock",
                "value": "fallingBlock",
                "description": ""
              },
              {
                "name": "fire",
                "value": "fire",
                "description": ""
              },
              {
                "name": "fireTick",
                "value": "fireTick",
                "description": ""
              },
              {
                "name": "fireworks",
                "value": "fireworks",
                "description": ""
              },
              {
                "name": "flyIntoWall",
                "value": "flyIntoWall",
                "description": ""
              },
              {
                "name": "freezing",
                "value": "freezing",
                "description": ""
              },
              {
                "name": "lava",
                "value": "lava",
                "description": ""
              },
              {
                "name": "lightning",
                "value": "lightning",
                "description": ""
              },
              {
                "name": "maceSmash",
                "value": "maceSmash"
              },
              {
                "name": "magic",
                "value": "magic",
                "description": ""
              },
              {
                "name": "magma",
                "value": "magma",
                "description": ""
              },
              {
                "name": "none",
                "value": "none",
                "description": ""
              },
              {
                "name": "override",
                "value": "override",
                "description": ""
              },
              {
                "name": "piston",
                "value": "piston",
                "description": ""
              },
              {
                "name": "projectile",
                "value": "projectile",
                "description": ""
              },
              {
                "name": "ramAttack",
                "value": "ramAttack",
                "description": ""
              },
              {
                "name": "selfDestruct",
                "value": "selfDestruct",
                "description": ""
              },
              {
                "name": "sonicBoom",
                "value": "sonicBoom",
                "description": ""
              },
              {
                "name": "soulCampfire",
                "value": "soulCampfire",
                "description": ""
              },
              {
                "name": "stalactite",
                "value": "stalactite",
                "description": ""
              },
              {
                "name": "stalagmite",
                "value": "stalagmite",
                "description": ""
              },
              {
                "name": "starve",
                "value": "starve",
                "description": ""
              },
              {
                "name": "suffocation",
                "value": "suffocation",
                "description": ""
              },
              {
                "name": "temperature",
                "value": "temperature",
                "description": ""
              },
              {
                "name": "thorns",
                "value": "thorns",
                "description": ""
              },
              {
                "name": "wither",
                "value": "wither",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitydamagecause",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityInitializationCause",
            "name": "EntityInitializationCause",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "An enumeration describing initialization cause of an entity.\r /",
            "definition": "export enum EntityInitializationCause {\n    /**\r\n     * @remarks\r\n     * Case when an entity is created as child of other entity or\r\n     * entities, e.g., cows making a cow or slimes making smaller\r\n     * slimes after dying.\r\n     *\r\n     */\r\n    Born = 'Born',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is created by an event, e.g., a\r\n     * Wandering trader spawning llamas.\r\n     *\r\n     */\r\n    Event = 'Event',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is loaded into the world.\r\n     *\r\n     */\r\n    Loaded = 'Loaded',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is naturally spawned in the world.\r\n     *\r\n     */\r\n    Spawned = 'Spawned',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is transformed into another entity.\r\n     *\r\n     */\r\n    Transformed = 'Transformed',\r\n}\r",
            "jsdoc": "/**\r\n * An enumeration describing initialization cause of an entity.\r\n */\r",
            "enumValues": [
              {
                "name": "Born",
                "value": "Born",
                "description": ""
              },
              {
                "name": "Event",
                "value": "Event",
                "description": ""
              },
              {
                "name": "Loaded",
                "value": "Loaded",
                "description": ""
              },
              {
                "name": "Spawned",
                "value": "Spawned",
                "description": ""
              },
              {
                "name": "Transformed",
                "value": "Transformed",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityinitializationcause",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EquipmentSlot",
            "name": "EquipmentSlot",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The equipment slot of the mob. This includes armor, offhand\r and mainhand slots.\r /",
            "definition": "export enum EquipmentSlot {\n    /**\r\n     * @remarks\r\n     * The chest slot. This slot is used to hold items such as\r\n     * Chestplate or Elytra.\r\n     *\r\n     */\r\n    Chest = 'Chest',\r\n    /**\r\n     * @remarks\r\n     * The feet slot. This slot is used to hold items such as\r\n     * Boots.\r\n     *\r\n     */\r\n    Feet = 'Feet',\r\n    /**\r\n     * @remarks\r\n     * The head slot. This slot is used to hold items such as\r\n     * Helmets or Carved Pumpkins.\r\n     *\r\n     */\r\n    Head = 'Head',\r\n    /**\r\n     * @remarks\r\n     * The legs slot. This slot is used to hold items such as\r\n     * Leggings.\r\n     *\r\n     */\r\n    Legs = 'Legs',\r\n    /**\r\n     * @remarks\r\n     * The mainhand slot. For players, the mainhand slot refers to\r\n     * the currently active hotbar slot.\r\n     *\r\n     */\r\n    Mainhand = 'Mainhand',\r\n    /**\r\n     * @remarks\r\n     * The offhand slot. This slot is used to hold items such as\r\n     * shields and maps.\r\n     *\r\n     */\r\n    Offhand = 'Offhand',\r\n}\r",
            "jsdoc": "/**\r\n * The equipment slot of the mob. This includes armor, offhand\r\n * and mainhand slots.\r\n */\r",
            "enumValues": [
              {
                "name": "Chest",
                "value": "Chest",
                "description": ""
              },
              {
                "name": "Feet",
                "value": "Feet",
                "description": ""
              },
              {
                "name": "Head",
                "value": "Head",
                "description": ""
              },
              {
                "name": "Legs",
                "value": "Legs",
                "description": ""
              },
              {
                "name": "Mainhand",
                "value": "Mainhand",
                "description": ""
              },
              {
                "name": "Offhand",
                "value": "Offhand",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "equipmentslot",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.FluidType",
            "name": "FluidType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Represents the type of fluid for use within a fluid\r containing block, like a cauldron.\r /",
            "definition": "export enum FluidType {\n    /**\r\n     * @remarks\r\n     * Represents lava as a type of fluid.\r\n     *\r\n     */\r\n    Lava = 'Lava',\r\n    /**\r\n     * @remarks\r\n     * Represents a potion as a type of fluid.\r\n     *\r\n     */\r\n    Potion = 'Potion',\r\n    /**\r\n     * @remarks\r\n     * Represents powder snow as a type of fluid.\r\n     *\r\n     */\r\n    PowderSnow = 'PowderSnow',\r\n    /**\r\n     * @remarks\r\n     * Represents water as a type of fluida.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
            "jsdoc": "/**\r\n * Represents the type of fluid for use within a fluid\r\n * containing block, like a cauldron.\r\n */\r",
            "enumValues": [
              {
                "name": "Lava",
                "value": "Lava",
                "description": ""
              },
              {
                "name": "Potion",
                "value": "Potion",
                "description": ""
              },
              {
                "name": "PowderSnow",
                "value": "PowderSnow",
                "description": ""
              },
              {
                "name": "Water",
                "value": "Water",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "fluidtype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.GameMode",
            "name": "GameMode",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Represents a game mode for the current world experience.\r /",
            "definition": "export enum GameMode {\n    /**\r\n     * @remarks\r\n     * World is in a more locked-down experience, where blocks may\r\n     * not be manipulated.\r\n     *\r\n     */\r\n    Adventure = 'Adventure',\r\n    /**\r\n     * @remarks\r\n     * World is in a full creative mode. In creative mode, the\r\n     * player has all the resources available in the item selection\r\n     * tabs and the survival selection tab. They can also destroy\r\n     * blocks instantly including those which would normally be\r\n     * indestructible. Command and structure blocks can also be\r\n     * used in creative mode. Items also do not lose durability or\r\n     * disappear.\r\n     *\r\n     */\r\n    Creative = 'Creative',\r\n    /**\r\n     * @remarks\r\n     * World is in spectator mode. In spectator mode, spectators\r\n     * are always flying and cannot become grounded. Spectators can\r\n     * pass through solid blocks and entities without any\r\n     * collisions, and cannot use items or interact with blocks or\r\n     * mobs. Spectators cannot be seen by mobs or other players,\r\n     * except for other spectators; spectators appear as a\r\n     * transparent floating head.\r\n     *\r\n     */\r\n    Spectator = 'Spectator',\r\n    /**\r\n     * @remarks\r\n     * World is in a survival mode, where players can take damage\r\n     * and entities may not be peaceful. Survival mode is where the\r\n     * player must collect resources, build structures while\r\n     * surviving in their generated world. Activities can, over\r\n     * time, chip away at player health and hunger bar.\r\n     *\r\n     */\r\n    Survival = 'Survival',\r\n}\r",
            "jsdoc": "/**\r\n * Represents a game mode for the current world experience.\r\n */\r",
            "enumValues": [
              {
                "name": "Adventure",
                "value": "Adventure",
                "description": ""
              },
              {
                "name": "Creative",
                "value": "Creative",
                "description": ""
              },
              {
                "name": "Spectator",
                "value": "Spectator",
                "description": ""
              },
              {
                "name": "Survival",
                "value": "Survival",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "gamemode",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.GameRule",
            "name": "GameRule",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Game rules. These values can also be controlled via the\r /gamerule command.\r /",
            "definition": "export enum GameRule {\n    /**\r\n     * @remarks\r\n     * Whether command blocks should notify admins when they\r\n     * perform commands.\r\n     *\r\n     */\r\n    CommandBlockOutput = 'commandBlockOutput',\r\n    /**\r\n     * @remarks\r\n     * Controls whether command blocks can execute commands.\r\n     *\r\n     */\r\n    CommandBlocksEnabled = 'commandBlocksEnabled',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the day and night cycles progress.\r\n     *\r\n     */\r\n    DoDayLightCycle = 'doDayLightCycle',\r\n    /**\r\n     * @remarks\r\n     * Controls whether non-mob entities do drops. ie. Item Frame\r\n     *\r\n     */\r\n    DoEntityDrops = 'doEntityDrops',\r\n    /**\r\n     * @remarks\r\n     * Controls whether fire spreads.\r\n     *\r\n     */\r\n    DoFireTick = 'doFireTick',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players immediately respawn or are shown\r\n     * the death screen.\r\n     *\r\n     */\r\n    DoImmediateRespawn = 'doImmediateRespawn',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players deal with the effects of not\r\n     * sleeping (such as Phantom spawning).\r\n     *\r\n     */\r\n    DoInsomnia = 'doInsomnia',\r\n    /**\r\n     * @remarks\r\n     * Determines whether players should be able to craft only\r\n     * those recipes that they've unlocked first - when\r\n     * dolimitedcrafting is set to true.\r\n     *\r\n     */\r\n    DoLimitedCrafting = 'doLimitedCrafting',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mobs drop loot.\r\n     *\r\n     */\r\n    DoMobLoot = 'doMobLoot',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mobs spawn naturally in the world.\r\n     *\r\n     */\r\n    DoMobSpawning = 'doMobSpawning',\r\n    /**\r\n     * @remarks\r\n     * Controls whether blocks drop items when destroyed.\r\n     *\r\n     */\r\n    DoTileDrops = 'doTileDrops',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the weather can change naturally.\r\n     *\r\n     */\r\n    DoWeatherCycle = 'doWeatherCycle',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from drowning.\r\n     *\r\n     */\r\n    DrowningDamage = 'drowningDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from falling.\r\n     *\r\n     */\r\n    FallDamage = 'fallDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from fire.\r\n     *\r\n     */\r\n    FireDamage = 'fireDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether there is damage from freezing.\r\n     *\r\n     */\r\n    FreezeDamage = 'freezeDamage',\r\n    /**\r\n     * @remarks\r\n     * The maximum number of commands that can be executed\r\n     * simultaneously by the /function command.\r\n     *\r\n     */\r\n    FunctionCommandLimit = 'functionCommandLimit',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players keep their inventories when they\r\n     * die.\r\n     *\r\n     */\r\n    KeepInventory = 'keepInventory',\r\n    /**\r\n     * @remarks\r\n     * The maximum number of chained commands that can execute per\r\n     * tick.\r\n     *\r\n     */\r\n    MaxCommandChainLength = 'maxCommandChainLength',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mob griefing can happen in the world.\r\n     * Example: A Creeper explosion destroying blocks.\r\n     *\r\n     */\r\n    MobGriefing = 'mobGriefing',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players can regenerate health.\r\n     *\r\n     */\r\n    NaturalRegeneration = 'naturalRegeneration',\r\n    /**\r\n     * @remarks\r\n     * The percentage of players required to be sleeping in order\r\n     * to advance to the next day.\r\n     *\r\n     */\r\n    PlayersSleepingPercentage = 'playersSleepingPercentage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether projectiles (entities with a projectile\r\n     * component, like Arrows, thrown Tridents or Fireworks) can\r\n     * destroy certain blocks that support this interaction (such\r\n     * as Chorus Fruit, Dripstone or Decorated Pots). Restrictions\r\n     * on which projectiles can destroy certain blocks apply.\r\n     *\r\n     */\r\n    ProjectilesCanBreakBlocks = 'projectilesCanBreakBlocks',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players can damage each other.\r\n     *\r\n     */\r\n    Pvp = 'pvp',\r\n    /**\r\n     * @remarks\r\n     * Controls how frequently random ticks occur. A value of 0 or\r\n     * less will disable random ticks. The default value is 1.\r\n     *\r\n     */\r\n    RandomTickSpeed = 'randomTickSpeed',\r\n    /**\r\n     * @remarks\r\n     * Controls whether built-in (vanilla) recipes automatically\r\n     * unlock as the player progresses through the game (one\r\n     * alternative to this is to use the /recipe command based on\r\n     * custom gameplay logic.)\r\n     *\r\n     */\r\n    RecipesUnlock = 'recipesUnlock',\r\n    /**\r\n     * @remarks\r\n     * Controls whether respawn blocks (e.g. Bed, Respawn Anchor)\r\n     * explode in other dimensions.\r\n     *\r\n     */\r\n    RespawnBlocksExplode = 'respawnBlocksExplode',\r\n    /**\r\n     * @remarks\r\n     * Controls whether command output is displayed to players.\r\n     * Also controls whether Command Block output is stored by\r\n     * default.\r\n     *\r\n     */\r\n    SendCommandFeedback = 'sendCommandFeedback',\r\n    /**\r\n     * @remarks\r\n     * Controls whether Border Block effects are shown.\r\n     *\r\n     */\r\n    ShowBorderEffect = 'showBorderEffect',\r\n    /**\r\n     * @remarks\r\n     * Controls whether player coordinates are displayed.\r\n     *\r\n     */\r\n    ShowCoordinates = 'showCoordinates',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the days a player has played is displayed.\r\n     *\r\n     */\r\n    ShowDaysPlayed = 'showDaysPlayed',\r\n    /**\r\n     * @remarks\r\n     * Controls whether death messages are displayed in chat.\r\n     *\r\n     */\r\n    ShowDeathMessages = 'showDeathMessages',\r\n    /**\r\n     * @remarks\r\n     * Controls whether standard player notifications for recipes\r\n     * will show. When set to false, 'player unlocked recipes' are\r\n     * no longer sent as player notifications.\r\n     *\r\n     */\r\n    ShowRecipeMessages = 'showRecipeMessages',\r\n    /**\r\n     * @remarks\r\n     * Controls whether item tags are shown. E.g. 'Can Place On',\r\n     * 'Can Destroy', item lock icons, etc.\r\n     *\r\n     */\r\n    ShowTags = 'showTags',\r\n    /**\r\n     * @remarks\r\n     * The block radius from world spawn that a player is allowed\r\n     * to spawn in. Does not affect Adventure mode. The default\r\n     * value is 10 blocks.\r\n     *\r\n     */\r\n    SpawnRadius = 'spawnRadius',\r\n    /**\r\n     * @remarks\r\n     * Affects whether TNT blocks can be lit.\r\n     *\r\n     */\r\n    TntExplodes = 'tntExplodes',\r\n    /**\r\n     * @remarks\r\n     * Controls whether blocks randomly drop loot or all blocks\r\n     * drop loot when destroyed by an explosion. Defaults to false.\r\n     *\r\n     */\r\n    TntExplosionDropDecay = 'tntExplosionDropDecay',\r\n}\r",
            "jsdoc": "/**\r\n * Game rules. These values can also be controlled via the\r\n * /gamerule command.\r\n */\r",
            "enumValues": [
              {
                "name": "CommandBlockOutput",
                "value": "commandBlockOutput",
                "description": ""
              },
              {
                "name": "CommandBlocksEnabled",
                "value": "commandBlocksEnabled",
                "description": ""
              },
              {
                "name": "DoDayLightCycle",
                "value": "doDayLightCycle",
                "description": ""
              },
              {
                "name": "DoEntityDrops",
                "value": "doEntityDrops",
                "description": ""
              },
              {
                "name": "DoFireTick",
                "value": "doFireTick",
                "description": ""
              },
              {
                "name": "DoImmediateRespawn",
                "value": "doImmediateRespawn",
                "description": ""
              },
              {
                "name": "DoInsomnia",
                "value": "doInsomnia",
                "description": ""
              },
              {
                "name": "DoLimitedCrafting",
                "value": "doLimitedCrafting",
                "description": ""
              },
              {
                "name": "DoMobLoot",
                "value": "doMobLoot",
                "description": ""
              },
              {
                "name": "DoMobSpawning",
                "value": "doMobSpawning",
                "description": ""
              },
              {
                "name": "DoTileDrops",
                "value": "doTileDrops",
                "description": ""
              },
              {
                "name": "DoWeatherCycle",
                "value": "doWeatherCycle",
                "description": ""
              },
              {
                "name": "DrowningDamage",
                "value": "drowningDamage",
                "description": ""
              },
              {
                "name": "FallDamage",
                "value": "fallDamage",
                "description": ""
              },
              {
                "name": "FireDamage",
                "value": "fireDamage",
                "description": ""
              },
              {
                "name": "FreezeDamage",
                "value": "freezeDamage",
                "description": ""
              },
              {
                "name": "FunctionCommandLimit",
                "value": "functionCommandLimit",
                "description": ""
              },
              {
                "name": "KeepInventory",
                "value": "keepInventory",
                "description": ""
              },
              {
                "name": "MaxCommandChainLength",
                "value": "maxCommandChainLength",
                "description": ""
              },
              {
                "name": "MobGriefing",
                "value": "mobGriefing",
                "description": ""
              },
              {
                "name": "NaturalRegeneration",
                "value": "naturalRegeneration",
                "description": ""
              },
              {
                "name": "PlayersSleepingPercentage",
                "value": "playersSleepingPercentage",
                "description": ""
              },
              {
                "name": "ProjectilesCanBreakBlocks",
                "value": "projectilesCanBreakBlocks",
                "description": ""
              },
              {
                "name": "Pvp",
                "value": "pvp",
                "description": ""
              },
              {
                "name": "RandomTickSpeed",
                "value": "randomTickSpeed",
                "description": ""
              },
              {
                "name": "RecipesUnlock",
                "value": "recipesUnlock",
                "description": ""
              },
              {
                "name": "RespawnBlocksExplode",
                "value": "respawnBlocksExplode",
                "description": ""
              },
              {
                "name": "SendCommandFeedback",
                "value": "sendCommandFeedback",
                "description": ""
              },
              {
                "name": "ShowBorderEffect",
                "value": "showBorderEffect",
                "description": ""
              },
              {
                "name": "ShowCoordinates",
                "value": "showCoordinates",
                "description": ""
              },
              {
                "name": "ShowDaysPlayed",
                "value": "showDaysPlayed",
                "description": ""
              },
              {
                "name": "ShowDeathMessages",
                "value": "showDeathMessages",
                "description": ""
              },
              {
                "name": "ShowRecipeMessages",
                "value": "showRecipeMessages",
                "description": ""
              },
              {
                "name": "ShowTags",
                "value": "showTags",
                "description": ""
              },
              {
                "name": "SpawnRadius",
                "value": "spawnRadius",
                "description": ""
              },
              {
                "name": "TntExplodes",
                "value": "tntExplodes",
                "description": ""
              },
              {
                "name": "TntExplosionDropDecay",
                "value": "tntExplosionDropDecay",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "gamerule",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.GraphicsMode",
            "name": "GraphicsMode",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Player.graphicsMode}\r /",
            "definition": "export enum GraphicsMode {\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Deferred Technical\r\n     * Preview graphics mode setting.\r\n     *\r\n     */\r\n    Deferred = 'Deferred',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Fancy graphics mode\r\n     * setting. Most special graphics effects are turned on in this\r\n     * setting.\r\n     *\r\n     */\r\n    Fancy = 'Fancy',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Ray Traced graphics mode\r\n     * setting. This setting enables ray tracing.\r\n     *\r\n     */\r\n    RayTraced = 'RayTraced',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Simple graphics mode\r\n     * setting. Most graphics effects are turned off in this\r\n     * setting.\r\n     *\r\n     */\r\n    Simple = 'Simple',\r\n}\r",
            "jsdoc": "/**\r\n * Describes the graphics mode of a client. Used by {@link\r\n * Player.graphicsMode}\r\n */\r",
            "enumValues": [
              {
                "name": "Deferred",
                "value": "Deferred",
                "description": ""
              },
              {
                "name": "Fancy",
                "value": "Fancy",
                "description": ""
              },
              {
                "name": "RayTraced",
                "value": "RayTraced",
                "description": ""
              },
              {
                "name": "Simple",
                "value": "Simple",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "graphicsmode",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.HudElement",
            "name": "HudElement",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "A graphics mode that refers to the Simple graphics mode\r setting. Most graphics effects are turned off in this\r setting.",
            "definition": "export enum HudElement {\n    PaperDoll = 0,\r\n    Armor = 1,\r\n    ToolTips = 2,\r\n    TouchControls = 3,\r\n    Crosshair = 4,\r\n    Hotbar = 5,\r\n    Health = 6,\r\n    ProgressBar = 7,\r\n    Hunger = 8,\r\n    AirBubbles = 9,\r\n    HorseHealth = 10,\r\n    StatusEffects = 11,\r\n    ItemText = 12,\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Simple graphics mode\r\n     * setting. Most graphics effects are turned off in this\r\n     * setting.\r\n     *\r\n     */\r",
            "enumValues": [
              {
                "name": "PaperDoll",
                "value": 0
              },
              {
                "name": "Armor",
                "value": 1
              },
              {
                "name": "ToolTips",
                "value": 2
              },
              {
                "name": "TouchControls",
                "value": 3
              },
              {
                "name": "Crosshair",
                "value": 4
              },
              {
                "name": "Hotbar",
                "value": 5
              },
              {
                "name": "Health",
                "value": 6
              },
              {
                "name": "ProgressBar",
                "value": 7
              },
              {
                "name": "Hunger",
                "value": 8
              },
              {
                "name": "AirBubbles",
                "value": 9
              },
              {
                "name": "HorseHealth",
                "value": 10
              },
              {
                "name": "StatusEffects",
                "value": 11
              },
              {
                "name": "ItemText",
                "value": 12
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "hudelement",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.HudVisibility",
            "name": "HudVisibility",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Enumeration that specifies how to treat the visibility of a\r HUD element.\r /",
            "definition": "export enum HudVisibility {\n    /**\r\n     * @remarks\r\n     * Specifies that this HUD element should be hidden.\r\n     *\r\n     */\r\n    Hide = 0,\r\n    /**\r\n     * @remarks\r\n     * Specifies that this HUD element should be reset to its\r\n     * default state (while most HUD elements are visible, some HUD\r\n     * elements can be hidden by the player via settings.)\r\n     *\r\n     */\r\n    Reset = 1,\r\n}\r",
            "jsdoc": "/**\r\n * Enumeration that specifies how to treat the visibility of a\r\n * HUD element.\r\n */\r",
            "enumValues": [
              {
                "name": "Hide",
                "value": 0,
                "description": ""
              },
              {
                "name": "Reset",
                "value": 1,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "hudvisibility",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InputButton",
            "name": "InputButton",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "All the different input buttons that are supported. Use with\r /",
            "definition": "export enum InputButton {\n    /**\r\n     * @remarks\r\n     * This is mapped to the 'Jump' button on controllers,\r\n     * keyboards, and touch interfaces.\r\n     *\r\n     */\r\n    Jump = 'Jump',\r\n    /**\r\n     * @remarks\r\n     * This is mapped to the 'Sneak' button on controllers,\r\n     * keyboards, and touch interfaces. By default, this is shift\r\n     * on a keyboard or B on an Xbox controller. On touch\r\n     * interfaces this will only be pressed for 1 tick or less and\r\n     * then it will be released immediately even if the player\r\n     * holds their finger down. Dismounting a horse or exiting a\r\n     * boat will not send a Sneak button change event.\r\n     *\r\n     */\r\n    Sneak = 'Sneak',\r\n}\r",
            "jsdoc": "/**\r\n * All the different input buttons that are supported. Use with\r\n * {@link InputInfo.getButtonState} via {@link\r\n * Player.inputInfo} or {@link PlayerButtonInputAfterEvent} via\r\n * {@link WorldAfterEvents.playerButtonInput}\r\n */\r",
            "enumValues": [
              {
                "name": "Jump",
                "value": "Jump",
                "description": ""
              },
              {
                "name": "Sneak",
                "value": "Sneak",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "inputbutton",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InputMode",
            "name": "InputMode",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Describes the type of input of a device.\r /",
            "definition": "export enum InputMode {\n    /**\r\n     * @remarks\r\n     * Gamepad input.\r\n     *\r\n     */\r\n    Gamepad = 'Gamepad',\r\n    /**\r\n     * @remarks\r\n     * Keyboard and mouse input.\r\n     *\r\n     */\r\n    KeyboardAndMouse = 'KeyboardAndMouse',\r\n    /**\r\n     * @remarks\r\n     * Motion controller input.\r\n     *\r\n     */\r\n    MotionController = 'MotionController',\r\n    /**\r\n     * @remarks\r\n     * Touch input.\r\n     *\r\n     */\r\n    Touch = 'Touch',\r\n}\r",
            "jsdoc": "/**\r\n * Describes the type of input of a device.\r\n */\r",
            "enumValues": [
              {
                "name": "Gamepad",
                "value": "Gamepad",
                "description": ""
              },
              {
                "name": "KeyboardAndMouse",
                "value": "KeyboardAndMouse",
                "description": ""
              },
              {
                "name": "MotionController",
                "value": "MotionController",
                "description": ""
              },
              {
                "name": "Touch",
                "value": "Touch",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "inputmode",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InputPermissionCategory",
            "name": "InputPermissionCategory",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "PlayerInputPermissionCategoryChangeAfterEvent} to specify\r PlayerInputPermissions} to get or set permissions.\r /",
            "definition": "export enum InputPermissionCategory {\n    /**\r\n     * @remarks\r\n     * Player input relating to camera movement.\r\n     *\r\n     */\r\n    Camera = 1,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to all player movement. Disabling this\r\n     * is equivalent to disabling jump, sneak, lateral movement,\r\n     * mount, and dismount.\r\n     *\r\n     */\r\n    Movement = 2,\r\n    /**\r\n     * @remarks\r\n     * Player input for moving laterally in the world. This would\r\n     * be WASD on a keyboard or the movement joystick on gamepad or\r\n     * touch.\r\n     *\r\n     */\r\n    LateralMovement = 4,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to sneak. This also affects flying\r\n     * down.\r\n     *\r\n     */\r\n    Sneak = 5,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to jumping. This also affects flying\r\n     * up.\r\n     *\r\n     */\r\n    Jump = 6,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to mounting vehicles.\r\n     *\r\n     */\r\n    Mount = 7,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to dismounting. When disabled, the\r\n     * player can still dismount vehicles by other means, for\r\n     * example on horses players can still jump off and in boats\r\n     * players can go into another boat.\r\n     *\r\n     */\r\n    Dismount = 8,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player forward.\r\n     *\r\n     */\r\n    MoveForward = 9,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player backward.\r\n     *\r\n     */\r\n    MoveBackward = 10,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player left.\r\n     *\r\n     */\r\n    MoveLeft = 11,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player right.\r\n     *\r\n     */\r\n    MoveRight = 12,\r\n}\r",
            "jsdoc": "/**\r\n * Input permission categories. Used by {@link\r\n * PlayerInputPermissionCategoryChangeAfterEvent} to specify\r\n * which category was changed and {@link\r\n * PlayerInputPermissions} to get or set permissions.\r\n */\r",
            "enumValues": [
              {
                "name": "Camera",
                "value": 1,
                "description": ""
              },
              {
                "name": "Movement",
                "value": 2,
                "description": ""
              },
              {
                "name": "LateralMovement",
                "value": 4,
                "description": ""
              },
              {
                "name": "Sneak",
                "value": 5,
                "description": ""
              },
              {
                "name": "Jump",
                "value": 6,
                "description": ""
              },
              {
                "name": "Mount",
                "value": 7,
                "description": ""
              },
              {
                "name": "Dismount",
                "value": 8,
                "description": ""
              },
              {
                "name": "MoveForward",
                "value": 9,
                "description": ""
              },
              {
                "name": "MoveBackward",
                "value": 10,
                "description": ""
              },
              {
                "name": "MoveLeft",
                "value": 11,
                "description": ""
              },
              {
                "name": "MoveRight",
                "value": 12,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "inputpermissioncategory",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentTypes",
            "name": "ItemComponentTypes",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The types of item components that are accessible via\r function ItemStack.getComponent.\r /",
            "definition": "export enum ItemComponentTypes {\n    Compostable = 'minecraft:compostable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:cooldown component.\r\n     *\r\n     */\r\n    Cooldown = 'minecraft:cooldown',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:durability component.\r\n     *\r\n     */\r\n    Durability = 'minecraft:durability',\r\n    Dyeable = 'minecraft:dyeable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:enchantable component.\r\n     *\r\n     */\r\n    Enchantable = 'minecraft:enchantable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:food component.\r\n     *\r\n     */\r\n    Food = 'minecraft:food',\r\n}\r",
            "jsdoc": "/**\r\n * The types of item components that are accessible via\r\n * function ItemStack.getComponent.\r\n */\r",
            "enumValues": [
              {
                "name": "Compostable",
                "value": "minecraft:compostable"
              },
              {
                "name": "Cooldown",
                "value": "minecraft:cooldown",
                "description": ""
              },
              {
                "name": "Durability",
                "value": "minecraft:durability",
                "description": ""
              },
              {
                "name": "Dyeable",
                "value": "minecraft:dyeable"
              },
              {
                "name": "Enchantable",
                "value": "minecraft:enchantable",
                "description": ""
              },
              {
                "name": "Food",
                "value": "minecraft:food",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponenttypes",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemLockMode",
            "name": "ItemLockMode",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Describes how an an item can be moved within a container.\r /",
            "definition": "export enum ItemLockMode {\n    /**\r\n     * @remarks\r\n     * The item cannot be dropped or crafted with.\r\n     *\r\n     */\r\n    inventory = 'inventory',\r\n    /**\r\n     * @remarks\r\n     * The item has no container restrictions.\r\n     *\r\n     */\r\n    none = 'none',\r\n    /**\r\n     * @remarks\r\n     * The item cannot be moved from its slot, dropped or crafted\r\n     * with.\r\n     *\r\n     */\r\n    slot = 'slot',\r\n}\r",
            "jsdoc": "/**\r\n * Describes how an an item can be moved within a container.\r\n */\r",
            "enumValues": [
              {
                "name": "inventory",
                "value": "inventory",
                "description": ""
              },
              {
                "name": "none",
                "value": "none",
                "description": ""
              },
              {
                "name": "slot",
                "value": "slot",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemlockmode",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.LiquidType",
            "name": "LiquidType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Represents the type of liquid that can be placed on a block\r or flow dynamically in the world.\r /",
            "definition": "export enum LiquidType {\n    /**\r\n     * @remarks\r\n     * Represents water as a type of liquid.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
            "jsdoc": "/**\r\n * Represents the type of liquid that can be placed on a block\r\n * or flow dynamically in the world.\r\n */\r",
            "enumValues": [
              {
                "name": "Water",
                "value": "Water",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "liquidtype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.MemoryTier",
            "name": "MemoryTier",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Describes the memory of a device.\r /",
            "definition": "export enum MemoryTier {\n    /**\r\n     * @remarks\r\n     * Max memory for Super Low Tier is 1.5GBs.\r\n     *\r\n     */\r\n    SuperLow = 0,\r\n    /**\r\n     * @remarks\r\n     *  Max memory for Low Tier is 2GBs.\r\n     *\r\n     */\r\n    Low = 1,\r\n    /**\r\n     * @remarks\r\n     * Max memory for Mid Tier is 4GBs.\r\n     *\r\n     */\r\n    Mid = 2,\r\n    /**\r\n     * @remarks\r\n     * Max memory for High Tier is 8GBs.\r\n     *\r\n     */\r\n    High = 3,\r\n    /**\r\n     * @remarks\r\n     * Memory for Super High Tier is above 8GBs.\r\n     *\r\n     */\r\n    SuperHigh = 4,\r\n}\r",
            "jsdoc": "/**\r\n * Describes the memory of a device.\r\n */\r",
            "enumValues": [
              {
                "name": "SuperLow",
                "value": 0,
                "description": ""
              },
              {
                "name": "Low",
                "value": 1,
                "description": ""
              },
              {
                "name": "Mid",
                "value": 2,
                "description": ""
              },
              {
                "name": "High",
                "value": 3,
                "description": ""
              },
              {
                "name": "SuperHigh",
                "value": 4,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "memorytier",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.MoonPhase",
            "name": "MoonPhase",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Enum containing the different phases of the moon based on\r the current day.,Obtain the current MoonPhase using\r world.getMoonPhase.\r  The fullness of the moon controls various mob behaviors such\r as the number of slimes that spawn in Swamp biomes, the\r chance skeletons and zombies have to spawn with armor, as\r well as the chance for spiders to spawn with certain status\r effects.\r /",
            "definition": "export enum MoonPhase {\n    /**\r\n     * @remarks\r\n     * The brightest moon phase. During this phase, cats have a 50%\r\n     * chance of spawning as black cats.\r\n     *\r\n     */\r\n    FullMoon = 0,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Full Moon.\r\n     *\r\n     */\r\n    WaningGibbous = 1,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Waxing Crescent.\r\n     *\r\n     */\r\n    FirstQuarter = 2,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Last Quarter.\r\n     *\r\n     */\r\n    WaningCrescent = 3,\r\n    /**\r\n     * @remarks\r\n     * The darkest moon phase.\r\n     *\r\n     */\r\n    NewMoon = 4,\r\n    /**\r\n     * @remarks\r\n     * The phase following the New Moon.\r\n     *\r\n     */\r\n    WaxingCrescent = 5,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Waning Gibbous.\r\n     *\r\n     */\r\n    LastQuarter = 6,\r\n    /**\r\n     * @remarks\r\n     * The phase following the First Quarter.\r\n     *\r\n     */\r\n    WaxingGibbous = 7,\r\n}\r",
            "jsdoc": "/**\r\n * Enum containing the different phases of the moon based on\r\n * the current day.,Obtain the current MoonPhase using\r\n * world.getMoonPhase.\r\n *\r\n * The fullness of the moon controls various mob behaviors such\r\n * as the number of slimes that spawn in Swamp biomes, the\r\n * chance skeletons and zombies have to spawn with armor, as\r\n * well as the chance for spiders to spawn with certain status\r\n * effects.\r\n */\r",
            "enumValues": [
              {
                "name": "FullMoon",
                "value": 0,
                "description": ""
              },
              {
                "name": "WaningGibbous",
                "value": 1,
                "description": ""
              },
              {
                "name": "FirstQuarter",
                "value": 2,
                "description": ""
              },
              {
                "name": "WaningCrescent",
                "value": 3,
                "description": ""
              },
              {
                "name": "NewMoon",
                "value": 4,
                "description": ""
              },
              {
                "name": "WaxingCrescent",
                "value": 5,
                "description": ""
              },
              {
                "name": "LastQuarter",
                "value": 6,
                "description": ""
              },
              {
                "name": "WaxingGibbous",
                "value": 7,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "moonphase",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.MovementType",
            "name": "MovementType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The phase following the First Quarter.",
            "definition": "export enum MovementType {\n    Immovable = 'Immovable',\r\n    Popped = 'Popped',\r\n    Push = 'Push',\r\n    PushPull = 'PushPull',\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * The phase following the First Quarter.\r\n     *\r\n     */\r",
            "enumValues": [
              {
                "name": "Immovable",
                "value": "Immovable"
              },
              {
                "name": "Popped",
                "value": "Popped"
              },
              {
                "name": "Push",
                "value": "Push"
              },
              {
                "name": "PushPull",
                "value": "PushPull"
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "movementtype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.NamespaceNameErrorReason",
            "name": "NamespaceNameErrorReason",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "An enumeration describing the reason for the namespace name\r error being thrown\r /",
            "definition": "export enum NamespaceNameErrorReason {\n    /**\r\n     * @remarks\r\n     * A restricted namespace was used as the namespace\r\n     *\r\n     */\r\n    DisallowedNamespace = 'DisallowedNamespace',\r\n    /**\r\n     * @remarks\r\n     * The name was missing a namespace when one is required\r\n     *\r\n     */\r\n    NoNamespace = 'NoNamespace',\r\n}\r",
            "jsdoc": "/**\r\n * An enumeration describing the reason for the namespace name\r\n * error being thrown\r\n */\r",
            "enumValues": [
              {
                "name": "DisallowedNamespace",
                "value": "DisallowedNamespace",
                "description": ""
              },
              {
                "name": "NoNamespace",
                "value": "NoNamespace",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "namespacenameerrorreason",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ObjectiveSortOrder",
            "name": "ObjectiveSortOrder",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Used for specifying a sort order for how to display an\r objective and its list of participants.\r /",
            "definition": "export enum ObjectiveSortOrder {\n    /**\r\n     * @remarks\r\n     * Objective participant list is displayed in ascending (e.g.,\r\n     * A-Z) order.\r\n     *\r\n     */\r\n    Ascending = 0,\r\n    /**\r\n     * @remarks\r\n     * Objective participant list is displayed in descending (e.g.,\r\n     * Z-A) order.\r\n     *\r\n     */\r\n    Descending = 1,\r\n}\r",
            "jsdoc": "/**\r\n * Used for specifying a sort order for how to display an\r\n * objective and its list of participants.\r\n */\r",
            "enumValues": [
              {
                "name": "Ascending",
                "value": 0,
                "description": ""
              },
              {
                "name": "Descending",
                "value": 1,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "objectivesortorder",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PaletteColor",
            "name": "PaletteColor",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Enum containing colors to be used with EntityColorComponent\r and EntityColor2Component\r /",
            "definition": "export enum PaletteColor {\n    /**\r\n     * @remarks\r\n     * Hex color #f0f0f0\r\n     *\r\n     */\r\n    White = 0,\r\n    /**\r\n     * @remarks\r\n     * Hex color #F9801D\r\n     *\r\n     */\r\n    Orange = 1,\r\n    /**\r\n     * @remarks\r\n     * Hex color #C74EBD\r\n     *\r\n     */\r\n    Magenta = 2,\r\n    /**\r\n     * @remarks\r\n     * Hex color #3AB3DA\r\n     *\r\n     */\r\n    LightBlue = 3,\r\n    /**\r\n     * @remarks\r\n     * Hex color #FED83D\r\n     *\r\n     */\r\n    Yellow = 4,\r\n    /**\r\n     * @remarks\r\n     * Hex color #80C71F\r\n     *\r\n     */\r\n    Lime = 5,\r\n    /**\r\n     * @remarks\r\n     * Hex color #F38BAA\r\n     *\r\n     */\r\n    Pink = 6,\r\n    /**\r\n     * @remarks\r\n     * Hex color #474F52\r\n     *\r\n     */\r\n    Gray = 7,\r\n    /**\r\n     * @remarks\r\n     * Hex color #9D9D97\r\n     *\r\n     */\r\n    Silver = 8,\r\n    /**\r\n     * @remarks\r\n     * Hex color #169C9C\r\n     *\r\n     */\r\n    Cyan = 9,\r\n    /**\r\n     * @remarks\r\n     * Hex color #8932B8\r\n     *\r\n     */\r\n    Purple = 10,\r\n    /**\r\n     * @remarks\r\n     * Hex color #3C44AA\r\n     *\r\n     */\r\n    Blue = 11,\r\n    /**\r\n     * @remarks\r\n     * Hex color #835432\r\n     *\r\n     */\r\n    Brown = 12,\r\n    /**\r\n     * @remarks\r\n     * Hex color #5E7C16\r\n     *\r\n     */\r\n    Green = 13,\r\n    /**\r\n     * @remarks\r\n     * Hex color #B02E26\r\n     *\r\n     */\r\n    Red = 14,\r\n    /**\r\n     * @remarks\r\n     * Hex color #1D1D21\r\n     *\r\n     */\r\n    Black = 15,\r\n}\r",
            "jsdoc": "/**\r\n * Enum containing colors to be used with EntityColorComponent\r\n * and EntityColor2Component\r\n */\r",
            "enumValues": [
              {
                "name": "White",
                "value": 0,
                "description": ""
              },
              {
                "name": "Orange",
                "value": 1,
                "description": ""
              },
              {
                "name": "Magenta",
                "value": 2,
                "description": ""
              },
              {
                "name": "LightBlue",
                "value": 3,
                "description": ""
              },
              {
                "name": "Yellow",
                "value": 4,
                "description": ""
              },
              {
                "name": "Lime",
                "value": 5,
                "description": ""
              },
              {
                "name": "Pink",
                "value": 6,
                "description": ""
              },
              {
                "name": "Gray",
                "value": 7,
                "description": ""
              },
              {
                "name": "Silver",
                "value": 8,
                "description": ""
              },
              {
                "name": "Cyan",
                "value": 9,
                "description": ""
              },
              {
                "name": "Purple",
                "value": 10,
                "description": ""
              },
              {
                "name": "Blue",
                "value": 11,
                "description": ""
              },
              {
                "name": "Brown",
                "value": 12,
                "description": ""
              },
              {
                "name": "Green",
                "value": 13,
                "description": ""
              },
              {
                "name": "Red",
                "value": 14,
                "description": ""
              },
              {
                "name": "Black",
                "value": 15,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "palettecolor",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlatformType",
            "name": "PlatformType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Describes what kind of platform is a device.\r /",
            "definition": "export enum PlatformType {\n    /**\r\n     * @remarks\r\n     * Specialized gaming device.\r\n     *\r\n     */\r\n    Console = 'Console',\r\n    /**\r\n     * @remarks\r\n     * Personal Computer (PC).\r\n     *\r\n     */\r\n    Desktop = 'Desktop',\r\n    /**\r\n     * @remarks\r\n     *  Handheld device such smartphone or tablet.\r\n     *\r\n     */\r\n    Mobile = 'Mobile',\r\n}\r",
            "jsdoc": "/**\r\n * Describes what kind of platform is a device.\r\n */\r",
            "enumValues": [
              {
                "name": "Console",
                "value": "Console",
                "description": ""
              },
              {
                "name": "Desktop",
                "value": "Desktop",
                "description": ""
              },
              {
                "name": "Mobile",
                "value": "Mobile",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "platformtype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInventoryType",
            "name": "PlayerInventoryType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Specifies the player inventory type.\r /",
            "definition": "export enum PlayerInventoryType {\n    /**\r\n     * @remarks\r\n     * Hotbar inventory.\r\n     *\r\n     */\r\n    Hotbar = 'Hotbar',\r\n    /**\r\n     * @remarks\r\n     * Main inventory.\r\n     *\r\n     */\r\n    Inventory = 'Inventory',\r\n}\r",
            "jsdoc": "/**\r\n * Specifies the player inventory type.\r\n */\r",
            "enumValues": [
              {
                "name": "Hotbar",
                "value": "Hotbar",
                "description": ""
              },
              {
                "name": "Inventory",
                "value": "Inventory",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinventorytype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerPermissionLevel",
            "name": "PlayerPermissionLevel",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The player permission level.\r /",
            "definition": "export enum PlayerPermissionLevel {\n    /**\r\n     * @remarks\r\n     * Visitors can only observe the world, not interact with it.\r\n     *\r\n     */\r\n    Visitor = 0,\r\n    /**\r\n     * @remarks\r\n     * Members can build and mine, attack players and mobs, and\r\n     * interact with items and entities.\r\n     *\r\n     */\r\n    Member = 1,\r\n    /**\r\n     * @remarks\r\n     * Operators can teleport and use commands, in addition to\r\n     * everything Members can do.\r\n     *\r\n     */\r\n    Operator = 2,\r\n    Custom = 3,\r\n}\r",
            "jsdoc": "/**\r\n * The player permission level.\r\n */\r",
            "enumValues": [
              {
                "name": "Visitor",
                "value": 0,
                "description": ""
              },
              {
                "name": "Member",
                "value": 1,
                "description": ""
              },
              {
                "name": "Operator",
                "value": 2,
                "description": ""
              },
              {
                "name": "Custom",
                "value": 3
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerpermissionlevel",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScoreboardIdentityType",
            "name": "ScoreboardIdentityType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Contains objectives and participants for the scoreboard.\r /",
            "definition": "export enum ScoreboardIdentityType {\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to an entity.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to a pseudo player\r\n     * entity - typically this is used to store scores as data or\r\n     * as abstract progress.\r\n     *\r\n     */\r\n    FakePlayer = 'FakePlayer',\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to a player.\r\n     *\r\n     */\r\n    Player = 'Player',\r\n}\r",
            "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n */\r",
            "enumValues": [
              {
                "name": "Entity",
                "value": "Entity",
                "description": ""
              },
              {
                "name": "FakePlayer",
                "value": "FakePlayer",
                "description": ""
              },
              {
                "name": "Player",
                "value": "Player",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scoreboardidentitytype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScriptEventSource",
            "name": "ScriptEventSource",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Describes where the script event originated from.\r /",
            "definition": "export enum ScriptEventSource {\n    /**\r\n     * @remarks\r\n     * The script event originated from a Block such as a Command\r\n     * Block.\r\n     *\r\n     */\r\n    Block = 'Block',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from an Entity such as a Player,\r\n     * Command Block Minecart or Animation Controller.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from an NPC dialogue.\r\n     *\r\n     */\r\n    NPCDialogue = 'NPCDialogue',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from the server, such as from a\r\n     * runCommand API call or a dedicated server console.\r\n     *\r\n     */\r\n    Server = 'Server',\r\n}\r",
            "jsdoc": "/**\r\n * Describes where the script event originated from.\r\n */\r",
            "enumValues": [
              {
                "name": "Block",
                "value": "Block",
                "description": ""
              },
              {
                "name": "Entity",
                "value": "Entity",
                "description": ""
              },
              {
                "name": "NPCDialogue",
                "value": "NPCDialogue",
                "description": ""
              },
              {
                "name": "Server",
                "value": "Server",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scripteventsource",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.SignSide",
            "name": "SignSide",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Represents a side of a sign.\r /",
            "definition": "export enum SignSide {\n    /**\r\n     * @remarks\r\n     * The back of the sign.\r\n     *\r\n     */\r\n    Back = 'Back',\r\n    /**\r\n     * @remarks\r\n     * The front of the sign.\r\n     *\r\n     */\r\n    Front = 'Front',\r\n}\r",
            "jsdoc": "/**\r\n * Represents a side of a sign.\r\n */\r",
            "enumValues": [
              {
                "name": "Back",
                "value": "Back",
                "description": ""
              },
              {
                "name": "Front",
                "value": "Front",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "signside",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StickyType",
            "name": "StickyType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "The front of the sign.",
            "definition": "export enum StickyType {\n    None = 'None',\r\n    Same = 'Same',\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * The front of the sign.\r\n     *\r\n     */\r",
            "enumValues": [
              {
                "name": "None",
                "value": "None"
              },
              {
                "name": "Same",
                "value": "Same"
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "stickytype",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StructureAnimationMode",
            "name": "StructureAnimationMode",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Specifies how structure blocks should be animated when a\r structure is placed.\r /",
            "definition": "export enum StructureAnimationMode {\n    /**\r\n     * @remarks\r\n     * Blocks will be randomly placed one at at time. Use\r\n     * @minecraft/server.StructurePlaceOptions.animationSeconds to\r\n     * control how long it takes for all blocks to be placed.\r\n     *\r\n     */\r\n    Blocks = 'Blocks',\r\n    /**\r\n     * @remarks\r\n     * Blocks will be placed one layer at a time from bottom to\r\n     * top. Use\r\n     * @minecraft/server.StructurePlaceOptions.animationSeconds to\r\n     * control how long it takes for all blocks to be placed.\r\n     *\r\n     */\r\n    Layers = 'Layers',\r\n    /**\r\n     * @remarks\r\n     * All blocks will be placed immediately.\r\n     *\r\n     */\r\n    None = 'None',\r\n}\r",
            "jsdoc": "/**\r\n * Specifies how structure blocks should be animated when a\r\n * structure is placed.\r\n */\r",
            "enumValues": [
              {
                "name": "Blocks",
                "value": "Blocks",
                "description": ""
              },
              {
                "name": "Layers",
                "value": "Layers",
                "description": ""
              },
              {
                "name": "None",
                "value": "None",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "structureanimationmode",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StructureMirrorAxis",
            "name": "StructureMirrorAxis",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Specifies how a structure should be mirrored when placed.\r /",
            "definition": "export enum StructureMirrorAxis {\n    /**\r\n     * @remarks\r\n     * No mirroring.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across the X axis.\r\n     *\r\n     */\r\n    X = 'X',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across both the X and Z axes.\r\n     *\r\n     */\r\n    XZ = 'XZ',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across the Z axis.\r\n     *\r\n     */\r\n    Z = 'Z',\r\n}\r",
            "jsdoc": "/**\r\n * Specifies how a structure should be mirrored when placed.\r\n */\r",
            "enumValues": [
              {
                "name": "None",
                "value": "None",
                "description": ""
              },
              {
                "name": "X",
                "value": "X",
                "description": ""
              },
              {
                "name": "XZ",
                "value": "XZ",
                "description": ""
              },
              {
                "name": "Z",
                "value": "Z",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "structuremirroraxis",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StructureRotation",
            "name": "StructureRotation",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Enum describing a structure's placement rotation.\r /",
            "definition": "export enum StructureRotation {\n    /**\r\n     * @remarks\r\n     * No rotation.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * 180 degree rotation.\r\n     *\r\n     */\r\n    Rotate180 = 'Rotate180',\r\n    /**\r\n     * @remarks\r\n     * 270 degree rotation.\r\n     *\r\n     */\r\n    Rotate270 = 'Rotate270',\r\n    /**\r\n     * @remarks\r\n     * 90 degree rotation.\r\n     *\r\n     */\r\n    Rotate90 = 'Rotate90',\r\n}\r",
            "jsdoc": "/**\r\n * Enum describing a structure's placement rotation.\r\n */\r",
            "enumValues": [
              {
                "name": "None",
                "value": "None",
                "description": ""
              },
              {
                "name": "Rotate180",
                "value": "Rotate180",
                "description": ""
              },
              {
                "name": "Rotate270",
                "value": "Rotate270",
                "description": ""
              },
              {
                "name": "Rotate90",
                "value": "Rotate90",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "structurerotation",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StructureSaveMode",
            "name": "StructureSaveMode",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Specifies how a structure should be saved.\r /",
            "definition": "export enum StructureSaveMode {\n    /**\r\n     * @remarks\r\n     * The structure will be temporarily saved to memory. The\r\n     * structure will persist until the world is shut down.\r\n     *\r\n     */\r\n    Memory = 'Memory',\r\n    /**\r\n     * @remarks\r\n     * The structure will be saved to the world file and persist\r\n     * between world loads. A saved structure can be removed from\r\n     * the world via @minecraft/server.StructureManager.delete.\r\n     *\r\n     */\r\n    World = 'World',\r\n}\r",
            "jsdoc": "/**\r\n * Specifies how a structure should be saved.\r\n */\r",
            "enumValues": [
              {
                "name": "Memory",
                "value": "Memory",
                "description": ""
              },
              {
                "name": "World",
                "value": "World",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "structuresavemode",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.TimeOfDay",
            "name": "TimeOfDay",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Provides numeric values for common periods in the Minecraft\r day.\r /",
            "definition": "export enum TimeOfDay {\n    /**\r\n     * @remarks\r\n     * Sets the time to the start of the day, which is time of the\r\n     * day 1,000 (or the equivalent of 7am) in Minecraft.\r\n     *\r\n     */\r\n    Day = 1000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to noon, which is time of the day 6,000 in\r\n     * Minecraft.\r\n     *\r\n     */\r\n    Noon = 6000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to sunset, which is time of the day 12,000 (or\r\n     * the equivalent of 6pm) in Minecraft.\r\n     *\r\n     */\r\n    Sunset = 12000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to night, which is time of the day 13,000 (or\r\n     * the equivalent of 7:00pm) in Minecraft.\r\n     *\r\n     */\r\n    Night = 13000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to midnight, which is time of the day 18,000\r\n     * (or the equivalent of 12:00am) in Minecraft.\r\n     *\r\n     */\r\n    Midnight = 18000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to sunrise, which is time of the day 23,000\r\n     * (or the equivalent of 5am) in Minecraft.\r\n     *\r\n     */\r\n    Sunrise = 23000,\r\n}\r",
            "jsdoc": "/**\r\n * Provides numeric values for common periods in the Minecraft\r\n * day.\r\n */\r",
            "enumValues": [
              {
                "name": "Day",
                "value": 1000,
                "description": ""
              },
              {
                "name": "Noon",
                "value": 6000,
                "description": ""
              },
              {
                "name": "Sunset",
                "value": 12000,
                "description": ""
              },
              {
                "name": "Night",
                "value": 13000,
                "description": ""
              },
              {
                "name": "Midnight",
                "value": 18000,
                "description": ""
              },
              {
                "name": "Sunrise",
                "value": 23000,
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "timeofday",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.TintMethod",
            "name": "TintMethod",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Tint logic applied to a block or part of a block. The color\r may vary when a world position is part of the context, as\r biomes often have an influence on the resulting tint.\r /",
            "definition": "export enum TintMethod {\n    /**\r\n     * @remarks\r\n     * Specifies a birch foliage tint method.\r\n     *\r\n     */\r\n    BirchFoliage = 'BirchFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a default foliage tint method.\r\n     *\r\n     */\r\n    DefaultFoliage = 'DefaultFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a dry foliage tint method.\r\n     *\r\n     */\r\n    DryFoliage = 'DryFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies an evergreen foliage tint method.\r\n     *\r\n     */\r\n    EvergreenFoliage = 'EvergreenFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a grass tint method.\r\n     *\r\n     */\r\n    Grass = 'Grass',\r\n    /**\r\n     * @remarks\r\n     * Specifies no tint method, resulting in a white tint.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * Specifies a water tint method.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
            "jsdoc": "/**\r\n * Tint logic applied to a block or part of a block. The color\r\n * may vary when a world position is part of the context, as\r\n * biomes often have an influence on the resulting tint.\r\n */\r",
            "enumValues": [
              {
                "name": "BirchFoliage",
                "value": "BirchFoliage",
                "description": ""
              },
              {
                "name": "DefaultFoliage",
                "value": "DefaultFoliage",
                "description": ""
              },
              {
                "name": "DryFoliage",
                "value": "DryFoliage",
                "description": ""
              },
              {
                "name": "EvergreenFoliage",
                "value": "EvergreenFoliage",
                "description": ""
              },
              {
                "name": "Grass",
                "value": "Grass",
                "description": ""
              },
              {
                "name": "None",
                "value": "None",
                "description": ""
              },
              {
                "name": "Water",
                "value": "Water",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "tintmethod",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WeatherType",
            "name": "WeatherType",
            "type": "enum",
            "module": "@minecraft/server",
            "description": "Used to specify the type of weather condition within the\r world.\r /",
            "definition": "export enum WeatherType {\n    /**\r\n     * @remarks\r\n     * Specifies a clear weather condition.\r\n     *\r\n     */\r\n    Clear = 'Clear',\r\n    /**\r\n     * @remarks\r\n     * Specifies a rain weather condition.\r\n     *\r\n     */\r\n    Rain = 'Rain',\r\n    /**\r\n     * @remarks\r\n     * Specifies a rain and thunder weather condition.\r\n     *\r\n     */\r\n    Thunder = 'Thunder',\r\n}\r",
            "jsdoc": "/**\r\n * Used to specify the type of weather condition within the\r\n * world.\r\n */\r",
            "enumValues": [
              {
                "name": "Clear",
                "value": "Clear",
                "description": ""
              },
              {
                "name": "Rain",
                "value": "Rain",
                "description": ""
              },
              {
                "name": "Thunder",
                "value": "Thunder",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "weathertype",
              "enum"
            ],
            "stability": "stable"
          }
        ],
        "classes": [
          {
            "id": "@minecraft/server.Block",
            "name": "Block",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a block in a dimension. A block represents a\r unique X, Y, and Z within a dimension and get/sets the state\r of the block at that location. This type was significantly\r updated in version 1.17.10.21.\r /",
            "definition": "export class Block {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the dimension that the block is within.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this block is an air block (i.e., empty\r\n     * space).\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this block is a liquid block - (e.g., a\r\n     * water block and a lava block are liquid, while an air block\r\n     * and a stone block are not. Water logged blocks are not\r\n     * liquid blocks).\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isLiquid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this reference to a block is still valid\r\n     * (for example, if the block is unloaded, references to that\r\n     * block will no longer be valid.)\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns or sets whether this block has water on it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isWaterlogged: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this block's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Coordinates of the specified block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Additional block configuration data that describes the\r\n     * block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly permutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Gets the type of block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly 'type': BlockType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of block for this block. Warning:\r\n     * Vanilla block names can be changed in future releases, try\r\n     * using 'Block.matches' instead for block comparison.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * X coordinate of the block.\r\n     *\r\n     */\r\n    readonly x: number;\r\n    /**\r\n     * @remarks\r\n     * Y coordinate of the block.\r\n     *\r\n     */\r\n    readonly y: number;\r\n    /**\r\n     * @remarks\r\n     * Z coordinate of the block.\r\n     *\r\n     */\r\n    readonly z: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} above this block (positive in the\r\n     * Y direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps above to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    above(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} below this block (negative in the\r\n     * Y direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps below to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    below(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Vector3} of the center of this block on\r\n     * the X and Z axis.\r\n     *\r\n     */\r\n    bottomCenter(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed when touched by\r\n     * liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed when touched by liquid.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block can have a liquid placed over it,\r\n     * i.e. be waterlogged.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block can have a liquid placed over it.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    canContainLiquid(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Vector3} of the center of this block on\r\n     * the X, Y, and Z axis.\r\n     *\r\n     */\r\n    center(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east of this block\r\n     * (positive in the X direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the east to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    east(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for a block - for example, an inventory component of a chest\r\n     * block.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g.,\r\n     * 'minecraft:inventory'). If no namespace prefix is specified,\r\n     * 'minecraft:' is assumed. Available component IDs are those\r\n     * in the {@link BlockComponentTypes} enum and custom component\r\n     * IDs registered with the {@link BlockComponentRegistry}.\r\n     * @returns\r\n     * Returns the component if it exists on the block, otherwise\r\n     * undefined.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getComponent<T extends string>(componentId: T): BlockComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Creates a prototype item stack based on this block that can\r\n     * be used with Container/ContainerSlot APIs.\r\n     *\r\n     * @param amount\r\n     * Number of instances of this block to place in the item\r\n     * stack.\r\n     * Defaults to: 1\r\n     * @param withData\r\n     * Whether additional data facets of the item stack are\r\n     * included.\r\n     * Defaults to: false\r\n     * @returns\r\n     * An itemStack with the specified amount of items and data.\r\n     * Returns undefined if block type is incompatible.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getItemStack(amount?: number, withData?: boolean): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the net redstone power of this block.\r\n     *\r\n     * @returns\r\n     * Returns undefined if redstone power is not applicable to\r\n     * this block.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getRedstonePower(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of tags for a block.\r\n     *\r\n     * @returns\r\n     * The list of tags that the block has.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Checks to see if the permutation of this block has a\r\n     * specific tag.\r\n     *\r\n     * @param tag\r\n     * Tag to check for.\r\n     * @returns\r\n     * Returns `true` if the permutation of this block has the tag,\r\n     * else `false`.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example checkBlockTags.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function checkBlockTags(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // Fetch the block\r\n     *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n     *\r\n     *   // check that the block is loaded\r\n     *   if (block) {\r\n     *     log(`Block is dirt: ${block.hasTag(\"dirt\")}`);\r\n     *     log(`Block is wood: ${block.hasTag(\"wood\")}`);\r\n     *     log(`Block is stone: ${block.hasTag(\"stone\")}`);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block stops liquid from flowing.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block stops liquid from flowing.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    isLiquidBlocking(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether liquid can flow into the block from the\r\n     * provided direction, or flow out from the provided direction\r\n     * when liquid is placed into it with a bucket.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether liquid can flow into the block from the provided\r\n     * direction, or flow out from the provided direction when\r\n     * liquid is placed into it with a bucket\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    liquidCanFlowFromDirection(liquidType: LiquidType, flowDirection: Direction): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed and spawns its item\r\n     * when touched by liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed and spawns its item when\r\n     * touched by liquid.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    liquidSpreadCausesSpawn(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Tests whether this block matches a specific criteria.\r\n     *\r\n     * @param blockName\r\n     * Block type identifier to match this API against.\r\n     * @param states\r\n     * Optional set of block states to test this block against.\r\n     * @returns\r\n     * Returns true if the block matches the specified criteria.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    matches(blockName: string, states?: Record<string, boolean | number | string>): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the north of this block\r\n     * (negative in the Z direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the north to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    north(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a block at an offset relative vector to this block.\r\n     *\r\n     * @param offset\r\n     * The offset vector. For example, an offset of 0, 1, 0 will\r\n     * return the block above the current block.\r\n     * @returns\r\n     * Block at the specified offset, or undefined if that block\r\n     * could not be retrieved (for example, the block and its\r\n     * relative chunk is not loaded yet.)\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    offset(offset: Vector3): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Sets the block in the dimension to the state of the\r\n     * permutation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param permutation\r\n     * Permutation that contains a set of property states for the\r\n     * Block.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setPermutation(permutation: BlockPermutation): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the type of block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockType\r\n     * Identifier of the type of block to apply - for example,\r\n     * minecraft:powered_repeater.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setType(blockType: BlockType | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets whether this block has a water logged state - for\r\n     * example, whether stairs are submerged within water.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param isWaterlogged\r\n     * true if the block should have water within it.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setWaterlogged(isWaterlogged: boolean): void;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the south of this block\r\n     * (positive in the Z direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the south to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    south(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the west of this block\r\n     * (negative in the X direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the west to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    west(steps?: number): Block | undefined;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a block in a dimension. A block represents a\r\n * unique X, Y, and Z within a dimension and get/sets the state\r\n * of the block at that location. This type was significantly\r\n * updated in version 1.17.10.21.\r\n */\r",
            "properties": [
              {
                "name": "dimension",
                "type": "Dimension",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isAir",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isLiquid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isWaterlogged",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "localizationKey",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "permutation",
                "type": "BlockPermutation",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "typeId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "x",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "y",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "z",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "above",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "above(steps?: number): Block | undefined"
              },
              {
                "name": "below",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "below(steps?: number): Block | undefined"
              },
              {
                "name": "bottomCenter",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "bottomCenter(): Vector3"
              },
              {
                "name": "canBeDestroyedByLiquidSpread",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean"
              },
              {
                "name": "canContainLiquid",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "canContainLiquid(liquidType: LiquidType): boolean"
              },
              {
                "name": "center",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "center(): Vector3"
              },
              {
                "name": "east",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "east(steps?: number): Block | undefined"
              },
              {
                "name": "getItemStack",
                "parameters": [],
                "returnType": "ItemStack | undefined",
                "accessibility": "public",
                "signature": "getItemStack(amount?: number, withData?: boolean): ItemStack | undefined"
              },
              {
                "name": "getRedstonePower",
                "parameters": [],
                "returnType": "number | undefined",
                "accessibility": "public",
                "signature": "getRedstonePower(): number | undefined"
              },
              {
                "name": "getTags",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getTags(): string[]"
              },
              {
                "name": "hasTag",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasTag(tag: string): boolean"
              },
              {
                "name": "isLiquidBlocking",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isLiquidBlocking(liquidType: LiquidType): boolean"
              },
              {
                "name": "liquidCanFlowFromDirection",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "liquidCanFlowFromDirection(liquidType: LiquidType, flowDirection: Direction): boolean"
              },
              {
                "name": "liquidSpreadCausesSpawn",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "liquidSpreadCausesSpawn(liquidType: LiquidType): boolean"
              },
              {
                "name": "matches",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "matches(blockName: string, states?: Record<string, boolean | number | string>): boolean"
              },
              {
                "name": "north",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "north(steps?: number): Block | undefined"
              },
              {
                "name": "offset",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "offset(offset: Vector3): Block | undefined"
              },
              {
                "name": "setPermutation",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setPermutation(permutation: BlockPermutation): void"
              },
              {
                "name": "setType",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setType(blockType: BlockType | string): void"
              },
              {
                "name": "setWaterlogged",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setWaterlogged(isWaterlogged: boolean): void"
              },
              {
                "name": "south",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "south(steps?: number): Block | undefined"
              },
              {
                "name": "west",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "west(steps?: number): Block | undefined"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "block",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponent",
            "name": "BlockComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Base type for components associated with blocks.\r /",
            "definition": "export class BlockComponent extends Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block instance that this component pertains to.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n}\r",
            "jsdoc": "/**\r\n * Base type for components associated with blocks.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "Component",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentEntityFallOnEvent",
            "name": "BlockComponentEntityFallOnEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an entity falling onto a\r specific block.\r /",
            "definition": "export class BlockComponentEntityFallOnEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that fell onto the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * The distance that the entity fell onto this block with.\r\n     *\r\n     */\r\n    readonly fallDistance: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an entity falling onto a\r\n * specific block.\r\n */\r",
            "properties": [
              {
                "name": "fallDistance",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponententityfallonevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentOnPlaceEvent",
            "name": "BlockComponentOnPlaceEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a specific block that was\r placed.\r /",
            "definition": "export class BlockComponentOnPlaceEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Previous block at this location that was replaced.\r\n     *\r\n     */\r\n    readonly previousBlock: BlockPermutation;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a specific block that was\r\n * placed.\r\n */\r",
            "properties": [
              {
                "name": "previousBlock",
                "type": "BlockPermutation",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponentonplaceevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentPlayerBreakEvent",
            "name": "BlockComponentPlayerBreakEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a specific block being broken\r by a player.\r /",
            "definition": "export class BlockComponentPlayerBreakEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns permutation information about this block before it\r\n     * was broken.\r\n     *\r\n     */\r\n    readonly brokenBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The player that broke this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a specific block being broken\r\n * by a player.\r\n */\r",
            "properties": [
              {
                "name": "brokenBlockPermutation",
                "type": "BlockPermutation",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponentplayerbreakevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentPlayerInteractEvent",
            "name": "BlockComponentPlayerInteractEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a specific block being\r interacted with.\r /",
            "definition": "export class BlockComponentPlayerInteractEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block face that was interacted with.\r\n     *\r\n     */\r\n    readonly face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block that the player interacted with.\r\n     *\r\n     */\r\n    readonly faceLocation?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The player that interacted with this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a specific block being\r\n * interacted with.\r\n */\r",
            "properties": [
              {
                "name": "face",
                "type": "Direction",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponentplayerinteractevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentPlayerPlaceBeforeEvent",
            "name": "BlockComponentPlayerPlaceBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event before a player\r places a block.\r /",
            "definition": "export class BlockComponentPlayerPlaceBeforeEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the block place event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The block face that was placed onto.\r\n     *\r\n     */\r\n    readonly face: Direction;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that will be placed if the event is\r\n     * not cancelled. If set to a different block permutation, that\r\n     * permutation will be placed instead.\r\n     *\r\n     */\r\n    permutationToPlace: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The player that is placing this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * places a block.\r\n */\r",
            "properties": [
              {
                "name": "face",
                "type": "Direction",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponentplayerplacebeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentRandomTickEvent",
            "name": "BlockComponentRandomTickEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a specific block randomly\r ticking.\r /",
            "definition": "export class BlockComponentRandomTickEvent extends BlockEvent {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a specific block randomly\r\n * ticking.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponentrandomtickevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentRegistry",
            "name": "BlockComponentRegistry",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class BlockComponentRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link BlockCustomComponentAlreadyRegisteredError}\r\n     *\r\n     * {@link BlockCustomComponentReloadNewComponentError}\r\n     *\r\n     * {@link BlockCustomComponentReloadNewEventError}\r\n     *\r\n     * {@link BlockCustomComponentReloadVersionError}\r\n     *\r\n     * {@link CustomComponentInvalidRegistryError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCustomComponent(name: string, customComponent: BlockCustomComponent): void;\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [
              {
                "name": "registerCustomComponent",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "registerCustomComponent(name: string, customComponent: BlockCustomComponent): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponentregistry",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentStepOffEvent",
            "name": "BlockComponentStepOffEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an entity stepping off a\r specific block.\r /",
            "definition": "export class BlockComponentStepOffEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that stepped off the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an entity stepping off a\r\n * specific block.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponentstepoffevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentStepOnEvent",
            "name": "BlockComponentStepOnEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an entity stepping onto a\r specific block.\r /",
            "definition": "export class BlockComponentStepOnEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that stepped on the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an entity stepping onto a\r\n * specific block.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponentsteponevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockComponentTickEvent",
            "name": "BlockComponentTickEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a specific block ticking.\r /",
            "definition": "export class BlockComponentTickEvent extends BlockEvent {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a specific block ticking.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponenttickevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockCustomComponentInstance",
            "name": "BlockCustomComponentInstance",
            "type": "class",
            "module": "@minecraft/server",
            "description": "An instance of a custom component on a block.\r /",
            "definition": "export class BlockCustomComponentInstance extends BlockComponent {\n    private constructor();\r\n    readonly customComponentParameters: CustomComponentParameters;\r\n}\r",
            "jsdoc": "/**\r\n * An instance of a custom component on a block.\r\n */\r",
            "properties": [
              {
                "name": "customComponentParameters",
                "type": "CustomComponentParameters",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcustomcomponentinstance",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockEvent",
            "name": "BlockEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event that impacts a\r specific block.\r /",
            "definition": "export class BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block currently in the world at the location of this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * Dimension that contains the block that is the subject of\r\n     * this event.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event that impacts a\r\n * specific block.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "dimension",
                "type": "Dimension",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockExplodeAfterEvent",
            "name": "BlockExplodeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an explosion that has\r occurred for a specific block.\r /",
            "definition": "export class BlockExplodeAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Description of the block that has exploded.\r\n     *\r\n     */\r\n    readonly explodedBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * occurred for a specific block.\r\n */\r",
            "properties": [
              {
                "name": "explodedBlockPermutation",
                "type": "BlockPermutation",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockexplodeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockExplodeAfterEventSignal",
            "name": "BlockExplodeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when an explosion\r occurs, as it impacts individual blocks.\r /",
            "definition": "export class BlockExplodeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an explosion\r\n     * occurs, as it impacts individual blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: BlockExplodeAfterEvent) => void): (arg0: BlockExplodeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an explosion\r\n     * occurs, as it impacts individual blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: BlockExplodeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when an explosion\r\n * occurs, as it impacts individual blocks.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockexplodeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockFluidContainerComponent",
            "name": "BlockFluidContainerComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents the fluid container of a block in the world. Used\r with blocks like cauldrons.\r /",
            "definition": "export class BlockFluidContainerComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Relative fill level of the fluid container.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fillLevel: number;\r\n    /**\r\n     * @remarks\r\n     * Custom color of the fluid in the container.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fluidColor: RGBA;\r\n    static readonly componentId = 'minecraft:fluid_container';\r\n    /**\r\n     * @remarks\r\n     * Adds a dye to the fluid. The dye color is combined with any\r\n     * existing custom color.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    addDye(dye: ItemType): void;\r\n    /**\r\n     * @remarks\r\n     * Gets the current fluid type in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFluidType(): FluidType;\r\n    /**\r\n     * @remarks\r\n     * Sets the current fluid type in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setFluidType(fluidType: FluidType): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a potion item in the container. Changes the container's\r\n     * fluid type to potion.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setPotion(itemStack: ItemStack): void;\r\n}\r",
            "jsdoc": "/**\r\n * Represents the fluid container of a block in the world. Used\r\n * with blocks like cauldrons.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "fluid_container'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "addDye",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "addDye(dye: ItemType): void"
              },
              {
                "name": "getFluidType",
                "parameters": [],
                "returnType": "FluidType",
                "accessibility": "public",
                "signature": "getFluidType(): FluidType"
              },
              {
                "name": "setFluidType",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setFluidType(fluidType: FluidType): void"
              },
              {
                "name": "setPotion",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setPotion(itemStack: ItemStack): void"
              }
            ],
            "extends": "BlockComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockfluidcontainercomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockInventoryComponent",
            "name": "BlockInventoryComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents the inventory of a block in the world. Used with\r blocks like chests.\r ```typescript\r  function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // Fetch block\r   const block = targetLocation.dimension.getBlock(targetLocation);\r    if (!block) {\r     log(\"Could not find block. Maybe it is not loaded?\", -1);\r     return;\r   }\r    // Make it a chest\r   block.setType(MinecraftBlockTypes.Chest);\r    // Get the inventory\r   const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r    if (!inventoryComponent || !inventoryComponent.container) {\r     log(\"Could not find inventory component.\", -1);\r     return;\r   }\r    const inventoryContainer = inventoryComponent.container;\r    // Set slot 0 to a stack of 10 apples\r   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r }\r ```\r /",
            "definition": "export class BlockInventoryComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The container which holds an {@link ItemStack}.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly container?: Container;\r\n    static readonly componentId = 'minecraft:inventory';\r\n}\r",
            "jsdoc": "/**\r\n * Represents the inventory of a block in the world. Used with\r\n * blocks like chests.\r\n * @example placeItemsInChest.ts\r\n * ```typescript\r\n * import { ItemStack, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes, MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // Fetch block\r\n *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (!block) {\r\n *     log(\"Could not find block. Maybe it is not loaded?\", -1);\r\n *     return;\r\n *   }\r\n *\r\n *   // Make it a chest\r\n *   block.setType(MinecraftBlockTypes.Chest);\r\n *\r\n *   // Get the inventory\r\n *   const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *\r\n *   if (!inventoryComponent || !inventoryComponent.container) {\r\n *     log(\"Could not find inventory component.\", -1);\r\n *     return;\r\n *   }\r\n *\r\n *   const inventoryContainer = inventoryComponent.container;\r\n *\r\n *   // Set slot 0 to a stack of 10 apples\r\n *   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "inventory'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockinventorycomponent",
              "class"
            ],
            "examples": [
              {
                "title": "placeItemsInChest.ts",
                "code": "import { ItemStack, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes, MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // Fetch block\r\n  const block = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (!block) {\r\n    log(\"Could not find block. Maybe it is not loaded?\", -1);\r\n    return;\r\n  }\r\n\n  // Make it a chest\r\n  block.setType(MinecraftBlockTypes.Chest);\r\n\n  // Get the inventory\r\n  const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r\n\n  if (!inventoryComponent || !inventoryComponent.container) {\r\n    log(\"Could not find inventory component.\", -1);\r\n    return;\r\n  }\r\n\n  const inventoryContainer = inventoryComponent.container;\r\n\n  // Set slot 0 to a stack of 10 apples\r\n  inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockLocationIterator",
            "name": "BlockLocationIterator",
            "type": "class",
            "module": "@minecraft/server",
            "description": "A BlockLocationIterator returns the next block location of\r the block volume across which it is iterating.\r The BlockLocationIterator is used to abstract the shape of\r the block volume it was fetched from (so it can represent\r all the block locations that make up rectangles, cubes,\r spheres, lines and complex shapes).\r Each iteration pass returns the next valid block location in\r the parent shape.\r Unless otherwise specified by the parent shape - the\r BlockLocationIterator will iterate over a 3D space in the\r order of increasing X, followed by increasing Z followed by\r increasing Y.\r (Effectively stepping across the XZ plane, and when all the\r locations in that plane are exhausted, increasing the Y\r coordinate to the next XZ slice)\r /",
            "definition": "export class BlockLocationIterator implements Iterable<Vector3> {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    [Symbol.iterator](): Iterator<Vector3>;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    next(): IteratorResult<Vector3>;\r\n}\r",
            "jsdoc": "/**\r\n * A BlockLocationIterator returns the next block location of\r\n * the block volume across which it is iterating.\r\n * The BlockLocationIterator is used to abstract the shape of\r\n * the block volume it was fetched from (so it can represent\r\n * all the block locations that make up rectangles, cubes,\r\n * spheres, lines and complex shapes).\r\n * Each iteration pass returns the next valid block location in\r\n * the parent shape.\r\n * Unless otherwise specified by the parent shape - the\r\n * BlockLocationIterator will iterate over a 3D space in the\r\n * order of increasing X, followed by increasing Z followed by\r\n * increasing Y.\r\n * (Effectively stepping across the XZ plane, and when all the\r\n * locations in that plane are exhausted, increasing the Y\r\n * coordinate to the next XZ slice)\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "next",
                "parameters": [],
                "returnType": "IteratorResult<Vector3>",
                "accessibility": "public",
                "signature": "next(): IteratorResult<Vector3>"
              }
            ],
            "implements": [
              "Iterable<Vector3>"
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blocklocationiterator",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockMapColorComponent",
            "name": "BlockMapColorComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents the color of a block when displayed on a map.\r /",
            "definition": "export class BlockMapColorComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Base map color defined for that block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly color: RGBA;\r\n    /**\r\n     * @remarks\r\n     * Returns the base color multiplied to the evaluated tint at\r\n     * the given position.\r\n     *\r\n     */\r\n    readonly tintedColor: RGBA;\r\n    /**\r\n     * @remarks\r\n     * Type of tint applied to the color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tintMethod: TintMethod;\r\n    static readonly componentId = 'minecraft:map_color';\r\n}\r",
            "jsdoc": "/**\r\n * Represents the color of a block when displayed on a map.\r\n */\r",
            "properties": [
              {
                "name": "color",
                "type": "RGBA",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "tintedColor",
                "type": "RGBA",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "tintMethod",
                "type": "TintMethod",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "map_color'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockmapcolorcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockMovableComponent",
            "name": "BlockMovableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Type of tint applied to the color.",
            "definition": "export class BlockMovableComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly movementType: MovementType;\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly stickyType: StickyType;\r\n    static readonly componentId = 'minecraft:movable';\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Type of tint applied to the color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r",
            "properties": [
              {
                "name": "movementType",
                "type": "MovementType",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "stickyType",
                "type": "StickyType",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "movable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockmovablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockPermutation",
            "name": "BlockPermutation",
            "type": "class",
            "module": "@minecraft/server",
            "description": "properties (also sometimes called block state) which\r Block}).\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
            "definition": "export class BlockPermutation {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The {@link BlockType} that the permutation has.\r\n     *\r\n     */\r\n    readonly 'type': BlockType;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed when touched by\r\n     * liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed when touched by liquid.\r\n     * @throws This function can throw errors.\r\n     */\r\n    canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block can have a liquid placed over it,\r\n     * i.e. be waterlogged.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block can have a liquid placed over it.\r\n     * @throws This function can throw errors.\r\n     */\r\n    canContainLiquid(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns all available block states associated with this\r\n     * block.\r\n     *\r\n     * @returns\r\n     * Returns the list of all of the block states that the\r\n     * permutation has.\r\n     */\r\n    getAllStates(): Record<string, boolean | number | string>;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a prototype item stack based on this block\r\n     * permutation that can be used with item\r\n     * Container/ContainerSlot APIs.\r\n     *\r\n     * @param amount\r\n     * Number of instances of this block to place in the prototype\r\n     * item stack.\r\n     * Defaults to: 1\r\n     */\r\n    getItemStack(amount?: number): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a state for the permutation.\r\n     *\r\n     * @param stateName\r\n     * Name of the block state who's value is to be returned.\r\n     * @returns\r\n     * Returns the state if the permutation has it, else\r\n     * `undefined`.\r\n     */\r\n    getState<T extends keyof minecraftvanilladata.BlockStateSuperset>(\r\n        stateName: T,\r\n    ): minecraftvanilladata.BlockStateSuperset[T] | undefined;\r\n    /**\r\n     * @remarks\r\n     * Creates a copy of the permutation.\r\n     *\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Checks to see if the permutation has a specific tag.\r\n     *\r\n     * @returns\r\n     * Returns `true` if the permutation has the tag, else `false`.\r\n     * @example checkBlockTags.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function checkBlockTags(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // Fetch the block\r\n     *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n     *\r\n     *   // check that the block is loaded\r\n     *   if (block) {\r\n     *     log(`Block is dirt: ${block.hasTag(\"dirt\")}`);\r\n     *     log(`Block is wood: ${block.hasTag(\"wood\")}`);\r\n     *     log(`Block is stone: ${block.hasTag(\"stone\")}`);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block stops liquid from flowing.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block stops liquid from flowing.\r\n     * @throws This function can throw errors.\r\n     */\r\n    isLiquidBlocking(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed and spawns its item\r\n     * when touched by liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed and spawns its item when\r\n     * touched by liquid.\r\n     * @throws This function can throw errors.\r\n     */\r\n    liquidSpreadCausesSpawn(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns a boolean whether a specified permutation matches\r\n     * this permutation. If states is not specified, matches checks\r\n     * against the set of types more broadly.\r\n     *\r\n     * @param blockName\r\n     * An optional set of states to compare against.\r\n     */\r\n    matches<T extends string = minecraftvanilladata.MinecraftBlockTypes>(\r\n        blockName: T,\r\n        states?: BlockStateArg<T>,\r\n    ): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns a derived BlockPermutation with a specific property\r\n     * set.\r\n     *\r\n     * @param name\r\n     * Identifier of the block property.\r\n     * @param value\r\n     * Value of the block property.\r\n     * @throws This function can throw errors.\r\n     */\r\n    withState<T extends keyof minecraftvanilladata.BlockStateSuperset>(\r\n        name: T,\r\n        value: minecraftvanilladata.BlockStateSuperset[T],\r\n    ): BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Given a type identifier and an optional set of properties,\r\n     * will return a BlockPermutation object that is usable in\r\n     * other block APIs (e.g., block.setPermutation)\r\n     *\r\n     * @param blockName\r\n     * Identifier of the block to check.\r\n     * @throws This function can throw errors.\r\n     * @example addBlockColorCube.ts\r\n     * ```typescript\r\n     * import { BlockPermutation, DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function addBlockColorCube(targetLocation: DimensionLocation) {\r\n     *   const allWoolBlocks: string[] = [\r\n     *     MinecraftBlockTypes.WhiteWool,\r\n     *     MinecraftBlockTypes.OrangeWool,\r\n     *     MinecraftBlockTypes.MagentaWool,\r\n     *     MinecraftBlockTypes.LightBlueWool,\r\n     *     MinecraftBlockTypes.YellowWool,\r\n     *     MinecraftBlockTypes.LimeWool,\r\n     *     MinecraftBlockTypes.PinkWool,\r\n     *     MinecraftBlockTypes.GrayWool,\r\n     *     MinecraftBlockTypes.LightGrayWool,\r\n     *     MinecraftBlockTypes.CyanWool,\r\n     *     MinecraftBlockTypes.PurpleWool,\r\n     *     MinecraftBlockTypes.BlueWool,\r\n     *     MinecraftBlockTypes.BrownWool,\r\n     *     MinecraftBlockTypes.GreenWool,\r\n     *     MinecraftBlockTypes.RedWool,\r\n     *     MinecraftBlockTypes.BlackWool,\r\n     *   ];\r\n     *\r\n     *   const cubeDim = 7;\r\n     *\r\n     *   let colorIndex = 0;\r\n     *\r\n     *   for (let x = 0; x <= cubeDim; x++) {\r\n     *     for (let y = 0; y <= cubeDim; y++) {\r\n     *       for (let z = 0; z <= cubeDim; z++) {\r\n     *         colorIndex++;\r\n     *         targetLocation.dimension\r\n     *           .getBlock(Vector3Utils.add(targetLocation, { x, y, z }))\r\n     *           ?.setPermutation(BlockPermutation.resolve(allWoolBlocks[colorIndex % allWoolBlocks.length]));\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    static resolve<T extends string = minecraftvanilladata.MinecraftBlockTypes>(\r\n        blockName: T,\r\n        states?: BlockStateArg<T>,\r\n    ): BlockPermutation;\r\n}\r",
            "jsdoc": "/**\r\n * Contains the combination of type {@link BlockType} and\r\n * properties (also sometimes called block state) which\r\n * describe a block (but does not belong to a specific {@link\r\n * Block}).\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "canBeDestroyedByLiquidSpread",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean"
              },
              {
                "name": "canContainLiquid",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "canContainLiquid(liquidType: LiquidType): boolean"
              },
              {
                "name": "getAllStates",
                "parameters": [],
                "returnType": "Record<string, boolean | number | string>",
                "accessibility": "public",
                "signature": "getAllStates(): Record<string, boolean | number | string>"
              },
              {
                "name": "getItemStack",
                "parameters": [],
                "returnType": "ItemStack | undefined",
                "accessibility": "public",
                "signature": "getItemStack(amount?: number): ItemStack | undefined"
              },
              {
                "name": "getTags",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getTags(): string[]"
              },
              {
                "name": "hasTag",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasTag(tag: string): boolean"
              },
              {
                "name": "isLiquidBlocking",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isLiquidBlocking(liquidType: LiquidType): boolean"
              },
              {
                "name": "liquidSpreadCausesSpawn",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "liquidSpreadCausesSpawn(liquidType: LiquidType): boolean"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockpermutation",
              "class"
            ],
            "examples": [
              {
                "title": "addTranslatedSign.ts",
                "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockPistonComponent",
            "name": "BlockPistonComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When present, this block has piston-like behavior. Contains\r additional properties for discovering block piston state.\r /",
            "definition": "export class BlockPistonComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of expanding or\r\n     * retracting.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isMoving: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current state of the piston.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly state: BlockPistonState;\r\n    static readonly componentId = 'minecraft:piston';\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of blocks that this piston is connected\r\n     * with.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getAttachedBlocks(): Block[];\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of block locations that this piston is\r\n     * connected with.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getAttachedBlocksLocations(): Vector3[];\r\n}\r",
            "jsdoc": "/**\r\n * When present, this block has piston-like behavior. Contains\r\n * additional properties for discovering block piston state.\r\n */\r",
            "properties": [
              {
                "name": "isMoving",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "state",
                "type": "BlockPistonState",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "piston'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getAttachedBlocks",
                "parameters": [],
                "returnType": "Block[]",
                "accessibility": "public",
                "signature": "getAttachedBlocks(): Block[]"
              },
              {
                "name": "getAttachedBlocksLocations",
                "parameters": [],
                "returnType": "Vector3[]",
                "accessibility": "public",
                "signature": "getAttachedBlocksLocations(): Vector3[]"
              }
            ],
            "extends": "BlockComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockpistoncomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockRecordPlayerComponent",
            "name": "BlockRecordPlayerComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a block that can play a record.\r /",
            "definition": "export class BlockRecordPlayerComponent extends BlockComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:record_player';\r\n    /**\r\n     * @remarks\r\n     * Ejects the currently set record of this record-playing\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Gets the currently set record of this record-playing block.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRecord(): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the record-playing block is currently\r\n     * playing a record.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    isPlaying(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Pauses the currently playing record of this record-playing\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    pauseRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Plays the currently set record of this record-playing block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    playRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets and plays a record based on an item type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param startPlaying\r\n     * Defaults to: true\r\n     * @throws This function can throw errors.\r\n     */\r\n    setRecord(recordItemType?: ItemType | string, startPlaying?: boolean): void;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a block that can play a record.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "record_player'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "ejectRecord",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "ejectRecord(): void"
              },
              {
                "name": "getRecord",
                "parameters": [],
                "returnType": "ItemStack | undefined",
                "accessibility": "public",
                "signature": "getRecord(): ItemStack | undefined"
              },
              {
                "name": "isPlaying",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isPlaying(): boolean"
              },
              {
                "name": "pauseRecord",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "pauseRecord(): void"
              },
              {
                "name": "playRecord",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "playRecord(): void"
              },
              {
                "name": "setRecord",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setRecord(recordItemType?: ItemType | string, startPlaying?: boolean): void"
              }
            ],
            "extends": "BlockComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockrecordplayercomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockSignComponent",
            "name": "BlockSignComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a block that can display text on it.\r ```typescript\r  function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r }\r ```\r ```typescript\r  function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const signBlock = targetLocation.dimension.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    if (signComponent) {\r     signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r     signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r     signComponent.setTextDyeColor(DyeColor.Green);\r     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r      // players cannot edit sign!\r     signComponent.setWaxed(true);\r   } else {\r     log(\"Could not find sign component.\");\r   }\r }\r ```\r ```typescript\r  function updateSignText(targetLocation: DimensionLocation) {\r   const block = targetLocation.dimension.getBlock(targetLocation);\r   if (!block) {\r     console.warn(\"Could not find a block at specified location.\");\r     return;\r   }\r    const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r   if (sign) {\r     // RawMessage\r     const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r     sign.setText(helloWorldMessage);\r      // RawText\r     const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r     sign.setText(helloWorldText);\r      // Regular string\r     sign.setText(\"Hello World\");\r   } else {\r     console.warn(\"Could not find a sign component on the block.\");\r   }\r }\r ```\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
            "definition": "export class BlockSignComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether or not players can edit the sign. This happens if a\r\n     * sign has had a honeycomb used on it or `setWaxed` was called\r\n     * on the sign.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isWaxed: boolean;\r\n    static readonly componentId = 'minecraft:sign';\r\n    /**\r\n     * @remarks\r\n     * Returns the RawText of the sign if `setText` was called with\r\n     * a RawMessage or a RawText object, otherwise returns\r\n     * undefined.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the message from. If not\r\n     * provided, this will return the message from the front side\r\n     * of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRawText(side?: SignSide): RawText | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the text of the sign if `setText` was called with a\r\n     * string, otherwise returns undefined.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the message from. If not\r\n     * provided, this will return the message from the front side\r\n     * of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getText(side?: SignSide): string | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the dye that is on the text or undefined if the sign\r\n     * has not been dyed.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the dye from. If not provided,\r\n     * this will return the dye on the front side of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTextDyeColor(side?: SignSide): DyeColor | undefined;\r\n    /**\r\n     * @remarks\r\n     * Sets the text of the sign component.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param message\r\n     * The message to set on the sign. If set to a string, then\r\n     * call `getText` to read that string. If set to a RawMessage,\r\n     * then calling `getRawText` will return a RawText.\r\n     * @param side\r\n     * The side of the sign the message will be set on. If not\r\n     * provided, the message will be set on the front side of the\r\n     * sign.\r\n     * Defaults to: 0\r\n     * @throws\r\n     * Throws if the provided message is greater than 512\r\n     * characters in length.\r\n     */\r\n    setText(message: RawMessage | string, side?: SignSide): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the dye color of the text.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param color\r\n     * The dye color to apply to the sign or undefined to clear the\r\n     * dye on the sign.\r\n     * Defaults to: null\r\n     * @param side\r\n     * The side of the sign the color will be set on. If not\r\n     * provided, the color will be set on the front side of the\r\n     * sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    setTextDyeColor(color?: DyeColor, side?: SignSide): void;\r\n    /**\r\n     * @remarks\r\n     * Makes it so players cannot edit this sign.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setWaxed(waxed: boolean): void;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a block that can display text on it.\r\n * @example addSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r\n * }\r\n * ```\r\n * @example addTwoSidedSign.ts\r\n * ```typescript\r\n * import { BlockPermutation, BlockSignComponent, SignSide, DyeColor, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const signBlock = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   if (signComponent) {\r\n *     signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r\n *     signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r\n *     signComponent.setTextDyeColor(DyeColor.Green);\r\n *     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r\n *\r\n *     // players cannot edit sign!\r\n *     signComponent.setWaxed(true);\r\n *   } else {\r\n *     log(\"Could not find sign component.\");\r\n *   }\r\n * }\r\n * ```\r\n * @example updateSignText.ts\r\n * ```typescript\r\n * import { BlockSignComponent, BlockComponentTypes, DimensionLocation, RawMessage, RawText } from \"@minecraft/server\";\r\n *\r\n * function updateSignText(targetLocation: DimensionLocation) {\r\n *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n *   if (!block) {\r\n *     console.warn(\"Could not find a block at specified location.\");\r\n *     return;\r\n *   }\r\n *\r\n *   const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *   if (sign) {\r\n *     // RawMessage\r\n *     const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r\n *     sign.setText(helloWorldMessage);\r\n *\r\n *     // RawText\r\n *     const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r\n *     sign.setText(helloWorldText);\r\n *\r\n *     // Regular string\r\n *     sign.setText(\"Hello World\");\r\n *   } else {\r\n *     console.warn(\"Could not find a sign component on the block.\");\r\n *   }\r\n * }\r\n * ```\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "isWaxed",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "sign'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getRawText",
                "parameters": [],
                "returnType": "RawText | undefined",
                "accessibility": "public",
                "signature": "getRawText(side?: SignSide): RawText | undefined"
              },
              {
                "name": "getText",
                "parameters": [],
                "returnType": "string | undefined",
                "accessibility": "public",
                "signature": "getText(side?: SignSide): string | undefined"
              },
              {
                "name": "getTextDyeColor",
                "parameters": [],
                "returnType": "DyeColor | undefined",
                "accessibility": "public",
                "signature": "getTextDyeColor(side?: SignSide): DyeColor | undefined"
              },
              {
                "name": "setText",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setText(message: RawMessage | string, side?: SignSide): void"
              },
              {
                "name": "setTextDyeColor",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setTextDyeColor(color?: DyeColor, side?: SignSide): void"
              },
              {
                "name": "setWaxed",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setWaxed(waxed: boolean): void"
              }
            ],
            "extends": "BlockComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blocksigncomponent",
              "class"
            ],
            "examples": [
              {
                "title": "addSign.ts",
                "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r\n}"
              },
              {
                "title": "addTwoSidedSign.ts",
                "code": "import { BlockPermutation, BlockSignComponent, SignSide, DyeColor, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const signBlock = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  if (signComponent) {\r\n    signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r\n    signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r\n    signComponent.setTextDyeColor(DyeColor.Green);\r\n    signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r\n\n    // players cannot edit sign!\r\n    signComponent.setWaxed(true);\r\n  } else {\r\n    log(\"Could not find sign component.\");\r\n  }\r\n}"
              },
              {
                "title": "updateSignText.ts",
                "code": "import { BlockSignComponent, BlockComponentTypes, DimensionLocation, RawMessage, RawText } from \"@minecraft/server\";\r\n\nfunction updateSignText(targetLocation: DimensionLocation) {\r\n  const block = targetLocation.dimension.getBlock(targetLocation);\r\n  if (!block) {\r\n    console.warn(\"Could not find a block at specified location.\");\r\n    return;\r\n  }\r\n\n  const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n  if (sign) {\r\n    // RawMessage\r\n    const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r\n    sign.setText(helloWorldMessage);\r\n\n    // RawText\r\n    const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r\n    sign.setText(helloWorldText);\r\n\n    // Regular string\r\n    sign.setText(\"Hello World\");\r\n  } else {\r\n    console.warn(\"Could not find a sign component on the block.\");\r\n  }\r\n}"
              },
              {
                "title": "addTranslatedSign.ts",
                "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockStates",
            "name": "BlockStates",
            "type": "class",
            "module": "@minecraft/server",
            "description": "/",
            "definition": "export class BlockStates {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves a specific block state instance.\r\n     *\r\n     * @returns\r\n     * Returns the {@link Block} state instance if it is found. If\r\n     * the block state instance is not found returns undefined.\r\n     */\r\n    static get(stateName: string): BlockStateType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of all available block states.\r\n     *\r\n     */\r\n    static getAll(): BlockStateType[];\r\n}\r",
            "jsdoc": "/**\r\n * Enumerates all {@link BlockStateType}s.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "BlockStateType | undefined",
                "accessibility": "public",
                "signature": "get(stateName: string): BlockStateType | undefined"
              },
              {
                "name": "getAll",
                "parameters": [],
                "returnType": "BlockStateType[]",
                "accessibility": "public",
                "signature": "getAll(): BlockStateType[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockstates",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockStateType",
            "name": "BlockStateType",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a configurable state value of a block instance.\r For example, the facing direction of stairs is accessible as\r a block state.\r /",
            "definition": "export class BlockStateType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of the block property.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * A set of valid values for the block property.\r\n     *\r\n     */\r\n    readonly validValues: (boolean | number | string)[];\r\n}\r",
            "jsdoc": "/**\r\n * Represents a configurable state value of a block instance.\r\n * For example, the facing direction of stairs is accessible as\r\n * a block state.\r\n */\r",
            "properties": [
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "validValues",
                "type": "(boolean | number | string)[]",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockstatetype",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockType",
            "name": "BlockType",
            "type": "class",
            "module": "@minecraft/server",
            "description": "The type (or template) of a block. Does not contain\r permutation data (state) other than the type of block it\r represents. This type was introduced as of version\r 1.17.10.21.\r /",
            "definition": "export class BlockType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block type name - for example, `minecraft:acacia_stairs`.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
            "jsdoc": "/**\r\n * The type (or template) of a block. Does not contain\r\n * permutation data (state) other than the type of block it\r\n * represents. This type was introduced as of version\r\n * 1.17.10.21.\r\n */\r",
            "properties": [
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blocktype",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockTypes",
            "name": "BlockTypes",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains a catalog of Minecraft Block Types that are\r available in this world.\r /",
            "definition": "export class BlockTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a BlockType object for the specified identifier.\r\n     *\r\n     * @param typeName\r\n     * Identifier of the block type. Should follow a namespace:id\r\n     * pattern, such as minecraft:dirt.\r\n     * @returns\r\n     * BlockType object, or undefined if the block type is not\r\n     * available within this world.\r\n     */\r\n    static get(typeName: string): BlockType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of all available block types.\r\n     *\r\n     */\r\n    static getAll(): BlockType[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains a catalog of Minecraft Block Types that are\r\n * available in this world.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "BlockType | undefined",
                "accessibility": "public",
                "signature": "get(typeName: string): BlockType | undefined"
              },
              {
                "name": "getAll",
                "parameters": [],
                "returnType": "BlockType[]",
                "accessibility": "public",
                "signature": "getAll(): BlockType[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blocktypes",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockVolume",
            "name": "BlockVolume",
            "type": "class",
            "module": "@minecraft/server",
            "description": "A BlockVolume is a simple interface to an object which\r represents a 3D rectangle of a given size (in blocks) at a\r world block location.\r Note that these are not analogous to \"min\" and \"max\" values,\r in that the vector components are not guaranteed to be in\r any order.\r In addition, these vector positions are not interchangeable\r with BlockLocation.\r If you want to get this volume represented as range of of\r BlockLocations, you can use the getBoundingBox utility\r function.\r This volume class will maintain the ordering of the corner\r indexes as initially set. imagine that each corner is\r assigned in Editor - as you move the corner around\r (potentially inverting the min/max relationship of the\r bounds) - what\r you had originally selected as the top/left corner would\r traditionally become the bottom/right.\r When manually editing these kinds of volumes, you need to\r maintain the identity of the corner as you edit - the\r BlockVolume utility functions do this.\r  Important to note that this measures block sizes (to/from) -\r a normal AABB (0,0,0) to (0,0,0) would traditionally be of\r size (0,0,0)\r However, because we're measuring blocks - the size or span\r of a BlockVolume would actually be (1,1,1)\r  /",
            "definition": "export class BlockVolume extends BlockVolumeBase {\n    /**\r\n     * @remarks\r\n     * A world block location that represents a corner in a 3D\r\n     * rectangle\r\n     *\r\n     */\r\n    'from': Vector3;\r\n    /**\r\n     * @remarks\r\n     * A world block location that represents the opposite corner\r\n     * in a 3D rectangle\r\n     *\r\n     */\r\n    to: Vector3;\r\n    constructor(from: Vector3, to: Vector3);\r\n    /**\r\n     * @remarks\r\n     * Check to see if the given location is directly adjacent to\r\n     * the outer surface of a BlockVolume.\r\n     *\r\n     *\r\n     * @param pos\r\n     * The world block location to test\r\n     * @returns\r\n     * If the location is either inside or more than 0 blocks away,\r\n     * the function will return false.\r\n     * If the location is directly contacting the outer surface of\r\n     * the BlockVolume, the function will return true.\r\n     */\r\n    doesLocationTouchFaces(pos: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Check to see if a two block volumes are directly adjacent\r\n     * and two faces touch.\r\n     *\r\n     * @param other\r\n     * The volume to test\r\n     * @returns\r\n     * If the outer faces of both block volumes touch and are\r\n     * directly adjacent at any point, return true.\r\n     */\r\n    doesVolumeTouchFaces(other: BlockVolume): boolean;\r\n    /**\r\n     * @remarks\r\n     * Return an enumeration which represents the intersection\r\n     * between two BlockVolume objects\r\n     *\r\n     */\r\n    intersects(other: BlockVolume): BlockVolumeIntersection;\r\n}\r",
            "jsdoc": "/**\r\n * A BlockVolume is a simple interface to an object which\r\n * represents a 3D rectangle of a given size (in blocks) at a\r\n * world block location.\r\n * Note that these are not analogous to \"min\" and \"max\" values,\r\n * in that the vector components are not guaranteed to be in\r\n * any order.\r\n * In addition, these vector positions are not interchangeable\r\n * with BlockLocation.\r\n * If you want to get this volume represented as range of of\r\n * BlockLocations, you can use the getBoundingBox utility\r\n * function.\r\n * This volume class will maintain the ordering of the corner\r\n * indexes as initially set. imagine that each corner is\r\n * assigned in Editor - as you move the corner around\r\n * (potentially inverting the min/max relationship of the\r\n * bounds) - what\r\n * you had originally selected as the top/left corner would\r\n * traditionally become the bottom/right.\r\n * When manually editing these kinds of volumes, you need to\r\n * maintain the identity of the corner as you edit - the\r\n * BlockVolume utility functions do this.\r\n *\r\n * Important to note that this measures block sizes (to/from) -\r\n * a normal AABB (0,0,0) to (0,0,0) would traditionally be of\r\n * size (0,0,0)\r\n * However, because we're measuring blocks - the size or span\r\n * of a BlockVolume would actually be (1,1,1)\r\n *\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "doesLocationTouchFaces",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "doesLocationTouchFaces(pos: Vector3): boolean"
              },
              {
                "name": "doesVolumeTouchFaces",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "doesVolumeTouchFaces(other: BlockVolume): boolean"
              },
              {
                "name": "intersects",
                "parameters": [],
                "returnType": "BlockVolumeIntersection",
                "accessibility": "public",
                "signature": "intersects(other: BlockVolume): BlockVolumeIntersection"
              }
            ],
            "extends": "BlockVolumeBase",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockvolume",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockVolumeBase",
            "name": "BlockVolumeBase",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Base type for BlockVolumes.\r /",
            "definition": "export class BlockVolumeBase {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Fetch a {@link BlockLocationIterator} that represents all of\r\n     * the block world locations within the specified volume\r\n     *\r\n     */\r\n    getBlockLocationIterator(): BlockLocationIterator;\r\n    /**\r\n     * @remarks\r\n     * Return the capacity (volume) of the BlockVolume (W*D*H)\r\n     *\r\n     */\r\n    getCapacity(): number;\r\n    /**\r\n     * @remarks\r\n     * Get the largest corner position of the volume (guaranteed to\r\n     * be >= min)\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getMax(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Get the smallest corner position of the volume (guaranteed\r\n     * to be <= max)\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getMin(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Get a {@link Vector3} object where each component represents\r\n     * the number of blocks along that axis\r\n     *\r\n     */\r\n    getSpan(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Check to see if a given world block location is inside a\r\n     * BlockVolume\r\n     *\r\n     */\r\n    isInside(location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Move a BlockVolume by a specified amount\r\n     *\r\n     * @param delta\r\n     * Amount of blocks to move by\r\n     */\r\n    translate(delta: Vector3): void;\r\n}\r",
            "jsdoc": "/**\r\n * Base type for BlockVolumes.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "getBlockLocationIterator",
                "parameters": [],
                "returnType": "BlockLocationIterator",
                "accessibility": "public",
                "signature": "getBlockLocationIterator(): BlockLocationIterator"
              },
              {
                "name": "getCapacity",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getCapacity(): number"
              },
              {
                "name": "getMax",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "getMax(): Vector3"
              },
              {
                "name": "getMin",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "getMin(): Vector3"
              },
              {
                "name": "getSpan",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "getSpan(): Vector3"
              },
              {
                "name": "isInside",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isInside(location: Vector3): boolean"
              },
              {
                "name": "translate",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "translate(delta: Vector3): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockvolumebase",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ButtonPushAfterEvent",
            "name": "ButtonPushAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to a button push.\r ```typescript\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a button on cobblestone\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r     const eventLoc = buttonPushEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Button push event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
            "definition": "export class ButtonPushAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Optional source that triggered the button push.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to a button push.\r\n * @example buttonPushEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a button on cobblestone\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n *     const eventLoc = buttonPushEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Button push event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "source",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "buttonpushafterevent",
              "class"
            ],
            "examples": [
              {
                "title": "buttonPushEvent.ts",
                "code": "import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a button on cobblestone\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n    const eventLoc = buttonPushEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Button push event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ButtonPushAfterEventSignal",
            "name": "ButtonPushAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a button is\r pushed.\r ```typescript\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a button on cobblestone\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r     const eventLoc = buttonPushEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Button push event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
            "definition": "export class ButtonPushAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a button is pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ButtonPushAfterEvent) => void): (arg0: ButtonPushAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a button is\r\n     * pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ButtonPushAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a button is\r\n * pushed.\r\n * @example buttonPushEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a button on cobblestone\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n *     const eventLoc = buttonPushEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Button push event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "buttonpushaftereventsignal",
              "class"
            ],
            "examples": [
              {
                "title": "buttonPushEvent.ts",
                "code": "import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a button on cobblestone\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n    const eventLoc = buttonPushEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Button push event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Camera",
            "name": "Camera",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains methods relating to the active camera for the\r specified player.\r /",
            "definition": "export class Camera {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns whether the Camera is valid to access and use. A\r\n     * Camera is considered valid when the owning Player of the\r\n     * Camera is loaded and valid itself.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Clears the active camera for the specified player. Causes\r\n     * the specified players to end any in-progress camera\r\n     * perspectives, including any eased camera motions, and return\r\n     * to their normal perspective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    clear(): void;\r\n    /**\r\n     * @remarks\r\n     * Begins a camera fade transition. A fade transition is a\r\n     * full-screen color that fades-in, holds, and then fades-out.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fadeCameraOptions\r\n     * Additional options around camera fade operations.\r\n     * @throws This function can throw errors.\r\n     */\r\n    fade(fadeCameraOptions?: CameraFadeOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current active camera for the specified player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cameraPreset\r\n     * Identifier of a camera preset file defined within JSON.\r\n     * @param setOptions\r\n     * Additional options for the camera.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setCamera(\r\n        cameraPreset: string,\r\n        setOptions?:\r\n            | CameraFixedBoomOptions\r\n            | CameraSetFacingOptions\r\n            | CameraSetLocationOptions\r\n            | CameraSetPosOptions\r\n            | CameraSetRotOptions\r\n            | CameraTargetOptions,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current active camera for the specified player and\r\n     * resets the position and rotation to the values defined in\r\n     * the JSON.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cameraPreset\r\n     * Identifier of a camera preset file defined within JSON.\r\n     * @param easeOptions\r\n     * Options to ease the camera back to its original position and\r\n     * rotation.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setDefaultCamera(cameraPreset: string, easeOptions?: EaseOptions): void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains methods relating to the active camera for the\r\n * specified player.\r\n */\r",
            "properties": [
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "clear",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clear(): void"
              },
              {
                "name": "fade",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "fade(fadeCameraOptions?: CameraFadeOptions): void"
              },
              {
                "name": "setDefaultCamera",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setDefaultCamera(cameraPreset: string, easeOptions?: EaseOptions): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "camera",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ClientSystemInfo",
            "name": "ClientSystemInfo",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains the device information for a client instance.\r /",
            "definition": "export class ClientSystemInfo extends SystemInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The max render distance for the device in chunks.\r\n     *\r\n     */\r\n    readonly maxRenderDistance: number;\r\n    /**\r\n     * @remarks\r\n     * The platform type of the device.\r\n     *\r\n     */\r\n    readonly platformType: PlatformType;\r\n}\r",
            "jsdoc": "/**\r\n * Contains the device information for a client instance.\r\n */\r",
            "properties": [
              {
                "name": "maxRenderDistance",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "platformType",
                "type": "PlatformType",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "SystemInfo",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "clientsysteminfo",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CommandResult",
            "name": "CommandResult",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains return data on the result of a command execution.\r /",
            "definition": "export class CommandResult {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If the command operates against a number of entities,\r\n     * blocks, or items, this returns the number of successful\r\n     * applications of this command.\r\n     *\r\n     */\r\n    readonly successCount: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains return data on the result of a command execution.\r\n */\r",
            "properties": [
              {
                "name": "successCount",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "commandresult",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Component",
            "name": "Component",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Base class for downstream Component implementations.\r /",
            "definition": "export class Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns whether the component is valid. A component is\r\n     * considered valid if its owner is valid, in addition to any\r\n     * addition to any additional validation required by the\r\n     * component.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the component.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
            "jsdoc": "/**\r\n * Base class for downstream Component implementations.\r\n */\r",
            "properties": [
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "typeId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "component",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Container",
            "name": "Container",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a container that can hold sets of items. Used\r with entities such as Players, Chest Minecarts, Llamas, and\r more.\r ```typescript\r  function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const xLocation = targetLocation; // left chest location\r   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r    const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r     x: targetLocation.x + 4,\r     y: targetLocation.y,\r     z: targetLocation.z,\r   });\r    const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r    if (!xChestBlock || !xPlusTwoChestBlock) {\r     log(\"Could not retrieve chest blocks.\");\r     return;\r   }\r    xChestBlock.setType(MinecraftBlockTypes.Chest);\r   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r    const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r   const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r   const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r    const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r   const xChestContainer = xChestInventoryComponent.container;\r   const chestCartContainer = chestCartInventoryComp.container;\r    if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r     log(\"Could not retrieve chest containers.\");\r     return;\r   }\r    xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r     log(\"Expected apple in x+2 container slot index 0\", -1);\r   }\r    xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r     log(\"Expected emerald in x+2 container slot index 1\", -1);\r   }\r    if (xPlusTwoChestContainer.size !== 27) {\r     log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r   }\r    if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r     log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r   }\r    xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r    xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r    if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r     log(\"Expected apple in minecraft chest container slot index 0\", -1);\r   }\r    if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r     log(\"Expected emerald in x container slot index 0\", -1);\r   }\r    if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r     log(\"Expected cake in x+2 container slot index 1\", -1);\r   }\r }\r ```\r /",
            "definition": "export class Container {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Count of the slots in the container that are empty.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    readonly emptySlotsCount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether a container object (or the entity or block\r\n     * that this container is associated with) is still available\r\n     * for use in this context.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * The number of slots in this container. For example, a\r\n     * standard single-block chest has a size of 27. Note, a\r\n     * player's inventory container contains a total of 36 slots, 9\r\n     * hotbar slots plus 27 inventory slots.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    readonly size: number;\r\n    /**\r\n     * @remarks\r\n     * Adds an item to the container. The item is placed in the\r\n     * first available slot(s) and can be stacked with existing\r\n     * items of the same type. Note, use {@link Container.setItem}\r\n     * if you wish to set the item in a particular slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param itemStack\r\n     * The stack of items to add.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addItem(itemStack: ItemStack): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Clears all inventory items in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    clearAll(): void;\r\n    /**\r\n     * @remarks\r\n     * Attempts to find an item inside the container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    contains(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * Find the index of the first instance of an item inside the\r\n     * container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    find(itemStack: ItemStack): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Find the index of the last instance of an item inside the\r\n     * container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    findLast(itemStack: ItemStack): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Finds the index of the first empty slot inside the container\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    firstEmptySlot(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Finds the index of the first item inside the container\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    firstItem(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets an {@link ItemStack} of the item at the specified slot.\r\n     * If the slot is empty, returns `undefined`. This method does\r\n     * not change or clear the contents of the specified slot. To\r\n     * get a reference to a particular slot, see {@link\r\n     * Container.getSlot}.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to retrieve items from.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     * @example getFirstHotbarItem.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function getFirstHotbarItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const inventory = player.getComponent(EntityInventoryComponent.componentId) as EntityInventoryComponent;\r\n     *     if (inventory && inventory.container) {\r\n     *       const firstItem = inventory.container.getItem(0);\r\n     *\r\n     *       if (firstItem) {\r\n     *         log(\"First item in hotbar is: \" + firstItem.typeId);\r\n     *       }\r\n     *\r\n     *       return inventory.container.getItem(0);\r\n     *     }\r\n     *     return undefined;\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getItem(slot: number): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a container slot. This acts as a reference to a slot\r\n     * at the given index for this container.\r\n     *\r\n     * @param slot\r\n     * The index of the slot to return. This index must be within\r\n     * the bounds of the container.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     */\r\n    getSlot(slot: number): ContainerSlot;\r\n    /**\r\n     * @remarks\r\n     * Moves an item from one slot to another, potentially across\r\n     * containers.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fromSlot\r\n     * Zero-based index of the slot to transfer an item from, on\r\n     * this container.\r\n     * @param toSlot\r\n     * Zero-based index of the slot to transfer an item to, on\r\n     * `toContainer`.\r\n     * @param toContainer\r\n     * Target container to transfer to. Note this can be the same\r\n     * container as the source.\r\n     * @throws\r\n     * Throws if either this container or `toContainer` are invalid\r\n     * or if the `fromSlot` or `toSlot` indices out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     * @example moveBetweenContainers.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function moveBetweenContainers(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getAllPlayers();\r\n     *\r\n     *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     const fromPlayer = players[0];\r\n     *\r\n     *     const fromInventory = fromPlayer.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     const toInventory = chestCart.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *\r\n     *     if (fromInventory && toInventory && fromInventory.container && toInventory.container) {\r\n     *       fromInventory.container.moveItem(0, 0, toInventory.container);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    moveItem(fromSlot: number, toSlot: number, toContainer: Container): void;\r\n    /**\r\n     * @remarks\r\n     * Sets an item stack within a particular slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to set an item at.\r\n     * @param itemStack\r\n     * Stack of items to place within the specified slot. Setting\r\n     * `itemStack` to undefined will clear the slot.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    setItem(slot: number, itemStack?: ItemStack): void;\r\n    /**\r\n     * @remarks\r\n     * Swaps items between two different slots within containers.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to swap from this container.\r\n     * @param otherSlot\r\n     * Zero-based index of the slot to swap with.\r\n     * @param otherContainer\r\n     * Target container to swap with. Note this can be the same\r\n     * container as this source.\r\n     * @throws\r\n     * Throws if either this container or `otherContainer` are\r\n     * invalid or if the `slot` or `otherSlot` are out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): void;\r\n    /**\r\n     * @remarks\r\n     * Moves an item from one slot to another container, or to the\r\n     * first available slot in the same container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fromSlot\r\n     * Zero-based index of the slot to transfer an item from, on\r\n     * this container.\r\n     * @param toContainer\r\n     * Target container to transfer to. Note this can be the same\r\n     * container as the source.\r\n     * @returns\r\n     * An itemStack with the items that couldn't be transferred.\r\n     * Returns undefined if all items were transferred.\r\n     * @throws\r\n     * Throws if either this container or `toContainer` are invalid\r\n     * or if the `fromSlot` or `toSlot` indices out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     * @example transferBetweenContainers.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function transferBetweenContainers(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getAllPlayers();\r\n     *\r\n     *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     const fromPlayer = players[0];\r\n     *\r\n     *     const fromInventory = fromPlayer.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     const toInventory = chestCart.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *\r\n     *     if (fromInventory && toInventory && fromInventory.container && toInventory.container) {\r\n     *       fromInventory.container.transferItem(0, toInventory.container);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    transferItem(fromSlot: number, toContainer: Container): ItemStack | undefined;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a container that can hold sets of items. Used\r\n * with entities such as Players, Chest Minecarts, Llamas, and\r\n * more.\r\n * @example containers.ts\r\n * ```typescript\r\n * import { ItemStack, EntityInventoryComponent, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes, MinecraftItemTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const xLocation = targetLocation; // left chest location\r\n *   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r\n *\r\n *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n *     x: targetLocation.x + 4,\r\n *     y: targetLocation.y,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r\n *   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r\n *\r\n *   if (!xChestBlock || !xPlusTwoChestBlock) {\r\n *     log(\"Could not retrieve chest blocks.\");\r\n *     return;\r\n *   }\r\n *\r\n *   xChestBlock.setType(MinecraftBlockTypes.Chest);\r\n *   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r\n *\r\n *   const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *   const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *   const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r\n *\r\n *   const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r\n *   const xChestContainer = xChestInventoryComponent.container;\r\n *   const chestCartContainer = chestCartInventoryComp.container;\r\n *\r\n *   if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r\n *     log(\"Could not retrieve chest containers.\");\r\n *     return;\r\n *   }\r\n *\r\n *   xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n *   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n *     log(\"Expected apple in x+2 container slot index 0\", -1);\r\n *   }\r\n *\r\n *   xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r\n *   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r\n *     log(\"Expected emerald in x+2 container slot index 1\", -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.size !== 27) {\r\n *     log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r\n *     log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r\n *   }\r\n *\r\n *   xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r\n *\r\n *   xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r\n *   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r\n *\r\n *   if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n *     log(\"Expected apple in minecraft chest container slot index 0\", -1);\r\n *   }\r\n *\r\n *   if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r\n *     log(\"Expected emerald in x container slot index 0\", -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r\n *     log(\"Expected cake in x+2 container slot index 1\", -1);\r\n *   }\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "emptySlotsCount",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "size",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "addItem",
                "parameters": [],
                "returnType": "ItemStack | undefined",
                "accessibility": "public",
                "signature": "addItem(itemStack: ItemStack): ItemStack | undefined"
              },
              {
                "name": "clearAll",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearAll(): void"
              },
              {
                "name": "contains",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "contains(itemStack: ItemStack): boolean"
              },
              {
                "name": "find",
                "parameters": [],
                "returnType": "number | undefined",
                "accessibility": "public",
                "signature": "find(itemStack: ItemStack): number | undefined"
              },
              {
                "name": "findLast",
                "parameters": [],
                "returnType": "number | undefined",
                "accessibility": "public",
                "signature": "findLast(itemStack: ItemStack): number | undefined"
              },
              {
                "name": "firstEmptySlot",
                "parameters": [],
                "returnType": "number | undefined",
                "accessibility": "public",
                "signature": "firstEmptySlot(): number | undefined"
              },
              {
                "name": "firstItem",
                "parameters": [],
                "returnType": "number | undefined",
                "accessibility": "public",
                "signature": "firstItem(): number | undefined"
              },
              {
                "name": "getItem",
                "parameters": [],
                "returnType": "ItemStack | undefined",
                "accessibility": "public",
                "signature": "getItem(slot: number): ItemStack | undefined"
              },
              {
                "name": "getSlot",
                "parameters": [],
                "returnType": "ContainerSlot",
                "accessibility": "public",
                "signature": "getSlot(slot: number): ContainerSlot"
              },
              {
                "name": "moveItem",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "moveItem(fromSlot: number, toSlot: number, toContainer: Container): void"
              },
              {
                "name": "setItem",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setItem(slot: number, itemStack?: ItemStack): void"
              },
              {
                "name": "swapItems",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "swapItems(slot: number, otherSlot: number, otherContainer: Container): void"
              },
              {
                "name": "transferItem",
                "parameters": [],
                "returnType": "ItemStack | undefined",
                "accessibility": "public",
                "signature": "transferItem(fromSlot: number, toContainer: Container): ItemStack | undefined"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "container",
              "class"
            ],
            "examples": [
              {
                "title": "containers.ts",
                "code": "import { ItemStack, EntityInventoryComponent, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes, MinecraftItemTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const xLocation = targetLocation; // left chest location\r\n  const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r\n\n  const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n    x: targetLocation.x + 4,\r\n    y: targetLocation.y,\r\n    z: targetLocation.z,\r\n  });\r\n\n  const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r\n  const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r\n\n  if (!xChestBlock || !xPlusTwoChestBlock) {\r\n    log(\"Could not retrieve chest blocks.\");\r\n    return;\r\n  }\r\n\n  xChestBlock.setType(MinecraftBlockTypes.Chest);\r\n  xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r\n\n  const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n  const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n  const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r\n\n  const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r\n  const xChestContainer = xChestInventoryComponent.container;\r\n  const chestCartContainer = chestCartInventoryComp.container;\r\n\n  if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r\n    log(\"Could not retrieve chest containers.\");\r\n    return;\r\n  }\r\n\n  xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n  if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n    log(\"Expected apple in x+2 container slot index 0\", -1);\r\n  }\r\n\n  xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r\n  if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r\n    log(\"Expected emerald in x+2 container slot index 1\", -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.size !== 27) {\r\n    log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r\n    log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r\n  }\r\n\n  xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r\n\n  xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r\n  xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r\n\n  if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n    log(\"Expected apple in minecraft chest container slot index 0\", -1);\r\n  }\r\n\n  if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r\n    log(\"Expected emerald in x container slot index 0\", -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r\n    log(\"Expected cake in x+2 container slot index 1\", -1);\r\n  }\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ContainerSlot",
            "name": "ContainerSlot",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a slot within a broader container (e.g., entity\r inventory.)\r /",
            "definition": "export class ContainerSlot {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Number of the items in the stack. Valid values range between\r\n     * 1-255. The provided value will be clamped to the item's\r\n     * maximum stack size.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the value is outside the range of 1-255.\r\n     */\r\n    amount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item is stackable. An item is considered\r\n     * stackable if the item's maximum stack size is greater than 1\r\n     * and the item does not contain any custom data or properties.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly isStackable: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the ContainerSlot is valid. The container\r\n     * slot is valid if the container exists and is loaded, and the\r\n     * slot index is valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets whether the item is kept on death.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     */\r\n    keepOnDeath: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets the item's lock mode. The default value is\r\n     * `ItemLockMode.none`.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     */\r\n    lockMode: ItemLockMode;\r\n    /**\r\n     * @remarks\r\n     * The maximum stack size. This value varies depending on the\r\n     * type of item. For example, torches have a maximum stack size\r\n     * of 64, while eggs have a maximum stack size of 16.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly maxAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Given name of this stack of items. The name tag is displayed\r\n     * when hovering over the item. Setting the name tag to an\r\n     * empty string or `undefined` will remove the name tag.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * the length exceeds 255 characters.\r\n     */\r\n    nameTag?: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the item.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly 'type': ItemType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of items for the stack. If a\r\n     * namespace is not specified, 'minecraft:' is assumed.\r\n     * Examples include 'wheat' or 'apple'.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * item stack.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item within this container slot can be\r\n     * destroyed.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getCanDestroy(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns if the item in this container slot can be placed on.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getCanPlaceOn(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this item stack.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Creates an exact copy of the item stack, including any\r\n     * custom data or properties.\r\n     *\r\n     * @returns\r\n     * Returns a copy of the item in the slot. Returns undefined if\r\n     * the slot is empty.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getItem(): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * @returns\r\n     * An array of lore strings. If the item does not have lore,\r\n     * returns an empty array.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getLore(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns all tags for the item in the slot.\r\n     *\r\n     * @returns\r\n     * Returns all tags for the item in the slot. Return an empty\r\n     * array if the the slot is empty.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if this slot has an item.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    hasItem(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item in the slot slot has the given tag.\r\n     *\r\n     * @param tag\r\n     * The item tag.\r\n     * @returns\r\n     * Returns false when the slot is empty or the item in the slot\r\n     * does not have the given tag.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`. This is determined by comparing the item\r\n     * type and any custom data and properties associated with the\r\n     * item stacks. The amount of each item stack is not taken into\r\n     * consideration.\r\n     *\r\n     * @param itemStack\r\n     * The ItemStack that is being compared.\r\n     * @returns\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    isStackableWith(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can break in Adventure\r\n     * mode. The block names are displayed in the item's tooltip.\r\n     * Setting the value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * The list of blocks, given by their identifiers.\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * any of the provided block identifiers are invalid.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setCanDestroy(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can be placed on in\r\n     * Adventure mode. This is only applicable to block items. The\r\n     * block names are displayed in the item's tooltip. Setting the\r\n     * value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * The list of blocks, given by their identifiers.\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * any of the provided block identifiers are invalid.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setCanPlaceOn(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the given ItemStack in the slot, replacing any existing\r\n     * item.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param itemStack\r\n     * The ItemStack to be placed in the slot.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setItem(itemStack?: ItemStack): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param loreList\r\n     * A list of lore strings. Setting this argument to undefined\r\n     * will clear the lore.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setLore(loreList?: string[]): void;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a slot within a broader container (e.g., entity\r\n * inventory.)\r\n */\r",
            "properties": [
              {
                "name": "isStackable",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "maxAmount",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "typeId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "clearDynamicProperties",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearDynamicProperties(): void"
              },
              {
                "name": "getCanDestroy",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getCanDestroy(): string[]"
              },
              {
                "name": "getCanPlaceOn",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getCanPlaceOn(): string[]"
              },
              {
                "name": "getDynamicProperty",
                "parameters": [],
                "returnType": "boolean | number | string | Vector3 | undefined",
                "accessibility": "public",
                "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
              },
              {
                "name": "getDynamicPropertyIds",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getDynamicPropertyIds(): string[]"
              },
              {
                "name": "getDynamicPropertyTotalByteCount",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getDynamicPropertyTotalByteCount(): number"
              },
              {
                "name": "getItem",
                "parameters": [],
                "returnType": "ItemStack | undefined",
                "accessibility": "public",
                "signature": "getItem(): ItemStack | undefined"
              },
              {
                "name": "getLore",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getLore(): string[]"
              },
              {
                "name": "getTags",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getTags(): string[]"
              },
              {
                "name": "hasItem",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasItem(): boolean"
              },
              {
                "name": "hasTag",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasTag(tag: string): boolean"
              },
              {
                "name": "isStackableWith",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isStackableWith(itemStack: ItemStack): boolean"
              },
              {
                "name": "setCanDestroy",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setCanDestroy(blockIdentifiers?: string[]): void"
              },
              {
                "name": "setCanPlaceOn",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setCanPlaceOn(blockIdentifiers?: string[]): void"
              },
              {
                "name": "setDynamicProperty",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
              },
              {
                "name": "setItem",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setItem(itemStack?: ItemStack): void"
              },
              {
                "name": "setLore",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setLore(loreList?: string[]): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "containerslot",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandOrigin",
            "name": "CustomCommandOrigin",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Details about the origins of the command.\r /",
            "definition": "export class CustomCommandOrigin {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If this command was initiated via an NPC, returns the entity\r\n     * that initiated the NPC dialogue.\r\n     *\r\n     */\r\n    readonly initiator?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Source block if this command was triggered via a block\r\n     * (e.g., a commandblock.)\r\n     *\r\n     */\r\n    readonly sourceBlock?: Block;\r\n    /**\r\n     * @remarks\r\n     * Source entity if this command was triggered by an entity\r\n     * (e.g., a NPC).\r\n     *\r\n     */\r\n    readonly sourceEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Returns the type of source that fired this command.\r\n     *\r\n     */\r\n    readonly sourceType: CustomCommandSource;\r\n}\r",
            "jsdoc": "/**\r\n * Details about the origins of the command.\r\n */\r",
            "properties": [
              {
                "name": "sourceType",
                "type": "CustomCommandSource",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommandorigin",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandRegistry",
            "name": "CustomCommandRegistry",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Provides the functionality for registering custom commands.\r /",
            "definition": "export class CustomCommandRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a custom command that when executed triggers a\r\n     * script callback.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * The callback triggered when the command executes.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomCommandError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCommand(\r\n        customCommand: CustomCommand,\r\n        callback: (origin: CustomCommandOrigin, ...args: any[]) => CustomCommandResult | undefined,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Registers a custom command enum.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomCommandError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerEnum(name: string, values: string[]): void;\r\n}\r",
            "jsdoc": "/**\r\n * Provides the functionality for registering custom commands.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "registerEnum",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "registerEnum(name: string, values: string[]): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommandregistry",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomComponentParameters",
            "name": "CustomComponentParameters",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains the custom component's JSON parameters\r /",
            "definition": "export class CustomComponentParameters {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * JSON object containing the parameters from the custom\r\n     * component definition\r\n     *\r\n     */\r\n    readonly params: unknown;\r\n}\r",
            "jsdoc": "/**\r\n * Contains the custom component's JSON parameters\r\n */\r",
            "properties": [
              {
                "name": "params",
                "type": "unknown",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcomponentparameters",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.DataDrivenEntityTriggerAfterEvent",
            "name": "DataDrivenEntityTriggerAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to firing of a data driven\r entity event - for example, the minecraft:ageable_grow_up\r event on a chicken.\r /",
            "definition": "export class DataDrivenEntityTriggerAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that the event triggered on.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Name of the data driven event being triggered.\r\n     *\r\n     */\r\n    readonly eventId: string;\r\n    /**\r\n     * @remarks\r\n     * An updateable list of modifications to component state that\r\n     * are the effect of this triggered event.\r\n     *\r\n     */\r\n    getModifiers(): DefinitionModifier[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to firing of a data driven\r\n * entity event - for example, the minecraft:ageable_grow_up\r\n * event on a chicken.\r\n */\r",
            "properties": [
              {
                "name": "entity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "eventId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getModifiers",
                "parameters": [],
                "returnType": "DefinitionModifier[]",
                "accessibility": "public",
                "signature": "getModifiers(): DefinitionModifier[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "datadrivenentitytriggerafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.DataDrivenEntityTriggerAfterEventSignal",
            "name": "DataDrivenEntityTriggerAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains event registration related to firing of a data\r driven entity event - for example, the\r minecraft:ageable_grow_up event on a chicken.\r /",
            "definition": "export class DataDrivenEntityTriggerAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a data driven\r\n     * entity event is triggered.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: DataDrivenEntityTriggerAfterEvent) => void,\r\n        options?: EntityDataDrivenTriggerEventOptions,\r\n    ): (arg0: DataDrivenEntityTriggerAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback that will be called after a data driven\r\n     * entity event is triggered.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: DataDrivenEntityTriggerAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains event registration related to firing of a data\r\n * driven entity event - for example, the\r\n * minecraft:ageable_grow_up event on a chicken.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "datadrivenentitytriggeraftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Dimension",
            "name": "Dimension",
            "type": "class",
            "module": "@minecraft/server",
            "description": "A class that represents a particular dimension (e.g., The\r End) within a world.\r /",
            "definition": "export class Dimension {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Height range of the dimension.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly heightRange: minecraftcommon.NumberRange;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the dimension.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of a dimension's name used by\r\n     * language files.\r\n     *\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Searches the block volume for a block that satisfies the\r\n     * block filter.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks that will be checked.\r\n     * @param filter\r\n     * Block filter that will be checked against each block in the\r\n     * volume.\r\n     * @param allowUnloadedChunks\r\n     * If set to true will suppress the UnloadedChunksError if some\r\n     * or all of the block volume is outside of the loaded chunks.\r\n     * Will only check the block locations that are within the\r\n     * loaded chunks in the volume.\r\n     * Defaults to: false\r\n     * @returns\r\n     * Returns true if at least one block in the volume satisfies\r\n     * the filter, false otherwise.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    containsBlock(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Creates an explosion at the specified location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location of the explosion.\r\n     * @param radius\r\n     * Radius, in blocks, of the explosion to create.\r\n     * @param explosionOptions\r\n     * Additional configurable options for the explosion.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example createExplosion.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function createExplosion(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   log(\"Creating an explosion of radius 10.\");\r\n     *   targetLocation.dimension.createExplosion(targetLocation, 10);\r\n     * }\r\n     * ```\r\n     * @example createNoBlockExplosion.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function createNoBlockExplosion(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r\n     *\r\n     *   log(\"Creating an explosion of radius 15 that does not break blocks.\");\r\n     *   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r\n     * }\r\n     * ```\r\n     * @example createExplosions.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r\n     *\r\n     *   log(\"Creating an explosion of radius 15 that causes fire.\");\r\n     *   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r\n     *\r\n     *   const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r\n     *\r\n     *   log(\"Creating an explosion of radius 10 that can go underwater.\");\r\n     *   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r\n     * }\r\n     * ```\r\n     */\r\n    createExplosion(location: Vector3, radius: number, explosionOptions?: ExplosionOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Fills an area of blocks with a specific block type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks to be filled.\r\n     * @param block\r\n     * Type of block to fill the volume with.\r\n     * @param options\r\n     * A set of additional options, such as a block filter which\r\n     * can be used to include / exclude specific blocks in the\r\n     * fill.\r\n     * @returns\r\n     * Returns a ListBlockVolume which contains all the blocks that\r\n     * were placed.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    fillBlocks(\r\n        volume: BlockVolumeBase,\r\n        block: BlockPermutation | BlockType | string,\r\n        options?: BlockFillOptions,\r\n    ): ListBlockVolume;\r\n    /**\r\n     * @remarks\r\n     * Returns a block instance at the given location.\r\n     *\r\n     * @param location\r\n     * The location at which to return a block.\r\n     * @returns\r\n     * Block at the specified location, or 'undefined' if asking\r\n     * for a block at an unloaded chunk.\r\n     * @throws\r\n     * PositionInUnloadedChunkError: Exception thrown when trying\r\n     * to interact with a Block object that isn't in a loaded and\r\n     * ticking chunk anymore\r\n     *\r\n     * PositionOutOfWorldBoundariesError: Exception thrown when\r\n     * trying to interact with a position outside of dimension\r\n     * height range\r\n     *\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getBlock(location: Vector3): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block found above a given block location\r\n     * based on the given options (by default will find the first\r\n     * solid block above).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to retrieve the block above from.\r\n     * @param options\r\n     * The options to decide if a block is a valid result.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockAbove(location: Vector3, options?: BlockRaycastOptions): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block found below a given block location\r\n     * based on the given options (by default will find the first\r\n     * solid block below).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to retrieve the block below from.\r\n     * @param options\r\n     * The options to decide if a block is a valid result.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockBelow(location: Vector3, options?: BlockRaycastOptions): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block that intersects with a vector emanating\r\n     * from a location.\r\n     *\r\n     * @param location\r\n     * Location from where to initiate the ray check.\r\n     * @param direction\r\n     * Vector direction to cast the ray.\r\n     * @param options\r\n     * Additional options for processing this raycast query.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockFromRay(location: Vector3, direction: Vector3, options?: BlockRaycastOptions): BlockRaycastHit | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all the blocks in a volume that satisfy the filter.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks that will be checked.\r\n     * @param filter\r\n     * Block filter that will be checked against each block in the\r\n     * volume.\r\n     * @param allowUnloadedChunks\r\n     * If set to true will suppress the UnloadedChunksError if some\r\n     * or all of the block volume is outside of the loaded chunks.\r\n     * Will only check the block locations that are within the\r\n     * loaded chunks in the volume.\r\n     * Defaults to: false\r\n     * @returns\r\n     * Returns the ListBlockVolume that contains all the block\r\n     * locations that satisfied the block filter.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    getBlocks(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): ListBlockVolume;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of entities based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * entities returned.\r\n     * @returns\r\n     * An entity array.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     * @example bounceSkeletons.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     type: \"skeleton\",\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.applyKnockback(0, 0, 0, 1);\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example testThatEntityIsFeatherItem.ts\r\n     * ```typescript\r\n     * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function testThatEntityIsFeatherItem(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const items = targetLocation.dimension.getEntities({\r\n     *     location: targetLocation,\r\n     *     maxDistance: 20,\r\n     *   });\r\n     *\r\n     *   for (const item of items) {\r\n     *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n     *\r\n     *     if (itemComp) {\r\n     *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n     *         log(\"Success! Found a feather\", 1);\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getEntities(options?: EntityQueryOptions): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of entities at a particular location.\r\n     *\r\n     * @param location\r\n     * The location at which to return entities.\r\n     * @returns\r\n     * Zero or more entities at the specified location.\r\n     */\r\n    getEntitiesAtBlockLocation(location: Vector3): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Gets entities that intersect with a specified vector\r\n     * emanating from a location.\r\n     *\r\n     * @param options\r\n     * Additional options for processing this raycast query.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    getEntitiesFromRay(location: Vector3, direction: Vector3, options?: EntityRaycastOptions): EntityRaycastHit[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of players based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * players returned.\r\n     * @returns\r\n     * A player array.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getPlayers(options?: EntityQueryOptions): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the highest block at the given XZ location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param locationXZ\r\n     * Location to retrieve the topmost block for.\r\n     * @param minHeight\r\n     * The Y height to begin the search from. Defaults to the\r\n     * maximum dimension height.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTopmostBlock(locationXZ: VectorXZ, minHeight?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Places the given feature into the dimension at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param featureName\r\n     * The string identifier for the feature.\r\n     * @param location\r\n     * Location to place the feature.\r\n     * @param shouldThrow\r\n     * Specifies if the function call will throw an error if the\r\n     * feature could not be placed.\r\n     * Note: The function call will always throw an error if using\r\n     * an unknown feature name or trying to place in a unloaded\r\n     * chunk.\r\n     * Defaults to: false\r\n     * @throws\r\n     * An error will be thrown if the feature name is invalid.\r\n     * An error will be thrown if the location is in an unloaded\r\n     * chunk.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     */\r\n    placeFeature(featureName: string, location: Vector3, shouldThrow?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Places the given feature rule into the dimension at the\r\n     * specified location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param featureRuleName\r\n     * The string identifier for the feature rule.\r\n     * @param location\r\n     * Location to place the feature rule.\r\n     * @throws\r\n     * An error will be thrown if the feature rule name is invalid.\r\n     * An error will be thrown if the location is in an unloaded\r\n     * chunk.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     */\r\n    placeFeatureRule(featureRuleName: string, location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Plays a sound for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param soundId\r\n     * Identifier of the sound.\r\n     * @param location\r\n     * Location of the sound.\r\n     * @param soundOptions\r\n     * Additional options for configuring additional effects for\r\n     * the sound.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     * An error will be thrown if pitch is less than 0.01.\r\n     * An error will be thrown if volume is less than 0.0.\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     */\r\n    playSound(soundId: string, location: Vector3, soundOptions?: WorldSoundOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Runs a command synchronously using the context of the\r\n     * broader dimenion.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param commandString\r\n     * Command to run. Note that command strings should not start\r\n     * with slash.\r\n     * @returns\r\n     * Returns a command result with a count of successful values\r\n     * from the command.\r\n     * @throws\r\n     * Throws an exception if the command fails due to incorrect\r\n     * parameters or command syntax, or in erroneous cases for the\r\n     * command. Note that in many cases, if the command does not\r\n     * operate (e.g., a target selector found no matches), this\r\n     * method will not throw an exception.\r\n     *\r\n     * {@link CommandError}\r\n     */\r\n    runCommand(commandString: string): CommandResult;\r\n    /**\r\n     * @remarks\r\n     * Sets a block in the world using a BlockPermutation.\r\n     * BlockPermutations are blocks with a particular state.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location within the dimension to set the block.\r\n     * @param permutation\r\n     * The block permutation to set.\r\n     * @throws\r\n     * Throws if the location is within an unloaded chunk or\r\n     * outside of the world bounds.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setBlockPermutation(location: Vector3, permutation: BlockPermutation): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a block at a given location within the dimension.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location within the dimension to set the block.\r\n     * @param blockType\r\n     * The type of block to set. This can be either a string\r\n     * identifier or a BlockType. The default block permutation is\r\n     * used.\r\n     * @throws\r\n     * Throws if the location is within an unloaded chunk or\r\n     * outside of the world bounds.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setBlockType(location: Vector3, blockType: BlockType | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current weather within the dimension\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param weatherType\r\n     * Set the type of weather to apply.\r\n     * @param duration\r\n     * Sets the duration of the weather (in ticks). If no duration\r\n     * is provided, the duration will be set to a random duration\r\n     * between 300 and 900 seconds.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setWeather(weatherType: WeatherType, duration?: number): void;\r\n    /**\r\n     * @remarks\r\n     * Creates a new entity (e.g., a mob) at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * Identifier of the type of entity to spawn. If no namespace\r\n     * is specified, 'minecraft:' is assumed.\r\n     * @param location\r\n     * The location at which to create the entity.\r\n     * @returns\r\n     * Newly created entity at the specified location.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link EntitySpawnError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnAdultHorse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from '@minecraft/server';\r\n     * import { Vector3Utils } from '@minecraft/math';\r\n     *\r\n     * function spawnAdultHorse(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *     log('Create a horse and triggering the ageable_grow_up event, ensuring the horse is created as an adult');\r\n     *     targetLocation.dimension.spawnEntity(\r\n     *         'minecraft:horse<minecraft:ageable_grow_up>',\r\n     *         Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n     *     );\r\n     * }\r\n     * ```\r\n     * @example quickFoxLazyDog.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes, MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function quickFoxLazyDog(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const fox = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Fox, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *\r\n     *   fox.addEffect(MinecraftEffectTypes.Speed, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   log(\"Created a fox.\");\r\n     *\r\n     *   const wolf = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Wolf, {\r\n     *     x: targetLocation.x + 4,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *   wolf.addEffect(MinecraftEffectTypes.Slowness, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   wolf.isSneaking = true;\r\n     *   log(\"Created a sneaking wolf.\", 1);\r\n     * }\r\n     * ```\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function triggerEvent(targetLocation: DimensionLocation) {\r\n     *   const creeper = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Creeper, targetLocation);\r\n     *\r\n     *   creeper.triggerEvent(\"minecraft:start_exploding_forced\");\r\n     * }\r\n     * ```\r\n     */\r\n    spawnEntity(identifier: EntityType | string, location: Vector3, options?: SpawnEntityOptions): Entity;\r\n    /**\r\n     * @remarks\r\n     * Creates a new item stack as an entity at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location at which to create the item stack.\r\n     * @returns\r\n     * Newly created item stack entity at the specified location.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example itemStacks.ts\r\n     * ```typescript\r\n     * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n     *   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n     *   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n     *\r\n     *   const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n     *   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n     *   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n     *\r\n     *   log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n     *\r\n     *   log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n     *\r\n     *   log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n     * }\r\n     * ```\r\n     * @example spawnFeatherItem.ts\r\n     * ```typescript\r\n     * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n     *\r\n     *   targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n     *   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n     * }\r\n     * ```\r\n     */\r\n    spawnItem(itemStack: ItemStack, location: Vector3): Entity;\r\n    /**\r\n     * @remarks\r\n     * Creates a new particle emitter at a specified location in\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectName\r\n     * Identifier of the particle to create.\r\n     * @param location\r\n     * The location at which to create the particle emitter.\r\n     * @param molangVariables\r\n     * A set of optional, customizable variables that can be\r\n     * adjusted for this particle.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnParticle.ts\r\n     * ```typescript\r\n     * import { MolangVariableMap, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function spawnParticle(targetLocation: DimensionLocation) {\r\n     *   for (let i = 0; i < 100; i++) {\r\n     *     const molang = new MolangVariableMap();\r\n     *\r\n     *     molang.setColorRGB(\"variable.color\", { red: Math.random(), green: Math.random(), blue: Math.random() });\r\n     *\r\n     *     const newLocation = {\r\n     *       x: targetLocation.x + Math.floor(Math.random() * 8) - 4,\r\n     *       y: targetLocation.y + Math.floor(Math.random() * 8) - 4,\r\n     *       z: targetLocation.z + Math.floor(Math.random() * 8) - 4,\r\n     *     };\r\n     *     targetLocation.dimension.spawnParticle(\"minecraft:colored_flame_particle\", newLocation, molang);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void;\r\n}\r",
            "jsdoc": "/**\r\n * A class that represents a particular dimension (e.g., The\r\n * End) within a world.\r\n */\r",
            "properties": [
              {
                "name": "heightRange",
                "type": "minecraftcommon.NumberRange",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "localizationKey",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "containsBlock",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "containsBlock(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): boolean"
              },
              {
                "name": "createExplosion",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "createExplosion(location: Vector3, radius: number, explosionOptions?: ExplosionOptions): boolean"
              },
              {
                "name": "getBlock",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "getBlock(location: Vector3): Block | undefined"
              },
              {
                "name": "getBlockAbove",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "getBlockAbove(location: Vector3, options?: BlockRaycastOptions): Block | undefined"
              },
              {
                "name": "getBlockBelow",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "getBlockBelow(location: Vector3, options?: BlockRaycastOptions): Block | undefined"
              },
              {
                "name": "getBlockFromRay",
                "parameters": [],
                "returnType": "BlockRaycastHit | undefined",
                "accessibility": "public",
                "signature": "getBlockFromRay(location: Vector3, direction: Vector3, options?: BlockRaycastOptions): BlockRaycastHit | undefined"
              },
              {
                "name": "getBlocks",
                "parameters": [],
                "returnType": "ListBlockVolume",
                "accessibility": "public",
                "signature": "getBlocks(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): ListBlockVolume"
              },
              {
                "name": "getEntities",
                "parameters": [],
                "returnType": "Entity[]",
                "accessibility": "public",
                "signature": "getEntities(options?: EntityQueryOptions): Entity[]"
              },
              {
                "name": "getEntitiesAtBlockLocation",
                "parameters": [],
                "returnType": "Entity[]",
                "accessibility": "public",
                "signature": "getEntitiesAtBlockLocation(location: Vector3): Entity[]"
              },
              {
                "name": "getEntitiesFromRay",
                "parameters": [],
                "returnType": "EntityRaycastHit[]",
                "accessibility": "public",
                "signature": "getEntitiesFromRay(location: Vector3, direction: Vector3, options?: EntityRaycastOptions): EntityRaycastHit[]"
              },
              {
                "name": "getPlayers",
                "parameters": [],
                "returnType": "Player[]",
                "accessibility": "public",
                "signature": "getPlayers(options?: EntityQueryOptions): Player[]"
              },
              {
                "name": "getTopmostBlock",
                "parameters": [],
                "returnType": "Block | undefined",
                "accessibility": "public",
                "signature": "getTopmostBlock(locationXZ: VectorXZ, minHeight?: number): Block | undefined"
              },
              {
                "name": "placeFeature",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "placeFeature(featureName: string, location: Vector3, shouldThrow?: boolean): boolean"
              },
              {
                "name": "placeFeatureRule",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "placeFeatureRule(featureRuleName: string, location: Vector3): boolean"
              },
              {
                "name": "playSound",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "playSound(soundId: string, location: Vector3, soundOptions?: WorldSoundOptions): void"
              },
              {
                "name": "runCommand",
                "parameters": [],
                "returnType": "CommandResult",
                "accessibility": "public",
                "signature": "runCommand(commandString: string): CommandResult"
              },
              {
                "name": "setBlockPermutation",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setBlockPermutation(location: Vector3, permutation: BlockPermutation): void"
              },
              {
                "name": "setBlockType",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setBlockType(location: Vector3, blockType: BlockType | string): void"
              },
              {
                "name": "setWeather",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setWeather(weatherType: WeatherType, duration?: number): void"
              },
              {
                "name": "spawnEntity",
                "parameters": [],
                "returnType": "Entity",
                "accessibility": "public",
                "signature": "spawnEntity(identifier: EntityType | string, location: Vector3, options?: SpawnEntityOptions): Entity"
              },
              {
                "name": "spawnItem",
                "parameters": [],
                "returnType": "Entity",
                "accessibility": "public",
                "signature": "spawnItem(itemStack: ItemStack, location: Vector3): Entity"
              },
              {
                "name": "spawnParticle",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "dimension",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.DimensionType",
            "name": "DimensionType",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a type of dimension.\r /",
            "definition": "export class DimensionType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of the dimension type.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a type of dimension.\r\n */\r",
            "properties": [
              {
                "name": "typeId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "dimensiontype",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.DimensionTypes",
            "name": "DimensionTypes",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Used for accessing all available dimension types.\r /",
            "definition": "export class DimensionTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves a dimension type using a string-based identifier.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    static get(dimensionTypeId: string): DimensionType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves an array of all dimension types.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    static getAll(): DimensionType[];\r\n}\r",
            "jsdoc": "/**\r\n * Used for accessing all available dimension types.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "DimensionType | undefined",
                "accessibility": "public",
                "signature": "get(dimensionTypeId: string): DimensionType | undefined"
              },
              {
                "name": "getAll",
                "parameters": [],
                "returnType": "DimensionType[]",
                "accessibility": "public",
                "signature": "getAll(): DimensionType[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "dimensiontypes",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Effect",
            "name": "Effect",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents an effect - like poison - that has been added to\r an Entity.\r /",
            "definition": "export class Effect {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Gets an amplifier that may have been applied to this effect.\r\n     * Sample values range typically from 0 to 4. Example: The\r\n     * effect 'Jump Boost II' will have an amplifier value of 1.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly amplifier: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the player-friendly name of this effect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Gets the entire specified duration, in ticks, of this\r\n     * effect. There are 20 ticks per second. Use {@link\r\n     * TicksPerSecond} constant to convert between ticks and\r\n     * seconds.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether an effect instance is available for use in\r\n     * this context.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets the type id of this effect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly typeId: string;\r\n}\r",
            "jsdoc": "/**\r\n * Represents an effect - like poison - that has been added to\r\n * an Entity.\r\n */\r",
            "properties": [
              {
                "name": "amplifier",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "displayName",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "duration",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "typeId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "effect",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EffectAddAfterEvent",
            "name": "EffectAddAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to an effect - like\r poison - being added to an entity.\r /",
            "definition": "export class EffectAddAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Additional properties and details of the effect.\r\n     *\r\n     */\r\n    readonly effect: Effect;\r\n    /**\r\n     * @remarks\r\n     * Entity that the effect is being added to.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to an effect - like\r\n * poison - being added to an entity.\r\n */\r",
            "properties": [
              {
                "name": "effect",
                "type": "Effect",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "effectaddafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EffectAddAfterEventSignal",
            "name": "EffectAddAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when an effect is\r added to an entity.\r /",
            "definition": "export class EffectAddAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EffectAddAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EffectAddAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EffectAddAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when an effect is\r\n * added to an entity.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "effectaddaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EffectAddBeforeEvent",
            "name": "EffectAddBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to an effect - like\r poison - being added to an entity.\r /",
            "definition": "export class EffectAddBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * When set to true will cancel the event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Effect duration.\r\n     *\r\n     */\r\n    duration: number;\r\n    /**\r\n     * @remarks\r\n     * The type of the effect that is being added.\r\n     *\r\n     */\r\n    readonly effectType: string;\r\n    /**\r\n     * @remarks\r\n     * Entity that the effect is being added to.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to an effect - like\r\n * poison - being added to an entity.\r\n */\r",
            "properties": [
              {
                "name": "effectType",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "effectaddbeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EffectAddBeforeEventSignal",
            "name": "EffectAddBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when an effect is\r added to an entity.\r /",
            "definition": "export class EffectAddBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: EffectAddBeforeEvent) => void): (arg0: EffectAddBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EffectAddBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when an effect is\r\n * added to an entity.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "effectaddbeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EffectType",
            "name": "EffectType",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a type of effect - like poison - that can be\r applied to an entity.\r /",
            "definition": "export class EffectType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier name of this effect type.\r\n     *\r\n     * @returns\r\n     * Identifier of the effect type.\r\n     */\r\n    getName(): string;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a type of effect - like poison - that can be\r\n * applied to an entity.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "getName",
                "parameters": [],
                "returnType": "string",
                "accessibility": "public",
                "signature": "getName(): string"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "effecttype",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EffectTypes",
            "name": "EffectTypes",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a type of effect - like poison - that can be\r applied to an entity.\r /",
            "definition": "export class EffectTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Effect type for the given identifier.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The identifier for the effect.\r\n     * @returns\r\n     * Effect type for the given identifier or undefined if the\r\n     * effect does not exist.\r\n     */\r\n    static get(identifier: string): EffectType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all effects.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * A list of all effects.\r\n     */\r\n    static getAll(): EffectType[];\r\n}\r",
            "jsdoc": "/**\r\n * Represents a type of effect - like poison - that can be\r\n * applied to an entity.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "EffectType | undefined",
                "accessibility": "public",
                "signature": "get(identifier: string): EffectType | undefined"
              },
              {
                "name": "getAll",
                "parameters": [],
                "returnType": "EffectType[]",
                "accessibility": "public",
                "signature": "getAll(): EffectType[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "effecttypes",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EnchantmentType",
            "name": "EnchantmentType",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information on a type of enchantment.\r /",
            "definition": "export class EnchantmentType {\n    /**\r\n     * @remarks\r\n     * The name of the enchantment type.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * The maximum level this type of enchantment can have.\r\n     *\r\n     */\r\n    readonly maxLevel: number;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    constructor(enchantmentType: string);\r\n}\r",
            "jsdoc": "/**\r\n * Contains information on a type of enchantment.\r\n */\r",
            "properties": [
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "maxLevel",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "enchantmenttype",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EnchantmentTypes",
            "name": "EnchantmentTypes",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains a catalog of Minecraft Enchantment Types that are\r available in this world.\r /",
            "definition": "export class EnchantmentTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves an enchantment with the specified identifier.\r\n     *\r\n     * @param enchantmentId\r\n     * Identifier of the enchantment.  For example,\r\n     * \"minecraft:flame\".\r\n     * @returns\r\n     * If available, returns an EnchantmentType object that\r\n     * represents the specified enchantment.\r\n     */\r\n    static get(enchantmentId: string): EnchantmentType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of all available enchantment types.\r\n     *\r\n     */\r\n    static getAll(): EnchantmentType[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains a catalog of Minecraft Enchantment Types that are\r\n * available in this world.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "EnchantmentType | undefined",
                "accessibility": "public",
                "signature": "get(enchantmentId: string): EnchantmentType | undefined"
              },
              {
                "name": "getAll",
                "parameters": [],
                "returnType": "EnchantmentType[]",
                "accessibility": "public",
                "signature": "getAll(): EnchantmentType[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "enchantmenttypes",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Entity",
            "name": "Entity",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents the state of an entity (a mob, the player, or\r other moving objects like minecarts) in the world.\r /",
            "definition": "export class Entity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension that the entity is currently within.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Unique identifier of the entity. This identifier is intended\r\n     * to be consistent across loads of a world instance. No\r\n     * meaning should be inferred from the value and structure of\r\n     * this unique identifier - do not parse or interpret it. This\r\n     * property is accessible even if {@link Entity.isValid} is\r\n     * false.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is touching a climbable block. For\r\n     * example, a player next to a ladder or a spider next to a\r\n     * stone wall.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isClimbing: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity has a fall distance greater than 0, or\r\n     * greater than 1 while gliding.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isFalling: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether any part of the entity is inside a water block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isInWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is on top of a solid block. This property\r\n     * may behave in unexpected ways. This property will always be\r\n     * true when an Entity is first spawned, and if the Entity has\r\n     * no gravity this property may be incorrect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isOnGround: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity is currently sleeping.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSleeping: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is sneaking - that is, moving more slowly\r\n     * and more quietly.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    isSneaking: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is sprinting. For example, a player using\r\n     * the sprint action, an ocelot running away or a pig boosting\r\n     * with Carrot on a Stick.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSprinting: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is in the swimming state. For example, a\r\n     * player using the swim action or a fish in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSwimming: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the entity can be manipulated by script. A\r\n     * Player is considered valid when it's EntityLifetimeState is\r\n     * set to Loaded.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this entity's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Current location of the entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Given name of the entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    nameTag: string;\r\n    /**\r\n     * @remarks\r\n     * Returns a scoreboard identity that represents this entity.\r\n     * Will remain valid when the entity is killed.\r\n     *\r\n     */\r\n    readonly scoreboardIdentity?: ScoreboardIdentity;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of the entity - for example,\r\n     * 'minecraft:skeleton'. This property is accessible even if\r\n     * {@link Entity.isValid} is false.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Adds or updates an effect, like poison, to the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectType\r\n     * Type of effect to add to the entity.\r\n     * @param duration\r\n     * Amount of time, in ticks, for the effect to apply. There are\r\n     * 20 ticks per second. Use {@link TicksPerSecond} constant to\r\n     * convert between ticks and seconds. The value must be within\r\n     * the range [0, 20000000].\r\n     * @param options\r\n     * Additional options for the effect.\r\n     * @returns\r\n     * Returns nothing if the effect was added or updated\r\n     * successfully. This can throw an error if the duration or\r\n     * amplifier are outside of the valid ranges, or if the effect\r\n     * does not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example spawnPoisonedVillager.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function spawnPoisonedVillager(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const villagerType = \"minecraft:villager_v2<minecraft:ageable_grow_up>\";\r\n     *   const villager = targetLocation.dimension.spawnEntity(villagerType, targetLocation);\r\n     *   const duration = 20;\r\n     *\r\n     *   villager.addEffect(MinecraftEffectTypes.Poison, duration, { amplifier: 1 });\r\n     * }\r\n     * ```\r\n     * @example quickFoxLazyDog.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes, MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function quickFoxLazyDog(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const fox = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Fox, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *\r\n     *   fox.addEffect(MinecraftEffectTypes.Speed, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   log(\"Created a fox.\");\r\n     *\r\n     *   const wolf = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Wolf, {\r\n     *     x: targetLocation.x + 4,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *   wolf.addEffect(MinecraftEffectTypes.Slowness, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   wolf.isSneaking = true;\r\n     *   log(\"Created a sneaking wolf.\", 1);\r\n     * }\r\n     * ```\r\n     */\r\n    addEffect(effectType: EffectType | string, duration: number, options?: EntityEffectOptions): Effect | undefined;\r\n    /**\r\n     * @remarks\r\n     * Adds a specified tag to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param tag\r\n     * Content of the tag to add. The tag must be less than 256\r\n     * characters.\r\n     * @returns\r\n     * Returns true if the tag was added successfully. This can\r\n     * fail if the tag already exists on the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    addTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Applies a set of damage to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount of damage to apply.\r\n     * @param options\r\n     * Additional options about the source of damage, which may add\r\n     * additional effects or spur additional behaviors on this\r\n     * entity.\r\n     * @returns\r\n     * Whether the entity takes any damage. This can return false\r\n     * if the entity is invulnerable or if the damage applied is\r\n     * less than or equal to 0.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example applyDamageThenHeal.ts\r\n     * ```typescript\r\n     * import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyDamageThenHeal(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n     *     log(\"Skeleton health before heal: \" + health?.currentValue);\r\n     *     health?.resetToMaxValue();\r\n     *     log(\"Skeleton health after heal: \" + health?.currentValue);\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    applyDamage(amount: number, options?: EntityApplyDamageByProjectileOptions | EntityApplyDamageOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Applies impulse vector to the current velocity of the\r\n     * entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param vector\r\n     * Impulse vector.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example applyImpulse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyImpulse(targetLocation: DimensionLocation) {\r\n     *   const zombie = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Zombie, targetLocation);\r\n     *\r\n     *   zombie.clearVelocity();\r\n     *\r\n     *   // throw the zombie up in the air\r\n     *   zombie.applyImpulse({ x: 0, y: 0.5, z: 0 });\r\n     * }\r\n     * ```\r\n     */\r\n    applyImpulse(vector: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Applies impulse vector to the current velocity of the\r\n     * entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param verticalStrength\r\n     * Knockback strength for the vertical vector.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example bounceSkeletons.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     type: \"skeleton\",\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.applyKnockback(0, 0, 0, 1);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    applyKnockback(horizontalForce: VectorXZ, verticalStrength: number): void;\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current velocity of the Entity to zero.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example applyImpulse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyImpulse(targetLocation: DimensionLocation) {\r\n     *   const zombie = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Zombie, targetLocation);\r\n     *\r\n     *   zombie.clearVelocity();\r\n     *\r\n     *   // throw the zombie up in the air\r\n     *   zombie.applyImpulse({ x: 0, y: 0.5, z: 0 });\r\n     * }\r\n     * ```\r\n     */\r\n    clearVelocity(): void;\r\n    /**\r\n     * @remarks\r\n     * Extinguishes the fire if the entity is on fire. Note that\r\n     * you can call getComponent('minecraft:onfire') and, if\r\n     * present, the entity is on fire.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param useEffects\r\n     * Whether to show any visual effects connected to the\r\n     * extinguishing.\r\n     * Defaults to: true\r\n     * @returns\r\n     * Returns whether the entity was on fire.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example setOnFire.ts\r\n     * ```typescript\r\n     * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.setOnFire(20, true);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n     *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n     *\r\n     *     skelly.extinguishFire(true);\r\n     *     log(\"Never mind. Fire extinguished.\");\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    extinguishFire(useEffects?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the first intersecting block from the direction that\r\n     * this entity is looking at.\r\n     *\r\n     * @param options\r\n     * Additional configuration options for the ray cast.\r\n     * @returns\r\n     * Returns the first intersecting block from the direction that\r\n     * this entity is looking at.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getBlockFromViewDirection(options?: BlockRaycastOptions): BlockRaycastHit | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for an entity.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:health').\r\n     * If no namespace prefix is specified, 'minecraft:' is\r\n     * assumed. Available component IDs can be found as part of the\r\n     * {@link EntityComponentTypes} enum.\r\n     * @returns\r\n     * Returns the component if it exists on the entity, otherwise\r\n     * undefined.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getComponent<T extends string>(componentId: T): EntityComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all components that are both present on this entity\r\n     * and supported by the API.\r\n     *\r\n     * @returns\r\n     * Returns all components that are both present on this entity\r\n     * and supported by the API.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getComponents(): EntityComponent[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this entity.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effect for the specified EffectType on the\r\n     * entity, undefined if the effect is not present, or throws an\r\n     * error if the effect does not exist.\r\n     *\r\n     * @param effectType\r\n     * The effect identifier.\r\n     * @returns\r\n     * Effect object for the specified effect, undefined if the\r\n     * effect is not present, or throws an error if the effect does\r\n     * not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getEffect(effectType: EffectType | string): Effect | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of effects applied to this entity.\r\n     *\r\n     * @returns\r\n     * List of effects.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getEffects(): Effect[];\r\n    /**\r\n     * @remarks\r\n     * Gets the entities that this entity is looking at by\r\n     * performing a ray cast from the view of this entity.\r\n     *\r\n     * @param options\r\n     * Additional configuration options for the ray cast.\r\n     * @returns\r\n     * Returns a set of entities from the direction that this\r\n     * entity is looking at.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    getEntitiesFromViewDirection(options?: EntityRaycastOptions): EntityRaycastHit[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current location of the head component of this\r\n     * entity.\r\n     *\r\n     * @returns\r\n     * Returns the current location of the head component of this\r\n     * entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getHeadLocation(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Gets an entity Property value. If the property was set using\r\n     * the setProperty function within the same tick, the updated\r\n     * value will not be reflected until the subsequent tick.\r\n     *\r\n     * @param identifier\r\n     * The entity Property identifier.\r\n     * @returns\r\n     * Returns the current property value. For enum properties, a\r\n     * string is returned. For float and int properties, a number\r\n     * is returned. For undefined properties, undefined is\r\n     * returned.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getProperty(identifier: string): boolean | number | string | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the current rotation component of this entity.\r\n     *\r\n     * @returns\r\n     * Returns a Vec2 containing the rotation of this entity (in\r\n     * degrees).\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getRotation(): Vector2;\r\n    /**\r\n     * @remarks\r\n     * Returns all tags associated with the entity.\r\n     *\r\n     * @returns\r\n     * An array containing all tags as strings.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current velocity vector of the entity.\r\n     *\r\n     * @returns\r\n     * Returns the current velocity vector of the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example getFireworkVelocity.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function getFireworkVelocity(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const fireworkRocket = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.FireworksRocket, targetLocation);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const velocity = fireworkRocket.getVelocity();\r\n     *\r\n     *     log(\"Velocity of firework is: (x: \" + velocity.x + \", y:\" + velocity.y + \", z:\" + velocity.z + \")\");\r\n     *   }, 5);\r\n     * }\r\n     * ```\r\n     */\r\n    getVelocity(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns the current view direction of the entity.\r\n     *\r\n     * @returns\r\n     * Returns the current view direction of the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getViewDirection(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the specified component is present on this\r\n     * entity.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:rideable')\r\n     * to retrieve. If no namespace prefix is specified,\r\n     * 'minecraft:' is assumed.\r\n     * @returns\r\n     * Returns true if the specified component is present on this\r\n     * entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hasComponent(componentId: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether an entity has a particular tag.\r\n     *\r\n     * @param tag\r\n     * Identifier of the tag to test for.\r\n     * @returns\r\n     * Returns whether an entity has a particular tag.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Kills this entity. The entity will drop loot as normal.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * Returns true if entity can be killed (even if it is already\r\n     * dead), otherwise it returns false.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    kill(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets the rotation of the entity to face a target location.\r\n     * Both pitch and yaw will be set, if applicable, such as for\r\n     * mobs where the pitch controls the head tilt and the yaw\r\n     * controls the body rotation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetLocation\r\n     * The target location that this entity should face/look\r\n     * towards.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    lookAt(targetLocation: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Matches the entity against the passed in options. Uses the\r\n     * location of the entity for matching if the location is not\r\n     * specified in the passed in EntityQueryOptions.\r\n     *\r\n     * @param options\r\n     * The query to perform the match against.\r\n     * @returns\r\n     * Returns true if the entity matches the criteria in the\r\n     * passed in EntityQueryOptions, otherwise it returns false.\r\n     * @throws\r\n     * Throws if the query options are misconfigured.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    matches(options: EntityQueryOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Cause the entity to play the given animation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param animationName\r\n     * The animation identifier. e.g. animation.creeper.swelling\r\n     * @param options\r\n     * Additional options to control the playback and transitions\r\n     * of the animation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    playAnimation(animationName: string, options?: PlayAnimationOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Immediately removes the entity from the world. The removed\r\n     * entity will not perform a death animation or drop loot upon\r\n     * removal.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    remove(): void;\r\n    /**\r\n     * @remarks\r\n     * Removes the specified EffectType on the entity, or returns\r\n     * false if the effect is not present.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectType\r\n     * The effect identifier.\r\n     * @returns\r\n     * Returns true if the effect has been removed. Returns false\r\n     * if the effect is not found or does not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    removeEffect(effectType: EffectType | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes a specified tag from an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param tag\r\n     * Content of the tag to remove.\r\n     * @returns\r\n     * Returns whether the tag existed on the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    removeTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Resets an Entity Property back to its default value, as\r\n     * specified in the Entity's definition. This property change\r\n     * is not applied until the next tick.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @returns\r\n     * Returns the default property value. For enum properties, a\r\n     * string is returned. For float and int properties, a number\r\n     * is returned. For undefined properties, undefined is\r\n     * returned.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    resetProperty(identifier: string): boolean | number | string;\r\n    /**\r\n     * @remarks\r\n     * Runs a synchronous command on the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param commandString\r\n     * The command string. Note: This should not include a leading\r\n     * forward slash.\r\n     * @returns\r\n     * A command result containing whether the command was\r\n     * successful.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    runCommand(commandString: string): CommandResult;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets an entity on fire (if it is not in water or rain). Note\r\n     * that you can call getComponent('minecraft:onfire') and, if\r\n     * present, the entity is on fire.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param seconds\r\n     * Length of time to set the entity on fire.\r\n     * @param useEffects\r\n     * Whether side-effects should be applied (e.g. thawing freeze)\r\n     * and other conditions such as rain or fire protection should\r\n     * be taken into consideration.\r\n     * Defaults to: true\r\n     * @returns\r\n     * Whether the entity was set on fire. This can fail if seconds\r\n     * is less than or equal to zero, the entity is wet or the\r\n     * entity is immune to fire.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example setOnFire.ts\r\n     * ```typescript\r\n     * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.setOnFire(20, true);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n     *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n     *\r\n     *     skelly.extinguishFire(true);\r\n     *     log(\"Never mind. Fire extinguished.\");\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    setOnFire(seconds: number, useEffects?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets an Entity Property to the provided value. This property\r\n     * change is not applied until the next tick.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @param value\r\n     * The property value. The provided type must be compatible\r\n     * with the type specified in the entity's definition.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     * Throws if the provided value is outside the expected range\r\n     * (int, float properties).\r\n     * Throws if the provided string value does not match the set\r\n     * of accepted enum values (enum properties\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setProperty(identifier: string, value: boolean | number | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the main rotation of the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rotation\r\n     * The x and y rotation of the entity (in degrees). For most\r\n     * mobs, the x rotation controls the head tilt and the y\r\n     * rotation controls the body rotation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setRotation(rotation: Vector2): void;\r\n    /**\r\n     * @remarks\r\n     * Teleports the selected entity to a new location\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * New location for the entity.\r\n     * @param teleportOptions\r\n     * Options regarding the teleport operation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example teleport.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function teleport(targetLocation: DimensionLocation) {\r\n     *   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     cow.teleport(\r\n     *       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r\n     *       {\r\n     *         facingLocation: targetLocation,\r\n     *       }\r\n     *     );\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     * @example teleportMovement.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function teleportMovement(targetLocation: DimensionLocation) {\r\n     *   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r\n     *\r\n     *   let inc = 1;\r\n     *   const runId = system.runInterval(() => {\r\n     *     pig.teleport(\r\n     *       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r\n     *       {\r\n     *         facingLocation: targetLocation,\r\n     *       }\r\n     *     );\r\n     *\r\n     *     if (inc > 100) {\r\n     *       system.clearRun(runId);\r\n     *     }\r\n     *     inc++;\r\n     *   }, 4);\r\n     * }\r\n     * ```\r\n     */\r\n    teleport(location: Vector3, teleportOptions?: TeleportOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Triggers an entity type event. For every entity, a number of\r\n     * events are defined in an entities' definition for key entity\r\n     * behaviors; for example, creepers have a\r\n     * minecraft:start_exploding type event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param eventName\r\n     * Name of the entity type event to trigger. If a namespace is\r\n     * not specified, minecraft: is assumed.\r\n     * @throws\r\n     * If the event is not defined in the definition of the entity,\r\n     * an error will be thrown.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * // A function that spawns a creeper and triggers it to explode immediately\r\n     * import { DimensionLocation } from '@minecraft/server';\r\n     * import { MinecraftEntityTypes } from '@minecraft/vanilla-data';\r\n     *\r\n     * function spawnExplodingCreeper(location: DimensionLocation) {\r\n     *     const creeper = location.dimension.spawnEntity(MinecraftEntityTypes.Creeper, location);\r\n     *\r\n     *     creeper.triggerEvent('minecraft:start_exploding_forced');\r\n     * }\r\n     * ```\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function triggerEvent(targetLocation: DimensionLocation) {\r\n     *   const creeper = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Creeper, targetLocation);\r\n     *\r\n     *   creeper.triggerEvent(\"minecraft:start_exploding_forced\");\r\n     * }\r\n     * ```\r\n     */\r\n    triggerEvent(eventName: string): void;\r\n    /**\r\n     * @remarks\r\n     * Attempts to try a teleport, but may not complete the\r\n     * teleport operation (for example, if there are blocks at the\r\n     * destination.)\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to teleport the entity to.\r\n     * @param teleportOptions\r\n     * Options regarding the teleport operation.\r\n     * @returns\r\n     * Returns whether the teleport succeeded. This can fail if the\r\n     * destination chunk is unloaded or if the teleport would\r\n     * result in intersecting with blocks.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    tryTeleport(location: Vector3, teleportOptions?: TeleportOptions): boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Represents the state of an entity (a mob, the player, or\r\n * other moving objects like minecarts) in the world.\r\n */\r",
            "properties": [
              {
                "name": "dimension",
                "type": "Dimension",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isClimbing",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isFalling",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isInWater",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isOnGround",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isSleeping",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isSprinting",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isSwimming",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "localizationKey",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "typeId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "addEffect",
                "parameters": [],
                "returnType": "Effect | undefined",
                "accessibility": "public",
                "signature": "addEffect(effectType: EffectType | string, duration: number, options?: EntityEffectOptions): Effect | undefined"
              },
              {
                "name": "addTag",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "addTag(tag: string): boolean"
              },
              {
                "name": "applyDamage",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "applyDamage(amount: number, options?: EntityApplyDamageByProjectileOptions | EntityApplyDamageOptions): boolean"
              },
              {
                "name": "applyImpulse",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "applyImpulse(vector: Vector3): void"
              },
              {
                "name": "applyKnockback",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "applyKnockback(horizontalForce: VectorXZ, verticalStrength: number): void"
              },
              {
                "name": "clearDynamicProperties",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearDynamicProperties(): void"
              },
              {
                "name": "clearVelocity",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearVelocity(): void"
              },
              {
                "name": "extinguishFire",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "extinguishFire(useEffects?: boolean): boolean"
              },
              {
                "name": "getBlockFromViewDirection",
                "parameters": [],
                "returnType": "BlockRaycastHit | undefined",
                "accessibility": "public",
                "signature": "getBlockFromViewDirection(options?: BlockRaycastOptions): BlockRaycastHit | undefined"
              },
              {
                "name": "getComponents",
                "parameters": [],
                "returnType": "EntityComponent[]",
                "accessibility": "public",
                "signature": "getComponents(): EntityComponent[]"
              },
              {
                "name": "getDynamicProperty",
                "parameters": [],
                "returnType": "boolean | number | string | Vector3 | undefined",
                "accessibility": "public",
                "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
              },
              {
                "name": "getDynamicPropertyIds",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getDynamicPropertyIds(): string[]"
              },
              {
                "name": "getDynamicPropertyTotalByteCount",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getDynamicPropertyTotalByteCount(): number"
              },
              {
                "name": "getEffect",
                "parameters": [],
                "returnType": "Effect | undefined",
                "accessibility": "public",
                "signature": "getEffect(effectType: EffectType | string): Effect | undefined"
              },
              {
                "name": "getEffects",
                "parameters": [],
                "returnType": "Effect[]",
                "accessibility": "public",
                "signature": "getEffects(): Effect[]"
              },
              {
                "name": "getEntitiesFromViewDirection",
                "parameters": [],
                "returnType": "EntityRaycastHit[]",
                "accessibility": "public",
                "signature": "getEntitiesFromViewDirection(options?: EntityRaycastOptions): EntityRaycastHit[]"
              },
              {
                "name": "getHeadLocation",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "getHeadLocation(): Vector3"
              },
              {
                "name": "getProperty",
                "parameters": [],
                "returnType": "boolean | number | string | undefined",
                "accessibility": "public",
                "signature": "getProperty(identifier: string): boolean | number | string | undefined"
              },
              {
                "name": "getRotation",
                "parameters": [],
                "returnType": "Vector2",
                "accessibility": "public",
                "signature": "getRotation(): Vector2"
              },
              {
                "name": "getTags",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getTags(): string[]"
              },
              {
                "name": "getVelocity",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "getVelocity(): Vector3"
              },
              {
                "name": "getViewDirection",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "getViewDirection(): Vector3"
              },
              {
                "name": "hasComponent",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasComponent(componentId: string): boolean"
              },
              {
                "name": "hasTag",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasTag(tag: string): boolean"
              },
              {
                "name": "kill",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "kill(): boolean"
              },
              {
                "name": "lookAt",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "lookAt(targetLocation: Vector3): void"
              },
              {
                "name": "matches",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "matches(options: EntityQueryOptions): boolean"
              },
              {
                "name": "playAnimation",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "playAnimation(animationName: string, options?: PlayAnimationOptions): void"
              },
              {
                "name": "remove",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "remove(): void"
              },
              {
                "name": "removeEffect",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "removeEffect(effectType: EffectType | string): boolean"
              },
              {
                "name": "removeTag",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "removeTag(tag: string): boolean"
              },
              {
                "name": "resetProperty",
                "parameters": [],
                "returnType": "boolean | number | string",
                "accessibility": "public",
                "signature": "resetProperty(identifier: string): boolean | number | string"
              },
              {
                "name": "runCommand",
                "parameters": [],
                "returnType": "CommandResult",
                "accessibility": "public",
                "signature": "runCommand(commandString: string): CommandResult"
              },
              {
                "name": "setDynamicProperty",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
              },
              {
                "name": "setOnFire",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "setOnFire(seconds: number, useEffects?: boolean): boolean"
              },
              {
                "name": "setProperty",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setProperty(identifier: string, value: boolean | number | string): void"
              },
              {
                "name": "setRotation",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setRotation(rotation: Vector2): void"
              },
              {
                "name": "teleport",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "teleport(location: Vector3, teleportOptions?: TeleportOptions): void"
              },
              {
                "name": "triggerEvent",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "triggerEvent(eventName: string): void"
              },
              {
                "name": "tryTeleport",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "tryTeleport(location: Vector3, teleportOptions?: TeleportOptions): boolean"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entity",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityAddRiderComponent",
            "name": "EntityAddRiderComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component makes the entity spawn with a\r rider of the specified entityType.\r /",
            "definition": "export class EntityAddRiderComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The type of entity that is added as a rider for this entity\r\n     * when spawned under certain conditions.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly entityType: string;\r\n    /**\r\n     * @remarks\r\n     * Optional spawn event to trigger on the rider when that rider\r\n     * is spawned for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly spawnEvent: string;\r\n    static readonly componentId = 'minecraft:addrider';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component makes the entity spawn with a\r\n * rider of the specified entityType.\r\n */\r",
            "properties": [
              {
                "name": "entityType",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "spawnEvent",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "addrider'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityaddridercomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityAgeableComponent",
            "name": "EntityAgeableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Adds a timer for the entity to grow up. It can be\r accelerated by giving the entity the items it likes as\r defined by feedItems.\r /",
            "definition": "export class EntityAgeableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Amount of time before the entity grows up, -1 for always a\r\n     * baby.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Event that runs when this entity grows up.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly growUp: Trigger;\r\n    /**\r\n     * @remarks\r\n     * The feed item used will transform into this item upon\r\n     * successful interaction.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly transformToItem: string;\r\n    static readonly componentId = 'minecraft:ageable';\r\n    /**\r\n     * @remarks\r\n     * List of items that the entity drops when it grows up.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDropItems(): string[];\r\n    /**\r\n     * @remarks\r\n     * List of items that can be fed to the entity. Includes 'item'\r\n     * for the item name and 'growth' to define how much time it\r\n     * grows up by.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFeedItems(): EntityDefinitionFeedItem[];\r\n}\r",
            "jsdoc": "/**\r\n * Adds a timer for the entity to grow up. It can be\r\n * accelerated by giving the entity the items it likes as\r\n * defined by feedItems.\r\n */\r",
            "properties": [
              {
                "name": "duration",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "growUp",
                "type": "Trigger",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "transformToItem",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "ageable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getDropItems",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getDropItems(): string[]"
              },
              {
                "name": "getFeedItems",
                "parameters": [],
                "returnType": "EntityDefinitionFeedItem[]",
                "accessibility": "public",
                "signature": "getFeedItems(): EntityDefinitionFeedItem[]"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityageablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityAttributeComponent",
            "name": "EntityAttributeComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "This is a base abstract class for any entity component that\r centers around a number and can have a minimum, maximum, and\r default defined value.\r /",
            "definition": "export class EntityAttributeComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of this attribute for this instance.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly currentValue: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the default defined value for this attribute.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly defaultValue: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effective max of this attribute given any other\r\n     * ambient components or factors.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly effectiveMax: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effective min of this attribute given any other\r\n     * ambient components or factors.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly effectiveMin: number;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the defined\r\n     * default value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToDefaultValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the maximum\r\n     * defined value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToMaxValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the minimum\r\n     * defined value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToMinValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current value of this attribute.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * If the value is out of bounds, an ArgumentOutOfBounds Error\r\n     * is thrown.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setCurrentValue(value: number): boolean;\r\n}\r",
            "jsdoc": "/**\r\n * This is a base abstract class for any entity component that\r\n * centers around a number and can have a minimum, maximum, and\r\n * default defined value.\r\n */\r",
            "properties": [
              {
                "name": "currentValue",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "defaultValue",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "effectiveMax",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "effectiveMin",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "resetToDefaultValue",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "resetToDefaultValue(): void"
              },
              {
                "name": "resetToMaxValue",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "resetToMaxValue(): void"
              },
              {
                "name": "resetToMinValue",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "resetToMinValue(): void"
              },
              {
                "name": "setCurrentValue",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "setCurrentValue(value: number): boolean"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityattributecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityBaseMovementComponent",
            "name": "EntityBaseMovementComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Base class for a family of entity movement events.\r /",
            "definition": "export class EntityBaseMovementComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Maximum turn rate for this movement modality of the mob.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxTurn: number;\r\n}\r",
            "jsdoc": "/**\r\n * Base class for a family of entity movement events.\r\n */\r",
            "properties": [
              {
                "name": "maxTurn",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitybasemovementcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityBreathableComponent",
            "name": "EntityBreathableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines what blocks this entity can breathe in and gives\r them the ability to suffocate.\r /",
            "definition": "export class EntityBreathableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in air.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in lava.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in solid blocks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesSolids: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will have visible bubbles while in\r\n     * water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly generatesBubbles: boolean;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds to recover breath to maximum.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly inhaleTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds between suffocation damage.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly suffocateTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds the entity can hold its breath.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly totalSupply: number;\r\n    static readonly componentId = 'minecraft:breathable';\r\n    /**\r\n     * @remarks\r\n     * List of blocks this entity can breathe in, in addition to\r\n     * the separate properties for classes of blocks.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBreatheBlocks(): BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * List of blocks this entity can't breathe in.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getNonBreatheBlocks(): BlockPermutation[];\r\n}\r",
            "jsdoc": "/**\r\n * Defines what blocks this entity can breathe in and gives\r\n * them the ability to suffocate.\r\n */\r",
            "properties": [
              {
                "name": "breathesAir",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "breathesLava",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "breathesSolids",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "breathesWater",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "generatesBubbles",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "inhaleTime",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "suffocateTime",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "totalSupply",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "breathable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getBreatheBlocks",
                "parameters": [],
                "returnType": "BlockPermutation[]",
                "accessibility": "public",
                "signature": "getBreatheBlocks(): BlockPermutation[]"
              },
              {
                "name": "getNonBreatheBlocks",
                "parameters": [],
                "returnType": "BlockPermutation[]",
                "accessibility": "public",
                "signature": "getNonBreatheBlocks(): BlockPermutation[]"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitybreathablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityCanClimbComponent",
            "name": "EntityCanClimbComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that the entity can\r climb up ladders.\r /",
            "definition": "export class EntityCanClimbComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_climb';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * climb up ladders.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "can_climb'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitycanclimbcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityCanFlyComponent",
            "name": "EntityCanFlyComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that the entity can\r fly, and the pathfinder won't be restricted to paths where a\r solid block is required underneath it.\r /",
            "definition": "export class EntityCanFlyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_fly';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * fly, and the pathfinder won't be restricted to paths where a\r\n * solid block is required underneath it.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "can_fly'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitycanflycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityCanPowerJumpComponent",
            "name": "EntityCanPowerJumpComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that the entity can\r power jump like the horse does within Minecraft.\r /",
            "definition": "export class EntityCanPowerJumpComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_power_jump';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * power jump like the horse does within Minecraft.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "can_power_jump'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitycanpowerjumpcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityColor2Component",
            "name": "EntityColor2Component",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the entity's secondary color. Only works on certain\r entities that have secondary predefined color values (e.g.,\r tropical fish).\r /",
            "definition": "export class EntityColor2Component extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of this particular color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: PaletteColor;\r\n    static readonly componentId = 'minecraft:color2';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the entity's secondary color. Only works on certain\r\n * entities that have secondary predefined color values (e.g.,\r\n * tropical fish).\r\n */\r",
            "properties": [
              {
                "name": "value",
                "type": "PaletteColor",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "color2'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitycolor2component",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityColorComponent",
            "name": "EntityColorComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the entity's color. Only works on certain entities\r that have predefined color values (e.g., sheep, llama,\r shulker).\r /",
            "definition": "export class EntityColorComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of this particular color.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    value: number;\r\n    static readonly componentId = 'minecraft:color';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the entity's color. Only works on certain entities\r\n * that have predefined color values (e.g., sheep, llama,\r\n * shulker).\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "color'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitycolorcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityComponent",
            "name": "EntityComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Base class for downstream entity components.\r /",
            "definition": "export class EntityComponent extends Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that owns this component. The entity will be\r\n     * undefined if it has been removed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Base class for downstream entity components.\r\n */\r",
            "properties": [
              {
                "name": "entity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "Component",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityDefinitionFeedItem",
            "name": "EntityDefinitionFeedItem",
            "type": "class",
            "module": "@minecraft/server",
            "description": "As part of the Ageable component, represents a set of items\r that can be fed to an entity and the rate at which that\r causes them to grow.\r /",
            "definition": "export class EntityDefinitionFeedItem {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The amount by which an entity's age will increase when fed\r\n     * this item. Values usually range between 0 and 1.\r\n     *\r\n     */\r\n    readonly growth: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of type of item that can be fed. If a namespace\r\n     * is not specified, 'minecraft:' is assumed. Example values\r\n     * include 'wheat' or 'golden_apple'.\r\n     *\r\n     */\r\n    readonly item: string;\r\n}\r",
            "jsdoc": "/**\r\n * As part of the Ageable component, represents a set of items\r\n * that can be fed to an entity and the rate at which that\r\n * causes them to grow.\r\n */\r",
            "properties": [
              {
                "name": "growth",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "item",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitydefinitionfeeditem",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityDieAfterEvent",
            "name": "EntityDieAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains data related to the death of an entity in the game.\r /",
            "definition": "export class EntityDieAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If specified, provides more information on the source of\r\n     * damage that caused the death of this entity.\r\n     *\r\n     */\r\n    readonly damageSource: EntityDamageSource;\r\n    /**\r\n     * @remarks\r\n     * Now-dead entity object.\r\n     *\r\n     */\r\n    readonly deadEntity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains data related to the death of an entity in the game.\r\n */\r",
            "properties": [
              {
                "name": "damageSource",
                "type": "EntityDamageSource",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "deadEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitydieafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityDieAfterEventSignal",
            "name": "EntityDieAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Supports registering for an event that fires after an entity\r has died.\r /",
            "definition": "export class EntityDieAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Subscribes to an event that fires when an entity dies.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call when an entity dies.\r\n     * @param options\r\n     * Additional filtering options for when the subscription\r\n     * fires.\r\n     * @returns\r\n     * Returns the closure that can be used in future downstream\r\n     * calls to unsubscribe.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityDieAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityDieAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Stops this event from calling your function when an entity\r\n     * dies.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityDieAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Supports registering for an event that fires after an entity\r\n * has died.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitydieaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityEquippableComponent",
            "name": "EntityEquippableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Provides access to a mob's equipment slots. This component\r exists on player entities.\r ```typescript\r // Gives the player Elytra\r  function giveEquipment(player: Player) {\r     const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r     if (equipmentCompPlayer) {\r         equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r     }\r }\r ```\r /",
            "definition": "export class EntityEquippableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the total Armor level of the owner.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly totalArmor: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the total Toughness level of the owner.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly totalToughness: number;\r\n    static readonly componentId = 'minecraft:equippable';\r\n    /**\r\n     * @remarks\r\n     * Gets the equipped item for the given EquipmentSlot.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\"\r\n     * @returns\r\n     * Returns the item equipped to the given EquipmentSlot. If\r\n     * empty, returns undefined.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEquipment(equipmentSlot: EquipmentSlot): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the ContainerSlot corresponding to the given\r\n     * EquipmentSlot.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\".\r\n     * @returns\r\n     * Returns the ContainerSlot corresponding to the given\r\n     * EquipmentSlot.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEquipmentSlot(equipmentSlot: EquipmentSlot): ContainerSlot;\r\n    /**\r\n     * @remarks\r\n     * Replaces the item in the given EquipmentSlot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\".\r\n     * @param itemStack\r\n     * The item to equip. If undefined, clears the slot.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setEquipment(equipmentSlot: EquipmentSlot, itemStack?: ItemStack): boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Provides access to a mob's equipment slots. This component\r\n * exists on player entities.\r\n * @example givePlayerElytra.ts\r\n * ```typescript\r\n * // Gives the player Elytra\r\n * import { EquipmentSlot, ItemStack, Player, EntityComponentTypes } from '@minecraft/server';\r\n * import { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n *\r\n * function giveEquipment(player: Player) {\r\n *     const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r\n *     if (equipmentCompPlayer) {\r\n *         equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r\n *     }\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "totalArmor",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "totalToughness",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "equippable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getEquipment",
                "parameters": [],
                "returnType": "ItemStack | undefined",
                "accessibility": "public",
                "signature": "getEquipment(equipmentSlot: EquipmentSlot): ItemStack | undefined"
              },
              {
                "name": "getEquipmentSlot",
                "parameters": [],
                "returnType": "ContainerSlot",
                "accessibility": "public",
                "signature": "getEquipmentSlot(equipmentSlot: EquipmentSlot): ContainerSlot"
              },
              {
                "name": "setEquipment",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "setEquipment(equipmentSlot: EquipmentSlot, itemStack?: ItemStack): boolean"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityequippablecomponent",
              "class"
            ],
            "examples": [
              {
                "title": "givePlayerElytra.ts",
                "code": "// Gives the player Elytra\r\nimport { EquipmentSlot, ItemStack, Player, EntityComponentTypes } from '@minecraft/server';\r\nimport { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n\nfunction giveEquipment(player: Player) {\r\n    const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r\n    if (equipmentCompPlayer) {\r\n        equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r\n    }\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityExhaustionComponent",
            "name": "EntityExhaustionComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the interactions with this entity for Exhaustion.\r Wraps the `minecraft.player.exhaustion` attribute.\r /",
            "definition": "export class EntityExhaustionComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.exhaustion';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the interactions with this entity for Exhaustion.\r\n * Wraps the `minecraft.player.exhaustion` attribute.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "player.exhaustion'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityAttributeComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityexhaustioncomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityFireImmuneComponent",
            "name": "EntityFireImmuneComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity\r doesn't take damage from fire.\r /",
            "definition": "export class EntityFireImmuneComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:fire_immune';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity\r\n * doesn't take damage from fire.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "fire_immune'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityfireimmunecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityFloatsInLiquidComponent",
            "name": "EntityFloatsInLiquidComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity can\r float in liquid blocks.\r /",
            "definition": "export class EntityFloatsInLiquidComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:floats_in_liquid';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity can\r\n * float in liquid blocks.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "floats_in_liquid'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityfloatsinliquidcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityFlyingSpeedComponent",
            "name": "EntityFlyingSpeedComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents the flying speed of an entity.\r /",
            "definition": "export class EntityFlyingSpeedComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of the flying speed of the associated entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    value: number;\r\n    static readonly componentId = 'minecraft:flying_speed';\r\n}\r",
            "jsdoc": "/**\r\n * Represents the flying speed of an entity.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "flying_speed'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityflyingspeedcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityFrictionModifierComponent",
            "name": "EntityFrictionModifierComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines how much friction affects this entity.\r /",
            "definition": "export class EntityFrictionModifierComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of the friction modifier of the associated\r\n     * entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:friction_modifier';\r\n}\r",
            "jsdoc": "/**\r\n * Defines how much friction affects this entity.\r\n */\r",
            "properties": [
              {
                "name": "value",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "friction_modifier'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityfrictionmodifiercomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHealableComponent",
            "name": "EntityHealableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the interactions with this entity for healing it.\r /",
            "definition": "export class EntityHealableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Determines if an item can be used regardless of the entity\r\n     * being at full health.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly forceUse: boolean;\r\n    static readonly componentId = 'minecraft:healable';\r\n    /**\r\n     * @remarks\r\n     * A set of items that can specifically heal this entity.\r\n     *\r\n     * @returns\r\n     * Entity that this component is associated with.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFeedItems(): FeedItem[];\r\n}\r",
            "jsdoc": "/**\r\n * Defines the interactions with this entity for healing it.\r\n */\r",
            "properties": [
              {
                "name": "forceUse",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "healable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getFeedItems",
                "parameters": [],
                "returnType": "FeedItem[]",
                "accessibility": "public",
                "signature": "getFeedItems(): FeedItem[]"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhealablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHealthChangedAfterEvent",
            "name": "EntityHealthChangedAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to an entity when its health\r changes. Warning: don't change the health of an entity in\r this event, or it will cause an infinite loop!\r /",
            "definition": "export class EntityHealthChangedAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity whose health changed.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n    /**\r\n     * @remarks\r\n     * New health value of the entity.\r\n     *\r\n     */\r\n    readonly newValue: number;\r\n    /**\r\n     * @remarks\r\n     * Old health value of the entity.\r\n     *\r\n     */\r\n    readonly oldValue: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to an entity when its health\r\n * changes. Warning: don't change the health of an entity in\r\n * this event, or it will cause an infinite loop!\r\n */\r",
            "properties": [
              {
                "name": "entity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "newValue",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "oldValue",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhealthchangedafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHealthChangedAfterEventSignal",
            "name": "EntityHealthChangedAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when the health of\r an entity changes.\r /",
            "definition": "export class EntityHealthChangedAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when the health of an\r\n     * entity changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHealthChangedAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHealthChangedAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when the health of an\r\n     * entity changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHealthChangedAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when the health of\r\n * an entity changes.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhealthchangedaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHealthComponent",
            "name": "EntityHealthComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the health properties of an entity.\r ```typescript\r  function applyDamageThenHeal(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r    skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r    system.runTimeout(() => {\r     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r     log(\"Skeleton health before heal: \" + health?.currentValue);\r     health?.resetToMaxValue();\r     log(\"Skeleton health after heal: \" + health?.currentValue);\r   }, 20);\r }\r ```\r /",
            "definition": "export class EntityHealthComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:health';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the health properties of an entity.\r\n * @example applyDamageThenHeal.ts\r\n * ```typescript\r\n * import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function applyDamageThenHeal(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n *\r\n *   skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n *\r\n *   system.runTimeout(() => {\r\n *     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n *     log(\"Skeleton health before heal: \" + health?.currentValue);\r\n *     health?.resetToMaxValue();\r\n *     log(\"Skeleton health after heal: \" + health?.currentValue);\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "health'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityAttributeComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhealthcomponent",
              "class"
            ],
            "examples": [
              {
                "title": "applyDamageThenHeal.ts",
                "code": "import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction applyDamageThenHeal(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n\n  skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n\n  system.runTimeout(() => {\r\n    const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n    log(\"Skeleton health before heal: \" + health?.currentValue);\r\n    health?.resetToMaxValue();\r\n    log(\"Skeleton health after heal: \" + health?.currentValue);\r\n  }, 20);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHitBlockAfterEvent",
            "name": "EntityHitBlockAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to an entity hitting a block.\r /",
            "definition": "export class EntityHitBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Entity that made the attack.\r\n     *\r\n     */\r\n    readonly damagingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Block that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitBlock: Block;\r\n    /**\r\n     * @remarks\r\n     * Block permutation that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitBlockPermutation: BlockPermutation;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to an entity hitting a block.\r\n */\r",
            "properties": [
              {
                "name": "blockFace",
                "type": "Direction",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "damagingEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hitBlock",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hitBlockPermutation",
                "type": "BlockPermutation",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhitblockafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHitBlockAfterEventSignal",
            "name": "EntityHitBlockAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when an entity hits\r a block.\r /",
            "definition": "export class EntityHitBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHitBlockAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHitBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHitBlockAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity hits\r\n * a block.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhitblockaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHitEntityAfterEvent",
            "name": "EntityHitEntityAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to an entity hitting (melee\r attacking) another entity.\r /",
            "definition": "export class EntityHitEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that made a hit/melee attack.\r\n     *\r\n     */\r\n    readonly damagingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to an entity hitting (melee\r\n * attacking) another entity.\r\n */\r",
            "properties": [
              {
                "name": "damagingEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hitEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhitentityafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHitEntityAfterEventSignal",
            "name": "EntityHitEntityAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when an entity makes\r a melee attack on another entity.\r /",
            "definition": "export class EntityHitEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity hits\r\n     * another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHitEntityAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHitEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity makes a\r\n     * melee attack on another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHitEntityAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity makes\r\n * a melee attack on another entity.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhitentityaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHungerComponent",
            "name": "EntityHungerComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the interactions with this entity for hunger. Wraps\r the `minecraft.player.hunger` attribute.\r /",
            "definition": "export class EntityHungerComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.hunger';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the interactions with this entity for hunger. Wraps\r\n * the `minecraft.player.hunger` attribute.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "player.hunger'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityAttributeComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhungercomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHurtAfterEvent",
            "name": "EntityHurtAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to an entity getting hurt.\r /",
            "definition": "export class EntityHurtAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Describes the amount of damage caused.\r\n     *\r\n     */\r\n    readonly damage: number;\r\n    /**\r\n     * @remarks\r\n     * Source information on the entity that may have applied this\r\n     * damage.\r\n     *\r\n     */\r\n    readonly damageSource: EntityDamageSource;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hurt.\r\n     *\r\n     */\r\n    readonly hurtEntity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to an entity getting hurt.\r\n */\r",
            "properties": [
              {
                "name": "damage",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "damageSource",
                "type": "EntityDamageSource",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hurtEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhurtafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHurtAfterEventSignal",
            "name": "EntityHurtAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when an entity is\r hurt.\r /",
            "definition": "export class EntityHurtAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity is hurt.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHurtAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHurtAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity is hurt.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHurtAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity is\r\n * hurt.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhurtaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityInventoryComponent",
            "name": "EntityInventoryComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines this entity's inventory properties.\r /",
            "definition": "export class EntityInventoryComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Number of slots that this entity can gain per extra\r\n     * strength.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly additionalSlotsPerStrength: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the contents of this inventory can be removed by a\r\n     * hopper.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBeSiphonedFrom: boolean;\r\n    /**\r\n     * @remarks\r\n     * Defines the container for this entity. The container will be\r\n     * undefined if the entity has been removed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly container: Container;\r\n    /**\r\n     * @remarks\r\n     * Type of container this entity has.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly containerType: string;\r\n    /**\r\n     * @remarks\r\n     * Number of slots the container has.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly inventorySize: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity will not drop it's inventory on death.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly 'private': boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity's inventory can only be accessed by its\r\n     * owner or itself.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly restrictToOwner: boolean;\r\n    static readonly componentId = 'minecraft:inventory';\r\n}\r",
            "jsdoc": "/**\r\n * Defines this entity's inventory properties.\r\n */\r",
            "properties": [
              {
                "name": "additionalSlotsPerStrength",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canBeSiphonedFrom",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "container",
                "type": "Container",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "containerType",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "inventorySize",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "restrictToOwner",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "inventory'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityinventorycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsBabyComponent",
            "name": "EntityIsBabyComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is a\r baby.\r /",
            "definition": "export class EntityIsBabyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_baby';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is a\r\n * baby.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_baby'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityisbabycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsChargedComponent",
            "name": "EntityIsChargedComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is\r charged.\r /",
            "definition": "export class EntityIsChargedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_charged';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * charged.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_charged'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityischargedcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsChestedComponent",
            "name": "EntityIsChestedComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is\r currently carrying a chest.\r /",
            "definition": "export class EntityIsChestedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_chested';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently carrying a chest.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_chested'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityischestedcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsDyeableComponent",
            "name": "EntityIsDyeableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that dyes can be used\r on this entity to change its color.\r /",
            "definition": "export class EntityIsDyeableComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_dyeable';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that dyes can be used\r\n * on this entity to change its color.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_dyeable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityisdyeablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsHiddenWhenInvisibleComponent",
            "name": "EntityIsHiddenWhenInvisibleComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity can\r hide from hostile mobs while invisible.\r /",
            "definition": "export class EntityIsHiddenWhenInvisibleComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_hidden_when_invisible';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity can\r\n * hide from hostile mobs while invisible.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_hidden_when_invisible'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityishiddenwheninvisiblecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsIgnitedComponent",
            "name": "EntityIsIgnitedComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity this\r currently on fire.\r /",
            "definition": "export class EntityIsIgnitedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_ignited';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity this\r\n * currently on fire.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_ignited'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityisignitedcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsIllagerCaptainComponent",
            "name": "EntityIsIllagerCaptainComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is an\r illager captain.\r /",
            "definition": "export class EntityIsIllagerCaptainComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_illager_captain';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is an\r\n * illager captain.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_illager_captain'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityisillagercaptaincomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsSaddledComponent",
            "name": "EntityIsSaddledComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is\r currently saddled.\r /",
            "definition": "export class EntityIsSaddledComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_saddled';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently saddled.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_saddled'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityissaddledcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsShakingComponent",
            "name": "EntityIsShakingComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is\r currently shaking.\r /",
            "definition": "export class EntityIsShakingComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_shaking';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently shaking.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_shaking'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityisshakingcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsShearedComponent",
            "name": "EntityIsShearedComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is\r currently sheared.\r /",
            "definition": "export class EntityIsShearedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_sheared';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently sheared.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_sheared'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityisshearedcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsStackableComponent",
            "name": "EntityIsStackableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity can be\r stacked.\r /",
            "definition": "export class EntityIsStackableComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_stackable';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity can be\r\n * stacked.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_stackable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityisstackablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsStunnedComponent",
            "name": "EntityIsStunnedComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is\r currently stunned.\r /",
            "definition": "export class EntityIsStunnedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_stunned';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently stunned.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_stunned'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityisstunnedcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityIsTamedComponent",
            "name": "EntityIsTamedComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity is\r currently tamed.\r /",
            "definition": "export class EntityIsTamedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_tamed';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently tamed.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "is_tamed'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityistamedcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityItemComponent",
            "name": "EntityItemComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "If added onto the entity, this indicates that the entity\r represents a free-floating item in the world. Lets you\r retrieve the actual item stack contents via the itemStack\r property.\r ```typescript\r  function testThatEntityIsFeatherItem(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const items = targetLocation.dimension.getEntities({\r     location: targetLocation,\r     maxDistance: 20,\r   });\r    for (const item of items) {\r     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r      if (itemComp) {\r       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r         log(\"Success! Found a feather\", 1);\r       }\r     }\r   }\r }\r ```\r /",
            "definition": "export class EntityItemComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Item stack represented by this entity in the world.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    static readonly componentId = 'minecraft:item';\r\n}\r",
            "jsdoc": "/**\r\n * If added onto the entity, this indicates that the entity\r\n * represents a free-floating item in the world. Lets you\r\n * retrieve the actual item stack contents via the itemStack\r\n * property.\r\n * @example testThatEntityIsFeatherItem.ts\r\n * ```typescript\r\n * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function testThatEntityIsFeatherItem(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const items = targetLocation.dimension.getEntities({\r\n *     location: targetLocation,\r\n *     maxDistance: 20,\r\n *   });\r\n *\r\n *   for (const item of items) {\r\n *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n *\r\n *     if (itemComp) {\r\n *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n *         log(\"Success! Found a feather\", 1);\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "itemStack",
                "type": "ItemStack",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "item'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityitemcomponent",
              "class"
            ],
            "examples": [
              {
                "title": "testThatEntityIsFeatherItem.ts",
                "code": "import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction testThatEntityIsFeatherItem(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const items = targetLocation.dimension.getEntities({\r\n    location: targetLocation,\r\n    maxDistance: 20,\r\n  });\r\n\n  for (const item of items) {\r\n    const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n\n    if (itemComp) {\r\n      if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n        log(\"Success! Found a feather\", 1);\r\n      }\r\n    }\r\n  }\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityLavaMovementComponent",
            "name": "EntityLavaMovementComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the base movement speed in lava of this entity.\r /",
            "definition": "export class EntityLavaMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:lava_movement';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the base movement speed in lava of this entity.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "lava_movement'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityAttributeComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitylavamovementcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityLeashableComponent",
            "name": "EntityLeashableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows the entity to be leashed. Defines the conditions and\r events for when an entity is leashed.\r /",
            "definition": "export class EntityLeashableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if another entity can 'steal' the leashed\r\n     * entity by attaching their own leash to it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBeStolen: boolean;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the leash stiffens, restricting\r\n     * movement.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly hardDistance: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is leashed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isLeashed: boolean;\r\n    /**\r\n     * @remarks\r\n     * Entity that is holding the leash.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly leashHolder?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Identifier of entity that is holding the leash.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly leashHolderEntityId?: string;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the leash breaks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxDistance: number;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the 'spring' effect starts\r\n     * acting to keep this entity close to the entity that leashed\r\n     * it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly softDistance: number;\r\n    static readonly componentId = 'minecraft:leashable';\r\n    /**\r\n     * @remarks\r\n     * Leashes this entity to another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param leashHolder\r\n     * The entity to leash this entity to.\r\n     * @throws\r\n     * Throws if the entity to leash to is over the max distance,\r\n     * and if the player is dead or in spectator mode.\r\n     */\r\n    leashTo(leashHolder: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Unleashes this entity if it is leashed to another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    unleash(): void;\r\n}\r",
            "jsdoc": "/**\r\n * Allows the entity to be leashed. Defines the conditions and\r\n * events for when an entity is leashed.\r\n */\r",
            "properties": [
              {
                "name": "canBeStolen",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hardDistance",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isLeashed",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "maxDistance",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "softDistance",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "leashable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "leashTo",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "leashTo(leashHolder: Entity): void"
              },
              {
                "name": "unleash",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "unleash(): void"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityleashablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityLoadAfterEvent",
            "name": "EntityLoadAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains data related to an entity loaded within the world.\r This could happen when an unloaded chunk is reloaded, or\r when an entity changes dimensions.\r /",
            "definition": "export class EntityLoadAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that was loaded.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains data related to an entity loaded within the world.\r\n * This could happen when an unloaded chunk is reloaded, or\r\n * when an entity changes dimensions.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityloadafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityLoadAfterEventSignal",
            "name": "EntityLoadAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Registers a script-based event handler for handling what\r happens when an entity loads.\r /",
            "definition": "export class EntityLoadAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Method to register an event handler for what happens when an\r\n     * entity loads.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function that handles the load event.\r\n     */\r\n    subscribe(callback: (arg0: EntityLoadAfterEvent) => void): (arg0: EntityLoadAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unregisters a method that was previously subscribed to the\r\n     * subscription event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Original function that was passed into the subscribe event,\r\n     * that is to be unregistered.\r\n     */\r\n    unsubscribe(callback: (arg0: EntityLoadAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Registers a script-based event handler for handling what\r\n * happens when an entity loads.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityloadaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMarkVariantComponent",
            "name": "EntityMarkVariantComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Additional variant value. Can be used to further\r differentiate variants.\r /",
            "definition": "export class EntityMarkVariantComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of the mark variant value for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:mark_variant';\r\n}\r",
            "jsdoc": "/**\r\n * Additional variant value. Can be used to further\r\n * differentiate variants.\r\n */\r",
            "properties": [
              {
                "name": "value",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "mark_variant'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymarkvariantcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementAmphibiousComponent",
            "name": "EntityMovementAmphibiousComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this movement control allows the mob to swim in\r water and walk on land.\r /",
            "definition": "export class EntityMovementAmphibiousComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.amphibious';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this movement control allows the mob to swim in\r\n * water and walk on land.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "movement.amphibious'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementamphibiouscomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementBasicComponent",
            "name": "EntityMovementBasicComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "This component accents the movement of an entity.\r /",
            "definition": "export class EntityMovementBasicComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.basic';\r\n}\r",
            "jsdoc": "/**\r\n * This component accents the movement of an entity.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "movement.basic'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementbasiccomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementComponent",
            "name": "EntityMovementComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the general movement speed of this entity.\r /",
            "definition": "export class EntityMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the general movement speed of this entity.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "movement'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityAttributeComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementFlyComponent",
            "name": "EntityMovementFlyComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this move control causes the mob to fly.\r /",
            "definition": "export class EntityMovementFlyComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.fly';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this move control causes the mob to fly.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "movement.fly'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementflycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementGenericComponent",
            "name": "EntityMovementGenericComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this move control allows a mob to fly, swim,\r climb, etc.\r /",
            "definition": "export class EntityMovementGenericComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.generic';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this move control allows a mob to fly, swim,\r\n * climb, etc.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "movement.generic'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementgenericcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementGlideComponent",
            "name": "EntityMovementGlideComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this movement control allows the mob to glide.\r /",
            "definition": "export class EntityMovementGlideComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Speed in effect when the entity is turning.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly speedWhenTurning: number;\r\n    /**\r\n     * @remarks\r\n     * Start speed during a glide.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly startSpeed: number;\r\n    static readonly componentId = 'minecraft:movement.glide';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this movement control allows the mob to glide.\r\n */\r",
            "properties": [
              {
                "name": "speedWhenTurning",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "startSpeed",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "movement.glide'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementglidecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementHoverComponent",
            "name": "EntityMovementHoverComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this move control causes the mob to hover.\r /",
            "definition": "export class EntityMovementHoverComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.hover';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this move control causes the mob to hover.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "movement.hover'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementhovercomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementJumpComponent",
            "name": "EntityMovementJumpComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Move control that causes the mob to jump as it moves with a\r specified delay between jumps.\r /",
            "definition": "export class EntityMovementJumpComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.jump';\r\n}\r",
            "jsdoc": "/**\r\n * Move control that causes the mob to jump as it moves with a\r\n * specified delay between jumps.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "movement.jump'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementjumpcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementSkipComponent",
            "name": "EntityMovementSkipComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this move control causes the mob to hop as it\r moves.\r /",
            "definition": "export class EntityMovementSkipComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.skip';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this move control causes the mob to hop as it\r\n * moves.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "movement.skip'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementskipcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityMovementSwayComponent",
            "name": "EntityMovementSwayComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this move control causes the mob to sway side to\r side giving the impression it is swimming.\r /",
            "definition": "export class EntityMovementSwayComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Amplitude of the sway motion.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly swayAmplitude: number;\r\n    /**\r\n     * @remarks\r\n     * Amount of sway frequency.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly swayFrequency: number;\r\n    static readonly componentId = 'minecraft:movement.sway';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this move control causes the mob to sway side to\r\n * side giving the impression it is swimming.\r\n */\r",
            "properties": [
              {
                "name": "swayAmplitude",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "swayFrequency",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "movement.sway'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityBaseMovementComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitymovementswaycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityNavigationClimbComponent",
            "name": "EntityNavigationClimbComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows this entity to generate paths that include vertical\r walls (for example, like Minecraft spiders do.)\r /",
            "definition": "export class EntityNavigationClimbComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.climb';\r\n}\r",
            "jsdoc": "/**\r\n * Allows this entity to generate paths that include vertical\r\n * walls (for example, like Minecraft spiders do.)\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "navigation.climb'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityNavigationComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitynavigationclimbcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityNavigationComponent",
            "name": "EntityNavigationComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows this entity to generate paths that include vertical\r walls (for example, like Minecraft spiders do.)\r /",
            "definition": "export class EntityNavigationComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid blocks that cause damage when\r\n     * finding a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidDamageBlocks: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid portals (like nether portals)\r\n     * when finding a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidPortals: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether or not the pathfinder should avoid tiles that are\r\n     * exposed to the sun when creating paths.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidSun: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid water when creating a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can jump out of water\r\n     * (like a dolphin).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBreach: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed door\r\n     * and break it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBreakDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can float.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canFloat: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can jump up blocks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canJump: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed door\r\n     * assuming the AI will open the door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canOpenDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed iron\r\n     * door assuming the AI will open the door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canOpenIronDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether a path can be created through a door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPassDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can start pathing when in the\r\n     * air.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathFromAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel on the\r\n     * surface of the lava.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathOverLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel on the\r\n     * surface of the water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathOverWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it will be pulled down\r\n     * by gravity while in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canSink: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can path anywhere\r\n     * through water and plays swimming animation along that path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canSwim: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can walk on the\r\n     * ground outside water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canWalk: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel in lava\r\n     * like walking on ground.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canWalkInLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can walk on the\r\n     * ground or go underwater.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isAmphibious: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Allows this entity to generate paths that include vertical\r\n * walls (for example, like Minecraft spiders do.)\r\n */\r",
            "properties": [
              {
                "name": "avoidDamageBlocks",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "avoidPortals",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "avoidSun",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "avoidWater",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canBreach",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canBreakDoors",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canFloat",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canJump",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canOpenDoors",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canOpenIronDoors",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canPassDoors",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canPathFromAir",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canPathOverLava",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canPathOverWater",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canSink",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canSwim",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canWalk",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "canWalkInLava",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isAmphibious",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitynavigationcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityNavigationFloatComponent",
            "name": "EntityNavigationFloatComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows this entity to generate paths by flying around the\r air like the regular Ghast.\r /",
            "definition": "export class EntityNavigationFloatComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.float';\r\n}\r",
            "jsdoc": "/**\r\n * Allows this entity to generate paths by flying around the\r\n * air like the regular Ghast.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "navigation.float'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityNavigationComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitynavigationfloatcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityNavigationFlyComponent",
            "name": "EntityNavigationFlyComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows this entity to generate paths in the air (for\r example, like Minecraft parrots do.)\r /",
            "definition": "export class EntityNavigationFlyComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.fly';\r\n}\r",
            "jsdoc": "/**\r\n * Allows this entity to generate paths in the air (for\r\n * example, like Minecraft parrots do.)\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "navigation.fly'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityNavigationComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitynavigationflycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityNavigationGenericComponent",
            "name": "EntityNavigationGenericComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows this entity to generate paths by walking, swimming,\r flying and/or climbing around and jumping up and down a\r block.\r /",
            "definition": "export class EntityNavigationGenericComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.generic';\r\n}\r",
            "jsdoc": "/**\r\n * Allows this entity to generate paths by walking, swimming,\r\n * flying and/or climbing around and jumping up and down a\r\n * block.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "navigation.generic'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityNavigationComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitynavigationgenericcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityNavigationHoverComponent",
            "name": "EntityNavigationHoverComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows this entity to generate paths in the air (for\r example, like the Minecraft Bees do.) Keeps them from\r falling out of the skies and doing predictive movement.\r /",
            "definition": "export class EntityNavigationHoverComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.hover';\r\n}\r",
            "jsdoc": "/**\r\n * Allows this entity to generate paths in the air (for\r\n * example, like the Minecraft Bees do.) Keeps them from\r\n * falling out of the skies and doing predictive movement.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "navigation.hover'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityNavigationComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitynavigationhovercomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityNavigationWalkComponent",
            "name": "EntityNavigationWalkComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows this entity to generate paths by walking around and\r jumping up and down a block like regular mobs.\r /",
            "definition": "export class EntityNavigationWalkComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.walk';\r\n}\r",
            "jsdoc": "/**\r\n * Allows this entity to generate paths by walking around and\r\n * jumping up and down a block like regular mobs.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "navigation.walk'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityNavigationComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitynavigationwalkcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityOnFireComponent",
            "name": "EntityOnFireComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When present on an entity, this entity is on fire.\r ```typescript\r  function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r    skelly.setOnFire(20, true);\r    system.runTimeout(() => {\r     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r      skelly.extinguishFire(true);\r     log(\"Never mind. Fire extinguished.\");\r   }, 20);\r }\r ```\r /",
            "definition": "export class EntityOnFireComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The number of ticks remaining before the fire goes out.\r\n     *\r\n     */\r\n    readonly onFireTicksRemaining: number;\r\n    static readonly componentId = 'minecraft:onfire';\r\n}\r",
            "jsdoc": "/**\r\n * When present on an entity, this entity is on fire.\r\n * @example setOnFire.ts\r\n * ```typescript\r\n * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n *\r\n *   skelly.setOnFire(20, true);\r\n *\r\n *   system.runTimeout(() => {\r\n *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n *\r\n *     skelly.extinguishFire(true);\r\n *     log(\"Never mind. Fire extinguished.\");\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "onFireTicksRemaining",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "onfire'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityonfirecomponent",
              "class"
            ],
            "examples": [
              {
                "title": "setOnFire.ts",
                "code": "import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n\n  skelly.setOnFire(20, true);\r\n\n  system.runTimeout(() => {\r\n    const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n    log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n\n    skelly.extinguishFire(true);\r\n    log(\"Never mind. Fire extinguished.\");\r\n  }, 20);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityProjectileComponent",
            "name": "EntityProjectileComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "The projectile component controls the properties of a\r projectile entity and allows it to be shot in a given\r direction.\r This component is present when the entity has the\r minecraft:projectile component.\r ```typescript\r  function shootArrow(targetLocation: DimensionLocation) {\r   const velocity = { x: 0, y: 1, z: 5 };\r    const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r     x: targetLocation.x,\r     y: targetLocation.y + 2,\r     z: targetLocation.z,\r   });\r    const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r    projectileComp?.shoot(velocity);\r }\r ```\r /",
            "definition": "export class EntityProjectileComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The fraction of the projectile's speed maintained every tick\r\n     * while traveling through air.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    airInertia: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity will be set on fire when hurt. The\r\n     * default burn duration is 5 seconds. This duration can be\r\n     * modified via the onFireTime property. The entity will not\r\n     * catch fire if immune or if the entity is wet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    catchFireOnHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will spawn crit particles when hit\r\n     * by a player. E.g. Player attacking a Shulker bullet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    critParticlesOnProjectileHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will be destroyed when it takes\r\n     * damage. E.g. Player attacking a Shulker bullet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    destroyOnProjectileHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * The gravity applied to the projectile. When the entity is\r\n     * not on the ground, subtracts this amount from the\r\n     * projectile’s change in vertical position every tick. The\r\n     * higher the value, the faster the projectile falls. If\r\n     * negative, the entity will rise instead of fall.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    gravity: number;\r\n    /**\r\n     * @remarks\r\n     * The sound that plays when the projectile hits an entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitEntitySound?: string;\r\n    /**\r\n     * @remarks\r\n     * The sound that plays when the projectile hits a block.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitGroundSound?: string;\r\n    /**\r\n     * @remarks\r\n     * The particle that spawns when the projectile hits something.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitParticle?: string;\r\n    /**\r\n     * @remarks\r\n     * If true and the weather is thunder and the entity has line\r\n     * of sight to the sky, the entity will be struck by lightning\r\n     * when hit. E.g. A thrown Trident with the Channeling\r\n     * enchantment.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    lightningStrikeOnHit: boolean;\r\n    /**\r\n     * @remarks\r\n     * The fraction of the projectile's speed maintained every tick\r\n     * while traveling through a liquid.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    liquidInertia: number;\r\n    /**\r\n     * @remarks\r\n     * Duration in seconds that the entity hit will be on fire for\r\n     * when catchFireOnHurt is set to true.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    onFireTime: number;\r\n    /**\r\n     * @remarks\r\n     * The owner of the projectile. This is used to determine what\r\n     * the projectile can collide with and damage. It also\r\n     * determines which entity is assigned as the attacker.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    owner?: Entity;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will bounce off mobs when no damage\r\n     * is taken. E.g. A spawning wither.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    shouldBounceOnHit: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will stop moving when an entity is\r\n     * hit as thought it had been blocked. E.g. Thrown trident on\r\n     * hit behavior.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    stopOnHit: boolean;\r\n    static readonly componentId = 'minecraft:projectile';\r\n    /**\r\n     * @remarks\r\n     * Shoots the projectile with a given velocity. The projectile\r\n     * will be shot from its current location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param velocity\r\n     * The velocity to fire the projectile. This controls both the\r\n     * speed and direction which which the projectile will be shot.\r\n     * @param options\r\n     * Optional configuration for the shoot.\r\n     * @throws\r\n     * Throws if the component or entity no longer exist.\r\n     */\r\n    shoot(velocity: Vector3, options?: ProjectileShootOptions): void;\r\n}\r",
            "jsdoc": "/**\r\n * The projectile component controls the properties of a\r\n * projectile entity and allows it to be shot in a given\r\n * direction.\r\n * This component is present when the entity has the\r\n * minecraft:projectile component.\r\n * @example shootArrow.ts\r\n * ```typescript\r\n * import { DimensionLocation, EntityProjectileComponent } from \"@minecraft/server\";\r\n *\r\n * function shootArrow(targetLocation: DimensionLocation) {\r\n *   const velocity = { x: 0, y: 1, z: 5 };\r\n *\r\n *   const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 2,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r\n *\r\n *   projectileComp?.shoot(velocity);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "projectile'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "shoot",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "shoot(velocity: Vector3, options?: ProjectileShootOptions): void"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityprojectilecomponent",
              "class"
            ],
            "examples": [
              {
                "title": "shootArrow.ts",
                "code": "import { DimensionLocation, EntityProjectileComponent } from \"@minecraft/server\";\r\n\nfunction shootArrow(targetLocation: DimensionLocation) {\r\n  const velocity = { x: 0, y: 1, z: 5 };\r\n\n  const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 2,\r\n    z: targetLocation.z,\r\n  });\r\n\n  const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r\n\n  projectileComp?.shoot(velocity);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityPushThroughComponent",
            "name": "EntityPushThroughComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Sets the distance through which the entity can push through.\r /",
            "definition": "export class EntityPushThroughComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of the push through distances of this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:push_through';\r\n}\r",
            "jsdoc": "/**\r\n * Sets the distance through which the entity can push through.\r\n */\r",
            "properties": [
              {
                "name": "value",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "push_through'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitypushthroughcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityRemoveAfterEvent",
            "name": "EntityRemoveAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Data for an event that happens when an entity is removed\r from the world (for example, the entity is unloaded because\r it is not close to players.)\r /",
            "definition": "export class EntityRemoveAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Id of the entity that was removed.\r\n     *\r\n     */\r\n    readonly removedEntityId: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of the entity removed - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
            "jsdoc": "/**\r\n * Data for an event that happens when an entity is removed\r\n * from the world (for example, the entity is unloaded because\r\n * it is not close to players.)\r\n */\r",
            "properties": [
              {
                "name": "removedEntityId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "typeId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityremoveafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityRemoveAfterEventSignal",
            "name": "EntityRemoveAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows registration for an event that fires when an entity\r is removed from  the game (for example, unloaded, or a few\r seconds after they are dead.)\r /",
            "definition": "export class EntityRemoveAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Will call your function every time an entity is removed from\r\n     * the game.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call.\r\n     * @param options\r\n     * Additional filtering options for this event.\r\n     * @returns\r\n     * Returns a closure that can be used in subsequent unsubscribe\r\n     * operations.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityRemoveAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityRemoveAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes your function from subsequent calls when an\r\n     * entity is removed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityRemoveAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Allows registration for an event that fires when an entity\r\n * is removed from  the game (for example, unloaded, or a few\r\n * seconds after they are dead.)\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityremoveaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityRemoveBeforeEvent",
            "name": "EntityRemoveBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Data for an event that happens when an entity is being\r removed from the world (for example, the entity is unloaded\r because it is not close to players.)\r /",
            "definition": "export class EntityRemoveBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Reference to an entity that is being removed.\r\n     *\r\n     */\r\n    readonly removedEntity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Data for an event that happens when an entity is being\r\n * removed from the world (for example, the entity is unloaded\r\n * because it is not close to players.)\r\n */\r",
            "properties": [
              {
                "name": "removedEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityremovebeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityRemoveBeforeEventSignal",
            "name": "EntityRemoveBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows registration for an event that fires when an entity\r is being removed from  the game (for example, unloaded, or a\r few seconds after they are dead.)\r /",
            "definition": "export class EntityRemoveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Will call your function every time an entity is being\r\n     * removed from the game.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call.\r\n     * @returns\r\n     * Returns a closure that can be used in subsequent unsubscribe\r\n     * operations.\r\n     */\r\n    subscribe(callback: (arg0: EntityRemoveBeforeEvent) => void): (arg0: EntityRemoveBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes your function from subsequent calls when an\r\n     * entity is being removed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityRemoveBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Allows registration for an event that fires when an entity\r\n * is being removed from  the game (for example, unloaded, or a\r\n * few seconds after they are dead.)\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityremovebeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityRideableComponent",
            "name": "EntityRideableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component adds the capability that an\r entity can be ridden by another entity.\r ```typescript\r  function minibiomes(test: Test) {\r   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r    test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r    const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r    minecartRideableComp?.addRider(pig);\r    test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r }\r register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r ```\r /",
            "definition": "export class EntityRideableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Zero-based index of the seat that can used to control this\r\n     * entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly controllingSeat: number;\r\n    /**\r\n     * @remarks\r\n     * Determines whether interactions are not supported if the\r\n     * entity is crouching.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly crouchingSkipInteract: boolean;\r\n    /**\r\n     * @remarks\r\n     * Set of text that should be displayed when a player is\r\n     * looking to ride on this entity (commonly with touch-screen\r\n     * controls).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly interactText: string;\r\n    /**\r\n     * @remarks\r\n     * The max width a mob can be to be a passenger.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly passengerMaxWidth: number;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will pull in entities that are in the\r\n     * correct family_types into any available seat.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly pullInEntities: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will be picked when looked at by the\r\n     * rider.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly riderCanInteract: boolean;\r\n    /**\r\n     * @remarks\r\n     * Number of seats for riders defined for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly seatCount: number;\r\n    static readonly componentId = 'minecraft:rideable';\r\n    /**\r\n     * @remarks\r\n     * Adds an entity to this entity as a rider.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rider\r\n     * Entity that will become the rider of this entity.\r\n     * @returns\r\n     * True if the rider entity was successfully added.\r\n     * @throws This function can throw errors.\r\n     * @example minibiomes.ts\r\n     * ```typescript\r\n     * import { EntityComponentTypes } from \"@minecraft/server\";\r\n     * import { Test, register } from \"@minecraft/server-gametest\";\r\n     * import { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function minibiomes(test: Test) {\r\n     *   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n     *   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n     *\r\n     *   test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n     *\r\n     *   const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n     *\r\n     *   minecartRideableComp?.addRider(pig);\r\n     *\r\n     *   test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n     * }\r\n     * register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r\n     * ```\r\n     */\r\n    addRider(rider: Entity): boolean;\r\n    /**\r\n     * @remarks\r\n     * Ejects the specified rider of this entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rider\r\n     * Entity that should be ejected from this entity.\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRider(rider: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Ejects all riders of this entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRiders(): void;\r\n    /**\r\n     * @remarks\r\n     * A string-list of entity types that this entity can support\r\n     * as riders.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFamilyTypes(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets a list of the all the entities currently riding this\r\n     * entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRiders(): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Gets a list of positions and number of riders for each\r\n     * position for entities riding this entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getSeats(): Seat[];\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component adds the capability that an\r\n * entity can be ridden by another entity.\r\n * @example minibiomes.ts\r\n * ```typescript\r\n * import { EntityComponentTypes } from \"@minecraft/server\";\r\n * import { Test, register } from \"@minecraft/server-gametest\";\r\n * import { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function minibiomes(test: Test) {\r\n *   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n *   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n *\r\n *   test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n *\r\n *   const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n *\r\n *   minecartRideableComp?.addRider(pig);\r\n *\r\n *   test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n * }\r\n * register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "controllingSeat",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "crouchingSkipInteract",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "interactText",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "passengerMaxWidth",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "pullInEntities",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "riderCanInteract",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "seatCount",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "rideable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "addRider",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "addRider(rider: Entity): boolean"
              },
              {
                "name": "ejectRider",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "ejectRider(rider: Entity): void"
              },
              {
                "name": "ejectRiders",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "ejectRiders(): void"
              },
              {
                "name": "getFamilyTypes",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getFamilyTypes(): string[]"
              },
              {
                "name": "getRiders",
                "parameters": [],
                "returnType": "Entity[]",
                "accessibility": "public",
                "signature": "getRiders(): Entity[]"
              },
              {
                "name": "getSeats",
                "parameters": [],
                "returnType": "Seat[]",
                "accessibility": "public",
                "signature": "getSeats(): Seat[]"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityrideablecomponent",
              "class"
            ],
            "examples": [
              {
                "title": "minibiomes.ts",
                "code": "import { EntityComponentTypes } from \"@minecraft/server\";\r\nimport { Test, register } from \"@minecraft/server-gametest\";\r\nimport { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction minibiomes(test: Test) {\r\n  const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n  const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n\n  test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n\n  const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n\n  minecartRideableComp?.addRider(pig);\r\n\n  test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n}\r\nregister(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityRidingComponent",
            "name": "EntityRidingComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "This component is added to any entity when it is riding\r another entity.\r /",
            "definition": "export class EntityRidingComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity this entity is currently riding on.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly entityRidingOn: Entity;\r\n    static readonly componentId = 'minecraft:riding';\r\n}\r",
            "jsdoc": "/**\r\n * This component is added to any entity when it is riding\r\n * another entity.\r\n */\r",
            "properties": [
              {
                "name": "entityRidingOn",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "riding'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityridingcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntitySaturationComponent",
            "name": "EntitySaturationComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the interactions with this entity for Saturation.\r Wraps the `minecraft.player.saturation` attribute.\r /",
            "definition": "export class EntitySaturationComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.saturation';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the interactions with this entity for Saturation.\r\n * Wraps the `minecraft.player.saturation` attribute.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "player.saturation'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityAttributeComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitysaturationcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityScaleComponent",
            "name": "EntityScaleComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Sets the entity's visual size.\r /",
            "definition": "export class EntityScaleComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value for the scale property set on entities.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:scale';\r\n}\r",
            "jsdoc": "/**\r\n * Sets the entity's visual size.\r\n */\r",
            "properties": [
              {
                "name": "value",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "scale'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityscalecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntitySkinIdComponent",
            "name": "EntitySkinIdComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Skin Id value. Can be used to differentiate skins, such as\r base skins for villagers.\r /",
            "definition": "export class EntitySkinIdComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the value of the skin Id identifier of the entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:skin_id';\r\n}\r",
            "jsdoc": "/**\r\n * Skin Id value. Can be used to differentiate skins, such as\r\n * base skins for villagers.\r\n */\r",
            "properties": [
              {
                "name": "value",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "skin_id'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityskinidcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntitySpawnAfterEvent",
            "name": "EntitySpawnAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains data related to an entity spawning within the\r world.\r ```typescript\r  function logEntitySpawnEvent(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   // register a new function that is called when a new entity is created.\r   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r     if (entityEvent && entityEvent.entity) {\r       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r     } else {\r       log(`The entity event did not work as expected.`, -1);\r     }\r   });\r    system.runTimeout(() => {\r     targetLocation.dimension.spawnEntity(\r       \"minecraft:horse<minecraft:ageable_grow_up>\",\r       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r     );\r   }, 20);\r }\r ```\r /",
            "definition": "export class EntitySpawnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Initialization cause (Spawned, Born ...).\r\n     *\r\n     */\r\n    readonly cause: EntityInitializationCause;\r\n    /**\r\n     * @remarks\r\n     * Entity that was spawned.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains data related to an entity spawning within the\r\n * world.\r\n * @example logEntitySpawnEvent.ts\r\n * ```typescript\r\n * import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function logEntitySpawnEvent(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   // register a new function that is called when a new entity is created.\r\n *   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n *     if (entityEvent && entityEvent.entity) {\r\n *       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n *     } else {\r\n *       log(`The entity event did not work as expected.`, -1);\r\n *     }\r\n *   });\r\n *\r\n *   system.runTimeout(() => {\r\n *     targetLocation.dimension.spawnEntity(\r\n *       \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n *       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n *     );\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "cause",
                "type": "EntityInitializationCause",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityspawnafterevent",
              "class"
            ],
            "examples": [
              {
                "title": "logEntitySpawnEvent.ts",
                "code": "import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { Vector3Utils } from \"@minecraft/math\";\r\n\nfunction logEntitySpawnEvent(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  // register a new function that is called when a new entity is created.\r\n  world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n    if (entityEvent && entityEvent.entity) {\r\n      log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n    } else {\r\n      log(`The entity event did not work as expected.`, -1);\r\n    }\r\n  });\r\n\n  system.runTimeout(() => {\r\n    targetLocation.dimension.spawnEntity(\r\n      \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n      Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n    );\r\n  }, 20);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntitySpawnAfterEventSignal",
            "name": "EntitySpawnAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Registers a script-based event handler for handling what\r happens when an entity spawns.\r /",
            "definition": "export class EntitySpawnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Method to register an event handler for what happens when an\r\n     * entity spawns.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function that handles the spawn event.\r\n     * @example logEntitySpawnEvent.ts\r\n     * ```typescript\r\n     * import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function logEntitySpawnEvent(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   // register a new function that is called when a new entity is created.\r\n     *   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n     *     if (entityEvent && entityEvent.entity) {\r\n     *       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n     *     } else {\r\n     *       log(`The entity event did not work as expected.`, -1);\r\n     *     }\r\n     *   });\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     targetLocation.dimension.spawnEntity(\r\n     *       \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n     *       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n     *     );\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    subscribe(callback: (arg0: EntitySpawnAfterEvent) => void): (arg0: EntitySpawnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unregisters a method that was previously subscribed to the\r\n     * subscription event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Original function that was passed into the subscribe event,\r\n     * that is to be unregistered.\r\n     */\r\n    unsubscribe(callback: (arg0: EntitySpawnAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Registers a script-based event handler for handling what\r\n * happens when an entity spawns.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityspawnaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityStrengthComponent",
            "name": "EntityStrengthComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the entity's ability to carry items. An entity with\r a higher strength would have higher potential carry capacity\r and more item slots.\r /",
            "definition": "export class EntityStrengthComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Maximum strength of this entity, as defined in the entity\r\n     * type definition.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly max: number;\r\n    /**\r\n     * @remarks\r\n     * Current value of the strength component that has been set\r\n     * for entities.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:strength';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the entity's ability to carry items. An entity with\r\n * a higher strength would have higher potential carry capacity\r\n * and more item slots.\r\n */\r",
            "properties": [
              {
                "name": "max",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "value",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "strength'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitystrengthcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityTameableComponent",
            "name": "EntityTameableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the rules for an entity to be tamed by the player.\r /",
            "definition": "export class EntityTameableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a set of items that can be used to tame this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly getTameItems: ItemStack[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed by player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamed: boolean;\r\n    /**\r\n     * @remarks\r\n     * The chance of taming the entity with each item use between\r\n     * 0.0 and 1.0, where 1.0 is 100%\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly probability: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the player that has tamed the entity, or 'undefined'\r\n     * if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayer?: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the id of player that has tamed the entity, or\r\n     * 'undefined' if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayerId?: string;\r\n    static readonly componentId = 'minecraft:tameable';\r\n    /**\r\n     * @remarks\r\n     * Set this entity as tamed by the given player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * The player that this entity should be tamed by.\r\n     * @returns\r\n     * Returns true if the entity was tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tame(player: Player): boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Defines the rules for an entity to be tamed by the player.\r\n */\r",
            "properties": [
              {
                "name": "getTameItems",
                "type": "ItemStack[]",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isTamed",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "probability",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "tameable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "tame",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "tame(player: Player): boolean"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitytameablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityTameMountComponent",
            "name": "EntityTameMountComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains options for taming a rideable entity based on the\r entity that mounts it.\r /",
            "definition": "export class EntityTameMountComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamed: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed by a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamedToPlayer: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the player that has tamed the entity, or 'undefined'\r\n     * if entity is not tamed by a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayer?: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the id of player that has tamed the entity, or\r\n     * 'undefined' if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayerId?: string;\r\n    static readonly componentId = 'minecraft:tamemount';\r\n    /**\r\n     * @remarks\r\n     * Sets this rideable entity as tamed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param showParticles\r\n     * Whether to show effect particles when this entity is tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tame(showParticles: boolean): void;\r\n    /**\r\n     * @remarks\r\n     * Sets this rideable entity as tamed by the given player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param showParticles\r\n     * Whether to show effect particles when this entity is tamed.\r\n     * @param player\r\n     * The player that this entity should be tamed by.\r\n     * @returns\r\n     * Returns true if the entity was tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tameToPlayer(showParticles: boolean, player: Player): boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Contains options for taming a rideable entity based on the\r\n * entity that mounts it.\r\n */\r",
            "properties": [
              {
                "name": "isTamed",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isTamedToPlayer",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "tamemount'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "tame",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "tame(showParticles: boolean): void"
              },
              {
                "name": "tameToPlayer",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "tameToPlayer(showParticles: boolean, player: Player): boolean"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitytamemountcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityType",
            "name": "EntityType",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents information about a type of entity.\r /",
            "definition": "export class EntityType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of this entity type - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
            "jsdoc": "/**\r\n * Represents information about a type of entity.\r\n */\r",
            "properties": [
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitytype",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityTypeFamilyComponent",
            "name": "EntityTypeFamilyComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Identifier of this entity type - for example,\r 'minecraft:skeleton'.",
            "definition": "export class EntityTypeFamilyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:type_family';\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTypeFamilies(): string[];\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    hasTypeFamily(typeFamily: string): boolean;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Identifier of this entity type - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "type_family'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getTypeFamilies",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getTypeFamilies(): string[]"
              },
              {
                "name": "hasTypeFamily",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasTypeFamily(typeFamily: string): boolean"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitytypefamilycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityTypes",
            "name": "EntityTypes",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Used for accessing all entity types currently available for\r use within the world.\r /",
            "definition": "export class EntityTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves an entity type using a string-based identifier.\r\n     *\r\n     */\r\n    static get(identifier: string): EntityType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of all entity types within this world.\r\n     *\r\n     */\r\n    static getAll(): EntityType[];\r\n}\r",
            "jsdoc": "/**\r\n * Used for accessing all entity types currently available for\r\n * use within the world.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "EntityType | undefined",
                "accessibility": "public",
                "signature": "get(identifier: string): EntityType | undefined"
              },
              {
                "name": "getAll",
                "parameters": [],
                "returnType": "EntityType[]",
                "accessibility": "public",
                "signature": "getAll(): EntityType[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitytypes",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityUnderwaterMovementComponent",
            "name": "EntityUnderwaterMovementComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines the general movement speed underwater of this\r entity.\r /",
            "definition": "export class EntityUnderwaterMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:underwater_movement';\r\n}\r",
            "jsdoc": "/**\r\n * Defines the general movement speed underwater of this\r\n * entity.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "underwater_movement'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityAttributeComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityunderwatermovementcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityVariantComponent",
            "name": "EntityVariantComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Used to differentiate the component group of a variant of an\r entity from others. (e.g. ocelot, villager).\r /",
            "definition": "export class EntityVariantComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value for variant for this entity, as specified via\r\n     * components.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:variant';\r\n}\r",
            "jsdoc": "/**\r\n * Used to differentiate the component group of a variant of an\r\n * entity from others. (e.g. ocelot, villager).\r\n */\r",
            "properties": [
              {
                "name": "value",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "variant'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityvariantcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityWantsJockeyComponent",
            "name": "EntityWantsJockeyComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When added, this component signifies that this entity wants\r to become a jockey.\r /",
            "definition": "export class EntityWantsJockeyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:wants_jockey';\r\n}\r",
            "jsdoc": "/**\r\n * When added, this component signifies that this entity wants\r\n * to become a jockey.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "wants_jockey'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitywantsjockeycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ExplosionAfterEvent",
            "name": "ExplosionAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an explosion that has\r happened.\r /",
            "definition": "export class ExplosionAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where the explosion has occurred.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * A collection of blocks impacted by this explosion event.\r\n     *\r\n     */\r\n    getImpactedBlocks(): Block[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * happened.\r\n */\r",
            "properties": [
              {
                "name": "dimension",
                "type": "Dimension",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getImpactedBlocks",
                "parameters": [],
                "returnType": "Block[]",
                "accessibility": "public",
                "signature": "getImpactedBlocks(): Block[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "explosionafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ExplosionAfterEventSignal",
            "name": "ExplosionAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when an explosion\r occurs.\r /",
            "definition": "export class ExplosionAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an explosion\r\n     * occurs.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ExplosionAfterEvent) => void): (arg0: ExplosionAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an explosion\r\n     * occurs.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ExplosionAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when an explosion\r\n * occurs.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "explosionaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ExplosionBeforeEvent",
            "name": "ExplosionBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an explosion that has\r happened.\r /",
            "definition": "export class ExplosionBeforeEvent extends ExplosionAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the explosion event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Updates a collection of blocks impacted by this explosion\r\n     * event.\r\n     *\r\n     * @param blocks\r\n     * New list of blocks that are impacted by this explosion.\r\n     */\r\n    setImpactedBlocks(blocks: Block[]): void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * happened.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "setImpactedBlocks",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setImpactedBlocks(blocks: Block[]): void"
              }
            ],
            "extends": "ExplosionAfterEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "explosionbeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ExplosionBeforeEventSignal",
            "name": "ExplosionBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to before an explosion\r occurs.\r /",
            "definition": "export class ExplosionBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when before an explosion\r\n     * occurs. The callback can optionally change or cancel\r\n     * explosion behavior.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ExplosionBeforeEvent) => void): (arg0: ExplosionBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called from before when an\r\n     * explosion would occur.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ExplosionBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to before an explosion\r\n * occurs.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "explosionbeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.FeedItem",
            "name": "FeedItem",
            "type": "class",
            "module": "@minecraft/server",
            "description": "As part of the Healable component, represents a specific\r item that can be fed to an entity to cause health effects.\r /",
            "definition": "export class FeedItem {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The amount of health this entity gains when fed this item.\r\n     * This number is an integer starting at 0. Sample values can\r\n     * go as high as 40.\r\n     *\r\n     */\r\n    readonly healAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of type of item that can be fed. If a namespace\r\n     * is not specified, 'minecraft:' is assumed. Example values\r\n     * include 'wheat' or 'golden_apple'.\r\n     *\r\n     */\r\n    readonly item: string;\r\n    /**\r\n     * @remarks\r\n     * As part of the Healable component, an optional collection of\r\n     * side effects that can occur from being fed an item.\r\n     *\r\n     */\r\n    getEffects(): FeedItemEffect[];\r\n}\r",
            "jsdoc": "/**\r\n * As part of the Healable component, represents a specific\r\n * item that can be fed to an entity to cause health effects.\r\n */\r",
            "properties": [
              {
                "name": "healAmount",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "item",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getEffects",
                "parameters": [],
                "returnType": "FeedItemEffect[]",
                "accessibility": "public",
                "signature": "getEffects(): FeedItemEffect[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "feeditem",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.FeedItemEffect",
            "name": "FeedItemEffect",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents an effect that is applied as a result of a food\r item being fed to an entity.\r /",
            "definition": "export class FeedItemEffect {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Gets an amplifier that may have been applied to this effect.\r\n     * Valid values are integers starting at 0 and up - but usually\r\n     * ranging between 0 and 4.\r\n     *\r\n     */\r\n    readonly amplifier: number;\r\n    /**\r\n     * @remarks\r\n     * Chance that this effect is applied as a result of the entity\r\n     * being fed this item. Valid values range between 0 and 1.\r\n     *\r\n     */\r\n    readonly chance: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the duration, in ticks, of this effect.\r\n     *\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the identifier of the effect to apply. Example values\r\n     * include 'fire_resistance' or 'regeneration'.\r\n     *\r\n     */\r\n    readonly name: string;\r\n}\r",
            "jsdoc": "/**\r\n * Represents an effect that is applied as a result of a food\r\n * item being fed to an entity.\r\n */\r",
            "properties": [
              {
                "name": "amplifier",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "chance",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "duration",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "name",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "feeditemeffect",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.FluidContainer",
            "name": "FluidContainer",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents constants related to fluid containers.\r /",
            "definition": "export class FluidContainer {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Constant that represents the maximum fill level of a fluid\r\n     * container.\r\n     *\r\n     */\r\n    static readonly maxFillLevel = 6;\r\n    /**\r\n     * @remarks\r\n     * Constant that represents the minimum fill level of a fluid\r\n     * container.\r\n     *\r\n     */\r\n    static readonly minFillLevel = 0;\r\n}\r",
            "jsdoc": "/**\r\n * Represents constants related to fluid containers.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "fluidcontainer",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.GameRuleChangeAfterEvent",
            "name": "GameRuleChangeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a changed world.gameRules\r property.\r /",
            "definition": "export class GameRuleChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The rule identifier pertaining to the changed\r\n     * world.gameRules property.\r\n     *\r\n     */\r\n    readonly rule: GameRule;\r\n    /**\r\n     * @remarks\r\n     * The value of the world.gameRules property after being\r\n     * changed.\r\n     *\r\n     */\r\n    readonly value: boolean | number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a changed world.gameRules\r\n * property.\r\n */\r",
            "properties": [
              {
                "name": "rule",
                "type": "GameRule",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "value",
                "type": "boolean | number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "gamerulechangeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.GameRuleChangeAfterEventSignal",
            "name": "GameRuleChangeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a\r world.gameRules property has changed.\r /",
            "definition": "export class GameRuleChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a world.gameRules\r\n     * property is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: GameRuleChangeAfterEvent) => void): (arg0: GameRuleChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a world.gameRules\r\n     * property is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: GameRuleChangeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a\r\n * world.gameRules property has changed.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "gamerulechangeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.GameRules",
            "name": "GameRules",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents the game rules for a world experience.\r /",
            "definition": "export class GameRules {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandBlockOutput: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandBlocksEnabled: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doDayLightCycle: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doEntityDrops: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doFireTick: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doImmediateRespawn: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doInsomnia: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doLimitedCrafting: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doMobLoot: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doMobSpawning: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doTileDrops: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doWeatherCycle: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    drowningDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fallDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fireDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    freezeDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    functionCommandLimit: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    keepInventory: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    maxCommandChainLength: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    mobGriefing: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    naturalRegeneration: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    playersSleepingPercentage: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    projectilesCanBreakBlocks: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    pvp: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    randomTickSpeed: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    recipesUnlock: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    respawnBlocksExplode: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    sendCommandFeedback: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showBorderEffect: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showCoordinates: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showDaysPlayed: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showDeathMessages: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showRecipeMessages: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showTags: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    spawnRadius: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    tntExplodes: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    tntExplosionDropDecay: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Represents the game rules for a world experience.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "gamerules",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InputInfo",
            "name": "InputInfo",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains the input information for a client instance.\r /",
            "definition": "export class InputInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The last input mode used by the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly lastInputModeUsed: InputMode;\r\n    /**\r\n     * @remarks\r\n     * Whether the player touch input only affects the touchbar or\r\n     * not.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly touchOnlyAffectsHotbar: boolean;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getButtonState(button: InputButton): ButtonState;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getMovementVector(): Vector2;\r\n}\r",
            "jsdoc": "/**\r\n * Contains the input information for a client instance.\r\n */\r",
            "properties": [
              {
                "name": "lastInputModeUsed",
                "type": "InputMode",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "touchOnlyAffectsHotbar",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getButtonState",
                "parameters": [],
                "returnType": "ButtonState",
                "accessibility": "public",
                "signature": "getButtonState(button: InputButton): ButtonState"
              },
              {
                "name": "getMovementVector",
                "parameters": [],
                "returnType": "Vector2",
                "accessibility": "public",
                "signature": "getMovementVector(): Vector2"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "inputinfo",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCompleteUseAfterEvent",
            "name": "ItemCompleteUseAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a chargeable item completing\r being charged.\r /",
            "definition": "export class ItemCompleteUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that has completed charging.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged.\r\n */\r",
            "properties": [
              {
                "name": "itemStack",
                "type": "ItemStack",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "useDuration",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcompleteuseafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCompleteUseAfterEventSignal",
            "name": "ItemCompleteUseAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to the completion of\r charging for a chargeable item.\r /",
            "definition": "export class ItemCompleteUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * completes charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemCompleteUseAfterEvent) => void): (arg0: ItemCompleteUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * completes charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemCompleteUseAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to the completion of\r\n * charging for a chargeable item.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcompleteuseaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCompleteUseEvent",
            "name": "ItemCompleteUseEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a chargeable item completing\r being charged.\r /",
            "definition": "export class ItemCompleteUseEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that has completed charging.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged.\r\n */\r",
            "properties": [
              {
                "name": "itemStack",
                "type": "ItemStack",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcompleteuseevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponent",
            "name": "ItemComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Base class for item components.\r /",
            "definition": "export class ItemComponent extends Component {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Base class for item components.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Component",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentBeforeDurabilityDamageEvent",
            "name": "ItemComponentBeforeDurabilityDamageEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an item before it is damaged\r from hitting an entity.\r /",
            "definition": "export class ItemComponentBeforeDurabilityDamageEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The attacking entity.\r\n     *\r\n     */\r\n    readonly attackingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The damage applied to the item's durability when the event\r\n     * occurs.\r\n     *\r\n     */\r\n    durabilityDamage: number;\r\n    /**\r\n     * @remarks\r\n     * The entity being hit.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to hit the entity.\r\n     *\r\n     */\r\n    itemStack?: ItemStack;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an item before it is damaged\r\n * from hitting an entity.\r\n */\r",
            "properties": [
              {
                "name": "attackingEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hitEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponentbeforedurabilitydamageevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentCompleteUseEvent",
            "name": "ItemComponentCompleteUseEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a chargeable item completing\r being charged via a component.\r /",
            "definition": "export class ItemComponentCompleteUseEvent extends ItemCompleteUseEvent {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged via a component.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "ItemCompleteUseEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponentcompleteuseevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentConsumeEvent",
            "name": "ItemComponentConsumeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a food item being consumed.\r /",
            "definition": "export class ItemComponentConsumeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack that was consumed.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The source entity that consumed the item.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a food item being consumed.\r\n */\r",
            "properties": [
              {
                "name": "itemStack",
                "type": "ItemStack",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponentconsumeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentHitEntityEvent",
            "name": "ItemComponentHitEntityEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding when an item is used to hit\r an entity.\r /",
            "definition": "export class ItemComponentHitEntityEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The attacking entity.\r\n     *\r\n     */\r\n    readonly attackingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Whether the hit landed or had any effect.\r\n     *\r\n     */\r\n    readonly hadEffect: boolean;\r\n    /**\r\n     * @remarks\r\n     * The entity being hit.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to hit the entity.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding when an item is used to hit\r\n * an entity.\r\n */\r",
            "properties": [
              {
                "name": "attackingEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hadEffect",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hitEntity",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponenthitentityevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentMineBlockEvent",
            "name": "ItemComponentMineBlockEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding the mining of a block using\r an item.\r /",
            "definition": "export class ItemComponentMineBlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block impacted by this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to mine the block.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that was mined.\r\n     *\r\n     */\r\n    readonly minedBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The entity that mined the block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding the mining of a block using\r\n * an item.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minedBlockPermutation",
                "type": "BlockPermutation",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponentmineblockevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentRegistry",
            "name": "ItemComponentRegistry",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Provides the functionality for registering custom components\r for items.\r /",
            "definition": "export class ItemComponentRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers an item custom component that can be used in item\r\n     * JSON configuration.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param name\r\n     * The id that represents this custom component. Must have a\r\n     * namespace. This id can be specified in a item's JSON\r\n     * configuration under the 'minecraft:custom_components' item\r\n     * component.\r\n     * @param itemCustomComponent\r\n     * The collection of event functions that will be called when\r\n     * the event occurs on an item using this custom component id.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomComponentInvalidRegistryError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link ItemCustomComponentAlreadyRegisteredError}\r\n     *\r\n     * {@link ItemCustomComponentReloadNewComponentError}\r\n     *\r\n     * {@link ItemCustomComponentReloadNewEventError}\r\n     *\r\n     * {@link ItemCustomComponentReloadVersionError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCustomComponent(name: string, itemCustomComponent: ItemCustomComponent): void;\r\n}\r",
            "jsdoc": "/**\r\n * Provides the functionality for registering custom components\r\n * for items.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "registerCustomComponent",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "registerCustomComponent(name: string, itemCustomComponent: ItemCustomComponent): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponentregistry",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentUseEvent",
            "name": "ItemComponentUseEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding the use of an item.\r /",
            "definition": "export class ItemComponentUseEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack when the item was used.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The player who used the item.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding the use of an item.\r\n */\r",
            "properties": [
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponentuseevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentUseOnEvent",
            "name": "ItemComponentUseOnEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding the use of an item on a block\r via a component.\r /",
            "definition": "export class ItemComponentUseOnEvent extends ItemUseOnEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that used the item on the block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that the item was used on.\r\n     *\r\n     */\r\n    readonly usedOnBlockPermutation: BlockPermutation;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding the use of an item on a block\r\n * via a component.\r\n */\r",
            "properties": [
              {
                "name": "source",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "usedOnBlockPermutation",
                "type": "BlockPermutation",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "ItemUseOnEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponentuseonevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCompostableComponent",
            "name": "ItemCompostableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When present, the item can be composted in the composter\r block if the composting chance is in the range [1 - 100].\r /",
            "definition": "export class ItemCompostableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This is the percent chance of the item composting in the\r\n     * composter block and generating a compost layer. Note this\r\n     * api will also return the composting chance for vanilla items\r\n     * that are compostable but do not use the compostable item\r\n     * component.\r\n     *\r\n     * @throws\r\n     * Throws if value outside the range [1 - 100]\r\n     */\r\n    readonly compostingChance: number;\r\n    static readonly componentId = 'minecraft:compostable';\r\n}\r",
            "jsdoc": "/**\r\n * When present, the item can be composted in the composter\r\n * block if the composting chance is in the range [1 - 100].\r\n */\r",
            "properties": [
              {
                "name": "compostingChance",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "compostable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "ItemComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcompostablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCooldownComponent",
            "name": "ItemCooldownComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When present on an item, this item has a cooldown effect\r when used by entities.\r /",
            "definition": "export class ItemCooldownComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Represents the cooldown category that this item is\r\n     * associated with.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly cooldownCategory: string;\r\n    /**\r\n     * @remarks\r\n     * Amount of time, in ticks, it will take this item to\r\n     * cooldown.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly cooldownTicks: number;\r\n    static readonly componentId = 'minecraft:cooldown';\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getCooldownTicksRemaining(player: Player): number;\r\n    /**\r\n     * @remarks\r\n     * Will return true if the item is the cooldown category passed\r\n     * in and false otherwise.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cooldownCategory\r\n     * The cooldown category that might be associated with this\r\n     * item.\r\n     * @returns\r\n     * True if the item is the given cooldown category.\r\n     * @throws This function can throw errors.\r\n     */\r\n    isCooldownCategory(cooldownCategory: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Starts a new cooldown period for this item.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    startCooldown(player: Player): void;\r\n}\r",
            "jsdoc": "/**\r\n * When present on an item, this item has a cooldown effect\r\n * when used by entities.\r\n */\r",
            "properties": [
              {
                "name": "cooldownCategory",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "cooldownTicks",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "cooldown'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getCooldownTicksRemaining",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getCooldownTicksRemaining(player: Player): number"
              },
              {
                "name": "isCooldownCategory",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isCooldownCategory(cooldownCategory: string): boolean"
              },
              {
                "name": "startCooldown",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "startCooldown(player: Player): void"
              }
            ],
            "extends": "ItemComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcooldowncomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCustomComponentInstance",
            "name": "ItemCustomComponentInstance",
            "type": "class",
            "module": "@minecraft/server",
            "description": "An instance of a custom component on an item.\r /",
            "definition": "export class ItemCustomComponentInstance extends ItemComponent {\n    private constructor();\r\n    readonly customComponentParameters: CustomComponentParameters;\r\n}\r",
            "jsdoc": "/**\r\n * An instance of a custom component on an item.\r\n */\r",
            "properties": [
              {
                "name": "customComponentParameters",
                "type": "CustomComponentParameters",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "ItemComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcustomcomponentinstance",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemDurabilityComponent",
            "name": "ItemDurabilityComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When present on an item, this item can take damage in the\r process of being used. Note that this component only applies\r to data-driven items.\r ```typescript\r  function giveHurtDiamondSword(\r     targetLocation: DimensionLocation\r ) {\r   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r    const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r    if (durabilityComponent !== undefined) {\r     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r   }\r    for (const player of world.getAllPlayers()) {\r     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r     if (inventory && inventory.container) {\r       inventory.container.addItem(hurtDiamondSword);\r     }\r   }\r }\r ```\r /",
            "definition": "export class ItemDurabilityComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the current damage level of this particular item.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    damage: number;\r\n    /**\r\n     * @remarks\r\n     * Represents the amount of damage that this item can take\r\n     * before breaking.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxDurability: number;\r\n    static readonly componentId = 'minecraft:durability';\r\n    /**\r\n     * @remarks\r\n     * Returns the maximum chance that this item would be damaged\r\n     * using the damageRange property, given an unbreaking\r\n     * enchantment level.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param unbreakingEnchantmentLevel\r\n     * Unbreaking factor to consider in factoring the damage\r\n     * chance. Incoming unbreaking parameter must be within the\r\n     * range [0, 3].\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDamageChance(unbreakingEnchantmentLevel?: number): number;\r\n    /**\r\n     * @remarks\r\n     * A range of numbers that is used to calculate the damage\r\n     * chance for an item. The damage chance will fall within this\r\n     * range.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDamageChanceRange(): minecraftcommon.NumberRange;\r\n}\r",
            "jsdoc": "/**\r\n * When present on an item, this item can take damage in the\r\n * process of being used. Note that this component only applies\r\n * to data-driven items.\r\n * @example giveHurtDiamondSword.ts\r\n * ```typescript\r\n * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function giveHurtDiamondSword(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n *\r\n *   const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n *\r\n *   if (durabilityComponent !== undefined) {\r\n *     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n *   }\r\n *\r\n *   for (const player of world.getAllPlayers()) {\r\n *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n *     if (inventory && inventory.container) {\r\n *       inventory.container.addItem(hurtDiamondSword);\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "maxDurability",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "durability'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getDamageChance",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getDamageChance(unbreakingEnchantmentLevel?: number): number"
              },
              {
                "name": "getDamageChanceRange",
                "parameters": [],
                "returnType": "minecraftcommon.NumberRange",
                "accessibility": "public",
                "signature": "getDamageChanceRange(): minecraftcommon.NumberRange"
              }
            ],
            "extends": "ItemComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemdurabilitycomponent",
              "class"
            ],
            "examples": [
              {
                "title": "giveHurtDiamondSword.ts",
                "code": "import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction giveHurtDiamondSword(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n\n  const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n\n  if (durabilityComponent !== undefined) {\r\n    durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n  }\r\n\n  for (const player of world.getAllPlayers()) {\r\n    const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n    if (inventory && inventory.container) {\r\n      inventory.container.addItem(hurtDiamondSword);\r\n    }\r\n  }\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemDyeableComponent",
            "name": "ItemDyeableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When present on an item, this item can be dyed.\r /",
            "definition": "export class ItemDyeableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Sets and returns the current color of the item.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    color?: RGB;\r\n    /**\r\n     * @remarks\r\n     * Returns the default color of the item.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly defaultColor?: RGB;\r\n    static readonly componentId = 'minecraft:dyeable';\r\n}\r",
            "jsdoc": "/**\r\n * When present on an item, this item can be dyed.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "dyeable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "ItemComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemdyeablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemEnchantableComponent",
            "name": "ItemEnchantableComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When present on an item, this item can have enchantments\r applied to it.\r /",
            "definition": "export class ItemEnchantableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly slots: EnchantmentSlot[];\r\n    static readonly componentId = 'minecraft:enchantable';\r\n    /**\r\n     * @remarks\r\n     * Adds an enchantment to the item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantment\r\n     * The enchantment interface to be added.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if the enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     * ScriptItemEnchantmentTypeNotCompatibleError: Exception\r\n     * thrown if the enchantment is not compatible with the item\r\n     * stack.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeNotCompatibleError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addEnchantment(enchantment: Enchantment): void;\r\n    /**\r\n     * @remarks\r\n     * Adds a list of enchantments to the item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantments\r\n     * The list of enchantments to be added.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if any\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if any enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     * ScriptItemEnchantmentTypeNotCompatibleError: Exception\r\n     * thrown if any enchantment is not compatible with the item\r\n     * stack.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeNotCompatibleError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addEnchantments(enchantments: Enchantment[]): void;\r\n    /**\r\n     * @remarks\r\n     * Checks whether an enchantment can be added to the item\r\n     * stack.\r\n     *\r\n     * @param enchantment\r\n     * The enchantment interface to be added.\r\n     * @returns\r\n     * Returns true if the enchantment can be added to the item\r\n     * stack.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if the enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    canAddEnchantment(enchantment: Enchantment): boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets the enchantment of a given type from the item stack.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to get.\r\n     * @returns\r\n     * Returns the enchantment if it exists on the item stack.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    getEnchantment(enchantmentType: EnchantmentType | string): Enchantment | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all enchantments on the item stack.\r\n     *\r\n     * @returns\r\n     * Returns a list of enchantments on the item stack.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEnchantments(): Enchantment[];\r\n    /**\r\n     * @remarks\r\n     * Checks whether an item stack has a given enchantment type.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to check for.\r\n     * @returns\r\n     * Returns true if the item stack has the enchantment type.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    hasEnchantment(enchantmentType: EnchantmentType | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes all enchantments applied to this item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeAllEnchantments(): void;\r\n    /**\r\n     * @remarks\r\n     * Removes an enchantment of the given type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to remove.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    removeEnchantment(enchantmentType: EnchantmentType | string): void;\r\n}\r",
            "jsdoc": "/**\r\n * When present on an item, this item can have enchantments\r\n * applied to it.\r\n */\r",
            "properties": [
              {
                "name": "slots",
                "type": "EnchantmentSlot[]",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "enchantable'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "addEnchantment",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "addEnchantment(enchantment: Enchantment): void"
              },
              {
                "name": "addEnchantments",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "addEnchantments(enchantments: Enchantment[]): void"
              },
              {
                "name": "canAddEnchantment",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "canAddEnchantment(enchantment: Enchantment): boolean"
              },
              {
                "name": "getEnchantment",
                "parameters": [],
                "returnType": "Enchantment | undefined",
                "accessibility": "public",
                "signature": "getEnchantment(enchantmentType: EnchantmentType | string): Enchantment | undefined"
              },
              {
                "name": "getEnchantments",
                "parameters": [],
                "returnType": "Enchantment[]",
                "accessibility": "public",
                "signature": "getEnchantments(): Enchantment[]"
              },
              {
                "name": "hasEnchantment",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasEnchantment(enchantmentType: EnchantmentType | string): boolean"
              },
              {
                "name": "removeAllEnchantments",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "removeAllEnchantments(): void"
              },
              {
                "name": "removeEnchantment",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "removeEnchantment(enchantmentType: EnchantmentType | string): void"
              }
            ],
            "extends": "ItemComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemenchantablecomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemFoodComponent",
            "name": "ItemFoodComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "When present on an item, this item is consumable by\r entities. Note that this component only applies to\r data-driven items.\r /",
            "definition": "export class ItemFoodComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, the player can always eat this item (even when not\r\n     * hungry).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canAlwaysEat: boolean;\r\n    /**\r\n     * @remarks\r\n     * Represents how much nutrition this food item will give an\r\n     * entity when eaten.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly nutrition: number;\r\n    /**\r\n     * @remarks\r\n     * When an item is eaten, this value is used according to this\r\n     * formula (nutrition * saturation_modifier * 2) to apply a\r\n     * saturation buff.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly saturationModifier: number;\r\n    /**\r\n     * @remarks\r\n     * When specified, converts the active item to the one\r\n     * specified by this property.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly usingConvertsTo: string;\r\n    static readonly componentId = 'minecraft:food';\r\n}\r",
            "jsdoc": "/**\r\n * When present on an item, this item is consumable by\r\n * entities. Note that this component only applies to\r\n * data-driven items.\r\n */\r",
            "properties": [
              {
                "name": "canAlwaysEat",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "nutrition",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "saturationModifier",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "usingConvertsTo",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minecraft",
                "type": "food'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "ItemComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemfoodcomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemReleaseUseAfterEvent",
            "name": "ItemReleaseUseAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a chargeable item when the\r player has finished using the item and released the build\r action.\r /",
            "definition": "export class ItemReleaseUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that triggered this item event.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a chargeable item when the\r\n * player has finished using the item and released the build\r\n * action.\r\n */\r",
            "properties": [
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "useDuration",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemreleaseuseafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemReleaseUseAfterEventSignal",
            "name": "ItemReleaseUseAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to the releasing of\r charging for a chargeable item.\r /",
            "definition": "export class ItemReleaseUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * is released from charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemReleaseUseAfterEvent) => void): (arg0: ItemReleaseUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * is released from charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemReleaseUseAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to the releasing of\r\n * charging for a chargeable item.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemreleaseuseaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStack",
            "name": "ItemStack",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Defines a collection of items.\r ```typescript\r  function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r    const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r    log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r    log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r    log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r }\r ```\r ```typescript\r  function givePlayerEquipment(\r     targetLocation: DimensionLocation\r ) {\r   const players = world.getAllPlayers();\r    const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r   const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r    const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r   if (equipmentCompPlayer) {\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r   }\r    const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r   if (equipmentCompArmorStand) {\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r   }\r }\r ```\r ```typescript\r  function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r    targetLocation.dimension.spawnItem(featherItem, targetLocation);\r   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r }\r ```\r /",
            "definition": "export class ItemStack {\n    /**\r\n     * @remarks\r\n     * Number of the items in the stack. Valid values range between\r\n     * 1-255. The provided value will be clamped to the item's\r\n     * maximum stack size.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the value is outside the range of 1-255.\r\n     */\r\n    amount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item is stackable. An item is considered\r\n     * stackable if the item's maximum stack size is greater than 1\r\n     * and the item does not contain any custom data or properties.\r\n     *\r\n     */\r\n    readonly isStackable: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets whether the item is kept on death.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    keepOnDeath: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this items's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets the item's lock mode. The default value is\r\n     * `ItemLockMode.none`.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    lockMode: ItemLockMode;\r\n    /**\r\n     * @remarks\r\n     * The maximum stack size. This value varies depending on the\r\n     * type of item. For example, torches have a maximum stack size\r\n     * of 64, while eggs have a maximum stack size of 16.\r\n     *\r\n     */\r\n    readonly maxAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Given name of this stack of items. The name tag is displayed\r\n     * when hovering over the item. Setting the name tag to an\r\n     * empty string or `undefined` will remove the name tag.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the length exceeds 255 characters.\r\n     */\r\n    nameTag?: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the item.\r\n     *\r\n     */\r\n    readonly 'type': ItemType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of items for the stack. If a\r\n     * namespace is not specified, 'minecraft:' is assumed.\r\n     * Examples include 'wheat' or 'apple'.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Creates a new instance of a stack of items for use in the\r\n     * world.\r\n     *\r\n     * @param itemType\r\n     * Type of item to create. See the {@link\r\n     * @minecraft/vanilla-data.MinecraftItemTypes} enumeration for\r\n     * a list of standard item types in Minecraft experiences.\r\n     * @param amount\r\n     * Number of items to place in the stack, between 1-255. The\r\n     * provided value will be clamped to the item's maximum stack\r\n     * size. Note that certain items can only have one item in the\r\n     * stack.\r\n     * Defaults to: 1\r\n     * @throws\r\n     * Throws if `itemType` is invalid, or if `amount` is outside\r\n     * the range of 1-255.\r\n     */\r\n    constructor(itemType: ItemType | string, amount?: number);\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * item stack.\r\n     *\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Creates an exact copy of the item stack, including any\r\n     * custom data or properties.\r\n     *\r\n     * @returns\r\n     * Returns a copy of this item stack.\r\n     */\r\n    clone(): ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Get the list of block types this item can break in Adventure\r\n     * mode.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getCanDestroy(): string[];\r\n    /**\r\n     * @remarks\r\n     * Get the list of block types this item can be placed on in\r\n     * Adventure mode.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getCanPlaceOn(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for an item stack.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:food'). If\r\n     * no namespace prefix is specified, 'minecraft:' is assumed.\r\n     * Available component IDs are those in the {@link\r\n     * ItemComponentTypes} enum and custom component IDs registered\r\n     * with the {@link ItemComponentRegistry}.\r\n     * @returns\r\n     * Returns the component if it exists on the item stack,\r\n     * otherwise undefined.\r\n     * @example giveHurtDiamondSword.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function giveHurtDiamondSword(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n     *\r\n     *   const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n     *\r\n     *   if (durabilityComponent !== undefined) {\r\n     *     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n     *   }\r\n     *\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     if (inventory && inventory.container) {\r\n     *       inventory.container.addItem(hurtDiamondSword);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getComponent<T extends string>(componentId: T): ItemComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all components that are both present on this item\r\n     * stack and supported by the API.\r\n     *\r\n     */\r\n    getComponents(): ItemComponent[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this entity.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * @returns\r\n     * An array of lore lines. If the item does not have lore,\r\n     * returns an empty array.\r\n     */\r\n    getLore(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of tags associated with this item stack.\r\n     *\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if the specified component is present on this\r\n     * item stack.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:food') to\r\n     * retrieve. If no namespace prefix is specified, 'minecraft:'\r\n     * is assumed.\r\n     */\r\n    hasComponent(componentId: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Checks whether this item stack has a particular tag\r\n     * associated with it.\r\n     *\r\n     * @param tag\r\n     * Tag to search for.\r\n     * @returns\r\n     * True if the Item Stack has the tag associated with it, else\r\n     * false.\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`. This is determined by comparing the item\r\n     * type and any custom data and properties associated with the\r\n     * item stacks. The amount of each item stack is not taken into\r\n     * consideration, but for non-stackable items this will always\r\n     * return false.\r\n     *\r\n     * @param itemStack\r\n     * ItemStack to check stacking compatibility with.\r\n     * @returns\r\n     * True if the Item Stack is stackable with the itemStack\r\n     * passed in. False for non-stackable items.\r\n     */\r\n    isStackableWith(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * Version safe way of checking if an item matches.\r\n     *\r\n     * @param itemName\r\n     * Identifier of the item.\r\n     * @param states\r\n     *  Applicable only for blocks. An optional set of states to\r\n     * compare against. If states is not specified, matches checks\r\n     * against the set of types more broadly.\r\n     * @returns\r\n     * Returns a boolean whether the specified item matches.\r\n     */\r\n    matches(itemName: string, states?: Record<string, boolean | number | string>): boolean;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can break in Adventure\r\n     * mode. The block names are displayed in the item's tooltip.\r\n     * Setting the value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * String list of block types that the item can destroy.\r\n     * @throws\r\n     * Throws if any of the provided block identifiers are invalid.\r\n     * @example giveDestroyRestrictedPickaxe.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function giveDestroyRestrictedPickaxe(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const specialPickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe);\r\n     *     specialPickaxe.setCanDestroy([MinecraftItemTypes.Cobblestone, MinecraftItemTypes.Obsidian]);\r\n     *\r\n     *     const inventory = player.getComponent(\"inventory\") as EntityInventoryComponent;\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *       return;\r\n     *     }\r\n     *\r\n     *     inventory.container.addItem(specialPickaxe);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    setCanDestroy(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can be placed on in\r\n     * Adventure mode. This is only applicable to block items. The\r\n     * block names are displayed in the item's tooltip. Setting the\r\n     * value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * String list of block types that the item can be placed on.\r\n     * @throws\r\n     * Throws if any of the provided block identifiers are invalid.\r\n     * @example givePlaceRestrictedGoldBlock.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function givePlaceRestrictedGoldBlock(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const specialGoldBlock = new ItemStack(MinecraftItemTypes.GoldBlock);\r\n     *     specialGoldBlock.setCanPlaceOn([MinecraftItemTypes.GrassBlock, MinecraftItemTypes.Dirt]);\r\n     *\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *       return;\r\n     *     }\r\n     *\r\n     *     inventory.container.addItem(specialGoldBlock);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    setCanPlaceOn(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value. Note: This function\r\n     * only works with non-stackable items.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the item stack is stackable.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the lore value - a secondary display string - for an\r\n     * ItemStack. The lore list is cleared if set to an empty\r\n     * string or undefined.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param loreList\r\n     * List of lore lines. Each element in the list represents a\r\n     * new line. The maximum lore line count is 20. The maximum\r\n     * lore line length is 50 characters.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     * @example diamondAwesomeSword.ts\r\n     * ```typescript\r\n     * import { EntityComponentTypes, ItemStack, Player } from '@minecraft/server';\r\n     * import { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n     *\r\n     * function giveAwesomeSword(player: Player) {\r\n     *     const diamondAwesomeSword = new ItemStack(MinecraftItemTypes.DiamondSword, 1);\r\n     *     diamondAwesomeSword.setLore([\r\n     *         '§c§lDiamond Sword of Awesome§r',\r\n     *          '+10 coolness', '§p+4 shiny§r'\r\n     *     ]);\r\n     *\r\n     *     // hover over/select the item in your inventory to see the lore.\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory);\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *         return;\r\n     *     }\r\n     *\r\n     *     inventory.container.setItem(0, diamondAwesomeSword);\r\n     * }\r\n     * ```\r\n     */\r\n    setLore(loreList?: string[]): void;\r\n}\r",
            "jsdoc": "/**\r\n * Defines a collection of items.\r\n * @example itemStacks.ts\r\n * ```typescript\r\n * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n *   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n *   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n *\r\n *   const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n *   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n *   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n *\r\n *   log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n *\r\n *   log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n *\r\n *   log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n * }\r\n * ```\r\n * @example givePlayerEquipment.ts\r\n * ```typescript\r\n * import { world, ItemStack, EntityEquippableComponent, EquipmentSlot, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function givePlayerEquipment(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getAllPlayers();\r\n *\r\n *   const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r\n *   const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r\n *\r\n *   const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n *   if (equipmentCompPlayer) {\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n *   }\r\n *\r\n *   const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n *   if (equipmentCompArmorStand) {\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n *   }\r\n * }\r\n * ```\r\n * @example spawnFeatherItem.ts\r\n * ```typescript\r\n * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n *\r\n *   targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n *   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "isStackable",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "localizationKey",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "maxAmount",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "typeId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "clearDynamicProperties",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearDynamicProperties(): void"
              },
              {
                "name": "clone",
                "parameters": [],
                "returnType": "ItemStack",
                "accessibility": "public",
                "signature": "clone(): ItemStack"
              },
              {
                "name": "getCanDestroy",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getCanDestroy(): string[]"
              },
              {
                "name": "getCanPlaceOn",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getCanPlaceOn(): string[]"
              },
              {
                "name": "getComponents",
                "parameters": [],
                "returnType": "ItemComponent[]",
                "accessibility": "public",
                "signature": "getComponents(): ItemComponent[]"
              },
              {
                "name": "getDynamicProperty",
                "parameters": [],
                "returnType": "boolean | number | string | Vector3 | undefined",
                "accessibility": "public",
                "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
              },
              {
                "name": "getDynamicPropertyIds",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getDynamicPropertyIds(): string[]"
              },
              {
                "name": "getDynamicPropertyTotalByteCount",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getDynamicPropertyTotalByteCount(): number"
              },
              {
                "name": "getLore",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getLore(): string[]"
              },
              {
                "name": "getTags",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getTags(): string[]"
              },
              {
                "name": "hasComponent",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasComponent(componentId: string): boolean"
              },
              {
                "name": "hasTag",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasTag(tag: string): boolean"
              },
              {
                "name": "isStackableWith",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isStackableWith(itemStack: ItemStack): boolean"
              },
              {
                "name": "matches",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "matches(itemName: string, states?: Record<string, boolean | number | string>): boolean"
              },
              {
                "name": "setCanDestroy",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setCanDestroy(blockIdentifiers?: string[]): void"
              },
              {
                "name": "setCanPlaceOn",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setCanPlaceOn(blockIdentifiers?: string[]): void"
              },
              {
                "name": "setDynamicProperty",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
              },
              {
                "name": "setLore",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setLore(loreList?: string[]): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstack",
              "class"
            ],
            "examples": [
              {
                "title": "itemStacks.ts",
                "code": "import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n  const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n  const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n\n  const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n  const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n  const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n\n  log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n  targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n\n  log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n  targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n\n  log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n  targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n}"
              },
              {
                "title": "givePlayerEquipment.ts",
                "code": "import { world, ItemStack, EntityEquippableComponent, EquipmentSlot, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction givePlayerEquipment(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getAllPlayers();\r\n\n  const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r\n  const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r\n\n  const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n  if (equipmentCompPlayer) {\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n  }\r\n\n  const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n  if (equipmentCompArmorStand) {\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n  }\r\n}"
              },
              {
                "title": "spawnFeatherItem.ts",
                "code": "import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n\n  targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n  log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStartUseAfterEvent",
            "name": "ItemStartUseAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a chargeable item starting\r to be charged.\r /",
            "definition": "export class ItemStartUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is starting to be charged.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a chargeable item starting\r\n * to be charged.\r\n */\r",
            "properties": [
              {
                "name": "itemStack",
                "type": "ItemStack",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "useDuration",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstartuseafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStartUseAfterEventSignal",
            "name": "ItemStartUseAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to the start of\r charging for a chargeable item.\r /",
            "definition": "export class ItemStartUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * starts charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStartUseAfterEvent) => void): (arg0: ItemStartUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * starts charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStartUseAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to the start of\r\n * charging for a chargeable item.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstartuseaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStartUseOnAfterEvent",
            "name": "ItemStartUseOnAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to an item being used on a\r block. This event fires when a player presses the the Use\r Item / Place Block button to successfully use an item or\r place a block. Fires for the first block that is interacted\r with when performing a build action. Note: This event cannot\r be used with Hoe or Axe items.\r /",
            "definition": "export class ItemStartUseOnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that the item is used on.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that an item is being used on.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is starting to be used. Can be\r\n     * undefined in some gameplay scenarios like pushing a button\r\n     * with an empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to an item being used on a\r\n * block. This event fires when a player presses the the Use\r\n * Item / Place Block button to successfully use an item or\r\n * place a block. Fires for the first block that is interacted\r\n * with when performing a build action. Note: This event cannot\r\n * be used with Hoe or Axe items.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "blockFace",
                "type": "Direction",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstartuseonafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStartUseOnAfterEventSignal",
            "name": "ItemStartUseOnAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to an item starting\r being used on a block event.\r /",
            "definition": "export class ItemStartUseOnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStartUseOnAfterEvent) => void): (arg0: ItemStartUseOnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStartUseOnAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to an item starting\r\n * being used on a block event.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstartuseonaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStopUseAfterEvent",
            "name": "ItemStopUseAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a chargeable item has\r finished an items use cycle, or when the player has released\r the use action with the item.\r /",
            "definition": "export class ItemStopUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is stopping being charged.\r\n     * ItemStopUseAfterEvent can be called when teleporting to a\r\n     * different dimension and this can be undefined.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a chargeable item has\r\n * finished an items use cycle, or when the player has released\r\n * the use action with the item.\r\n */\r",
            "properties": [
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "useDuration",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstopuseafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStopUseAfterEventSignal",
            "name": "ItemStopUseAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to the stopping of\r charging for an item that has a registered\r minecraft:chargeable component.\r /",
            "definition": "export class ItemStopUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * stops charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStopUseAfterEvent) => void): (arg0: ItemStopUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * stops charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStopUseAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to the stopping of\r\n * charging for an item that has a registered\r\n * minecraft:chargeable component.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstopuseaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStopUseOnAfterEvent",
            "name": "ItemStopUseOnAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to an item that has stopped\r being used on a block. This event fires when a player\r successfully uses an item or places a block by pressing the\r Use Item / Place Block button. If multiple blocks are\r placed, this event will only occur once at the beginning of\r the block placement. Note: This event cannot be used with\r Hoe or Axe items.\r /",
            "definition": "export class ItemStopUseOnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that the item is used on.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is being used on a block.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to an item that has stopped\r\n * being used on a block. This event fires when a player\r\n * successfully uses an item or places a block by pressing the\r\n * Use Item / Place Block button. If multiple blocks are\r\n * placed, this event will only occur once at the beginning of\r\n * the block placement. Note: This event cannot be used with\r\n * Hoe or Axe items.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstopuseonafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemStopUseOnAfterEventSignal",
            "name": "ItemStopUseOnAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to an item stops used\r on a block event.\r /",
            "definition": "export class ItemStopUseOnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item stops being\r\n     * used on a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStopUseOnAfterEvent) => void): (arg0: ItemStopUseOnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStopUseOnAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to an item stops used\r\n * on a block event.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemstopuseonaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemType",
            "name": "ItemType",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents the type of an item - for example, Wool.\r /",
            "definition": "export class ItemType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the identifier of the item type - for example,\r\n     * 'minecraft:apple'.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
            "jsdoc": "/**\r\n * Represents the type of an item - for example, Wool.\r\n */\r",
            "properties": [
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemtype",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemTypes",
            "name": "ItemTypes",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Returns the set of item types registered within Minecraft.\r /",
            "definition": "export class ItemTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a specific item type, if available within Minecraft.\r\n     *\r\n     */\r\n    static get(itemId: string): ItemType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves all available item types registered within\r\n     * Minecraft.\r\n     *\r\n     */\r\n    static getAll(): ItemType[];\r\n}\r",
            "jsdoc": "/**\r\n * Returns the set of item types registered within Minecraft.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "ItemType | undefined",
                "accessibility": "public",
                "signature": "get(itemId: string): ItemType | undefined"
              },
              {
                "name": "getAll",
                "parameters": [],
                "returnType": "ItemType[]",
                "accessibility": "public",
                "signature": "getAll(): ItemType[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemtypes",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemUseAfterEvent",
            "name": "ItemUseAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to an item being used on a\r block. This event fires when an item used by a player\r successfully triggers an entity interaction.\r /",
            "definition": "export class ItemUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is being used.\r\n     *\r\n     */\r\n    itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to an item being used on a\r\n * block. This event fires when an item used by a player\r\n * successfully triggers an entity interaction.\r\n */\r",
            "properties": [
              {
                "name": "source",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemuseafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemUseAfterEventSignal",
            "name": "ItemUseAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to an item use event.\r /",
            "definition": "export class ItemUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemUseAfterEvent) => void): (arg0: ItemUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemUseAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to an item use event.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemuseaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemUseBeforeEvent",
            "name": "ItemUseBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to an item being used.\r /",
            "definition": "export class ItemUseBeforeEvent extends ItemUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, this will cancel the item use behavior.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to an item being used.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "ItemUseAfterEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemusebeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemUseBeforeEventSignal",
            "name": "ItemUseBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that fire before an item is used.\r /",
            "definition": "export class ItemUseBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemUseBeforeEvent) => void): (arg0: ItemUseBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemUseBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that fire before an item is used.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemusebeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemUseOnEvent",
            "name": "ItemUseOnEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding the use of an item on a\r block.\r /",
            "definition": "export class ItemUseOnEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block impacted by this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that the item was used on.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block that the item was used on.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The item stack used on the block.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding the use of an item on a\r\n * block.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "blockFace",
                "type": "Direction",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "faceLocation",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemStack",
                "type": "ItemStack",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemuseonevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.LeverActionAfterEvent",
            "name": "LeverActionAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to a lever\r activating or deactivating.\r ```typescript\r  function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a lever\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const lever = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || lever === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   lever.setPermutation(\r     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r   );\r    world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r     const eventLoc = leverActionEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Lever activate event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
            "definition": "export class LeverActionAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * True if the lever is activated (that is, transmitting\r\n     * power).\r\n     *\r\n     */\r\n    readonly isPowered: boolean;\r\n    /**\r\n     * @remarks\r\n     * Optional player that triggered the lever activation.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to a lever\r\n * activating or deactivating.\r\n * @example leverActionEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a lever\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const lever = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || lever === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   lever.setPermutation(\r\n *     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n *   );\r\n *\r\n *   world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n *     const eventLoc = leverActionEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Lever activate event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "isPowered",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "leveractionafterevent",
              "class"
            ],
            "examples": [
              {
                "title": "leverActionEvent.ts",
                "code": "import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a lever\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const lever = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || lever === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  lever.setPermutation(\r\n    BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n  );\r\n\n  world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n    const eventLoc = leverActionEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Lever activate event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.LeverActionAfterEventSignal",
            "name": "LeverActionAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to lever moves\r (activates or deactivates).\r ```typescript\r  function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a lever\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const lever = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || lever === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   lever.setPermutation(\r     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r   );\r    world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r     const eventLoc = leverActionEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Lever activate event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
            "definition": "export class LeverActionAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a lever is moved\r\n     * (activates or deactivates).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: LeverActionAfterEvent) => void): (arg0: LeverActionAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a lever is moved\r\n     * (activates or deactivates).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: LeverActionAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to lever moves\r\n * (activates or deactivates).\r\n * @example leverActionEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a lever\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const lever = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || lever === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   lever.setPermutation(\r\n *     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n *   );\r\n *\r\n *   world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n *     const eventLoc = leverActionEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Lever activate event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "leveractionaftereventsignal",
              "class"
            ],
            "examples": [
              {
                "title": "leverActionEvent.ts",
                "code": "import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a lever\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const lever = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || lever === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  lever.setPermutation(\r\n    BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n  );\r\n\n  world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n    const eventLoc = leverActionEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Lever activate event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ListBlockVolume",
            "name": "ListBlockVolume",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Volume composed of an unordered container of unique block\r locations.\r /",
            "definition": "export class ListBlockVolume extends BlockVolumeBase {\n    /**\r\n     * @remarks\r\n     * Creates a new instance of ListBlockVolume.\r\n     *\r\n     * @param locations\r\n     * Initial array of block locations that ListBlockVolume will\r\n     * be constructed with.\r\n     */\r\n    constructor(locations: Vector3[]);\r\n    /**\r\n     * @remarks\r\n     * Insert block locations into container.\r\n     *\r\n     * @param locations\r\n     * Array of block locations to be inserted into container.\r\n     */\r\n    add(locations: Vector3[]): void;\r\n    /**\r\n     * @remarks\r\n     * Remove block locations from container.\r\n     *\r\n     * @param locations\r\n     * Array of block locations to be removed from container.\r\n     */\r\n    remove(locations: Vector3[]): void;\r\n}\r",
            "jsdoc": "/**\r\n * Volume composed of an unordered container of unique block\r\n * locations.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "add",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "add(locations: Vector3[]): void"
              },
              {
                "name": "remove",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "remove(locations: Vector3[]): void"
              }
            ],
            "extends": "BlockVolumeBase",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "listblockvolume",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.MolangVariableMap",
            "name": "MolangVariableMap",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains a set of additional variable values for further\r defining how rendering and animations function.\r /",
            "definition": "export class MolangVariableMap {\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.r` - Red color value [0-1]\r\n     * - `<variable_name>.g` - Green color value [0-1]\r\n     * - `<variable_name>.b` - Blue color value [0-1]\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setColorRGB(variableName: string, color: RGB): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.r` - Red color value [0-1]\r\n     * - `<variable_name>.g` - Green color value [0-1]\r\n     * - `<variable_name>.b` - Blue color value [0-1]\r\n     * - `<variable_name>.a` - Alpha (transparency) color value\r\n     * [0-1]\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setColorRGBA(variableName: string, color: RGBA): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a numeric (decimal) value within the Molang variable\r\n     * map.\r\n     *\r\n     * @param variableName\r\n     * Name of the float-based number to set.\r\n     * @param number\r\n     * Value for the Molang-based variable to set.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setFloat(variableName: string, number: number): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.speed` - Speed number provided\r\n     * - `<variable_name>.direction_x` - X value from the {@link\r\n     * Vector3} provided\r\n     * - `<variable_name>.direction_y` - Y value from the {@link\r\n     * Vector3} provided\r\n     * - `<variable_name>.direction_z` - Z value from the {@link\r\n     * Vector3} provided\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setSpeedAndDirection(variableName: string, speed: number, direction: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.x` - X value from the {@link Vector3}\r\n     * provided\r\n     * - `<variable_name>.y` - Y value from the {@link Vector3}\r\n     * provided\r\n     * - `<variable_name>.z` - Z value from the {@link Vector3}\r\n     * provided\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setVector3(variableName: string, vector: Vector3): void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains a set of additional variable values for further\r\n * defining how rendering and animations function.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "setColorRGB",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setColorRGB(variableName: string, color: RGB): void"
              },
              {
                "name": "setColorRGBA",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setColorRGBA(variableName: string, color: RGBA): void"
              },
              {
                "name": "setFloat",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setFloat(variableName: string, number: number): void"
              },
              {
                "name": "setSpeedAndDirection",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setSpeedAndDirection(variableName: string, speed: number, direction: Vector3): void"
              },
              {
                "name": "setVector3",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setVector3(variableName: string, vector: Vector3): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "molangvariablemap",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PistonActivateAfterEvent",
            "name": "PistonActivateAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to a piston\r expanding or retracting.\r ```typescript\r  function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a couple of piston blocks\r   const piston = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (piston === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r     const eventLoc = pistonEvent.piston.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Piston event at \" +\r           system.currentTick +\r           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r       );\r     }\r   });\r }\r ```\r /",
            "definition": "export class PistonActivateAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * True if the piston is the process of expanding.\r\n     *\r\n     */\r\n    readonly isExpanding: boolean;\r\n    /**\r\n     * @remarks\r\n     * Contains additional properties and details of the piston.\r\n     *\r\n     */\r\n    readonly piston: BlockPistonComponent;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to a piston\r\n * expanding or retracting.\r\n * @example pistonAfterEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a couple of piston blocks\r\n *   const piston = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (piston === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n *     const eventLoc = pistonEvent.piston.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Piston event at \" +\r\n *           system.currentTick +\r\n *           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "isExpanding",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "piston",
                "type": "BlockPistonComponent",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "pistonactivateafterevent",
              "class"
            ],
            "examples": [
              {
                "title": "pistonAfterEvent.ts",
                "code": "import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a couple of piston blocks\r\n  const piston = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (piston === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n    const eventLoc = pistonEvent.piston.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Piston event at \" +\r\n          system.currentTick +\r\n          (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PistonActivateAfterEventSignal",
            "name": "PistonActivateAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to piston activations.\r /",
            "definition": "export class PistonActivateAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @example pistonAfterEvent.ts\r\n     * ```typescript\r\n     * import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // set up a couple of piston blocks\r\n     *   const piston = targetLocation.dimension.getBlock(targetLocation);\r\n     *   const button = targetLocation.dimension.getBlock({\r\n     *     x: targetLocation.x,\r\n     *     y: targetLocation.y + 1,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (piston === undefined || button === undefined) {\r\n     *     log(\"Could not find block at location.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n     *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n     *\r\n     *   world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n     *     const eventLoc = pistonEvent.piston.block.location;\r\n     *\r\n     *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n     *       log(\r\n     *         \"Piston event at \" +\r\n     *           system.currentTick +\r\n     *           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n     *       );\r\n     *     }\r\n     *   });\r\n     * }\r\n     * ```\r\n     */\r\n    subscribe(callback: (arg0: PistonActivateAfterEvent) => void): (arg0: PistonActivateAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a piston expands\r\n     * or retracts.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PistonActivateAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to piston activations.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "pistonactivateaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Player",
            "name": "Player",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a player within the world.\r /",
            "definition": "export class Player extends Entity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The player's Camera.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly camera: Camera;\r\n    /**\r\n     * @remarks\r\n     * Contains the player's device information.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly clientSystemInfo: ClientSystemInfo;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandPermissionLevel: CommandPermissionLevel;\r\n    /**\r\n     * @remarks\r\n     * Gets the current graphics mode of the player's client. This\r\n     * can be changed in the Video section of the settings menu\r\n     * based on what hardware is available.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly graphicsMode: GraphicsMode;\r\n    /**\r\n     * @remarks\r\n     * Contains the player's input information.\r\n     *\r\n     */\r\n    readonly inputInfo: InputInfo;\r\n    /**\r\n     * @remarks\r\n     * Input permissions of the player.\r\n     *\r\n     */\r\n    readonly inputPermissions: PlayerInputPermissions;\r\n    /**\r\n     * @remarks\r\n     * If true, the player is currently emoting.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isEmoting: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is flying. For example, in Creative or\r\n     * Spectator mode.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isFlying: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is gliding with Elytra.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isGliding: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is jumping. This will remain true while\r\n     * the player is holding the jump action.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isJumping: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current overall level for the player, based on their\r\n     * experience.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly level: number;\r\n    /**\r\n     * @remarks\r\n     * Name of the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * @remarks\r\n     * Contains methods for manipulating the on-screen display of a\r\n     * Player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly onScreenDisplay: ScreenDisplay;\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly playerPermissionLevel: PlayerPermissionLevel;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    selectedSlotIndex: number;\r\n    /**\r\n     * @remarks\r\n     * The overall total set of experience needed to achieve the\r\n     * next level for a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly totalXpNeededForNextLevel: number;\r\n    /**\r\n     * @remarks\r\n     * The current set of experience achieved for the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly xpEarnedAtCurrentLevel: number;\r\n    /**\r\n     * @remarks\r\n     * Adds/removes experience to/from the Player and returns the\r\n     * current experience of the Player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount of experience to add. Note that this can be negative.\r\n     * Min/max bounds at -2^24 ~ 2^24\r\n     * @returns\r\n     * Returns the current experience of the Player.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addExperience(amount: number): number;\r\n    /**\r\n     * @remarks\r\n     * Adds/removes level to/from the Player and returns the\r\n     * current level of the Player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount to add to the player. Min/max bounds at -2^24 ~ 2^24\r\n     * @returns\r\n     * Returns the current level of the Player.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addLevels(amount: number): number;\r\n    /**\r\n     * @remarks\r\n     * For this player, removes all overrides of any Entity\r\n     * Properties on the target Entity. This change is not applied\r\n     * until the next tick and will not apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property overrides are being\r\n     * cleared.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     */\r\n    clearPropertyOverridesForEntity(targetEntity: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Retrieves the active gamemode for this player, if specified.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getGameMode(): GameMode;\r\n    /**\r\n     * @remarks\r\n     * Gets the current item cooldown time for a particular\r\n     * cooldown category.\r\n     *\r\n     * @param cooldownCategory\r\n     * Specifies the cooldown category to retrieve the current\r\n     * cooldown for.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getItemCooldown(cooldownCategory: string): number;\r\n    /**\r\n     * @remarks\r\n     * Gets the current spawn point of the player.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getSpawnPoint(): DimensionLocation | undefined;\r\n    /**\r\n     * @remarks\r\n     *  Gets the total experience of the Player.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTotalXp(): number;\r\n    /**\r\n     * @remarks\r\n     * Plays a music track that only this particular player can\r\n     * hear.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws This function can throw errors.\r\n     */\r\n    playMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Plays a sound that only this particular player can hear.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param soundOptions\r\n     * Additional optional options for the sound.\r\n     * @throws This function can throw errors.\r\n     * @example playMusicAndSound.ts\r\n     * ```typescript\r\n     * import { world, MusicOptions, WorldSoundOptions, PlayerSoundOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function playMusicAndSound(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   const musicOptions: MusicOptions = {\r\n     *     fade: 0.5,\r\n     *     loop: true,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *   world.playMusic(\"music.menu\", musicOptions);\r\n     *\r\n     *   const worldSoundOptions: WorldSoundOptions = {\r\n     *     pitch: 0.5,\r\n     *     volume: 4.0,\r\n     *   };\r\n     *   world.playSound(\"ambient.weather.thunder\", targetLocation, worldSoundOptions);\r\n     *\r\n     *   const playerSoundOptions: PlayerSoundOptions = {\r\n     *     pitch: 1.0,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *\r\n     *   players[0].playSound(\"bucket.fill_water\", playerSoundOptions);\r\n     * }\r\n     * ```\r\n     */\r\n    playSound(soundId: string, soundOptions?: PlayerSoundOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Queues an additional music track that only this particular\r\n     * player can hear. If a track is not playing, a music track\r\n     * will play.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     *\r\n     */\r\n    queueMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * For this player, removes the override on an Entity Property.\r\n     * This change is not applied until the next tick and will not\r\n     * apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property override is being removed.\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     */\r\n    removePropertyOverrideForEntity(targetEntity: Entity, identifier: string): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the level of the player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetLevel(): void;\r\n    /**\r\n     * @remarks\r\n     * Sends a message to the player.\r\n     *\r\n     * @param message\r\n     * The message to be displayed.\r\n     * @throws\r\n     * This method can throw if the provided {@link RawMessage} is\r\n     * in an invalid format. For example, if an empty `name` string\r\n     * is provided to `score`.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example nestedTranslation.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function nestedTranslation(targetLocation: DimensionLocation) {\r\n     *   // Displays \"Apple or Coal\"\r\n     *   const rawMessage = {\r\n     *     translate: \"accessibility.list.or.two\",\r\n     *     with: { rawtext: [{ translate: \"item.apple.name\" }, { translate: \"item.coal.name\" }] },\r\n     *   };\r\n     *   world.sendMessage(rawMessage);\r\n     * }\r\n     * ```\r\n     * @example scoreWildcard.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function scoreWildcard(targetLocation: DimensionLocation) {\r\n     *   // Displays the player's score for objective \"obj\". Each player will see their own score.\r\n     *   const rawMessage = { score: { name: \"*\", objective: \"obj\" } };\r\n     *   world.sendMessage(rawMessage);\r\n     * }\r\n     * ```\r\n     * @example sendBasicMessage.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendBasicMessage(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].sendMessage(\"Hello World!\");\r\n     * }\r\n     * ```\r\n     * @example sendPlayerMessages.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendPlayerMessages(targetLocation: DimensionLocation) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     // Displays \"First or Second\"\r\n     *     const rawMessage = { translate: \"accessibility.list.or.two\", with: [\"First\", \"Second\"] };\r\n     *     player.sendMessage(rawMessage);\r\n     *\r\n     *     // Displays \"Hello, world!\"\r\n     *     player.sendMessage(\"Hello, world!\");\r\n     *\r\n     *     // Displays \"Welcome, Amazing Player 1!\"\r\n     *     player.sendMessage({ translate: \"authentication.welcome\", with: [\"Amazing Player 1\"] });\r\n     *\r\n     *     // Displays the player's score for objective \"obj\". Each player will see their own score.\r\n     *     const rawMessageWithScore = { score: { name: \"*\", objective: \"obj\" } };\r\n     *     player.sendMessage(rawMessageWithScore);\r\n     *\r\n     *     // Displays \"Apple or Coal\"\r\n     *     const rawMessageWithNestedTranslations = {\r\n     *       translate: \"accessibility.list.or.two\",\r\n     *       with: { rawtext: [{ translate: \"item.apple.name\" }, { translate: \"item.coal.name\" }] },\r\n     *     };\r\n     *     player.sendMessage(rawMessageWithNestedTranslations);\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example sendTranslatedMessage.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendTranslatedMessage(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].sendMessage({ translate: \"authentication.welcome\", with: [\"Amazing Player 1\"] });\r\n     * }\r\n     * ```\r\n     */\r\n    sendMessage(message: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a gamemode override for this player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param gameMode\r\n     * Active gamemode.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setGameMode(gameMode?: GameMode): void;\r\n    /**\r\n     * @remarks\r\n     * For this player, overrides an Entity Property on the target\r\n     * Entity to the provided value. This property must be client\r\n     * synced. This change is not applied until the next tick and\r\n     * will not apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property is being overriden.\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @param value\r\n     * The override value. The provided type must be compatible\r\n     * with the type specified in the entity's definition.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     * Throws if the provided value is outside the expected range\r\n     * (int, float properties).\r\n     * Throws if the provided string value does not match the set\r\n     * of accepted enum values (enum properties)\r\n     */\r\n    setPropertyOverrideForEntity(targetEntity: Entity, identifier: string, value: boolean | number | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current starting spawn point for this particular\r\n     * player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setSpawnPoint(spawnPoint?: DimensionLocation): void;\r\n    /**\r\n     * @remarks\r\n     * Creates a new particle emitter at a specified location in\r\n     * the world. Only visible to the target player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectName\r\n     * Identifier of the particle to create.\r\n     * @param location\r\n     * The location at which to create the particle emitter.\r\n     * @param molangVariables\r\n     * A set of optional, customizable variables that can be\r\n     * adjusted for this particle.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnParticle.ts\r\n     * ```typescript\r\n     * import { world, MolangVariableMap, Vector3 } from '@minecraft/server';\r\n     *\r\n     * world.afterEvents.playerSpawn.subscribe(event => {\r\n     *     const targetLocation = event.player.location;\r\n     *     for (let i = 0; i < 100; i++) {\r\n     *         const molang = new MolangVariableMap();\r\n     *\r\n     *         molang.setColorRGB('variable.color', {\r\n     *             red: Math.random(),\r\n     *             green: Math.random(),\r\n     *             blue: Math.random()\r\n     *         });\r\n     *\r\n     *         const newLocation: Vector3 = {\r\n     *             x: targetLocation.x + Math.floor(Math.random() * 8) - 4,\r\n     *             y: targetLocation.y + Math.floor(Math.random() * 8) - 4,\r\n     *             z: targetLocation.z + Math.floor(Math.random() * 8) - 4,\r\n     *         };\r\n     *         event.player.spawnParticle('minecraft:colored_flame_particle', newLocation, molang);\r\n     *     }\r\n     * });\r\n     * ```\r\n     */\r\n    spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the item cooldown time for a particular cooldown\r\n     * category.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cooldownCategory\r\n     * Specifies the cooldown category to retrieve the current\r\n     * cooldown for.\r\n     * @param tickDuration\r\n     * Duration in ticks of the item cooldown.\r\n     * @throws This function can throw errors.\r\n     */\r\n    startItemCooldown(cooldownCategory: string, tickDuration: number): void;\r\n    /**\r\n     * @remarks\r\n     * Stops any music tracks from playing for this particular\r\n     * player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    stopMusic(): void;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a player within the world.\r\n */\r",
            "properties": [
              {
                "name": "camera",
                "type": "Camera",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "clientSystemInfo",
                "type": "ClientSystemInfo",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "graphicsMode",
                "type": "GraphicsMode",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "inputInfo",
                "type": "InputInfo",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "inputPermissions",
                "type": "PlayerInputPermissions",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isEmoting",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isFlying",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isGliding",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isJumping",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "level",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "name",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "onScreenDisplay",
                "type": "ScreenDisplay",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerPermissionLevel",
                "type": "PlayerPermissionLevel",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "totalXpNeededForNextLevel",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "xpEarnedAtCurrentLevel",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "addExperience",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "addExperience(amount: number): number"
              },
              {
                "name": "addLevels",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "addLevels(amount: number): number"
              },
              {
                "name": "clearPropertyOverridesForEntity",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearPropertyOverridesForEntity(targetEntity: Entity): void"
              },
              {
                "name": "getGameMode",
                "parameters": [],
                "returnType": "GameMode",
                "accessibility": "public",
                "signature": "getGameMode(): GameMode"
              },
              {
                "name": "getItemCooldown",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getItemCooldown(cooldownCategory: string): number"
              },
              {
                "name": "getSpawnPoint",
                "parameters": [],
                "returnType": "DimensionLocation | undefined",
                "accessibility": "public",
                "signature": "getSpawnPoint(): DimensionLocation | undefined"
              },
              {
                "name": "getTotalXp",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getTotalXp(): number"
              },
              {
                "name": "playMusic",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "playMusic(trackId: string, musicOptions?: MusicOptions): void"
              },
              {
                "name": "playSound",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "playSound(soundId: string, soundOptions?: PlayerSoundOptions): void"
              },
              {
                "name": "queueMusic",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "queueMusic(trackId: string, musicOptions?: MusicOptions): void"
              },
              {
                "name": "removePropertyOverrideForEntity",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "removePropertyOverrideForEntity(targetEntity: Entity, identifier: string): void"
              },
              {
                "name": "resetLevel",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "resetLevel(): void"
              },
              {
                "name": "setGameMode",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setGameMode(gameMode?: GameMode): void"
              },
              {
                "name": "setPropertyOverrideForEntity",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setPropertyOverrideForEntity(targetEntity: Entity, identifier: string, value: boolean | number | string): void"
              },
              {
                "name": "setSpawnPoint",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setSpawnPoint(spawnPoint?: DimensionLocation): void"
              },
              {
                "name": "spawnParticle",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void"
              },
              {
                "name": "startItemCooldown",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "startItemCooldown(cooldownCategory: string, tickDuration: number): void"
              },
              {
                "name": "stopMusic",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "stopMusic(): void"
              }
            ],
            "extends": "Entity",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "player",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerBreakBlockAfterEvent",
            "name": "PlayerBreakBlockAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event after a player\r breaks a block.\r /",
            "definition": "export class PlayerBreakBlockAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns permutation information about this block before it\r\n     * was broken.\r\n     *\r\n     */\r\n    readonly brokenBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The item stack that was used to break the block after the\r\n     * block was broken, or undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStackAfterBreak?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The item stack that was used to break the block before the\r\n     * block was broken, or undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStackBeforeBreak?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Player that broke the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * breaks a block.\r\n */\r",
            "properties": [
              {
                "name": "brokenBlockPermutation",
                "type": "BlockPermutation",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerbreakblockafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerBreakBlockAfterEventSignal",
            "name": "PlayerBreakBlockAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a player breaks\r a block.\r /",
            "definition": "export class PlayerBreakBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a block is broken\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerBreakBlockAfterEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerBreakBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player breaks a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerBreakBlockAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a player breaks\r\n * a block.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerbreakblockaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerBreakBlockBeforeEvent",
            "name": "PlayerBreakBlockBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event before a player\r breaks a block.\r /",
            "definition": "export class PlayerBreakBlockBeforeEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the block break event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used to break the block, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Player breaking the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * breaks a block.\r\n */\r",
            "properties": [
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerbreakblockbeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerBreakBlockBeforeEventSignal",
            "name": "PlayerBreakBlockBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to before a player\r breaks a block.\r /",
            "definition": "export class PlayerBreakBlockBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a block is broken\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerBreakBlockBeforeEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerBreakBlockBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player breaks\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerBreakBlockBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * breaks a block.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerbreakblockbeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerButtonInputAfterEvent",
            "name": "PlayerButtonInputAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Event data for when a player presses a button.\r /",
            "definition": "export class PlayerButtonInputAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The button this event is about.\r\n     *\r\n     */\r\n    readonly button: InputButton;\r\n    /**\r\n     * @remarks\r\n     * The state that this button transferred to.\r\n     *\r\n     */\r\n    readonly newButtonState: ButtonState;\r\n    /**\r\n     * @remarks\r\n     * The player that performed the input event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Event data for when a player presses a button.\r\n */\r",
            "properties": [
              {
                "name": "button",
                "type": "InputButton",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "newButtonState",
                "type": "ButtonState",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerbuttoninputafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerButtonInputAfterEventSignal",
            "name": "PlayerButtonInputAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to player inputs.\r /",
            "definition": "export class PlayerButtonInputAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after the player\r\n     * performs an input.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerButtonInputAfterEvent) => void,\r\n        options?: InputEventOptions,\r\n    ): (arg0: PlayerButtonInputAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after the player\r\n     * performs an input.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerButtonInputAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to player inputs.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerbuttoninputaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerCursorInventoryComponent",
            "name": "PlayerCursorInventoryComponent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents the players cursor inventory. Used when moving\r items between between containers in the inventory UI. Not\r used with touch controls.\r /",
            "definition": "export class PlayerCursorInventoryComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack currently in the players cursor inventory.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly item?: ItemStack;\r\n    static readonly componentId = 'minecraft:cursor_inventory';\r\n    /**\r\n     * @remarks\r\n     * Clears the players cursor inventory.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    clear(): void;\r\n}\r",
            "jsdoc": "/**\r\n * Represents the players cursor inventory. Used when moving\r\n * items between between containers in the inventory UI. Not\r\n * used with touch controls.\r\n */\r",
            "properties": [
              {
                "name": "minecraft",
                "type": "cursor_inventory'",
                "readonly": false,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "clear",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clear(): void"
              }
            ],
            "extends": "EntityComponent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playercursorinventorycomponent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerDimensionChangeAfterEvent",
            "name": "PlayerDimensionChangeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to a player's\r dimension having been changed.\r /",
            "definition": "export class PlayerDimensionChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The dimension the player is changing from.\r\n     *\r\n     */\r\n    readonly fromDimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * The location the player was at before changing dimensions.\r\n     *\r\n     */\r\n    readonly fromLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Handle to the player that is changing dimensions.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The dimension that the player is changing to.\r\n     *\r\n     */\r\n    readonly toDimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * The location the player will spawn to after changing\r\n     * dimensions.\r\n     *\r\n     */\r\n    readonly toLocation: Vector3;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to a player's\r\n * dimension having been changed.\r\n */\r",
            "properties": [
              {
                "name": "fromDimension",
                "type": "Dimension",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "fromLocation",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "toDimension",
                "type": "Dimension",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "toLocation",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerdimensionchangeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerDimensionChangeAfterEventSignal",
            "name": "PlayerDimensionChangeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to successful player\r dimension changes.\r /",
            "definition": "export class PlayerDimensionChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Subscribes the specified callback to a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerDimensionChangeAfterEvent) => void,\r\n    ): (arg0: PlayerDimensionChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes the specified callback from a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerDimensionChangeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to successful player\r\n * dimension changes.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerdimensionchangeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerEmoteAfterEvent",
            "name": "PlayerEmoteAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Removes the specified callback from a player dimension\r change after event.\r  This function can't be called in read-only mode.\r  This function can be called in early-execution mode.",
            "definition": "export class PlayerEmoteAfterEvent {\n    private constructor();\r\n    readonly personaPieceId: string;\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Removes the specified callback from a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r",
            "properties": [
              {
                "name": "personaPieceId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [
              "readonly-restricted"
            ],
            "keywords": [
              "playeremoteafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerEmoteAfterEventSignal",
            "name": "PlayerEmoteAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class PlayerEmoteAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerEmoteAfterEvent) => void): (arg0: PlayerEmoteAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerEmoteAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playeremoteaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerGameModeChangeAfterEvent",
            "name": "PlayerGameModeChangeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event after a players game\r mode is changed.\r /",
            "definition": "export class PlayerGameModeChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The previous game mode before the change.\r\n     *\r\n     */\r\n    readonly fromGameMode: GameMode;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The current game mode after the change.\r\n     *\r\n     */\r\n    readonly toGameMode: GameMode;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event after a players game\r\n * mode is changed.\r\n */\r",
            "properties": [
              {
                "name": "fromGameMode",
                "type": "GameMode",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "toGameMode",
                "type": "GameMode",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playergamemodechangeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerGameModeChangeAfterEventSignal",
            "name": "PlayerGameModeChangeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to after a players game\r mode is changed.\r /",
            "definition": "export class PlayerGameModeChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerGameModeChangeAfterEvent) => void): (arg0: PlayerGameModeChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerGameModeChangeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to after a players game\r\n * mode is changed.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playergamemodechangeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerGameModeChangeBeforeEvent",
            "name": "PlayerGameModeChangeBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event before a player\r interacts with an entity.\r /",
            "definition": "export class PlayerGameModeChangeBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the game mode change will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current game mode.\r\n     *\r\n     */\r\n    readonly fromGameMode: GameMode;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The game mode being changed to.\r\n     *\r\n     */\r\n    toGameMode: GameMode;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with an entity.\r\n */\r",
            "properties": [
              {
                "name": "fromGameMode",
                "type": "GameMode",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playergamemodechangebeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerGameModeChangeBeforeEventSignal",
            "name": "PlayerGameModeChangeBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to before a players\r game mode is changed.\r /",
            "definition": "export class PlayerGameModeChangeBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerGameModeChangeBeforeEvent) => void,\r\n    ): (arg0: PlayerGameModeChangeBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerGameModeChangeBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to before a players\r\n * game mode is changed.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playergamemodechangebeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEvent",
            "name": "PlayerHotbarSelectedSlotChangeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event after changing the\r selected hotbar slot for a player.\r /",
            "definition": "export class PlayerHotbarSelectedSlotChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack of the new slot selected.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The new hotbar slot index selected.\r\n     *\r\n     */\r\n    readonly newSlotSelected: number;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The previous hotbar slot index selected.\r\n     *\r\n     */\r\n    readonly previousSlotSelected: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event after changing the\r\n * selected hotbar slot for a player.\r\n */\r",
            "properties": [
              {
                "name": "newSlotSelected",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "previousSlotSelected",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerhotbarselectedslotchangeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEventSignal",
            "name": "PlayerHotbarSelectedSlotChangeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected after a player selected\r hotbar slot is changed.\r /",
            "definition": "export class PlayerHotbarSelectedSlotChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player selected\r\n     * hotbar slot is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     * @param options\r\n     * Additional filtering options for the event subscription.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void,\r\n        options?: HotbarEventOptions,\r\n    ): (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player selected\r\n     * hotbar slot is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected after a player selected\r\n * hotbar slot is changed.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerhotbarselectedslotchangeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInputModeChangeAfterEvent",
            "name": "PlayerInputModeChangeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Event data for when a player input mode changes.\r /",
            "definition": "export class PlayerInputModeChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The new input mode used by the player.\r\n     *\r\n     */\r\n    readonly newInputModeUsed: InputMode;\r\n    /**\r\n     * @remarks\r\n     * The player that had an input mode change.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The previous input mode used by the player.\r\n     *\r\n     */\r\n    readonly previousInputModeUsed: InputMode;\r\n}\r",
            "jsdoc": "/**\r\n * Event data for when a player input mode changes.\r\n */\r",
            "properties": [
              {
                "name": "newInputModeUsed",
                "type": "InputMode",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "previousInputModeUsed",
                "type": "InputMode",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinputmodechangeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInputModeChangeAfterEventSignal",
            "name": "PlayerInputModeChangeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to player input mode.\r /",
            "definition": "export class PlayerInputModeChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after the player input\r\n     * mode changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInputModeChangeAfterEvent) => void,\r\n    ): (arg0: PlayerInputModeChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after the player input\r\n     * mode changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInputModeChangeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to player input mode.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinputmodechangeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEvent",
            "name": "PlayerInputPermissionCategoryChangeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event after a players\r input permissions change.\r /",
            "definition": "export class PlayerInputPermissionCategoryChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The category of input permissions that have changed.\r\n     *\r\n     */\r\n    readonly category: InputPermissionCategory;\r\n    /**\r\n     * @remarks\r\n     * The enabled/disabled state of the players input permissions.\r\n     *\r\n     */\r\n    readonly enabled: boolean;\r\n    /**\r\n     * @remarks\r\n     * The player that has had their input permissions changed.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event after a players\r\n * input permissions change.\r\n */\r",
            "properties": [
              {
                "name": "category",
                "type": "InputPermissionCategory",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "enabled",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinputpermissioncategorychangeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEventSignal",
            "name": "PlayerInputPermissionCategoryChangeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to after a players\r input permissions change.\r /",
            "definition": "export class PlayerInputPermissionCategoryChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a players input\r\n     * permissions change.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void,\r\n    ): (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a players input\r\n     * permissions change.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to after a players\r\n * input permissions change.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinputpermissioncategorychangeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInputPermissions",
            "name": "PlayerInputPermissions",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains APIs to enable/disable player input permissions.\r /",
            "definition": "export class PlayerInputPermissions {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if an input permission is enabled.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    isPermissionCategoryEnabled(permissionCategory: InputPermissionCategory): boolean;\r\n    /**\r\n     * @remarks\r\n     * Enable or disable an input permission. When enabled the\r\n     * input will work, when disabled will not work.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setPermissionCategory(permissionCategory: InputPermissionCategory, isEnabled: boolean): void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains APIs to enable/disable player input permissions.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "isPermissionCategoryEnabled",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isPermissionCategoryEnabled(permissionCategory: InputPermissionCategory): boolean"
              },
              {
                "name": "setPermissionCategory",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setPermissionCategory(permissionCategory: InputPermissionCategory, isEnabled: boolean): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinputpermissions",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInteractWithBlockAfterEvent",
            "name": "PlayerInteractWithBlockAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event after a player\r successfully interacts with a block.\r /",
            "definition": "export class PlayerInteractWithBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack before the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The block that will be interacted with.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that is being interacted with.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block where the item is placed.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * This value will be true if the event was triggered on\r\n     * players initial interaction button press and false on events\r\n     * triggered from holding the interaction button.\r\n     *\r\n     */\r\n    readonly isFirstEvent: boolean;\r\n    /**\r\n     * @remarks\r\n     * The ItemStack after the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * successfully interacts with a block.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "blockFace",
                "type": "Direction",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "faceLocation",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isFirstEvent",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinteractwithblockafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInteractWithBlockAfterEventSignal",
            "name": "PlayerInteractWithBlockAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to after a player\r interacts with a block.\r /",
            "definition": "export class PlayerInteractWithBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player interacts\r\n     * with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithBlockAfterEvent) => void,\r\n    ): (arg0: PlayerInteractWithBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithBlockAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to after a player\r\n * interacts with a block.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinteractwithblockaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInteractWithBlockBeforeEvent",
            "name": "PlayerInteractWithBlockBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event before a player\r interacts with a block.\r /",
            "definition": "export class PlayerInteractWithBlockBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that will be interacted with.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that is being interacted with.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * If set to true the interaction will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block where the item is placed.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * This value will be true if the event was triggered on\r\n     * players initial interaction button press and false on events\r\n     * triggered from holding the interaction button.\r\n     *\r\n     */\r\n    readonly isFirstEvent: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used in the interaction, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with a block.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "blockFace",
                "type": "Direction",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "faceLocation",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isFirstEvent",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinteractwithblockbeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInteractWithBlockBeforeEventSignal",
            "name": "PlayerInteractWithBlockBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to before a player\r interacts with a block.\r /",
            "definition": "export class PlayerInteractWithBlockBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithBlockBeforeEvent) => void,\r\n    ): (arg0: PlayerInteractWithBlockBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithBlockBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * interacts with a block.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinteractwithblockbeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInteractWithEntityAfterEvent",
            "name": "PlayerInteractWithEntityAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event after a player\r successfully interacts with an entity.\r /",
            "definition": "export class PlayerInteractWithEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack before the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The ItemStack after the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The entity that will be interacted with.\r\n     *\r\n     */\r\n    readonly target: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * successfully interacts with an entity.\r\n */\r",
            "properties": [
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "target",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinteractwithentityafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInteractWithEntityAfterEventSignal",
            "name": "PlayerInteractWithEntityAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to after a player\r interacts with an entity.\r /",
            "definition": "export class PlayerInteractWithEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player interacts\r\n     * with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithEntityAfterEvent) => void,\r\n    ): (arg0: PlayerInteractWithEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithEntityAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to after a player\r\n * interacts with an entity.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinteractwithentityaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInteractWithEntityBeforeEvent",
            "name": "PlayerInteractWithEntityBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event before a player\r interacts with an entity.\r /",
            "definition": "export class PlayerInteractWithEntityBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the interaction will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used in the interaction, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The entity that will be interacted with.\r\n     *\r\n     */\r\n    readonly target: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with an entity.\r\n */\r",
            "properties": [
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "target",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinteractwithentitybeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInteractWithEntityBeforeEventSignal",
            "name": "PlayerInteractWithEntityBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to before a player\r interacts with an entity.\r /",
            "definition": "export class PlayerInteractWithEntityBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithEntityBeforeEvent) => void,\r\n    ): (arg0: PlayerInteractWithEntityBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithEntityBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * interacts with an entity.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinteractwithentitybeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInventoryItemChangeAfterEvent",
            "name": "PlayerInventoryItemChangeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event after a player's\r inventory item changes.\r /",
            "definition": "export class PlayerInventoryItemChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The previous item stack.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Inventory type.\r\n     *\r\n     */\r\n    readonly inventoryType: PlayerInventoryType;\r\n    /**\r\n     * @remarks\r\n     * The new item stack.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The slot index with the change.\r\n     *\r\n     */\r\n    readonly slot: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event after a player's\r\n * inventory item changes.\r\n */\r",
            "properties": [
              {
                "name": "inventoryType",
                "type": "PlayerInventoryType",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "slot",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinventoryitemchangeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerInventoryItemChangeAfterEventSignal",
            "name": "PlayerInventoryItemChangeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected after a player's\r inventory item is changed.\r /",
            "definition": "export class PlayerInventoryItemChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player's\r\n     * inventory item is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     * @param options\r\n     * Additional filtering options for the event subscription.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInventoryItemChangeAfterEvent) => void,\r\n        options?: InventoryItemEventOptions,\r\n    ): (arg0: PlayerInventoryItemChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player's\r\n     * inventory item is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInventoryItemChangeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected after a player's\r\n * inventory item is changed.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerinventoryitemchangeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerJoinAfterEvent",
            "name": "PlayerJoinAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a player that has joined.\r See the playerSpawn event for more detailed information that\r could be returned after the first time a player has spawned\r within the game.\r /",
            "definition": "export class PlayerJoinAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Opaque string identifier of the player that joined the game.\r\n     *\r\n     */\r\n    readonly playerId: string;\r\n    /**\r\n     * @remarks\r\n     * Name of the player that has joined.\r\n     *\r\n     */\r\n    readonly playerName: string;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a player that has joined.\r\n * See the playerSpawn event for more detailed information that\r\n * could be returned after the first time a player has spawned\r\n * within the game.\r\n */\r",
            "properties": [
              {
                "name": "playerId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerName",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerjoinafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerJoinAfterEventSignal",
            "name": "PlayerJoinAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to a player joining the\r world.\r /",
            "definition": "export class PlayerJoinAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player joins the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerJoinAfterEvent) => void): (arg0: PlayerJoinAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player joins the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerJoinAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to a player joining the\r\n * world.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerjoinaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerLeaveAfterEvent",
            "name": "PlayerLeaveAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a player that has left the\r world.\r /",
            "definition": "export class PlayerLeaveAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Opaque string identifier of the player that has left the\r\n     * event.\r\n     *\r\n     */\r\n    readonly playerId: string;\r\n    /**\r\n     * @remarks\r\n     * Player that has left the world.\r\n     *\r\n     */\r\n    readonly playerName: string;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a player that has left the\r\n * world.\r\n */\r",
            "properties": [
              {
                "name": "playerId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerName",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerleaveafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerLeaveAfterEventSignal",
            "name": "PlayerLeaveAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to a player leaving the\r world.\r /",
            "definition": "export class PlayerLeaveAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player leaves the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerLeaveAfterEvent) => void): (arg0: PlayerLeaveAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player leaves\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerLeaveAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to a player leaving the\r\n * world.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerleaveaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerLeaveBeforeEvent",
            "name": "PlayerLeaveBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding a player that is leaving the\r world.\r /",
            "definition": "export class PlayerLeaveBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The leaving player.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding a player that is leaving the\r\n * world.\r\n */\r",
            "properties": [
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerleavebeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerLeaveBeforeEventSignal",
            "name": "PlayerLeaveBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to a player leaving the\r world.\r /",
            "definition": "export class PlayerLeaveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player leaves the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerLeaveBeforeEvent) => void): (arg0: PlayerLeaveBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback that will be called when a player leaves\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerLeaveBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to a player leaving the\r\n * world.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerleavebeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerPlaceBlockAfterEvent",
            "name": "PlayerPlaceBlockAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information regarding an event where a player\r places a block.\r /",
            "definition": "export class PlayerPlaceBlockAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Player that placed the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information regarding an event where a player\r\n * places a block.\r\n */\r",
            "properties": [
              {
                "name": "player",
                "type": "Player",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerplaceblockafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerPlaceBlockAfterEventSignal",
            "name": "PlayerPlaceBlockAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a block is\r placed by a player.\r /",
            "definition": "export class PlayerPlaceBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a block is placed\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerPlaceBlockAfterEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerPlaceBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an block is placed\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerPlaceBlockAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a block is\r\n * placed by a player.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerplaceblockaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerSpawnAfterEvent",
            "name": "PlayerSpawnAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "An event that contains more information about a player\r spawning.\r /",
            "definition": "export class PlayerSpawnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, this is the initial spawn of a player after joining\r\n     * the game.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    initialSpawn: boolean;\r\n    /**\r\n     * @remarks\r\n     * Object that represents the player that joined the game.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    player: Player;\r\n}\r",
            "jsdoc": "/**\r\n * An event that contains more information about a player\r\n * spawning.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerspawnafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerSpawnAfterEventSignal",
            "name": "PlayerSpawnAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Registers an event when a player is spawned (or re-spawned\r after death) and fully ready within the world.\r /",
            "definition": "export class PlayerSpawnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a new event receiver for this particular type of\r\n     * event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerSpawnAfterEvent) => void): (arg0: PlayerSpawnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * De-registers an event receiver for the player spawn event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerSpawnAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Registers an event when a player is spawned (or re-spawned\r\n * after death) and fully ready within the world.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playerspawnaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PressurePlatePopAfterEvent",
            "name": "PressurePlatePopAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to a pressure plate\r pop.\r /",
            "definition": "export class PressurePlatePopAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate before it was\r\n     * popped.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate at the time of the\r\n     * pop.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to a pressure plate\r\n * pop.\r\n */\r",
            "properties": [
              {
                "name": "previousRedstonePower",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "redstonePower",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "pressureplatepopafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PressurePlatePopAfterEventSignal",
            "name": "PressurePlatePopAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a pressure\r plate is popped.\r /",
            "definition": "export class PressurePlatePopAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a pressure plate is\r\n     * popped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PressurePlatePopAfterEvent) => void): (arg0: PressurePlatePopAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a pressure plate\r\n     * is popped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PressurePlatePopAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a pressure\r\n * plate is popped.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "pressureplatepopaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PressurePlatePushAfterEvent",
            "name": "PressurePlatePushAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to a pressure plate\r push.\r /",
            "definition": "export class PressurePlatePushAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate before it was\r\n     * pushed.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate at the time of the\r\n     * push.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * Source that triggered the pressure plate push.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to a pressure plate\r\n * push.\r\n */\r",
            "properties": [
              {
                "name": "previousRedstonePower",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "redstonePower",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "pressureplatepushafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PressurePlatePushAfterEventSignal",
            "name": "PressurePlatePushAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a pressure\r plate is pushed.\r /",
            "definition": "export class PressurePlatePushAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a pressure plate is\r\n     * pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PressurePlatePushAfterEvent) => void): (arg0: PressurePlatePushAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a pressure plate\r\n     * is pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PressurePlatePushAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a pressure\r\n * plate is pushed.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "pressureplatepushaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ProjectileHitBlockAfterEvent",
            "name": "ProjectileHitBlockAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a projectile hitting a\r block.\r /",
            "definition": "export class ProjectileHitBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where this projectile hit took place.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Direction vector of the projectile as it hit a block.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Location where the projectile hit occurred.\r\n     *\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Entity for the projectile that hit a block.\r\n     *\r\n     */\r\n    readonly projectile: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional source entity that fired the projectile.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Contains additional information about the block that was hit\r\n     * by the projectile.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getBlockHit(): BlockHitInformation;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a projectile hitting a\r\n * block.\r\n */\r",
            "properties": [
              {
                "name": "dimension",
                "type": "Dimension",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hitVector",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "projectile",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getBlockHit",
                "parameters": [],
                "returnType": "BlockHitInformation",
                "accessibility": "public",
                "signature": "getBlockHit(): BlockHitInformation"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "projectilehitblockafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ProjectileHitBlockAfterEventSignal",
            "name": "ProjectileHitBlockAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a projectile\r hits a block.\r /",
            "definition": "export class ProjectileHitBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a projectile hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ProjectileHitBlockAfterEvent) => void): (arg0: ProjectileHitBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a projectile hits\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ProjectileHitBlockAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a projectile\r\n * hits a block.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "projectilehitblockaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ProjectileHitEntityAfterEvent",
            "name": "ProjectileHitEntityAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to a projectile hitting an\r entity.\r /",
            "definition": "export class ProjectileHitEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where this projectile hit took place.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Direction vector of the projectile as it hit an entity.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Location where the projectile hit occurred.\r\n     *\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Entity for the projectile that hit an entity.\r\n     *\r\n     */\r\n    readonly projectile: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional source entity that fired the projectile.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Contains additional information about an entity that was\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getEntityHit(): EntityHitInformation;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to a projectile hitting an\r\n * entity.\r\n */\r",
            "properties": [
              {
                "name": "dimension",
                "type": "Dimension",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "hitVector",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "projectile",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getEntityHit",
                "parameters": [],
                "returnType": "EntityHitInformation",
                "accessibility": "public",
                "signature": "getEntityHit(): EntityHitInformation"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "projectilehitentityafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ProjectileHitEntityAfterEventSignal",
            "name": "ProjectileHitEntityAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a projectile\r hits an entity.\r /",
            "definition": "export class ProjectileHitEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a projectile hits\r\n     * an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ProjectileHitEntityAfterEvent) => void): (arg0: ProjectileHitEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a projectile hits\r\n     * an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ProjectileHitEntityAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a projectile\r\n * hits an entity.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "projectilehitentityaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Scoreboard",
            "name": "Scoreboard",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains objectives and participants for the scoreboard.\r ```typescript\r  function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r    const players = world.getPlayers();\r    // Ensure a new objective.\r   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r    if (!objective) {\r     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r   }\r    // get the scoreboard identity for player 0\r   const player0Identity = players[0].scoreboardIdentity;\r    if (player0Identity === undefined) {\r     log(\"Could not get a scoreboard identity for player 0.\");\r     return -1;\r   }\r    // initialize player score to 100;\r   objective.setScore(player0Identity, 100);\r    world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r     objective: objective,\r     sortOrder: ObjectiveSortOrder.Descending,\r   });\r    const playerScore = objective.getScore(player0Identity) ?? 0;\r    // score should now be 110.\r   objective.setScore(player0Identity, playerScore + 10);\r }\r ```\r /",
            "definition": "export class Scoreboard {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a new objective to the scoreboard.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     * @example updateScoreboard.ts\r\n     * ```typescript\r\n     * import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n     *   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n     *\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   // Ensure a new objective.\r\n     *   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n     *\r\n     *   if (!objective) {\r\n     *     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n     *   }\r\n     *\r\n     *   // get the scoreboard identity for player 0\r\n     *   const player0Identity = players[0].scoreboardIdentity;\r\n     *\r\n     *   if (player0Identity === undefined) {\r\n     *     log(\"Could not get a scoreboard identity for player 0.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   // initialize player score to 100;\r\n     *   objective.setScore(player0Identity, 100);\r\n     *\r\n     *   world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n     *     objective: objective,\r\n     *     sortOrder: ObjectiveSortOrder.Descending,\r\n     *   });\r\n     *\r\n     *   const playerScore = objective.getScore(player0Identity) ?? 0;\r\n     *\r\n     *   // score should now be 110.\r\n     *   objective.setScore(player0Identity, playerScore + 10);\r\n     * }\r\n     * ```\r\n     */\r\n    addObjective(objectiveId: string, displayName?: string): ScoreboardObjective;\r\n    /**\r\n     * @remarks\r\n     * Clears the objective that occupies a display slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    clearObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjective | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a specific objective (by id).\r\n     *\r\n     * @param objectiveId\r\n     * Identifier of the objective.\r\n     */\r\n    getObjective(objectiveId: string): ScoreboardObjective | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns an objective that occupies the specified display\r\n     * slot.\r\n     *\r\n     */\r\n    getObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjectiveDisplayOptions | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all defined objectives.\r\n     *\r\n     */\r\n    getObjectives(): ScoreboardObjective[];\r\n    /**\r\n     * @remarks\r\n     * Returns all defined scoreboard identities.\r\n     *\r\n     */\r\n    getParticipants(): ScoreboardIdentity[];\r\n    /**\r\n     * @remarks\r\n     * Removes an objective from the scoreboard.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeObjective(objectiveId: ScoreboardObjective | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets an objective into a display slot with specified\r\n     * additional display settings.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * Returns the previous `ScoreboardObjective` set at the\r\n     * display slot, if no objective was previously set it returns\r\n     * `undefined`.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setObjectiveAtDisplaySlot(\r\n        displaySlotId: DisplaySlotId,\r\n        objectiveDisplaySetting: ScoreboardObjectiveDisplayOptions,\r\n    ): ScoreboardObjective | undefined;\r\n}\r",
            "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n * @example updateScoreboard.ts\r\n * ```typescript\r\n * import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n *   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n *\r\n *   const players = world.getPlayers();\r\n *\r\n *   // Ensure a new objective.\r\n *   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n *\r\n *   if (!objective) {\r\n *     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n *   }\r\n *\r\n *   // get the scoreboard identity for player 0\r\n *   const player0Identity = players[0].scoreboardIdentity;\r\n *\r\n *   if (player0Identity === undefined) {\r\n *     log(\"Could not get a scoreboard identity for player 0.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   // initialize player score to 100;\r\n *   objective.setScore(player0Identity, 100);\r\n *\r\n *   world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n *     objective: objective,\r\n *     sortOrder: ObjectiveSortOrder.Descending,\r\n *   });\r\n *\r\n *   const playerScore = objective.getScore(player0Identity) ?? 0;\r\n *\r\n *   // score should now be 110.\r\n *   objective.setScore(player0Identity, playerScore + 10);\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "addObjective",
                "parameters": [],
                "returnType": "ScoreboardObjective",
                "accessibility": "public",
                "signature": "addObjective(objectiveId: string, displayName?: string): ScoreboardObjective"
              },
              {
                "name": "clearObjectiveAtDisplaySlot",
                "parameters": [],
                "returnType": "ScoreboardObjective | undefined",
                "accessibility": "public",
                "signature": "clearObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjective | undefined"
              },
              {
                "name": "getObjective",
                "parameters": [],
                "returnType": "ScoreboardObjective | undefined",
                "accessibility": "public",
                "signature": "getObjective(objectiveId: string): ScoreboardObjective | undefined"
              },
              {
                "name": "getObjectiveAtDisplaySlot",
                "parameters": [],
                "returnType": "ScoreboardObjectiveDisplayOptions | undefined",
                "accessibility": "public",
                "signature": "getObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjectiveDisplayOptions | undefined"
              },
              {
                "name": "getObjectives",
                "parameters": [],
                "returnType": "ScoreboardObjective[]",
                "accessibility": "public",
                "signature": "getObjectives(): ScoreboardObjective[]"
              },
              {
                "name": "getParticipants",
                "parameters": [],
                "returnType": "ScoreboardIdentity[]",
                "accessibility": "public",
                "signature": "getParticipants(): ScoreboardIdentity[]"
              },
              {
                "name": "removeObjective",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "removeObjective(objectiveId: ScoreboardObjective | string): boolean"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scoreboard",
              "class"
            ],
            "examples": [
              {
                "title": "updateScoreboard.ts",
                "code": "import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n  const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n\n  const players = world.getPlayers();\r\n\n  // Ensure a new objective.\r\n  let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n\n  if (!objective) {\r\n    objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n  }\r\n\n  // get the scoreboard identity for player 0\r\n  const player0Identity = players[0].scoreboardIdentity;\r\n\n  if (player0Identity === undefined) {\r\n    log(\"Could not get a scoreboard identity for player 0.\");\r\n    return -1;\r\n  }\r\n\n  // initialize player score to 100;\r\n  objective.setScore(player0Identity, 100);\r\n\n  world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n    objective: objective,\r\n    sortOrder: ObjectiveSortOrder.Descending,\r\n  });\r\n\n  const playerScore = objective.getScore(player0Identity) ?? 0;\r\n\n  // score should now be 110.\r\n  objective.setScore(player0Identity, playerScore + 10);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScoreboardIdentity",
            "name": "ScoreboardIdentity",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains an identity of the scoreboard item.\r /",
            "definition": "export class ScoreboardIdentity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the player-visible name of this identity.\r\n     *\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard identity.\r\n     *\r\n     */\r\n    readonly id: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the ScoreboardIdentity reference is still\r\n     * valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Type of the scoreboard identity.\r\n     *\r\n     */\r\n    readonly 'type': ScoreboardIdentityType;\r\n    /**\r\n     * @remarks\r\n     * If the scoreboard identity is an entity or player, returns\r\n     * the entity that this scoreboard item corresponds to.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEntity(): Entity | undefined;\r\n}\r",
            "jsdoc": "/**\r\n * Contains an identity of the scoreboard item.\r\n */\r",
            "properties": [
              {
                "name": "displayName",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "id",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getEntity",
                "parameters": [],
                "returnType": "Entity | undefined",
                "accessibility": "public",
                "signature": "getEntity(): Entity | undefined"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scoreboardidentity",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScoreboardObjective",
            "name": "ScoreboardObjective",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains objectives and participants for the scoreboard.\r /",
            "definition": "export class ScoreboardObjective {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the player-visible name of this scoreboard\r\n     * objective.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard objective.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the ScoreboardObjective reference is still\r\n     * valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Adds a score to the given participant and objective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Participant to apply the scoreboard value addition to.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addScore(participant: Entity | ScoreboardIdentity | string, scoreToAdd: number): number;\r\n    /**\r\n     * @remarks\r\n     * Returns all objective participant identities.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getParticipants(): ScoreboardIdentity[];\r\n    /**\r\n     * @remarks\r\n     * Returns a specific score for a participant.\r\n     *\r\n     * @param participant\r\n     * Identifier of the participant to retrieve a score for.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getScore(participant: Entity | ScoreboardIdentity | string): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns specific scores for this objective for all\r\n     * participants.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getScores(): ScoreboardScoreInfo[];\r\n    /**\r\n     * @remarks\r\n     * Returns if the specified identity is a participant of the\r\n     * scoreboard objective.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    hasParticipant(participant: Entity | ScoreboardIdentity | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes a participant from this scoreboard objective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Participant to remove from being tracked with this\r\n     * objective.\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeParticipant(participant: Entity | ScoreboardIdentity | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets a score for a participant.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Identity of the participant.\r\n     * @param score\r\n     * New value of the score.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setScore(participant: Entity | ScoreboardIdentity | string, score: number): void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n */\r",
            "properties": [
              {
                "name": "displayName",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "addScore",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "addScore(participant: Entity | ScoreboardIdentity | string, scoreToAdd: number): number"
              },
              {
                "name": "getParticipants",
                "parameters": [],
                "returnType": "ScoreboardIdentity[]",
                "accessibility": "public",
                "signature": "getParticipants(): ScoreboardIdentity[]"
              },
              {
                "name": "getScore",
                "parameters": [],
                "returnType": "number | undefined",
                "accessibility": "public",
                "signature": "getScore(participant: Entity | ScoreboardIdentity | string): number | undefined"
              },
              {
                "name": "getScores",
                "parameters": [],
                "returnType": "ScoreboardScoreInfo[]",
                "accessibility": "public",
                "signature": "getScores(): ScoreboardScoreInfo[]"
              },
              {
                "name": "hasParticipant",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "hasParticipant(participant: Entity | ScoreboardIdentity | string): boolean"
              },
              {
                "name": "removeParticipant",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "removeParticipant(participant: Entity | ScoreboardIdentity | string): boolean"
              },
              {
                "name": "setScore",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setScore(participant: Entity | ScoreboardIdentity | string, score: number): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scoreboardobjective",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScoreboardScoreInfo",
            "name": "ScoreboardScoreInfo",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains a pair of a scoreboard participant and its\r respective score.\r /",
            "definition": "export class ScoreboardScoreInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant for this score.\r\n     *\r\n     */\r\n    readonly participant: ScoreboardIdentity;\r\n    /**\r\n     * @remarks\r\n     * Score value of the identity for this objective.\r\n     *\r\n     */\r\n    readonly score: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains a pair of a scoreboard participant and its\r\n * respective score.\r\n */\r",
            "properties": [
              {
                "name": "participant",
                "type": "ScoreboardIdentity",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "score",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scoreboardscoreinfo",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScreenDisplay",
            "name": "ScreenDisplay",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information about user interface elements that are\r showing up on the screen.\r ```typescript\r  function setTitle(targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length > 0) {\r     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r   }\r }\r ```\r ```typescript\r  function setTitleAndSubtitle(\r     targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r     stayDuration: 100,\r     fadeInDuration: 2,\r     fadeOutDuration: 4,\r     subtitle: \"Trouble in Block Town\",\r   });\r }\r ```\r ```typescript\r  function countdown(targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r     stayDuration: 220,\r     fadeInDuration: 2,\r     fadeOutDuration: 4,\r     subtitle: \"10\",\r   });\r    let countdown = 10;\r    const intervalId = system.runInterval(() => {\r     countdown--;\r     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r      if (countdown == 0) {\r       system.clearRun(intervalId);\r     }\r   }, 20);\r }\r ```\r /",
            "definition": "export class ScreenDisplay {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if the current reference to this screen display\r\n     * manager object is valid and functional.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getHiddenHudElements(): HudElement[];\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hideAllExcept(hudElements?: HudElement[]): void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    isForcedHidden(hudElement: HudElement): boolean;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    resetHudElementsVisibility(): void;\r\n    /**\r\n     * @remarks\r\n     * Set the action bar text - a piece of text that displays\r\n     * beneath the title and above the hot-bar.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param text\r\n     * New value for the action bar text.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     */\r\n    setActionBar(text: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets visibility of a particular element of the heads up\r\n     * display (HUD).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param visible\r\n     * Whether to set the HUD element to invisible, or to reset it\r\n     * back to its default.\r\n     * @param hudElements\r\n     * Optional list of HUD elements to configure visibility for.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setHudVisibility(visible: HudVisibility, hudElements?: HudElement[]): void;\r\n    /**\r\n     * @remarks\r\n     * Will cause a title to show up on the player's on screen\r\n     * display. Will clear the title if set to empty string. You\r\n     * can optionally specify an additional subtitle as well as\r\n     * fade in, stay and fade out times.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example setTitle.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function setTitle(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example setTitleAndSubtitle.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function setTitleAndSubtitle(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n     *     stayDuration: 100,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"Trouble in Block Town\",\r\n     *   });\r\n     * }\r\n     * ```\r\n     * @example countdown.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function countdown(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n     *     stayDuration: 220,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"10\",\r\n     *   });\r\n     *\r\n     *   let countdown = 10;\r\n     *\r\n     *   const intervalId = system.runInterval(() => {\r\n     *     countdown--;\r\n     *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n     *\r\n     *     if (countdown == 0) {\r\n     *       system.clearRun(intervalId);\r\n     *     }\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    setTitle(title: (RawMessage | string)[] | RawMessage | string, options?: TitleDisplayOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Updates the subtitle if the subtitle was previously\r\n     * displayed via the setTitle method.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example countdown.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function countdown(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n     *     stayDuration: 220,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"10\",\r\n     *   });\r\n     *\r\n     *   let countdown = 10;\r\n     *\r\n     *   const intervalId = system.runInterval(() => {\r\n     *     countdown--;\r\n     *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n     *\r\n     *     if (countdown == 0) {\r\n     *       system.clearRun(intervalId);\r\n     *     }\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    updateSubtitle(subtitle: (RawMessage | string)[] | RawMessage | string): void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information about user interface elements that are\r\n * showing up on the screen.\r\n * @example setTitle.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setTitle(targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length > 0) {\r\n *     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n *   }\r\n * }\r\n * ```\r\n * @example setTitleAndSubtitle.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setTitleAndSubtitle(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n *     stayDuration: 100,\r\n *     fadeInDuration: 2,\r\n *     fadeOutDuration: 4,\r\n *     subtitle: \"Trouble in Block Town\",\r\n *   });\r\n * }\r\n * ```\r\n * @example countdown.ts\r\n * ```typescript\r\n * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function countdown(targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n *     stayDuration: 220,\r\n *     fadeInDuration: 2,\r\n *     fadeOutDuration: 4,\r\n *     subtitle: \"10\",\r\n *   });\r\n *\r\n *   let countdown = 10;\r\n *\r\n *   const intervalId = system.runInterval(() => {\r\n *     countdown--;\r\n *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n *\r\n *     if (countdown == 0) {\r\n *       system.clearRun(intervalId);\r\n *     }\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getHiddenHudElements",
                "parameters": [],
                "returnType": "HudElement[]",
                "accessibility": "public",
                "signature": "getHiddenHudElements(): HudElement[]"
              },
              {
                "name": "hideAllExcept",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "hideAllExcept(hudElements?: HudElement[]): void"
              },
              {
                "name": "isForcedHidden",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isForcedHidden(hudElement: HudElement): boolean"
              },
              {
                "name": "resetHudElementsVisibility",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "resetHudElementsVisibility(): void"
              },
              {
                "name": "setHudVisibility",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setHudVisibility(visible: HudVisibility, hudElements?: HudElement[]): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "screendisplay",
              "class"
            ],
            "examples": [
              {
                "title": "setTitle.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction setTitle(targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length > 0) {\r\n    players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n  }\r\n}"
              },
              {
                "title": "setTitleAndSubtitle.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction setTitleAndSubtitle(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n    stayDuration: 100,\r\n    fadeInDuration: 2,\r\n    fadeOutDuration: 4,\r\n    subtitle: \"Trouble in Block Town\",\r\n  });\r\n}"
              },
              {
                "title": "countdown.ts",
                "code": "import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction countdown(targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n    stayDuration: 220,\r\n    fadeInDuration: 2,\r\n    fadeOutDuration: 4,\r\n    subtitle: \"10\",\r\n  });\r\n\n  let countdown = 10;\r\n\n  const intervalId = system.runInterval(() => {\r\n    countdown--;\r\n    players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n\n    if (countdown == 0) {\r\n      system.clearRun(intervalId);\r\n    }\r\n  }, 20);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScriptEventCommandMessageAfterEvent",
            "name": "ScriptEventCommandMessageAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Returns additional data about a /scriptevent command\r invocation.\r /",
            "definition": "export class ScriptEventCommandMessageAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of this ScriptEvent command message.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * If this command was initiated via an NPC, returns the entity\r\n     * that initiated the NPC dialogue.\r\n     *\r\n     */\r\n    readonly initiator?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional additional data passed in with the script event\r\n     * command.\r\n     *\r\n     */\r\n    readonly message: string;\r\n    /**\r\n     * @remarks\r\n     * Source block if this command was triggered via a block\r\n     * (e.g., a commandblock.)\r\n     *\r\n     */\r\n    readonly sourceBlock?: Block;\r\n    /**\r\n     * @remarks\r\n     * Source entity if this command was triggered by an entity\r\n     * (e.g., a NPC).\r\n     *\r\n     */\r\n    readonly sourceEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Returns the type of source that fired this command.\r\n     *\r\n     */\r\n    readonly sourceType: ScriptEventSource;\r\n}\r",
            "jsdoc": "/**\r\n * Returns additional data about a /scriptevent command\r\n * invocation.\r\n */\r",
            "properties": [
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "message",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "sourceType",
                "type": "ScriptEventSource",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scripteventcommandmessageafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScriptEventCommandMessageAfterEventSignal",
            "name": "ScriptEventCommandMessageAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Allows for registering an event handler that responds to\r inbound /scriptevent commands.\r /",
            "definition": "export class ScriptEventCommandMessageAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a new ScriptEvent handler.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: ScriptEventCommandMessageAfterEvent) => void,\r\n        options?: ScriptEventMessageFilterOptions,\r\n    ): (arg0: ScriptEventCommandMessageAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes a particular handler for a ScriptEvent event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ScriptEventCommandMessageAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Allows for registering an event handler that responds to\r\n * inbound /scriptevent commands.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scripteventcommandmessageaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Seat",
            "name": "Seat",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Describes a particular seating position on this rideable\r entity.\r /",
            "definition": "export class Seat {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Angle in degrees that a rider is allowed to rotate while\r\n     * riding this entity.\r\n     *\r\n     */\r\n    readonly lockRiderRotation: number;\r\n    /**\r\n     * @remarks\r\n     * A maximum number of riders that this seat can support.\r\n     *\r\n     */\r\n    readonly maxRiderCount: number;\r\n    /**\r\n     * @remarks\r\n     * A minimum number of riders that can be placed in this seat\r\n     * position, if this seat is to be filled.\r\n     *\r\n     */\r\n    readonly minRiderCount: number;\r\n    /**\r\n     * @remarks\r\n     * Physical location of this seat, relative to the entity's\r\n     * location.\r\n     *\r\n     */\r\n    readonly position: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Angle in degrees to rotate riders by.\r\n     *\r\n     */\r\n    readonly seatRotation: number;\r\n}\r",
            "jsdoc": "/**\r\n * Describes a particular seating position on this rideable\r\n * entity.\r\n */\r",
            "properties": [
              {
                "name": "lockRiderRotation",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "maxRiderCount",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "minRiderCount",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "position",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "seatRotation",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "seat",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ShutdownBeforeEventSignal",
            "name": "ShutdownBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Provides an adaptable interface for callers to subscribe to\r an event that fires before the game world shuts down. This\r event occurs after players have left, but before the world\r has closed.\r /",
            "definition": "export class ShutdownBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a new subscriber callback to this event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     */\r\n    subscribe(callback: (arg0: ShutdownEvent) => void): (arg0: ShutdownEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a subscriber callback previously subscribed to via\r\n     * the subscribe method.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function closure that was previously passed to the subscribe\r\n     * method.\r\n     */\r\n    unsubscribe(callback: (arg0: ShutdownEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Provides an adaptable interface for callers to subscribe to\r\n * an event that fires before the game world shuts down. This\r\n * event occurs after players have left, but before the world\r\n * has closed.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "shutdownbeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ShutdownEvent",
            "name": "ShutdownEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "The event object that gets dispatched when the game world is\r shutting down.\r /",
            "definition": "export class ShutdownEvent {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * The event object that gets dispatched when the game world is\r\n * shutting down.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "shutdownevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StartupBeforeEventSignal",
            "name": "StartupBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class StartupBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: StartupEvent) => void): (arg0: StartupEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: StartupEvent) => void): void;\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "startupbeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StartupEvent",
            "name": "StartupEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "This function can't be called in read-only mode.\r  This function can be called in early-execution mode.",
            "definition": "export class StartupEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly blockComponentRegistry: BlockComponentRegistry;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly customCommandRegistry: CustomCommandRegistry;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemComponentRegistry: ItemComponentRegistry;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r",
            "properties": [
              {
                "name": "blockComponentRegistry",
                "type": "BlockComponentRegistry",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "customCommandRegistry",
                "type": "CustomCommandRegistry",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemComponentRegistry",
                "type": "ItemComponentRegistry",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [
              "readonly-restricted"
            ],
            "keywords": [
              "startupevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Structure",
            "name": "Structure",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a loaded structure template (.mcstructure file).\r Structures can be placed in a world using the /structure\r /",
            "definition": "export class Structure {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The name of the structure. The identifier must include a\r\n     * namespace. For structures created via the /structure command\r\n     * or structure blocks, this namespace defaults to\r\n     * \"mystructure\".\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the Structure is valid. The Structure may\r\n     * become invalid if it is deleted.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * The dimensions of the structure. For example, a single block\r\n     * structure will have a size of {x:1, y:1, z:1}\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    readonly size: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns a BlockPermutation representing the block contained\r\n     * within the Structure at the given location.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @returns\r\n     * Returns a BlockPermutation. Returns undefined if a block\r\n     * does not exist at the given location.\r\n     * @throws\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    getBlockPermutation(location: Vector3): BlockPermutation | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the block at the given location is\r\n     * waterlogged.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @returns\r\n     * Returns whether the block at the given location is\r\n     * waterlogged. Returns false if a block does not exist at the\r\n     * given location.\r\n     * @throws\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    getIsWaterlogged(location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Creates a copy of a Structure and saves it with a new name.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the newly created Structure.\r\n     * @param saveMode\r\n     * Determines how the Structure should be saved. Defaults to\r\n     * saving to the world.\r\n     * Defaults to: 1\r\n     * @returns\r\n     * Returns the newly created structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    saveAs(identifier: string, saveMode?: StructureSaveMode): Structure;\r\n    /**\r\n     * @remarks\r\n     * Saves a modified Structure to the world file.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    saveToWorld(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a BlockPermutation within a Structure.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @param blockPermutation\r\n     * The BlockPermutation to set.\r\n     * Defaults to: null\r\n     * @param waterlogged\r\n     * Specifies whether the block should be waterlogged. Air and\r\n     * undefined blocks cannot be waterlogged.\r\n     * Defaults to: false\r\n     * @throws\r\n     * Throws if the type of block is StructureVoid.\r\n     * Throws if the block is undefined and waterlogged is set to\r\n     * true.\r\n     * Throws if the block is air and waterlogged is set to true.\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    setBlockPermutation(location: Vector3, blockPermutation?: BlockPermutation, waterlogged?: boolean): void;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a loaded structure template (.mcstructure file).\r\n * Structures can be placed in a world using the /structure\r\n * command or the {@link StructureManager} APIs.\r\n */\r",
            "properties": [
              {
                "name": "id",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isValid",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "size",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "getBlockPermutation",
                "parameters": [],
                "returnType": "BlockPermutation | undefined",
                "accessibility": "public",
                "signature": "getBlockPermutation(location: Vector3): BlockPermutation | undefined"
              },
              {
                "name": "getIsWaterlogged",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "getIsWaterlogged(location: Vector3): boolean"
              },
              {
                "name": "saveAs",
                "parameters": [],
                "returnType": "Structure",
                "accessibility": "public",
                "signature": "saveAs(identifier: string, saveMode?: StructureSaveMode): Structure"
              },
              {
                "name": "saveToWorld",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "saveToWorld(): void"
              },
              {
                "name": "setBlockPermutation",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setBlockPermutation(location: Vector3, blockPermutation?: BlockPermutation, waterlogged?: boolean): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "structure",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StructureManager",
            "name": "StructureManager",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manager for Structure related APIs. Includes APIs for\r creating, getting, placing and deleting Structures.\r /",
            "definition": "export class StructureManager {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Creates an empty Structure in memory. Use {@link\r\n     * Structure.setBlockPermutation} to populate the structure\r\n     * with blocks and save changes with {@link Structure.saveAs}.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure. A valid identifier must include a\r\n     * namespace and must be unique.\r\n     * @param size\r\n     * The size of the structure. For example, to create a single\r\n     * block structure the size should be {x:1, y:1, z:1}.\r\n     * @param saveMode\r\n     * How the Structure should be saved upon creation. Defaults to\r\n     * StructureSaveMode.Memory.\r\n     * Defaults to: 0\r\n     * @returns\r\n     * Returns the newly created Structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    createEmpty(identifier: string, size: Vector3, saveMode?: StructureSaveMode): Structure;\r\n    /**\r\n     * @remarks\r\n     * Creates a new Structure from blocks in the world. This is\r\n     * functionally equivalent to the /structure save command.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure. A valid identifier must include a\r\n     * namespace and must be unique.\r\n     * @param dimension\r\n     * The dimension where the blocks should be read from.\r\n     * @param options\r\n     * Additional options for creating a structure from the world.\r\n     * @returns\r\n     * Returns the newly created Structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     * Throws if the structure bounds exceed the maximum size.\r\n     * Throws if the structure bounds contains blocks outside the\r\n     * world bounds.\r\n     *\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    createFromWorld(\r\n        identifier: string,\r\n        dimension: Dimension,\r\n        from: Vector3,\r\n        to: Vector3,\r\n        options?: StructureCreateOptions,\r\n    ): Structure;\r\n    /**\r\n     * @remarks\r\n     * Deletes a structure from memory and from the world if it\r\n     * exists.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param structure\r\n     * The structure identifier or Structure object that should be\r\n     * deleted. Note, a Structure object will become invalid after\r\n     * it is deleted.\r\n     * @returns\r\n     * Returns whether the structure was removed.\r\n     * @throws\r\n     * Throws if a structure cannot be removed. For example, a\r\n     * structure loaded from a Behavior Pack.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    delete(structure: string | Structure): boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets a Structure that is saved to memory or the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure to get.\r\n     * @returns\r\n     * Returns a Structure if it exists, otherwise undefined.\r\n     */\r\n    get(identifier: string): Structure | undefined;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getWorldStructureIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Places a structure in the world. Structures placed in\r\n     * unloaded chunks will be queued for loading.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param structure\r\n     * The structure's identifier or a Structure object.\r\n     * @param dimension\r\n     * The dimension where the Structure should be placed.\r\n     * @param location\r\n     * The location within the dimension where the Structure should\r\n     * be placed.\r\n     * @param options\r\n     * Additional options for Structure placement.\r\n     * @throws\r\n     * Throws if the integrity value is outside of the range [0,1]\r\n     * Throws if the integrity seed is invalid.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    place(\r\n        structure: string | Structure,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: StructurePlaceOptions,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Places a partial jigsaw structure in the world. This is\r\n     * useful for debugging connections between jigsaw blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param pool\r\n     * The identifier of the template pool to start from.\r\n     * @param targetJigsaw\r\n     * The name of the jigsaw block to start from. This block must\r\n     * be included in at least one of the starting pool structure\r\n     * templates.\r\n     * @param maxDepth\r\n     * The maximum recursion depth for the jigsaw structure.\r\n     * @param dimension\r\n     * The dimension to place the jigsaw structure in.\r\n     * @param location\r\n     * The location where the jigsaw structure will begin\r\n     * generating relative to the targetJigsaw block.\r\n     * @param options\r\n     * Optional settings to use when generating the jigsaw\r\n     * structure.\r\n     * @returns\r\n     * Returns a {@link BlockBoundingBox} object which represents\r\n     * the maximum bounds of the jigsaw structure.\r\n     * @throws\r\n     * Throws if maxDepth is outside of the range [1,20]\r\n     * Throws if generation fails due to invalid parameters or\r\n     * jigsaw configuration.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link PlaceJigsawError}\r\n     */\r\n    placeJigsaw(\r\n        pool: string,\r\n        targetJigsaw: string,\r\n        maxDepth: number,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: JigsawPlaceOptions,\r\n    ): BlockBoundingBox;\r\n    /**\r\n     * @remarks\r\n     * Places a jigsaw structure in the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The identifier of the jigsaw structure.\r\n     * @param dimension\r\n     * The dimension to place the jigsaw structure in.\r\n     * @param location\r\n     * The location where the jigsaw structure will begin\r\n     * generating. Note that the y value will be overridden by the\r\n     * structure's start height unless the\r\n     * ignoreStarJigsawStructurePlaceOptions ignoreStartHeight\r\n     * option is set.\r\n     * @param options\r\n     * Optional settings to use when generating the jigsaw\r\n     * structure.\r\n     * @returns\r\n     * Returns a {@link BlockBoundingBox} object which represents\r\n     * the maximum bounds of the jigsaw structure.\r\n     * @throws\r\n     * Throws if generation fails due to invalid parameters or\r\n     * jigsaw configuration.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link PlaceJigsawError}\r\n     */\r\n    placeJigsawStructure(\r\n        identifier: string,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: JigsawStructurePlaceOptions,\r\n    ): BlockBoundingBox;\r\n}\r",
            "jsdoc": "/**\r\n * Manager for Structure related APIs. Includes APIs for\r\n * creating, getting, placing and deleting Structures.\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "createEmpty",
                "parameters": [],
                "returnType": "Structure",
                "accessibility": "public",
                "signature": "createEmpty(identifier: string, size: Vector3, saveMode?: StructureSaveMode): Structure"
              },
              {
                "name": "delete",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "delete(structure: string | Structure): boolean"
              },
              {
                "name": "get",
                "parameters": [],
                "returnType": "Structure | undefined",
                "accessibility": "public",
                "signature": "get(identifier: string): Structure | undefined"
              },
              {
                "name": "getWorldStructureIds",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getWorldStructureIds(): string[]"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "structuremanager",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.System",
            "name": "System",
            "type": "class",
            "module": "@minecraft/server",
            "description": "A class that provides system-level events and functions.\r /",
            "definition": "export class System {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of after-events for system-level\r\n     * operations.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly afterEvents: SystemAfterEvents;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of before-events for system-level\r\n     * operations.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly beforeEvents: SystemBeforeEvents;\r\n    /**\r\n     * @remarks\r\n     * Represents the current world tick of the server.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly currentTick: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this is a world where the editor is\r\n     * currently loaded, returns false otherwise.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly isEditorWorld: boolean;\r\n    /**\r\n     * @remarks\r\n     * Contains the device information for the server.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly serverSystemInfo: SystemInfo;\r\n    /**\r\n     * @remarks\r\n     * Cancels the execution of a job queued via {@link\r\n     * System.runJob}.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param jobId\r\n     * The job ID returned from {@link System.runJob}.\r\n     */\r\n    clearJob(jobId: number): void;\r\n    /**\r\n     * @remarks\r\n     * Cancels the execution of a function run that was previously\r\n     * scheduled via {@link System.run}.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    clearRun(runId: number): void;\r\n    /**\r\n     * @remarks\r\n     * Runs a specified function at the next available future time.\r\n     * This is frequently used to implement delayed behaviors and\r\n     * game loops. When run within the context of an event handler,\r\n     * this will generally run the code at the end of the same tick\r\n     * where the event occurred. When run in other code (a\r\n     * system.run callout), this will run the function in the next\r\n     * tick. Note, however, that depending on load on the system,\r\n     * running in the same or next tick is not guaranteed.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback to run at the next game tick.\r\n     * @returns\r\n     * An opaque identifier that can be used with the `clearRun`\r\n     * function to cancel the execution of this run.\r\n     * @example trapTick.ts\r\n     * ```typescript\r\n     * import { world, system } from \"@minecraft/server\";\r\n     *\r\n     * function trapTick() {\r\n     *   try {\r\n     *     // Minecraft runs at 20 ticks per second.\r\n     *     if (system.currentTick % 1200 === 0) {\r\n     *       world.sendMessage(\"Another minute passes...\");\r\n     *     }\r\n     *   } catch (e) {\r\n     *     console.warn(\"Error: \" + e);\r\n     *   }\r\n     *\r\n     *   system.run(trapTick);\r\n     * }\r\n     * ```\r\n     */\r\n    run(callback: () => void): number;\r\n    /**\r\n     * @remarks\r\n     * Runs a set of code on an interval.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Functional code that will run when this interval occurs.\r\n     * @param tickInterval\r\n     * An interval of every N ticks that the callback will be\r\n     * called upon.\r\n     * @returns\r\n     * An opaque handle that can be used with the clearRun method\r\n     * to stop the run of this function on an interval.\r\n     * @example every30Seconds.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function every30Seconds(targetLocation: DimensionLocation) {\r\n     *   const intervalRunIdentifier = Math.floor(Math.random() * 10000);\r\n     *\r\n     *   system.runInterval(() => {\r\n     *     world.sendMessage(\"This is an interval run \" + intervalRunIdentifier + \" sending a message every 30 seconds.\");\r\n     *   }, 600);\r\n     * }\r\n     * ```\r\n     */\r\n    runInterval(callback: () => void, tickInterval?: number): number;\r\n    /**\r\n     * @remarks\r\n     * Queues a generator to run until completion.  The generator\r\n     * will be given a time slice each tick, and will be run until\r\n     * it yields or completes.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param generator\r\n     * The instance of the generator to run.\r\n     * @returns\r\n     * An opaque handle that can be used with {@link\r\n     * System.clearJob} to stop the run of this generator.\r\n     * @example cubeGenerator.ts\r\n     * ```typescript\r\n     * import { system, BlockPermutation, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function cubeGenerator(targetLocation: DimensionLocation) {\r\n     *   const blockPerm = BlockPermutation.resolve(\"minecraft:cobblestone\");\r\n     *\r\n     *   system.runJob(blockPlacingGenerator(blockPerm, targetLocation, 15));\r\n     * }\r\n     *\r\n     * function* blockPlacingGenerator(blockPerm: BlockPermutation, startingLocation: DimensionLocation, size: number) {\r\n     *   for (let x = startingLocation.x; x < startingLocation.x + size; x++) {\r\n     *     for (let y = startingLocation.y; y < startingLocation.y + size; y++) {\r\n     *       for (let z = startingLocation.z; z < startingLocation.z + size; z++) {\r\n     *         const block = startingLocation.dimension.getBlock({ x: x, y: y, z: z });\r\n     *         if (block) {\r\n     *           block.setPermutation(blockPerm);\r\n     *         }\r\n     *         yield;\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    runJob(generator: Generator<void, void, void>): number;\r\n    /**\r\n     * @remarks\r\n     * Runs a set of code at a future time specified by tickDelay.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Functional code that will run when this timeout occurs.\r\n     * @param tickDelay\r\n     * Amount of time, in ticks, before the interval will be\r\n     * called.\r\n     * @returns\r\n     * An opaque handle that can be used with the clearRun method\r\n     * to stop the run of this function on an interval.\r\n     */\r\n    runTimeout(callback: () => void, tickDelay?: number): number;\r\n    /**\r\n     * @remarks\r\n     * Causes an event to fire within script with the specified\r\n     * message ID and payload.\r\n     *\r\n     * @param id\r\n     * Identifier of the message to send. This is custom and\r\n     * dependent on the kinds of behavior packs and content you may\r\n     * have installed within the world.\r\n     * @param message\r\n     * Data component of the message to send. This is custom and\r\n     * dependent on the kinds of behavior packs and content you may\r\n     * have installed within the world.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    sendScriptEvent(id: string, message: string): void;\r\n    /**\r\n     * @remarks\r\n     * waitTicks returns a promise that resolves after the\r\n     * requested number of ticks.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param ticks\r\n     * The amount of ticks to wait. Minimum value is 1.\r\n     * @returns\r\n     * A promise that is resolved when the specified amount of\r\n     * ticks have occurred.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     */\r\n    waitTicks(ticks: number): Promise<void>;\r\n}\r",
            "jsdoc": "/**\r\n * A class that provides system-level events and functions.\r\n */\r",
            "properties": [
              {
                "name": "afterEvents",
                "type": "SystemAfterEvents",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "beforeEvents",
                "type": "SystemBeforeEvents",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "currentTick",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isEditorWorld",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "serverSystemInfo",
                "type": "SystemInfo",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "clearJob",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearJob(jobId: number): void"
              },
              {
                "name": "clearRun",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearRun(runId: number): void"
              },
              {
                "name": "runJob",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "runJob(generator: Generator<void, void, void>): number"
              },
              {
                "name": "sendScriptEvent",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "sendScriptEvent(id: string, message: string): void"
              },
              {
                "name": "waitTicks",
                "parameters": [],
                "returnType": "Promise<void>",
                "accessibility": "public",
                "signature": "waitTicks(ticks: number): Promise<void>"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "system",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.SystemAfterEvents",
            "name": "SystemAfterEvents",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Provides a set of events that fire within the broader\r scripting system within Minecraft.\r /",
            "definition": "export class SystemAfterEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * An event that fires when a /scriptevent command is set. This\r\n     * provides a way for commands and other systems to trigger\r\n     * behavior within script.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly scriptEventReceive: ScriptEventCommandMessageAfterEventSignal;\r\n}\r",
            "jsdoc": "/**\r\n * Provides a set of events that fire within the broader\r\n * scripting system within Minecraft.\r\n */\r",
            "properties": [
              {
                "name": "scriptEventReceive",
                "type": "ScriptEventCommandMessageAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "systemafterevents",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.SystemBeforeEvents",
            "name": "SystemBeforeEvents",
            "type": "class",
            "module": "@minecraft/server",
            "description": "A set of events that fire before an actual action occurs. In\r most cases, you can potentially cancel or modify the\r impending event. Note that in before events any APIs that\r modify gameplay state will not function and will throw an\r error.\r /",
            "definition": "export class SystemBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly shutdown: ShutdownBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly startup: StartupBeforeEventSignal;\r\n}\r",
            "jsdoc": "/**\r\n * A set of events that fire before an actual action occurs. In\r\n * most cases, you can potentially cancel or modify the\r\n * impending event. Note that in before events any APIs that\r\n * modify gameplay state will not function and will throw an\r\n * error.\r\n */\r",
            "properties": [
              {
                "name": "shutdown",
                "type": "ShutdownBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "startup",
                "type": "StartupBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "systembeforeevents",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.SystemInfo",
            "name": "SystemInfo",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains device information, like memory tier.\r /",
            "definition": "export class SystemInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Describes the memory of the device.\r\n     *\r\n     */\r\n    readonly memoryTier: MemoryTier;\r\n}\r",
            "jsdoc": "/**\r\n * Contains device information, like memory tier.\r\n */\r",
            "properties": [
              {
                "name": "memoryTier",
                "type": "MemoryTier",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "systeminfo",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.TargetBlockHitAfterEvent",
            "name": "TargetBlockHitAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to a target block\r hit.\r /",
            "definition": "export class TargetBlockHitAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The position where the source hit the block.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The redstone power before the block is hit.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power at the time the block is hit.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * Optional source that hit the target block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to a target block\r\n * hit.\r\n */\r",
            "properties": [
              {
                "name": "hitVector",
                "type": "Vector3",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "previousRedstonePower",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "redstonePower",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Entity",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "targetblockhitafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.TargetBlockHitAfterEventSignal",
            "name": "TargetBlockHitAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a target block\r is hit.\r /",
            "definition": "export class TargetBlockHitAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a target block is\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: TargetBlockHitAfterEvent) => void): (arg0: TargetBlockHitAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a target block is\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: TargetBlockHitAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a target block\r\n * is hit.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "targetblockhitaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Trigger",
            "name": "Trigger",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Represents a trigger for firing an event.\r /",
            "definition": "export class Trigger {\n    /**\r\n     * @remarks\r\n     * Event name of the trigger.\r\n     *\r\n     */\r\n    eventName: string;\r\n    /**\r\n     * @remarks\r\n     * Creates a new trigger.\r\n     *\r\n     */\r\n    constructor(eventName: string);\r\n}\r",
            "jsdoc": "/**\r\n * Represents a trigger for firing an event.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "trigger",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.TripWireTripAfterEvent",
            "name": "TripWireTripAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes to a trip wire trip.\r ```typescript\r  function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a tripwire\r   const redstone = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y - 1,\r     z: targetLocation.z,\r   });\r   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r    if (redstone === undefined || tripwire === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r    world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r     const eventLoc = tripWireTripEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Tripwire trip event at tick \" +\r           system.currentTick +\r           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r       );\r     }\r   });\r }\r ```\r /",
            "definition": "export class TripWireTripAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether or not the block has redstone power.\r\n     *\r\n     */\r\n    readonly isPowered: boolean;\r\n    /**\r\n     * @remarks\r\n     * The sources that triggered the trip wire to trip.\r\n     *\r\n     */\r\n    readonly sources: Entity[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes to a trip wire trip.\r\n * @example tripWireTripEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a tripwire\r\n *   const redstone = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y - 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (redstone === undefined || tripwire === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n *   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n *\r\n *   world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n *     const eventLoc = tripWireTripEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Tripwire trip event at tick \" +\r\n *           system.currentTick +\r\n *           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "isPowered",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "sources",
                "type": "Entity[]",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "extends": "BlockEvent",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "tripwiretripafterevent",
              "class"
            ],
            "examples": [
              {
                "title": "tripWireTripEvent.ts",
                "code": "import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a tripwire\r\n  const redstone = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y - 1,\r\n    z: targetLocation.z,\r\n  });\r\n  const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (redstone === undefined || tripwire === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n  tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n\n  world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n    const eventLoc = tripWireTripEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Tripwire trip event at tick \" +\r\n          system.currentTick +\r\n          (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.TripWireTripAfterEventSignal",
            "name": "TripWireTripAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to when a trip wire is\r tripped.\r ```typescript\r  function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a tripwire\r   const redstone = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y - 1,\r     z: targetLocation.z,\r   });\r   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r    if (redstone === undefined || tripwire === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r    world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r     const eventLoc = tripWireTripEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Tripwire trip event at tick \" +\r           system.currentTick +\r           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r       );\r     }\r   });\r }\r ```\r /",
            "definition": "export class TripWireTripAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a trip wire is\r\n     * tripped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: TripWireTripAfterEvent) => void): (arg0: TripWireTripAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a trip wire is\r\n     * tripped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: TripWireTripAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to when a trip wire is\r\n * tripped.\r\n * @example tripWireTripEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a tripwire\r\n *   const redstone = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y - 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (redstone === undefined || tripwire === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n *   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n *\r\n *   world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n *     const eventLoc = tripWireTripEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Tripwire trip event at tick \" +\r\n *           system.currentTick +\r\n *           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "tripwiretripaftereventsignal",
              "class"
            ],
            "examples": [
              {
                "title": "tripWireTripEvent.ts",
                "code": "import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a tripwire\r\n  const redstone = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y - 1,\r\n    z: targetLocation.z,\r\n  });\r\n  const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (redstone === undefined || tripwire === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n  tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n\n  world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n    const eventLoc = tripWireTripEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Tripwire trip event at tick \" +\r\n          system.currentTick +\r\n          (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WeatherChangeAfterEvent",
            "name": "WeatherChangeAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes in weather in the\r environment.\r /",
            "definition": "export class WeatherChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension in which the weather has changed.\r\n     *\r\n     */\r\n    readonly dimension: string;\r\n    /**\r\n     * @remarks\r\n     * The weather type after the weather was changed.\r\n     *\r\n     */\r\n    readonly newWeather: WeatherType;\r\n    /**\r\n     * @remarks\r\n     * The weather type before the weather was changed.\r\n     *\r\n     */\r\n    readonly previousWeather: WeatherType;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes in weather in the\r\n * environment.\r\n */\r",
            "properties": [
              {
                "name": "dimension",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "newWeather",
                "type": "WeatherType",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "previousWeather",
                "type": "WeatherType",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "weatherchangeafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WeatherChangeAfterEventSignal",
            "name": "WeatherChangeAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to weather changing.\r /",
            "definition": "export class WeatherChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WeatherChangeAfterEvent) => void): (arg0: WeatherChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WeatherChangeAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to weather changing.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "weatherchangeaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WeatherChangeBeforeEvent",
            "name": "WeatherChangeBeforeEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains information related to changes in weather in the\r environment.\r /",
            "definition": "export class WeatherChangeBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the weather change will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets the duration of the new weather (in ticks).\r\n     *\r\n     */\r\n    duration: number;\r\n    /**\r\n     * @remarks\r\n     * The type of weather that will be applied.\r\n     *\r\n     */\r\n    newWeather: WeatherType;\r\n    /**\r\n     * @remarks\r\n     * The type of weather that it was prior to the event being\r\n     * fired.\r\n     *\r\n     */\r\n    readonly previousWeather: WeatherType;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information related to changes in weather in the\r\n * environment.\r\n */\r",
            "properties": [
              {
                "name": "previousWeather",
                "type": "WeatherType",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "weatherchangebeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WeatherChangeBeforeEventSignal",
            "name": "WeatherChangeBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Manages callbacks that are connected to before weather\r changing.\r /",
            "definition": "export class WeatherChangeBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WeatherChangeBeforeEvent) => void): (arg0: WeatherChangeBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WeatherChangeBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "/**\r\n * Manages callbacks that are connected to before weather\r\n * changing.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "weatherchangebeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.World",
            "name": "World",
            "type": "class",
            "module": "@minecraft/server",
            "description": "A class that wraps the state of a world - a set of\r dimensions and the environment of Minecraft.\r /",
            "definition": "export class World {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Contains a set of events that are applicable to the entirety\r\n     * of the world.  Event callbacks are called in a deferred\r\n     * manner. Event callbacks are executed in read-write mode.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly afterEvents: WorldAfterEvents;\r\n    /**\r\n     * @remarks\r\n     * Contains a set of events that are applicable to the entirety\r\n     * of the world. Event callbacks are called immediately. Event\r\n     * callbacks are executed in read-only mode.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     * @example customCommand.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function customCommand(targetLocation: DimensionLocation) {\r\n     *   const chatCallback = world.beforeEvents.chatSend.subscribe((eventData) => {\r\n     *     if (eventData.message.includes(\"cancel\")) {\r\n     *       // Cancel event if the message contains \"cancel\"\r\n     *       eventData.cancel = true;\r\n     *     } else {\r\n     *       const args = eventData.message.split(\" \");\r\n     *\r\n     *       if (args.length > 0) {\r\n     *         switch (args[0].toLowerCase()) {\r\n     *           case \"echo\":\r\n     *             // Send a modified version of chat message\r\n     *             world.sendMessage(`Echo '${eventData.message.substring(4).trim()}'`);\r\n     *             break;\r\n     *           case \"help\":\r\n     *             world.sendMessage(`Available commands: echo <message>`);\r\n     *             break;\r\n     *         }\r\n     *       }\r\n     *     }\r\n     *   });\r\n     * }\r\n     * ```\r\n     */\r\n    readonly beforeEvents: WorldBeforeEvents;\r\n    /**\r\n     * @remarks\r\n     * The game rules that apply to the world.\r\n     *\r\n     */\r\n    readonly gameRules: GameRules;\r\n    readonly isHardcore: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the general global scoreboard that applies to the\r\n     * world.\r\n     *\r\n     */\r\n    readonly scoreboard: Scoreboard;\r\n    /**\r\n     * @remarks\r\n     * Returns the manager for {@link Structure} related APIs.\r\n     *\r\n     */\r\n    readonly structureManager: StructureManager;\r\n    /**\r\n     * @remarks\r\n     * Clears the set of dynamic properties declared for this\r\n     * behavior pack within the world.\r\n     *\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Returns the absolute time since the start of the world.\r\n     *\r\n     */\r\n    getAbsoluteTime(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns an array of all active players within the world.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getAllPlayers(): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current day.\r\n     *\r\n     * @returns\r\n     * The current day, determined by the world time divided by the\r\n     * number of ticks per day. New worlds start at day 0.\r\n     */\r\n    getDay(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the default Overworld spawn location.\r\n     *\r\n     * @returns\r\n     * The default Overworld spawn location. By default, the Y\r\n     * coordinate is 32767, indicating a player's spawn height is\r\n     * not fixed and will be determined by surrounding blocks.\r\n     */\r\n    getDefaultSpawnLocation(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Gets the difficulty from the world.\r\n     *\r\n     * @returns\r\n     * Returns the world difficulty.\r\n     */\r\n    getDifficulty(): Difficulty;\r\n    /**\r\n     * @remarks\r\n     * Returns a dimension object.\r\n     *\r\n     * @param dimensionId\r\n     * The name of the dimension. For example, \"overworld\",\r\n     * \"nether\" or \"the_end\".\r\n     * @returns\r\n     * The requested dimension\r\n     * @throws\r\n     * Throws if the given dimension name is invalid\r\n     */\r\n    getDimension(dimensionId: string): Dimension;\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws\r\n     * Throws if the given dynamic property identifier is not\r\n     * defined.\r\n     * @example incrementDynamicProperty.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicProperty(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let number = world.getDynamicProperty(\"samplelibrary:number\");\r\n     *\r\n     *   log(\"Current value is: \" + number);\r\n     *\r\n     *   if (number === undefined) {\r\n     *     number = 0;\r\n     *   }\r\n     *\r\n     *   if (typeof number !== \"number\") {\r\n     *     log(\"Number is of an unexpected type.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   world.setDynamicProperty(\"samplelibrary:number\", number + 1);\r\n     * }\r\n     * ```\r\n     * @example incrementDynamicPropertyInJsonBlob.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicPropertyInJsonBlob(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let paintStr = world.getDynamicProperty(\"samplelibrary:longerjson\");\r\n     *   let paint: { color: string; intensity: number } | undefined = undefined;\r\n     *\r\n     *   log(\"Current value is: \" + paintStr);\r\n     *\r\n     *   if (paintStr === undefined) {\r\n     *     paint = {\r\n     *       color: \"purple\",\r\n     *       intensity: 0,\r\n     *     };\r\n     *   } else {\r\n     *     if (typeof paintStr !== \"string\") {\r\n     *       log(\"Paint is of an unexpected type.\");\r\n     *       return -1;\r\n     *     }\r\n     *\r\n     *     try {\r\n     *       paint = JSON.parse(paintStr);\r\n     *     } catch (e) {\r\n     *       log(\"Error parsing serialized struct.\");\r\n     *       return -1;\r\n     *     }\r\n     *   }\r\n     *\r\n     *   if (!paint) {\r\n     *     log(\"Error parsing serialized struct.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   paint.intensity++;\r\n     *   paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits\r\n     *   world.setDynamicProperty(\"samplelibrary:longerjson\", paintStr);\r\n     * }\r\n     * ```\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a set of dynamic property identifiers that have been\r\n     * set in this world.\r\n     *\r\n     * @returns\r\n     * A string array of active dynamic property identifiers.\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets the total byte count of dynamic properties. This could\r\n     * potentially be used for your own analytics to ensure you're\r\n     * not storing gigantic sets of dynamic properties.\r\n     *\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns an entity based on the provided id.\r\n     *\r\n     * @param id\r\n     * The id of the entity.\r\n     * @returns\r\n     * The requested entity object.\r\n     * @throws\r\n     * Throws if the given entity id is invalid.\r\n     */\r\n    getEntity(id: string): Entity | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the MoonPhase for the current time.\r\n     *\r\n     */\r\n    getMoonPhase(): MoonPhase;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of players based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * players returned.\r\n     * @returns\r\n     * A player array.\r\n     * @throws\r\n     * Throws if the provided EntityQueryOptions are invalid.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getPlayers(options?: EntityQueryOptions): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the time of day.\r\n     *\r\n     * @returns\r\n     * The time of day, in ticks, between 0 and 24000.\r\n     */\r\n    getTimeOfDay(): number;\r\n    /**\r\n     * @remarks\r\n     * Plays a particular music track for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     * @example playMusicAndSound.ts\r\n     * ```typescript\r\n     * import { world, MusicOptions, WorldSoundOptions, PlayerSoundOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function playMusicAndSound(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   const musicOptions: MusicOptions = {\r\n     *     fade: 0.5,\r\n     *     loop: true,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *   world.playMusic(\"music.menu\", musicOptions);\r\n     *\r\n     *   const worldSoundOptions: WorldSoundOptions = {\r\n     *     pitch: 0.5,\r\n     *     volume: 4.0,\r\n     *   };\r\n     *   world.playSound(\"ambient.weather.thunder\", targetLocation, worldSoundOptions);\r\n     *\r\n     *   const playerSoundOptions: PlayerSoundOptions = {\r\n     *     pitch: 1.0,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *\r\n     *   players[0].playSound(\"bucket.fill_water\", playerSoundOptions);\r\n     * }\r\n     * ```\r\n     */\r\n    playMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Queues an additional music track for players. If a track is\r\n     * not playing, a music track will play.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     *\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     */\r\n    queueMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Sends a message to all players.\r\n     *\r\n     * @param message\r\n     * The message to be displayed.\r\n     * @throws\r\n     * This method can throw if the provided {@link RawMessage} is\r\n     * in an invalid format. For example, if an empty `name` string\r\n     * is provided to `score`.\r\n     */\r\n    sendMessage(message: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the world time.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param absoluteTime\r\n     * The world time, in ticks.\r\n     */\r\n    setAbsoluteTime(absoluteTime: number): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a default spawn location for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param spawnLocation\r\n     * Location of the spawn point. Note that this is assumed to be\r\n     * within the overworld dimension.\r\n     * @throws\r\n     * Throws if the provided spawn location is out of bounds.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setDefaultSpawnLocation(spawnLocation: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the worlds difficulty.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param difficulty\r\n     * The difficulty we want to set the world to.\r\n     */\r\n    setDifficulty(difficulty: Difficulty): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the given dynamic property identifier is not\r\n     * defined.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     * @example incrementDynamicProperty.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicProperty(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let number = world.getDynamicProperty(\"samplelibrary:number\");\r\n     *\r\n     *   log(\"Current value is: \" + number);\r\n     *\r\n     *   if (number === undefined) {\r\n     *     number = 0;\r\n     *   }\r\n     *\r\n     *   if (typeof number !== \"number\") {\r\n     *     log(\"Number is of an unexpected type.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   world.setDynamicProperty(\"samplelibrary:number\", number + 1);\r\n     * }\r\n     * ```\r\n     * @example incrementDynamicPropertyInJsonBlob.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicPropertyInJsonBlob(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let paintStr = world.getDynamicProperty(\"samplelibrary:longerjson\");\r\n     *   let paint: { color: string; intensity: number } | undefined = undefined;\r\n     *\r\n     *   log(\"Current value is: \" + paintStr);\r\n     *\r\n     *   if (paintStr === undefined) {\r\n     *     paint = {\r\n     *       color: \"purple\",\r\n     *       intensity: 0,\r\n     *     };\r\n     *   } else {\r\n     *     if (typeof paintStr !== \"string\") {\r\n     *       log(\"Paint is of an unexpected type.\");\r\n     *       return -1;\r\n     *     }\r\n     *\r\n     *     try {\r\n     *       paint = JSON.parse(paintStr);\r\n     *     } catch (e) {\r\n     *       log(\"Error parsing serialized struct.\");\r\n     *       return -1;\r\n     *     }\r\n     *   }\r\n     *\r\n     *   if (!paint) {\r\n     *     log(\"Error parsing serialized struct.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   paint.intensity++;\r\n     *   paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits\r\n     *   world.setDynamicProperty(\"samplelibrary:longerjson\", paintStr);\r\n     * }\r\n     * ```\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the time of day.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param timeOfDay\r\n     * The time of day, in ticks, between 0 and 24000.\r\n     * @throws\r\n     * Throws if the provided time of day is not within the valid\r\n     * range.\r\n     */\r\n    setTimeOfDay(timeOfDay: number | TimeOfDay): void;\r\n    /**\r\n     * @remarks\r\n     * Stops any music tracks from playing.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    stopMusic(): void;\r\n}\r",
            "jsdoc": "/**\r\n * A class that wraps the state of a world - a set of\r\n * dimensions and the environment of Minecraft.\r\n */\r",
            "properties": [
              {
                "name": "afterEvents",
                "type": "WorldAfterEvents",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "beforeEvents",
                "type": "WorldBeforeEvents",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "gameRules",
                "type": "GameRules",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "isHardcore",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "scoreboard",
                "type": "Scoreboard",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "structureManager",
                "type": "StructureManager",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "clearDynamicProperties",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "clearDynamicProperties(): void"
              },
              {
                "name": "getAbsoluteTime",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getAbsoluteTime(): number"
              },
              {
                "name": "getAllPlayers",
                "parameters": [],
                "returnType": "Player[]",
                "accessibility": "public",
                "signature": "getAllPlayers(): Player[]"
              },
              {
                "name": "getDay",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getDay(): number"
              },
              {
                "name": "getDefaultSpawnLocation",
                "parameters": [],
                "returnType": "Vector3",
                "accessibility": "public",
                "signature": "getDefaultSpawnLocation(): Vector3"
              },
              {
                "name": "getDifficulty",
                "parameters": [],
                "returnType": "Difficulty",
                "accessibility": "public",
                "signature": "getDifficulty(): Difficulty"
              },
              {
                "name": "getDimension",
                "parameters": [],
                "returnType": "Dimension",
                "accessibility": "public",
                "signature": "getDimension(dimensionId: string): Dimension"
              },
              {
                "name": "getDynamicProperty",
                "parameters": [],
                "returnType": "boolean | number | string | Vector3 | undefined",
                "accessibility": "public",
                "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
              },
              {
                "name": "getDynamicPropertyIds",
                "parameters": [],
                "returnType": "string[]",
                "accessibility": "public",
                "signature": "getDynamicPropertyIds(): string[]"
              },
              {
                "name": "getDynamicPropertyTotalByteCount",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getDynamicPropertyTotalByteCount(): number"
              },
              {
                "name": "getEntity",
                "parameters": [],
                "returnType": "Entity | undefined",
                "accessibility": "public",
                "signature": "getEntity(id: string): Entity | undefined"
              },
              {
                "name": "getMoonPhase",
                "parameters": [],
                "returnType": "MoonPhase",
                "accessibility": "public",
                "signature": "getMoonPhase(): MoonPhase"
              },
              {
                "name": "getPlayers",
                "parameters": [],
                "returnType": "Player[]",
                "accessibility": "public",
                "signature": "getPlayers(options?: EntityQueryOptions): Player[]"
              },
              {
                "name": "getTimeOfDay",
                "parameters": [],
                "returnType": "number",
                "accessibility": "public",
                "signature": "getTimeOfDay(): number"
              },
              {
                "name": "playMusic",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "playMusic(trackId: string, musicOptions?: MusicOptions): void"
              },
              {
                "name": "queueMusic",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "queueMusic(trackId: string, musicOptions?: MusicOptions): void"
              },
              {
                "name": "setAbsoluteTime",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setAbsoluteTime(absoluteTime: number): void"
              },
              {
                "name": "setDefaultSpawnLocation",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setDefaultSpawnLocation(spawnLocation: Vector3): void"
              },
              {
                "name": "setDifficulty",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setDifficulty(difficulty: Difficulty): void"
              },
              {
                "name": "setDynamicProperty",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
              },
              {
                "name": "setTimeOfDay",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "setTimeOfDay(timeOfDay: number | TimeOfDay): void"
              },
              {
                "name": "stopMusic",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "stopMusic(): void"
              }
            ],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "world",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WorldAfterEvents",
            "name": "WorldAfterEvents",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Contains a set of events that are available across the scope\r of the World.\r /",
            "definition": "export class WorldAfterEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event fires for each BlockLocation destroyed by an\r\n     * explosion. It is fired after the blocks have already been\r\n     * destroyed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly blockExplode: BlockExplodeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a button is pushed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly buttonPush: ButtonPushAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired when an entity event has been triggered\r\n     * that will update the component definition state of an\r\n     * entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly dataDrivenEntityTrigger: DataDrivenEntityTriggerAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an effect, like poisoning, is added to\r\n     * an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly effectAdd: EffectAddAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity dies.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityDie: EntityDieAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when entity health changes in any degree.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHealthChanged: EntityHealthChangedAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity hits (that is, melee\r\n     * attacks) a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHitBlock: EntityHitBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity hits (that is, melee\r\n     * attacks) another entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHitEntity: EntityHitEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity is hurt (takes damage).\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHurt: EntityHurtAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when an entity is loaded.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityLoad: EntityLoadAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when an entity is removed (for example, potentially\r\n     * unloaded, or removed after being killed).\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityRemove: EntityRemoveAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity is spawned.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entitySpawn: EntitySpawnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired after an explosion occurs.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly explosion: ExplosionAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a world.gameRules property has\r\n     * changed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly gameRuleChange: GameRuleChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item completes charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemCompleteUse: ItemCompleteUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item is released from\r\n     * charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemReleaseUse: ItemReleaseUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item starts charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStartUse: ItemStartUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player successfully uses an item or\r\n     * places a block by pressing the Use Item / Place Block\r\n     * button. If multiple blocks are placed, this event will only\r\n     * occur once at the beginning of the block placement. Note:\r\n     * This event cannot be used with Hoe or Axe items.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStartUseOn: ItemStartUseOnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item stops charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStopUse: ItemStopUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player releases the Use Item / Place\r\n     * Block button after successfully using an item. Note: This\r\n     * event cannot be used with Hoe or Axe items.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStopUseOn: ItemStopUseOnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item is successfully used by a\r\n     * player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemUse: ItemUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A lever has been pulled.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly leverAction: LeverActionAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a piston expands or retracts.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pistonActivate: PistonActivateAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires for a block that is broken by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerBreakBlock: PlayerBreakBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an {@link InputButton} state is\r\n     * changed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerButtonInput: PlayerButtonInputAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when a player moved to a different dimension.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerDimensionChange: PlayerDimensionChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerEmote: PlayerEmoteAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerGameModeChange: PlayerGameModeChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player's selected slot changes.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerHotbarSelectedSlotChange: PlayerHotbarSelectedSlotChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player's {@link InputMode} changes.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInputModeChange: PlayerInputModeChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a players input permissions change.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInputPermissionCategoryChange: PlayerInputPermissionCategoryChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * An event for when a player interacts with a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithBlock: PlayerInteractWithBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player interacts with an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithEntity: PlayerInteractWithEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item gets added or removed to the\r\n     * player's inventory.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInventoryItemChange: PlayerInventoryItemChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player joins a world.  See also\r\n     * playerSpawn for another related event you can trap for when\r\n     * a player is spawned the first time within a world.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerJoin: PlayerJoinAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player leaves a world.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerLeave: PlayerLeaveAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires for a block that is placed by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerPlaceBlock: PlayerPlaceBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player spawns or respawns. Note that\r\n     * an additional flag within this event will tell you whether\r\n     * the player is spawning right after join vs. a respawn.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerSpawn: PlayerSpawnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A pressure plate has popped back up (i.e., there are no\r\n     * entities on the pressure plate.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pressurePlatePop: PressurePlatePopAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A pressure plate has pushed (at least one entity has moved\r\n     * onto a pressure plate.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pressurePlatePush: PressurePlatePushAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a projectile hits a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly projectileHitBlock: ProjectileHitBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a projectile hits an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly projectileHitEntity: ProjectileHitEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A target block was hit.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly targetBlockHit: TargetBlockHitAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A trip wire was tripped.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly tripWireTrip: TripWireTripAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event will be triggered when the weather changes within\r\n     * Minecraft.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly weatherChange: WeatherChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly worldLoad: WorldLoadAfterEventSignal;\r\n}\r",
            "jsdoc": "/**\r\n * Contains a set of events that are available across the scope\r\n * of the World.\r\n */\r",
            "properties": [
              {
                "name": "blockExplode",
                "type": "BlockExplodeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "buttonPush",
                "type": "ButtonPushAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "dataDrivenEntityTrigger",
                "type": "DataDrivenEntityTriggerAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "effectAdd",
                "type": "EffectAddAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entityDie",
                "type": "EntityDieAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entityHealthChanged",
                "type": "EntityHealthChangedAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entityHitBlock",
                "type": "EntityHitBlockAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entityHitEntity",
                "type": "EntityHitEntityAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entityHurt",
                "type": "EntityHurtAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entityLoad",
                "type": "EntityLoadAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entityRemove",
                "type": "EntityRemoveAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entitySpawn",
                "type": "EntitySpawnAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "explosion",
                "type": "ExplosionAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "gameRuleChange",
                "type": "GameRuleChangeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemCompleteUse",
                "type": "ItemCompleteUseAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemReleaseUse",
                "type": "ItemReleaseUseAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemStartUse",
                "type": "ItemStartUseAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemStartUseOn",
                "type": "ItemStartUseOnAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemStopUse",
                "type": "ItemStopUseAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemStopUseOn",
                "type": "ItemStopUseOnAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemUse",
                "type": "ItemUseAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "leverAction",
                "type": "LeverActionAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "pistonActivate",
                "type": "PistonActivateAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerBreakBlock",
                "type": "PlayerBreakBlockAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerButtonInput",
                "type": "PlayerButtonInputAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerDimensionChange",
                "type": "PlayerDimensionChangeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerEmote",
                "type": "PlayerEmoteAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerGameModeChange",
                "type": "PlayerGameModeChangeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerHotbarSelectedSlotChange",
                "type": "PlayerHotbarSelectedSlotChangeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerInputModeChange",
                "type": "PlayerInputModeChangeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerInputPermissionCategoryChange",
                "type": "PlayerInputPermissionCategoryChangeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerInteractWithBlock",
                "type": "PlayerInteractWithBlockAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerInteractWithEntity",
                "type": "PlayerInteractWithEntityAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerInventoryItemChange",
                "type": "PlayerInventoryItemChangeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerJoin",
                "type": "PlayerJoinAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerLeave",
                "type": "PlayerLeaveAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerPlaceBlock",
                "type": "PlayerPlaceBlockAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerSpawn",
                "type": "PlayerSpawnAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "pressurePlatePop",
                "type": "PressurePlatePopAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "pressurePlatePush",
                "type": "PressurePlatePushAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "projectileHitBlock",
                "type": "ProjectileHitBlockAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "projectileHitEntity",
                "type": "ProjectileHitEntityAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "targetBlockHit",
                "type": "TargetBlockHitAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "tripWireTrip",
                "type": "TripWireTripAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "weatherChange",
                "type": "WeatherChangeAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "worldLoad",
                "type": "WorldLoadAfterEventSignal",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "worldafterevents",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WorldBeforeEvents",
            "name": "WorldBeforeEvents",
            "type": "class",
            "module": "@minecraft/server",
            "description": "A set of events that fire before an actual action occurs. In\r most cases, you can potentially cancel or modify the\r impending event. Note that in before events any APIs that\r modify gameplay state will not function and will throw an\r error. (e.g., dimension.spawnEntity)\r /",
            "definition": "export class WorldBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event is triggered after an event has been added to an\r\n     * entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly effectAdd: EffectAddBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before an entity is removed from the world (for\r\n     * example, unloaded or removed after being killed.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityRemove: EntityRemoveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired after an explosion occurs.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly explosion: ExplosionBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item is successfully used by a\r\n     * player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemUse: ItemUseBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires before a block is broken by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerBreakBlock: PlayerBreakBlockBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerGameModeChange: PlayerGameModeChangeBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before a player interacts with a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithBlock: PlayerInteractWithBlockBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before a player interacts with an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithEntity: PlayerInteractWithEntityBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when a player leaves the game.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerLeave: PlayerLeaveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly weatherChange: WeatherChangeBeforeEventSignal;\r\n}\r",
            "jsdoc": "/**\r\n * A set of events that fire before an actual action occurs. In\r\n * most cases, you can potentially cancel or modify the\r\n * impending event. Note that in before events any APIs that\r\n * modify gameplay state will not function and will throw an\r\n * error. (e.g., dimension.spawnEntity)\r\n */\r",
            "properties": [
              {
                "name": "effectAdd",
                "type": "EffectAddBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "entityRemove",
                "type": "EntityRemoveBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "explosion",
                "type": "ExplosionBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "itemUse",
                "type": "ItemUseBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerBreakBlock",
                "type": "PlayerBreakBlockBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerGameModeChange",
                "type": "PlayerGameModeChangeBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerInteractWithBlock",
                "type": "PlayerInteractWithBlockBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerInteractWithEntity",
                "type": "PlayerInteractWithEntityBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "playerLeave",
                "type": "PlayerLeaveBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "weatherChange",
                "type": "WeatherChangeBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "worldbeforeevents",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WorldLoadAfterEvent",
            "name": "WorldLoadAfterEvent",
            "type": "class",
            "module": "@minecraft/server",
            "description": "This property can be read in early-execution mode.",
            "definition": "export class WorldLoadAfterEvent {\n    private constructor();\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "worldloadafterevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WorldLoadAfterEventSignal",
            "name": "WorldLoadAfterEventSignal",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class WorldLoadAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WorldLoadAfterEvent) => void): (arg0: WorldLoadAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WorldLoadAfterEvent) => void): void;\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "worldloadaftereventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockCustomComponentAlreadyRegisteredError",
            "name": "BlockCustomComponentAlreadyRegisteredError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Relative volume and space by which this sound is heard.",
            "definition": "export class BlockCustomComponentAlreadyRegisteredError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Relative volume and space by which this sound is heard.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcustomcomponentalreadyregisterederror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockCustomComponentReloadNewComponentError",
            "name": "BlockCustomComponentReloadNewComponentError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class BlockCustomComponentReloadNewComponentError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcustomcomponentreloadnewcomponenterror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockCustomComponentReloadNewEventError",
            "name": "BlockCustomComponentReloadNewEventError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class BlockCustomComponentReloadNewEventError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcustomcomponentreloadneweventerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockCustomComponentReloadVersionError",
            "name": "BlockCustomComponentReloadVersionError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class BlockCustomComponentReloadVersionError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcustomcomponentreloadversionerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CommandError",
            "name": "CommandError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class CommandError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "commanderror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ContainerRulesError",
            "name": "ContainerRulesError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "broken on container operations.\r /",
            "definition": "export class ContainerRulesError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Error thrown if {@link @minecraft/server.ContainerRules} are\r\n * broken on container operations.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "containerruleserror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandError",
            "name": "CustomCommandError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Error object thrown when CustomCommandRegistry errors occur.\r /",
            "definition": "export class CustomCommandError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Reason for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: CustomCommandErrorReason;\r\n}\r",
            "jsdoc": "/**\r\n * Error object thrown when CustomCommandRegistry errors occur.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommanderror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomComponentInvalidRegistryError",
            "name": "CustomComponentInvalidRegistryError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Reason for the error.\r  This property can be read in early-execution mode.",
            "definition": "export class CustomComponentInvalidRegistryError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Reason for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcomponentinvalidregistryerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomComponentNameError",
            "name": "CustomComponentNameError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class CustomComponentNameError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: CustomComponentNameErrorReason;\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcomponentnameerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EnchantmentLevelOutOfBoundsError",
            "name": "EnchantmentLevelOutOfBoundsError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "This property can be read in early-execution mode.",
            "definition": "export class EnchantmentLevelOutOfBoundsError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "enchantmentleveloutofboundserror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EnchantmentTypeNotCompatibleError",
            "name": "EnchantmentTypeNotCompatibleError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class EnchantmentTypeNotCompatibleError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "enchantmenttypenotcompatibleerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EnchantmentTypeUnknownIdError",
            "name": "EnchantmentTypeUnknownIdError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class EnchantmentTypeUnknownIdError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "enchantmenttypeunknowniderror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntitySpawnError",
            "name": "EntitySpawnError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class EntitySpawnError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityspawnerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InvalidContainerError",
            "name": "InvalidContainerError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "The container is invalid. This can occur if the container is\r missing or deleted.\r /",
            "definition": "export class InvalidContainerError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * The container is invalid. This can occur if the container is\r\n * missing or deleted.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "invalidcontainererror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InvalidContainerSlotError",
            "name": "InvalidContainerSlotError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "The container slot is invalid. This can occur when the\r owning container is destroyed or unloaded.\r /",
            "definition": "export class InvalidContainerSlotError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * The container slot is invalid. This can occur when the\r\n * owning container is destroyed or unloaded.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "invalidcontainersloterror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InvalidEntityError",
            "name": "InvalidEntityError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "The error called when an entity is invalid. This can occur\r when accessing components on a removed entity.\r /",
            "definition": "export class InvalidEntityError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The id of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    id: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    type: string;\r\n}\r",
            "jsdoc": "/**\r\n * The error called when an entity is invalid. This can occur\r\n * when accessing components on a removed entity.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "invalidentityerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InvalidIteratorError",
            "name": "InvalidIteratorError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "The type of the entity that is now invalid.\r  This property can be read in early-execution mode.",
            "definition": "export class InvalidIteratorError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * The type of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "invaliditeratorerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InvalidStructureError",
            "name": "InvalidStructureError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Thrown when a Structure is invalid. A structure becomes\r invalid when it is deleted.\r /",
            "definition": "export class InvalidStructureError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Thrown when a Structure is invalid. A structure becomes\r\n * invalid when it is deleted.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "invalidstructureerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCustomComponentAlreadyRegisteredError",
            "name": "ItemCustomComponentAlreadyRegisteredError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Thrown when trying to register an item custom component with\r a name that has already been registered.\r /",
            "definition": "export class ItemCustomComponentAlreadyRegisteredError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Thrown when trying to register an item custom component with\r\n * a name that has already been registered.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcustomcomponentalreadyregisterederror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCustomComponentReloadNewComponentError",
            "name": "ItemCustomComponentReloadNewComponentError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Thrown after using the /reload command when trying to\r register a previously unregistered item custom component.\r /",
            "definition": "export class ItemCustomComponentReloadNewComponentError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously unregistered item custom component.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcustomcomponentreloadnewcomponenterror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCustomComponentReloadNewEventError",
            "name": "ItemCustomComponentReloadNewEventError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Thrown after using the /reload command when trying to\r register a previously registered item custom component that\r handles a new event.\r /",
            "definition": "export class ItemCustomComponentReloadNewEventError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously registered item custom component that\r\n * handles a new event.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcustomcomponentreloadneweventerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCustomComponentReloadVersionError",
            "name": "ItemCustomComponentReloadVersionError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Thrown after using the /reload command when trying to\r register a previously registered item custom component with\r a newer API version.\r /",
            "definition": "export class ItemCustomComponentReloadVersionError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously registered item custom component with\r\n * a newer API version.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcustomcomponentreloadversionerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.LocationInUnloadedChunkError",
            "name": "LocationInUnloadedChunkError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Thrown when the chunk for provided location or bounding area\r is not loaded.\r /",
            "definition": "export class LocationInUnloadedChunkError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Thrown when the chunk for provided location or bounding area\r\n * is not loaded.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "locationinunloadedchunkerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.LocationOutOfWorldBoundariesError",
            "name": "LocationOutOfWorldBoundariesError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Thrown when a provided location or bounding area is outside\r the minimum or maximum dimension height.\r /",
            "definition": "export class LocationOutOfWorldBoundariesError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Thrown when a provided location or bounding area is outside\r\n * the minimum or maximum dimension height.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "locationoutofworldboundarieserror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.NamespaceNameError",
            "name": "NamespaceNameError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Thrown when a name requires a namespace and an error occurs\r when validating that namespace\r /",
            "definition": "export class NamespaceNameError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: NamespaceNameErrorReason;\r\n}\r",
            "jsdoc": "/**\r\n * Thrown when a name requires a namespace and an error occurs\r\n * when validating that namespace\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "namespacenameerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlaceJigsawError",
            "name": "PlaceJigsawError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "This property can be read in early-execution mode.",
            "definition": "export class PlaceJigsawError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "placejigsawerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.RawMessageError",
            "name": "RawMessageError",
            "type": "class",
            "module": "@minecraft/server",
            "definition": "export class RawMessageError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "rawmessageerror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.UnloadedChunksError",
            "name": "UnloadedChunksError",
            "type": "class",
            "module": "@minecraft/server",
            "description": "Error thrown when the specified area contains one or more\r unloaded chunks.\r /",
            "definition": "export class UnloadedChunksError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * Error thrown when the specified area contains one or more\r\n * unloaded chunks.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "unloadedchunkserror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          }
        ],
        "interfaces": [
          {
            "id": "@minecraft/server.BlockBoundingBox",
            "name": "BlockBoundingBox",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "A BlockBoundingBox is an interface to an object which\r represents an AABB aligned rectangle.\r The BlockBoundingBox assumes that it was created in a valid\r state (min <= max) but cannot guarantee it (unless it was\r The min/max coordinates represent the diametrically opposite\r corners of the rectangle.\r The BlockBoundingBox is not a representation of blocks - it\r has no association with any type, it is just a mathematical\r construct - so a rectangle with\r ( 0,0,0 ) -> ( 0,0,0 )\r BlockVolume} object)\r /",
            "definition": "export interface BlockBoundingBox {\n    /**\r\n     * @remarks\r\n     * A {@link Vector3} that represents the largest corner of the\r\n     * rectangle\r\n     *\r\n     */\r\n    max: Vector3;\r\n    /**\r\n     * @remarks\r\n     * A {@link Vector3} that represents the smallest corner of the\r\n     * rectangle\r\n     *\r\n     */\r\n    min: Vector3;\r\n}\r",
            "jsdoc": "/**\r\n * A BlockBoundingBox is an interface to an object which\r\n * represents an AABB aligned rectangle.\r\n * The BlockBoundingBox assumes that it was created in a valid\r\n * state (min <= max) but cannot guarantee it (unless it was\r\n * created using the associated {@link\r\n * @minecraft/server.BlockBoundingBoxUtils} utility functions.\r\n * The min/max coordinates represent the diametrically opposite\r\n * corners of the rectangle.\r\n * The BlockBoundingBox is not a representation of blocks - it\r\n * has no association with any type, it is just a mathematical\r\n * construct - so a rectangle with\r\n * ( 0,0,0 ) -> ( 0,0,0 )\r\n * has a size of ( 0,0,0 ) (unlike the very similar {@link\r\n * BlockVolume} object)\r\n */\r",
            "properties": [
              {
                "name": "max",
                "type": "Vector3",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "min",
                "type": "Vector3",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockboundingbox",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockCustomComponent",
            "name": "BlockCustomComponent",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains a set of events that will be raised for a block.\r This object must be bound using the BlockRegistry.\r /",
            "definition": "export interface BlockCustomComponent {\n    /**\r\n     * @remarks\r\n     * This function will be called before a player places the\r\n     * block.\r\n     *\r\n     */\r\n    beforeOnPlayerPlace?: (arg0: BlockComponentPlayerPlaceBeforeEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity falls onto the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onEntityFallOn?: (arg0: BlockComponentEntityFallOnEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when the block that this custom\r\n     * component is bound to is placed.\r\n     *\r\n     */\r\n    onPlace?: (arg0: BlockComponentOnPlaceEvent, arg1: CustomComponentParameters) => void;\r\n    onPlayerBreak?: (arg0: BlockComponentPlayerBreakEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a player sucessfully\r\n     * interacts with the block that this custom component is bound\r\n     * to.\r\n     *\r\n     */\r\n    onPlayerInteract?: (arg0: BlockComponentPlayerInteractEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a block randomly ticks.\r\n     *\r\n     */\r\n    onRandomTick?: (arg0: BlockComponentRandomTickEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity steps off the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onStepOff?: (arg0: BlockComponentStepOffEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity steps onto the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onStepOn?: (arg0: BlockComponentStepOnEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a block ticks.\r\n     *\r\n     */\r\n    onTick?: (arg0: BlockComponentTickEvent, arg1: CustomComponentParameters) => void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains a set of events that will be raised for a block.\r\n * This object must be bound using the BlockRegistry.\r\n */\r",
            "properties": [
              {
                "name": "beforeOnPlayerPlace",
                "type": "(arg0: BlockComponentPlayerPlaceBeforeEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onEntityFallOn",
                "type": "(arg0: BlockComponentEntityFallOnEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onPlace",
                "type": "(arg0: BlockComponentOnPlaceEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onPlayerBreak",
                "type": "(arg0: BlockComponentPlayerBreakEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onPlayerInteract",
                "type": "(arg0: BlockComponentPlayerInteractEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onRandomTick",
                "type": "(arg0: BlockComponentRandomTickEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onStepOff",
                "type": "(arg0: BlockComponentStepOffEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onStepOn",
                "type": "(arg0: BlockComponentStepOnEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onTick",
                "type": "(arg0: BlockComponentTickEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcustomcomponent",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockEventOptions",
            "name": "BlockEventOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains optional parameters for registering a block event.\r /",
            "definition": "export interface BlockEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted block's type matches this parameter.\r\n     *\r\n     */\r\n    blockTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted block's permutation matches this parameter.\r\n     *\r\n     */\r\n    permutations?: BlockPermutation[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains optional parameters for registering a block event.\r\n */\r",
            "properties": [
              {
                "name": "blockTypes",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "permutations",
                "type": "BlockPermutation[]",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockeventoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockFillOptions",
            "name": "BlockFillOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for a block fill operation.\r /",
            "definition": "export interface BlockFillOptions {\n    /**\r\n     * @remarks\r\n     * When specified, the fill operation will include / exclude\r\n     * the blocks added to the block filter.\r\n     *\r\n     */\r\n    blockFilter?: BlockFilter;\r\n    /**\r\n     * @remarks\r\n     * When true fillBlocks will not error if part of the fill\r\n     * volume is outside of loaded chunks bounds. Instead it will\r\n     * just fill the blocks that are inside the loaded chunk bounds\r\n     * and ignoring blocks outside.\r\n     *\r\n     */\r\n    ignoreChunkBoundErrors?: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for a block fill operation.\r\n */\r",
            "properties": [
              {
                "name": "blockFilter",
                "type": "BlockFilter",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "ignoreChunkBoundErrors",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockfilloptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockFilter",
            "name": "BlockFilter",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Options to include or exclude blocks based on type, tag or\r permutation. If no include options are added it will select\r all blocks that are not rejected by the exclude options. If\r at least one include option is added the block must match\r one of the include options to not be rejected.\r /",
            "definition": "export interface BlockFilter {\n    /**\r\n     * @remarks\r\n     * Array of block permutations that the filter should reject if\r\n     * any matches.\r\n     *\r\n     */\r\n    excludePermutations?: BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * Array of block tags that the filter should reject if any\r\n     * matches.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block types that the filter should reject if any\r\n     * matches.\r\n     *\r\n     */\r\n    excludeTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block permutations that the filter should select if\r\n     * at least one matches.\r\n     *\r\n     */\r\n    includePermutations?: BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * Array of block tags that the filter should select if at\r\n     * least one matches.\r\n     *\r\n     */\r\n    includeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block types that the filter should select if at\r\n     * least one matches.\r\n     *\r\n     */\r\n    includeTypes?: string[];\r\n}\r",
            "jsdoc": "/**\r\n * Options to include or exclude blocks based on type, tag or\r\n * permutation. If no include options are added it will select\r\n * all blocks that are not rejected by the exclude options. If\r\n * at least one include option is added the block must match\r\n * one of the include options to not be rejected.\r\n */\r",
            "properties": [
              {
                "name": "excludePermutations",
                "type": "BlockPermutation[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "excludeTags",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "excludeTypes",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includePermutations",
                "type": "BlockPermutation[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeTags",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeTypes",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockfilter",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockHitInformation",
            "name": "BlockHitInformation",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains more information for events where a block is hit.\r /",
            "definition": "export interface BlockHitInformation {\n    /**\r\n     * @remarks\r\n     * Block that was hit.\r\n     *\r\n     */\r\n    block: Block;\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block.\r\n     *\r\n     */\r\n    faceLocation: Vector3;\r\n}\r",
            "jsdoc": "/**\r\n * Contains more information for events where a block is hit.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "face",
                "type": "Direction",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "faceLocation",
                "type": "Vector3",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockhitinformation",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockRaycastHit",
            "name": "BlockRaycastHit",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains information for block raycast hit results.\r /",
            "definition": "export interface BlockRaycastHit {\n    /**\r\n     * @remarks\r\n     * Block that was hit.\r\n     *\r\n     */\r\n    block: Block;\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Hit location relative to the bottom north-west corner of the\r\n     * block.\r\n     *\r\n     */\r\n    faceLocation: Vector3;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information for block raycast hit results.\r\n */\r",
            "properties": [
              {
                "name": "block",
                "type": "Block",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "face",
                "type": "Direction",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "faceLocation",
                "type": "Vector3",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockraycasthit",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.BlockRaycastOptions",
            "name": "BlockRaycastOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for configuring a block raycast\r query.\r /",
            "definition": "export interface BlockRaycastOptions extends BlockFilter {\n    /**\r\n     * @remarks\r\n     * If true, liquid blocks will be considered as blocks that\r\n     * 'stop' the raycast.\r\n     *\r\n     */\r\n    includeLiquidBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, passable blocks like vines and flowers will be\r\n     * considered as blocks that 'stop' the raycast.\r\n     *\r\n     */\r\n    includePassableBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Maximum distance, in blocks, to process the raycast.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for configuring a block raycast\r\n * query.\r\n */\r",
            "properties": [
              {
                "name": "includeLiquidBlocks",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includePassableBlocks",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "maxDistance",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "extends": "BlockFilter",
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockraycastoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CameraFadeOptions",
            "name": "CameraFadeOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Used to initiate a full-screen color fade.\r /",
            "definition": "export interface CameraFadeOptions {\n    /**\r\n     * @remarks\r\n     * Fade color to use.\r\n     *\r\n     */\r\n    fadeColor?: RGB;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds for the fade-in, hold, and fade-out seconds.\r\n     *\r\n     */\r\n    fadeTime?: CameraFadeTimeOptions;\r\n}\r",
            "jsdoc": "/**\r\n * Used to initiate a full-screen color fade.\r\n */\r",
            "properties": [
              {
                "name": "fadeColor",
                "type": "RGB",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "fadeTime",
                "type": "CameraFadeTimeOptions",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "camerafadeoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CameraFadeTimeOptions",
            "name": "CameraFadeTimeOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains timings for a fade transition.\r /",
            "definition": "export interface CameraFadeTimeOptions {\n    /**\r\n     * @remarks\r\n     * Time, in seconds, for a fade-in.\r\n     *\r\n     */\r\n    fadeInTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time, in seconds, for a fade-out.\r\n     *\r\n     */\r\n    fadeOutTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time, in seconds, to hold the full screen color.\r\n     *\r\n     */\r\n    holdTime: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains timings for a fade transition.\r\n */\r",
            "properties": [
              {
                "name": "fadeInTime",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "fadeOutTime",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "holdTime",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "camerafadetimeoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CameraFixedBoomOptions",
            "name": "CameraFixedBoomOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Options to control pivot points and offsets of the third\r person boom preset.\r /",
            "definition": "export interface CameraFixedBoomOptions {\n    /**\r\n     * @remarks\r\n     * Changes the pivot point to be <x, y, z> away from the\r\n     * player.\r\n     *\r\n     */\r\n    entityOffset?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Offsets the camera from center by <x, y>.\r\n     *\r\n     */\r\n    viewOffset?: Vector2;\r\n}\r",
            "jsdoc": "/**\r\n * Options to control pivot points and offsets of the third\r\n * person boom preset.\r\n */\r",
            "properties": [
              {
                "name": "entityOffset",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "viewOffset",
                "type": "Vector2",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "camerafixedboomoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CameraSetFacingOptions",
            "name": "CameraSetFacingOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Offsets the camera from center by <x, y>.",
            "definition": "export interface CameraSetFacingOptions {\n    easeOptions?: EaseOptions;\r\n    facingEntity: Entity;\r\n    location?: Vector3;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Offsets the camera from center by <x, y>.\r\n     *\r\n     */\r",
            "properties": [
              {
                "name": "easeOptions",
                "type": "EaseOptions",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "facingEntity",
                "type": "Entity",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "camerasetfacingoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CameraSetLocationOptions",
            "name": "CameraSetLocationOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "definition": "export interface CameraSetLocationOptions {\n    easeOptions?: EaseOptions;\r\n    location: Vector3;\r\n}\r",
            "jsdoc": "",
            "properties": [
              {
                "name": "easeOptions",
                "type": "EaseOptions",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "camerasetlocationoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CameraSetPosOptions",
            "name": "CameraSetPosOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "definition": "export interface CameraSetPosOptions {\n    easeOptions?: EaseOptions;\r\n    facingLocation: Vector3;\r\n    location?: Vector3;\r\n}\r",
            "jsdoc": "",
            "properties": [
              {
                "name": "easeOptions",
                "type": "EaseOptions",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "facingLocation",
                "type": "Vector3",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "camerasetposoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CameraSetRotOptions",
            "name": "CameraSetRotOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "definition": "export interface CameraSetRotOptions {\n    easeOptions?: EaseOptions;\r\n    location?: Vector3;\r\n    rotation: Vector2;\r\n}\r",
            "jsdoc": "",
            "properties": [
              {
                "name": "easeOptions",
                "type": "EaseOptions",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "rotation",
                "type": "Vector2",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "camerasetrotoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CameraTargetOptions",
            "name": "CameraTargetOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Used to target an entity with a free camera.\r /",
            "definition": "export interface CameraTargetOptions {\n    /**\r\n     * @remarks\r\n     * Set an <x, y, z> offset from the target entity's center.\r\n     *\r\n     */\r\n    offsetFromTargetCenter?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The singular entity you want to target.\r\n     *\r\n     */\r\n    targetEntity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Used to target an entity with a free camera.\r\n */\r",
            "properties": [
              {
                "name": "offsetFromTargetCenter",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "targetEntity",
                "type": "Entity",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "cameratargetoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommand",
            "name": "CustomCommand",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Define the custom command, including name, permissions, and\r parameters.\r /",
            "definition": "export interface CustomCommand {\n    /**\r\n     * @remarks\r\n     * Cheats must be enabled to run this command. Defaults to\r\n     * true.\r\n     *\r\n     */\r\n    cheatsRequired?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Command description as seen on the command line.\r\n     *\r\n     */\r\n    description: string;\r\n    /**\r\n     * @remarks\r\n     * List of mandatory command parameters.\r\n     *\r\n     */\r\n    mandatoryParameters?: CustomCommandParameter[];\r\n    /**\r\n     * @remarks\r\n     * The name of the command. A namespace is required.\r\n     *\r\n     */\r\n    name: string;\r\n    /**\r\n     * @remarks\r\n     * List of optional command parameters.\r\n     *\r\n     */\r\n    optionalParameters?: CustomCommandParameter[];\r\n    /**\r\n     * @remarks\r\n     * The permission level required to execute the command.\r\n     *\r\n     */\r\n    permissionLevel: CommandPermissionLevel;\r\n}\r",
            "jsdoc": "/**\r\n * Define the custom command, including name, permissions, and\r\n * parameters.\r\n */\r",
            "properties": [
              {
                "name": "cheatsRequired",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "description",
                "type": "string",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "mandatoryParameters",
                "type": "CustomCommandParameter[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "name",
                "type": "string",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "optionalParameters",
                "type": "CustomCommandParameter[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "permissionLevel",
                "type": "CommandPermissionLevel",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommand",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandParameter",
            "name": "CustomCommandParameter",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Definition for each parameter expected by the custom\r command.\r /",
            "definition": "export interface CustomCommandParameter {\n    /**\r\n     * @remarks\r\n     * The name of parameter as it appears on the command line.\r\n     *\r\n     */\r\n    name: string;\r\n    /**\r\n     * @remarks\r\n     * The data type of the parameter.\r\n     *\r\n     */\r\n    type: CustomCommandParamType;\r\n}\r",
            "jsdoc": "/**\r\n * Definition for each parameter expected by the custom\r\n * command.\r\n */\r",
            "properties": [
              {
                "name": "name",
                "type": "string",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "type",
                "type": "CustomCommandParamType",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommandparameter",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.CustomCommandResult",
            "name": "CustomCommandResult",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Interface returned from custom command callback function.\r /",
            "definition": "export interface CustomCommandResult {\n    /**\r\n     * @remarks\r\n     * Message displayed to chat after command execution.\r\n     *\r\n     */\r\n    message?: string;\r\n    /**\r\n     * @remarks\r\n     * Command execution Success or Failure. Determines how the\r\n     * status message is displayed.\r\n     *\r\n     */\r\n    status: CustomCommandStatus;\r\n}\r",
            "jsdoc": "/**\r\n * Interface returned from custom command callback function.\r\n */\r",
            "properties": [
              {
                "name": "message",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "status",
                "type": "CustomCommandStatus",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "customcommandresult",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.DefinitionModifier",
            "name": "DefinitionModifier",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains a set of updates to the component definition state\r of an entity.\r /",
            "definition": "export interface DefinitionModifier {\n    /**\r\n     * @remarks\r\n     * Retrieves the list of component groups that will be added\r\n     * via this definition modification.\r\n     *\r\n     */\r\n    addedComponentGroups: string[];\r\n    /**\r\n     * @remarks\r\n     * The list of component groups that will be removed via this\r\n     * definition modification.\r\n     *\r\n     */\r\n    removedComponentGroups: string[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains a set of updates to the component definition state\r\n * of an entity.\r\n */\r",
            "properties": [
              {
                "name": "addedComponentGroups",
                "type": "string[]",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "removedComponentGroups",
                "type": "string[]",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "definitionmodifier",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.DimensionLocation",
            "name": "DimensionLocation",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "An exact coordinate within the world, including its\r dimension and location.\r /",
            "definition": "export interface DimensionLocation {\n    /**\r\n     * @remarks\r\n     * Dimension that this coordinate is associated with.\r\n     *\r\n     */\r\n    dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * X component of this dimension-location.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of this dimension-location.\r\n     *\r\n     */\r\n    y: number;\r\n    /**\r\n     * @remarks\r\n     * Z component of this dimension-location.\r\n     *\r\n     */\r\n    z: number;\r\n}\r",
            "jsdoc": "/**\r\n * An exact coordinate within the world, including its\r\n * dimension and location.\r\n */\r",
            "properties": [
              {
                "name": "dimension",
                "type": "Dimension",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "x",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "y",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "z",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "dimensionlocation",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EaseOptions",
            "name": "EaseOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains options associated with easing between positions\r and/or rotations.\r /",
            "definition": "export interface EaseOptions {\n    /**\r\n     * @remarks\r\n     * Time for the ease operation.\r\n     *\r\n     */\r\n    easeTime?: number;\r\n    /**\r\n     * @remarks\r\n     * Type of ease operation to use.\r\n     *\r\n     */\r\n    easeType?: EasingType;\r\n}\r",
            "jsdoc": "/**\r\n * Contains options associated with easing between positions\r\n * and/or rotations.\r\n */\r",
            "properties": [
              {
                "name": "easeTime",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "easeType",
                "type": "EasingType",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "easeoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Enchantment",
            "name": "Enchantment",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "This interface represents a specific leveled enchantment\r that is applied to an item.\r /",
            "definition": "export interface Enchantment {\n    /**\r\n     * @remarks\r\n     * The level of this enchantment instance.\r\n     *\r\n     */\r\n    level: number;\r\n    /**\r\n     * @remarks\r\n     * The enchantment type of this instance.\r\n     *\r\n     */\r\n    type: EnchantmentType;\r\n}\r",
            "jsdoc": "/**\r\n * This interface represents a specific leveled enchantment\r\n * that is applied to an item.\r\n */\r",
            "properties": [
              {
                "name": "level",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "type",
                "type": "EnchantmentType",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "enchantment",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityApplyDamageByProjectileOptions",
            "name": "EntityApplyDamageByProjectileOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Additional options for when damage has been applied via a\r projectile.\r /",
            "definition": "export interface EntityApplyDamageByProjectileOptions {\n    /**\r\n     * @remarks\r\n     * Optional entity that fired the projectile.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Projectile that caused damage.\r\n     *\r\n     */\r\n    damagingProjectile: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Additional options for when damage has been applied via a\r\n * projectile.\r\n */\r",
            "properties": [
              {
                "name": "damagingEntity",
                "type": "Entity",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "damagingProjectile",
                "type": "Entity",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityapplydamagebyprojectileoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityApplyDamageOptions",
            "name": "EntityApplyDamageOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Additional descriptions and metadata for a damage event.\r /",
            "definition": "export interface EntityApplyDamageOptions {\n    /**\r\n     * @remarks\r\n     * Underlying cause of the damage.\r\n     *\r\n     */\r\n    cause: EntityDamageCause;\r\n    /**\r\n     * @remarks\r\n     * Optional entity that caused the damage.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Additional descriptions and metadata for a damage event.\r\n */\r",
            "properties": [
              {
                "name": "cause",
                "type": "EntityDamageCause",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "damagingEntity",
                "type": "Entity",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityapplydamageoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityDamageSource",
            "name": "EntityDamageSource",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Provides information about how damage has been applied to an\r entity.\r /",
            "definition": "export interface EntityDamageSource {\n    /**\r\n     * @remarks\r\n     * Cause enumeration of damage.\r\n     *\r\n     */\r\n    cause: EntityDamageCause;\r\n    /**\r\n     * @remarks\r\n     * Optional entity that caused the damage.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional projectile that may have caused damage.\r\n     *\r\n     */\r\n    damagingProjectile?: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Provides information about how damage has been applied to an\r\n * entity.\r\n */\r",
            "properties": [
              {
                "name": "cause",
                "type": "EntityDamageCause",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "damagingEntity",
                "type": "Entity",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "damagingProjectile",
                "type": "Entity",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitydamagesource",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityDataDrivenTriggerEventOptions",
            "name": "EntityDataDrivenTriggerEventOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Specifies additional filters that are used in registering a\r data driven trigger event for entities.\r /",
            "definition": "export interface EntityDataDrivenTriggerEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire for entities\r\n     * that match the entities within this collection.\r\n     *\r\n     */\r\n    entities?: Entity[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted entities' type matches this parameter.\r\n     *\r\n     */\r\n    entityTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted triggered event matches one of the events listed in\r\n     * this parameter.\r\n     *\r\n     */\r\n    eventTypes?: string[];\r\n}\r",
            "jsdoc": "/**\r\n * Specifies additional filters that are used in registering a\r\n * data driven trigger event for entities.\r\n */\r",
            "properties": [
              {
                "name": "entities",
                "type": "Entity[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "entityTypes",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "eventTypes",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitydatadriventriggereventoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityEffectOptions",
            "name": "EntityEffectOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for entity effects.\r /",
            "definition": "export interface EntityEffectOptions {\n    /**\r\n     * @remarks\r\n     * The strength of the effect.\r\n     *\r\n     */\r\n    amplifier?: number;\r\n    /**\r\n     * @remarks\r\n     * If true, will show particles when effect is on the entity.\r\n     *\r\n     */\r\n    showParticles?: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for entity effects.\r\n */\r",
            "properties": [
              {
                "name": "amplifier",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "showParticles",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityeffectoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityEventOptions",
            "name": "EntityEventOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains optional parameters for registering an entity\r event.\r /",
            "definition": "export interface EntityEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire for entities\r\n     * that match the entities within this collection.\r\n     *\r\n     */\r\n    entities?: Entity[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted entities' type matches this parameter.\r\n     *\r\n     */\r\n    entityTypes?: string[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains optional parameters for registering an entity\r\n * event.\r\n */\r",
            "properties": [
              {
                "name": "entities",
                "type": "Entity[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "entityTypes",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityeventoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityFilter",
            "name": "EntityFilter",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains options for filtering entities.\r /",
            "definition": "export interface EntityFilter {\n    /**\r\n     * @remarks\r\n     * Excludes entities that match one or more of the specified\r\n     * families.\r\n     *\r\n     */\r\n    excludeFamilies?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities if have a specific gamemode that matches\r\n     * the specified gamemode.\r\n     *\r\n     */\r\n    excludeGameModes?: GameMode[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities that have a name that match one of the\r\n     * specified values.\r\n     *\r\n     */\r\n    excludeNames?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities with a tag that matches one of the\r\n     * specified values.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities if they are one of the specified types.\r\n     *\r\n     */\r\n    excludeTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that match all of the\r\n     * specified families.\r\n     *\r\n     */\r\n    families?: string[];\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities with a gamemode that matches\r\n     * the specified gamemode.\r\n     *\r\n     */\r\n    gameMode?: GameMode;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at most\r\n     * this horizontal rotation.\r\n     *\r\n     */\r\n    maxHorizontalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have at most this level are\r\n     * returned.\r\n     *\r\n     */\r\n    maxLevel?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, only entities that have at most this vertical\r\n     * rotation are returned.\r\n     *\r\n     */\r\n    maxVerticalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at a\r\n     * minimum this horizontal rotation.\r\n     *\r\n     */\r\n    minHorizontalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have at least this level are\r\n     * returned.\r\n     *\r\n     */\r\n    minLevel?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at least\r\n     * this vertical rotation.\r\n     *\r\n     */\r\n    minVerticalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * Includes entities with the specified name.\r\n     *\r\n     */\r\n    name?: string;\r\n    propertyOptions?: EntityQueryPropertyOptions[];\r\n    /**\r\n     * @remarks\r\n     * Gets/sets a collection of EntityQueryScoreOptions objects\r\n     * with filters for specific scoreboard objectives.\r\n     *\r\n     */\r\n    scoreOptions?: EntityQueryScoreOptions[];\r\n    /**\r\n     * @remarks\r\n     * Includes entities that match all of the specified tags.\r\n     *\r\n     */\r\n    tags?: string[];\r\n    /**\r\n     * @remarks\r\n     * If defined, entities that match this type are included.\r\n     *\r\n     */\r\n    type?: string;\r\n}\r",
            "jsdoc": "/**\r\n * Contains options for filtering entities.\r\n */\r",
            "properties": [
              {
                "name": "excludeFamilies",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "excludeGameModes",
                "type": "GameMode[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "excludeNames",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "excludeTags",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "excludeTypes",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "families",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "gameMode",
                "type": "GameMode",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "maxHorizontalRotation",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "maxLevel",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "maxVerticalRotation",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "minHorizontalRotation",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "minLevel",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "minVerticalRotation",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "name",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "propertyOptions",
                "type": "EntityQueryPropertyOptions[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "scoreOptions",
                "type": "EntityQueryScoreOptions[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "tags",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "type",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityfilter",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityHitInformation",
            "name": "EntityHitInformation",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional information about an entity that was\r hit.\r /",
            "definition": "export interface EntityHitInformation {\n    /**\r\n     * @remarks\r\n     * Entity that was hit.\r\n     *\r\n     */\r\n    entity?: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional information about an entity that was\r\n * hit.\r\n */\r",
            "properties": [
              {
                "name": "entity",
                "type": "Entity",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityhitinformation",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityQueryOptions",
            "name": "EntityQueryOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains options for selecting entities within an area.\r ```typescript\r  function blockConditional(targetLocation: DimensionLocation) {\r   targetLocation.dimension\r     .getEntities({\r       type: \"fox\",\r     })\r     .filter((entity) => {\r       const block = targetLocation.dimension.getBlock({\r         x: entity.location.x,\r         y: entity.location.y - 1,\r         z: entity.location.z,\r       });\r        return block !== undefined && block.matches(\"minecraft:stone\");\r     })\r     .forEach((entity) => {\r       targetLocation.dimension.spawnEntity(\"salmon\", entity.location);\r     });\r }\r ```\r ```typescript\r  function findEntitiesHavingPropertyEqualsTo(\r     targetLocation: DimensionLocation\r ) {\r   // Minecraft bees have a has_nectar boolean property\r   const queryOption: EntityQueryOptions = {\r     propertyOptions: [{ propertyId: \"minecraft:has_nectar\", value: { equals: true } }],\r   };\r    const entities = targetLocation.dimension.getEntities(queryOption);\r }\r ```\r ```typescript\r  function playSoundChained(targetLocation: DimensionLocation) {\r   const targetPlayers = targetLocation.dimension.getPlayers();\r   const originEntities = targetLocation.dimension.getEntities({\r     type: \"armor_stand\",\r     name: \"myArmorStand\",\r     tags: [\"dummyTag1\"],\r     excludeTags: [\"dummyTag2\"],\r   });\r    originEntities.forEach((entity) => {\r     targetPlayers.forEach((player) => {\r       player.playSound(\"raid.horn\");\r     });\r   });\r }\r ```\r ```typescript\r  function setScoreboardChained(\r     targetLocation: DimensionLocation\r ) {\r   const objective = world.scoreboard.addObjective(\"scoreObjective1\", \"dummy\");\r   targetLocation.dimension\r     .getEntities({\r       type: \"armor_stand\",\r       name: \"myArmorStand\",\r     })\r     .forEach((entity) => {\r       if (entity.scoreboardIdentity !== undefined) {\r         objective.setScore(entity.scoreboardIdentity, -1);\r       }\r     });\r }\r ```\r ```typescript\r  function summonMobChained(targetLocation: DimensionLocation) {\r   const armorStandArray = targetLocation.dimension.getEntities({\r     type: \"armor_stand\",\r   });\r   const playerArray = targetLocation.dimension.getPlayers({\r     location: { x: 0, y: -60, z: 0 },\r     closest: 4,\r     maxDistance: 15,\r   });\r   armorStandArray.forEach((entity) => {\r     playerArray.forEach((player) => {\r       targetLocation.dimension.spawnEntity(\"pig\", {\r         x: player.location.x + 1,\r         y: player.location.y,\r         z: player.location.z,\r       });\r     });\r   });\r }\r ```\r ```typescript\r  function bounceSkeletons(targetLocation: DimensionLocation) {\r   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r    // create some sample mob data\r   for (let i = 0; i < 10; i++) {\r     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r   }\r    const eqo: EntityQueryOptions = {\r     type: \"skeleton\",\r   };\r    for (const entity of targetLocation.dimension.getEntities(eqo)) {\r     entity.applyKnockback(0, 0, 0, 1);\r   }\r }\r ```\r ```typescript\r  function tagsQuery(targetLocation: DimensionLocation) {\r   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r    // create some sample mob data\r   for (let i = 0; i < 10; i++) {\r     const mobTypeId = mobs[i % mobs.length];\r     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r     entity.addTag(\"mobparty.\" + mobTypeId);\r   }\r    const eqo: EntityQueryOptions = {\r     tags: [\"mobparty.skeleton\"],\r   };\r    for (const entity of targetLocation.dimension.getEntities(eqo)) {\r     entity.kill();\r   }\r }\r ```\r ```typescript\r  function testThatEntityIsFeatherItem(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const items = targetLocation.dimension.getEntities({\r     location: targetLocation,\r     maxDistance: 20,\r   });\r    for (const item of items) {\r     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r      if (itemComp) {\r       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r         log(\"Success! Found a feather\", 1);\r       }\r     }\r   }\r }\r ```\r /",
            "definition": "export interface EntityQueryOptions extends EntityFilter {\n    /**\r\n     * @remarks\r\n     * Limits the number of entities to return, opting for the\r\n     * closest N entities as specified by this property. The\r\n     * location value must also be specified on the query options\r\n     * object.\r\n     *\r\n     */\r\n    closest?: number;\r\n    /**\r\n     * @remarks\r\n     * Limits the number of entities to return, opting for the\r\n     * farthest N entities as specified by this property. The\r\n     * location value must also be specified on the query options\r\n     * object.\r\n     *\r\n     */\r\n    farthest?: number;\r\n    /**\r\n     * @remarks\r\n     * Adds a seed location to the query that is used in\r\n     * conjunction with closest, farthest, limit, volume, and\r\n     * distance properties.\r\n     *\r\n     */\r\n    location?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that are less than this\r\n     * distance away from the location specified in the location\r\n     * property.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that are least this distance\r\n     * away from the location specified in the location property.\r\n     *\r\n     */\r\n    minDistance?: number;\r\n    /**\r\n     * @remarks\r\n     * In conjunction with location, specified a cuboid volume of\r\n     * entities to include.\r\n     *\r\n     */\r\n    volume?: Vector3;\r\n}\r",
            "jsdoc": "/**\r\n * Contains options for selecting entities within an area.\r\n * @example blockConditional.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function blockConditional(targetLocation: DimensionLocation) {\r\n *   targetLocation.dimension\r\n *     .getEntities({\r\n *       type: \"fox\",\r\n *     })\r\n *     .filter((entity) => {\r\n *       const block = targetLocation.dimension.getBlock({\r\n *         x: entity.location.x,\r\n *         y: entity.location.y - 1,\r\n *         z: entity.location.z,\r\n *       });\r\n *\r\n *       return block !== undefined && block.matches(\"minecraft:stone\");\r\n *     })\r\n *     .forEach((entity) => {\r\n *       targetLocation.dimension.spawnEntity(\"salmon\", entity.location);\r\n *     });\r\n * }\r\n * ```\r\n * @example findEntitiesHavingPropertyEqualsTo.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function findEntitiesHavingPropertyEqualsTo(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   // Minecraft bees have a has_nectar boolean property\r\n *   const queryOption: EntityQueryOptions = {\r\n *     propertyOptions: [{ propertyId: \"minecraft:has_nectar\", value: { equals: true } }],\r\n *   };\r\n *\r\n *   const entities = targetLocation.dimension.getEntities(queryOption);\r\n * }\r\n * ```\r\n * @example playSoundChained.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function playSoundChained(targetLocation: DimensionLocation) {\r\n *   const targetPlayers = targetLocation.dimension.getPlayers();\r\n *   const originEntities = targetLocation.dimension.getEntities({\r\n *     type: \"armor_stand\",\r\n *     name: \"myArmorStand\",\r\n *     tags: [\"dummyTag1\"],\r\n *     excludeTags: [\"dummyTag2\"],\r\n *   });\r\n *\r\n *   originEntities.forEach((entity) => {\r\n *     targetPlayers.forEach((player) => {\r\n *       player.playSound(\"raid.horn\");\r\n *     });\r\n *   });\r\n * }\r\n * ```\r\n * @example setScoreboardChained.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setScoreboardChained(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const objective = world.scoreboard.addObjective(\"scoreObjective1\", \"dummy\");\r\n *   targetLocation.dimension\r\n *     .getEntities({\r\n *       type: \"armor_stand\",\r\n *       name: \"myArmorStand\",\r\n *     })\r\n *     .forEach((entity) => {\r\n *       if (entity.scoreboardIdentity !== undefined) {\r\n *         objective.setScore(entity.scoreboardIdentity, -1);\r\n *       }\r\n *     });\r\n * }\r\n * ```\r\n * @example summonMobChained.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function summonMobChained(targetLocation: DimensionLocation) {\r\n *   const armorStandArray = targetLocation.dimension.getEntities({\r\n *     type: \"armor_stand\",\r\n *   });\r\n *   const playerArray = targetLocation.dimension.getPlayers({\r\n *     location: { x: 0, y: -60, z: 0 },\r\n *     closest: 4,\r\n *     maxDistance: 15,\r\n *   });\r\n *   armorStandArray.forEach((entity) => {\r\n *     playerArray.forEach((player) => {\r\n *       targetLocation.dimension.spawnEntity(\"pig\", {\r\n *         x: player.location.x + 1,\r\n *         y: player.location.y,\r\n *         z: player.location.z,\r\n *       });\r\n *     });\r\n *   });\r\n * }\r\n * ```\r\n * @example bounceSkeletons.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n *\r\n *   // create some sample mob data\r\n *   for (let i = 0; i < 10; i++) {\r\n *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n *   }\r\n *\r\n *   const eqo: EntityQueryOptions = {\r\n *     type: \"skeleton\",\r\n *   };\r\n *\r\n *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n *     entity.applyKnockback(0, 0, 0, 1);\r\n *   }\r\n * }\r\n * ```\r\n * @example tagsQuery.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function tagsQuery(targetLocation: DimensionLocation) {\r\n *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n *\r\n *   // create some sample mob data\r\n *   for (let i = 0; i < 10; i++) {\r\n *     const mobTypeId = mobs[i % mobs.length];\r\n *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n *   }\r\n *\r\n *   const eqo: EntityQueryOptions = {\r\n *     tags: [\"mobparty.skeleton\"],\r\n *   };\r\n *\r\n *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n *     entity.kill();\r\n *   }\r\n * }\r\n * ```\r\n * @example testThatEntityIsFeatherItem.ts\r\n * ```typescript\r\n * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function testThatEntityIsFeatherItem(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const items = targetLocation.dimension.getEntities({\r\n *     location: targetLocation,\r\n *     maxDistance: 20,\r\n *   });\r\n *\r\n *   for (const item of items) {\r\n *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n *\r\n *     if (itemComp) {\r\n *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n *         log(\"Success! Found a feather\", 1);\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "closest",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "farthest",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "location",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "maxDistance",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "minDistance",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "volume",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "extends": "EntityFilter",
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityqueryoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityQueryPropertyOptions",
            "name": "EntityQueryPropertyOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "In conjunction with location, specified a cuboid volume of\r entities to include.",
            "definition": "export interface EntityQueryPropertyOptions {\n    exclude?: boolean;\r\n    propertyId: string;\r\n    value?:\r\n        | boolean\r\n        | string\r\n        | EqualsComparison\r\n        | GreaterThanComparison\r\n        | GreaterThanOrEqualsComparison\r\n        | LessThanComparison\r\n        | LessThanOrEqualsComparison\r\n        | NotEqualsComparison\r\n        | RangeComparison;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * In conjunction with location, specified a cuboid volume of\r\n     * entities to include.\r\n     *\r\n     */\r",
            "properties": [
              {
                "name": "exclude",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "propertyId",
                "type": "string",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityquerypropertyoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityQueryScoreOptions",
            "name": "EntityQueryScoreOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for filtering players based on\r their score for an objective.\r /",
            "definition": "export interface EntityQueryScoreOptions {\n    /**\r\n     * @remarks\r\n     * If set to true, entities and players within this score range\r\n     * are excluded from query results.\r\n     *\r\n     */\r\n    exclude?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have a score equal to or under\r\n     * maxScore are included.\r\n     *\r\n     */\r\n    maxScore?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have a score equal to or over\r\n     * minScore are included.\r\n     *\r\n     */\r\n    minScore?: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard objective to filter on.\r\n     *\r\n     */\r\n    objective?: string;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for filtering players based on\r\n * their score for an objective.\r\n */\r",
            "properties": [
              {
                "name": "exclude",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "maxScore",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "minScore",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "objective",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityqueryscoreoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityRaycastHit",
            "name": "EntityRaycastHit",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains information for entity raycast hit results.\r /",
            "definition": "export interface EntityRaycastHit {\n    /**\r\n     * @remarks\r\n     * Distance from ray origin to entity bounds.\r\n     *\r\n     */\r\n    distance: number;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hit.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Contains information for entity raycast hit results.\r\n */\r",
            "properties": [
              {
                "name": "distance",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "entity",
                "type": "Entity",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityraycasthit",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityRaycastOptions",
            "name": "EntityRaycastOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for an entity raycast operation.\r /",
            "definition": "export interface EntityRaycastOptions extends EntityFilter {\n    /**\r\n     * @remarks\r\n     * If true, blocks will not be considered as blocks that 'stop'\r\n     * the raycast.\r\n     *\r\n     */\r\n    ignoreBlockCollision?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, liquid blocks will be considered as blocks that\r\n     * 'stop' the raycast.\r\n     *\r\n     */\r\n    includeLiquidBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, passable blocks like vines and flowers will be\r\n     * considered as blocks that 'stop' the raycast.\r\n     *\r\n     */\r\n    includePassableBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Maximum distance, in blocks, to process the raycast.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for an entity raycast operation.\r\n */\r",
            "properties": [
              {
                "name": "ignoreBlockCollision",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeLiquidBlocks",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includePassableBlocks",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "maxDistance",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "extends": "EntityFilter",
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entityraycastoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EqualsComparison",
            "name": "EqualsComparison",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Equal to operator.\r /",
            "definition": "export interface EqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    equals: boolean | number | string;\r\n}\r",
            "jsdoc": "/**\r\n * Equal to operator.\r\n */\r",
            "properties": [
              {
                "name": "equals",
                "type": "boolean | number | string",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "equalscomparison",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ExplosionOptions",
            "name": "ExplosionOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Dimension.createExplosion} method.\r ```typescript\r  function createNoBlockExplosion(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r    log(\"Creating an explosion of radius 15 that does not break blocks.\");\r   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r }\r ```\r ```typescript\r  function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r    log(\"Creating an explosion of radius 15 that causes fire.\");\r   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r    const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r    log(\"Creating an explosion of radius 10 that can go underwater.\");\r   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r }\r ```\r /",
            "definition": "export interface ExplosionOptions {\n    /**\r\n     * @remarks\r\n     * Whether parts of the explosion also impact underwater.\r\n     *\r\n     */\r\n    allowUnderwater?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the explosion will break blocks within the blast\r\n     * radius.\r\n     *\r\n     */\r\n    breaksBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the explosion is accompanied by fires within or\r\n     * near the blast radius.\r\n     *\r\n     */\r\n    causesFire?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    source?: Entity;\r\n}\r",
            "jsdoc": "/**\r\n * Additional configuration options for the {@link\r\n * Dimension.createExplosion} method.\r\n * @example createNoBlockExplosion.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function createNoBlockExplosion(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r\n *\r\n *   log(\"Creating an explosion of radius 15 that does not break blocks.\");\r\n *   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r\n * }\r\n * ```\r\n * @example createExplosions.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r\n *\r\n *   log(\"Creating an explosion of radius 15 that causes fire.\");\r\n *   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r\n *\r\n *   const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r\n *\r\n *   log(\"Creating an explosion of radius 10 that can go underwater.\");\r\n *   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "allowUnderwater",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "breaksBlocks",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "causesFire",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "source",
                "type": "Entity",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "explosionoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.GreaterThanComparison",
            "name": "GreaterThanComparison",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Greater than operator.\r /",
            "definition": "export interface GreaterThanComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    greaterThan: number;\r\n}\r",
            "jsdoc": "/**\r\n * Greater than operator.\r\n */\r",
            "properties": [
              {
                "name": "greaterThan",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "greaterthancomparison",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.GreaterThanOrEqualsComparison",
            "name": "GreaterThanOrEqualsComparison",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Greater than or equal to operator.\r /",
            "definition": "export interface GreaterThanOrEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    greaterThanOrEquals: number;\r\n}\r",
            "jsdoc": "/**\r\n * Greater than or equal to operator.\r\n */\r",
            "properties": [
              {
                "name": "greaterThanOrEquals",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "greaterthanorequalscomparison",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.HotbarEventOptions",
            "name": "HotbarEventOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional filtering options for hotbar events.\r /",
            "definition": "export interface HotbarEventOptions {\n    /**\r\n     * @remarks\r\n     * The slot indexes to consider. Values should be between 0 and\r\n     * 8, inclusive. If not specified, all slots are considered.\r\n     *\r\n     */\r\n    allowedSlots?: number[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional filtering options for hotbar events.\r\n */\r",
            "properties": [
              {
                "name": "allowedSlots",
                "type": "number[]",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "hotbareventoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InputEventOptions",
            "name": "InputEventOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "that filters out which events are passed to the provided\r callback.\r /",
            "definition": "export interface InputEventOptions {\n    /**\r\n     * @remarks\r\n     * The buttons the callback should be called for. If undefined,\r\n     * the callback will be called for all buttons.\r\n     *\r\n     */\r\n    buttons?: InputButton[];\r\n    /**\r\n     * @remarks\r\n     * The state the callback should be called for. If undefined,\r\n     * the callback will be called for all button states.\r\n     *\r\n     */\r\n    state?: ButtonState;\r\n}\r",
            "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server.PlayerButtonInputAfterEventSignal.subscribe}\r\n * that filters out which events are passed to the provided\r\n * callback.\r\n */\r",
            "properties": [
              {
                "name": "buttons",
                "type": "InputButton[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "state",
                "type": "ButtonState",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "inputeventoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.InventoryItemEventOptions",
            "name": "InventoryItemEventOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional filtering options for inventory item\r events.\r /",
            "definition": "export interface InventoryItemEventOptions {\n    /**\r\n     * @remarks\r\n     * The slot indexes to consider. Values should be positive\r\n     * numbers. If not specified, all slots are considered.\r\n     *\r\n     */\r\n    allowedSlots?: number[];\r\n    /**\r\n     * @remarks\r\n     * The names for the items to exclude.\r\n     *\r\n     */\r\n    excludeItems?: string[];\r\n    /**\r\n     * @remarks\r\n     * The item tags to exclude.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Flag to specify to ignore quantity changes only. True to\r\n     * ignore quantity changes, false to not ignore quantity\r\n     * changes.\r\n     *\r\n     */\r\n    ignoreQuantityChange?: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item names to consider.\r\n     *\r\n     */\r\n    includeItems?: string[];\r\n    /**\r\n     * @remarks\r\n     * The item tags to consider.\r\n     *\r\n     */\r\n    includeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * The player inventory type to consider.\r\n     *\r\n     */\r\n    inventoryType?: PlayerInventoryType;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional filtering options for inventory item\r\n * events.\r\n */\r",
            "properties": [
              {
                "name": "allowedSlots",
                "type": "number[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "excludeItems",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "excludeTags",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "ignoreQuantityChange",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeItems",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeTags",
                "type": "string[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "inventoryType",
                "type": "PlayerInventoryType",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "inventoryitemeventoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemCustomComponent",
            "name": "ItemCustomComponent",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains a set of events that will be raised for an item.\r This object must be bound using the ItemComponentRegistry.\r /",
            "definition": "export interface ItemCustomComponent {\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is hitting an entity and about to take durability\r\n     * damage.\r\n     *\r\n     */\r\n    onBeforeDurabilityDamage?: (\r\n        arg0: ItemComponentBeforeDurabilityDamageEvent,\r\n        arg1: CustomComponentParameters,\r\n    ) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component's use duration was completed.\r\n     *\r\n     */\r\n    onCompleteUse?: (arg0: ItemComponentCompleteUseEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is eaten by an entity.\r\n     *\r\n     */\r\n    onConsume?: (arg0: ItemComponentConsumeEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used to hit another entity.\r\n     *\r\n     */\r\n    onHitEntity?: (arg0: ItemComponentHitEntityEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used to mine a block.\r\n     *\r\n     */\r\n    onMineBlock?: (arg0: ItemComponentMineBlockEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used by a player.\r\n     *\r\n     */\r\n    onUse?: (arg0: ItemComponentUseEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used on a block.\r\n     *\r\n     */\r\n    onUseOn?: (arg0: ItemComponentUseOnEvent, arg1: CustomComponentParameters) => void;\r\n}\r",
            "jsdoc": "/**\r\n * Contains a set of events that will be raised for an item.\r\n * This object must be bound using the ItemComponentRegistry.\r\n */\r",
            "properties": [
              {
                "name": "onBeforeDurabilityDamage",
                "type": "(",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "arg0",
                "type": "ItemComponentBeforeDurabilityDamageEvent,",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "arg1",
                "type": "CustomComponentParameters,",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "onCompleteUse",
                "type": "(arg0: ItemComponentCompleteUseEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onConsume",
                "type": "(arg0: ItemComponentConsumeEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onHitEntity",
                "type": "(arg0: ItemComponentHitEntityEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onMineBlock",
                "type": "(arg0: ItemComponentMineBlockEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onUse",
                "type": "(arg0: ItemComponentUseEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "onUseOn",
                "type": "(arg0: ItemComponentUseOnEvent, arg1: CustomComponentParameters) => void",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcustomcomponent",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.JigsawPlaceOptions",
            "name": "JigsawPlaceOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "StructureManager.placeJigsaw}.\r /",
            "definition": "export interface JigsawPlaceOptions {\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the jigsaw blocks should be kept when generating the\r\n     * structure. Defaults to false.\r\n     *\r\n     */\r\n    keepJigsaws?: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.placeJigsaw}.\r\n */\r",
            "properties": [
              {
                "name": "includeEntities",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "keepJigsaws",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "jigsawplaceoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.JigsawStructurePlaceOptions",
            "name": "JigsawStructurePlaceOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "StructureManager.placeJigsawStructure}.\r /",
            "definition": "export interface JigsawStructurePlaceOptions {\n    /**\r\n     * @remarks\r\n     * Whether the start height defined in the jigsaw structure\r\n     * definition should be ignored and overridden with the\r\n     * specified y coordinate. Defaults to false.\r\n     *\r\n     */\r\n    ignoreStartHeight?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the jigsaw blocks should be kept when generating the\r\n     * structure. Defaults to false.\r\n     *\r\n     */\r\n    keepJigsaws?: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.placeJigsawStructure}.\r\n */\r",
            "properties": [
              {
                "name": "ignoreStartHeight",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeEntities",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "keepJigsaws",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "jigsawstructureplaceoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.LessThanComparison",
            "name": "LessThanComparison",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Less than operator.\r /",
            "definition": "export interface LessThanComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    lessThan: number;\r\n}\r",
            "jsdoc": "/**\r\n * Less than operator.\r\n */\r",
            "properties": [
              {
                "name": "lessThan",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "lessthancomparison",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.LessThanOrEqualsComparison",
            "name": "LessThanOrEqualsComparison",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Less than or equal to operator.\r /",
            "definition": "export interface LessThanOrEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    lessThanOrEquals: number;\r\n}\r",
            "jsdoc": "/**\r\n * Less than or equal to operator.\r\n */\r",
            "properties": [
              {
                "name": "lessThanOrEquals",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "lessthanorequalscomparison",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.MusicOptions",
            "name": "MusicOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "/",
            "definition": "export interface MusicOptions {\n    /**\r\n     * @remarks\r\n     * Specifies a fade overlap for music at the end of play.\r\n     *\r\n     */\r\n    fade?: number;\r\n    /**\r\n     * @remarks\r\n     * If set to true, this music track will play repeatedly.\r\n     *\r\n     */\r\n    loop?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Relative volume level of the music.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
            "jsdoc": "/**\r\n * Additional configuration options for {@link\r\n * World.playMusic}/{@link World.queueMusic} methods.\r\n */\r",
            "properties": [
              {
                "name": "fade",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "loop",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "volume",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "musicoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.NotEqualsComparison",
            "name": "NotEqualsComparison",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Not equal to operator.\r /",
            "definition": "export interface NotEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    notEquals: boolean | number | string;\r\n}\r",
            "jsdoc": "/**\r\n * Not equal to operator.\r\n */\r",
            "properties": [
              {
                "name": "notEquals",
                "type": "boolean | number | string",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "notequalscomparison",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayAnimationOptions",
            "name": "PlayAnimationOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for how an animation is played.\r /",
            "definition": "export interface PlayAnimationOptions {\n    /**\r\n     * @remarks\r\n     * Amount of time to fade out after an animation stops.\r\n     *\r\n     */\r\n    blendOutTime?: number;\r\n    /**\r\n     * @remarks\r\n     * Specifies a controller to use that has been defined on the\r\n     * entity.\r\n     *\r\n     */\r\n    controller?: string;\r\n    /**\r\n     * @remarks\r\n     * Specifies the state to transition to.\r\n     *\r\n     */\r\n    nextState?: string;\r\n    /**\r\n     * @remarks\r\n     * A list of players the animation will be visible to.\r\n     *\r\n     */\r\n    players?: Player[];\r\n    /**\r\n     * @remarks\r\n     * Specifies a Molang expression for when this animation should\r\n     * complete.\r\n     *\r\n     */\r\n    stopExpression?: string;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for how an animation is played.\r\n */\r",
            "properties": [
              {
                "name": "blendOutTime",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "controller",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "nextState",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "players",
                "type": "Player[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "stopExpression",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playanimationoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.PlayerSoundOptions",
            "name": "PlayerSoundOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Additional options for how a sound plays for a player.\r /",
            "definition": "export interface PlayerSoundOptions {\n    /**\r\n     * @remarks\r\n     * Location of the sound; if not specified, the sound is played\r\n     * near a player.\r\n     *\r\n     */\r\n    location?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Optional pitch of the sound.\r\n     *\r\n     */\r\n    pitch?: number;\r\n    /**\r\n     * @remarks\r\n     * Optional volume of the sound.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
            "jsdoc": "/**\r\n * Additional options for how a sound plays for a player.\r\n */\r",
            "properties": [
              {
                "name": "location",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "pitch",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "volume",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "playersoundoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ProjectileShootOptions",
            "name": "ProjectileShootOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Optional arguments for\r /",
            "definition": "export interface ProjectileShootOptions {\n    /**\r\n     * @remarks\r\n     * Controls the accuracy of the shot. A value of 0 is perfect\r\n     * accuracy.\r\n     *\r\n     */\r\n    uncertainty?: number;\r\n}\r",
            "jsdoc": "/**\r\n * Optional arguments for\r\n * @minecraft/server.EntityProjectileComponent.shoot.\r\n */\r",
            "properties": [
              {
                "name": "uncertainty",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "projectileshootoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.RangeComparison",
            "name": "RangeComparison",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Operator represents a lower/upper bound structure for\r expressing a potential range of numbers.\r /",
            "definition": "export interface RangeComparison {\n    /**\r\n     * @remarks\r\n     * Lower bound within a range.\r\n     *\r\n     */\r\n    lowerBound: number;\r\n    /**\r\n     * @remarks\r\n     * Upper bound within a range.\r\n     *\r\n     */\r\n    upperBound: number;\r\n}\r",
            "jsdoc": "/**\r\n * Operator represents a lower/upper bound structure for\r\n * expressing a potential range of numbers.\r\n */\r",
            "properties": [
              {
                "name": "lowerBound",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "upperBound",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "rangecomparison",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.RawMessage",
            "name": "RawMessage",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Defines a JSON structure that is used for more flexible.\r ```typescript\r  function placeTranslatedSign(location: DimensionLocation, text: string) {\r     const signBlock = location.dimension.getBlock(location);\r      if (!signBlock) {\r         console.warn('Could not find a block at specified location.');\r         return;\r     }\r     const signPerm = BlockPermutation.resolve('minecraft:standing_sign', { ground_sign_direction: 8 });\r     signBlock.setPermutation(signPerm);\r      const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\r     if (signComponent) {\r         signComponent.setText({ translate: 'item.skull.player.name', with: [text] });\r     } else {\r         console.error('Could not find a sign component on the block.');\r     }\r }\r  placeTranslatedSign(\r     {\r         dimension: world.getDimension('overworld'),\r         x: 0,\r         y: 0,\r         z: 0,\r     },\r     'Steve',\r );\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
            "definition": "export interface RawMessage {\n    /**\r\n     * @remarks\r\n     * Provides a raw-text equivalent of the current message.\r\n     *\r\n     */\r\n    rawtext?: RawMessage[];\r\n    /**\r\n     * @remarks\r\n     * Provides a token that will get replaced with the value of a\r\n     * score.\r\n     *\r\n     */\r\n    score?: RawMessageScore;\r\n    /**\r\n     * @remarks\r\n     * Provides a string literal value to use.\r\n     *\r\n     */\r\n    text?: string;\r\n    /**\r\n     * @remarks\r\n     * Provides a translation token where, if the client has an\r\n     * available resource in the players' language which matches\r\n     * the token, will get translated on the client.\r\n     *\r\n     */\r\n    translate?: string;\r\n    /**\r\n     * @remarks\r\n     * Arguments for the translation token. Can be either an array\r\n     * of strings or RawMessage containing an array of raw text\r\n     * objects.\r\n     *\r\n     */\r\n    with?: string[] | RawMessage;\r\n}\r",
            "jsdoc": "/**\r\n * Defines a JSON structure that is used for more flexible.\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { DimensionLocation, world, BlockPermutation, BlockComponentTypes } from '@minecraft/server';\r\n *\r\n * function placeTranslatedSign(location: DimensionLocation, text: string) {\r\n *     const signBlock = location.dimension.getBlock(location);\r\n *\r\n *     if (!signBlock) {\r\n *         console.warn('Could not find a block at specified location.');\r\n *         return;\r\n *     }\r\n *     const signPerm = BlockPermutation.resolve('minecraft:standing_sign', { ground_sign_direction: 8 });\r\n *     signBlock.setPermutation(signPerm);\r\n *\r\n *     const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\r\n *     if (signComponent) {\r\n *         signComponent.setText({ translate: 'item.skull.player.name', with: [text] });\r\n *     } else {\r\n *         console.error('Could not find a sign component on the block.');\r\n *     }\r\n * }\r\n *\r\n * placeTranslatedSign(\r\n *     {\r\n *         dimension: world.getDimension('overworld'),\r\n *         x: 0,\r\n *         y: 0,\r\n *         z: 0,\r\n *     },\r\n *     'Steve',\r\n * );\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "rawtext",
                "type": "RawMessage[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "score",
                "type": "RawMessageScore",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "text",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "translate",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "with",
                "type": "string[] | RawMessage",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "rawmessage",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.RawMessageScore",
            "name": "RawMessageScore",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Provides a description of a score token to use within a raw\r message.\r /",
            "definition": "export interface RawMessageScore {\n    /**\r\n     * @remarks\r\n     * Name of the score value to match.\r\n     *\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @remarks\r\n     * Name of the score value to match.\r\n     *\r\n     */\r\n    objective?: string;\r\n}\r",
            "jsdoc": "/**\r\n * Provides a description of a score token to use within a raw\r\n * message.\r\n */\r",
            "properties": [
              {
                "name": "name",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "objective",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "rawmessagescore",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.RawText",
            "name": "RawText",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "A `RawMessage` with only the `rawtext` property. When a\r `RawMessage` is serialized the contents are put into a\r rawtext property, so this is useful when reading saved\r RawMessages. See `BlockSignComponent.setText` and\r `BlockSignComponent.getRawText` for examples.\r /",
            "definition": "export interface RawText {\n    /**\r\n     * @remarks\r\n     * A serialization of the current value of an associated sign.\r\n     *\r\n     */\r\n    rawtext?: RawMessage[];\r\n}\r",
            "jsdoc": "/**\r\n * A `RawMessage` with only the `rawtext` property. When a\r\n * `RawMessage` is serialized the contents are put into a\r\n * rawtext property, so this is useful when reading saved\r\n * RawMessages. See `BlockSignComponent.setText` and\r\n * `BlockSignComponent.getRawText` for examples.\r\n */\r",
            "properties": [
              {
                "name": "rawtext",
                "type": "RawMessage[]",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "rawtext",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.RGB",
            "name": "RGB",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Represents a fully customizable color within Minecraft.\r /",
            "definition": "export interface RGB {\n    /**\r\n     * @remarks\r\n     * Determines a color's blue component. Valid values are\r\n     * between 0 and 1.0.\r\n     *\r\n     */\r\n    blue: number;\r\n    /**\r\n     * @remarks\r\n     * Determines a color's green component. Valid values are\r\n     * between 0 and 1.0.\r\n     *\r\n     */\r\n    green: number;\r\n    /**\r\n     * @remarks\r\n     * Determines a color's red component. Valid values are between\r\n     * 0 and 1.0.\r\n     *\r\n     */\r\n    red: number;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a fully customizable color within Minecraft.\r\n */\r",
            "properties": [
              {
                "name": "blue",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "green",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "red",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "rgb",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.RGBA",
            "name": "RGBA",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Represents a fully customizable color within Minecraft.\r /",
            "definition": "export interface RGBA extends RGB {\n    /**\r\n     * @remarks\r\n     * Determines a color's alpha (opacity) component. Valid values\r\n     * are between 0 (transparent) and 1.0 (opaque).\r\n     *\r\n     */\r\n    alpha: number;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a fully customizable color within Minecraft.\r\n */\r",
            "properties": [
              {
                "name": "alpha",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "extends": "RGB",
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "rgba",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScoreboardObjectiveDisplayOptions",
            "name": "ScoreboardObjectiveDisplayOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for how a scoreboard should be\r displayed within its display slot.\r /",
            "definition": "export interface ScoreboardObjectiveDisplayOptions {\n    /**\r\n     * @remarks\r\n     * Objective to be displayed.\r\n     *\r\n     */\r\n    objective: ScoreboardObjective;\r\n    /**\r\n     * @remarks\r\n     * The sort order to display the objective items within.\r\n     *\r\n     */\r\n    sortOrder?: ObjectiveSortOrder;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for how a scoreboard should be\r\n * displayed within its display slot.\r\n */\r",
            "properties": [
              {
                "name": "objective",
                "type": "ScoreboardObjective",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "sortOrder",
                "type": "ObjectiveSortOrder",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scoreboardobjectivedisplayoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ScriptEventMessageFilterOptions",
            "name": "ScriptEventMessageFilterOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for registering a script event\r event callback.\r /",
            "definition": "export interface ScriptEventMessageFilterOptions {\n    /**\r\n     * @remarks\r\n     * Optional list of namespaces to filter inbound script event\r\n     * messages.\r\n     *\r\n     */\r\n    namespaces: string[];\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for registering a script event\r\n * event callback.\r\n */\r",
            "properties": [
              {
                "name": "namespaces",
                "type": "string[]",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "scripteventmessagefilteroptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.SpawnEntityOptions",
            "name": "SpawnEntityOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for spawning an Entity.\r /",
            "definition": "export interface SpawnEntityOptions {\n    /**\r\n     * @remarks\r\n     * Optional spawn event to send to the entity after it is\r\n     * spawned.\r\n     *\r\n     */\r\n    spawnEvent?: string;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for spawning an Entity.\r\n */\r",
            "properties": [
              {
                "name": "spawnEvent",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "spawnentityoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StructureCreateOptions",
            "name": "StructureCreateOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "StructureManager.createFromWorld}\r /",
            "definition": "export interface StructureCreateOptions {\n    /**\r\n     * @remarks\r\n     * Whether blocks should be included in the structure. Defaults\r\n     * to true.\r\n     *\r\n     */\r\n    includeBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * How the Structure should be saved. Defaults to\r\n     * StructureSaveMode.World.\r\n     *\r\n     */\r\n    saveMode?: StructureSaveMode;\r\n}\r",
            "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.createFromWorld}\r\n */\r",
            "properties": [
              {
                "name": "includeBlocks",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeEntities",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "saveMode",
                "type": "StructureSaveMode",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "structurecreateoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.StructurePlaceOptions",
            "name": "StructurePlaceOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "StructureManager.place}\r /",
            "definition": "export interface StructurePlaceOptions {\n    /**\r\n     * @remarks\r\n     * How the Structure should be animated when placed.\r\n     *\r\n     */\r\n    animationMode?: StructureAnimationMode;\r\n    /**\r\n     * @remarks\r\n     * How many seconds the animation should take.\r\n     *\r\n     */\r\n    animationSeconds?: number;\r\n    /**\r\n     * @remarks\r\n     * Whether blocks should be included in the structure. Defaults\r\n     * to true.\r\n     *\r\n     */\r\n    includeBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * What percentage of blocks should be placed. A value of 1\r\n     * will place 100% of the blocks while a value of 0 will place\r\n     * none. The blocks are chosen randomly based on the {@link\r\n     * StructurePlaceOptions.integritySeed}.\r\n     *\r\n     */\r\n    integrity?: number;\r\n    /**\r\n     * @remarks\r\n     * Seed that determines which blocks are randomly chosen to be\r\n     * placed. Defaults to a random seed.\r\n     *\r\n     */\r\n    integritySeed?: string;\r\n    /**\r\n     * @remarks\r\n     * Which axes the Structure should be mirrored on when placed.\r\n     * Defaults to StructureMirrorAxis.None.\r\n     *\r\n     */\r\n    mirror?: StructureMirrorAxis;\r\n    /**\r\n     * @remarks\r\n     * How the Structure should be rotated when placed. Defaults to\r\n     * AxisAlignedRotation.None.\r\n     *\r\n     */\r\n    rotation?: StructureRotation;\r\n    /**\r\n     * @remarks\r\n     * Whether the structure should be waterlogged when placed.\r\n     * Defaults to false. If true, blocks will become waterlogged\r\n     * when placed in water.\r\n     *\r\n     */\r\n    waterlogged?: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.place}\r\n */\r",
            "properties": [
              {
                "name": "animationMode",
                "type": "StructureAnimationMode",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "animationSeconds",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeBlocks",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "includeEntities",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "integrity",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "integritySeed",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "mirror",
                "type": "StructureMirrorAxis",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "rotation",
                "type": "StructureRotation",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "waterlogged",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "structureplaceoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.TeleportOptions",
            "name": "TeleportOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for teleporting an entity.\r ```typescript\r  function teleport(targetLocation: DimensionLocation) {\r   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r    system.runTimeout(() => {\r     cow.teleport(\r       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r       {\r         facingLocation: targetLocation,\r       }\r     );\r   }, 20);\r }\r ```\r ```typescript\r  function teleportMovement(targetLocation: DimensionLocation) {\r   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r    let inc = 1;\r   const runId = system.runInterval(() => {\r     pig.teleport(\r       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r       {\r         facingLocation: targetLocation,\r       }\r     );\r      if (inc > 100) {\r       system.clearRun(runId);\r     }\r     inc++;\r   }, 4);\r }\r ```\r /",
            "definition": "export interface TeleportOptions {\n    /**\r\n     * @remarks\r\n     * Whether to check whether blocks will block the entity after\r\n     * teleport.\r\n     *\r\n     */\r\n    checkForBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Dimension to potentially move the entity to.  If not\r\n     * specified, the entity is teleported within the dimension\r\n     * that they reside.\r\n     *\r\n     */\r\n    dimension?: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Location that the entity should be facing after teleport.\r\n     *\r\n     */\r\n    facingLocation?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Whether to retain the entities velocity after teleport.\r\n     *\r\n     */\r\n    keepVelocity?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Rotation of the entity after teleport.\r\n     *\r\n     */\r\n    rotation?: Vector2;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for teleporting an entity.\r\n * @example teleport.ts\r\n * ```typescript\r\n * import { system, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function teleport(targetLocation: DimensionLocation) {\r\n *   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r\n *\r\n *   system.runTimeout(() => {\r\n *     cow.teleport(\r\n *       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r\n *       {\r\n *         facingLocation: targetLocation,\r\n *       }\r\n *     );\r\n *   }, 20);\r\n * }\r\n * ```\r\n * @example teleportMovement.ts\r\n * ```typescript\r\n * import { system, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function teleportMovement(targetLocation: DimensionLocation) {\r\n *   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r\n *\r\n *   let inc = 1;\r\n *   const runId = system.runInterval(() => {\r\n *     pig.teleport(\r\n *       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r\n *       {\r\n *         facingLocation: targetLocation,\r\n *       }\r\n *     );\r\n *\r\n *     if (inc > 100) {\r\n *       system.clearRun(runId);\r\n *     }\r\n *     inc++;\r\n *   }, 4);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "checkForBlocks",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "dimension",
                "type": "Dimension",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "facingLocation",
                "type": "Vector3",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "keepVelocity",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "rotation",
                "type": "Vector2",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "teleportoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.TitleDisplayOptions",
            "name": "TitleDisplayOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for displaying a title and\r optional subtitle.\r /",
            "definition": "export interface TitleDisplayOptions {\n    /**\r\n     * @remarks\r\n     * Fade-in duration for the title and subtitle, in ticks. There\r\n     * are 20 ticks per second. Use {@link TicksPerSecond} constant\r\n     * to convert between ticks and seconds.\r\n     *\r\n     */\r\n    fadeInDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Fade-out time for the title and subtitle, in ticks. There\r\n     * are 20 ticks per second. Use {@link TicksPerSecond} constant\r\n     * to convert between ticks and seconds.\r\n     *\r\n     */\r\n    fadeOutDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Amount of time for the title and subtitle to stay in place,\r\n     * in ticks. There are 20 ticks per second. Use {@link\r\n     * TicksPerSecond} constant to convert between ticks and\r\n     * seconds.\r\n     *\r\n     */\r\n    stayDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Optional subtitle text.\r\n     *\r\n     */\r\n    subtitle?: (RawMessage | string)[] | RawMessage | string;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for displaying a title and\r\n * optional subtitle.\r\n */\r",
            "properties": [
              {
                "name": "fadeInDuration",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "fadeOutDuration",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "stayDuration",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "subtitle",
                "type": "(RawMessage | string)[] | RawMessage | string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "titledisplayoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Vector2",
            "name": "Vector2",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Represents a two-directional vector.\r /",
            "definition": "export interface Vector2 {\n    /**\r\n     * @remarks\r\n     * X component of the two-dimensional vector.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of the two-dimensional vector.\r\n     *\r\n     */\r\n    y: number;\r\n}\r",
            "jsdoc": "/**\r\n * Represents a two-directional vector.\r\n */\r",
            "properties": [
              {
                "name": "x",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "y",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "vector2",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.Vector3",
            "name": "Vector3",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains a description of a vector.\r /",
            "definition": "export interface Vector3 {\n    /**\r\n     * @remarks\r\n     * X component of this vector.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of this vector.\r\n     *\r\n     */\r\n    y: number;\r\n    /**\r\n     * @remarks\r\n     * Z component of this vector.\r\n     *\r\n     */\r\n    z: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains a description of a vector.\r\n */\r",
            "properties": [
              {
                "name": "x",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "y",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "z",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "vector3",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.VectorXZ",
            "name": "VectorXZ",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Z component of this vector.",
            "definition": "export interface VectorXZ {\n    x: number;\r\n    z: number;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Z component of this vector.\r\n     *\r\n     */\r",
            "properties": [
              {
                "name": "x",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "z",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "vectorxz",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.WorldSoundOptions",
            "name": "WorldSoundOptions",
            "type": "interface",
            "module": "@minecraft/server",
            "description": "Contains additional options for a playSound occurrence.\r /",
            "definition": "export interface WorldSoundOptions {\n    /**\r\n     * @remarks\r\n     * Pitch of the sound played.\r\n     *\r\n     */\r\n    pitch?: number;\r\n    /**\r\n     * @remarks\r\n     * Relative volume and space by which this sound is heard.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
            "jsdoc": "/**\r\n * Contains additional options for a playSound occurrence.\r\n */\r",
            "properties": [
              {
                "name": "pitch",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "volume",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "worldsoundoptions",
              "interface"
            ],
            "stability": "stable"
          }
        ],
        "functions": [],
        "types": [
          {
            "id": "@minecraft/server.BlockComponentTypeMap",
            "name": "BlockComponentTypeMap",
            "type": "type",
            "module": "@minecraft/server",
            "definition": "export type BlockComponentTypeMap = {",
            "jsdoc": "",
            "typeDefinition": "{",
            "categories": [
              "Types",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "blockcomponenttypemap",
              "type"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.EntityComponentTypeMap",
            "name": "EntityComponentTypeMap",
            "type": "type",
            "module": "@minecraft/server",
            "definition": "export type EntityComponentTypeMap = {",
            "jsdoc": "",
            "typeDefinition": "{",
            "categories": [
              "Types",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "entitycomponenttypemap",
              "type"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server.ItemComponentTypeMap",
            "name": "ItemComponentTypeMap",
            "type": "type",
            "module": "@minecraft/server",
            "definition": "export type ItemComponentTypeMap = {",
            "jsdoc": "",
            "typeDefinition": "{",
            "categories": [
              "Types",
              "Server"
            ],
            "tags": [],
            "keywords": [
              "itemcomponenttypemap",
              "type"
            ],
            "stability": "stable"
          }
        ],
        "constants": [],
        "events": []
      }
    },
    "@minecraft/server-admin": {
      "module": "@minecraft/server-admin",
      "version": "1.0.0",
      "description": "Contains types for managing server administrative functions.",
      "elements": [
        {
          "id": "@minecraft/server-admin.AdminBeforeEvents",
          "name": "AdminBeforeEvents",
          "type": "class",
          "module": "@minecraft/server-admin",
          "description": "Contains types related to administering a Bedrock Dedicated\r Server. These types allow for the configuration of variables\r and secrets in JSON files in the Bedrock Dedicated Server\r folder. These types cannot be used on Minecraft clients or\r within Minecraft Realms.\r  Manifest Details\r ```json\r {\r   \"version\": \"1.0.0-beta\"\r }\r ```\r  /",
          "definition": "export class AdminBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event is fired before a player joins the world. Unlike\r\n     * other before events, this event is a before event that you\r\n     * can delay several ticks by not resolving the promise\r\n     * returned in the subscribe function. If the promise is\r\n     * rejected, the client is rejected.\r\n     *\r\n     */\r\n    readonly asyncPlayerJoin: AsyncPlayerJoinBeforeEventSignal;\r\n}\r",
          "jsdoc": "/**\r\n * @beta\r\n * @packageDocumentation\r\n * Contains types related to administering a Bedrock Dedicated\r\n * Server. These types allow for the configuration of variables\r\n * and secrets in JSON files in the Bedrock Dedicated Server\r\n * folder. These types cannot be used on Minecraft clients or\r\n * within Minecraft Realms.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-admin\",\r\n *   \"version\": \"1.0.0-beta\"\r\n * }\r\n * ```\r\n *\r\n */\r",
          "properties": [
            {
              "name": "asyncPlayerJoin",
              "type": "AsyncPlayerJoinBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Admin"
          ],
          "tags": [
            "beta"
          ],
          "keywords": [
            "adminbeforeevents",
            "class"
          ],
          "examples": [],
          "stability": "experimental"
        },
        {
          "id": "@minecraft/server-admin.AsyncPlayerJoinBeforeEvent",
          "name": "AsyncPlayerJoinBeforeEvent",
          "type": "class",
          "module": "@minecraft/server-admin",
          "description": "The data available before a player joins the world.\r /",
          "definition": "export class AsyncPlayerJoinBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The player's name\r\n     *\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * @remarks\r\n     * An identifier that can be used to identify a player across\r\n     * sessions.\r\n     *\r\n     */\r\n    readonly persistentId: string;\r\n    /**\r\n     * @remarks\r\n     * Call this to disconnect a player. They will be allowed to\r\n     * try to join again.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link DisconnectedError}\r\n     */\r\n    disconnect(reason?: string): void;\r\n    /**\r\n     * @remarks\r\n     * Will return true if the player is still waiting to join the\r\n     * world. If they disconnect then it will return false.\r\n     *\r\n     */\r\n    isValid(): boolean;\r\n}\r",
          "jsdoc": "/**\r\n * The data available before a player joins the world.\r\n */\r",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "persistentId",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "disconnect",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "disconnect(reason?: string): void"
            },
            {
              "name": "isValid",
              "parameters": [],
              "returnType": "boolean",
              "accessibility": "public",
              "signature": "isValid(): boolean"
            }
          ],
          "categories": [
            "Classes",
            "Admin"
          ],
          "tags": [],
          "keywords": [
            "asyncplayerjoinbeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-admin.AsyncPlayerJoinBeforeEventSignal",
          "name": "AsyncPlayerJoinBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server-admin",
          "description": "Will return true if the player is still waiting to join the\r world. If they disconnect then it will return false.",
          "definition": "export class AsyncPlayerJoinBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Add a callback that's ran before a player joins the world.\r\n     * This callback returns a promise and the player won't join\r\n     * until that promise is resolved. If the promise is not\r\n     * resolved within a reasonable time, the player joining will\r\n     * be rejected. If the player joining leaves/disconnects, then\r\n     * the event data's isValid will return false.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>,\r\n    ): (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>;\r\n    unsubscribe(callback: (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>): boolean;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Will return true if the player is still waiting to join the\r\n     * world. If they disconnect then it will return false.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Admin"
          ],
          "tags": [],
          "keywords": [
            "asyncplayerjoinbeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-admin.SecretString",
          "name": "SecretString",
          "type": "class",
          "module": "@minecraft/server-admin",
          "description": "This represents a placeholder object that represents a\r secret string. The contents of that string are not available\r to script; this object is just a placeholder.\r /",
          "definition": "export class SecretString {\n    constructor(value: string);\r\n}\r",
          "jsdoc": "/**\r\n * This represents a placeholder object that represents a\r\n * secret string. The contents of that string are not available\r\n * to script; this object is just a placeholder.\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Admin"
          ],
          "tags": [],
          "keywords": [
            "secretstring",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-admin.ServerSecrets",
          "name": "ServerSecrets",
          "type": "class",
          "module": "@minecraft/server-admin",
          "description": "A collection of server secrets defined in dedicated server\r configuration.\r ```typescript\r  const serverUrl = variables.get('serverEndpoint');\r  function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r      req.body = JSON.stringify({\r         playerId,\r     });\r      const authTokenSec = secrets.get('authtoken');\r      if (!authTokenSec) {\r         throw new Error('authtoken secret not defined.');\r     }\r      req.method = HttpRequestMethod.Post;\r     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r      return http.request(req);\r }\r ```\r /",
          "definition": "export class ServerSecrets {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * A list of available, configured server secrets.\r\n     *\r\n     */\r\n    readonly names: string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a SecretString that is a placeholder for a secret\r\n     * configured in a JSON file. In certain objects, like an\r\n     * HttpHeader, this Secret is resolved at the time of execution\r\n     * but is not made available to the script environment.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    get(name: string): SecretString | undefined;\r\n}\r",
          "jsdoc": "/**\r\n * A collection of server secrets defined in dedicated server\r\n * configuration.\r\n * @example getPlayerProfile.ts\r\n * ```typescript\r\n * import { variables, secrets } from \"@minecraft/server-admin\";\r\n * import { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n *\r\n * const serverUrl = variables.get('serverEndpoint');\r\n *\r\n * function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n *     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         playerId,\r\n *     });\r\n *\r\n *     const authTokenSec = secrets.get('authtoken');\r\n *\r\n *     if (!authTokenSec) {\r\n *         throw new Error('authtoken secret not defined.');\r\n *     }\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n *\r\n *     return http.request(req);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "names",
              "type": "string[]",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "SecretString | undefined",
              "accessibility": "public",
              "signature": "get(name: string): SecretString | undefined"
            }
          ],
          "categories": [
            "Classes",
            "Admin"
          ],
          "tags": [],
          "keywords": [
            "serversecrets",
            "class"
          ],
          "examples": [
            {
              "title": "getPlayerProfile.ts",
              "code": "import { variables, secrets } from \"@minecraft/server-admin\";\r\nimport { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n\nconst serverUrl = variables.get('serverEndpoint');\r\n\nfunction getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n    const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n\n    req.body = JSON.stringify({\r\n        playerId,\r\n    });\r\n\n    const authTokenSec = secrets.get('authtoken');\r\n\n    if (!authTokenSec) {\r\n        throw new Error('authtoken secret not defined.');\r\n    }\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n\n    return http.request(req);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-admin.ServerVariables",
          "name": "ServerVariables",
          "type": "class",
          "module": "@minecraft/server-admin",
          "description": "A collection of server variables defined in dedicated server\r configuration.\r ```typescript\r  const serverUrl = variables.get('serverEndpoint');\r  function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r      req.body = JSON.stringify({\r         playerId,\r     });\r      const authTokenSec = secrets.get('authtoken');\r      if (!authTokenSec) {\r         throw new Error('authtoken secret not defined.');\r     }\r      req.method = HttpRequestMethod.Post;\r     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r      return http.request(req);\r }\r ```\r /",
          "definition": "export class ServerVariables {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * A list of available, configured server variables.\r\n     *\r\n     */\r\n    readonly names: string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the value of variable that has been configured in a\r\n     * dedicated server configuration JSON file.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    get(name: string): unknown | undefined;\r\n}\r",
          "jsdoc": "/**\r\n * A collection of server variables defined in dedicated server\r\n * configuration.\r\n * @example getPlayerProfile.ts\r\n * ```typescript\r\n * import { variables, secrets } from \"@minecraft/server-admin\";\r\n * import { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n *\r\n * const serverUrl = variables.get('serverEndpoint');\r\n *\r\n * function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n *     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         playerId,\r\n *     });\r\n *\r\n *     const authTokenSec = secrets.get('authtoken');\r\n *\r\n *     if (!authTokenSec) {\r\n *         throw new Error('authtoken secret not defined.');\r\n *     }\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n *\r\n *     return http.request(req);\r\n * }\r\n * ```\r\n */\r",
          "properties": [
            {
              "name": "names",
              "type": "string[]",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [
            {
              "name": "get",
              "parameters": [],
              "returnType": "unknown | undefined",
              "accessibility": "public",
              "signature": "get(name: string): unknown | undefined"
            }
          ],
          "categories": [
            "Classes",
            "Admin"
          ],
          "tags": [],
          "keywords": [
            "servervariables",
            "class"
          ],
          "examples": [
            {
              "title": "getPlayerProfile.ts",
              "code": "import { variables, secrets } from \"@minecraft/server-admin\";\r\nimport { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n\nconst serverUrl = variables.get('serverEndpoint');\r\n\nfunction getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n    const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n\n    req.body = JSON.stringify({\r\n        playerId,\r\n    });\r\n\n    const authTokenSec = secrets.get('authtoken');\r\n\n    if (!authTokenSec) {\r\n        throw new Error('authtoken secret not defined.');\r\n    }\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n\n    return http.request(req);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-admin.TransferPlayerIpPortOptions",
          "name": "TransferPlayerIpPortOptions",
          "type": "interface",
          "module": "@minecraft/server-admin",
          "description": "Options when transferring a player to a server that supports\r direct host/port connections.\r /",
          "definition": "export interface TransferPlayerIpPortOptions {\n    /**\r\n     * @remarks\r\n     * Hostname of the destination server.\r\n     *\r\n     */\r\n    hostname: string;\r\n    /**\r\n     * @remarks\r\n     * Port of the destination server.\r\n     *\r\n     */\r\n    port: number;\r\n}\r",
          "jsdoc": "/**\r\n * Options when transferring a player to a server that supports\r\n * direct host/port connections.\r\n */\r",
          "properties": [
            {
              "name": "hostname",
              "type": "string",
              "optional": false,
              "accessibility": "public"
            },
            {
              "name": "port",
              "type": "number",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Admin"
          ],
          "tags": [],
          "keywords": [
            "transferplayeripportoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-admin.TransferPlayerNetherNetOptions",
          "name": "TransferPlayerNetherNetOptions",
          "type": "interface",
          "module": "@minecraft/server-admin",
          "description": "Options when transferring a player to a server that supports\r NetherNet connections.\r /",
          "definition": "export interface TransferPlayerNetherNetOptions {\n    /**\r\n     * @remarks\r\n     * NetherNet ID of the destination server.\r\n     *\r\n     */\r\n    netherNetId: string;\r\n}\r",
          "jsdoc": "/**\r\n * Options when transferring a player to a server that supports\r\n * NetherNet connections.\r\n */\r",
          "properties": [
            {
              "name": "netherNetId",
              "type": "string",
              "optional": false,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Admin"
          ],
          "tags": [],
          "keywords": [
            "transferplayernethernetoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-admin.DisconnectedError",
          "name": "DisconnectedError",
          "type": "class",
          "module": "@minecraft/server-admin",
          "description": "An error that is thrown when trying to interact with a join\r event and the player is disconnected.\r /",
          "definition": "export class DisconnectedError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The id of the player that was disconnected.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    id: string;\r\n}\r",
          "jsdoc": "/**\r\n * An error that is thrown when trying to interact with a join\r\n * event and the player is disconnected.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Admin"
          ],
          "tags": [],
          "keywords": [
            "disconnectederror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        }
      ],
      "exports": {
        "enums": [],
        "classes": [
          {
            "id": "@minecraft/server-admin.AdminBeforeEvents",
            "name": "AdminBeforeEvents",
            "type": "class",
            "module": "@minecraft/server-admin",
            "description": "Contains types related to administering a Bedrock Dedicated\r Server. These types allow for the configuration of variables\r and secrets in JSON files in the Bedrock Dedicated Server\r folder. These types cannot be used on Minecraft clients or\r within Minecraft Realms.\r  Manifest Details\r ```json\r {\r   \"version\": \"1.0.0-beta\"\r }\r ```\r  /",
            "definition": "export class AdminBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event is fired before a player joins the world. Unlike\r\n     * other before events, this event is a before event that you\r\n     * can delay several ticks by not resolving the promise\r\n     * returned in the subscribe function. If the promise is\r\n     * rejected, the client is rejected.\r\n     *\r\n     */\r\n    readonly asyncPlayerJoin: AsyncPlayerJoinBeforeEventSignal;\r\n}\r",
            "jsdoc": "/**\r\n * @beta\r\n * @packageDocumentation\r\n * Contains types related to administering a Bedrock Dedicated\r\n * Server. These types allow for the configuration of variables\r\n * and secrets in JSON files in the Bedrock Dedicated Server\r\n * folder. These types cannot be used on Minecraft clients or\r\n * within Minecraft Realms.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-admin\",\r\n *   \"version\": \"1.0.0-beta\"\r\n * }\r\n * ```\r\n *\r\n */\r",
            "properties": [
              {
                "name": "asyncPlayerJoin",
                "type": "AsyncPlayerJoinBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Admin"
            ],
            "tags": [
              "beta"
            ],
            "keywords": [
              "adminbeforeevents",
              "class"
            ],
            "examples": [],
            "stability": "experimental"
          },
          {
            "id": "@minecraft/server-admin.AsyncPlayerJoinBeforeEvent",
            "name": "AsyncPlayerJoinBeforeEvent",
            "type": "class",
            "module": "@minecraft/server-admin",
            "description": "The data available before a player joins the world.\r /",
            "definition": "export class AsyncPlayerJoinBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The player's name\r\n     *\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * @remarks\r\n     * An identifier that can be used to identify a player across\r\n     * sessions.\r\n     *\r\n     */\r\n    readonly persistentId: string;\r\n    /**\r\n     * @remarks\r\n     * Call this to disconnect a player. They will be allowed to\r\n     * try to join again.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link DisconnectedError}\r\n     */\r\n    disconnect(reason?: string): void;\r\n    /**\r\n     * @remarks\r\n     * Will return true if the player is still waiting to join the\r\n     * world. If they disconnect then it will return false.\r\n     *\r\n     */\r\n    isValid(): boolean;\r\n}\r",
            "jsdoc": "/**\r\n * The data available before a player joins the world.\r\n */\r",
            "properties": [
              {
                "name": "name",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "persistentId",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "disconnect",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "disconnect(reason?: string): void"
              },
              {
                "name": "isValid",
                "parameters": [],
                "returnType": "boolean",
                "accessibility": "public",
                "signature": "isValid(): boolean"
              }
            ],
            "categories": [
              "Classes",
              "Admin"
            ],
            "tags": [],
            "keywords": [
              "asyncplayerjoinbeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-admin.AsyncPlayerJoinBeforeEventSignal",
            "name": "AsyncPlayerJoinBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server-admin",
            "description": "Will return true if the player is still waiting to join the\r world. If they disconnect then it will return false.",
            "definition": "export class AsyncPlayerJoinBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Add a callback that's ran before a player joins the world.\r\n     * This callback returns a promise and the player won't join\r\n     * until that promise is resolved. If the promise is not\r\n     * resolved within a reasonable time, the player joining will\r\n     * be rejected. If the player joining leaves/disconnects, then\r\n     * the event data's isValid will return false.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>,\r\n    ): (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>;\r\n    unsubscribe(callback: (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>): boolean;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Will return true if the player is still waiting to join the\r\n     * world. If they disconnect then it will return false.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Admin"
            ],
            "tags": [],
            "keywords": [
              "asyncplayerjoinbeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-admin.SecretString",
            "name": "SecretString",
            "type": "class",
            "module": "@minecraft/server-admin",
            "description": "This represents a placeholder object that represents a\r secret string. The contents of that string are not available\r to script; this object is just a placeholder.\r /",
            "definition": "export class SecretString {\n    constructor(value: string);\r\n}\r",
            "jsdoc": "/**\r\n * This represents a placeholder object that represents a\r\n * secret string. The contents of that string are not available\r\n * to script; this object is just a placeholder.\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Admin"
            ],
            "tags": [],
            "keywords": [
              "secretstring",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-admin.ServerSecrets",
            "name": "ServerSecrets",
            "type": "class",
            "module": "@minecraft/server-admin",
            "description": "A collection of server secrets defined in dedicated server\r configuration.\r ```typescript\r  const serverUrl = variables.get('serverEndpoint');\r  function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r      req.body = JSON.stringify({\r         playerId,\r     });\r      const authTokenSec = secrets.get('authtoken');\r      if (!authTokenSec) {\r         throw new Error('authtoken secret not defined.');\r     }\r      req.method = HttpRequestMethod.Post;\r     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r      return http.request(req);\r }\r ```\r /",
            "definition": "export class ServerSecrets {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * A list of available, configured server secrets.\r\n     *\r\n     */\r\n    readonly names: string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a SecretString that is a placeholder for a secret\r\n     * configured in a JSON file. In certain objects, like an\r\n     * HttpHeader, this Secret is resolved at the time of execution\r\n     * but is not made available to the script environment.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    get(name: string): SecretString | undefined;\r\n}\r",
            "jsdoc": "/**\r\n * A collection of server secrets defined in dedicated server\r\n * configuration.\r\n * @example getPlayerProfile.ts\r\n * ```typescript\r\n * import { variables, secrets } from \"@minecraft/server-admin\";\r\n * import { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n *\r\n * const serverUrl = variables.get('serverEndpoint');\r\n *\r\n * function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n *     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         playerId,\r\n *     });\r\n *\r\n *     const authTokenSec = secrets.get('authtoken');\r\n *\r\n *     if (!authTokenSec) {\r\n *         throw new Error('authtoken secret not defined.');\r\n *     }\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n *\r\n *     return http.request(req);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "names",
                "type": "string[]",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "SecretString | undefined",
                "accessibility": "public",
                "signature": "get(name: string): SecretString | undefined"
              }
            ],
            "categories": [
              "Classes",
              "Admin"
            ],
            "tags": [],
            "keywords": [
              "serversecrets",
              "class"
            ],
            "examples": [
              {
                "title": "getPlayerProfile.ts",
                "code": "import { variables, secrets } from \"@minecraft/server-admin\";\r\nimport { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n\nconst serverUrl = variables.get('serverEndpoint');\r\n\nfunction getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n    const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n\n    req.body = JSON.stringify({\r\n        playerId,\r\n    });\r\n\n    const authTokenSec = secrets.get('authtoken');\r\n\n    if (!authTokenSec) {\r\n        throw new Error('authtoken secret not defined.');\r\n    }\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n\n    return http.request(req);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-admin.ServerVariables",
            "name": "ServerVariables",
            "type": "class",
            "module": "@minecraft/server-admin",
            "description": "A collection of server variables defined in dedicated server\r configuration.\r ```typescript\r  const serverUrl = variables.get('serverEndpoint');\r  function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r      req.body = JSON.stringify({\r         playerId,\r     });\r      const authTokenSec = secrets.get('authtoken');\r      if (!authTokenSec) {\r         throw new Error('authtoken secret not defined.');\r     }\r      req.method = HttpRequestMethod.Post;\r     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r      return http.request(req);\r }\r ```\r /",
            "definition": "export class ServerVariables {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * A list of available, configured server variables.\r\n     *\r\n     */\r\n    readonly names: string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the value of variable that has been configured in a\r\n     * dedicated server configuration JSON file.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    get(name: string): unknown | undefined;\r\n}\r",
            "jsdoc": "/**\r\n * A collection of server variables defined in dedicated server\r\n * configuration.\r\n * @example getPlayerProfile.ts\r\n * ```typescript\r\n * import { variables, secrets } from \"@minecraft/server-admin\";\r\n * import { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n *\r\n * const serverUrl = variables.get('serverEndpoint');\r\n *\r\n * function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n *     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         playerId,\r\n *     });\r\n *\r\n *     const authTokenSec = secrets.get('authtoken');\r\n *\r\n *     if (!authTokenSec) {\r\n *         throw new Error('authtoken secret not defined.');\r\n *     }\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n *\r\n *     return http.request(req);\r\n * }\r\n * ```\r\n */\r",
            "properties": [
              {
                "name": "names",
                "type": "string[]",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [
              {
                "name": "get",
                "parameters": [],
                "returnType": "unknown | undefined",
                "accessibility": "public",
                "signature": "get(name: string): unknown | undefined"
              }
            ],
            "categories": [
              "Classes",
              "Admin"
            ],
            "tags": [],
            "keywords": [
              "servervariables",
              "class"
            ],
            "examples": [
              {
                "title": "getPlayerProfile.ts",
                "code": "import { variables, secrets } from \"@minecraft/server-admin\";\r\nimport { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n\nconst serverUrl = variables.get('serverEndpoint');\r\n\nfunction getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n    const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n\n    req.body = JSON.stringify({\r\n        playerId,\r\n    });\r\n\n    const authTokenSec = secrets.get('authtoken');\r\n\n    if (!authTokenSec) {\r\n        throw new Error('authtoken secret not defined.');\r\n    }\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n\n    return http.request(req);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-admin.DisconnectedError",
            "name": "DisconnectedError",
            "type": "class",
            "module": "@minecraft/server-admin",
            "description": "An error that is thrown when trying to interact with a join\r event and the player is disconnected.\r /",
            "definition": "export class DisconnectedError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The id of the player that was disconnected.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    id: string;\r\n}\r",
            "jsdoc": "/**\r\n * An error that is thrown when trying to interact with a join\r\n * event and the player is disconnected.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Admin"
            ],
            "tags": [],
            "keywords": [
              "disconnectederror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          }
        ],
        "interfaces": [
          {
            "id": "@minecraft/server-admin.TransferPlayerIpPortOptions",
            "name": "TransferPlayerIpPortOptions",
            "type": "interface",
            "module": "@minecraft/server-admin",
            "description": "Options when transferring a player to a server that supports\r direct host/port connections.\r /",
            "definition": "export interface TransferPlayerIpPortOptions {\n    /**\r\n     * @remarks\r\n     * Hostname of the destination server.\r\n     *\r\n     */\r\n    hostname: string;\r\n    /**\r\n     * @remarks\r\n     * Port of the destination server.\r\n     *\r\n     */\r\n    port: number;\r\n}\r",
            "jsdoc": "/**\r\n * Options when transferring a player to a server that supports\r\n * direct host/port connections.\r\n */\r",
            "properties": [
              {
                "name": "hostname",
                "type": "string",
                "optional": false,
                "accessibility": "public"
              },
              {
                "name": "port",
                "type": "number",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Admin"
            ],
            "tags": [],
            "keywords": [
              "transferplayeripportoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-admin.TransferPlayerNetherNetOptions",
            "name": "TransferPlayerNetherNetOptions",
            "type": "interface",
            "module": "@minecraft/server-admin",
            "description": "Options when transferring a player to a server that supports\r NetherNet connections.\r /",
            "definition": "export interface TransferPlayerNetherNetOptions {\n    /**\r\n     * @remarks\r\n     * NetherNet ID of the destination server.\r\n     *\r\n     */\r\n    netherNetId: string;\r\n}\r",
            "jsdoc": "/**\r\n * Options when transferring a player to a server that supports\r\n * NetherNet connections.\r\n */\r",
            "properties": [
              {
                "name": "netherNetId",
                "type": "string",
                "optional": false,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Admin"
            ],
            "tags": [],
            "keywords": [
              "transferplayernethernetoptions",
              "interface"
            ],
            "stability": "stable"
          }
        ],
        "functions": [],
        "types": [],
        "constants": [],
        "events": []
      }
    },
    "@minecraft/server-net": {
      "module": "@minecraft/server-net",
      "version": "1.0.0",
      "description": "Contains types for networking functionality.",
      "elements": [
        {
          "id": "@minecraft/server-net.HttpRequestMethod",
          "name": "HttpRequestMethod",
          "type": "enum",
          "module": "@minecraft/server-net",
          "description": "executing HTTP-based requests. This module can only be used\r on Bedrock Dedicated Server. These APIs do not function\r within the Minecraft game client or within Minecraft Realms.\r  Manifest Details\r ```json\r {\r   \"version\": \"1.0.0-beta\"\r }\r ```\r  /",
          "definition": "export enum HttpRequestMethod {\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP HEAD request. HEAD\r\n     * requests are similar to a GET request, but are commonly used\r\n     * to retrieve just the HTTP response headers from the\r\n     * specified URI, and not the body contents.\r\n     *\r\n     */\r\n    Delete = 'Delete',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. POST requests\r\n     * are commonly used to create a new resource that is a\r\n     * subordinate of the specified URI.\r\n     *\r\n     */\r\n    Get = 'Get',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. GET requests\r\n     * are commonly used to retrieve information about a resource\r\n     * at the specified URI.\r\n     *\r\n     */\r\n    Head = 'Head',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. GET requests\r\n     * are commonly used to retrieve information about a resource\r\n     * at the specified URI.\r\n     *\r\n     */\r\n    Post = 'Post',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. PUT requests\r\n     * are commonly used to update a single resource that already\r\n     * exists in a resource collection.\r\n     *\r\n     */\r\n    Put = 'Put',\r\n}\r",
          "jsdoc": "/**\r\n * @beta\r\n * @packageDocumentation\r\n * The `@minecraft/server-net` module contains types for\r\n * executing HTTP-based requests. This module can only be used\r\n * on Bedrock Dedicated Server. These APIs do not function\r\n * within the Minecraft game client or within Minecraft Realms.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-net\",\r\n *   \"version\": \"1.0.0-beta\"\r\n * }\r\n * ```\r\n *\r\n */\r",
          "enumValues": [
            {
              "name": "Delete",
              "value": "Delete",
              "description": ""
            },
            {
              "name": "Get",
              "value": "Get",
              "description": ""
            },
            {
              "name": "Head",
              "value": "Head",
              "description": ""
            },
            {
              "name": "Post",
              "value": "Post",
              "description": ""
            },
            {
              "name": "Put",
              "value": "Put",
              "description": ""
            }
          ],
          "categories": [
            "Enums",
            "Networking"
          ],
          "tags": [
            "beta"
          ],
          "keywords": [
            "httprequestmethod",
            "enum"
          ],
          "stability": "experimental"
        },
        {
          "id": "@minecraft/server-net.PacketId",
          "name": "PacketId",
          "type": "enum",
          "module": "@minecraft/server-net",
          "description": "Represents the unique type of network packet.\r /",
          "definition": "export enum PacketId {\n    ActorEventPacket = 'ActorEventPacket',\r\n    ActorPickRequestPacket = 'ActorPickRequestPacket',\r\n    AddActorPacket = 'AddActorPacket',\r\n    AddBehaviorTreePacket = 'AddBehaviorTreePacket',\r\n    AddItemActorPacket = 'AddItemActorPacket',\r\n    AddPaintingPacket = 'AddPaintingPacket',\r\n    AddPlayerPacket = 'AddPlayerPacket',\r\n    AddVolumeEntityPacket = 'AddVolumeEntityPacket',\r\n    AgentActionEventPacket = 'AgentActionEventPacket',\r\n    AgentAnimationPacket = 'AgentAnimationPacket',\r\n    AnimateEntityPacket = 'AnimateEntityPacket',\r\n    AnimatePacket = 'AnimatePacket',\r\n    AnvilDamagePacket = 'AnvilDamagePacket',\r\n    AutomationClientConnectPacket = 'AutomationClientConnectPacket',\r\n    AvailableActorIdentifiersPacket = 'AvailableActorIdentifiersPacket',\r\n    AvailableCommandsPacket = 'AvailableCommandsPacket',\r\n    AwardAchievementPacket = 'AwardAchievementPacket',\r\n    BiomeDefinitionListPacket = 'BiomeDefinitionListPacket',\r\n    BlockActorDataPacket = 'BlockActorDataPacket',\r\n    BlockEventPacket = 'BlockEventPacket',\r\n    BlockPickRequestPacket = 'BlockPickRequestPacket',\r\n    BookEditPacket = 'BookEditPacket',\r\n    BossEventPacket = 'BossEventPacket',\r\n    CameraAimAssistPacket = 'CameraAimAssistPacket',\r\n    CameraAimAssistPresetsPacket = 'CameraAimAssistPresetsPacket',\r\n    CameraInstructionPacket = 'CameraInstructionPacket',\r\n    CameraPacket = 'CameraPacket',\r\n    CameraPresetsPacket = 'CameraPresetsPacket',\r\n    CameraShakePacket = 'CameraShakePacket',\r\n    ChangeDimensionPacket = 'ChangeDimensionPacket',\r\n    ChangeMobPropertyPacket = 'ChangeMobPropertyPacket',\r\n    ChunkRadiusUpdatedPacket = 'ChunkRadiusUpdatedPacket',\r\n    ClientboundCloseFormPacket = 'ClientboundCloseFormPacket',\r\n    ClientboundControlSchemeSetPacket = 'ClientboundControlSchemeSetPacket',\r\n    ClientboundDebugRendererPacket = 'ClientboundDebugRendererPacket',\r\n    ClientboundMapItemDataPacket = 'ClientboundMapItemDataPacket',\r\n    ClientCacheBlobStatusPacket = 'ClientCacheBlobStatusPacket',\r\n    ClientCacheMissResponsePacket = 'ClientCacheMissResponsePacket',\r\n    ClientCacheStatusPacket = 'ClientCacheStatusPacket',\r\n    ClientCameraAimAssistPacket = 'ClientCameraAimAssistPacket',\r\n    ClientMovementPredictionSyncPacket = 'ClientMovementPredictionSyncPacket',\r\n    ClientToServerHandshakePacket = 'ClientToServerHandshakePacket',\r\n    CodeBuilderPacket = 'CodeBuilderPacket',\r\n    CodeBuilderSourcePacket = 'CodeBuilderSourcePacket',\r\n    CommandBlockUpdatePacket = 'CommandBlockUpdatePacket',\r\n    CommandOutputPacket = 'CommandOutputPacket',\r\n    CommandRequestPacket = 'CommandRequestPacket',\r\n    CompletedUsingItemPacket = 'CompletedUsingItemPacket',\r\n    ContainerClosePacket = 'ContainerClosePacket',\r\n    ContainerOpenPacket = 'ContainerOpenPacket',\r\n    ContainerRegistryCleanupPacket = 'ContainerRegistryCleanupPacket',\r\n    ContainerSetDataPacket = 'ContainerSetDataPacket',\r\n    CorrectPlayerMovePredictionPacket = 'CorrectPlayerMovePredictionPacket',\r\n    CraftingDataPacket = 'CraftingDataPacket',\r\n    CreatePhotoPacket = 'CreatePhotoPacket',\r\n    CreativeContentPacket = 'CreativeContentPacket',\r\n    CurrentStructureFeaturePacket = 'CurrentStructureFeaturePacket',\r\n    DeathInfoPacket = 'DeathInfoPacket',\r\n    DebugInfoPacket = 'DebugInfoPacket',\r\n    DimensionDataPacket = 'DimensionDataPacket',\r\n    DisconnectPacket = 'DisconnectPacket',\r\n    EditorNetworkPacket = 'EditorNetworkPacket',\r\n    EducationSettingsPacket = 'EducationSettingsPacket',\r\n    EduUriResourcePacket = 'EduUriResourcePacket',\r\n    EmoteListPacket = 'EmoteListPacket',\r\n    EmotePacket = 'EmotePacket',\r\n    FeatureRegistryPacket = 'FeatureRegistryPacket',\r\n    GameRulesChangedPacket = 'GameRulesChangedPacket',\r\n    GameTestRequestPacket = 'GameTestRequestPacket',\r\n    GameTestResultsPacket = 'GameTestResultsPacket',\r\n    GuiDataPickItemPacket = 'GuiDataPickItemPacket',\r\n    HurtArmorPacket = 'HurtArmorPacket',\r\n    InteractPacket = 'InteractPacket',\r\n    InventoryContentPacket = 'InventoryContentPacket',\r\n    InventorySlotPacket = 'InventorySlotPacket',\r\n    InventoryTransactionPacket = 'InventoryTransactionPacket',\r\n    ItemRegistryPacket = 'ItemRegistryPacket',\r\n    ItemStackRequestPacket = 'ItemStackRequestPacket',\r\n    ItemStackResponsePacket = 'ItemStackResponsePacket',\r\n    JigsawStructureDataPacket = 'JigsawStructureDataPacket',\r\n    LabTablePacket = 'LabTablePacket',\r\n    LecternUpdatePacket = 'LecternUpdatePacket',\r\n    LegacyTelemetryEventPacket = 'LegacyTelemetryEventPacket',\r\n    LessonProgressPacket = 'LessonProgressPacket',\r\n    LevelChunkPacket = 'LevelChunkPacket',\r\n    LevelEventGenericPacket = 'LevelEventGenericPacket',\r\n    LevelEventPacket = 'LevelEventPacket',\r\n    LevelSoundEventPacket = 'LevelSoundEventPacket',\r\n    LoginPacket = 'LoginPacket',\r\n    MapCreateLockedCopyPacket = 'MapCreateLockedCopyPacket',\r\n    MapInfoRequestPacket = 'MapInfoRequestPacket',\r\n    MobArmorEquipmentPacket = 'MobArmorEquipmentPacket',\r\n    MobEffectPacket = 'MobEffectPacket',\r\n    MobEquipmentPacket = 'MobEquipmentPacket',\r\n    ModalFormRequestPacket = 'ModalFormRequestPacket',\r\n    ModalFormResponsePacket = 'ModalFormResponsePacket',\r\n    MotionPredictionHintsPacket = 'MotionPredictionHintsPacket',\r\n    MoveActorAbsolutePacket = 'MoveActorAbsolutePacket',\r\n    MoveActorDeltaPacket = 'MoveActorDeltaPacket',\r\n    MovementEffectPacket = 'MovementEffectPacket',\r\n    MovePlayerPacket = 'MovePlayerPacket',\r\n    MultiplayerSettingsPacket = 'MultiplayerSettingsPacket',\r\n    NetworkChunkPublisherUpdatePacket = 'NetworkChunkPublisherUpdatePacket',\r\n    NetworkSettingsPacket = 'NetworkSettingsPacket',\r\n    NetworkStackLatencyPacket = 'NetworkStackLatencyPacket',\r\n    NpcDialoguePacket = 'NpcDialoguePacket',\r\n    NpcRequestPacket = 'NpcRequestPacket',\r\n    OnScreenTextureAnimationPacket = 'OnScreenTextureAnimationPacket',\r\n    OpenSignPacket = 'OpenSignPacket',\r\n    PacketViolationWarningPacket = 'PacketViolationWarningPacket',\r\n    PhotoTransferPacket = 'PhotoTransferPacket',\r\n    PlayerActionPacket = 'PlayerActionPacket',\r\n    PlayerArmorDamagePacket = 'PlayerArmorDamagePacket',\r\n    PlayerAuthInputPacket = 'PlayerAuthInputPacket',\r\n    PlayerEnchantOptionsPacket = 'PlayerEnchantOptionsPacket',\r\n    PlayerFogPacket = 'PlayerFogPacket',\r\n    PlayerHotbarPacket = 'PlayerHotbarPacket',\r\n    PlayerListPacket = 'PlayerListPacket',\r\n    PlayerLocationPacket = 'PlayerLocationPacket',\r\n    PlayerSkinPacket = 'PlayerSkinPacket',\r\n    PlayerStartItemCooldownPacket = 'PlayerStartItemCooldownPacket',\r\n    PlayerToggleCrafterSlotRequestPacket = 'PlayerToggleCrafterSlotRequestPacket',\r\n    PlayerUpdateEntityOverridesPacket = 'PlayerUpdateEntityOverridesPacket',\r\n    PlaySoundPacket = 'PlaySoundPacket',\r\n    PlayStatusPacket = 'PlayStatusPacket',\r\n    PositionTrackingDBClientRequestPacket = 'PositionTrackingDBClientRequestPacket',\r\n    PositionTrackingDBServerBroadcastPacket = 'PositionTrackingDBServerBroadcastPacket',\r\n    PurchaseReceiptPacket = 'PurchaseReceiptPacket',\r\n    RefreshEntitlementsPacket = 'RefreshEntitlementsPacket',\r\n    RemoveActorPacket = 'RemoveActorPacket',\r\n    RemoveObjectivePacket = 'RemoveObjectivePacket',\r\n    RemoveVolumeEntityPacket = 'RemoveVolumeEntityPacket',\r\n    RequestAbilityPacket = 'RequestAbilityPacket',\r\n    RequestChunkRadiusPacket = 'RequestChunkRadiusPacket',\r\n    RequestNetworkSettingsPacket = 'RequestNetworkSettingsPacket',\r\n    RequestPermissionsPacket = 'RequestPermissionsPacket',\r\n    ResourcePackChunkDataPacket = 'ResourcePackChunkDataPacket',\r\n    ResourcePackChunkRequestPacket = 'ResourcePackChunkRequestPacket',\r\n    ResourcePackClientResponsePacket = 'ResourcePackClientResponsePacket',\r\n    ResourcePackDataInfoPacket = 'ResourcePackDataInfoPacket',\r\n    ResourcePacksInfoPacket = 'ResourcePacksInfoPacket',\r\n    ResourcePackStackPacket = 'ResourcePackStackPacket',\r\n    RespawnPacket = 'RespawnPacket',\r\n    ScriptMessagePacket = 'ScriptMessagePacket',\r\n    ServerboundDiagnosticsPacket = 'ServerboundDiagnosticsPacket',\r\n    ServerboundLoadingScreenPacket = 'ServerboundLoadingScreenPacket',\r\n    ServerPlayerPostMovePositionPacket = 'ServerPlayerPostMovePositionPacket',\r\n    ServerSettingsRequestPacket = 'ServerSettingsRequestPacket',\r\n    ServerSettingsResponsePacket = 'ServerSettingsResponsePacket',\r\n    ServerStatsPacket = 'ServerStatsPacket',\r\n    ServerToClientHandshakePacket = 'ServerToClientHandshakePacket',\r\n    SetActorDataPacket = 'SetActorDataPacket',\r\n    SetActorLinkPacket = 'SetActorLinkPacket',\r\n    SetActorMotionPacket = 'SetActorMotionPacket',\r\n    SetCommandsEnabledPacket = 'SetCommandsEnabledPacket',\r\n    SetDefaultGameTypePacket = 'SetDefaultGameTypePacket',\r\n    SetDifficultyPacket = 'SetDifficultyPacket',\r\n    SetDisplayObjectivePacket = 'SetDisplayObjectivePacket',\r\n    SetHealthPacket = 'SetHealthPacket',\r\n    SetHudPacket = 'SetHudPacket',\r\n    SetLastHurtByPacket = 'SetLastHurtByPacket',\r\n    SetLocalPlayerAsInitializedPacket = 'SetLocalPlayerAsInitializedPacket',\r\n    SetMovementAuthorityPacket = 'SetMovementAuthorityPacket',\r\n    SetPlayerGameTypePacket = 'SetPlayerGameTypePacket',\r\n    SetPlayerInventoryOptionsPacket = 'SetPlayerInventoryOptionsPacket',\r\n    SetScoreboardIdentityPacket = 'SetScoreboardIdentityPacket',\r\n    SetScorePacket = 'SetScorePacket',\r\n    SetSpawnPositionPacket = 'SetSpawnPositionPacket',\r\n    SetTimePacket = 'SetTimePacket',\r\n    SettingsCommandPacket = 'SettingsCommandPacket',\r\n    SetTitlePacket = 'SetTitlePacket',\r\n    ShowCreditsPacket = 'ShowCreditsPacket',\r\n    ShowProfilePacket = 'ShowProfilePacket',\r\n    ShowStoreOfferPacket = 'ShowStoreOfferPacket',\r\n    SimpleEventPacket = 'SimpleEventPacket',\r\n    SimulationTypePacket = 'SimulationTypePacket',\r\n    SpawnExperienceOrbPacket = 'SpawnExperienceOrbPacket',\r\n    SpawnParticleEffectPacket = 'SpawnParticleEffectPacket',\r\n    StartGamePacket = 'StartGamePacket',\r\n    StopSoundPacket = 'StopSoundPacket',\r\n    StructureBlockUpdatePacket = 'StructureBlockUpdatePacket',\r\n    StructureTemplateDataRequestPacket = 'StructureTemplateDataRequestPacket',\r\n    StructureTemplateDataResponsePacket = 'StructureTemplateDataResponsePacket',\r\n    SubChunkPacket = 'SubChunkPacket',\r\n    SubChunkRequestPacket = 'SubChunkRequestPacket',\r\n    SubClientLoginPacket = 'SubClientLoginPacket',\r\n    SyncActorPropertyPacket = 'SyncActorPropertyPacket',\r\n    TakeItemActorPacket = 'TakeItemActorPacket',\r\n    TextPacket = 'TextPacket',\r\n    TickingAreasLoadStatusPacket = 'TickingAreasLoadStatusPacket',\r\n    ToastRequestPacket = 'ToastRequestPacket',\r\n    TransferPacket = 'TransferPacket',\r\n    TrimDataPacket = 'TrimDataPacket',\r\n    UnlockedRecipesPacket = 'UnlockedRecipesPacket',\r\n    UpdateAbilitiesPacket = 'UpdateAbilitiesPacket',\r\n    UpdateAdventureSettingsPacket = 'UpdateAdventureSettingsPacket',\r\n    UpdateAttributesPacket = 'UpdateAttributesPacket',\r\n    UpdateBlockPacket = 'UpdateBlockPacket',\r\n    UpdateBlockSyncedPacket = 'UpdateBlockSyncedPacket',\r\n    UpdateClientInputLocksPacket = 'UpdateClientInputLocksPacket',\r\n    UpdateClientOptions = 'UpdateClientOptions',\r\n    UpdateEquipPacket = 'UpdateEquipPacket',\r\n    UpdatePlayerGameTypePacket = 'UpdatePlayerGameTypePacket',\r\n    UpdateSoftEnumPacket = 'UpdateSoftEnumPacket',\r\n    UpdateSubChunkBlocksPacket = 'UpdateSubChunkBlocksPacket',\r\n    UpdateTradePacket = 'UpdateTradePacket',\r\n}\r",
          "jsdoc": "/**\r\n * Represents the unique type of network packet.\r\n */\r",
          "enumValues": [
            {
              "name": "ActorEventPacket",
              "value": "ActorEventPacket"
            },
            {
              "name": "ActorPickRequestPacket",
              "value": "ActorPickRequestPacket"
            },
            {
              "name": "AddActorPacket",
              "value": "AddActorPacket"
            },
            {
              "name": "AddBehaviorTreePacket",
              "value": "AddBehaviorTreePacket"
            },
            {
              "name": "AddItemActorPacket",
              "value": "AddItemActorPacket"
            },
            {
              "name": "AddPaintingPacket",
              "value": "AddPaintingPacket"
            },
            {
              "name": "AddPlayerPacket",
              "value": "AddPlayerPacket"
            },
            {
              "name": "AddVolumeEntityPacket",
              "value": "AddVolumeEntityPacket"
            },
            {
              "name": "AgentActionEventPacket",
              "value": "AgentActionEventPacket"
            },
            {
              "name": "AgentAnimationPacket",
              "value": "AgentAnimationPacket"
            },
            {
              "name": "AnimateEntityPacket",
              "value": "AnimateEntityPacket"
            },
            {
              "name": "AnimatePacket",
              "value": "AnimatePacket"
            },
            {
              "name": "AnvilDamagePacket",
              "value": "AnvilDamagePacket"
            },
            {
              "name": "AutomationClientConnectPacket",
              "value": "AutomationClientConnectPacket"
            },
            {
              "name": "AvailableActorIdentifiersPacket",
              "value": "AvailableActorIdentifiersPacket"
            },
            {
              "name": "AvailableCommandsPacket",
              "value": "AvailableCommandsPacket"
            },
            {
              "name": "AwardAchievementPacket",
              "value": "AwardAchievementPacket"
            },
            {
              "name": "BiomeDefinitionListPacket",
              "value": "BiomeDefinitionListPacket"
            },
            {
              "name": "BlockActorDataPacket",
              "value": "BlockActorDataPacket"
            },
            {
              "name": "BlockEventPacket",
              "value": "BlockEventPacket"
            },
            {
              "name": "BlockPickRequestPacket",
              "value": "BlockPickRequestPacket"
            },
            {
              "name": "BookEditPacket",
              "value": "BookEditPacket"
            },
            {
              "name": "BossEventPacket",
              "value": "BossEventPacket"
            },
            {
              "name": "CameraAimAssistPacket",
              "value": "CameraAimAssistPacket"
            },
            {
              "name": "CameraAimAssistPresetsPacket",
              "value": "CameraAimAssistPresetsPacket"
            },
            {
              "name": "CameraInstructionPacket",
              "value": "CameraInstructionPacket"
            },
            {
              "name": "CameraPacket",
              "value": "CameraPacket"
            },
            {
              "name": "CameraPresetsPacket",
              "value": "CameraPresetsPacket"
            },
            {
              "name": "CameraShakePacket",
              "value": "CameraShakePacket"
            },
            {
              "name": "ChangeDimensionPacket",
              "value": "ChangeDimensionPacket"
            },
            {
              "name": "ChangeMobPropertyPacket",
              "value": "ChangeMobPropertyPacket"
            },
            {
              "name": "ChunkRadiusUpdatedPacket",
              "value": "ChunkRadiusUpdatedPacket"
            },
            {
              "name": "ClientboundCloseFormPacket",
              "value": "ClientboundCloseFormPacket"
            },
            {
              "name": "ClientboundControlSchemeSetPacket",
              "value": "ClientboundControlSchemeSetPacket"
            },
            {
              "name": "ClientboundDebugRendererPacket",
              "value": "ClientboundDebugRendererPacket"
            },
            {
              "name": "ClientboundMapItemDataPacket",
              "value": "ClientboundMapItemDataPacket"
            },
            {
              "name": "ClientCacheBlobStatusPacket",
              "value": "ClientCacheBlobStatusPacket"
            },
            {
              "name": "ClientCacheMissResponsePacket",
              "value": "ClientCacheMissResponsePacket"
            },
            {
              "name": "ClientCacheStatusPacket",
              "value": "ClientCacheStatusPacket"
            },
            {
              "name": "ClientCameraAimAssistPacket",
              "value": "ClientCameraAimAssistPacket"
            },
            {
              "name": "ClientMovementPredictionSyncPacket",
              "value": "ClientMovementPredictionSyncPacket"
            },
            {
              "name": "ClientToServerHandshakePacket",
              "value": "ClientToServerHandshakePacket"
            },
            {
              "name": "CodeBuilderPacket",
              "value": "CodeBuilderPacket"
            },
            {
              "name": "CodeBuilderSourcePacket",
              "value": "CodeBuilderSourcePacket"
            },
            {
              "name": "CommandBlockUpdatePacket",
              "value": "CommandBlockUpdatePacket"
            },
            {
              "name": "CommandOutputPacket",
              "value": "CommandOutputPacket"
            },
            {
              "name": "CommandRequestPacket",
              "value": "CommandRequestPacket"
            },
            {
              "name": "CompletedUsingItemPacket",
              "value": "CompletedUsingItemPacket"
            },
            {
              "name": "ContainerClosePacket",
              "value": "ContainerClosePacket"
            },
            {
              "name": "ContainerOpenPacket",
              "value": "ContainerOpenPacket"
            },
            {
              "name": "ContainerRegistryCleanupPacket",
              "value": "ContainerRegistryCleanupPacket"
            },
            {
              "name": "ContainerSetDataPacket",
              "value": "ContainerSetDataPacket"
            },
            {
              "name": "CorrectPlayerMovePredictionPacket",
              "value": "CorrectPlayerMovePredictionPacket"
            },
            {
              "name": "CraftingDataPacket",
              "value": "CraftingDataPacket"
            },
            {
              "name": "CreatePhotoPacket",
              "value": "CreatePhotoPacket"
            },
            {
              "name": "CreativeContentPacket",
              "value": "CreativeContentPacket"
            },
            {
              "name": "CurrentStructureFeaturePacket",
              "value": "CurrentStructureFeaturePacket"
            },
            {
              "name": "DeathInfoPacket",
              "value": "DeathInfoPacket"
            },
            {
              "name": "DebugInfoPacket",
              "value": "DebugInfoPacket"
            },
            {
              "name": "DimensionDataPacket",
              "value": "DimensionDataPacket"
            },
            {
              "name": "DisconnectPacket",
              "value": "DisconnectPacket"
            },
            {
              "name": "EditorNetworkPacket",
              "value": "EditorNetworkPacket"
            },
            {
              "name": "EducationSettingsPacket",
              "value": "EducationSettingsPacket"
            },
            {
              "name": "EduUriResourcePacket",
              "value": "EduUriResourcePacket"
            },
            {
              "name": "EmoteListPacket",
              "value": "EmoteListPacket"
            },
            {
              "name": "EmotePacket",
              "value": "EmotePacket"
            },
            {
              "name": "FeatureRegistryPacket",
              "value": "FeatureRegistryPacket"
            },
            {
              "name": "GameRulesChangedPacket",
              "value": "GameRulesChangedPacket"
            },
            {
              "name": "GameTestRequestPacket",
              "value": "GameTestRequestPacket"
            },
            {
              "name": "GameTestResultsPacket",
              "value": "GameTestResultsPacket"
            },
            {
              "name": "GuiDataPickItemPacket",
              "value": "GuiDataPickItemPacket"
            },
            {
              "name": "HurtArmorPacket",
              "value": "HurtArmorPacket"
            },
            {
              "name": "InteractPacket",
              "value": "InteractPacket"
            },
            {
              "name": "InventoryContentPacket",
              "value": "InventoryContentPacket"
            },
            {
              "name": "InventorySlotPacket",
              "value": "InventorySlotPacket"
            },
            {
              "name": "InventoryTransactionPacket",
              "value": "InventoryTransactionPacket"
            },
            {
              "name": "ItemRegistryPacket",
              "value": "ItemRegistryPacket"
            },
            {
              "name": "ItemStackRequestPacket",
              "value": "ItemStackRequestPacket"
            },
            {
              "name": "ItemStackResponsePacket",
              "value": "ItemStackResponsePacket"
            },
            {
              "name": "JigsawStructureDataPacket",
              "value": "JigsawStructureDataPacket"
            },
            {
              "name": "LabTablePacket",
              "value": "LabTablePacket"
            },
            {
              "name": "LecternUpdatePacket",
              "value": "LecternUpdatePacket"
            },
            {
              "name": "LegacyTelemetryEventPacket",
              "value": "LegacyTelemetryEventPacket"
            },
            {
              "name": "LessonProgressPacket",
              "value": "LessonProgressPacket"
            },
            {
              "name": "LevelChunkPacket",
              "value": "LevelChunkPacket"
            },
            {
              "name": "LevelEventGenericPacket",
              "value": "LevelEventGenericPacket"
            },
            {
              "name": "LevelEventPacket",
              "value": "LevelEventPacket"
            },
            {
              "name": "LevelSoundEventPacket",
              "value": "LevelSoundEventPacket"
            },
            {
              "name": "LoginPacket",
              "value": "LoginPacket"
            },
            {
              "name": "MapCreateLockedCopyPacket",
              "value": "MapCreateLockedCopyPacket"
            },
            {
              "name": "MapInfoRequestPacket",
              "value": "MapInfoRequestPacket"
            },
            {
              "name": "MobArmorEquipmentPacket",
              "value": "MobArmorEquipmentPacket"
            },
            {
              "name": "MobEffectPacket",
              "value": "MobEffectPacket"
            },
            {
              "name": "MobEquipmentPacket",
              "value": "MobEquipmentPacket"
            },
            {
              "name": "ModalFormRequestPacket",
              "value": "ModalFormRequestPacket"
            },
            {
              "name": "ModalFormResponsePacket",
              "value": "ModalFormResponsePacket"
            },
            {
              "name": "MotionPredictionHintsPacket",
              "value": "MotionPredictionHintsPacket"
            },
            {
              "name": "MoveActorAbsolutePacket",
              "value": "MoveActorAbsolutePacket"
            },
            {
              "name": "MoveActorDeltaPacket",
              "value": "MoveActorDeltaPacket"
            },
            {
              "name": "MovementEffectPacket",
              "value": "MovementEffectPacket"
            },
            {
              "name": "MovePlayerPacket",
              "value": "MovePlayerPacket"
            },
            {
              "name": "MultiplayerSettingsPacket",
              "value": "MultiplayerSettingsPacket"
            },
            {
              "name": "NetworkChunkPublisherUpdatePacket",
              "value": "NetworkChunkPublisherUpdatePacket"
            },
            {
              "name": "NetworkSettingsPacket",
              "value": "NetworkSettingsPacket"
            },
            {
              "name": "NetworkStackLatencyPacket",
              "value": "NetworkStackLatencyPacket"
            },
            {
              "name": "NpcDialoguePacket",
              "value": "NpcDialoguePacket"
            },
            {
              "name": "NpcRequestPacket",
              "value": "NpcRequestPacket"
            },
            {
              "name": "OnScreenTextureAnimationPacket",
              "value": "OnScreenTextureAnimationPacket"
            },
            {
              "name": "OpenSignPacket",
              "value": "OpenSignPacket"
            },
            {
              "name": "PacketViolationWarningPacket",
              "value": "PacketViolationWarningPacket"
            },
            {
              "name": "PhotoTransferPacket",
              "value": "PhotoTransferPacket"
            },
            {
              "name": "PlayerActionPacket",
              "value": "PlayerActionPacket"
            },
            {
              "name": "PlayerArmorDamagePacket",
              "value": "PlayerArmorDamagePacket"
            },
            {
              "name": "PlayerAuthInputPacket",
              "value": "PlayerAuthInputPacket"
            },
            {
              "name": "PlayerEnchantOptionsPacket",
              "value": "PlayerEnchantOptionsPacket"
            },
            {
              "name": "PlayerFogPacket",
              "value": "PlayerFogPacket"
            },
            {
              "name": "PlayerHotbarPacket",
              "value": "PlayerHotbarPacket"
            },
            {
              "name": "PlayerListPacket",
              "value": "PlayerListPacket"
            },
            {
              "name": "PlayerLocationPacket",
              "value": "PlayerLocationPacket"
            },
            {
              "name": "PlayerSkinPacket",
              "value": "PlayerSkinPacket"
            },
            {
              "name": "PlayerStartItemCooldownPacket",
              "value": "PlayerStartItemCooldownPacket"
            },
            {
              "name": "PlayerToggleCrafterSlotRequestPacket",
              "value": "PlayerToggleCrafterSlotRequestPacket"
            },
            {
              "name": "PlayerUpdateEntityOverridesPacket",
              "value": "PlayerUpdateEntityOverridesPacket"
            },
            {
              "name": "PlaySoundPacket",
              "value": "PlaySoundPacket"
            },
            {
              "name": "PlayStatusPacket",
              "value": "PlayStatusPacket"
            },
            {
              "name": "PositionTrackingDBClientRequestPacket",
              "value": "PositionTrackingDBClientRequestPacket"
            },
            {
              "name": "PositionTrackingDBServerBroadcastPacket",
              "value": "PositionTrackingDBServerBroadcastPacket"
            },
            {
              "name": "PurchaseReceiptPacket",
              "value": "PurchaseReceiptPacket"
            },
            {
              "name": "RefreshEntitlementsPacket",
              "value": "RefreshEntitlementsPacket"
            },
            {
              "name": "RemoveActorPacket",
              "value": "RemoveActorPacket"
            },
            {
              "name": "RemoveObjectivePacket",
              "value": "RemoveObjectivePacket"
            },
            {
              "name": "RemoveVolumeEntityPacket",
              "value": "RemoveVolumeEntityPacket"
            },
            {
              "name": "RequestAbilityPacket",
              "value": "RequestAbilityPacket"
            },
            {
              "name": "RequestChunkRadiusPacket",
              "value": "RequestChunkRadiusPacket"
            },
            {
              "name": "RequestNetworkSettingsPacket",
              "value": "RequestNetworkSettingsPacket"
            },
            {
              "name": "RequestPermissionsPacket",
              "value": "RequestPermissionsPacket"
            },
            {
              "name": "ResourcePackChunkDataPacket",
              "value": "ResourcePackChunkDataPacket"
            },
            {
              "name": "ResourcePackChunkRequestPacket",
              "value": "ResourcePackChunkRequestPacket"
            },
            {
              "name": "ResourcePackClientResponsePacket",
              "value": "ResourcePackClientResponsePacket"
            },
            {
              "name": "ResourcePackDataInfoPacket",
              "value": "ResourcePackDataInfoPacket"
            },
            {
              "name": "ResourcePacksInfoPacket",
              "value": "ResourcePacksInfoPacket"
            },
            {
              "name": "ResourcePackStackPacket",
              "value": "ResourcePackStackPacket"
            },
            {
              "name": "RespawnPacket",
              "value": "RespawnPacket"
            },
            {
              "name": "ScriptMessagePacket",
              "value": "ScriptMessagePacket"
            },
            {
              "name": "ServerboundDiagnosticsPacket",
              "value": "ServerboundDiagnosticsPacket"
            },
            {
              "name": "ServerboundLoadingScreenPacket",
              "value": "ServerboundLoadingScreenPacket"
            },
            {
              "name": "ServerPlayerPostMovePositionPacket",
              "value": "ServerPlayerPostMovePositionPacket"
            },
            {
              "name": "ServerSettingsRequestPacket",
              "value": "ServerSettingsRequestPacket"
            },
            {
              "name": "ServerSettingsResponsePacket",
              "value": "ServerSettingsResponsePacket"
            },
            {
              "name": "ServerStatsPacket",
              "value": "ServerStatsPacket"
            },
            {
              "name": "ServerToClientHandshakePacket",
              "value": "ServerToClientHandshakePacket"
            },
            {
              "name": "SetActorDataPacket",
              "value": "SetActorDataPacket"
            },
            {
              "name": "SetActorLinkPacket",
              "value": "SetActorLinkPacket"
            },
            {
              "name": "SetActorMotionPacket",
              "value": "SetActorMotionPacket"
            },
            {
              "name": "SetCommandsEnabledPacket",
              "value": "SetCommandsEnabledPacket"
            },
            {
              "name": "SetDefaultGameTypePacket",
              "value": "SetDefaultGameTypePacket"
            },
            {
              "name": "SetDifficultyPacket",
              "value": "SetDifficultyPacket"
            },
            {
              "name": "SetDisplayObjectivePacket",
              "value": "SetDisplayObjectivePacket"
            },
            {
              "name": "SetHealthPacket",
              "value": "SetHealthPacket"
            },
            {
              "name": "SetHudPacket",
              "value": "SetHudPacket"
            },
            {
              "name": "SetLastHurtByPacket",
              "value": "SetLastHurtByPacket"
            },
            {
              "name": "SetLocalPlayerAsInitializedPacket",
              "value": "SetLocalPlayerAsInitializedPacket"
            },
            {
              "name": "SetMovementAuthorityPacket",
              "value": "SetMovementAuthorityPacket"
            },
            {
              "name": "SetPlayerGameTypePacket",
              "value": "SetPlayerGameTypePacket"
            },
            {
              "name": "SetPlayerInventoryOptionsPacket",
              "value": "SetPlayerInventoryOptionsPacket"
            },
            {
              "name": "SetScoreboardIdentityPacket",
              "value": "SetScoreboardIdentityPacket"
            },
            {
              "name": "SetScorePacket",
              "value": "SetScorePacket"
            },
            {
              "name": "SetSpawnPositionPacket",
              "value": "SetSpawnPositionPacket"
            },
            {
              "name": "SetTimePacket",
              "value": "SetTimePacket"
            },
            {
              "name": "SettingsCommandPacket",
              "value": "SettingsCommandPacket"
            },
            {
              "name": "SetTitlePacket",
              "value": "SetTitlePacket"
            },
            {
              "name": "ShowCreditsPacket",
              "value": "ShowCreditsPacket"
            },
            {
              "name": "ShowProfilePacket",
              "value": "ShowProfilePacket"
            },
            {
              "name": "ShowStoreOfferPacket",
              "value": "ShowStoreOfferPacket"
            },
            {
              "name": "SimpleEventPacket",
              "value": "SimpleEventPacket"
            },
            {
              "name": "SimulationTypePacket",
              "value": "SimulationTypePacket"
            },
            {
              "name": "SpawnExperienceOrbPacket",
              "value": "SpawnExperienceOrbPacket"
            },
            {
              "name": "SpawnParticleEffectPacket",
              "value": "SpawnParticleEffectPacket"
            },
            {
              "name": "StartGamePacket",
              "value": "StartGamePacket"
            },
            {
              "name": "StopSoundPacket",
              "value": "StopSoundPacket"
            },
            {
              "name": "StructureBlockUpdatePacket",
              "value": "StructureBlockUpdatePacket"
            },
            {
              "name": "StructureTemplateDataRequestPacket",
              "value": "StructureTemplateDataRequestPacket"
            },
            {
              "name": "StructureTemplateDataResponsePacket",
              "value": "StructureTemplateDataResponsePacket"
            },
            {
              "name": "SubChunkPacket",
              "value": "SubChunkPacket"
            },
            {
              "name": "SubChunkRequestPacket",
              "value": "SubChunkRequestPacket"
            },
            {
              "name": "SubClientLoginPacket",
              "value": "SubClientLoginPacket"
            },
            {
              "name": "SyncActorPropertyPacket",
              "value": "SyncActorPropertyPacket"
            },
            {
              "name": "TakeItemActorPacket",
              "value": "TakeItemActorPacket"
            },
            {
              "name": "TextPacket",
              "value": "TextPacket"
            },
            {
              "name": "TickingAreasLoadStatusPacket",
              "value": "TickingAreasLoadStatusPacket"
            },
            {
              "name": "ToastRequestPacket",
              "value": "ToastRequestPacket"
            },
            {
              "name": "TransferPacket",
              "value": "TransferPacket"
            },
            {
              "name": "TrimDataPacket",
              "value": "TrimDataPacket"
            },
            {
              "name": "UnlockedRecipesPacket",
              "value": "UnlockedRecipesPacket"
            },
            {
              "name": "UpdateAbilitiesPacket",
              "value": "UpdateAbilitiesPacket"
            },
            {
              "name": "UpdateAdventureSettingsPacket",
              "value": "UpdateAdventureSettingsPacket"
            },
            {
              "name": "UpdateAttributesPacket",
              "value": "UpdateAttributesPacket"
            },
            {
              "name": "UpdateBlockPacket",
              "value": "UpdateBlockPacket"
            },
            {
              "name": "UpdateBlockSyncedPacket",
              "value": "UpdateBlockSyncedPacket"
            },
            {
              "name": "UpdateClientInputLocksPacket",
              "value": "UpdateClientInputLocksPacket"
            },
            {
              "name": "UpdateClientOptions",
              "value": "UpdateClientOptions"
            },
            {
              "name": "UpdateEquipPacket",
              "value": "UpdateEquipPacket"
            },
            {
              "name": "UpdatePlayerGameTypePacket",
              "value": "UpdatePlayerGameTypePacket"
            },
            {
              "name": "UpdateSoftEnumPacket",
              "value": "UpdateSoftEnumPacket"
            },
            {
              "name": "UpdateSubChunkBlocksPacket",
              "value": "UpdateSubChunkBlocksPacket"
            },
            {
              "name": "UpdateTradePacket",
              "value": "UpdateTradePacket"
            }
          ],
          "categories": [
            "Enums",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "packetid",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.HttpClient",
          "name": "HttpClient",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
          "definition": "export class HttpClient {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Cancels all pending requests.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    cancelAll(reason: string): void;\r\n    /**\r\n     * @remarks\r\n     * Performs a simple HTTP get request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param uri\r\n     * URL to make an HTTP Request to.\r\n     * @returns\r\n     * An awaitable promise that contains the HTTP response.\r\n     */\r\n    get(uri: string): Promise<HttpResponse>;\r\n    /**\r\n     * @remarks\r\n     * Performs an HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param config\r\n     * Contains an HTTP Request object with configuration data on\r\n     * the HTTP request.\r\n     * @returns\r\n     * An awaitable promise that contains the HTTP response.\r\n     * @example simpleHttpRequest.ts\r\n     * ```typescript\r\n     * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n     *\r\n     * async function updateScore() {\r\n     *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n     *\r\n     *     req.body = JSON.stringify({\r\n     *         score: 22,\r\n     *     });\r\n     *\r\n     *     req.method = HttpRequestMethod.Post;\r\n     *     req.headers = [\r\n     *         new HttpHeader('Content-Type', 'application/json'),\r\n     *         new HttpHeader('auth', 'my-auth-token'),\r\n     *     ];\r\n     *\r\n     *     await http.request(req);\r\n     * }\r\n     * ```\r\n     */\r\n    request(config: HttpRequest): Promise<HttpResponse>;\r\n}\r",
          "jsdoc": "/**\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "cancelAll",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "cancelAll(reason: string): void"
            },
            {
              "name": "get",
              "parameters": [],
              "returnType": "Promise<HttpResponse>",
              "accessibility": "public",
              "signature": "get(uri: string): Promise<HttpResponse>"
            },
            {
              "name": "request",
              "parameters": [],
              "returnType": "Promise<HttpResponse>",
              "accessibility": "public",
              "signature": "request(config: HttpRequest): Promise<HttpResponse>"
            }
          ],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "httpclient",
            "class"
          ],
          "examples": [
            {
              "title": "simpleHttpRequest.ts",
              "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.HttpHeader",
          "name": "HttpHeader",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "Represents an HTTP header - a key/value pair of\r meta-information about a request.\r ```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
          "definition": "export class HttpHeader {\n    /**\r\n     * @remarks\r\n     * Key of the HTTP header.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    key: string;\r\n    /**\r\n     * @remarks\r\n     * Value of the HTTP header.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    value: minecraftserveradmin.SecretString | string;\r\n    constructor(key: string, value: minecraftserveradmin.SecretString | string);\r\n}\r",
          "jsdoc": "/**\r\n * Represents an HTTP header - a key/value pair of\r\n * meta-information about a request.\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "httpheader",
            "class"
          ],
          "examples": [
            {
              "title": "simpleHttpRequest.ts",
              "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.HttpRequest",
          "name": "HttpRequest",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "Main object for structuring a request.\r ```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
          "definition": "export class HttpRequest {\n    /**\r\n     * @remarks\r\n     * Content of the body of the HTTP request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    body: string;\r\n    /**\r\n     * @remarks\r\n     * A collection of HTTP headers to add to the outbound request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    headers: HttpHeader[];\r\n    /**\r\n     * @remarks\r\n     * HTTP method (e.g., GET or PUT or PATCH) to use for making\r\n     * the request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    method: HttpRequestMethod;\r\n    /**\r\n     * @remarks\r\n     * Amount of time, in seconds, before the request times out and\r\n     * is abandoned.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    timeout: number;\r\n    /**\r\n     * @remarks\r\n     * The HTTP resource to access.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    uri: string;\r\n    constructor(uri: string);\r\n    /**\r\n     * @remarks\r\n     * Adds an additional header to the overall list of headers\r\n     * used in the corresponding HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    addHeader(key: string, value: minecraftserveradmin.SecretString | string): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Updates the content of the body of the HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setBody(body: string): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Replaces and applies a set of HTTP Headers for the request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setHeaders(headers: HttpHeader[]): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Sets the desired HTTP method (e.g., GET or PUT or PATCH) to\r\n     * use for making the request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setMethod(method: HttpRequestMethod): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setTimeout(timeout: number): HttpRequest;\r\n}\r",
          "jsdoc": "/**\r\n * Main object for structuring a request.\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "addHeader",
              "parameters": [],
              "returnType": "HttpRequest",
              "accessibility": "public",
              "signature": "addHeader(key: string, value: minecraftserveradmin.SecretString | string): HttpRequest"
            },
            {
              "name": "setBody",
              "parameters": [],
              "returnType": "HttpRequest",
              "accessibility": "public",
              "signature": "setBody(body: string): HttpRequest"
            },
            {
              "name": "setHeaders",
              "parameters": [],
              "returnType": "HttpRequest",
              "accessibility": "public",
              "signature": "setHeaders(headers: HttpHeader[]): HttpRequest"
            },
            {
              "name": "setMethod",
              "parameters": [],
              "returnType": "HttpRequest",
              "accessibility": "public",
              "signature": "setMethod(method: HttpRequestMethod): HttpRequest"
            },
            {
              "name": "setTimeout",
              "parameters": [],
              "returnType": "HttpRequest",
              "accessibility": "public",
              "signature": "setTimeout(timeout: number): HttpRequest"
            }
          ],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "httprequest",
            "class"
          ],
          "examples": [
            {
              "title": "simpleHttpRequest.ts",
              "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.HttpResponse",
          "name": "HttpResponse",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "Main object that contains result information from a request.\r /",
          "definition": "export class HttpResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Body content of the HTTP response.\r\n     *\r\n     */\r\n    readonly body: string;\r\n    /**\r\n     * @remarks\r\n     * A collection of HTTP response headers returned from the\r\n     * request.\r\n     *\r\n     */\r\n    readonly headers: HttpHeader[];\r\n    /**\r\n     * @remarks\r\n     * Information that was used to formulate the HTTP response\r\n     * that this object represents.\r\n     *\r\n     */\r\n    readonly request: HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * HTTP response code for the request. For example, 404\r\n     * represents resource not found, and 500 represents an\r\n     * internal server error.\r\n     *\r\n     */\r\n    readonly status: number;\r\n}\r",
          "jsdoc": "/**\r\n * Main object that contains result information from a request.\r\n */\r",
          "properties": [
            {
              "name": "body",
              "type": "string",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "headers",
              "type": "HttpHeader[]",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "request",
              "type": "HttpRequest",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "status",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "httpresponse",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.NetworkBeforeEvents",
          "name": "NetworkBeforeEvents",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "HTTP response code for the request. For example, 404\r represents resource not found, and 500 represents an\r internal server error.",
          "definition": "export class NetworkBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly packetReceive: PacketReceiveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly packetSend: PacketSendBeforeEventSignal;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * HTTP response code for the request. For example, 404\r\n     * represents resource not found, and 500 represents an\r\n     * internal server error.\r\n     *\r\n     */\r",
          "properties": [
            {
              "name": "packetReceive",
              "type": "PacketReceiveBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "packetSend",
              "type": "PacketSendBeforeEventSignal",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "networkbeforeevents",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.PacketReceiveBeforeEventSignal",
          "name": "PacketReceiveBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "This property can be read in early-execution mode.",
          "definition": "export class PacketReceiveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PacketReceivedBeforeEvent) => void,\r\n        options?: PacketEventOptions,\r\n    ): (arg0: PacketReceivedBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PacketReceivedBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "packetreceivebeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.PacketReceivedBeforeEvent",
          "name": "PacketReceivedBeforeEvent",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "Sent as the server receives a network packet from a client.\r If cancelled, the server will not parse the network packet\r and will silently ignore it.\r /",
          "definition": "export class PacketReceivedBeforeEvent {\n    private constructor();\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The type of network packet.\r\n     *\r\n     */\r\n    readonly packetId: PacketId;\r\n    /**\r\n     * @remarks\r\n     * The size of the network packet in bytes.\r\n     *\r\n     */\r\n    readonly packetSize: number;\r\n    /**\r\n     * @remarks\r\n     * Which client sent the network packet to the game server.\r\n     *\r\n     */\r\n    readonly sender?: minecraftserver.Player;\r\n}\r",
          "jsdoc": "/**\r\n * Sent as the server receives a network packet from a client.\r\n * If cancelled, the server will not parse the network packet\r\n * and will silently ignore it.\r\n */\r",
          "properties": [
            {
              "name": "packetId",
              "type": "PacketId",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "packetSize",
              "type": "number",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "packetreceivedbeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.PacketSendBeforeEvent",
          "name": "PacketSendBeforeEvent",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "Sent as the server sends a network packet to clients.  If\r cancelled, the server will not send the network packet to\r the receiving clients.\r /",
          "definition": "export class PacketSendBeforeEvent {\n    private constructor();\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The type of network packet.\r\n     *\r\n     */\r\n    readonly packetId: PacketId;\r\n    /**\r\n     * @remarks\r\n     * Which clients the network packet is being sent to.\r\n     *\r\n     */\r\n    readonly recipients: (minecraftserver.Player | undefined)[];\r\n}\r",
          "jsdoc": "/**\r\n * Sent as the server sends a network packet to clients.  If\r\n * cancelled, the server will not send the network packet to\r\n * the receiving clients.\r\n */\r",
          "properties": [
            {
              "name": "packetId",
              "type": "PacketId",
              "readonly": true,
              "accessibility": "public"
            },
            {
              "name": "recipients",
              "type": "(minecraftserver.Player | undefined)[]",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "packetsendbeforeevent",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.PacketSendBeforeEventSignal",
          "name": "PacketSendBeforeEventSignal",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "Which clients the network packet is being sent to.",
          "definition": "export class PacketSendBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PacketSendBeforeEvent) => void,\r\n        options?: PacketEventOptions,\r\n    ): (arg0: PacketSendBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PacketSendBeforeEvent) => void): void;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * Which clients the network packet is being sent to.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "packetsendbeforeeventsignal",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.PacketEventOptions",
          "name": "PacketEventOptions",
          "type": "interface",
          "module": "@minecraft/server-net",
          "description": "Options for events triggered by network packets.\r /",
          "definition": "export interface PacketEventOptions {\n    /**\r\n     * @remarks\r\n     * If provided, packet IDs in this list will not trigger the\r\n     * event subscriptions.\r\n     *\r\n     */\r\n    ignoredPacketIds?: PacketId[];\r\n    /**\r\n     * @remarks\r\n     * If provided only packet IDs in this list will trigger the\r\n     * event subscriptions.\r\n     *\r\n     */\r\n    monitoredPacketIds?: PacketId[];\r\n}\r",
          "jsdoc": "/**\r\n * Options for events triggered by network packets.\r\n */\r",
          "properties": [
            {
              "name": "ignoredPacketIds",
              "type": "PacketId[]",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "monitoredPacketIds",
              "type": "PacketId[]",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "packeteventoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.InternalHttpRequestError",
          "name": "InternalHttpRequestError",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "An error thrown when a platform-level HTTP error occurs.\r Information provided in this class may be useful for\r diagnostics purposes but will differ from platform to\r platform.\r /",
          "definition": "export class InternalHttpRequestError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The platform-provided numeric error code for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    code: number;\r\n    /**\r\n     * @remarks\r\n     * The platform-provided message for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    message: string;\r\n}\r",
          "jsdoc": "/**\r\n * An error thrown when a platform-level HTTP error occurs.\r\n * Information provided in this class may be useful for\r\n * diagnostics purposes but will differ from platform to\r\n * platform.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "internalhttprequesterror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-net.MalformedHttpRequestError",
          "name": "MalformedHttpRequestError",
          "type": "class",
          "module": "@minecraft/server-net",
          "description": "An error thrown when a malformed HTTP request is attempted\r to be sent.\r /",
          "definition": "export class MalformedHttpRequestError extends Error {\n    private constructor();\r\n}\r",
          "jsdoc": "/**\r\n * An error thrown when a malformed HTTP request is attempted\r\n * to be sent.\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "Networking"
          ],
          "tags": [],
          "keywords": [
            "malformedhttprequesterror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        }
      ],
      "exports": {
        "enums": [
          {
            "id": "@minecraft/server-net.HttpRequestMethod",
            "name": "HttpRequestMethod",
            "type": "enum",
            "module": "@minecraft/server-net",
            "description": "executing HTTP-based requests. This module can only be used\r on Bedrock Dedicated Server. These APIs do not function\r within the Minecraft game client or within Minecraft Realms.\r  Manifest Details\r ```json\r {\r   \"version\": \"1.0.0-beta\"\r }\r ```\r  /",
            "definition": "export enum HttpRequestMethod {\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP HEAD request. HEAD\r\n     * requests are similar to a GET request, but are commonly used\r\n     * to retrieve just the HTTP response headers from the\r\n     * specified URI, and not the body contents.\r\n     *\r\n     */\r\n    Delete = 'Delete',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. POST requests\r\n     * are commonly used to create a new resource that is a\r\n     * subordinate of the specified URI.\r\n     *\r\n     */\r\n    Get = 'Get',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. GET requests\r\n     * are commonly used to retrieve information about a resource\r\n     * at the specified URI.\r\n     *\r\n     */\r\n    Head = 'Head',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. GET requests\r\n     * are commonly used to retrieve information about a resource\r\n     * at the specified URI.\r\n     *\r\n     */\r\n    Post = 'Post',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. PUT requests\r\n     * are commonly used to update a single resource that already\r\n     * exists in a resource collection.\r\n     *\r\n     */\r\n    Put = 'Put',\r\n}\r",
            "jsdoc": "/**\r\n * @beta\r\n * @packageDocumentation\r\n * The `@minecraft/server-net` module contains types for\r\n * executing HTTP-based requests. This module can only be used\r\n * on Bedrock Dedicated Server. These APIs do not function\r\n * within the Minecraft game client or within Minecraft Realms.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-net\",\r\n *   \"version\": \"1.0.0-beta\"\r\n * }\r\n * ```\r\n *\r\n */\r",
            "enumValues": [
              {
                "name": "Delete",
                "value": "Delete",
                "description": ""
              },
              {
                "name": "Get",
                "value": "Get",
                "description": ""
              },
              {
                "name": "Head",
                "value": "Head",
                "description": ""
              },
              {
                "name": "Post",
                "value": "Post",
                "description": ""
              },
              {
                "name": "Put",
                "value": "Put",
                "description": ""
              }
            ],
            "categories": [
              "Enums",
              "Networking"
            ],
            "tags": [
              "beta"
            ],
            "keywords": [
              "httprequestmethod",
              "enum"
            ],
            "stability": "experimental"
          },
          {
            "id": "@minecraft/server-net.PacketId",
            "name": "PacketId",
            "type": "enum",
            "module": "@minecraft/server-net",
            "description": "Represents the unique type of network packet.\r /",
            "definition": "export enum PacketId {\n    ActorEventPacket = 'ActorEventPacket',\r\n    ActorPickRequestPacket = 'ActorPickRequestPacket',\r\n    AddActorPacket = 'AddActorPacket',\r\n    AddBehaviorTreePacket = 'AddBehaviorTreePacket',\r\n    AddItemActorPacket = 'AddItemActorPacket',\r\n    AddPaintingPacket = 'AddPaintingPacket',\r\n    AddPlayerPacket = 'AddPlayerPacket',\r\n    AddVolumeEntityPacket = 'AddVolumeEntityPacket',\r\n    AgentActionEventPacket = 'AgentActionEventPacket',\r\n    AgentAnimationPacket = 'AgentAnimationPacket',\r\n    AnimateEntityPacket = 'AnimateEntityPacket',\r\n    AnimatePacket = 'AnimatePacket',\r\n    AnvilDamagePacket = 'AnvilDamagePacket',\r\n    AutomationClientConnectPacket = 'AutomationClientConnectPacket',\r\n    AvailableActorIdentifiersPacket = 'AvailableActorIdentifiersPacket',\r\n    AvailableCommandsPacket = 'AvailableCommandsPacket',\r\n    AwardAchievementPacket = 'AwardAchievementPacket',\r\n    BiomeDefinitionListPacket = 'BiomeDefinitionListPacket',\r\n    BlockActorDataPacket = 'BlockActorDataPacket',\r\n    BlockEventPacket = 'BlockEventPacket',\r\n    BlockPickRequestPacket = 'BlockPickRequestPacket',\r\n    BookEditPacket = 'BookEditPacket',\r\n    BossEventPacket = 'BossEventPacket',\r\n    CameraAimAssistPacket = 'CameraAimAssistPacket',\r\n    CameraAimAssistPresetsPacket = 'CameraAimAssistPresetsPacket',\r\n    CameraInstructionPacket = 'CameraInstructionPacket',\r\n    CameraPacket = 'CameraPacket',\r\n    CameraPresetsPacket = 'CameraPresetsPacket',\r\n    CameraShakePacket = 'CameraShakePacket',\r\n    ChangeDimensionPacket = 'ChangeDimensionPacket',\r\n    ChangeMobPropertyPacket = 'ChangeMobPropertyPacket',\r\n    ChunkRadiusUpdatedPacket = 'ChunkRadiusUpdatedPacket',\r\n    ClientboundCloseFormPacket = 'ClientboundCloseFormPacket',\r\n    ClientboundControlSchemeSetPacket = 'ClientboundControlSchemeSetPacket',\r\n    ClientboundDebugRendererPacket = 'ClientboundDebugRendererPacket',\r\n    ClientboundMapItemDataPacket = 'ClientboundMapItemDataPacket',\r\n    ClientCacheBlobStatusPacket = 'ClientCacheBlobStatusPacket',\r\n    ClientCacheMissResponsePacket = 'ClientCacheMissResponsePacket',\r\n    ClientCacheStatusPacket = 'ClientCacheStatusPacket',\r\n    ClientCameraAimAssistPacket = 'ClientCameraAimAssistPacket',\r\n    ClientMovementPredictionSyncPacket = 'ClientMovementPredictionSyncPacket',\r\n    ClientToServerHandshakePacket = 'ClientToServerHandshakePacket',\r\n    CodeBuilderPacket = 'CodeBuilderPacket',\r\n    CodeBuilderSourcePacket = 'CodeBuilderSourcePacket',\r\n    CommandBlockUpdatePacket = 'CommandBlockUpdatePacket',\r\n    CommandOutputPacket = 'CommandOutputPacket',\r\n    CommandRequestPacket = 'CommandRequestPacket',\r\n    CompletedUsingItemPacket = 'CompletedUsingItemPacket',\r\n    ContainerClosePacket = 'ContainerClosePacket',\r\n    ContainerOpenPacket = 'ContainerOpenPacket',\r\n    ContainerRegistryCleanupPacket = 'ContainerRegistryCleanupPacket',\r\n    ContainerSetDataPacket = 'ContainerSetDataPacket',\r\n    CorrectPlayerMovePredictionPacket = 'CorrectPlayerMovePredictionPacket',\r\n    CraftingDataPacket = 'CraftingDataPacket',\r\n    CreatePhotoPacket = 'CreatePhotoPacket',\r\n    CreativeContentPacket = 'CreativeContentPacket',\r\n    CurrentStructureFeaturePacket = 'CurrentStructureFeaturePacket',\r\n    DeathInfoPacket = 'DeathInfoPacket',\r\n    DebugInfoPacket = 'DebugInfoPacket',\r\n    DimensionDataPacket = 'DimensionDataPacket',\r\n    DisconnectPacket = 'DisconnectPacket',\r\n    EditorNetworkPacket = 'EditorNetworkPacket',\r\n    EducationSettingsPacket = 'EducationSettingsPacket',\r\n    EduUriResourcePacket = 'EduUriResourcePacket',\r\n    EmoteListPacket = 'EmoteListPacket',\r\n    EmotePacket = 'EmotePacket',\r\n    FeatureRegistryPacket = 'FeatureRegistryPacket',\r\n    GameRulesChangedPacket = 'GameRulesChangedPacket',\r\n    GameTestRequestPacket = 'GameTestRequestPacket',\r\n    GameTestResultsPacket = 'GameTestResultsPacket',\r\n    GuiDataPickItemPacket = 'GuiDataPickItemPacket',\r\n    HurtArmorPacket = 'HurtArmorPacket',\r\n    InteractPacket = 'InteractPacket',\r\n    InventoryContentPacket = 'InventoryContentPacket',\r\n    InventorySlotPacket = 'InventorySlotPacket',\r\n    InventoryTransactionPacket = 'InventoryTransactionPacket',\r\n    ItemRegistryPacket = 'ItemRegistryPacket',\r\n    ItemStackRequestPacket = 'ItemStackRequestPacket',\r\n    ItemStackResponsePacket = 'ItemStackResponsePacket',\r\n    JigsawStructureDataPacket = 'JigsawStructureDataPacket',\r\n    LabTablePacket = 'LabTablePacket',\r\n    LecternUpdatePacket = 'LecternUpdatePacket',\r\n    LegacyTelemetryEventPacket = 'LegacyTelemetryEventPacket',\r\n    LessonProgressPacket = 'LessonProgressPacket',\r\n    LevelChunkPacket = 'LevelChunkPacket',\r\n    LevelEventGenericPacket = 'LevelEventGenericPacket',\r\n    LevelEventPacket = 'LevelEventPacket',\r\n    LevelSoundEventPacket = 'LevelSoundEventPacket',\r\n    LoginPacket = 'LoginPacket',\r\n    MapCreateLockedCopyPacket = 'MapCreateLockedCopyPacket',\r\n    MapInfoRequestPacket = 'MapInfoRequestPacket',\r\n    MobArmorEquipmentPacket = 'MobArmorEquipmentPacket',\r\n    MobEffectPacket = 'MobEffectPacket',\r\n    MobEquipmentPacket = 'MobEquipmentPacket',\r\n    ModalFormRequestPacket = 'ModalFormRequestPacket',\r\n    ModalFormResponsePacket = 'ModalFormResponsePacket',\r\n    MotionPredictionHintsPacket = 'MotionPredictionHintsPacket',\r\n    MoveActorAbsolutePacket = 'MoveActorAbsolutePacket',\r\n    MoveActorDeltaPacket = 'MoveActorDeltaPacket',\r\n    MovementEffectPacket = 'MovementEffectPacket',\r\n    MovePlayerPacket = 'MovePlayerPacket',\r\n    MultiplayerSettingsPacket = 'MultiplayerSettingsPacket',\r\n    NetworkChunkPublisherUpdatePacket = 'NetworkChunkPublisherUpdatePacket',\r\n    NetworkSettingsPacket = 'NetworkSettingsPacket',\r\n    NetworkStackLatencyPacket = 'NetworkStackLatencyPacket',\r\n    NpcDialoguePacket = 'NpcDialoguePacket',\r\n    NpcRequestPacket = 'NpcRequestPacket',\r\n    OnScreenTextureAnimationPacket = 'OnScreenTextureAnimationPacket',\r\n    OpenSignPacket = 'OpenSignPacket',\r\n    PacketViolationWarningPacket = 'PacketViolationWarningPacket',\r\n    PhotoTransferPacket = 'PhotoTransferPacket',\r\n    PlayerActionPacket = 'PlayerActionPacket',\r\n    PlayerArmorDamagePacket = 'PlayerArmorDamagePacket',\r\n    PlayerAuthInputPacket = 'PlayerAuthInputPacket',\r\n    PlayerEnchantOptionsPacket = 'PlayerEnchantOptionsPacket',\r\n    PlayerFogPacket = 'PlayerFogPacket',\r\n    PlayerHotbarPacket = 'PlayerHotbarPacket',\r\n    PlayerListPacket = 'PlayerListPacket',\r\n    PlayerLocationPacket = 'PlayerLocationPacket',\r\n    PlayerSkinPacket = 'PlayerSkinPacket',\r\n    PlayerStartItemCooldownPacket = 'PlayerStartItemCooldownPacket',\r\n    PlayerToggleCrafterSlotRequestPacket = 'PlayerToggleCrafterSlotRequestPacket',\r\n    PlayerUpdateEntityOverridesPacket = 'PlayerUpdateEntityOverridesPacket',\r\n    PlaySoundPacket = 'PlaySoundPacket',\r\n    PlayStatusPacket = 'PlayStatusPacket',\r\n    PositionTrackingDBClientRequestPacket = 'PositionTrackingDBClientRequestPacket',\r\n    PositionTrackingDBServerBroadcastPacket = 'PositionTrackingDBServerBroadcastPacket',\r\n    PurchaseReceiptPacket = 'PurchaseReceiptPacket',\r\n    RefreshEntitlementsPacket = 'RefreshEntitlementsPacket',\r\n    RemoveActorPacket = 'RemoveActorPacket',\r\n    RemoveObjectivePacket = 'RemoveObjectivePacket',\r\n    RemoveVolumeEntityPacket = 'RemoveVolumeEntityPacket',\r\n    RequestAbilityPacket = 'RequestAbilityPacket',\r\n    RequestChunkRadiusPacket = 'RequestChunkRadiusPacket',\r\n    RequestNetworkSettingsPacket = 'RequestNetworkSettingsPacket',\r\n    RequestPermissionsPacket = 'RequestPermissionsPacket',\r\n    ResourcePackChunkDataPacket = 'ResourcePackChunkDataPacket',\r\n    ResourcePackChunkRequestPacket = 'ResourcePackChunkRequestPacket',\r\n    ResourcePackClientResponsePacket = 'ResourcePackClientResponsePacket',\r\n    ResourcePackDataInfoPacket = 'ResourcePackDataInfoPacket',\r\n    ResourcePacksInfoPacket = 'ResourcePacksInfoPacket',\r\n    ResourcePackStackPacket = 'ResourcePackStackPacket',\r\n    RespawnPacket = 'RespawnPacket',\r\n    ScriptMessagePacket = 'ScriptMessagePacket',\r\n    ServerboundDiagnosticsPacket = 'ServerboundDiagnosticsPacket',\r\n    ServerboundLoadingScreenPacket = 'ServerboundLoadingScreenPacket',\r\n    ServerPlayerPostMovePositionPacket = 'ServerPlayerPostMovePositionPacket',\r\n    ServerSettingsRequestPacket = 'ServerSettingsRequestPacket',\r\n    ServerSettingsResponsePacket = 'ServerSettingsResponsePacket',\r\n    ServerStatsPacket = 'ServerStatsPacket',\r\n    ServerToClientHandshakePacket = 'ServerToClientHandshakePacket',\r\n    SetActorDataPacket = 'SetActorDataPacket',\r\n    SetActorLinkPacket = 'SetActorLinkPacket',\r\n    SetActorMotionPacket = 'SetActorMotionPacket',\r\n    SetCommandsEnabledPacket = 'SetCommandsEnabledPacket',\r\n    SetDefaultGameTypePacket = 'SetDefaultGameTypePacket',\r\n    SetDifficultyPacket = 'SetDifficultyPacket',\r\n    SetDisplayObjectivePacket = 'SetDisplayObjectivePacket',\r\n    SetHealthPacket = 'SetHealthPacket',\r\n    SetHudPacket = 'SetHudPacket',\r\n    SetLastHurtByPacket = 'SetLastHurtByPacket',\r\n    SetLocalPlayerAsInitializedPacket = 'SetLocalPlayerAsInitializedPacket',\r\n    SetMovementAuthorityPacket = 'SetMovementAuthorityPacket',\r\n    SetPlayerGameTypePacket = 'SetPlayerGameTypePacket',\r\n    SetPlayerInventoryOptionsPacket = 'SetPlayerInventoryOptionsPacket',\r\n    SetScoreboardIdentityPacket = 'SetScoreboardIdentityPacket',\r\n    SetScorePacket = 'SetScorePacket',\r\n    SetSpawnPositionPacket = 'SetSpawnPositionPacket',\r\n    SetTimePacket = 'SetTimePacket',\r\n    SettingsCommandPacket = 'SettingsCommandPacket',\r\n    SetTitlePacket = 'SetTitlePacket',\r\n    ShowCreditsPacket = 'ShowCreditsPacket',\r\n    ShowProfilePacket = 'ShowProfilePacket',\r\n    ShowStoreOfferPacket = 'ShowStoreOfferPacket',\r\n    SimpleEventPacket = 'SimpleEventPacket',\r\n    SimulationTypePacket = 'SimulationTypePacket',\r\n    SpawnExperienceOrbPacket = 'SpawnExperienceOrbPacket',\r\n    SpawnParticleEffectPacket = 'SpawnParticleEffectPacket',\r\n    StartGamePacket = 'StartGamePacket',\r\n    StopSoundPacket = 'StopSoundPacket',\r\n    StructureBlockUpdatePacket = 'StructureBlockUpdatePacket',\r\n    StructureTemplateDataRequestPacket = 'StructureTemplateDataRequestPacket',\r\n    StructureTemplateDataResponsePacket = 'StructureTemplateDataResponsePacket',\r\n    SubChunkPacket = 'SubChunkPacket',\r\n    SubChunkRequestPacket = 'SubChunkRequestPacket',\r\n    SubClientLoginPacket = 'SubClientLoginPacket',\r\n    SyncActorPropertyPacket = 'SyncActorPropertyPacket',\r\n    TakeItemActorPacket = 'TakeItemActorPacket',\r\n    TextPacket = 'TextPacket',\r\n    TickingAreasLoadStatusPacket = 'TickingAreasLoadStatusPacket',\r\n    ToastRequestPacket = 'ToastRequestPacket',\r\n    TransferPacket = 'TransferPacket',\r\n    TrimDataPacket = 'TrimDataPacket',\r\n    UnlockedRecipesPacket = 'UnlockedRecipesPacket',\r\n    UpdateAbilitiesPacket = 'UpdateAbilitiesPacket',\r\n    UpdateAdventureSettingsPacket = 'UpdateAdventureSettingsPacket',\r\n    UpdateAttributesPacket = 'UpdateAttributesPacket',\r\n    UpdateBlockPacket = 'UpdateBlockPacket',\r\n    UpdateBlockSyncedPacket = 'UpdateBlockSyncedPacket',\r\n    UpdateClientInputLocksPacket = 'UpdateClientInputLocksPacket',\r\n    UpdateClientOptions = 'UpdateClientOptions',\r\n    UpdateEquipPacket = 'UpdateEquipPacket',\r\n    UpdatePlayerGameTypePacket = 'UpdatePlayerGameTypePacket',\r\n    UpdateSoftEnumPacket = 'UpdateSoftEnumPacket',\r\n    UpdateSubChunkBlocksPacket = 'UpdateSubChunkBlocksPacket',\r\n    UpdateTradePacket = 'UpdateTradePacket',\r\n}\r",
            "jsdoc": "/**\r\n * Represents the unique type of network packet.\r\n */\r",
            "enumValues": [
              {
                "name": "ActorEventPacket",
                "value": "ActorEventPacket"
              },
              {
                "name": "ActorPickRequestPacket",
                "value": "ActorPickRequestPacket"
              },
              {
                "name": "AddActorPacket",
                "value": "AddActorPacket"
              },
              {
                "name": "AddBehaviorTreePacket",
                "value": "AddBehaviorTreePacket"
              },
              {
                "name": "AddItemActorPacket",
                "value": "AddItemActorPacket"
              },
              {
                "name": "AddPaintingPacket",
                "value": "AddPaintingPacket"
              },
              {
                "name": "AddPlayerPacket",
                "value": "AddPlayerPacket"
              },
              {
                "name": "AddVolumeEntityPacket",
                "value": "AddVolumeEntityPacket"
              },
              {
                "name": "AgentActionEventPacket",
                "value": "AgentActionEventPacket"
              },
              {
                "name": "AgentAnimationPacket",
                "value": "AgentAnimationPacket"
              },
              {
                "name": "AnimateEntityPacket",
                "value": "AnimateEntityPacket"
              },
              {
                "name": "AnimatePacket",
                "value": "AnimatePacket"
              },
              {
                "name": "AnvilDamagePacket",
                "value": "AnvilDamagePacket"
              },
              {
                "name": "AutomationClientConnectPacket",
                "value": "AutomationClientConnectPacket"
              },
              {
                "name": "AvailableActorIdentifiersPacket",
                "value": "AvailableActorIdentifiersPacket"
              },
              {
                "name": "AvailableCommandsPacket",
                "value": "AvailableCommandsPacket"
              },
              {
                "name": "AwardAchievementPacket",
                "value": "AwardAchievementPacket"
              },
              {
                "name": "BiomeDefinitionListPacket",
                "value": "BiomeDefinitionListPacket"
              },
              {
                "name": "BlockActorDataPacket",
                "value": "BlockActorDataPacket"
              },
              {
                "name": "BlockEventPacket",
                "value": "BlockEventPacket"
              },
              {
                "name": "BlockPickRequestPacket",
                "value": "BlockPickRequestPacket"
              },
              {
                "name": "BookEditPacket",
                "value": "BookEditPacket"
              },
              {
                "name": "BossEventPacket",
                "value": "BossEventPacket"
              },
              {
                "name": "CameraAimAssistPacket",
                "value": "CameraAimAssistPacket"
              },
              {
                "name": "CameraAimAssistPresetsPacket",
                "value": "CameraAimAssistPresetsPacket"
              },
              {
                "name": "CameraInstructionPacket",
                "value": "CameraInstructionPacket"
              },
              {
                "name": "CameraPacket",
                "value": "CameraPacket"
              },
              {
                "name": "CameraPresetsPacket",
                "value": "CameraPresetsPacket"
              },
              {
                "name": "CameraShakePacket",
                "value": "CameraShakePacket"
              },
              {
                "name": "ChangeDimensionPacket",
                "value": "ChangeDimensionPacket"
              },
              {
                "name": "ChangeMobPropertyPacket",
                "value": "ChangeMobPropertyPacket"
              },
              {
                "name": "ChunkRadiusUpdatedPacket",
                "value": "ChunkRadiusUpdatedPacket"
              },
              {
                "name": "ClientboundCloseFormPacket",
                "value": "ClientboundCloseFormPacket"
              },
              {
                "name": "ClientboundControlSchemeSetPacket",
                "value": "ClientboundControlSchemeSetPacket"
              },
              {
                "name": "ClientboundDebugRendererPacket",
                "value": "ClientboundDebugRendererPacket"
              },
              {
                "name": "ClientboundMapItemDataPacket",
                "value": "ClientboundMapItemDataPacket"
              },
              {
                "name": "ClientCacheBlobStatusPacket",
                "value": "ClientCacheBlobStatusPacket"
              },
              {
                "name": "ClientCacheMissResponsePacket",
                "value": "ClientCacheMissResponsePacket"
              },
              {
                "name": "ClientCacheStatusPacket",
                "value": "ClientCacheStatusPacket"
              },
              {
                "name": "ClientCameraAimAssistPacket",
                "value": "ClientCameraAimAssistPacket"
              },
              {
                "name": "ClientMovementPredictionSyncPacket",
                "value": "ClientMovementPredictionSyncPacket"
              },
              {
                "name": "ClientToServerHandshakePacket",
                "value": "ClientToServerHandshakePacket"
              },
              {
                "name": "CodeBuilderPacket",
                "value": "CodeBuilderPacket"
              },
              {
                "name": "CodeBuilderSourcePacket",
                "value": "CodeBuilderSourcePacket"
              },
              {
                "name": "CommandBlockUpdatePacket",
                "value": "CommandBlockUpdatePacket"
              },
              {
                "name": "CommandOutputPacket",
                "value": "CommandOutputPacket"
              },
              {
                "name": "CommandRequestPacket",
                "value": "CommandRequestPacket"
              },
              {
                "name": "CompletedUsingItemPacket",
                "value": "CompletedUsingItemPacket"
              },
              {
                "name": "ContainerClosePacket",
                "value": "ContainerClosePacket"
              },
              {
                "name": "ContainerOpenPacket",
                "value": "ContainerOpenPacket"
              },
              {
                "name": "ContainerRegistryCleanupPacket",
                "value": "ContainerRegistryCleanupPacket"
              },
              {
                "name": "ContainerSetDataPacket",
                "value": "ContainerSetDataPacket"
              },
              {
                "name": "CorrectPlayerMovePredictionPacket",
                "value": "CorrectPlayerMovePredictionPacket"
              },
              {
                "name": "CraftingDataPacket",
                "value": "CraftingDataPacket"
              },
              {
                "name": "CreatePhotoPacket",
                "value": "CreatePhotoPacket"
              },
              {
                "name": "CreativeContentPacket",
                "value": "CreativeContentPacket"
              },
              {
                "name": "CurrentStructureFeaturePacket",
                "value": "CurrentStructureFeaturePacket"
              },
              {
                "name": "DeathInfoPacket",
                "value": "DeathInfoPacket"
              },
              {
                "name": "DebugInfoPacket",
                "value": "DebugInfoPacket"
              },
              {
                "name": "DimensionDataPacket",
                "value": "DimensionDataPacket"
              },
              {
                "name": "DisconnectPacket",
                "value": "DisconnectPacket"
              },
              {
                "name": "EditorNetworkPacket",
                "value": "EditorNetworkPacket"
              },
              {
                "name": "EducationSettingsPacket",
                "value": "EducationSettingsPacket"
              },
              {
                "name": "EduUriResourcePacket",
                "value": "EduUriResourcePacket"
              },
              {
                "name": "EmoteListPacket",
                "value": "EmoteListPacket"
              },
              {
                "name": "EmotePacket",
                "value": "EmotePacket"
              },
              {
                "name": "FeatureRegistryPacket",
                "value": "FeatureRegistryPacket"
              },
              {
                "name": "GameRulesChangedPacket",
                "value": "GameRulesChangedPacket"
              },
              {
                "name": "GameTestRequestPacket",
                "value": "GameTestRequestPacket"
              },
              {
                "name": "GameTestResultsPacket",
                "value": "GameTestResultsPacket"
              },
              {
                "name": "GuiDataPickItemPacket",
                "value": "GuiDataPickItemPacket"
              },
              {
                "name": "HurtArmorPacket",
                "value": "HurtArmorPacket"
              },
              {
                "name": "InteractPacket",
                "value": "InteractPacket"
              },
              {
                "name": "InventoryContentPacket",
                "value": "InventoryContentPacket"
              },
              {
                "name": "InventorySlotPacket",
                "value": "InventorySlotPacket"
              },
              {
                "name": "InventoryTransactionPacket",
                "value": "InventoryTransactionPacket"
              },
              {
                "name": "ItemRegistryPacket",
                "value": "ItemRegistryPacket"
              },
              {
                "name": "ItemStackRequestPacket",
                "value": "ItemStackRequestPacket"
              },
              {
                "name": "ItemStackResponsePacket",
                "value": "ItemStackResponsePacket"
              },
              {
                "name": "JigsawStructureDataPacket",
                "value": "JigsawStructureDataPacket"
              },
              {
                "name": "LabTablePacket",
                "value": "LabTablePacket"
              },
              {
                "name": "LecternUpdatePacket",
                "value": "LecternUpdatePacket"
              },
              {
                "name": "LegacyTelemetryEventPacket",
                "value": "LegacyTelemetryEventPacket"
              },
              {
                "name": "LessonProgressPacket",
                "value": "LessonProgressPacket"
              },
              {
                "name": "LevelChunkPacket",
                "value": "LevelChunkPacket"
              },
              {
                "name": "LevelEventGenericPacket",
                "value": "LevelEventGenericPacket"
              },
              {
                "name": "LevelEventPacket",
                "value": "LevelEventPacket"
              },
              {
                "name": "LevelSoundEventPacket",
                "value": "LevelSoundEventPacket"
              },
              {
                "name": "LoginPacket",
                "value": "LoginPacket"
              },
              {
                "name": "MapCreateLockedCopyPacket",
                "value": "MapCreateLockedCopyPacket"
              },
              {
                "name": "MapInfoRequestPacket",
                "value": "MapInfoRequestPacket"
              },
              {
                "name": "MobArmorEquipmentPacket",
                "value": "MobArmorEquipmentPacket"
              },
              {
                "name": "MobEffectPacket",
                "value": "MobEffectPacket"
              },
              {
                "name": "MobEquipmentPacket",
                "value": "MobEquipmentPacket"
              },
              {
                "name": "ModalFormRequestPacket",
                "value": "ModalFormRequestPacket"
              },
              {
                "name": "ModalFormResponsePacket",
                "value": "ModalFormResponsePacket"
              },
              {
                "name": "MotionPredictionHintsPacket",
                "value": "MotionPredictionHintsPacket"
              },
              {
                "name": "MoveActorAbsolutePacket",
                "value": "MoveActorAbsolutePacket"
              },
              {
                "name": "MoveActorDeltaPacket",
                "value": "MoveActorDeltaPacket"
              },
              {
                "name": "MovementEffectPacket",
                "value": "MovementEffectPacket"
              },
              {
                "name": "MovePlayerPacket",
                "value": "MovePlayerPacket"
              },
              {
                "name": "MultiplayerSettingsPacket",
                "value": "MultiplayerSettingsPacket"
              },
              {
                "name": "NetworkChunkPublisherUpdatePacket",
                "value": "NetworkChunkPublisherUpdatePacket"
              },
              {
                "name": "NetworkSettingsPacket",
                "value": "NetworkSettingsPacket"
              },
              {
                "name": "NetworkStackLatencyPacket",
                "value": "NetworkStackLatencyPacket"
              },
              {
                "name": "NpcDialoguePacket",
                "value": "NpcDialoguePacket"
              },
              {
                "name": "NpcRequestPacket",
                "value": "NpcRequestPacket"
              },
              {
                "name": "OnScreenTextureAnimationPacket",
                "value": "OnScreenTextureAnimationPacket"
              },
              {
                "name": "OpenSignPacket",
                "value": "OpenSignPacket"
              },
              {
                "name": "PacketViolationWarningPacket",
                "value": "PacketViolationWarningPacket"
              },
              {
                "name": "PhotoTransferPacket",
                "value": "PhotoTransferPacket"
              },
              {
                "name": "PlayerActionPacket",
                "value": "PlayerActionPacket"
              },
              {
                "name": "PlayerArmorDamagePacket",
                "value": "PlayerArmorDamagePacket"
              },
              {
                "name": "PlayerAuthInputPacket",
                "value": "PlayerAuthInputPacket"
              },
              {
                "name": "PlayerEnchantOptionsPacket",
                "value": "PlayerEnchantOptionsPacket"
              },
              {
                "name": "PlayerFogPacket",
                "value": "PlayerFogPacket"
              },
              {
                "name": "PlayerHotbarPacket",
                "value": "PlayerHotbarPacket"
              },
              {
                "name": "PlayerListPacket",
                "value": "PlayerListPacket"
              },
              {
                "name": "PlayerLocationPacket",
                "value": "PlayerLocationPacket"
              },
              {
                "name": "PlayerSkinPacket",
                "value": "PlayerSkinPacket"
              },
              {
                "name": "PlayerStartItemCooldownPacket",
                "value": "PlayerStartItemCooldownPacket"
              },
              {
                "name": "PlayerToggleCrafterSlotRequestPacket",
                "value": "PlayerToggleCrafterSlotRequestPacket"
              },
              {
                "name": "PlayerUpdateEntityOverridesPacket",
                "value": "PlayerUpdateEntityOverridesPacket"
              },
              {
                "name": "PlaySoundPacket",
                "value": "PlaySoundPacket"
              },
              {
                "name": "PlayStatusPacket",
                "value": "PlayStatusPacket"
              },
              {
                "name": "PositionTrackingDBClientRequestPacket",
                "value": "PositionTrackingDBClientRequestPacket"
              },
              {
                "name": "PositionTrackingDBServerBroadcastPacket",
                "value": "PositionTrackingDBServerBroadcastPacket"
              },
              {
                "name": "PurchaseReceiptPacket",
                "value": "PurchaseReceiptPacket"
              },
              {
                "name": "RefreshEntitlementsPacket",
                "value": "RefreshEntitlementsPacket"
              },
              {
                "name": "RemoveActorPacket",
                "value": "RemoveActorPacket"
              },
              {
                "name": "RemoveObjectivePacket",
                "value": "RemoveObjectivePacket"
              },
              {
                "name": "RemoveVolumeEntityPacket",
                "value": "RemoveVolumeEntityPacket"
              },
              {
                "name": "RequestAbilityPacket",
                "value": "RequestAbilityPacket"
              },
              {
                "name": "RequestChunkRadiusPacket",
                "value": "RequestChunkRadiusPacket"
              },
              {
                "name": "RequestNetworkSettingsPacket",
                "value": "RequestNetworkSettingsPacket"
              },
              {
                "name": "RequestPermissionsPacket",
                "value": "RequestPermissionsPacket"
              },
              {
                "name": "ResourcePackChunkDataPacket",
                "value": "ResourcePackChunkDataPacket"
              },
              {
                "name": "ResourcePackChunkRequestPacket",
                "value": "ResourcePackChunkRequestPacket"
              },
              {
                "name": "ResourcePackClientResponsePacket",
                "value": "ResourcePackClientResponsePacket"
              },
              {
                "name": "ResourcePackDataInfoPacket",
                "value": "ResourcePackDataInfoPacket"
              },
              {
                "name": "ResourcePacksInfoPacket",
                "value": "ResourcePacksInfoPacket"
              },
              {
                "name": "ResourcePackStackPacket",
                "value": "ResourcePackStackPacket"
              },
              {
                "name": "RespawnPacket",
                "value": "RespawnPacket"
              },
              {
                "name": "ScriptMessagePacket",
                "value": "ScriptMessagePacket"
              },
              {
                "name": "ServerboundDiagnosticsPacket",
                "value": "ServerboundDiagnosticsPacket"
              },
              {
                "name": "ServerboundLoadingScreenPacket",
                "value": "ServerboundLoadingScreenPacket"
              },
              {
                "name": "ServerPlayerPostMovePositionPacket",
                "value": "ServerPlayerPostMovePositionPacket"
              },
              {
                "name": "ServerSettingsRequestPacket",
                "value": "ServerSettingsRequestPacket"
              },
              {
                "name": "ServerSettingsResponsePacket",
                "value": "ServerSettingsResponsePacket"
              },
              {
                "name": "ServerStatsPacket",
                "value": "ServerStatsPacket"
              },
              {
                "name": "ServerToClientHandshakePacket",
                "value": "ServerToClientHandshakePacket"
              },
              {
                "name": "SetActorDataPacket",
                "value": "SetActorDataPacket"
              },
              {
                "name": "SetActorLinkPacket",
                "value": "SetActorLinkPacket"
              },
              {
                "name": "SetActorMotionPacket",
                "value": "SetActorMotionPacket"
              },
              {
                "name": "SetCommandsEnabledPacket",
                "value": "SetCommandsEnabledPacket"
              },
              {
                "name": "SetDefaultGameTypePacket",
                "value": "SetDefaultGameTypePacket"
              },
              {
                "name": "SetDifficultyPacket",
                "value": "SetDifficultyPacket"
              },
              {
                "name": "SetDisplayObjectivePacket",
                "value": "SetDisplayObjectivePacket"
              },
              {
                "name": "SetHealthPacket",
                "value": "SetHealthPacket"
              },
              {
                "name": "SetHudPacket",
                "value": "SetHudPacket"
              },
              {
                "name": "SetLastHurtByPacket",
                "value": "SetLastHurtByPacket"
              },
              {
                "name": "SetLocalPlayerAsInitializedPacket",
                "value": "SetLocalPlayerAsInitializedPacket"
              },
              {
                "name": "SetMovementAuthorityPacket",
                "value": "SetMovementAuthorityPacket"
              },
              {
                "name": "SetPlayerGameTypePacket",
                "value": "SetPlayerGameTypePacket"
              },
              {
                "name": "SetPlayerInventoryOptionsPacket",
                "value": "SetPlayerInventoryOptionsPacket"
              },
              {
                "name": "SetScoreboardIdentityPacket",
                "value": "SetScoreboardIdentityPacket"
              },
              {
                "name": "SetScorePacket",
                "value": "SetScorePacket"
              },
              {
                "name": "SetSpawnPositionPacket",
                "value": "SetSpawnPositionPacket"
              },
              {
                "name": "SetTimePacket",
                "value": "SetTimePacket"
              },
              {
                "name": "SettingsCommandPacket",
                "value": "SettingsCommandPacket"
              },
              {
                "name": "SetTitlePacket",
                "value": "SetTitlePacket"
              },
              {
                "name": "ShowCreditsPacket",
                "value": "ShowCreditsPacket"
              },
              {
                "name": "ShowProfilePacket",
                "value": "ShowProfilePacket"
              },
              {
                "name": "ShowStoreOfferPacket",
                "value": "ShowStoreOfferPacket"
              },
              {
                "name": "SimpleEventPacket",
                "value": "SimpleEventPacket"
              },
              {
                "name": "SimulationTypePacket",
                "value": "SimulationTypePacket"
              },
              {
                "name": "SpawnExperienceOrbPacket",
                "value": "SpawnExperienceOrbPacket"
              },
              {
                "name": "SpawnParticleEffectPacket",
                "value": "SpawnParticleEffectPacket"
              },
              {
                "name": "StartGamePacket",
                "value": "StartGamePacket"
              },
              {
                "name": "StopSoundPacket",
                "value": "StopSoundPacket"
              },
              {
                "name": "StructureBlockUpdatePacket",
                "value": "StructureBlockUpdatePacket"
              },
              {
                "name": "StructureTemplateDataRequestPacket",
                "value": "StructureTemplateDataRequestPacket"
              },
              {
                "name": "StructureTemplateDataResponsePacket",
                "value": "StructureTemplateDataResponsePacket"
              },
              {
                "name": "SubChunkPacket",
                "value": "SubChunkPacket"
              },
              {
                "name": "SubChunkRequestPacket",
                "value": "SubChunkRequestPacket"
              },
              {
                "name": "SubClientLoginPacket",
                "value": "SubClientLoginPacket"
              },
              {
                "name": "SyncActorPropertyPacket",
                "value": "SyncActorPropertyPacket"
              },
              {
                "name": "TakeItemActorPacket",
                "value": "TakeItemActorPacket"
              },
              {
                "name": "TextPacket",
                "value": "TextPacket"
              },
              {
                "name": "TickingAreasLoadStatusPacket",
                "value": "TickingAreasLoadStatusPacket"
              },
              {
                "name": "ToastRequestPacket",
                "value": "ToastRequestPacket"
              },
              {
                "name": "TransferPacket",
                "value": "TransferPacket"
              },
              {
                "name": "TrimDataPacket",
                "value": "TrimDataPacket"
              },
              {
                "name": "UnlockedRecipesPacket",
                "value": "UnlockedRecipesPacket"
              },
              {
                "name": "UpdateAbilitiesPacket",
                "value": "UpdateAbilitiesPacket"
              },
              {
                "name": "UpdateAdventureSettingsPacket",
                "value": "UpdateAdventureSettingsPacket"
              },
              {
                "name": "UpdateAttributesPacket",
                "value": "UpdateAttributesPacket"
              },
              {
                "name": "UpdateBlockPacket",
                "value": "UpdateBlockPacket"
              },
              {
                "name": "UpdateBlockSyncedPacket",
                "value": "UpdateBlockSyncedPacket"
              },
              {
                "name": "UpdateClientInputLocksPacket",
                "value": "UpdateClientInputLocksPacket"
              },
              {
                "name": "UpdateClientOptions",
                "value": "UpdateClientOptions"
              },
              {
                "name": "UpdateEquipPacket",
                "value": "UpdateEquipPacket"
              },
              {
                "name": "UpdatePlayerGameTypePacket",
                "value": "UpdatePlayerGameTypePacket"
              },
              {
                "name": "UpdateSoftEnumPacket",
                "value": "UpdateSoftEnumPacket"
              },
              {
                "name": "UpdateSubChunkBlocksPacket",
                "value": "UpdateSubChunkBlocksPacket"
              },
              {
                "name": "UpdateTradePacket",
                "value": "UpdateTradePacket"
              }
            ],
            "categories": [
              "Enums",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "packetid",
              "enum"
            ],
            "stability": "stable"
          }
        ],
        "classes": [
          {
            "id": "@minecraft/server-net.HttpClient",
            "name": "HttpClient",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
            "definition": "export class HttpClient {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Cancels all pending requests.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    cancelAll(reason: string): void;\r\n    /**\r\n     * @remarks\r\n     * Performs a simple HTTP get request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param uri\r\n     * URL to make an HTTP Request to.\r\n     * @returns\r\n     * An awaitable promise that contains the HTTP response.\r\n     */\r\n    get(uri: string): Promise<HttpResponse>;\r\n    /**\r\n     * @remarks\r\n     * Performs an HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param config\r\n     * Contains an HTTP Request object with configuration data on\r\n     * the HTTP request.\r\n     * @returns\r\n     * An awaitable promise that contains the HTTP response.\r\n     * @example simpleHttpRequest.ts\r\n     * ```typescript\r\n     * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n     *\r\n     * async function updateScore() {\r\n     *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n     *\r\n     *     req.body = JSON.stringify({\r\n     *         score: 22,\r\n     *     });\r\n     *\r\n     *     req.method = HttpRequestMethod.Post;\r\n     *     req.headers = [\r\n     *         new HttpHeader('Content-Type', 'application/json'),\r\n     *         new HttpHeader('auth', 'my-auth-token'),\r\n     *     ];\r\n     *\r\n     *     await http.request(req);\r\n     * }\r\n     * ```\r\n     */\r\n    request(config: HttpRequest): Promise<HttpResponse>;\r\n}\r",
            "jsdoc": "/**\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "cancelAll",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "cancelAll(reason: string): void"
              },
              {
                "name": "get",
                "parameters": [],
                "returnType": "Promise<HttpResponse>",
                "accessibility": "public",
                "signature": "get(uri: string): Promise<HttpResponse>"
              },
              {
                "name": "request",
                "parameters": [],
                "returnType": "Promise<HttpResponse>",
                "accessibility": "public",
                "signature": "request(config: HttpRequest): Promise<HttpResponse>"
              }
            ],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "httpclient",
              "class"
            ],
            "examples": [
              {
                "title": "simpleHttpRequest.ts",
                "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.HttpHeader",
            "name": "HttpHeader",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "Represents an HTTP header - a key/value pair of\r meta-information about a request.\r ```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
            "definition": "export class HttpHeader {\n    /**\r\n     * @remarks\r\n     * Key of the HTTP header.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    key: string;\r\n    /**\r\n     * @remarks\r\n     * Value of the HTTP header.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    value: minecraftserveradmin.SecretString | string;\r\n    constructor(key: string, value: minecraftserveradmin.SecretString | string);\r\n}\r",
            "jsdoc": "/**\r\n * Represents an HTTP header - a key/value pair of\r\n * meta-information about a request.\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "httpheader",
              "class"
            ],
            "examples": [
              {
                "title": "simpleHttpRequest.ts",
                "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.HttpRequest",
            "name": "HttpRequest",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "Main object for structuring a request.\r ```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
            "definition": "export class HttpRequest {\n    /**\r\n     * @remarks\r\n     * Content of the body of the HTTP request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    body: string;\r\n    /**\r\n     * @remarks\r\n     * A collection of HTTP headers to add to the outbound request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    headers: HttpHeader[];\r\n    /**\r\n     * @remarks\r\n     * HTTP method (e.g., GET or PUT or PATCH) to use for making\r\n     * the request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    method: HttpRequestMethod;\r\n    /**\r\n     * @remarks\r\n     * Amount of time, in seconds, before the request times out and\r\n     * is abandoned.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    timeout: number;\r\n    /**\r\n     * @remarks\r\n     * The HTTP resource to access.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    uri: string;\r\n    constructor(uri: string);\r\n    /**\r\n     * @remarks\r\n     * Adds an additional header to the overall list of headers\r\n     * used in the corresponding HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    addHeader(key: string, value: minecraftserveradmin.SecretString | string): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Updates the content of the body of the HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setBody(body: string): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Replaces and applies a set of HTTP Headers for the request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setHeaders(headers: HttpHeader[]): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Sets the desired HTTP method (e.g., GET or PUT or PATCH) to\r\n     * use for making the request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setMethod(method: HttpRequestMethod): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setTimeout(timeout: number): HttpRequest;\r\n}\r",
            "jsdoc": "/**\r\n * Main object for structuring a request.\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "addHeader",
                "parameters": [],
                "returnType": "HttpRequest",
                "accessibility": "public",
                "signature": "addHeader(key: string, value: minecraftserveradmin.SecretString | string): HttpRequest"
              },
              {
                "name": "setBody",
                "parameters": [],
                "returnType": "HttpRequest",
                "accessibility": "public",
                "signature": "setBody(body: string): HttpRequest"
              },
              {
                "name": "setHeaders",
                "parameters": [],
                "returnType": "HttpRequest",
                "accessibility": "public",
                "signature": "setHeaders(headers: HttpHeader[]): HttpRequest"
              },
              {
                "name": "setMethod",
                "parameters": [],
                "returnType": "HttpRequest",
                "accessibility": "public",
                "signature": "setMethod(method: HttpRequestMethod): HttpRequest"
              },
              {
                "name": "setTimeout",
                "parameters": [],
                "returnType": "HttpRequest",
                "accessibility": "public",
                "signature": "setTimeout(timeout: number): HttpRequest"
              }
            ],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "httprequest",
              "class"
            ],
            "examples": [
              {
                "title": "simpleHttpRequest.ts",
                "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.HttpResponse",
            "name": "HttpResponse",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "Main object that contains result information from a request.\r /",
            "definition": "export class HttpResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Body content of the HTTP response.\r\n     *\r\n     */\r\n    readonly body: string;\r\n    /**\r\n     * @remarks\r\n     * A collection of HTTP response headers returned from the\r\n     * request.\r\n     *\r\n     */\r\n    readonly headers: HttpHeader[];\r\n    /**\r\n     * @remarks\r\n     * Information that was used to formulate the HTTP response\r\n     * that this object represents.\r\n     *\r\n     */\r\n    readonly request: HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * HTTP response code for the request. For example, 404\r\n     * represents resource not found, and 500 represents an\r\n     * internal server error.\r\n     *\r\n     */\r\n    readonly status: number;\r\n}\r",
            "jsdoc": "/**\r\n * Main object that contains result information from a request.\r\n */\r",
            "properties": [
              {
                "name": "body",
                "type": "string",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "headers",
                "type": "HttpHeader[]",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "request",
                "type": "HttpRequest",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "status",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "httpresponse",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.NetworkBeforeEvents",
            "name": "NetworkBeforeEvents",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "HTTP response code for the request. For example, 404\r represents resource not found, and 500 represents an\r internal server error.",
            "definition": "export class NetworkBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly packetReceive: PacketReceiveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly packetSend: PacketSendBeforeEventSignal;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * HTTP response code for the request. For example, 404\r\n     * represents resource not found, and 500 represents an\r\n     * internal server error.\r\n     *\r\n     */\r",
            "properties": [
              {
                "name": "packetReceive",
                "type": "PacketReceiveBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "packetSend",
                "type": "PacketSendBeforeEventSignal",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "networkbeforeevents",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.PacketReceiveBeforeEventSignal",
            "name": "PacketReceiveBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "This property can be read in early-execution mode.",
            "definition": "export class PacketReceiveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PacketReceivedBeforeEvent) => void,\r\n        options?: PacketEventOptions,\r\n    ): (arg0: PacketReceivedBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PacketReceivedBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "packetreceivebeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.PacketReceivedBeforeEvent",
            "name": "PacketReceivedBeforeEvent",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "Sent as the server receives a network packet from a client.\r If cancelled, the server will not parse the network packet\r and will silently ignore it.\r /",
            "definition": "export class PacketReceivedBeforeEvent {\n    private constructor();\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The type of network packet.\r\n     *\r\n     */\r\n    readonly packetId: PacketId;\r\n    /**\r\n     * @remarks\r\n     * The size of the network packet in bytes.\r\n     *\r\n     */\r\n    readonly packetSize: number;\r\n    /**\r\n     * @remarks\r\n     * Which client sent the network packet to the game server.\r\n     *\r\n     */\r\n    readonly sender?: minecraftserver.Player;\r\n}\r",
            "jsdoc": "/**\r\n * Sent as the server receives a network packet from a client.\r\n * If cancelled, the server will not parse the network packet\r\n * and will silently ignore it.\r\n */\r",
            "properties": [
              {
                "name": "packetId",
                "type": "PacketId",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "packetSize",
                "type": "number",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "packetreceivedbeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.PacketSendBeforeEvent",
            "name": "PacketSendBeforeEvent",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "Sent as the server sends a network packet to clients.  If\r cancelled, the server will not send the network packet to\r the receiving clients.\r /",
            "definition": "export class PacketSendBeforeEvent {\n    private constructor();\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The type of network packet.\r\n     *\r\n     */\r\n    readonly packetId: PacketId;\r\n    /**\r\n     * @remarks\r\n     * Which clients the network packet is being sent to.\r\n     *\r\n     */\r\n    readonly recipients: (minecraftserver.Player | undefined)[];\r\n}\r",
            "jsdoc": "/**\r\n * Sent as the server sends a network packet to clients.  If\r\n * cancelled, the server will not send the network packet to\r\n * the receiving clients.\r\n */\r",
            "properties": [
              {
                "name": "packetId",
                "type": "PacketId",
                "readonly": true,
                "accessibility": "public"
              },
              {
                "name": "recipients",
                "type": "(minecraftserver.Player | undefined)[]",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "packetsendbeforeevent",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.PacketSendBeforeEventSignal",
            "name": "PacketSendBeforeEventSignal",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "Which clients the network packet is being sent to.",
            "definition": "export class PacketSendBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PacketSendBeforeEvent) => void,\r\n        options?: PacketEventOptions,\r\n    ): (arg0: PacketSendBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PacketSendBeforeEvent) => void): void;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * Which clients the network packet is being sent to.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "packetsendbeforeeventsignal",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.InternalHttpRequestError",
            "name": "InternalHttpRequestError",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "An error thrown when a platform-level HTTP error occurs.\r Information provided in this class may be useful for\r diagnostics purposes but will differ from platform to\r platform.\r /",
            "definition": "export class InternalHttpRequestError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The platform-provided numeric error code for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    code: number;\r\n    /**\r\n     * @remarks\r\n     * The platform-provided message for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    message: string;\r\n}\r",
            "jsdoc": "/**\r\n * An error thrown when a platform-level HTTP error occurs.\r\n * Information provided in this class may be useful for\r\n * diagnostics purposes but will differ from platform to\r\n * platform.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "internalhttprequesterror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-net.MalformedHttpRequestError",
            "name": "MalformedHttpRequestError",
            "type": "class",
            "module": "@minecraft/server-net",
            "description": "An error thrown when a malformed HTTP request is attempted\r to be sent.\r /",
            "definition": "export class MalformedHttpRequestError extends Error {\n    private constructor();\r\n}\r",
            "jsdoc": "/**\r\n * An error thrown when a malformed HTTP request is attempted\r\n * to be sent.\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "malformedhttprequesterror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          }
        ],
        "interfaces": [
          {
            "id": "@minecraft/server-net.PacketEventOptions",
            "name": "PacketEventOptions",
            "type": "interface",
            "module": "@minecraft/server-net",
            "description": "Options for events triggered by network packets.\r /",
            "definition": "export interface PacketEventOptions {\n    /**\r\n     * @remarks\r\n     * If provided, packet IDs in this list will not trigger the\r\n     * event subscriptions.\r\n     *\r\n     */\r\n    ignoredPacketIds?: PacketId[];\r\n    /**\r\n     * @remarks\r\n     * If provided only packet IDs in this list will trigger the\r\n     * event subscriptions.\r\n     *\r\n     */\r\n    monitoredPacketIds?: PacketId[];\r\n}\r",
            "jsdoc": "/**\r\n * Options for events triggered by network packets.\r\n */\r",
            "properties": [
              {
                "name": "ignoredPacketIds",
                "type": "PacketId[]",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "monitoredPacketIds",
                "type": "PacketId[]",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "Networking"
            ],
            "tags": [],
            "keywords": [
              "packeteventoptions",
              "interface"
            ],
            "stability": "stable"
          }
        ],
        "functions": [],
        "types": [],
        "constants": [],
        "events": []
      }
    },
    "@minecraft/server-ui": {
      "module": "@minecraft/server-ui",
      "version": "1.2.0",
      "description": "Contains types for creating and managing user interface forms.",
      "elements": [
        {
          "id": "@minecraft/server-ui.FormCancelationReason",
          "name": "FormCancelationReason",
          "type": "enum",
          "module": "@minecraft/server-ui",
          "description": "expressing simple dialog-based user experiences.\r  captions and images that can be used for presenting a set of\r options to a player.\r experiences that are functional for Yes/No or OK/Cancel\r questions.\r \"questionnaire-style\" list of controls that can be used to\r take input.\r  Manifest Details\r ```json\r {\r   \"version\": \"2.0.0\"\r }\r ```\r  /",
          "definition": "export enum FormCancelationReason {\n    UserBusy = 'UserBusy',\r\n    UserClosed = 'UserClosed',\r\n}\r",
          "jsdoc": "/**\r\n * @packageDocumentation\r\n * The `@minecraft/server-ui` module contains types for\r\n * expressing simple dialog-based user experiences.\r\n *\r\n *   * {@link ActionFormData} contain a list of buttons with\r\n * captions and images that can be used for presenting a set of\r\n * options to a player.\r\n *   * {@link MessageFormData} are simple two-button message\r\n * experiences that are functional for Yes/No or OK/Cancel\r\n * questions.\r\n *   * {@link ModalFormData} allow for a more flexible\r\n * \"questionnaire-style\" list of controls that can be used to\r\n * take input.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-ui\",\r\n *   \"version\": \"2.0.0\"\r\n * }\r\n * ```\r\n *\r\n */\r",
          "enumValues": [
            {
              "name": "UserBusy",
              "value": "UserBusy"
            },
            {
              "name": "UserClosed",
              "value": "UserClosed"
            }
          ],
          "categories": [
            "Enums",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "formcancelationreason",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.FormRejectReason",
          "name": "FormRejectReason",
          "type": "enum",
          "module": "@minecraft/server-ui",
          "definition": "export enum FormRejectReason {\n    MalformedResponse = 'MalformedResponse',\r\n    PlayerQuit = 'PlayerQuit',\r\n    ServerShutdown = 'ServerShutdown',\r\n}\r",
          "jsdoc": "",
          "enumValues": [
            {
              "name": "MalformedResponse",
              "value": "MalformedResponse"
            },
            {
              "name": "PlayerQuit",
              "value": "PlayerQuit"
            },
            {
              "name": "ServerShutdown",
              "value": "ServerShutdown"
            }
          ],
          "categories": [
            "Enums",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "formrejectreason",
            "enum"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.ActionFormData",
          "name": "ActionFormData",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "Builds a simple player form with buttons that let the player\r take action.\r ```typescript\r  function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const playerList = world.getPlayers();\r    if (playerList.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Test Title\")\r       .body(\"Body text here!\")\r       .button(\"btn 1\")\r       .button(\"btn 2\")\r       .button(\"btn 3\")\r       .button(\"btn 4\")\r       .button(\"btn 5\");\r      form.show(playerList[0]).then((result: ActionFormResponse) => {\r       if (result.canceled) {\r         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r         return -1;\r       } else {\r         log(\"Your result was: \" + result.selection);\r       }\r     });\r   }\r }\r ```\r ```typescript\r  function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Months\")\r       .body(\"Choose your favorite month!\")\r       .button(\"January\")\r       .button(\"February\")\r       .button(\"March\")\r       .button(\"April\")\r       .button(\"May\");\r      form.show(players[0]).then((response: ActionFormResponse) => {\r       if (response.selection === 3) {\r         log(\"I like April too!\");\r         return -1;\r       }\r     });\r   }\r }\r ```\r /",
          "definition": "export class ActionFormData {\n    /**\r\n     * @remarks\r\n     * Method that sets the body text for the modal form.\r\n     *\r\n     */\r\n    body(bodyText: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a button to this form with an icon from a resource\r\n     * pack.\r\n     *\r\n     */\r\n    button(text: minecraftserver.RawMessage | string, iconPath?: string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a section divider to the form.\r\n     *\r\n     */\r\n    divider(): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a header to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    header(text: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a label to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    label(text: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<ActionFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): ActionFormData;\r\n}\r",
          "jsdoc": "/**\r\n * Builds a simple player form with buttons that let the player\r\n * take action.\r\n * @example showActionForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const playerList = world.getPlayers();\r\n *\r\n *   if (playerList.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Test Title\")\r\n *       .body(\"Body text here!\")\r\n *       .button(\"btn 1\")\r\n *       .button(\"btn 2\")\r\n *       .button(\"btn 3\")\r\n *       .button(\"btn 4\")\r\n *       .button(\"btn 5\");\r\n *\r\n *     form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n *       if (result.canceled) {\r\n *         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n *         return -1;\r\n *       } else {\r\n *         log(\"Your result was: \" + result.selection);\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n * @example showFavoriteMonth.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Months\")\r\n *       .body(\"Choose your favorite month!\")\r\n *       .button(\"January\")\r\n *       .button(\"February\")\r\n *       .button(\"March\")\r\n *       .button(\"April\")\r\n *       .button(\"May\");\r\n *\r\n *     form.show(players[0]).then((response: ActionFormResponse) => {\r\n *       if (response.selection === 3) {\r\n *         log(\"I like April too!\");\r\n *         return -1;\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "body",
              "parameters": [],
              "returnType": "ActionFormData",
              "accessibility": "public",
              "signature": "body(bodyText: minecraftserver.RawMessage | string): ActionFormData"
            },
            {
              "name": "button",
              "parameters": [],
              "returnType": "ActionFormData",
              "accessibility": "public",
              "signature": "button(text: minecraftserver.RawMessage | string, iconPath?: string): ActionFormData"
            },
            {
              "name": "divider",
              "parameters": [],
              "returnType": "ActionFormData",
              "accessibility": "public",
              "signature": "divider(): ActionFormData"
            },
            {
              "name": "header",
              "parameters": [],
              "returnType": "ActionFormData",
              "accessibility": "public",
              "signature": "header(text: minecraftserver.RawMessage | string): ActionFormData"
            },
            {
              "name": "label",
              "parameters": [],
              "returnType": "ActionFormData",
              "accessibility": "public",
              "signature": "label(text: minecraftserver.RawMessage | string): ActionFormData"
            },
            {
              "name": "show",
              "parameters": [],
              "returnType": "Promise<ActionFormResponse>",
              "accessibility": "public",
              "signature": "show(player: minecraftserver.Player): Promise<ActionFormResponse>"
            },
            {
              "name": "title",
              "parameters": [],
              "returnType": "ActionFormData",
              "accessibility": "public",
              "signature": "title(titleText: minecraftserver.RawMessage | string): ActionFormData"
            }
          ],
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "actionformdata",
            "class"
          ],
          "examples": [
            {
              "title": "showActionForm.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const playerList = world.getPlayers();\r\n\n  if (playerList.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Test Title\")\r\n      .body(\"Body text here!\")\r\n      .button(\"btn 1\")\r\n      .button(\"btn 2\")\r\n      .button(\"btn 3\")\r\n      .button(\"btn 4\")\r\n      .button(\"btn 5\");\r\n\n    form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n      if (result.canceled) {\r\n        log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n        return -1;\r\n      } else {\r\n        log(\"Your result was: \" + result.selection);\r\n      }\r\n    });\r\n  }\r\n}"
            },
            {
              "title": "showFavoriteMonth.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Months\")\r\n      .body(\"Choose your favorite month!\")\r\n      .button(\"January\")\r\n      .button(\"February\")\r\n      .button(\"March\")\r\n      .button(\"April\")\r\n      .button(\"May\");\r\n\n    form.show(players[0]).then((response: ActionFormResponse) => {\r\n      if (response.selection === 3) {\r\n        log(\"I like April too!\");\r\n        return -1;\r\n      }\r\n    });\r\n  }\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.ActionFormResponse",
          "name": "ActionFormResponse",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "Returns data about the player results from a modal action\r form.\r ```typescript\r  function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const playerList = world.getPlayers();\r    if (playerList.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Test Title\")\r       .body(\"Body text here!\")\r       .button(\"btn 1\")\r       .button(\"btn 2\")\r       .button(\"btn 3\")\r       .button(\"btn 4\")\r       .button(\"btn 5\");\r      form.show(playerList[0]).then((result: ActionFormResponse) => {\r       if (result.canceled) {\r         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r         return -1;\r       } else {\r         log(\"Your result was: \" + result.selection);\r       }\r     });\r   }\r }\r ```\r ```typescript\r  function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Months\")\r       .body(\"Choose your favorite month!\")\r       .button(\"January\")\r       .button(\"February\")\r       .button(\"March\")\r       .button(\"April\")\r       .button(\"May\");\r      form.show(players[0]).then((response: ActionFormResponse) => {\r       if (response.selection === 3) {\r         log(\"I like April too!\");\r         return -1;\r       }\r     });\r   }\r }\r ```\r /",
          "definition": "export class ActionFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the index of the button that was pushed.\r\n     *\r\n     */\r\n    readonly selection?: number;\r\n}\r",
          "jsdoc": "/**\r\n * Returns data about the player results from a modal action\r\n * form.\r\n * @example showActionForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const playerList = world.getPlayers();\r\n *\r\n *   if (playerList.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Test Title\")\r\n *       .body(\"Body text here!\")\r\n *       .button(\"btn 1\")\r\n *       .button(\"btn 2\")\r\n *       .button(\"btn 3\")\r\n *       .button(\"btn 4\")\r\n *       .button(\"btn 5\");\r\n *\r\n *     form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n *       if (result.canceled) {\r\n *         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n *         return -1;\r\n *       } else {\r\n *         log(\"Your result was: \" + result.selection);\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n * @example showFavoriteMonth.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Months\")\r\n *       .body(\"Choose your favorite month!\")\r\n *       .button(\"January\")\r\n *       .button(\"February\")\r\n *       .button(\"March\")\r\n *       .button(\"April\")\r\n *       .button(\"May\");\r\n *\r\n *     form.show(players[0]).then((response: ActionFormResponse) => {\r\n *       if (response.selection === 3) {\r\n *         log(\"I like April too!\");\r\n *         return -1;\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "FormResponse",
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "actionformresponse",
            "class"
          ],
          "examples": [
            {
              "title": "showActionForm.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const playerList = world.getPlayers();\r\n\n  if (playerList.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Test Title\")\r\n      .body(\"Body text here!\")\r\n      .button(\"btn 1\")\r\n      .button(\"btn 2\")\r\n      .button(\"btn 3\")\r\n      .button(\"btn 4\")\r\n      .button(\"btn 5\");\r\n\n    form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n      if (result.canceled) {\r\n        log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n        return -1;\r\n      } else {\r\n        log(\"Your result was: \" + result.selection);\r\n      }\r\n    });\r\n  }\r\n}"
            },
            {
              "title": "showFavoriteMonth.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Months\")\r\n      .body(\"Choose your favorite month!\")\r\n      .button(\"January\")\r\n      .button(\"February\")\r\n      .button(\"March\")\r\n      .button(\"April\")\r\n      .button(\"May\");\r\n\n    form.show(players[0]).then((response: ActionFormResponse) => {\r\n      if (response.selection === 3) {\r\n        log(\"I like April too!\");\r\n        return -1;\r\n      }\r\n    });\r\n  }\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.FormResponse",
          "name": "FormResponse",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "Base type for a form response.\r /",
          "definition": "export class FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Contains additional details as to why a form was canceled.\r\n     *\r\n     */\r\n    readonly cancelationReason?: FormCancelationReason;\r\n    /**\r\n     * @remarks\r\n     * If true, the form was canceled by the player (e.g., they\r\n     * selected the pop-up X close button).\r\n     *\r\n     */\r\n    readonly canceled: boolean;\r\n}\r",
          "jsdoc": "/**\r\n * Base type for a form response.\r\n */\r",
          "properties": [
            {
              "name": "canceled",
              "type": "boolean",
              "readonly": true,
              "accessibility": "public"
            }
          ],
          "methods": [],
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "formresponse",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.MessageFormData",
          "name": "MessageFormData",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "Builds a simple two-button modal dialog.\r ```typescript\r  function showBasicMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title(\"Message Form Example\")\r     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r     .button1(\"Button 1\")\r     .button2(\"Button 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
          "definition": "export class MessageFormData {\n    /**\r\n     * @remarks\r\n     * Method that sets the body text for the modal form.\r\n     *\r\n     */\r\n    body(bodyText: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * Method that sets the text for the first button of the\r\n     * dialog.\r\n     *\r\n     */\r\n    button1(text: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * This method sets the text for the second button on the\r\n     * dialog.\r\n     *\r\n     */\r\n    button2(text: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<MessageFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): MessageFormData;\r\n}\r",
          "jsdoc": "/**\r\n * Builds a simple two-button modal dialog.\r\n * @example showBasicMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title(\"Message Form Example\")\r\n *     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n *     .button1(\"Button 1\")\r\n *     .button2(\"Button 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "body",
              "parameters": [],
              "returnType": "MessageFormData",
              "accessibility": "public",
              "signature": "body(bodyText: minecraftserver.RawMessage | string): MessageFormData"
            },
            {
              "name": "button1",
              "parameters": [],
              "returnType": "MessageFormData",
              "accessibility": "public",
              "signature": "button1(text: minecraftserver.RawMessage | string): MessageFormData"
            },
            {
              "name": "button2",
              "parameters": [],
              "returnType": "MessageFormData",
              "accessibility": "public",
              "signature": "button2(text: minecraftserver.RawMessage | string): MessageFormData"
            },
            {
              "name": "show",
              "parameters": [],
              "returnType": "Promise<MessageFormResponse>",
              "accessibility": "public",
              "signature": "show(player: minecraftserver.Player): Promise<MessageFormResponse>"
            },
            {
              "name": "title",
              "parameters": [],
              "returnType": "MessageFormData",
              "accessibility": "public",
              "signature": "title(titleText: minecraftserver.RawMessage | string): MessageFormData"
            }
          ],
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "messageformdata",
            "class"
          ],
          "examples": [
            {
              "title": "showBasicMessageForm.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title(\"Message Form Example\")\r\n    .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n    .button1(\"Button 1\")\r\n    .button2(\"Button 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
            },
            {
              "title": "showTranslatedMessageForm.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showTranslatedMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title({ translate: \"permissions.removeplayer\" })\r\n    .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n    .button1(\"Player 1\")\r\n    .button2(\"Player 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.MessageFormResponse",
          "name": "MessageFormResponse",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "Returns data about the player results from a modal message\r form.\r ```typescript\r  function showBasicMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title(\"Message Form Example\")\r     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r     .button1(\"Button 1\")\r     .button2(\"Button 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
          "definition": "export class MessageFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the index of the button that was pushed.\r\n     *\r\n     */\r\n    readonly selection?: number;\r\n}\r",
          "jsdoc": "/**\r\n * Returns data about the player results from a modal message\r\n * form.\r\n * @example showBasicMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title(\"Message Form Example\")\r\n *     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n *     .button1(\"Button 1\")\r\n *     .button2(\"Button 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "FormResponse",
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "messageformresponse",
            "class"
          ],
          "examples": [
            {
              "title": "showBasicMessageForm.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title(\"Message Form Example\")\r\n    .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n    .button1(\"Button 1\")\r\n    .button2(\"Button 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
            },
            {
              "title": "showTranslatedMessageForm.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showTranslatedMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title({ translate: \"permissions.removeplayer\" })\r\n    .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n    .button1(\"Player 1\")\r\n    .button2(\"Player 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.ModalFormData",
          "name": "ModalFormData",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "Used to create a fully customizable pop-up form for a\r player.\r ```typescript\r  function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r    modalForm.toggle(\"Toggle w/o default\");\r   modalForm.toggle(\"Toggle w/ default\", true);\r    modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r    modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r    modalForm.textField(\"Input w/o default\", \"type text here\");\r   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r    modalForm\r     .show(players[0])\r     .then((formData) => {\r       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
          "definition": "export class ModalFormData {\n    /**\r\n     * @remarks\r\n     * Adds a section divider to the form.\r\n     *\r\n     */\r\n    divider(): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a dropdown with choices to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the dropdown.\r\n     * @param items\r\n     * The selectable items for the dropdown.\r\n     * @param dropdownOptions\r\n     * The optional additional values for the dropdown creation.\r\n     */\r\n    dropdown(\r\n        label: minecraftserver.RawMessage | string,\r\n        items: (minecraftserver.RawMessage | string)[],\r\n        dropdownOptions?: ModalFormDataDropdownOptions,\r\n    ): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a header to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    header(text: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a label to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    label(text: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<ModalFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * Adds a numeric slider to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the slider.\r\n     * @param minimumValue\r\n     * The minimum selectable possible value.\r\n     * @param maximumValue\r\n     * The maximum selectable possible value.\r\n     * @param sliderOptions\r\n     * The optional additional values for the slider creation.\r\n     */\r\n    slider(\r\n        label: minecraftserver.RawMessage | string,\r\n        minimumValue: number,\r\n        maximumValue: number,\r\n        sliderOptions?: ModalFormDataSliderOptions,\r\n    ): ModalFormData;\r\n    submitButton(submitButtonText: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a textbox to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the textfield.\r\n     * @param placeholderText\r\n     * The place holder text to display.\r\n     * @param textFieldOptions\r\n     * The optional additional values for the textfield creation.\r\n     */\r\n    textField(\r\n        label: minecraftserver.RawMessage | string,\r\n        placeholderText: minecraftserver.RawMessage | string,\r\n        textFieldOptions?: ModalFormDataTextFieldOptions,\r\n    ): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a toggle checkbox button to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the toggle.\r\n     * @param toggleOptions\r\n     * The optional additional values for the toggle creation.\r\n     */\r\n    toggle(label: minecraftserver.RawMessage | string, toggleOptions?: ModalFormDataToggleOptions): ModalFormData;\r\n}\r",
          "jsdoc": "/**\r\n * Used to create a fully customizable pop-up form for a\r\n * player.\r\n * @example showBasicModalForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ModalFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n *\r\n *   modalForm.toggle(\"Toggle w/o default\");\r\n *   modalForm.toggle(\"Toggle w/ default\", true);\r\n *\r\n *   modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n *   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n *\r\n *   modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n *   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n *\r\n *   modalForm.textField(\"Input w/o default\", \"type text here\");\r\n *   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n *\r\n *   modalForm\r\n *     .show(players[0])\r\n *     .then((formData) => {\r\n *       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [
            {
              "name": "divider",
              "parameters": [],
              "returnType": "ModalFormData",
              "accessibility": "public",
              "signature": "divider(): ModalFormData"
            },
            {
              "name": "header",
              "parameters": [],
              "returnType": "ModalFormData",
              "accessibility": "public",
              "signature": "header(text: minecraftserver.RawMessage | string): ModalFormData"
            },
            {
              "name": "label",
              "parameters": [],
              "returnType": "ModalFormData",
              "accessibility": "public",
              "signature": "label(text: minecraftserver.RawMessage | string): ModalFormData"
            },
            {
              "name": "show",
              "parameters": [],
              "returnType": "Promise<ModalFormResponse>",
              "accessibility": "public",
              "signature": "show(player: minecraftserver.Player): Promise<ModalFormResponse>"
            },
            {
              "name": "submitButton",
              "parameters": [],
              "returnType": "ModalFormData",
              "accessibility": "public",
              "signature": "submitButton(submitButtonText: minecraftserver.RawMessage | string): ModalFormData"
            },
            {
              "name": "title",
              "parameters": [],
              "returnType": "ModalFormData",
              "accessibility": "public",
              "signature": "title(titleText: minecraftserver.RawMessage | string): ModalFormData"
            },
            {
              "name": "toggle",
              "parameters": [],
              "returnType": "ModalFormData",
              "accessibility": "public",
              "signature": "toggle(label: minecraftserver.RawMessage | string, toggleOptions?: ModalFormDataToggleOptions): ModalFormData"
            }
          ],
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "modalformdata",
            "class"
          ],
          "examples": [
            {
              "title": "showBasicModalForm.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n\n  modalForm.toggle(\"Toggle w/o default\");\r\n  modalForm.toggle(\"Toggle w/ default\", true);\r\n\n  modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n  modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n\n  modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n  modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n\n  modalForm.textField(\"Input w/o default\", \"type text here\");\r\n  modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n\n  modalForm\r\n    .show(players[0])\r\n    .then((formData) => {\r\n      players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.ModalFormResponse",
          "name": "ModalFormResponse",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "Returns data about player responses to a modal form.\r ```typescript\r  function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r    modalForm.toggle(\"Toggle w/o default\");\r   modalForm.toggle(\"Toggle w/ default\", true);\r    modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r    modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r    modalForm.textField(\"Input w/o default\", \"type text here\");\r   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r    modalForm\r     .show(players[0])\r     .then((formData) => {\r       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
          "definition": "export class ModalFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * An ordered set of values based on the order of controls\r\n     * specified by ModalFormData.\r\n     *\r\n     */\r\n    readonly formValues?: (boolean | number | string | undefined)[];\r\n}\r",
          "jsdoc": "/**\r\n * Returns data about player responses to a modal form.\r\n * @example showBasicModalForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ModalFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n *\r\n *   modalForm.toggle(\"Toggle w/o default\");\r\n *   modalForm.toggle(\"Toggle w/ default\", true);\r\n *\r\n *   modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n *   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n *\r\n *   modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n *   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n *\r\n *   modalForm.textField(\"Input w/o default\", \"type text here\");\r\n *   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n *\r\n *   modalForm\r\n *     .show(players[0])\r\n *     .then((formData) => {\r\n *       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
          "properties": [],
          "methods": [],
          "extends": "FormResponse",
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "modalformresponse",
            "class"
          ],
          "examples": [
            {
              "title": "showBasicModalForm.ts",
              "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n\n  modalForm.toggle(\"Toggle w/o default\");\r\n  modalForm.toggle(\"Toggle w/ default\", true);\r\n\n  modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n  modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n\n  modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n  modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n\n  modalForm.textField(\"Input w/o default\", \"type text here\");\r\n  modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n\n  modalForm\r\n    .show(players[0])\r\n    .then((formData) => {\r\n      players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
            }
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.UIManager",
          "name": "UIManager",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "An ordered set of values based on the order of controls\r specified by ModalFormData.",
          "definition": "export class UIManager {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    closeAllForms(player: minecraftserver.Player): void;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * An ordered set of values based on the order of controls\r\n     * specified by ModalFormData.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [
            {
              "name": "closeAllForms",
              "parameters": [],
              "returnType": "void",
              "accessibility": "public",
              "signature": "closeAllForms(player: minecraftserver.Player): void"
            }
          ],
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "uimanager",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.ModalFormDataDropdownOptions",
          "name": "ModalFormDataDropdownOptions",
          "type": "interface",
          "module": "@minecraft/server-ui",
          "description": "additional options for the dropdown creation.\r /",
          "definition": "export interface ModalFormDataDropdownOptions {\n    /**\r\n     * @remarks\r\n     * The default selected item index. It will be zero in case of\r\n     * not setting this value.\r\n     *\r\n     */\r\n    defaultValueIndex?: number;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
          "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.dropdown} to provide\r\n * additional options for the dropdown creation.\r\n */\r",
          "properties": [
            {
              "name": "defaultValueIndex",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "tooltip",
              "type": "minecraftserver.RawMessage | string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "modalformdatadropdownoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.ModalFormDataSliderOptions",
          "name": "ModalFormDataSliderOptions",
          "type": "interface",
          "module": "@minecraft/server-ui",
          "description": "additional options for the slider creation.\r /",
          "definition": "export interface ModalFormDataSliderOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the slider.\r\n     *\r\n     */\r\n    defaultValue?: number;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n    /**\r\n     * @remarks\r\n     * Defines the increment of values that the slider generates\r\n     * when moved. It will be '1' in case of not providing this.\r\n     *\r\n     */\r\n    valueStep?: number;\r\n}\r",
          "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.slider} to provide\r\n * additional options for the slider creation.\r\n */\r",
          "properties": [
            {
              "name": "defaultValue",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "tooltip",
              "type": "minecraftserver.RawMessage | string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "valueStep",
              "type": "number",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "modalformdataslideroptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.ModalFormDataTextFieldOptions",
          "name": "ModalFormDataTextFieldOptions",
          "type": "interface",
          "module": "@minecraft/server-ui",
          "description": "additional options for the textfield creation.\r /",
          "definition": "export interface ModalFormDataTextFieldOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the textfield.\r\n     *\r\n     */\r\n    defaultValue?: string;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
          "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.textField} to provide\r\n * additional options for the textfield creation.\r\n */\r",
          "properties": [
            {
              "name": "defaultValue",
              "type": "string",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "tooltip",
              "type": "minecraftserver.RawMessage | string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "modalformdatatextfieldoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.ModalFormDataToggleOptions",
          "name": "ModalFormDataToggleOptions",
          "type": "interface",
          "module": "@minecraft/server-ui",
          "description": "additional options for the toggle creation.\r /",
          "definition": "export interface ModalFormDataToggleOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the toggle.\r\n     *\r\n     */\r\n    defaultValue?: boolean;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
          "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.toggle} to provide\r\n * additional options for the toggle creation.\r\n */\r",
          "properties": [
            {
              "name": "defaultValue",
              "type": "boolean",
              "optional": true,
              "accessibility": "public"
            },
            {
              "name": "tooltip",
              "type": "minecraftserver.RawMessage | string",
              "optional": true,
              "accessibility": "public"
            }
          ],
          "categories": [
            "Interfaces",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "modalformdatatoggleoptions",
            "interface"
          ],
          "stability": "stable"
        },
        {
          "id": "@minecraft/server-ui.FormRejectError",
          "name": "FormRejectError",
          "type": "class",
          "module": "@minecraft/server-ui",
          "description": "It will show an exclamation icon that will display a tooltip\r if it is hovered.",
          "definition": "export class FormRejectError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: FormRejectReason;\r\n}\r",
          "jsdoc": "    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r",
          "properties": [],
          "methods": [],
          "extends": "Error",
          "categories": [
            "Classes",
            "UI"
          ],
          "tags": [],
          "keywords": [
            "formrejecterror",
            "class"
          ],
          "examples": [],
          "stability": "stable"
        }
      ],
      "exports": {
        "enums": [
          {
            "id": "@minecraft/server-ui.FormCancelationReason",
            "name": "FormCancelationReason",
            "type": "enum",
            "module": "@minecraft/server-ui",
            "description": "expressing simple dialog-based user experiences.\r  captions and images that can be used for presenting a set of\r options to a player.\r experiences that are functional for Yes/No or OK/Cancel\r questions.\r \"questionnaire-style\" list of controls that can be used to\r take input.\r  Manifest Details\r ```json\r {\r   \"version\": \"2.0.0\"\r }\r ```\r  /",
            "definition": "export enum FormCancelationReason {\n    UserBusy = 'UserBusy',\r\n    UserClosed = 'UserClosed',\r\n}\r",
            "jsdoc": "/**\r\n * @packageDocumentation\r\n * The `@minecraft/server-ui` module contains types for\r\n * expressing simple dialog-based user experiences.\r\n *\r\n *   * {@link ActionFormData} contain a list of buttons with\r\n * captions and images that can be used for presenting a set of\r\n * options to a player.\r\n *   * {@link MessageFormData} are simple two-button message\r\n * experiences that are functional for Yes/No or OK/Cancel\r\n * questions.\r\n *   * {@link ModalFormData} allow for a more flexible\r\n * \"questionnaire-style\" list of controls that can be used to\r\n * take input.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-ui\",\r\n *   \"version\": \"2.0.0\"\r\n * }\r\n * ```\r\n *\r\n */\r",
            "enumValues": [
              {
                "name": "UserBusy",
                "value": "UserBusy"
              },
              {
                "name": "UserClosed",
                "value": "UserClosed"
              }
            ],
            "categories": [
              "Enums",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "formcancelationreason",
              "enum"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.FormRejectReason",
            "name": "FormRejectReason",
            "type": "enum",
            "module": "@minecraft/server-ui",
            "definition": "export enum FormRejectReason {\n    MalformedResponse = 'MalformedResponse',\r\n    PlayerQuit = 'PlayerQuit',\r\n    ServerShutdown = 'ServerShutdown',\r\n}\r",
            "jsdoc": "",
            "enumValues": [
              {
                "name": "MalformedResponse",
                "value": "MalformedResponse"
              },
              {
                "name": "PlayerQuit",
                "value": "PlayerQuit"
              },
              {
                "name": "ServerShutdown",
                "value": "ServerShutdown"
              }
            ],
            "categories": [
              "Enums",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "formrejectreason",
              "enum"
            ],
            "stability": "stable"
          }
        ],
        "classes": [
          {
            "id": "@minecraft/server-ui.ActionFormData",
            "name": "ActionFormData",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "Builds a simple player form with buttons that let the player\r take action.\r ```typescript\r  function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const playerList = world.getPlayers();\r    if (playerList.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Test Title\")\r       .body(\"Body text here!\")\r       .button(\"btn 1\")\r       .button(\"btn 2\")\r       .button(\"btn 3\")\r       .button(\"btn 4\")\r       .button(\"btn 5\");\r      form.show(playerList[0]).then((result: ActionFormResponse) => {\r       if (result.canceled) {\r         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r         return -1;\r       } else {\r         log(\"Your result was: \" + result.selection);\r       }\r     });\r   }\r }\r ```\r ```typescript\r  function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Months\")\r       .body(\"Choose your favorite month!\")\r       .button(\"January\")\r       .button(\"February\")\r       .button(\"March\")\r       .button(\"April\")\r       .button(\"May\");\r      form.show(players[0]).then((response: ActionFormResponse) => {\r       if (response.selection === 3) {\r         log(\"I like April too!\");\r         return -1;\r       }\r     });\r   }\r }\r ```\r /",
            "definition": "export class ActionFormData {\n    /**\r\n     * @remarks\r\n     * Method that sets the body text for the modal form.\r\n     *\r\n     */\r\n    body(bodyText: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a button to this form with an icon from a resource\r\n     * pack.\r\n     *\r\n     */\r\n    button(text: minecraftserver.RawMessage | string, iconPath?: string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a section divider to the form.\r\n     *\r\n     */\r\n    divider(): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a header to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    header(text: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a label to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    label(text: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<ActionFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): ActionFormData;\r\n}\r",
            "jsdoc": "/**\r\n * Builds a simple player form with buttons that let the player\r\n * take action.\r\n * @example showActionForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const playerList = world.getPlayers();\r\n *\r\n *   if (playerList.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Test Title\")\r\n *       .body(\"Body text here!\")\r\n *       .button(\"btn 1\")\r\n *       .button(\"btn 2\")\r\n *       .button(\"btn 3\")\r\n *       .button(\"btn 4\")\r\n *       .button(\"btn 5\");\r\n *\r\n *     form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n *       if (result.canceled) {\r\n *         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n *         return -1;\r\n *       } else {\r\n *         log(\"Your result was: \" + result.selection);\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n * @example showFavoriteMonth.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Months\")\r\n *       .body(\"Choose your favorite month!\")\r\n *       .button(\"January\")\r\n *       .button(\"February\")\r\n *       .button(\"March\")\r\n *       .button(\"April\")\r\n *       .button(\"May\");\r\n *\r\n *     form.show(players[0]).then((response: ActionFormResponse) => {\r\n *       if (response.selection === 3) {\r\n *         log(\"I like April too!\");\r\n *         return -1;\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "body",
                "parameters": [],
                "returnType": "ActionFormData",
                "accessibility": "public",
                "signature": "body(bodyText: minecraftserver.RawMessage | string): ActionFormData"
              },
              {
                "name": "button",
                "parameters": [],
                "returnType": "ActionFormData",
                "accessibility": "public",
                "signature": "button(text: minecraftserver.RawMessage | string, iconPath?: string): ActionFormData"
              },
              {
                "name": "divider",
                "parameters": [],
                "returnType": "ActionFormData",
                "accessibility": "public",
                "signature": "divider(): ActionFormData"
              },
              {
                "name": "header",
                "parameters": [],
                "returnType": "ActionFormData",
                "accessibility": "public",
                "signature": "header(text: minecraftserver.RawMessage | string): ActionFormData"
              },
              {
                "name": "label",
                "parameters": [],
                "returnType": "ActionFormData",
                "accessibility": "public",
                "signature": "label(text: minecraftserver.RawMessage | string): ActionFormData"
              },
              {
                "name": "show",
                "parameters": [],
                "returnType": "Promise<ActionFormResponse>",
                "accessibility": "public",
                "signature": "show(player: minecraftserver.Player): Promise<ActionFormResponse>"
              },
              {
                "name": "title",
                "parameters": [],
                "returnType": "ActionFormData",
                "accessibility": "public",
                "signature": "title(titleText: minecraftserver.RawMessage | string): ActionFormData"
              }
            ],
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "actionformdata",
              "class"
            ],
            "examples": [
              {
                "title": "showActionForm.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const playerList = world.getPlayers();\r\n\n  if (playerList.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Test Title\")\r\n      .body(\"Body text here!\")\r\n      .button(\"btn 1\")\r\n      .button(\"btn 2\")\r\n      .button(\"btn 3\")\r\n      .button(\"btn 4\")\r\n      .button(\"btn 5\");\r\n\n    form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n      if (result.canceled) {\r\n        log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n        return -1;\r\n      } else {\r\n        log(\"Your result was: \" + result.selection);\r\n      }\r\n    });\r\n  }\r\n}"
              },
              {
                "title": "showFavoriteMonth.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Months\")\r\n      .body(\"Choose your favorite month!\")\r\n      .button(\"January\")\r\n      .button(\"February\")\r\n      .button(\"March\")\r\n      .button(\"April\")\r\n      .button(\"May\");\r\n\n    form.show(players[0]).then((response: ActionFormResponse) => {\r\n      if (response.selection === 3) {\r\n        log(\"I like April too!\");\r\n        return -1;\r\n      }\r\n    });\r\n  }\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.ActionFormResponse",
            "name": "ActionFormResponse",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "Returns data about the player results from a modal action\r form.\r ```typescript\r  function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const playerList = world.getPlayers();\r    if (playerList.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Test Title\")\r       .body(\"Body text here!\")\r       .button(\"btn 1\")\r       .button(\"btn 2\")\r       .button(\"btn 3\")\r       .button(\"btn 4\")\r       .button(\"btn 5\");\r      form.show(playerList[0]).then((result: ActionFormResponse) => {\r       if (result.canceled) {\r         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r         return -1;\r       } else {\r         log(\"Your result was: \" + result.selection);\r       }\r     });\r   }\r }\r ```\r ```typescript\r  function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Months\")\r       .body(\"Choose your favorite month!\")\r       .button(\"January\")\r       .button(\"February\")\r       .button(\"March\")\r       .button(\"April\")\r       .button(\"May\");\r      form.show(players[0]).then((response: ActionFormResponse) => {\r       if (response.selection === 3) {\r         log(\"I like April too!\");\r         return -1;\r       }\r     });\r   }\r }\r ```\r /",
            "definition": "export class ActionFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the index of the button that was pushed.\r\n     *\r\n     */\r\n    readonly selection?: number;\r\n}\r",
            "jsdoc": "/**\r\n * Returns data about the player results from a modal action\r\n * form.\r\n * @example showActionForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const playerList = world.getPlayers();\r\n *\r\n *   if (playerList.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Test Title\")\r\n *       .body(\"Body text here!\")\r\n *       .button(\"btn 1\")\r\n *       .button(\"btn 2\")\r\n *       .button(\"btn 3\")\r\n *       .button(\"btn 4\")\r\n *       .button(\"btn 5\");\r\n *\r\n *     form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n *       if (result.canceled) {\r\n *         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n *         return -1;\r\n *       } else {\r\n *         log(\"Your result was: \" + result.selection);\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n * @example showFavoriteMonth.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Months\")\r\n *       .body(\"Choose your favorite month!\")\r\n *       .button(\"January\")\r\n *       .button(\"February\")\r\n *       .button(\"March\")\r\n *       .button(\"April\")\r\n *       .button(\"May\");\r\n *\r\n *     form.show(players[0]).then((response: ActionFormResponse) => {\r\n *       if (response.selection === 3) {\r\n *         log(\"I like April too!\");\r\n *         return -1;\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "FormResponse",
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "actionformresponse",
              "class"
            ],
            "examples": [
              {
                "title": "showActionForm.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const playerList = world.getPlayers();\r\n\n  if (playerList.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Test Title\")\r\n      .body(\"Body text here!\")\r\n      .button(\"btn 1\")\r\n      .button(\"btn 2\")\r\n      .button(\"btn 3\")\r\n      .button(\"btn 4\")\r\n      .button(\"btn 5\");\r\n\n    form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n      if (result.canceled) {\r\n        log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n        return -1;\r\n      } else {\r\n        log(\"Your result was: \" + result.selection);\r\n      }\r\n    });\r\n  }\r\n}"
              },
              {
                "title": "showFavoriteMonth.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Months\")\r\n      .body(\"Choose your favorite month!\")\r\n      .button(\"January\")\r\n      .button(\"February\")\r\n      .button(\"March\")\r\n      .button(\"April\")\r\n      .button(\"May\");\r\n\n    form.show(players[0]).then((response: ActionFormResponse) => {\r\n      if (response.selection === 3) {\r\n        log(\"I like April too!\");\r\n        return -1;\r\n      }\r\n    });\r\n  }\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.FormResponse",
            "name": "FormResponse",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "Base type for a form response.\r /",
            "definition": "export class FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Contains additional details as to why a form was canceled.\r\n     *\r\n     */\r\n    readonly cancelationReason?: FormCancelationReason;\r\n    /**\r\n     * @remarks\r\n     * If true, the form was canceled by the player (e.g., they\r\n     * selected the pop-up X close button).\r\n     *\r\n     */\r\n    readonly canceled: boolean;\r\n}\r",
            "jsdoc": "/**\r\n * Base type for a form response.\r\n */\r",
            "properties": [
              {
                "name": "canceled",
                "type": "boolean",
                "readonly": true,
                "accessibility": "public"
              }
            ],
            "methods": [],
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "formresponse",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.MessageFormData",
            "name": "MessageFormData",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "Builds a simple two-button modal dialog.\r ```typescript\r  function showBasicMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title(\"Message Form Example\")\r     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r     .button1(\"Button 1\")\r     .button2(\"Button 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
            "definition": "export class MessageFormData {\n    /**\r\n     * @remarks\r\n     * Method that sets the body text for the modal form.\r\n     *\r\n     */\r\n    body(bodyText: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * Method that sets the text for the first button of the\r\n     * dialog.\r\n     *\r\n     */\r\n    button1(text: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * This method sets the text for the second button on the\r\n     * dialog.\r\n     *\r\n     */\r\n    button2(text: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<MessageFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): MessageFormData;\r\n}\r",
            "jsdoc": "/**\r\n * Builds a simple two-button modal dialog.\r\n * @example showBasicMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title(\"Message Form Example\")\r\n *     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n *     .button1(\"Button 1\")\r\n *     .button2(\"Button 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "body",
                "parameters": [],
                "returnType": "MessageFormData",
                "accessibility": "public",
                "signature": "body(bodyText: minecraftserver.RawMessage | string): MessageFormData"
              },
              {
                "name": "button1",
                "parameters": [],
                "returnType": "MessageFormData",
                "accessibility": "public",
                "signature": "button1(text: minecraftserver.RawMessage | string): MessageFormData"
              },
              {
                "name": "button2",
                "parameters": [],
                "returnType": "MessageFormData",
                "accessibility": "public",
                "signature": "button2(text: minecraftserver.RawMessage | string): MessageFormData"
              },
              {
                "name": "show",
                "parameters": [],
                "returnType": "Promise<MessageFormResponse>",
                "accessibility": "public",
                "signature": "show(player: minecraftserver.Player): Promise<MessageFormResponse>"
              },
              {
                "name": "title",
                "parameters": [],
                "returnType": "MessageFormData",
                "accessibility": "public",
                "signature": "title(titleText: minecraftserver.RawMessage | string): MessageFormData"
              }
            ],
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "messageformdata",
              "class"
            ],
            "examples": [
              {
                "title": "showBasicMessageForm.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title(\"Message Form Example\")\r\n    .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n    .button1(\"Button 1\")\r\n    .button2(\"Button 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
              },
              {
                "title": "showTranslatedMessageForm.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showTranslatedMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title({ translate: \"permissions.removeplayer\" })\r\n    .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n    .button1(\"Player 1\")\r\n    .button2(\"Player 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.MessageFormResponse",
            "name": "MessageFormResponse",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "Returns data about the player results from a modal message\r form.\r ```typescript\r  function showBasicMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title(\"Message Form Example\")\r     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r     .button1(\"Button 1\")\r     .button2(\"Button 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
            "definition": "export class MessageFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the index of the button that was pushed.\r\n     *\r\n     */\r\n    readonly selection?: number;\r\n}\r",
            "jsdoc": "/**\r\n * Returns data about the player results from a modal message\r\n * form.\r\n * @example showBasicMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title(\"Message Form Example\")\r\n *     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n *     .button1(\"Button 1\")\r\n *     .button2(\"Button 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "FormResponse",
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "messageformresponse",
              "class"
            ],
            "examples": [
              {
                "title": "showBasicMessageForm.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title(\"Message Form Example\")\r\n    .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n    .button1(\"Button 1\")\r\n    .button2(\"Button 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
              },
              {
                "title": "showTranslatedMessageForm.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showTranslatedMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title({ translate: \"permissions.removeplayer\" })\r\n    .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n    .button1(\"Player 1\")\r\n    .button2(\"Player 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.ModalFormData",
            "name": "ModalFormData",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "Used to create a fully customizable pop-up form for a\r player.\r ```typescript\r  function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r    modalForm.toggle(\"Toggle w/o default\");\r   modalForm.toggle(\"Toggle w/ default\", true);\r    modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r    modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r    modalForm.textField(\"Input w/o default\", \"type text here\");\r   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r    modalForm\r     .show(players[0])\r     .then((formData) => {\r       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
            "definition": "export class ModalFormData {\n    /**\r\n     * @remarks\r\n     * Adds a section divider to the form.\r\n     *\r\n     */\r\n    divider(): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a dropdown with choices to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the dropdown.\r\n     * @param items\r\n     * The selectable items for the dropdown.\r\n     * @param dropdownOptions\r\n     * The optional additional values for the dropdown creation.\r\n     */\r\n    dropdown(\r\n        label: minecraftserver.RawMessage | string,\r\n        items: (minecraftserver.RawMessage | string)[],\r\n        dropdownOptions?: ModalFormDataDropdownOptions,\r\n    ): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a header to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    header(text: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a label to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    label(text: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<ModalFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * Adds a numeric slider to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the slider.\r\n     * @param minimumValue\r\n     * The minimum selectable possible value.\r\n     * @param maximumValue\r\n     * The maximum selectable possible value.\r\n     * @param sliderOptions\r\n     * The optional additional values for the slider creation.\r\n     */\r\n    slider(\r\n        label: minecraftserver.RawMessage | string,\r\n        minimumValue: number,\r\n        maximumValue: number,\r\n        sliderOptions?: ModalFormDataSliderOptions,\r\n    ): ModalFormData;\r\n    submitButton(submitButtonText: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a textbox to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the textfield.\r\n     * @param placeholderText\r\n     * The place holder text to display.\r\n     * @param textFieldOptions\r\n     * The optional additional values for the textfield creation.\r\n     */\r\n    textField(\r\n        label: minecraftserver.RawMessage | string,\r\n        placeholderText: minecraftserver.RawMessage | string,\r\n        textFieldOptions?: ModalFormDataTextFieldOptions,\r\n    ): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a toggle checkbox button to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the toggle.\r\n     * @param toggleOptions\r\n     * The optional additional values for the toggle creation.\r\n     */\r\n    toggle(label: minecraftserver.RawMessage | string, toggleOptions?: ModalFormDataToggleOptions): ModalFormData;\r\n}\r",
            "jsdoc": "/**\r\n * Used to create a fully customizable pop-up form for a\r\n * player.\r\n * @example showBasicModalForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ModalFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n *\r\n *   modalForm.toggle(\"Toggle w/o default\");\r\n *   modalForm.toggle(\"Toggle w/ default\", true);\r\n *\r\n *   modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n *   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n *\r\n *   modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n *   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n *\r\n *   modalForm.textField(\"Input w/o default\", \"type text here\");\r\n *   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n *\r\n *   modalForm\r\n *     .show(players[0])\r\n *     .then((formData) => {\r\n *       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [
              {
                "name": "divider",
                "parameters": [],
                "returnType": "ModalFormData",
                "accessibility": "public",
                "signature": "divider(): ModalFormData"
              },
              {
                "name": "header",
                "parameters": [],
                "returnType": "ModalFormData",
                "accessibility": "public",
                "signature": "header(text: minecraftserver.RawMessage | string): ModalFormData"
              },
              {
                "name": "label",
                "parameters": [],
                "returnType": "ModalFormData",
                "accessibility": "public",
                "signature": "label(text: minecraftserver.RawMessage | string): ModalFormData"
              },
              {
                "name": "show",
                "parameters": [],
                "returnType": "Promise<ModalFormResponse>",
                "accessibility": "public",
                "signature": "show(player: minecraftserver.Player): Promise<ModalFormResponse>"
              },
              {
                "name": "submitButton",
                "parameters": [],
                "returnType": "ModalFormData",
                "accessibility": "public",
                "signature": "submitButton(submitButtonText: minecraftserver.RawMessage | string): ModalFormData"
              },
              {
                "name": "title",
                "parameters": [],
                "returnType": "ModalFormData",
                "accessibility": "public",
                "signature": "title(titleText: minecraftserver.RawMessage | string): ModalFormData"
              },
              {
                "name": "toggle",
                "parameters": [],
                "returnType": "ModalFormData",
                "accessibility": "public",
                "signature": "toggle(label: minecraftserver.RawMessage | string, toggleOptions?: ModalFormDataToggleOptions): ModalFormData"
              }
            ],
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "modalformdata",
              "class"
            ],
            "examples": [
              {
                "title": "showBasicModalForm.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n\n  modalForm.toggle(\"Toggle w/o default\");\r\n  modalForm.toggle(\"Toggle w/ default\", true);\r\n\n  modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n  modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n\n  modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n  modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n\n  modalForm.textField(\"Input w/o default\", \"type text here\");\r\n  modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n\n  modalForm\r\n    .show(players[0])\r\n    .then((formData) => {\r\n      players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.ModalFormResponse",
            "name": "ModalFormResponse",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "Returns data about player responses to a modal form.\r ```typescript\r  function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r    modalForm.toggle(\"Toggle w/o default\");\r   modalForm.toggle(\"Toggle w/ default\", true);\r    modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r    modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r    modalForm.textField(\"Input w/o default\", \"type text here\");\r   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r    modalForm\r     .show(players[0])\r     .then((formData) => {\r       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
            "definition": "export class ModalFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * An ordered set of values based on the order of controls\r\n     * specified by ModalFormData.\r\n     *\r\n     */\r\n    readonly formValues?: (boolean | number | string | undefined)[];\r\n}\r",
            "jsdoc": "/**\r\n * Returns data about player responses to a modal form.\r\n * @example showBasicModalForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ModalFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n *\r\n *   modalForm.toggle(\"Toggle w/o default\");\r\n *   modalForm.toggle(\"Toggle w/ default\", true);\r\n *\r\n *   modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n *   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n *\r\n *   modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n *   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n *\r\n *   modalForm.textField(\"Input w/o default\", \"type text here\");\r\n *   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n *\r\n *   modalForm\r\n *     .show(players[0])\r\n *     .then((formData) => {\r\n *       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
            "properties": [],
            "methods": [],
            "extends": "FormResponse",
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "modalformresponse",
              "class"
            ],
            "examples": [
              {
                "title": "showBasicModalForm.ts",
                "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n\n  modalForm.toggle(\"Toggle w/o default\");\r\n  modalForm.toggle(\"Toggle w/ default\", true);\r\n\n  modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n  modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n\n  modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n  modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n\n  modalForm.textField(\"Input w/o default\", \"type text here\");\r\n  modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n\n  modalForm\r\n    .show(players[0])\r\n    .then((formData) => {\r\n      players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
              }
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.UIManager",
            "name": "UIManager",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "An ordered set of values based on the order of controls\r specified by ModalFormData.",
            "definition": "export class UIManager {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    closeAllForms(player: minecraftserver.Player): void;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * An ordered set of values based on the order of controls\r\n     * specified by ModalFormData.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [
              {
                "name": "closeAllForms",
                "parameters": [],
                "returnType": "void",
                "accessibility": "public",
                "signature": "closeAllForms(player: minecraftserver.Player): void"
              }
            ],
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "uimanager",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.FormRejectError",
            "name": "FormRejectError",
            "type": "class",
            "module": "@minecraft/server-ui",
            "description": "It will show an exclamation icon that will display a tooltip\r if it is hovered.",
            "definition": "export class FormRejectError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: FormRejectReason;\r\n}\r",
            "jsdoc": "    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r",
            "properties": [],
            "methods": [],
            "extends": "Error",
            "categories": [
              "Classes",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "formrejecterror",
              "class"
            ],
            "examples": [],
            "stability": "stable"
          }
        ],
        "interfaces": [
          {
            "id": "@minecraft/server-ui.ModalFormDataDropdownOptions",
            "name": "ModalFormDataDropdownOptions",
            "type": "interface",
            "module": "@minecraft/server-ui",
            "description": "additional options for the dropdown creation.\r /",
            "definition": "export interface ModalFormDataDropdownOptions {\n    /**\r\n     * @remarks\r\n     * The default selected item index. It will be zero in case of\r\n     * not setting this value.\r\n     *\r\n     */\r\n    defaultValueIndex?: number;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
            "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.dropdown} to provide\r\n * additional options for the dropdown creation.\r\n */\r",
            "properties": [
              {
                "name": "defaultValueIndex",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "tooltip",
                "type": "minecraftserver.RawMessage | string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "modalformdatadropdownoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.ModalFormDataSliderOptions",
            "name": "ModalFormDataSliderOptions",
            "type": "interface",
            "module": "@minecraft/server-ui",
            "description": "additional options for the slider creation.\r /",
            "definition": "export interface ModalFormDataSliderOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the slider.\r\n     *\r\n     */\r\n    defaultValue?: number;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n    /**\r\n     * @remarks\r\n     * Defines the increment of values that the slider generates\r\n     * when moved. It will be '1' in case of not providing this.\r\n     *\r\n     */\r\n    valueStep?: number;\r\n}\r",
            "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.slider} to provide\r\n * additional options for the slider creation.\r\n */\r",
            "properties": [
              {
                "name": "defaultValue",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "tooltip",
                "type": "minecraftserver.RawMessage | string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "valueStep",
                "type": "number",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "modalformdataslideroptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.ModalFormDataTextFieldOptions",
            "name": "ModalFormDataTextFieldOptions",
            "type": "interface",
            "module": "@minecraft/server-ui",
            "description": "additional options for the textfield creation.\r /",
            "definition": "export interface ModalFormDataTextFieldOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the textfield.\r\n     *\r\n     */\r\n    defaultValue?: string;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
            "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.textField} to provide\r\n * additional options for the textfield creation.\r\n */\r",
            "properties": [
              {
                "name": "defaultValue",
                "type": "string",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "tooltip",
                "type": "minecraftserver.RawMessage | string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "modalformdatatextfieldoptions",
              "interface"
            ],
            "stability": "stable"
          },
          {
            "id": "@minecraft/server-ui.ModalFormDataToggleOptions",
            "name": "ModalFormDataToggleOptions",
            "type": "interface",
            "module": "@minecraft/server-ui",
            "description": "additional options for the toggle creation.\r /",
            "definition": "export interface ModalFormDataToggleOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the toggle.\r\n     *\r\n     */\r\n    defaultValue?: boolean;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
            "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.toggle} to provide\r\n * additional options for the toggle creation.\r\n */\r",
            "properties": [
              {
                "name": "defaultValue",
                "type": "boolean",
                "optional": true,
                "accessibility": "public"
              },
              {
                "name": "tooltip",
                "type": "minecraftserver.RawMessage | string",
                "optional": true,
                "accessibility": "public"
              }
            ],
            "categories": [
              "Interfaces",
              "UI"
            ],
            "tags": [],
            "keywords": [
              "modalformdatatoggleoptions",
              "interface"
            ],
            "stability": "stable"
          }
        ],
        "functions": [],
        "types": [],
        "constants": [],
        "events": []
      }
    }
  },
  "index": {
    "@minecraft/server.BlockComponentTypes": {
      "id": "@minecraft/server.BlockComponentTypes",
      "name": "BlockComponentTypes",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The types of block components that are accessible via\r function Block.getComponent.\r /",
      "definition": "export enum BlockComponentTypes {\n    FluidContainer = 'minecraft:fluid_container',\r\n    /**\r\n     * @remarks\r\n     * Represents the inventory of a block in the world. Used with\r\n     * blocks like chests.\r\n     *\r\n     */\r\n    Inventory = 'minecraft:inventory',\r\n    /**\r\n     * @remarks\r\n     * When present, this block has piston-like behavior. Contains\r\n     * additional properties for discovering block piston state.\r\n     *\r\n     */\r\n    Piston = 'minecraft:piston',\r\n    /**\r\n     * @remarks\r\n     * Represents a block that can play a record.\r\n     *\r\n     */\r\n    RecordPlayer = 'minecraft:record_player',\r\n    /**\r\n     * @remarks\r\n     * Represents a block that can display text on it.\r\n     *\r\n     */\r\n    Sign = 'minecraft:sign',\r\n}\r",
      "jsdoc": "/**\r\n * The types of block components that are accessible via\r\n * function Block.getComponent.\r\n */\r",
      "enumValues": [
        {
          "name": "FluidContainer",
          "value": "minecraft:fluid_container"
        },
        {
          "name": "Inventory",
          "value": "minecraft:inventory",
          "description": ""
        },
        {
          "name": "Piston",
          "value": "minecraft:piston",
          "description": ""
        },
        {
          "name": "RecordPlayer",
          "value": "minecraft:record_player",
          "description": ""
        },
        {
          "name": "Sign",
          "value": "minecraft:sign",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponenttypes",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockPistonState": {
      "id": "@minecraft/server.BlockPistonState",
      "name": "BlockPistonState",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "An enumeration describing the state of a block piston.\r /",
      "definition": "export enum BlockPistonState {\n    /**\r\n     * @remarks\r\n     * Whether the piston is fully expanded.\r\n     *\r\n     */\r\n    Expanded = 'Expanded',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of expanding.\r\n     *\r\n     */\r\n    Expanding = 'Expanding',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is fully retracted.\r\n     *\r\n     */\r\n    Retracted = 'Retracted',\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of retracting.\r\n     *\r\n     */\r\n    Retracting = 'Retracting',\r\n}\r",
      "jsdoc": "/**\r\n * An enumeration describing the state of a block piston.\r\n */\r",
      "enumValues": [
        {
          "name": "Expanded",
          "value": "Expanded",
          "description": ""
        },
        {
          "name": "Expanding",
          "value": "Expanding",
          "description": ""
        },
        {
          "name": "Retracted",
          "value": "Retracted",
          "description": ""
        },
        {
          "name": "Retracting",
          "value": "Retracting",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockpistonstate",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockVolumeIntersection": {
      "id": "@minecraft/server.BlockVolumeIntersection",
      "name": "BlockVolumeIntersection",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Description of the resulting intersection test on two\r BlockVolume objects\r /",
      "definition": "export enum BlockVolumeIntersection {\n    /**\r\n     * @remarks\r\n     * Volume B has no intersection points with Volume A\r\n     *\r\n     */\r\n    Disjoint = 0,\r\n    /**\r\n     * @remarks\r\n     * Volume B resides completely inside Volume A\r\n     *\r\n     */\r\n    Contains = 1,\r\n    /**\r\n     * @remarks\r\n     * Volume B partially intersects Volume A\r\n     *\r\n     */\r\n    Intersects = 2,\r\n}\r",
      "jsdoc": "/**\r\n * Description of the resulting intersection test on two\r\n * BlockVolume objects\r\n */\r",
      "enumValues": [
        {
          "name": "Disjoint",
          "value": 0,
          "description": ""
        },
        {
          "name": "Contains",
          "value": 1,
          "description": ""
        },
        {
          "name": "Intersects",
          "value": 2,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockvolumeintersection",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ButtonState": {
      "id": "@minecraft/server.ButtonState",
      "name": "ButtonState",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The state of a button on a keyboard, controller, or touch\r interface.\r /",
      "definition": "export enum ButtonState {\n    Pressed = 'Pressed',\r\n    Released = 'Released',\r\n}\r",
      "jsdoc": "/**\r\n * The state of a button on a keyboard, controller, or touch\r\n * interface.\r\n */\r",
      "enumValues": [
        {
          "name": "Pressed",
          "value": "Pressed"
        },
        {
          "name": "Released",
          "value": "Released"
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "buttonstate",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CommandPermissionLevel": {
      "id": "@minecraft/server.CommandPermissionLevel",
      "name": "CommandPermissionLevel",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The required permission level to execute the custom command.\r /",
      "definition": "export enum CommandPermissionLevel {\n    /**\r\n     * @remarks\r\n     * Anything can run this level.\r\n     *\r\n     */\r\n    Any = 0,\r\n    /**\r\n     * @remarks\r\n     * Any operator can run this command, including command blocks.\r\n     *\r\n     */\r\n    GameDirectors = 1,\r\n    /**\r\n     * @remarks\r\n     * Any operator can run this command, but NOT command blocks.\r\n     *\r\n     */\r\n    Admin = 2,\r\n    /**\r\n     * @remarks\r\n     * Any server host can run this command.\r\n     *\r\n     */\r\n    Host = 3,\r\n    /**\r\n     * @remarks\r\n     * Only dedicated server can run this command.\r\n     *\r\n     */\r\n    Owner = 4,\r\n}\r",
      "jsdoc": "/**\r\n * The required permission level to execute the custom command.\r\n */\r",
      "enumValues": [
        {
          "name": "Any",
          "value": 0,
          "description": ""
        },
        {
          "name": "GameDirectors",
          "value": 1,
          "description": ""
        },
        {
          "name": "Admin",
          "value": 2,
          "description": ""
        },
        {
          "name": "Host",
          "value": 3,
          "description": ""
        },
        {
          "name": "Owner",
          "value": 4,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "commandpermissionlevel",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandErrorReason": {
      "id": "@minecraft/server.CustomCommandErrorReason",
      "name": "CustomCommandErrorReason",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Reason why custom command registration failed.\r /",
      "definition": "export enum CustomCommandErrorReason {\n    /**\r\n     * @remarks\r\n     * Command name already registered.\r\n     *\r\n     */\r\n    AlreadyRegistered = 'AlreadyRegistered',\r\n    /**\r\n     * @remarks\r\n     * Custom Command references an enum that has not been\r\n     * registered.\r\n     *\r\n     */\r\n    EnumDependencyMissing = 'EnumDependencyMissing',\r\n    /**\r\n     * @remarks\r\n     * Supplied Custom Command namespace does not match previous\r\n     * registrations for this add-on.\r\n     *\r\n     */\r\n    NamespaceMismatch = 'NamespaceMismatch',\r\n    /**\r\n     * @remarks\r\n     * Too many command parameters defined in CustomCommand.\r\n     *\r\n     */\r\n    ParameterLimit = 'ParameterLimit',\r\n    /**\r\n     * @remarks\r\n     * Custom command registry can not be accessed after world\r\n     * initialized event.\r\n     *\r\n     */\r\n    RegistryInvalid = 'RegistryInvalid',\r\n    /**\r\n     * @remarks\r\n     * Command parameters cannot be redefined during reload. Only\r\n     * the script closure itself can be changed.\r\n     *\r\n     */\r\n    RegistryReadOnly = 'RegistryReadOnly',\r\n}\r",
      "jsdoc": "/**\r\n * Reason why custom command registration failed.\r\n */\r",
      "enumValues": [
        {
          "name": "AlreadyRegistered",
          "value": "AlreadyRegistered",
          "description": ""
        },
        {
          "name": "EnumDependencyMissing",
          "value": "EnumDependencyMissing",
          "description": ""
        },
        {
          "name": "NamespaceMismatch",
          "value": "NamespaceMismatch",
          "description": ""
        },
        {
          "name": "ParameterLimit",
          "value": "ParameterLimit",
          "description": ""
        },
        {
          "name": "RegistryInvalid",
          "value": "RegistryInvalid",
          "description": ""
        },
        {
          "name": "RegistryReadOnly",
          "value": "RegistryReadOnly",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommanderrorreason",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandParamType": {
      "id": "@minecraft/server.CustomCommandParamType",
      "name": "CustomCommandParamType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The types of paramaters accepted by a custom command.\r /",
      "definition": "export enum CustomCommandParamType {\n    /**\r\n     * @remarks\r\n     * Block type parameter provides a {@link BlockType}.\r\n     *\r\n     */\r\n    BlockType = 'BlockType',\r\n    /**\r\n     * @remarks\r\n     * Boolean parameter.\r\n     *\r\n     */\r\n    Boolean = 'Boolean',\r\n    /**\r\n     * @remarks\r\n     * Entity selector parameter provides an {@link Entity}.\r\n     *\r\n     */\r\n    EntitySelector = 'EntitySelector',\r\n    /**\r\n     * @remarks\r\n     * Entity type parameter provides an {@link EntityType}.\r\n     *\r\n     */\r\n    EntityType = 'EntityType',\r\n    /**\r\n     * @remarks\r\n     * Command enum parameter.\r\n     *\r\n     */\r\n    Enum = 'Enum',\r\n    /**\r\n     * @remarks\r\n     * Float parameter.\r\n     *\r\n     */\r\n    Float = 'Float',\r\n    /**\r\n     * @remarks\r\n     * Integer parameter.\r\n     *\r\n     */\r\n    Integer = 'Integer',\r\n    /**\r\n     * @remarks\r\n     * Item type parameter provides an {@link ItemType}.\r\n     *\r\n     */\r\n    ItemType = 'ItemType',\r\n    /**\r\n     * @remarks\r\n     * Location parameter provides a {@link\r\n     * @minecraft/server.Location}.\r\n     *\r\n     */\r\n    Location = 'Location',\r\n    /**\r\n     * @remarks\r\n     * Player selector parameter provides a {@link Player}.\r\n     *\r\n     */\r\n    PlayerSelector = 'PlayerSelector',\r\n    /**\r\n     * @remarks\r\n     * String parameter.\r\n     *\r\n     */\r\n    String = 'String',\r\n}\r",
      "jsdoc": "/**\r\n * The types of paramaters accepted by a custom command.\r\n */\r",
      "enumValues": [
        {
          "name": "BlockType",
          "value": "BlockType",
          "description": ""
        },
        {
          "name": "Boolean",
          "value": "Boolean",
          "description": ""
        },
        {
          "name": "EntitySelector",
          "value": "EntitySelector",
          "description": ""
        },
        {
          "name": "EntityType",
          "value": "EntityType",
          "description": ""
        },
        {
          "name": "Enum",
          "value": "Enum",
          "description": ""
        },
        {
          "name": "Float",
          "value": "Float",
          "description": ""
        },
        {
          "name": "Integer",
          "value": "Integer",
          "description": ""
        },
        {
          "name": "ItemType",
          "value": "ItemType",
          "description": ""
        },
        {
          "name": "Location",
          "value": "Location",
          "description": ""
        },
        {
          "name": "PlayerSelector",
          "value": "PlayerSelector",
          "description": ""
        },
        {
          "name": "String",
          "value": "String",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandparamtype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandSource": {
      "id": "@minecraft/server.CustomCommandSource",
      "name": "CustomCommandSource",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Who executed the command.\r /",
      "definition": "export enum CustomCommandSource {\n    /**\r\n     * @remarks\r\n     * Command originated from a command block.\r\n     *\r\n     */\r\n    Block = 'Block',\r\n    /**\r\n     * @remarks\r\n     * Command originated from an entity or player.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    NPCDialogue = 'NPCDialogue',\r\n    /**\r\n     * @remarks\r\n     * Command originated from the server.\r\n     *\r\n     */\r\n    Server = 'Server',\r\n}\r",
      "jsdoc": "/**\r\n * Who executed the command.\r\n */\r",
      "enumValues": [
        {
          "name": "Block",
          "value": "Block",
          "description": ""
        },
        {
          "name": "Entity",
          "value": "Entity",
          "description": ""
        },
        {
          "name": "NPCDialogue",
          "value": "NPCDialogue"
        },
        {
          "name": "Server",
          "value": "Server",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandsource",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandStatus": {
      "id": "@minecraft/server.CustomCommandStatus",
      "name": "CustomCommandStatus",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Command originated from the server.",
      "definition": "export enum CustomCommandStatus {\n    Success = 0,\r\n    Failure = 1,\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Command originated from the server.\r\n     *\r\n     */\r",
      "enumValues": [
        {
          "name": "Success",
          "value": 0
        },
        {
          "name": "Failure",
          "value": 1
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandstatus",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CustomComponentNameErrorReason": {
      "id": "@minecraft/server.CustomComponentNameErrorReason",
      "name": "CustomComponentNameErrorReason",
      "type": "enum",
      "module": "@minecraft/server",
      "definition": "export enum CustomComponentNameErrorReason {\n    NoNamespace = 1,\r\n    DisallowedNamespace = 2,\r\n}\r",
      "jsdoc": "",
      "enumValues": [
        {
          "name": "NoNamespace",
          "value": 1
        },
        {
          "name": "DisallowedNamespace",
          "value": 2
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcomponentnameerrorreason",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.Difficulty": {
      "id": "@minecraft/server.Difficulty",
      "name": "Difficulty",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "An enumeration for the various difficulty levels of\r Minecraft.\r /",
      "definition": "export enum Difficulty {\n    /**\r\n     * @remarks\r\n     * Easy difficulty level.\r\n     *\r\n     */\r\n    Easy = 'Easy',\r\n    /**\r\n     * @remarks\r\n     * Hard difficulty level.\r\n     *\r\n     */\r\n    Hard = 'Hard',\r\n    /**\r\n     * @remarks\r\n     * Normal difficulty level.\r\n     *\r\n     */\r\n    Normal = 'Normal',\r\n    /**\r\n     * @remarks\r\n     * Peaceful difficulty level.\r\n     *\r\n     */\r\n    Peaceful = 'Peaceful',\r\n}\r",
      "jsdoc": "/**\r\n * An enumeration for the various difficulty levels of\r\n * Minecraft.\r\n */\r",
      "enumValues": [
        {
          "name": "Easy",
          "value": "Easy",
          "description": ""
        },
        {
          "name": "Hard",
          "value": "Hard",
          "description": ""
        },
        {
          "name": "Normal",
          "value": "Normal",
          "description": ""
        },
        {
          "name": "Peaceful",
          "value": "Peaceful",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "difficulty",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.Direction": {
      "id": "@minecraft/server.Direction",
      "name": "Direction",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "A general purpose relative direction enumeration.\r /",
      "definition": "export enum Direction {\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} beneath (y - 1) of this item.\r\n     *\r\n     */\r\n    Down = 'Down',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east (x + 1) of this item.\r\n     *\r\n     */\r\n    East = 'East',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east (z + 1) of this item.\r\n     *\r\n     */\r\n    North = 'North',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the south (z - 1) of this item.\r\n     *\r\n     */\r\n    South = 'South',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} above (y + 1) of this item.\r\n     *\r\n     */\r\n    Up = 'Up',\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the west (x - 1) of this item.\r\n     *\r\n     */\r\n    West = 'West',\r\n}\r",
      "jsdoc": "/**\r\n * A general purpose relative direction enumeration.\r\n */\r",
      "enumValues": [
        {
          "name": "Down",
          "value": "Down",
          "description": ""
        },
        {
          "name": "East",
          "value": "East",
          "description": ""
        },
        {
          "name": "North",
          "value": "North",
          "description": ""
        },
        {
          "name": "South",
          "value": "South",
          "description": ""
        },
        {
          "name": "Up",
          "value": "Up",
          "description": ""
        },
        {
          "name": "West",
          "value": "West",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "direction",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.DisplaySlotId": {
      "id": "@minecraft/server.DisplaySlotId",
      "name": "DisplaySlotId",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies a mechanism for displaying scores on a scoreboard.\r /",
      "definition": "export enum DisplaySlotId {\n    /**\r\n     * @remarks\r\n     * Displays the score below the player's name.\r\n     *\r\n     */\r\n    BelowName = 'BelowName',\r\n    /**\r\n     * @remarks\r\n     * Displays the score as a list on the pause screen.\r\n     *\r\n     */\r\n    List = 'List',\r\n    /**\r\n     * @remarks\r\n     * Displays the score on the side of the player's screen.\r\n     *\r\n     */\r\n    Sidebar = 'Sidebar',\r\n}\r",
      "jsdoc": "/**\r\n * Specifies a mechanism for displaying scores on a scoreboard.\r\n */\r",
      "enumValues": [
        {
          "name": "BelowName",
          "value": "BelowName",
          "description": ""
        },
        {
          "name": "List",
          "value": "List",
          "description": ""
        },
        {
          "name": "Sidebar",
          "value": "Sidebar",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "displayslotid",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.DyeColor": {
      "id": "@minecraft/server.DyeColor",
      "name": "DyeColor",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies different colors for use as dye.\r /",
      "definition": "export enum DyeColor {\n    /**\r\n     * @remarks\r\n     * Black dye color.\r\n     *\r\n     */\r\n    Black = 'Black',\r\n    /**\r\n     * @remarks\r\n     * Blue dye color.\r\n     *\r\n     */\r\n    Blue = 'Blue',\r\n    /**\r\n     * @remarks\r\n     * Brown dye color.\r\n     *\r\n     */\r\n    Brown = 'Brown',\r\n    /**\r\n     * @remarks\r\n     * Cyan dye color.\r\n     *\r\n     */\r\n    Cyan = 'Cyan',\r\n    /**\r\n     * @remarks\r\n     * Gray dye color.\r\n     *\r\n     */\r\n    Gray = 'Gray',\r\n    /**\r\n     * @remarks\r\n     * Green dye color.\r\n     *\r\n     */\r\n    Green = 'Green',\r\n    /**\r\n     * @remarks\r\n     * Light blue dye color.\r\n     *\r\n     */\r\n    LightBlue = 'LightBlue',\r\n    /**\r\n     * @remarks\r\n     * Lime dye color.\r\n     *\r\n     */\r\n    Lime = 'Lime',\r\n    /**\r\n     * @remarks\r\n     * Magenta dye color.\r\n     *\r\n     */\r\n    Magenta = 'Magenta',\r\n    /**\r\n     * @remarks\r\n     * Orange dye color.\r\n     *\r\n     */\r\n    Orange = 'Orange',\r\n    /**\r\n     * @remarks\r\n     * Pink dye color.\r\n     *\r\n     */\r\n    Pink = 'Pink',\r\n    /**\r\n     * @remarks\r\n     * Purple dye color.\r\n     *\r\n     */\r\n    Purple = 'Purple',\r\n    /**\r\n     * @remarks\r\n     * Red dye color.\r\n     *\r\n     */\r\n    Red = 'Red',\r\n    /**\r\n     * @remarks\r\n     * Silver dye color.\r\n     *\r\n     */\r\n    Silver = 'Silver',\r\n    /**\r\n     * @remarks\r\n     * White dye color.\r\n     *\r\n     */\r\n    White = 'White',\r\n    /**\r\n     * @remarks\r\n     * Yellow dye color.\r\n     *\r\n     */\r\n    Yellow = 'Yellow',\r\n}\r",
      "jsdoc": "/**\r\n * Specifies different colors for use as dye.\r\n */\r",
      "enumValues": [
        {
          "name": "Black",
          "value": "Black",
          "description": ""
        },
        {
          "name": "Blue",
          "value": "Blue",
          "description": ""
        },
        {
          "name": "Brown",
          "value": "Brown",
          "description": ""
        },
        {
          "name": "Cyan",
          "value": "Cyan",
          "description": ""
        },
        {
          "name": "Gray",
          "value": "Gray",
          "description": ""
        },
        {
          "name": "Green",
          "value": "Green",
          "description": ""
        },
        {
          "name": "LightBlue",
          "value": "LightBlue",
          "description": ""
        },
        {
          "name": "Lime",
          "value": "Lime",
          "description": ""
        },
        {
          "name": "Magenta",
          "value": "Magenta",
          "description": ""
        },
        {
          "name": "Orange",
          "value": "Orange",
          "description": ""
        },
        {
          "name": "Pink",
          "value": "Pink",
          "description": ""
        },
        {
          "name": "Purple",
          "value": "Purple",
          "description": ""
        },
        {
          "name": "Red",
          "value": "Red",
          "description": ""
        },
        {
          "name": "Silver",
          "value": "Silver",
          "description": ""
        },
        {
          "name": "White",
          "value": "White",
          "description": ""
        },
        {
          "name": "Yellow",
          "value": "Yellow",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dyecolor",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EasingType": {
      "id": "@minecraft/server.EasingType",
      "name": "EasingType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Yellow dye color.",
      "definition": "export enum EasingType {\n    InBack = 'InBack',\r\n    InBounce = 'InBounce',\r\n    InCirc = 'InCirc',\r\n    InCubic = 'InCubic',\r\n    InElastic = 'InElastic',\r\n    InExpo = 'InExpo',\r\n    InOutBack = 'InOutBack',\r\n    InOutBounce = 'InOutBounce',\r\n    InOutCirc = 'InOutCirc',\r\n    InOutCubic = 'InOutCubic',\r\n    InOutElastic = 'InOutElastic',\r\n    InOutExpo = 'InOutExpo',\r\n    InOutQuad = 'InOutQuad',\r\n    InOutQuart = 'InOutQuart',\r\n    InOutQuint = 'InOutQuint',\r\n    InOutSine = 'InOutSine',\r\n    InQuad = 'InQuad',\r\n    InQuart = 'InQuart',\r\n    InQuint = 'InQuint',\r\n    InSine = 'InSine',\r\n    Linear = 'Linear',\r\n    OutBack = 'OutBack',\r\n    OutBounce = 'OutBounce',\r\n    OutCirc = 'OutCirc',\r\n    OutCubic = 'OutCubic',\r\n    OutElastic = 'OutElastic',\r\n    OutExpo = 'OutExpo',\r\n    OutQuad = 'OutQuad',\r\n    OutQuart = 'OutQuart',\r\n    OutQuint = 'OutQuint',\r\n    OutSine = 'OutSine',\r\n    Spring = 'Spring',\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Yellow dye color.\r\n     *\r\n     */\r",
      "enumValues": [
        {
          "name": "InBack",
          "value": "InBack"
        },
        {
          "name": "InBounce",
          "value": "InBounce"
        },
        {
          "name": "InCirc",
          "value": "InCirc"
        },
        {
          "name": "InCubic",
          "value": "InCubic"
        },
        {
          "name": "InElastic",
          "value": "InElastic"
        },
        {
          "name": "InExpo",
          "value": "InExpo"
        },
        {
          "name": "InOutBack",
          "value": "InOutBack"
        },
        {
          "name": "InOutBounce",
          "value": "InOutBounce"
        },
        {
          "name": "InOutCirc",
          "value": "InOutCirc"
        },
        {
          "name": "InOutCubic",
          "value": "InOutCubic"
        },
        {
          "name": "InOutElastic",
          "value": "InOutElastic"
        },
        {
          "name": "InOutExpo",
          "value": "InOutExpo"
        },
        {
          "name": "InOutQuad",
          "value": "InOutQuad"
        },
        {
          "name": "InOutQuart",
          "value": "InOutQuart"
        },
        {
          "name": "InOutQuint",
          "value": "InOutQuint"
        },
        {
          "name": "InOutSine",
          "value": "InOutSine"
        },
        {
          "name": "InQuad",
          "value": "InQuad"
        },
        {
          "name": "InQuart",
          "value": "InQuart"
        },
        {
          "name": "InQuint",
          "value": "InQuint"
        },
        {
          "name": "InSine",
          "value": "InSine"
        },
        {
          "name": "Linear",
          "value": "Linear"
        },
        {
          "name": "OutBack",
          "value": "OutBack"
        },
        {
          "name": "OutBounce",
          "value": "OutBounce"
        },
        {
          "name": "OutCirc",
          "value": "OutCirc"
        },
        {
          "name": "OutCubic",
          "value": "OutCubic"
        },
        {
          "name": "OutElastic",
          "value": "OutElastic"
        },
        {
          "name": "OutExpo",
          "value": "OutExpo"
        },
        {
          "name": "OutQuad",
          "value": "OutQuad"
        },
        {
          "name": "OutQuart",
          "value": "OutQuart"
        },
        {
          "name": "OutQuint",
          "value": "OutQuint"
        },
        {
          "name": "OutSine",
          "value": "OutSine"
        },
        {
          "name": "Spring",
          "value": "Spring"
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "easingtype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EnchantmentSlot": {
      "id": "@minecraft/server.EnchantmentSlot",
      "name": "EnchantmentSlot",
      "type": "enum",
      "module": "@minecraft/server",
      "definition": "export enum EnchantmentSlot {\n    ArmorFeet = 'ArmorFeet',\r\n    ArmorHead = 'ArmorHead',\r\n    ArmorLegs = 'ArmorLegs',\r\n    ArmorTorso = 'ArmorTorso',\r\n    Axe = 'Axe',\r\n    Bow = 'Bow',\r\n    CarrotStick = 'CarrotStick',\r\n    CosmeticHead = 'CosmeticHead',\r\n    Crossbow = 'Crossbow',\r\n    Elytra = 'Elytra',\r\n    FishingRod = 'FishingRod',\r\n    Flintsteel = 'Flintsteel',\r\n    Hoe = 'Hoe',\r\n    Pickaxe = 'Pickaxe',\r\n    Shears = 'Shears',\r\n    Shield = 'Shield',\r\n    Shovel = 'Shovel',\r\n    Spear = 'Spear',\r\n    Sword = 'Sword',\r\n}\r",
      "jsdoc": "",
      "enumValues": [
        {
          "name": "ArmorFeet",
          "value": "ArmorFeet"
        },
        {
          "name": "ArmorHead",
          "value": "ArmorHead"
        },
        {
          "name": "ArmorLegs",
          "value": "ArmorLegs"
        },
        {
          "name": "ArmorTorso",
          "value": "ArmorTorso"
        },
        {
          "name": "Axe",
          "value": "Axe"
        },
        {
          "name": "Bow",
          "value": "Bow"
        },
        {
          "name": "CarrotStick",
          "value": "CarrotStick"
        },
        {
          "name": "CosmeticHead",
          "value": "CosmeticHead"
        },
        {
          "name": "Crossbow",
          "value": "Crossbow"
        },
        {
          "name": "Elytra",
          "value": "Elytra"
        },
        {
          "name": "FishingRod",
          "value": "FishingRod"
        },
        {
          "name": "Flintsteel",
          "value": "Flintsteel"
        },
        {
          "name": "Hoe",
          "value": "Hoe"
        },
        {
          "name": "Pickaxe",
          "value": "Pickaxe"
        },
        {
          "name": "Shears",
          "value": "Shears"
        },
        {
          "name": "Shield",
          "value": "Shield"
        },
        {
          "name": "Shovel",
          "value": "Shovel"
        },
        {
          "name": "Spear",
          "value": "Spear"
        },
        {
          "name": "Sword",
          "value": "Sword"
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmentslot",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityComponentTypes": {
      "id": "@minecraft/server.EntityComponentTypes",
      "name": "EntityComponentTypes",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The types of entity components that are accessible via\r function Entity.getComponent.\r /",
      "definition": "export enum EntityComponentTypes {\n    /**\r\n     * @remarks\r\n     * When added, this component makes the entity spawn with a\r\n     * rider of the specified entityType.\r\n     *\r\n     */\r\n    AddRider = 'minecraft:addrider',\r\n    /**\r\n     * @remarks\r\n     * Adds a timer for the entity to grow up. It can be\r\n     * accelerated by giving the entity the items it likes as\r\n     * defined by feedItems.\r\n     *\r\n     */\r\n    Ageable = 'minecraft:ageable',\r\n    /**\r\n     * @remarks\r\n     * Defines what blocks this entity can breathe in and gives\r\n     * them the ability to suffocate.\r\n     *\r\n     */\r\n    Breathable = 'minecraft:breathable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * climb up ladders.\r\n     *\r\n     */\r\n    CanClimb = 'minecraft:can_climb',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * fly, and the pathfinder won't be restricted to paths where a\r\n     * solid block is required underneath it.\r\n     *\r\n     */\r\n    CanFly = 'minecraft:can_fly',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that the entity can\r\n     * power jump like the horse does within Minecraft.\r\n     *\r\n     */\r\n    CanPowerJump = 'minecraft:can_power_jump',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's color. Only works on certain entities\r\n     * that have predefined color values (e.g., sheep, llama,\r\n     * shulker).\r\n     *\r\n     */\r\n    Color = 'minecraft:color',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's secondary color. Only works on certain\r\n     * entities that have predefined secondary color values (e.g.,\r\n     * tropical fish).\r\n     *\r\n     */\r\n    Color2 = 'minecraft:color2',\r\n    CursorInventory = 'minecraft:cursor_inventory',\r\n    /**\r\n     * @remarks\r\n     * Provides access to a mob's equipment slots. This component\r\n     * exists for all mob entities.\r\n     *\r\n     */\r\n    Equippable = 'minecraft:equippable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity\r\n     * doesn't take damage from fire.\r\n     *\r\n     */\r\n    FireImmune = 'minecraft:fire_immune',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can\r\n     * float in liquid blocks.\r\n     *\r\n     */\r\n    FloatsInLiquid = 'minecraft:floats_in_liquid',\r\n    /**\r\n     * @remarks\r\n     * Represents the flying speed of an entity.\r\n     *\r\n     */\r\n    FlyingSpeed = 'minecraft:flying_speed',\r\n    /**\r\n     * @remarks\r\n     * Defines how much friction affects this entity.\r\n     *\r\n     */\r\n    FrictionModifier = 'minecraft:friction_modifier',\r\n    /**\r\n     * @remarks\r\n     * Defines the interactions with this entity for healing it.\r\n     *\r\n     */\r\n    Healable = 'minecraft:healable',\r\n    /**\r\n     * @remarks\r\n     * Defines the health properties of an entity.\r\n     *\r\n     */\r\n    Health = 'minecraft:health',\r\n    /**\r\n     * @remarks\r\n     * Defines this entity's inventory properties.\r\n     *\r\n     */\r\n    Inventory = 'minecraft:inventory',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is a\r\n     * baby.\r\n     *\r\n     */\r\n    IsBaby = 'minecraft:is_baby',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * charged.\r\n     *\r\n     */\r\n    IsCharged = 'minecraft:is_charged',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently carrying a chest.\r\n     *\r\n     */\r\n    IsChested = 'minecraft:is_chested',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that dyes can be used\r\n     * on this entity to change its color.\r\n     *\r\n     */\r\n    IsDyeable = 'minecraft:is_dyeable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can\r\n     * hide from hostile mobs while invisible.\r\n     *\r\n     */\r\n    IsHiddenWhenInvisible = 'minecraft:is_hidden_when_invisible',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity this\r\n     * currently on fire.\r\n     *\r\n     */\r\n    IsIgnited = 'minecraft:is_ignited',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is an\r\n     * illager captain.\r\n     *\r\n     */\r\n    IsIllagerCaptain = 'minecraft:is_illager_captain',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently saddled.\r\n     *\r\n     */\r\n    IsSaddled = 'minecraft:is_saddled',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently shaking.\r\n     *\r\n     */\r\n    IsShaking = 'minecraft:is_shaking',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently sheared.\r\n     *\r\n     */\r\n    IsSheared = 'minecraft:is_sheared',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity can be\r\n     * stacked.\r\n     *\r\n     */\r\n    IsStackable = 'minecraft:is_stackable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently stunned.\r\n     *\r\n     */\r\n    IsStunned = 'minecraft:is_stunned',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity is\r\n     * currently tamed.\r\n     *\r\n     */\r\n    IsTamed = 'minecraft:is_tamed',\r\n    /**\r\n     * @remarks\r\n     * If added onto the entity, this indicates that the entity\r\n     * represents a free-floating item in the world. Lets you\r\n     * retrieve the actual item stack contents via the itemStack\r\n     * property.\r\n     *\r\n     */\r\n    Item = 'minecraft:item',\r\n    /**\r\n     * @remarks\r\n     * Defines the base movement speed in lava of this entity.\r\n     *\r\n     */\r\n    LavaMovement = 'minecraft:lava_movement',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to be leashed and defines the conditions\r\n     * and events for this entity when is leashed.\r\n     *\r\n     */\r\n    Leashable = 'minecraft:leashable',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity\r\n     * contains an additional variant value. Can be used to further\r\n     * differentiate variants.\r\n     *\r\n     */\r\n    MarkVariant = 'minecraft:mark_variant',\r\n    /**\r\n     * @remarks\r\n     * Defines the general movement speed of this entity.\r\n     *\r\n     */\r\n    Movement = 'minecraft:movement',\r\n    /**\r\n     * @remarks\r\n     * When added, this movement control allows the mob to swim in\r\n     * water and walk on land.\r\n     *\r\n     */\r\n    MovementAmphibious = 'minecraft:movement.amphibious',\r\n    /**\r\n     * @remarks\r\n     * When added, this component allows the movement of an entity.\r\n     *\r\n     */\r\n    MovementBasic = 'minecraft:movement.basic',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to fly.\r\n     *\r\n     */\r\n    MovementFly = 'minecraft:movement.fly',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control allows a mob to fly, swim,\r\n     * climb, etc.\r\n     *\r\n     */\r\n    MovementGeneric = 'minecraft:movement.generic',\r\n    /**\r\n     * @remarks\r\n     * When added, this movement control allows the mob to glide.\r\n     *\r\n     */\r\n    MovementGlide = 'minecraft:movement.glide',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to hover.\r\n     *\r\n     */\r\n    MovementHover = 'minecraft:movement.hover',\r\n    /**\r\n     * @remarks\r\n     * Move control that causes the mob to jump as it moves with a\r\n     * specified delay between jumps.\r\n     *\r\n     */\r\n    MovementJump = 'minecraft:movement.jump',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to hop as it\r\n     * moves.\r\n     *\r\n     */\r\n    MovementSkip = 'minecraft:movement.skip',\r\n    /**\r\n     * @remarks\r\n     * When added, this move control causes the mob to sway side to\r\n     * side giving the impression it is swimming.\r\n     *\r\n     */\r\n    MovementSway = 'minecraft:movement.sway',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths that include vertical\r\n     * walls (for example, like Minecraft spiders do.)\r\n     *\r\n     */\r\n    NavigationClimb = 'minecraft:navigation.climb',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by flying around the\r\n     * air like the regular Ghast.\r\n     *\r\n     */\r\n    NavigationFloat = 'minecraft:navigation.float',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths in the air (for\r\n     * example, like Minecraft parrots do.)\r\n     *\r\n     */\r\n    NavigationFly = 'minecraft:navigation.fly',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by walking, swimming,\r\n     * flying and/or climbing around and jumping up and down a\r\n     * block.\r\n     *\r\n     */\r\n    NavigationGeneric = 'minecraft:navigation.generic',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths in the air (for\r\n     * example, like the Minecraft Bees do.) Keeps them from\r\n     * falling out of the skies and doing predictive movement.\r\n     *\r\n     */\r\n    NavigationHover = 'minecraft:navigation.hover',\r\n    /**\r\n     * @remarks\r\n     * Allows this entity to generate paths by walking around and\r\n     * jumping up and down a block like regular mobs.\r\n     *\r\n     */\r\n    NavigationWalk = 'minecraft:navigation.walk',\r\n    /**\r\n     * @remarks\r\n     * When present on an entity, this entity is on fire.\r\n     *\r\n     */\r\n    OnFire = 'minecraft:onfire',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the exhaustion of a player. This\r\n     * is only available on players.\r\n     *\r\n     */\r\n    Exhaustion = 'minecraft:player.exhaustion',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the hunger of a player. This is\r\n     * only available on players.\r\n     *\r\n     */\r\n    Hunger = 'minecraft:player.hunger',\r\n    /**\r\n     * @remarks\r\n     * Use this component to read the saturation of a player. This\r\n     * is only available on players.\r\n     *\r\n     */\r\n    Saturation = 'minecraft:player.saturation',\r\n    /**\r\n     * @remarks\r\n     * The projectile component controls the properties of a\r\n     * projectile entity and allows it to be shot in a given\r\n     * direction. This component is present when the entity has the\r\n     * minecraft:projectile component.\r\n     *\r\n     */\r\n    Projectile = 'minecraft:projectile',\r\n    /**\r\n     * @remarks\r\n     * Sets the distance through which the entity can push through.\r\n     *\r\n     */\r\n    PushThrough = 'minecraft:push_through',\r\n    /**\r\n     * @remarks\r\n     * When added, this component adds the capability that an\r\n     * entity can be ridden by another entity.\r\n     *\r\n     */\r\n    Rideable = 'minecraft:rideable',\r\n    /**\r\n     * @remarks\r\n     * This component is added to any entity when it is riding\r\n     * another entity.\r\n     *\r\n     */\r\n    Riding = 'minecraft:riding',\r\n    /**\r\n     * @remarks\r\n     * Sets the entity's visual size.\r\n     *\r\n     */\r\n    Scale = 'minecraft:scale',\r\n    /**\r\n     * @remarks\r\n     * Skin Id value. Can be used to differentiate skins, such as\r\n     * base skins for villagers.\r\n     *\r\n     */\r\n    SkinId = 'minecraft:skin_id',\r\n    /**\r\n     * @remarks\r\n     * Defines the entity's strength to carry items.\r\n     *\r\n     */\r\n    Strength = 'minecraft:strength',\r\n    /**\r\n     * @remarks\r\n     * Defines the rules for an entity to be tamed by the player.\r\n     *\r\n     */\r\n    Tameable = 'minecraft:tameable',\r\n    /**\r\n     * @remarks\r\n     * Contains options for taming a rideable entity based on the\r\n     * entity that mounts it.\r\n     *\r\n     */\r\n    TameMount = 'minecraft:tamemount',\r\n    /**\r\n     * @remarks\r\n     * Used to determine the type families the entity belongs to.\r\n     *\r\n     */\r\n    TypeFamily = 'minecraft:type_family',\r\n    /**\r\n     * @remarks\r\n     * Defines the general movement speed underwater of this\r\n     * entity.\r\n     *\r\n     */\r\n    UnderwaterMovement = 'minecraft:underwater_movement',\r\n    /**\r\n     * @remarks\r\n     * Used to differentiate the component group of a variant of an\r\n     * entity from others. (e.g. ocelot, villager).\r\n     *\r\n     */\r\n    Variant = 'minecraft:variant',\r\n    /**\r\n     * @remarks\r\n     * When added, this component signifies that this entity wants\r\n     * to become a jockey.\r\n     *\r\n     */\r\n    WantsJockey = 'minecraft:wants_jockey',\r\n}\r",
      "jsdoc": "/**\r\n * The types of entity components that are accessible via\r\n * function Entity.getComponent.\r\n */\r",
      "enumValues": [
        {
          "name": "AddRider",
          "value": "minecraft:addrider",
          "description": ""
        },
        {
          "name": "Ageable",
          "value": "minecraft:ageable",
          "description": ""
        },
        {
          "name": "Breathable",
          "value": "minecraft:breathable",
          "description": ""
        },
        {
          "name": "CanClimb",
          "value": "minecraft:can_climb",
          "description": ""
        },
        {
          "name": "CanFly",
          "value": "minecraft:can_fly",
          "description": ""
        },
        {
          "name": "CanPowerJump",
          "value": "minecraft:can_power_jump",
          "description": ""
        },
        {
          "name": "Color",
          "value": "minecraft:color",
          "description": ""
        },
        {
          "name": "Color2",
          "value": "minecraft:color2",
          "description": ""
        },
        {
          "name": "CursorInventory",
          "value": "minecraft:cursor_inventory"
        },
        {
          "name": "Equippable",
          "value": "minecraft:equippable",
          "description": ""
        },
        {
          "name": "FireImmune",
          "value": "minecraft:fire_immune",
          "description": ""
        },
        {
          "name": "FloatsInLiquid",
          "value": "minecraft:floats_in_liquid",
          "description": ""
        },
        {
          "name": "FlyingSpeed",
          "value": "minecraft:flying_speed",
          "description": ""
        },
        {
          "name": "FrictionModifier",
          "value": "minecraft:friction_modifier",
          "description": ""
        },
        {
          "name": "Healable",
          "value": "minecraft:healable",
          "description": ""
        },
        {
          "name": "Health",
          "value": "minecraft:health",
          "description": ""
        },
        {
          "name": "Inventory",
          "value": "minecraft:inventory",
          "description": ""
        },
        {
          "name": "IsBaby",
          "value": "minecraft:is_baby",
          "description": ""
        },
        {
          "name": "IsCharged",
          "value": "minecraft:is_charged",
          "description": ""
        },
        {
          "name": "IsChested",
          "value": "minecraft:is_chested",
          "description": ""
        },
        {
          "name": "IsDyeable",
          "value": "minecraft:is_dyeable",
          "description": ""
        },
        {
          "name": "IsHiddenWhenInvisible",
          "value": "minecraft:is_hidden_when_invisible",
          "description": ""
        },
        {
          "name": "IsIgnited",
          "value": "minecraft:is_ignited",
          "description": ""
        },
        {
          "name": "IsIllagerCaptain",
          "value": "minecraft:is_illager_captain",
          "description": ""
        },
        {
          "name": "IsSaddled",
          "value": "minecraft:is_saddled",
          "description": ""
        },
        {
          "name": "IsShaking",
          "value": "minecraft:is_shaking",
          "description": ""
        },
        {
          "name": "IsSheared",
          "value": "minecraft:is_sheared",
          "description": ""
        },
        {
          "name": "IsStackable",
          "value": "minecraft:is_stackable",
          "description": ""
        },
        {
          "name": "IsStunned",
          "value": "minecraft:is_stunned",
          "description": ""
        },
        {
          "name": "IsTamed",
          "value": "minecraft:is_tamed",
          "description": ""
        },
        {
          "name": "Item",
          "value": "minecraft:item",
          "description": ""
        },
        {
          "name": "LavaMovement",
          "value": "minecraft:lava_movement",
          "description": ""
        },
        {
          "name": "Leashable",
          "value": "minecraft:leashable",
          "description": ""
        },
        {
          "name": "MarkVariant",
          "value": "minecraft:mark_variant",
          "description": ""
        },
        {
          "name": "Movement",
          "value": "minecraft:movement",
          "description": ""
        },
        {
          "name": "MovementAmphibious",
          "value": "minecraft:movement.amphibious",
          "description": ""
        },
        {
          "name": "MovementBasic",
          "value": "minecraft:movement.basic",
          "description": ""
        },
        {
          "name": "MovementFly",
          "value": "minecraft:movement.fly",
          "description": ""
        },
        {
          "name": "MovementGeneric",
          "value": "minecraft:movement.generic",
          "description": ""
        },
        {
          "name": "MovementGlide",
          "value": "minecraft:movement.glide",
          "description": ""
        },
        {
          "name": "MovementHover",
          "value": "minecraft:movement.hover",
          "description": ""
        },
        {
          "name": "MovementJump",
          "value": "minecraft:movement.jump",
          "description": ""
        },
        {
          "name": "MovementSkip",
          "value": "minecraft:movement.skip",
          "description": ""
        },
        {
          "name": "MovementSway",
          "value": "minecraft:movement.sway",
          "description": ""
        },
        {
          "name": "NavigationClimb",
          "value": "minecraft:navigation.climb",
          "description": ""
        },
        {
          "name": "NavigationFloat",
          "value": "minecraft:navigation.float",
          "description": ""
        },
        {
          "name": "NavigationFly",
          "value": "minecraft:navigation.fly",
          "description": ""
        },
        {
          "name": "NavigationGeneric",
          "value": "minecraft:navigation.generic",
          "description": ""
        },
        {
          "name": "NavigationHover",
          "value": "minecraft:navigation.hover",
          "description": ""
        },
        {
          "name": "NavigationWalk",
          "value": "minecraft:navigation.walk",
          "description": ""
        },
        {
          "name": "OnFire",
          "value": "minecraft:onfire",
          "description": ""
        },
        {
          "name": "Exhaustion",
          "value": "minecraft:player.exhaustion",
          "description": ""
        },
        {
          "name": "Hunger",
          "value": "minecraft:player.hunger",
          "description": ""
        },
        {
          "name": "Saturation",
          "value": "minecraft:player.saturation",
          "description": ""
        },
        {
          "name": "Projectile",
          "value": "minecraft:projectile",
          "description": ""
        },
        {
          "name": "PushThrough",
          "value": "minecraft:push_through",
          "description": ""
        },
        {
          "name": "Rideable",
          "value": "minecraft:rideable",
          "description": ""
        },
        {
          "name": "Riding",
          "value": "minecraft:riding",
          "description": ""
        },
        {
          "name": "Scale",
          "value": "minecraft:scale",
          "description": ""
        },
        {
          "name": "SkinId",
          "value": "minecraft:skin_id",
          "description": ""
        },
        {
          "name": "Strength",
          "value": "minecraft:strength",
          "description": ""
        },
        {
          "name": "Tameable",
          "value": "minecraft:tameable",
          "description": ""
        },
        {
          "name": "TameMount",
          "value": "minecraft:tamemount",
          "description": ""
        },
        {
          "name": "TypeFamily",
          "value": "minecraft:type_family",
          "description": ""
        },
        {
          "name": "UnderwaterMovement",
          "value": "minecraft:underwater_movement",
          "description": ""
        },
        {
          "name": "Variant",
          "value": "minecraft:variant",
          "description": ""
        },
        {
          "name": "WantsJockey",
          "value": "minecraft:wants_jockey",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycomponenttypes",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityDamageCause": {
      "id": "@minecraft/server.EntityDamageCause",
      "name": "EntityDamageCause",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes the source of damage from an Entity.\r /",
      "definition": "export enum EntityDamageCause {\n    /**\r\n     * @remarks\r\n     * Damage caused by a falling anvil.\r\n     *\r\n     */\r\n    anvil = 'anvil',\r\n    /**\r\n     * @remarks\r\n     * Damage caused from a non-Entity explosion. For example, an\r\n     * exploding bed.\r\n     *\r\n     */\r\n    blockExplosion = 'blockExplosion',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by Campfires.\r\n     *\r\n     */\r\n    campfire = 'campfire',\r\n    /**\r\n     * @remarks\r\n     * Unused.\r\n     *\r\n     */\r\n    charging = 'charging',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by physically touching an Entity or Block. For\r\n     * example, touching a Sweet Berry bush or Pufferfish.\r\n     *\r\n     */\r\n    contact = 'contact',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being out of air and inside a\r\n     * liquid block.\r\n     *\r\n     */\r\n    drowning = 'drowning',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity attack.\r\n     *\r\n     */\r\n    entityAttack = 'entityAttack',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity explosion. For example, a Creeper\r\n     * or Wither.\r\n     *\r\n     */\r\n    entityExplosion = 'entityExplosion',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by falling onto the ground.\r\n     *\r\n     */\r\n    fall = 'fall',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by falling blocks. Note: Anvils and\r\n     * Stalactites have their own damage causes.\r\n     *\r\n     */\r\n    fallingBlock = 'fallingBlock',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by catching on fire.\r\n     *\r\n     */\r\n    fire = 'fire',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by burning over time.\r\n     *\r\n     */\r\n    fireTick = 'fireTick',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by fireworks.\r\n     *\r\n     */\r\n    fireworks = 'fireworks',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by flying into a wall at high speed while\r\n     * gliding with Elytra.\r\n     *\r\n     */\r\n    flyIntoWall = 'flyIntoWall',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by staying inside a Powder Snow block.\r\n     *\r\n     */\r\n    freezing = 'freezing',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Lava block.\r\n     *\r\n     */\r\n    lava = 'lava',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by being struck by lightning.\r\n     *\r\n     */\r\n    lightning = 'lightning',\r\n    maceSmash = 'maceSmash',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by magical attacks. For example, Evoker Fang\r\n     * or Conduit Block.\r\n     *\r\n     */\r\n    magic = 'magic',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Magma block.\r\n     *\r\n     */\r\n    magma = 'magma',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by no source. For example, from a command or\r\n     * script.\r\n     *\r\n     */\r\n    none = 'none',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an indirect source. For example, setting a\r\n     * mob's health to 0 in a behavior pack.\r\n     *\r\n     */\r\n    override = 'override',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a Piston.\r\n     *\r\n     */\r\n    piston = 'piston',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a projectile.\r\n     *\r\n     */\r\n    projectile = 'projectile',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by Goat ramming.\r\n     *\r\n     */\r\n    ramAttack = 'ramAttack',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the /kill command.\r\n     *\r\n     */\r\n    selfDestruct = 'selfDestruct',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Warden's Sonic Boom attack.\r\n     *\r\n     */\r\n    sonicBoom = 'sonicBoom',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a Soul Campfire.\r\n     *\r\n     */\r\n    soulCampfire = 'soulCampfire',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by a falling Stalactite block.\r\n     *\r\n     */\r\n    stalactite = 'stalactite',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by touching a Stalagmite block.\r\n     *\r\n     */\r\n    stalagmite = 'stalagmite',\r\n    /**\r\n     * @remarks\r\n     * Damage caused over time by having an empty hunger bar.\r\n     *\r\n     */\r\n    starve = 'starve',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being out of air and inside a\r\n     * non-liquid block.\r\n     *\r\n     */\r\n    suffocation = 'suffocation',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by an Entity being in an inhabitable climate.\r\n     * For example, a Snow Golem in a biome with a temperature\r\n     * greater than 1.\r\n     *\r\n     */\r\n    temperature = 'temperature',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Thorns armor enchantment and by the\r\n     * Guardian thorns effect.\r\n     *\r\n     */\r\n    thorns = 'thorns',\r\n    /**\r\n     * @remarks\r\n     * Damage caused over time by falling into the void.\r\n     *\r\n     */\r\n    'void' = 'void',\r\n    /**\r\n     * @remarks\r\n     * Damage caused by the Wither effect. For example, from\r\n     * touching a Wither Rose.\r\n     *\r\n     */\r\n    wither = 'wither',\r\n}\r",
      "jsdoc": "/**\r\n * Describes the source of damage from an Entity.\r\n */\r",
      "enumValues": [
        {
          "name": "anvil",
          "value": "anvil",
          "description": ""
        },
        {
          "name": "blockExplosion",
          "value": "blockExplosion",
          "description": ""
        },
        {
          "name": "campfire",
          "value": "campfire",
          "description": ""
        },
        {
          "name": "charging",
          "value": "charging",
          "description": ""
        },
        {
          "name": "contact",
          "value": "contact",
          "description": ""
        },
        {
          "name": "drowning",
          "value": "drowning",
          "description": ""
        },
        {
          "name": "entityAttack",
          "value": "entityAttack",
          "description": ""
        },
        {
          "name": "entityExplosion",
          "value": "entityExplosion",
          "description": ""
        },
        {
          "name": "fall",
          "value": "fall",
          "description": ""
        },
        {
          "name": "fallingBlock",
          "value": "fallingBlock",
          "description": ""
        },
        {
          "name": "fire",
          "value": "fire",
          "description": ""
        },
        {
          "name": "fireTick",
          "value": "fireTick",
          "description": ""
        },
        {
          "name": "fireworks",
          "value": "fireworks",
          "description": ""
        },
        {
          "name": "flyIntoWall",
          "value": "flyIntoWall",
          "description": ""
        },
        {
          "name": "freezing",
          "value": "freezing",
          "description": ""
        },
        {
          "name": "lava",
          "value": "lava",
          "description": ""
        },
        {
          "name": "lightning",
          "value": "lightning",
          "description": ""
        },
        {
          "name": "maceSmash",
          "value": "maceSmash"
        },
        {
          "name": "magic",
          "value": "magic",
          "description": ""
        },
        {
          "name": "magma",
          "value": "magma",
          "description": ""
        },
        {
          "name": "none",
          "value": "none",
          "description": ""
        },
        {
          "name": "override",
          "value": "override",
          "description": ""
        },
        {
          "name": "piston",
          "value": "piston",
          "description": ""
        },
        {
          "name": "projectile",
          "value": "projectile",
          "description": ""
        },
        {
          "name": "ramAttack",
          "value": "ramAttack",
          "description": ""
        },
        {
          "name": "selfDestruct",
          "value": "selfDestruct",
          "description": ""
        },
        {
          "name": "sonicBoom",
          "value": "sonicBoom",
          "description": ""
        },
        {
          "name": "soulCampfire",
          "value": "soulCampfire",
          "description": ""
        },
        {
          "name": "stalactite",
          "value": "stalactite",
          "description": ""
        },
        {
          "name": "stalagmite",
          "value": "stalagmite",
          "description": ""
        },
        {
          "name": "starve",
          "value": "starve",
          "description": ""
        },
        {
          "name": "suffocation",
          "value": "suffocation",
          "description": ""
        },
        {
          "name": "temperature",
          "value": "temperature",
          "description": ""
        },
        {
          "name": "thorns",
          "value": "thorns",
          "description": ""
        },
        {
          "name": "wither",
          "value": "wither",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydamagecause",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityInitializationCause": {
      "id": "@minecraft/server.EntityInitializationCause",
      "name": "EntityInitializationCause",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "An enumeration describing initialization cause of an entity.\r /",
      "definition": "export enum EntityInitializationCause {\n    /**\r\n     * @remarks\r\n     * Case when an entity is created as child of other entity or\r\n     * entities, e.g., cows making a cow or slimes making smaller\r\n     * slimes after dying.\r\n     *\r\n     */\r\n    Born = 'Born',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is created by an event, e.g., a\r\n     * Wandering trader spawning llamas.\r\n     *\r\n     */\r\n    Event = 'Event',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is loaded into the world.\r\n     *\r\n     */\r\n    Loaded = 'Loaded',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is naturally spawned in the world.\r\n     *\r\n     */\r\n    Spawned = 'Spawned',\r\n    /**\r\n     * @remarks\r\n     * Case when an entity is transformed into another entity.\r\n     *\r\n     */\r\n    Transformed = 'Transformed',\r\n}\r",
      "jsdoc": "/**\r\n * An enumeration describing initialization cause of an entity.\r\n */\r",
      "enumValues": [
        {
          "name": "Born",
          "value": "Born",
          "description": ""
        },
        {
          "name": "Event",
          "value": "Event",
          "description": ""
        },
        {
          "name": "Loaded",
          "value": "Loaded",
          "description": ""
        },
        {
          "name": "Spawned",
          "value": "Spawned",
          "description": ""
        },
        {
          "name": "Transformed",
          "value": "Transformed",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityinitializationcause",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EquipmentSlot": {
      "id": "@minecraft/server.EquipmentSlot",
      "name": "EquipmentSlot",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The equipment slot of the mob. This includes armor, offhand\r and mainhand slots.\r /",
      "definition": "export enum EquipmentSlot {\n    /**\r\n     * @remarks\r\n     * The chest slot. This slot is used to hold items such as\r\n     * Chestplate or Elytra.\r\n     *\r\n     */\r\n    Chest = 'Chest',\r\n    /**\r\n     * @remarks\r\n     * The feet slot. This slot is used to hold items such as\r\n     * Boots.\r\n     *\r\n     */\r\n    Feet = 'Feet',\r\n    /**\r\n     * @remarks\r\n     * The head slot. This slot is used to hold items such as\r\n     * Helmets or Carved Pumpkins.\r\n     *\r\n     */\r\n    Head = 'Head',\r\n    /**\r\n     * @remarks\r\n     * The legs slot. This slot is used to hold items such as\r\n     * Leggings.\r\n     *\r\n     */\r\n    Legs = 'Legs',\r\n    /**\r\n     * @remarks\r\n     * The mainhand slot. For players, the mainhand slot refers to\r\n     * the currently active hotbar slot.\r\n     *\r\n     */\r\n    Mainhand = 'Mainhand',\r\n    /**\r\n     * @remarks\r\n     * The offhand slot. This slot is used to hold items such as\r\n     * shields and maps.\r\n     *\r\n     */\r\n    Offhand = 'Offhand',\r\n}\r",
      "jsdoc": "/**\r\n * The equipment slot of the mob. This includes armor, offhand\r\n * and mainhand slots.\r\n */\r",
      "enumValues": [
        {
          "name": "Chest",
          "value": "Chest",
          "description": ""
        },
        {
          "name": "Feet",
          "value": "Feet",
          "description": ""
        },
        {
          "name": "Head",
          "value": "Head",
          "description": ""
        },
        {
          "name": "Legs",
          "value": "Legs",
          "description": ""
        },
        {
          "name": "Mainhand",
          "value": "Mainhand",
          "description": ""
        },
        {
          "name": "Offhand",
          "value": "Offhand",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "equipmentslot",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.FluidType": {
      "id": "@minecraft/server.FluidType",
      "name": "FluidType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Represents the type of fluid for use within a fluid\r containing block, like a cauldron.\r /",
      "definition": "export enum FluidType {\n    /**\r\n     * @remarks\r\n     * Represents lava as a type of fluid.\r\n     *\r\n     */\r\n    Lava = 'Lava',\r\n    /**\r\n     * @remarks\r\n     * Represents a potion as a type of fluid.\r\n     *\r\n     */\r\n    Potion = 'Potion',\r\n    /**\r\n     * @remarks\r\n     * Represents powder snow as a type of fluid.\r\n     *\r\n     */\r\n    PowderSnow = 'PowderSnow',\r\n    /**\r\n     * @remarks\r\n     * Represents water as a type of fluida.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
      "jsdoc": "/**\r\n * Represents the type of fluid for use within a fluid\r\n * containing block, like a cauldron.\r\n */\r",
      "enumValues": [
        {
          "name": "Lava",
          "value": "Lava",
          "description": ""
        },
        {
          "name": "Potion",
          "value": "Potion",
          "description": ""
        },
        {
          "name": "PowderSnow",
          "value": "PowderSnow",
          "description": ""
        },
        {
          "name": "Water",
          "value": "Water",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "fluidtype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.GameMode": {
      "id": "@minecraft/server.GameMode",
      "name": "GameMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Represents a game mode for the current world experience.\r /",
      "definition": "export enum GameMode {\n    /**\r\n     * @remarks\r\n     * World is in a more locked-down experience, where blocks may\r\n     * not be manipulated.\r\n     *\r\n     */\r\n    Adventure = 'Adventure',\r\n    /**\r\n     * @remarks\r\n     * World is in a full creative mode. In creative mode, the\r\n     * player has all the resources available in the item selection\r\n     * tabs and the survival selection tab. They can also destroy\r\n     * blocks instantly including those which would normally be\r\n     * indestructible. Command and structure blocks can also be\r\n     * used in creative mode. Items also do not lose durability or\r\n     * disappear.\r\n     *\r\n     */\r\n    Creative = 'Creative',\r\n    /**\r\n     * @remarks\r\n     * World is in spectator mode. In spectator mode, spectators\r\n     * are always flying and cannot become grounded. Spectators can\r\n     * pass through solid blocks and entities without any\r\n     * collisions, and cannot use items or interact with blocks or\r\n     * mobs. Spectators cannot be seen by mobs or other players,\r\n     * except for other spectators; spectators appear as a\r\n     * transparent floating head.\r\n     *\r\n     */\r\n    Spectator = 'Spectator',\r\n    /**\r\n     * @remarks\r\n     * World is in a survival mode, where players can take damage\r\n     * and entities may not be peaceful. Survival mode is where the\r\n     * player must collect resources, build structures while\r\n     * surviving in their generated world. Activities can, over\r\n     * time, chip away at player health and hunger bar.\r\n     *\r\n     */\r\n    Survival = 'Survival',\r\n}\r",
      "jsdoc": "/**\r\n * Represents a game mode for the current world experience.\r\n */\r",
      "enumValues": [
        {
          "name": "Adventure",
          "value": "Adventure",
          "description": ""
        },
        {
          "name": "Creative",
          "value": "Creative",
          "description": ""
        },
        {
          "name": "Spectator",
          "value": "Spectator",
          "description": ""
        },
        {
          "name": "Survival",
          "value": "Survival",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamemode",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.GameRule": {
      "id": "@minecraft/server.GameRule",
      "name": "GameRule",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Game rules. These values can also be controlled via the\r /gamerule command.\r /",
      "definition": "export enum GameRule {\n    /**\r\n     * @remarks\r\n     * Whether command blocks should notify admins when they\r\n     * perform commands.\r\n     *\r\n     */\r\n    CommandBlockOutput = 'commandBlockOutput',\r\n    /**\r\n     * @remarks\r\n     * Controls whether command blocks can execute commands.\r\n     *\r\n     */\r\n    CommandBlocksEnabled = 'commandBlocksEnabled',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the day and night cycles progress.\r\n     *\r\n     */\r\n    DoDayLightCycle = 'doDayLightCycle',\r\n    /**\r\n     * @remarks\r\n     * Controls whether non-mob entities do drops. ie. Item Frame\r\n     *\r\n     */\r\n    DoEntityDrops = 'doEntityDrops',\r\n    /**\r\n     * @remarks\r\n     * Controls whether fire spreads.\r\n     *\r\n     */\r\n    DoFireTick = 'doFireTick',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players immediately respawn or are shown\r\n     * the death screen.\r\n     *\r\n     */\r\n    DoImmediateRespawn = 'doImmediateRespawn',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players deal with the effects of not\r\n     * sleeping (such as Phantom spawning).\r\n     *\r\n     */\r\n    DoInsomnia = 'doInsomnia',\r\n    /**\r\n     * @remarks\r\n     * Determines whether players should be able to craft only\r\n     * those recipes that they've unlocked first - when\r\n     * dolimitedcrafting is set to true.\r\n     *\r\n     */\r\n    DoLimitedCrafting = 'doLimitedCrafting',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mobs drop loot.\r\n     *\r\n     */\r\n    DoMobLoot = 'doMobLoot',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mobs spawn naturally in the world.\r\n     *\r\n     */\r\n    DoMobSpawning = 'doMobSpawning',\r\n    /**\r\n     * @remarks\r\n     * Controls whether blocks drop items when destroyed.\r\n     *\r\n     */\r\n    DoTileDrops = 'doTileDrops',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the weather can change naturally.\r\n     *\r\n     */\r\n    DoWeatherCycle = 'doWeatherCycle',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from drowning.\r\n     *\r\n     */\r\n    DrowningDamage = 'drowningDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from falling.\r\n     *\r\n     */\r\n    FallDamage = 'fallDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether entities take damage from fire.\r\n     *\r\n     */\r\n    FireDamage = 'fireDamage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether there is damage from freezing.\r\n     *\r\n     */\r\n    FreezeDamage = 'freezeDamage',\r\n    /**\r\n     * @remarks\r\n     * The maximum number of commands that can be executed\r\n     * simultaneously by the /function command.\r\n     *\r\n     */\r\n    FunctionCommandLimit = 'functionCommandLimit',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players keep their inventories when they\r\n     * die.\r\n     *\r\n     */\r\n    KeepInventory = 'keepInventory',\r\n    /**\r\n     * @remarks\r\n     * The maximum number of chained commands that can execute per\r\n     * tick.\r\n     *\r\n     */\r\n    MaxCommandChainLength = 'maxCommandChainLength',\r\n    /**\r\n     * @remarks\r\n     * Controls whether mob griefing can happen in the world.\r\n     * Example: A Creeper explosion destroying blocks.\r\n     *\r\n     */\r\n    MobGriefing = 'mobGriefing',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players can regenerate health.\r\n     *\r\n     */\r\n    NaturalRegeneration = 'naturalRegeneration',\r\n    /**\r\n     * @remarks\r\n     * The percentage of players required to be sleeping in order\r\n     * to advance to the next day.\r\n     *\r\n     */\r\n    PlayersSleepingPercentage = 'playersSleepingPercentage',\r\n    /**\r\n     * @remarks\r\n     * Controls whether projectiles (entities with a projectile\r\n     * component, like Arrows, thrown Tridents or Fireworks) can\r\n     * destroy certain blocks that support this interaction (such\r\n     * as Chorus Fruit, Dripstone or Decorated Pots). Restrictions\r\n     * on which projectiles can destroy certain blocks apply.\r\n     *\r\n     */\r\n    ProjectilesCanBreakBlocks = 'projectilesCanBreakBlocks',\r\n    /**\r\n     * @remarks\r\n     * Controls whether players can damage each other.\r\n     *\r\n     */\r\n    Pvp = 'pvp',\r\n    /**\r\n     * @remarks\r\n     * Controls how frequently random ticks occur. A value of 0 or\r\n     * less will disable random ticks. The default value is 1.\r\n     *\r\n     */\r\n    RandomTickSpeed = 'randomTickSpeed',\r\n    /**\r\n     * @remarks\r\n     * Controls whether built-in (vanilla) recipes automatically\r\n     * unlock as the player progresses through the game (one\r\n     * alternative to this is to use the /recipe command based on\r\n     * custom gameplay logic.)\r\n     *\r\n     */\r\n    RecipesUnlock = 'recipesUnlock',\r\n    /**\r\n     * @remarks\r\n     * Controls whether respawn blocks (e.g. Bed, Respawn Anchor)\r\n     * explode in other dimensions.\r\n     *\r\n     */\r\n    RespawnBlocksExplode = 'respawnBlocksExplode',\r\n    /**\r\n     * @remarks\r\n     * Controls whether command output is displayed to players.\r\n     * Also controls whether Command Block output is stored by\r\n     * default.\r\n     *\r\n     */\r\n    SendCommandFeedback = 'sendCommandFeedback',\r\n    /**\r\n     * @remarks\r\n     * Controls whether Border Block effects are shown.\r\n     *\r\n     */\r\n    ShowBorderEffect = 'showBorderEffect',\r\n    /**\r\n     * @remarks\r\n     * Controls whether player coordinates are displayed.\r\n     *\r\n     */\r\n    ShowCoordinates = 'showCoordinates',\r\n    /**\r\n     * @remarks\r\n     * Controls whether the days a player has played is displayed.\r\n     *\r\n     */\r\n    ShowDaysPlayed = 'showDaysPlayed',\r\n    /**\r\n     * @remarks\r\n     * Controls whether death messages are displayed in chat.\r\n     *\r\n     */\r\n    ShowDeathMessages = 'showDeathMessages',\r\n    /**\r\n     * @remarks\r\n     * Controls whether standard player notifications for recipes\r\n     * will show. When set to false, 'player unlocked recipes' are\r\n     * no longer sent as player notifications.\r\n     *\r\n     */\r\n    ShowRecipeMessages = 'showRecipeMessages',\r\n    /**\r\n     * @remarks\r\n     * Controls whether item tags are shown. E.g. 'Can Place On',\r\n     * 'Can Destroy', item lock icons, etc.\r\n     *\r\n     */\r\n    ShowTags = 'showTags',\r\n    /**\r\n     * @remarks\r\n     * The block radius from world spawn that a player is allowed\r\n     * to spawn in. Does not affect Adventure mode. The default\r\n     * value is 10 blocks.\r\n     *\r\n     */\r\n    SpawnRadius = 'spawnRadius',\r\n    /**\r\n     * @remarks\r\n     * Affects whether TNT blocks can be lit.\r\n     *\r\n     */\r\n    TntExplodes = 'tntExplodes',\r\n    /**\r\n     * @remarks\r\n     * Controls whether blocks randomly drop loot or all blocks\r\n     * drop loot when destroyed by an explosion. Defaults to false.\r\n     *\r\n     */\r\n    TntExplosionDropDecay = 'tntExplosionDropDecay',\r\n}\r",
      "jsdoc": "/**\r\n * Game rules. These values can also be controlled via the\r\n * /gamerule command.\r\n */\r",
      "enumValues": [
        {
          "name": "CommandBlockOutput",
          "value": "commandBlockOutput",
          "description": ""
        },
        {
          "name": "CommandBlocksEnabled",
          "value": "commandBlocksEnabled",
          "description": ""
        },
        {
          "name": "DoDayLightCycle",
          "value": "doDayLightCycle",
          "description": ""
        },
        {
          "name": "DoEntityDrops",
          "value": "doEntityDrops",
          "description": ""
        },
        {
          "name": "DoFireTick",
          "value": "doFireTick",
          "description": ""
        },
        {
          "name": "DoImmediateRespawn",
          "value": "doImmediateRespawn",
          "description": ""
        },
        {
          "name": "DoInsomnia",
          "value": "doInsomnia",
          "description": ""
        },
        {
          "name": "DoLimitedCrafting",
          "value": "doLimitedCrafting",
          "description": ""
        },
        {
          "name": "DoMobLoot",
          "value": "doMobLoot",
          "description": ""
        },
        {
          "name": "DoMobSpawning",
          "value": "doMobSpawning",
          "description": ""
        },
        {
          "name": "DoTileDrops",
          "value": "doTileDrops",
          "description": ""
        },
        {
          "name": "DoWeatherCycle",
          "value": "doWeatherCycle",
          "description": ""
        },
        {
          "name": "DrowningDamage",
          "value": "drowningDamage",
          "description": ""
        },
        {
          "name": "FallDamage",
          "value": "fallDamage",
          "description": ""
        },
        {
          "name": "FireDamage",
          "value": "fireDamage",
          "description": ""
        },
        {
          "name": "FreezeDamage",
          "value": "freezeDamage",
          "description": ""
        },
        {
          "name": "FunctionCommandLimit",
          "value": "functionCommandLimit",
          "description": ""
        },
        {
          "name": "KeepInventory",
          "value": "keepInventory",
          "description": ""
        },
        {
          "name": "MaxCommandChainLength",
          "value": "maxCommandChainLength",
          "description": ""
        },
        {
          "name": "MobGriefing",
          "value": "mobGriefing",
          "description": ""
        },
        {
          "name": "NaturalRegeneration",
          "value": "naturalRegeneration",
          "description": ""
        },
        {
          "name": "PlayersSleepingPercentage",
          "value": "playersSleepingPercentage",
          "description": ""
        },
        {
          "name": "ProjectilesCanBreakBlocks",
          "value": "projectilesCanBreakBlocks",
          "description": ""
        },
        {
          "name": "Pvp",
          "value": "pvp",
          "description": ""
        },
        {
          "name": "RandomTickSpeed",
          "value": "randomTickSpeed",
          "description": ""
        },
        {
          "name": "RecipesUnlock",
          "value": "recipesUnlock",
          "description": ""
        },
        {
          "name": "RespawnBlocksExplode",
          "value": "respawnBlocksExplode",
          "description": ""
        },
        {
          "name": "SendCommandFeedback",
          "value": "sendCommandFeedback",
          "description": ""
        },
        {
          "name": "ShowBorderEffect",
          "value": "showBorderEffect",
          "description": ""
        },
        {
          "name": "ShowCoordinates",
          "value": "showCoordinates",
          "description": ""
        },
        {
          "name": "ShowDaysPlayed",
          "value": "showDaysPlayed",
          "description": ""
        },
        {
          "name": "ShowDeathMessages",
          "value": "showDeathMessages",
          "description": ""
        },
        {
          "name": "ShowRecipeMessages",
          "value": "showRecipeMessages",
          "description": ""
        },
        {
          "name": "ShowTags",
          "value": "showTags",
          "description": ""
        },
        {
          "name": "SpawnRadius",
          "value": "spawnRadius",
          "description": ""
        },
        {
          "name": "TntExplodes",
          "value": "tntExplodes",
          "description": ""
        },
        {
          "name": "TntExplosionDropDecay",
          "value": "tntExplosionDropDecay",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamerule",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.GraphicsMode": {
      "id": "@minecraft/server.GraphicsMode",
      "name": "GraphicsMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Player.graphicsMode}\r /",
      "definition": "export enum GraphicsMode {\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Deferred Technical\r\n     * Preview graphics mode setting.\r\n     *\r\n     */\r\n    Deferred = 'Deferred',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Fancy graphics mode\r\n     * setting. Most special graphics effects are turned on in this\r\n     * setting.\r\n     *\r\n     */\r\n    Fancy = 'Fancy',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Ray Traced graphics mode\r\n     * setting. This setting enables ray tracing.\r\n     *\r\n     */\r\n    RayTraced = 'RayTraced',\r\n    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Simple graphics mode\r\n     * setting. Most graphics effects are turned off in this\r\n     * setting.\r\n     *\r\n     */\r\n    Simple = 'Simple',\r\n}\r",
      "jsdoc": "/**\r\n * Describes the graphics mode of a client. Used by {@link\r\n * Player.graphicsMode}\r\n */\r",
      "enumValues": [
        {
          "name": "Deferred",
          "value": "Deferred",
          "description": ""
        },
        {
          "name": "Fancy",
          "value": "Fancy",
          "description": ""
        },
        {
          "name": "RayTraced",
          "value": "RayTraced",
          "description": ""
        },
        {
          "name": "Simple",
          "value": "Simple",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "graphicsmode",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.HudElement": {
      "id": "@minecraft/server.HudElement",
      "name": "HudElement",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "A graphics mode that refers to the Simple graphics mode\r setting. Most graphics effects are turned off in this\r setting.",
      "definition": "export enum HudElement {\n    PaperDoll = 0,\r\n    Armor = 1,\r\n    ToolTips = 2,\r\n    TouchControls = 3,\r\n    Crosshair = 4,\r\n    Hotbar = 5,\r\n    Health = 6,\r\n    ProgressBar = 7,\r\n    Hunger = 8,\r\n    AirBubbles = 9,\r\n    HorseHealth = 10,\r\n    StatusEffects = 11,\r\n    ItemText = 12,\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * A graphics mode that refers to the Simple graphics mode\r\n     * setting. Most graphics effects are turned off in this\r\n     * setting.\r\n     *\r\n     */\r",
      "enumValues": [
        {
          "name": "PaperDoll",
          "value": 0
        },
        {
          "name": "Armor",
          "value": 1
        },
        {
          "name": "ToolTips",
          "value": 2
        },
        {
          "name": "TouchControls",
          "value": 3
        },
        {
          "name": "Crosshair",
          "value": 4
        },
        {
          "name": "Hotbar",
          "value": 5
        },
        {
          "name": "Health",
          "value": 6
        },
        {
          "name": "ProgressBar",
          "value": 7
        },
        {
          "name": "Hunger",
          "value": 8
        },
        {
          "name": "AirBubbles",
          "value": 9
        },
        {
          "name": "HorseHealth",
          "value": 10
        },
        {
          "name": "StatusEffects",
          "value": 11
        },
        {
          "name": "ItemText",
          "value": 12
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "hudelement",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.HudVisibility": {
      "id": "@minecraft/server.HudVisibility",
      "name": "HudVisibility",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Enumeration that specifies how to treat the visibility of a\r HUD element.\r /",
      "definition": "export enum HudVisibility {\n    /**\r\n     * @remarks\r\n     * Specifies that this HUD element should be hidden.\r\n     *\r\n     */\r\n    Hide = 0,\r\n    /**\r\n     * @remarks\r\n     * Specifies that this HUD element should be reset to its\r\n     * default state (while most HUD elements are visible, some HUD\r\n     * elements can be hidden by the player via settings.)\r\n     *\r\n     */\r\n    Reset = 1,\r\n}\r",
      "jsdoc": "/**\r\n * Enumeration that specifies how to treat the visibility of a\r\n * HUD element.\r\n */\r",
      "enumValues": [
        {
          "name": "Hide",
          "value": 0,
          "description": ""
        },
        {
          "name": "Reset",
          "value": 1,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "hudvisibility",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.InputButton": {
      "id": "@minecraft/server.InputButton",
      "name": "InputButton",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "All the different input buttons that are supported. Use with\r /",
      "definition": "export enum InputButton {\n    /**\r\n     * @remarks\r\n     * This is mapped to the 'Jump' button on controllers,\r\n     * keyboards, and touch interfaces.\r\n     *\r\n     */\r\n    Jump = 'Jump',\r\n    /**\r\n     * @remarks\r\n     * This is mapped to the 'Sneak' button on controllers,\r\n     * keyboards, and touch interfaces. By default, this is shift\r\n     * on a keyboard or B on an Xbox controller. On touch\r\n     * interfaces this will only be pressed for 1 tick or less and\r\n     * then it will be released immediately even if the player\r\n     * holds their finger down. Dismounting a horse or exiting a\r\n     * boat will not send a Sneak button change event.\r\n     *\r\n     */\r\n    Sneak = 'Sneak',\r\n}\r",
      "jsdoc": "/**\r\n * All the different input buttons that are supported. Use with\r\n * {@link InputInfo.getButtonState} via {@link\r\n * Player.inputInfo} or {@link PlayerButtonInputAfterEvent} via\r\n * {@link WorldAfterEvents.playerButtonInput}\r\n */\r",
      "enumValues": [
        {
          "name": "Jump",
          "value": "Jump",
          "description": ""
        },
        {
          "name": "Sneak",
          "value": "Sneak",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputbutton",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.InputMode": {
      "id": "@minecraft/server.InputMode",
      "name": "InputMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes the type of input of a device.\r /",
      "definition": "export enum InputMode {\n    /**\r\n     * @remarks\r\n     * Gamepad input.\r\n     *\r\n     */\r\n    Gamepad = 'Gamepad',\r\n    /**\r\n     * @remarks\r\n     * Keyboard and mouse input.\r\n     *\r\n     */\r\n    KeyboardAndMouse = 'KeyboardAndMouse',\r\n    /**\r\n     * @remarks\r\n     * Motion controller input.\r\n     *\r\n     */\r\n    MotionController = 'MotionController',\r\n    /**\r\n     * @remarks\r\n     * Touch input.\r\n     *\r\n     */\r\n    Touch = 'Touch',\r\n}\r",
      "jsdoc": "/**\r\n * Describes the type of input of a device.\r\n */\r",
      "enumValues": [
        {
          "name": "Gamepad",
          "value": "Gamepad",
          "description": ""
        },
        {
          "name": "KeyboardAndMouse",
          "value": "KeyboardAndMouse",
          "description": ""
        },
        {
          "name": "MotionController",
          "value": "MotionController",
          "description": ""
        },
        {
          "name": "Touch",
          "value": "Touch",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputmode",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.InputPermissionCategory": {
      "id": "@minecraft/server.InputPermissionCategory",
      "name": "InputPermissionCategory",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "PlayerInputPermissionCategoryChangeAfterEvent} to specify\r PlayerInputPermissions} to get or set permissions.\r /",
      "definition": "export enum InputPermissionCategory {\n    /**\r\n     * @remarks\r\n     * Player input relating to camera movement.\r\n     *\r\n     */\r\n    Camera = 1,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to all player movement. Disabling this\r\n     * is equivalent to disabling jump, sneak, lateral movement,\r\n     * mount, and dismount.\r\n     *\r\n     */\r\n    Movement = 2,\r\n    /**\r\n     * @remarks\r\n     * Player input for moving laterally in the world. This would\r\n     * be WASD on a keyboard or the movement joystick on gamepad or\r\n     * touch.\r\n     *\r\n     */\r\n    LateralMovement = 4,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to sneak. This also affects flying\r\n     * down.\r\n     *\r\n     */\r\n    Sneak = 5,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to jumping. This also affects flying\r\n     * up.\r\n     *\r\n     */\r\n    Jump = 6,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to mounting vehicles.\r\n     *\r\n     */\r\n    Mount = 7,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to dismounting. When disabled, the\r\n     * player can still dismount vehicles by other means, for\r\n     * example on horses players can still jump off and in boats\r\n     * players can go into another boat.\r\n     *\r\n     */\r\n    Dismount = 8,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player forward.\r\n     *\r\n     */\r\n    MoveForward = 9,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player backward.\r\n     *\r\n     */\r\n    MoveBackward = 10,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player left.\r\n     *\r\n     */\r\n    MoveLeft = 11,\r\n    /**\r\n     * @remarks\r\n     * Player input relating to moving the player right.\r\n     *\r\n     */\r\n    MoveRight = 12,\r\n}\r",
      "jsdoc": "/**\r\n * Input permission categories. Used by {@link\r\n * PlayerInputPermissionCategoryChangeAfterEvent} to specify\r\n * which category was changed and {@link\r\n * PlayerInputPermissions} to get or set permissions.\r\n */\r",
      "enumValues": [
        {
          "name": "Camera",
          "value": 1,
          "description": ""
        },
        {
          "name": "Movement",
          "value": 2,
          "description": ""
        },
        {
          "name": "LateralMovement",
          "value": 4,
          "description": ""
        },
        {
          "name": "Sneak",
          "value": 5,
          "description": ""
        },
        {
          "name": "Jump",
          "value": 6,
          "description": ""
        },
        {
          "name": "Mount",
          "value": 7,
          "description": ""
        },
        {
          "name": "Dismount",
          "value": 8,
          "description": ""
        },
        {
          "name": "MoveForward",
          "value": 9,
          "description": ""
        },
        {
          "name": "MoveBackward",
          "value": 10,
          "description": ""
        },
        {
          "name": "MoveLeft",
          "value": 11,
          "description": ""
        },
        {
          "name": "MoveRight",
          "value": 12,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputpermissioncategory",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentTypes": {
      "id": "@minecraft/server.ItemComponentTypes",
      "name": "ItemComponentTypes",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The types of item components that are accessible via\r function ItemStack.getComponent.\r /",
      "definition": "export enum ItemComponentTypes {\n    Compostable = 'minecraft:compostable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:cooldown component.\r\n     *\r\n     */\r\n    Cooldown = 'minecraft:cooldown',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:durability component.\r\n     *\r\n     */\r\n    Durability = 'minecraft:durability',\r\n    Dyeable = 'minecraft:dyeable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:enchantable component.\r\n     *\r\n     */\r\n    Enchantable = 'minecraft:enchantable',\r\n    /**\r\n     * @remarks\r\n     * The minecraft:food component.\r\n     *\r\n     */\r\n    Food = 'minecraft:food',\r\n}\r",
      "jsdoc": "/**\r\n * The types of item components that are accessible via\r\n * function ItemStack.getComponent.\r\n */\r",
      "enumValues": [
        {
          "name": "Compostable",
          "value": "minecraft:compostable"
        },
        {
          "name": "Cooldown",
          "value": "minecraft:cooldown",
          "description": ""
        },
        {
          "name": "Durability",
          "value": "minecraft:durability",
          "description": ""
        },
        {
          "name": "Dyeable",
          "value": "minecraft:dyeable"
        },
        {
          "name": "Enchantable",
          "value": "minecraft:enchantable",
          "description": ""
        },
        {
          "name": "Food",
          "value": "minecraft:food",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponenttypes",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ItemLockMode": {
      "id": "@minecraft/server.ItemLockMode",
      "name": "ItemLockMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes how an an item can be moved within a container.\r /",
      "definition": "export enum ItemLockMode {\n    /**\r\n     * @remarks\r\n     * The item cannot be dropped or crafted with.\r\n     *\r\n     */\r\n    inventory = 'inventory',\r\n    /**\r\n     * @remarks\r\n     * The item has no container restrictions.\r\n     *\r\n     */\r\n    none = 'none',\r\n    /**\r\n     * @remarks\r\n     * The item cannot be moved from its slot, dropped or crafted\r\n     * with.\r\n     *\r\n     */\r\n    slot = 'slot',\r\n}\r",
      "jsdoc": "/**\r\n * Describes how an an item can be moved within a container.\r\n */\r",
      "enumValues": [
        {
          "name": "inventory",
          "value": "inventory",
          "description": ""
        },
        {
          "name": "none",
          "value": "none",
          "description": ""
        },
        {
          "name": "slot",
          "value": "slot",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemlockmode",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.LiquidType": {
      "id": "@minecraft/server.LiquidType",
      "name": "LiquidType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Represents the type of liquid that can be placed on a block\r or flow dynamically in the world.\r /",
      "definition": "export enum LiquidType {\n    /**\r\n     * @remarks\r\n     * Represents water as a type of liquid.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
      "jsdoc": "/**\r\n * Represents the type of liquid that can be placed on a block\r\n * or flow dynamically in the world.\r\n */\r",
      "enumValues": [
        {
          "name": "Water",
          "value": "Water",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "liquidtype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.MemoryTier": {
      "id": "@minecraft/server.MemoryTier",
      "name": "MemoryTier",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes the memory of a device.\r /",
      "definition": "export enum MemoryTier {\n    /**\r\n     * @remarks\r\n     * Max memory for Super Low Tier is 1.5GBs.\r\n     *\r\n     */\r\n    SuperLow = 0,\r\n    /**\r\n     * @remarks\r\n     *  Max memory for Low Tier is 2GBs.\r\n     *\r\n     */\r\n    Low = 1,\r\n    /**\r\n     * @remarks\r\n     * Max memory for Mid Tier is 4GBs.\r\n     *\r\n     */\r\n    Mid = 2,\r\n    /**\r\n     * @remarks\r\n     * Max memory for High Tier is 8GBs.\r\n     *\r\n     */\r\n    High = 3,\r\n    /**\r\n     * @remarks\r\n     * Memory for Super High Tier is above 8GBs.\r\n     *\r\n     */\r\n    SuperHigh = 4,\r\n}\r",
      "jsdoc": "/**\r\n * Describes the memory of a device.\r\n */\r",
      "enumValues": [
        {
          "name": "SuperLow",
          "value": 0,
          "description": ""
        },
        {
          "name": "Low",
          "value": 1,
          "description": ""
        },
        {
          "name": "Mid",
          "value": 2,
          "description": ""
        },
        {
          "name": "High",
          "value": 3,
          "description": ""
        },
        {
          "name": "SuperHigh",
          "value": 4,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "memorytier",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.MoonPhase": {
      "id": "@minecraft/server.MoonPhase",
      "name": "MoonPhase",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Enum containing the different phases of the moon based on\r the current day.,Obtain the current MoonPhase using\r world.getMoonPhase.\r  The fullness of the moon controls various mob behaviors such\r as the number of slimes that spawn in Swamp biomes, the\r chance skeletons and zombies have to spawn with armor, as\r well as the chance for spiders to spawn with certain status\r effects.\r /",
      "definition": "export enum MoonPhase {\n    /**\r\n     * @remarks\r\n     * The brightest moon phase. During this phase, cats have a 50%\r\n     * chance of spawning as black cats.\r\n     *\r\n     */\r\n    FullMoon = 0,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Full Moon.\r\n     *\r\n     */\r\n    WaningGibbous = 1,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Waxing Crescent.\r\n     *\r\n     */\r\n    FirstQuarter = 2,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Last Quarter.\r\n     *\r\n     */\r\n    WaningCrescent = 3,\r\n    /**\r\n     * @remarks\r\n     * The darkest moon phase.\r\n     *\r\n     */\r\n    NewMoon = 4,\r\n    /**\r\n     * @remarks\r\n     * The phase following the New Moon.\r\n     *\r\n     */\r\n    WaxingCrescent = 5,\r\n    /**\r\n     * @remarks\r\n     * The phase following the Waning Gibbous.\r\n     *\r\n     */\r\n    LastQuarter = 6,\r\n    /**\r\n     * @remarks\r\n     * The phase following the First Quarter.\r\n     *\r\n     */\r\n    WaxingGibbous = 7,\r\n}\r",
      "jsdoc": "/**\r\n * Enum containing the different phases of the moon based on\r\n * the current day.,Obtain the current MoonPhase using\r\n * world.getMoonPhase.\r\n *\r\n * The fullness of the moon controls various mob behaviors such\r\n * as the number of slimes that spawn in Swamp biomes, the\r\n * chance skeletons and zombies have to spawn with armor, as\r\n * well as the chance for spiders to spawn with certain status\r\n * effects.\r\n */\r",
      "enumValues": [
        {
          "name": "FullMoon",
          "value": 0,
          "description": ""
        },
        {
          "name": "WaningGibbous",
          "value": 1,
          "description": ""
        },
        {
          "name": "FirstQuarter",
          "value": 2,
          "description": ""
        },
        {
          "name": "WaningCrescent",
          "value": 3,
          "description": ""
        },
        {
          "name": "NewMoon",
          "value": 4,
          "description": ""
        },
        {
          "name": "WaxingCrescent",
          "value": 5,
          "description": ""
        },
        {
          "name": "LastQuarter",
          "value": 6,
          "description": ""
        },
        {
          "name": "WaxingGibbous",
          "value": 7,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "moonphase",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.MovementType": {
      "id": "@minecraft/server.MovementType",
      "name": "MovementType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The phase following the First Quarter.",
      "definition": "export enum MovementType {\n    Immovable = 'Immovable',\r\n    Popped = 'Popped',\r\n    Push = 'Push',\r\n    PushPull = 'PushPull',\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * The phase following the First Quarter.\r\n     *\r\n     */\r",
      "enumValues": [
        {
          "name": "Immovable",
          "value": "Immovable"
        },
        {
          "name": "Popped",
          "value": "Popped"
        },
        {
          "name": "Push",
          "value": "Push"
        },
        {
          "name": "PushPull",
          "value": "PushPull"
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "movementtype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.NamespaceNameErrorReason": {
      "id": "@minecraft/server.NamespaceNameErrorReason",
      "name": "NamespaceNameErrorReason",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "An enumeration describing the reason for the namespace name\r error being thrown\r /",
      "definition": "export enum NamespaceNameErrorReason {\n    /**\r\n     * @remarks\r\n     * A restricted namespace was used as the namespace\r\n     *\r\n     */\r\n    DisallowedNamespace = 'DisallowedNamespace',\r\n    /**\r\n     * @remarks\r\n     * The name was missing a namespace when one is required\r\n     *\r\n     */\r\n    NoNamespace = 'NoNamespace',\r\n}\r",
      "jsdoc": "/**\r\n * An enumeration describing the reason for the namespace name\r\n * error being thrown\r\n */\r",
      "enumValues": [
        {
          "name": "DisallowedNamespace",
          "value": "DisallowedNamespace",
          "description": ""
        },
        {
          "name": "NoNamespace",
          "value": "NoNamespace",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "namespacenameerrorreason",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ObjectiveSortOrder": {
      "id": "@minecraft/server.ObjectiveSortOrder",
      "name": "ObjectiveSortOrder",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Used for specifying a sort order for how to display an\r objective and its list of participants.\r /",
      "definition": "export enum ObjectiveSortOrder {\n    /**\r\n     * @remarks\r\n     * Objective participant list is displayed in ascending (e.g.,\r\n     * A-Z) order.\r\n     *\r\n     */\r\n    Ascending = 0,\r\n    /**\r\n     * @remarks\r\n     * Objective participant list is displayed in descending (e.g.,\r\n     * Z-A) order.\r\n     *\r\n     */\r\n    Descending = 1,\r\n}\r",
      "jsdoc": "/**\r\n * Used for specifying a sort order for how to display an\r\n * objective and its list of participants.\r\n */\r",
      "enumValues": [
        {
          "name": "Ascending",
          "value": 0,
          "description": ""
        },
        {
          "name": "Descending",
          "value": 1,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "objectivesortorder",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.PaletteColor": {
      "id": "@minecraft/server.PaletteColor",
      "name": "PaletteColor",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Enum containing colors to be used with EntityColorComponent\r and EntityColor2Component\r /",
      "definition": "export enum PaletteColor {\n    /**\r\n     * @remarks\r\n     * Hex color #f0f0f0\r\n     *\r\n     */\r\n    White = 0,\r\n    /**\r\n     * @remarks\r\n     * Hex color #F9801D\r\n     *\r\n     */\r\n    Orange = 1,\r\n    /**\r\n     * @remarks\r\n     * Hex color #C74EBD\r\n     *\r\n     */\r\n    Magenta = 2,\r\n    /**\r\n     * @remarks\r\n     * Hex color #3AB3DA\r\n     *\r\n     */\r\n    LightBlue = 3,\r\n    /**\r\n     * @remarks\r\n     * Hex color #FED83D\r\n     *\r\n     */\r\n    Yellow = 4,\r\n    /**\r\n     * @remarks\r\n     * Hex color #80C71F\r\n     *\r\n     */\r\n    Lime = 5,\r\n    /**\r\n     * @remarks\r\n     * Hex color #F38BAA\r\n     *\r\n     */\r\n    Pink = 6,\r\n    /**\r\n     * @remarks\r\n     * Hex color #474F52\r\n     *\r\n     */\r\n    Gray = 7,\r\n    /**\r\n     * @remarks\r\n     * Hex color #9D9D97\r\n     *\r\n     */\r\n    Silver = 8,\r\n    /**\r\n     * @remarks\r\n     * Hex color #169C9C\r\n     *\r\n     */\r\n    Cyan = 9,\r\n    /**\r\n     * @remarks\r\n     * Hex color #8932B8\r\n     *\r\n     */\r\n    Purple = 10,\r\n    /**\r\n     * @remarks\r\n     * Hex color #3C44AA\r\n     *\r\n     */\r\n    Blue = 11,\r\n    /**\r\n     * @remarks\r\n     * Hex color #835432\r\n     *\r\n     */\r\n    Brown = 12,\r\n    /**\r\n     * @remarks\r\n     * Hex color #5E7C16\r\n     *\r\n     */\r\n    Green = 13,\r\n    /**\r\n     * @remarks\r\n     * Hex color #B02E26\r\n     *\r\n     */\r\n    Red = 14,\r\n    /**\r\n     * @remarks\r\n     * Hex color #1D1D21\r\n     *\r\n     */\r\n    Black = 15,\r\n}\r",
      "jsdoc": "/**\r\n * Enum containing colors to be used with EntityColorComponent\r\n * and EntityColor2Component\r\n */\r",
      "enumValues": [
        {
          "name": "White",
          "value": 0,
          "description": ""
        },
        {
          "name": "Orange",
          "value": 1,
          "description": ""
        },
        {
          "name": "Magenta",
          "value": 2,
          "description": ""
        },
        {
          "name": "LightBlue",
          "value": 3,
          "description": ""
        },
        {
          "name": "Yellow",
          "value": 4,
          "description": ""
        },
        {
          "name": "Lime",
          "value": 5,
          "description": ""
        },
        {
          "name": "Pink",
          "value": 6,
          "description": ""
        },
        {
          "name": "Gray",
          "value": 7,
          "description": ""
        },
        {
          "name": "Silver",
          "value": 8,
          "description": ""
        },
        {
          "name": "Cyan",
          "value": 9,
          "description": ""
        },
        {
          "name": "Purple",
          "value": 10,
          "description": ""
        },
        {
          "name": "Blue",
          "value": 11,
          "description": ""
        },
        {
          "name": "Brown",
          "value": 12,
          "description": ""
        },
        {
          "name": "Green",
          "value": 13,
          "description": ""
        },
        {
          "name": "Red",
          "value": 14,
          "description": ""
        },
        {
          "name": "Black",
          "value": 15,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "palettecolor",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.PlatformType": {
      "id": "@minecraft/server.PlatformType",
      "name": "PlatformType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes what kind of platform is a device.\r /",
      "definition": "export enum PlatformType {\n    /**\r\n     * @remarks\r\n     * Specialized gaming device.\r\n     *\r\n     */\r\n    Console = 'Console',\r\n    /**\r\n     * @remarks\r\n     * Personal Computer (PC).\r\n     *\r\n     */\r\n    Desktop = 'Desktop',\r\n    /**\r\n     * @remarks\r\n     *  Handheld device such smartphone or tablet.\r\n     *\r\n     */\r\n    Mobile = 'Mobile',\r\n}\r",
      "jsdoc": "/**\r\n * Describes what kind of platform is a device.\r\n */\r",
      "enumValues": [
        {
          "name": "Console",
          "value": "Console",
          "description": ""
        },
        {
          "name": "Desktop",
          "value": "Desktop",
          "description": ""
        },
        {
          "name": "Mobile",
          "value": "Mobile",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "platformtype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInventoryType": {
      "id": "@minecraft/server.PlayerInventoryType",
      "name": "PlayerInventoryType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies the player inventory type.\r /",
      "definition": "export enum PlayerInventoryType {\n    /**\r\n     * @remarks\r\n     * Hotbar inventory.\r\n     *\r\n     */\r\n    Hotbar = 'Hotbar',\r\n    /**\r\n     * @remarks\r\n     * Main inventory.\r\n     *\r\n     */\r\n    Inventory = 'Inventory',\r\n}\r",
      "jsdoc": "/**\r\n * Specifies the player inventory type.\r\n */\r",
      "enumValues": [
        {
          "name": "Hotbar",
          "value": "Hotbar",
          "description": ""
        },
        {
          "name": "Inventory",
          "value": "Inventory",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinventorytype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.PlayerPermissionLevel": {
      "id": "@minecraft/server.PlayerPermissionLevel",
      "name": "PlayerPermissionLevel",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The player permission level.\r /",
      "definition": "export enum PlayerPermissionLevel {\n    /**\r\n     * @remarks\r\n     * Visitors can only observe the world, not interact with it.\r\n     *\r\n     */\r\n    Visitor = 0,\r\n    /**\r\n     * @remarks\r\n     * Members can build and mine, attack players and mobs, and\r\n     * interact with items and entities.\r\n     *\r\n     */\r\n    Member = 1,\r\n    /**\r\n     * @remarks\r\n     * Operators can teleport and use commands, in addition to\r\n     * everything Members can do.\r\n     *\r\n     */\r\n    Operator = 2,\r\n    Custom = 3,\r\n}\r",
      "jsdoc": "/**\r\n * The player permission level.\r\n */\r",
      "enumValues": [
        {
          "name": "Visitor",
          "value": 0,
          "description": ""
        },
        {
          "name": "Member",
          "value": 1,
          "description": ""
        },
        {
          "name": "Operator",
          "value": 2,
          "description": ""
        },
        {
          "name": "Custom",
          "value": 3
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerpermissionlevel",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ScoreboardIdentityType": {
      "id": "@minecraft/server.ScoreboardIdentityType",
      "name": "ScoreboardIdentityType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Contains objectives and participants for the scoreboard.\r /",
      "definition": "export enum ScoreboardIdentityType {\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to an entity.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to a pseudo player\r\n     * entity - typically this is used to store scores as data or\r\n     * as abstract progress.\r\n     *\r\n     */\r\n    FakePlayer = 'FakePlayer',\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant is tied to a player.\r\n     *\r\n     */\r\n    Player = 'Player',\r\n}\r",
      "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n */\r",
      "enumValues": [
        {
          "name": "Entity",
          "value": "Entity",
          "description": ""
        },
        {
          "name": "FakePlayer",
          "value": "FakePlayer",
          "description": ""
        },
        {
          "name": "Player",
          "value": "Player",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardidentitytype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ScriptEventSource": {
      "id": "@minecraft/server.ScriptEventSource",
      "name": "ScriptEventSource",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes where the script event originated from.\r /",
      "definition": "export enum ScriptEventSource {\n    /**\r\n     * @remarks\r\n     * The script event originated from a Block such as a Command\r\n     * Block.\r\n     *\r\n     */\r\n    Block = 'Block',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from an Entity such as a Player,\r\n     * Command Block Minecart or Animation Controller.\r\n     *\r\n     */\r\n    Entity = 'Entity',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from an NPC dialogue.\r\n     *\r\n     */\r\n    NPCDialogue = 'NPCDialogue',\r\n    /**\r\n     * @remarks\r\n     * The script event originated from the server, such as from a\r\n     * runCommand API call or a dedicated server console.\r\n     *\r\n     */\r\n    Server = 'Server',\r\n}\r",
      "jsdoc": "/**\r\n * Describes where the script event originated from.\r\n */\r",
      "enumValues": [
        {
          "name": "Block",
          "value": "Block",
          "description": ""
        },
        {
          "name": "Entity",
          "value": "Entity",
          "description": ""
        },
        {
          "name": "NPCDialogue",
          "value": "NPCDialogue",
          "description": ""
        },
        {
          "name": "Server",
          "value": "Server",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scripteventsource",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.SignSide": {
      "id": "@minecraft/server.SignSide",
      "name": "SignSide",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Represents a side of a sign.\r /",
      "definition": "export enum SignSide {\n    /**\r\n     * @remarks\r\n     * The back of the sign.\r\n     *\r\n     */\r\n    Back = 'Back',\r\n    /**\r\n     * @remarks\r\n     * The front of the sign.\r\n     *\r\n     */\r\n    Front = 'Front',\r\n}\r",
      "jsdoc": "/**\r\n * Represents a side of a sign.\r\n */\r",
      "enumValues": [
        {
          "name": "Back",
          "value": "Back",
          "description": ""
        },
        {
          "name": "Front",
          "value": "Front",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "signside",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.StickyType": {
      "id": "@minecraft/server.StickyType",
      "name": "StickyType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The front of the sign.",
      "definition": "export enum StickyType {\n    None = 'None',\r\n    Same = 'Same',\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * The front of the sign.\r\n     *\r\n     */\r",
      "enumValues": [
        {
          "name": "None",
          "value": "None"
        },
        {
          "name": "Same",
          "value": "Same"
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "stickytype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.StructureAnimationMode": {
      "id": "@minecraft/server.StructureAnimationMode",
      "name": "StructureAnimationMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies how structure blocks should be animated when a\r structure is placed.\r /",
      "definition": "export enum StructureAnimationMode {\n    /**\r\n     * @remarks\r\n     * Blocks will be randomly placed one at at time. Use\r\n     * @minecraft/server.StructurePlaceOptions.animationSeconds to\r\n     * control how long it takes for all blocks to be placed.\r\n     *\r\n     */\r\n    Blocks = 'Blocks',\r\n    /**\r\n     * @remarks\r\n     * Blocks will be placed one layer at a time from bottom to\r\n     * top. Use\r\n     * @minecraft/server.StructurePlaceOptions.animationSeconds to\r\n     * control how long it takes for all blocks to be placed.\r\n     *\r\n     */\r\n    Layers = 'Layers',\r\n    /**\r\n     * @remarks\r\n     * All blocks will be placed immediately.\r\n     *\r\n     */\r\n    None = 'None',\r\n}\r",
      "jsdoc": "/**\r\n * Specifies how structure blocks should be animated when a\r\n * structure is placed.\r\n */\r",
      "enumValues": [
        {
          "name": "Blocks",
          "value": "Blocks",
          "description": ""
        },
        {
          "name": "Layers",
          "value": "Layers",
          "description": ""
        },
        {
          "name": "None",
          "value": "None",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structureanimationmode",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.StructureMirrorAxis": {
      "id": "@minecraft/server.StructureMirrorAxis",
      "name": "StructureMirrorAxis",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies how a structure should be mirrored when placed.\r /",
      "definition": "export enum StructureMirrorAxis {\n    /**\r\n     * @remarks\r\n     * No mirroring.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across the X axis.\r\n     *\r\n     */\r\n    X = 'X',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across both the X and Z axes.\r\n     *\r\n     */\r\n    XZ = 'XZ',\r\n    /**\r\n     * @remarks\r\n     * Structure is mirrored across the Z axis.\r\n     *\r\n     */\r\n    Z = 'Z',\r\n}\r",
      "jsdoc": "/**\r\n * Specifies how a structure should be mirrored when placed.\r\n */\r",
      "enumValues": [
        {
          "name": "None",
          "value": "None",
          "description": ""
        },
        {
          "name": "X",
          "value": "X",
          "description": ""
        },
        {
          "name": "XZ",
          "value": "XZ",
          "description": ""
        },
        {
          "name": "Z",
          "value": "Z",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structuremirroraxis",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.StructureRotation": {
      "id": "@minecraft/server.StructureRotation",
      "name": "StructureRotation",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Enum describing a structure's placement rotation.\r /",
      "definition": "export enum StructureRotation {\n    /**\r\n     * @remarks\r\n     * No rotation.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * 180 degree rotation.\r\n     *\r\n     */\r\n    Rotate180 = 'Rotate180',\r\n    /**\r\n     * @remarks\r\n     * 270 degree rotation.\r\n     *\r\n     */\r\n    Rotate270 = 'Rotate270',\r\n    /**\r\n     * @remarks\r\n     * 90 degree rotation.\r\n     *\r\n     */\r\n    Rotate90 = 'Rotate90',\r\n}\r",
      "jsdoc": "/**\r\n * Enum describing a structure's placement rotation.\r\n */\r",
      "enumValues": [
        {
          "name": "None",
          "value": "None",
          "description": ""
        },
        {
          "name": "Rotate180",
          "value": "Rotate180",
          "description": ""
        },
        {
          "name": "Rotate270",
          "value": "Rotate270",
          "description": ""
        },
        {
          "name": "Rotate90",
          "value": "Rotate90",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structurerotation",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.StructureSaveMode": {
      "id": "@minecraft/server.StructureSaveMode",
      "name": "StructureSaveMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies how a structure should be saved.\r /",
      "definition": "export enum StructureSaveMode {\n    /**\r\n     * @remarks\r\n     * The structure will be temporarily saved to memory. The\r\n     * structure will persist until the world is shut down.\r\n     *\r\n     */\r\n    Memory = 'Memory',\r\n    /**\r\n     * @remarks\r\n     * The structure will be saved to the world file and persist\r\n     * between world loads. A saved structure can be removed from\r\n     * the world via @minecraft/server.StructureManager.delete.\r\n     *\r\n     */\r\n    World = 'World',\r\n}\r",
      "jsdoc": "/**\r\n * Specifies how a structure should be saved.\r\n */\r",
      "enumValues": [
        {
          "name": "Memory",
          "value": "Memory",
          "description": ""
        },
        {
          "name": "World",
          "value": "World",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structuresavemode",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.TimeOfDay": {
      "id": "@minecraft/server.TimeOfDay",
      "name": "TimeOfDay",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Provides numeric values for common periods in the Minecraft\r day.\r /",
      "definition": "export enum TimeOfDay {\n    /**\r\n     * @remarks\r\n     * Sets the time to the start of the day, which is time of the\r\n     * day 1,000 (or the equivalent of 7am) in Minecraft.\r\n     *\r\n     */\r\n    Day = 1000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to noon, which is time of the day 6,000 in\r\n     * Minecraft.\r\n     *\r\n     */\r\n    Noon = 6000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to sunset, which is time of the day 12,000 (or\r\n     * the equivalent of 6pm) in Minecraft.\r\n     *\r\n     */\r\n    Sunset = 12000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to night, which is time of the day 13,000 (or\r\n     * the equivalent of 7:00pm) in Minecraft.\r\n     *\r\n     */\r\n    Night = 13000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to midnight, which is time of the day 18,000\r\n     * (or the equivalent of 12:00am) in Minecraft.\r\n     *\r\n     */\r\n    Midnight = 18000,\r\n    /**\r\n     * @remarks\r\n     * Sets the time to sunrise, which is time of the day 23,000\r\n     * (or the equivalent of 5am) in Minecraft.\r\n     *\r\n     */\r\n    Sunrise = 23000,\r\n}\r",
      "jsdoc": "/**\r\n * Provides numeric values for common periods in the Minecraft\r\n * day.\r\n */\r",
      "enumValues": [
        {
          "name": "Day",
          "value": 1000,
          "description": ""
        },
        {
          "name": "Noon",
          "value": 6000,
          "description": ""
        },
        {
          "name": "Sunset",
          "value": 12000,
          "description": ""
        },
        {
          "name": "Night",
          "value": 13000,
          "description": ""
        },
        {
          "name": "Midnight",
          "value": 18000,
          "description": ""
        },
        {
          "name": "Sunrise",
          "value": 23000,
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "timeofday",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.TintMethod": {
      "id": "@minecraft/server.TintMethod",
      "name": "TintMethod",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Tint logic applied to a block or part of a block. The color\r may vary when a world position is part of the context, as\r biomes often have an influence on the resulting tint.\r /",
      "definition": "export enum TintMethod {\n    /**\r\n     * @remarks\r\n     * Specifies a birch foliage tint method.\r\n     *\r\n     */\r\n    BirchFoliage = 'BirchFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a default foliage tint method.\r\n     *\r\n     */\r\n    DefaultFoliage = 'DefaultFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a dry foliage tint method.\r\n     *\r\n     */\r\n    DryFoliage = 'DryFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies an evergreen foliage tint method.\r\n     *\r\n     */\r\n    EvergreenFoliage = 'EvergreenFoliage',\r\n    /**\r\n     * @remarks\r\n     * Specifies a grass tint method.\r\n     *\r\n     */\r\n    Grass = 'Grass',\r\n    /**\r\n     * @remarks\r\n     * Specifies no tint method, resulting in a white tint.\r\n     *\r\n     */\r\n    None = 'None',\r\n    /**\r\n     * @remarks\r\n     * Specifies a water tint method.\r\n     *\r\n     */\r\n    Water = 'Water',\r\n}\r",
      "jsdoc": "/**\r\n * Tint logic applied to a block or part of a block. The color\r\n * may vary when a world position is part of the context, as\r\n * biomes often have an influence on the resulting tint.\r\n */\r",
      "enumValues": [
        {
          "name": "BirchFoliage",
          "value": "BirchFoliage",
          "description": ""
        },
        {
          "name": "DefaultFoliage",
          "value": "DefaultFoliage",
          "description": ""
        },
        {
          "name": "DryFoliage",
          "value": "DryFoliage",
          "description": ""
        },
        {
          "name": "EvergreenFoliage",
          "value": "EvergreenFoliage",
          "description": ""
        },
        {
          "name": "Grass",
          "value": "Grass",
          "description": ""
        },
        {
          "name": "None",
          "value": "None",
          "description": ""
        },
        {
          "name": "Water",
          "value": "Water",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "tintmethod",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.WeatherType": {
      "id": "@minecraft/server.WeatherType",
      "name": "WeatherType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Used to specify the type of weather condition within the\r world.\r /",
      "definition": "export enum WeatherType {\n    /**\r\n     * @remarks\r\n     * Specifies a clear weather condition.\r\n     *\r\n     */\r\n    Clear = 'Clear',\r\n    /**\r\n     * @remarks\r\n     * Specifies a rain weather condition.\r\n     *\r\n     */\r\n    Rain = 'Rain',\r\n    /**\r\n     * @remarks\r\n     * Specifies a rain and thunder weather condition.\r\n     *\r\n     */\r\n    Thunder = 'Thunder',\r\n}\r",
      "jsdoc": "/**\r\n * Used to specify the type of weather condition within the\r\n * world.\r\n */\r",
      "enumValues": [
        {
          "name": "Clear",
          "value": "Clear",
          "description": ""
        },
        {
          "name": "Rain",
          "value": "Rain",
          "description": ""
        },
        {
          "name": "Thunder",
          "value": "Thunder",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weathertype",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentTypeMap": {
      "id": "@minecraft/server.BlockComponentTypeMap",
      "name": "BlockComponentTypeMap",
      "type": "type",
      "module": "@minecraft/server",
      "definition": "export type BlockComponentTypeMap = {",
      "jsdoc": "",
      "typeDefinition": "{",
      "categories": [
        "Types",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponenttypemap",
        "type"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityComponentTypeMap": {
      "id": "@minecraft/server.EntityComponentTypeMap",
      "name": "EntityComponentTypeMap",
      "type": "type",
      "module": "@minecraft/server",
      "definition": "export type EntityComponentTypeMap = {",
      "jsdoc": "",
      "typeDefinition": "{",
      "categories": [
        "Types",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycomponenttypemap",
        "type"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentTypeMap": {
      "id": "@minecraft/server.ItemComponentTypeMap",
      "name": "ItemComponentTypeMap",
      "type": "type",
      "module": "@minecraft/server",
      "definition": "export type ItemComponentTypeMap = {",
      "jsdoc": "",
      "typeDefinition": "{",
      "categories": [
        "Types",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponenttypemap",
        "type"
      ],
      "stability": "stable"
    },
    "@minecraft/server.Block": {
      "id": "@minecraft/server.Block",
      "name": "Block",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a block in a dimension. A block represents a\r unique X, Y, and Z within a dimension and get/sets the state\r of the block at that location. This type was significantly\r updated in version 1.17.10.21.\r /",
      "definition": "export class Block {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the dimension that the block is within.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this block is an air block (i.e., empty\r\n     * space).\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this block is a liquid block - (e.g., a\r\n     * water block and a lava block are liquid, while an air block\r\n     * and a stone block are not. Water logged blocks are not\r\n     * liquid blocks).\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isLiquid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this reference to a block is still valid\r\n     * (for example, if the block is unloaded, references to that\r\n     * block will no longer be valid.)\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns or sets whether this block has water on it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly isWaterlogged: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this block's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Coordinates of the specified block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Additional block configuration data that describes the\r\n     * block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly permutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Gets the type of block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly 'type': BlockType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of block for this block. Warning:\r\n     * Vanilla block names can be changed in future releases, try\r\n     * using 'Block.matches' instead for block comparison.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * X coordinate of the block.\r\n     *\r\n     */\r\n    readonly x: number;\r\n    /**\r\n     * @remarks\r\n     * Y coordinate of the block.\r\n     *\r\n     */\r\n    readonly y: number;\r\n    /**\r\n     * @remarks\r\n     * Z coordinate of the block.\r\n     *\r\n     */\r\n    readonly z: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} above this block (positive in the\r\n     * Y direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps above to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    above(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} below this block (negative in the\r\n     * Y direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps below to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    below(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Vector3} of the center of this block on\r\n     * the X and Z axis.\r\n     *\r\n     */\r\n    bottomCenter(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed when touched by\r\n     * liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed when touched by liquid.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block can have a liquid placed over it,\r\n     * i.e. be waterlogged.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block can have a liquid placed over it.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    canContainLiquid(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Vector3} of the center of this block on\r\n     * the X, Y, and Z axis.\r\n     *\r\n     */\r\n    center(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the east of this block\r\n     * (positive in the X direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the east to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    east(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for a block - for example, an inventory component of a chest\r\n     * block.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g.,\r\n     * 'minecraft:inventory'). If no namespace prefix is specified,\r\n     * 'minecraft:' is assumed. Available component IDs are those\r\n     * in the {@link BlockComponentTypes} enum and custom component\r\n     * IDs registered with the {@link BlockComponentRegistry}.\r\n     * @returns\r\n     * Returns the component if it exists on the block, otherwise\r\n     * undefined.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getComponent<T extends string>(componentId: T): BlockComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Creates a prototype item stack based on this block that can\r\n     * be used with Container/ContainerSlot APIs.\r\n     *\r\n     * @param amount\r\n     * Number of instances of this block to place in the item\r\n     * stack.\r\n     * Defaults to: 1\r\n     * @param withData\r\n     * Whether additional data facets of the item stack are\r\n     * included.\r\n     * Defaults to: false\r\n     * @returns\r\n     * An itemStack with the specified amount of items and data.\r\n     * Returns undefined if block type is incompatible.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getItemStack(amount?: number, withData?: boolean): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the net redstone power of this block.\r\n     *\r\n     * @returns\r\n     * Returns undefined if redstone power is not applicable to\r\n     * this block.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getRedstonePower(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of tags for a block.\r\n     *\r\n     * @returns\r\n     * The list of tags that the block has.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Checks to see if the permutation of this block has a\r\n     * specific tag.\r\n     *\r\n     * @param tag\r\n     * Tag to check for.\r\n     * @returns\r\n     * Returns `true` if the permutation of this block has the tag,\r\n     * else `false`.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example checkBlockTags.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function checkBlockTags(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // Fetch the block\r\n     *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n     *\r\n     *   // check that the block is loaded\r\n     *   if (block) {\r\n     *     log(`Block is dirt: ${block.hasTag(\"dirt\")}`);\r\n     *     log(`Block is wood: ${block.hasTag(\"wood\")}`);\r\n     *     log(`Block is stone: ${block.hasTag(\"stone\")}`);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block stops liquid from flowing.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block stops liquid from flowing.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    isLiquidBlocking(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether liquid can flow into the block from the\r\n     * provided direction, or flow out from the provided direction\r\n     * when liquid is placed into it with a bucket.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether liquid can flow into the block from the provided\r\n     * direction, or flow out from the provided direction when\r\n     * liquid is placed into it with a bucket\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    liquidCanFlowFromDirection(liquidType: LiquidType, flowDirection: Direction): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed and spawns its item\r\n     * when touched by liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed and spawns its item when\r\n     * touched by liquid.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    liquidSpreadCausesSpawn(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Tests whether this block matches a specific criteria.\r\n     *\r\n     * @param blockName\r\n     * Block type identifier to match this API against.\r\n     * @param states\r\n     * Optional set of block states to test this block against.\r\n     * @returns\r\n     * Returns true if the block matches the specified criteria.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    matches(blockName: string, states?: Record<string, boolean | number | string>): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the north of this block\r\n     * (negative in the Z direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the north to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    north(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a block at an offset relative vector to this block.\r\n     *\r\n     * @param offset\r\n     * The offset vector. For example, an offset of 0, 1, 0 will\r\n     * return the block above the current block.\r\n     * @returns\r\n     * Block at the specified offset, or undefined if that block\r\n     * could not be retrieved (for example, the block and its\r\n     * relative chunk is not loaded yet.)\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    offset(offset: Vector3): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Sets the block in the dimension to the state of the\r\n     * permutation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param permutation\r\n     * Permutation that contains a set of property states for the\r\n     * Block.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setPermutation(permutation: BlockPermutation): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the type of block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockType\r\n     * Identifier of the type of block to apply - for example,\r\n     * minecraft:powered_repeater.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setType(blockType: BlockType | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets whether this block has a water logged state - for\r\n     * example, whether stairs are submerged within water.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param isWaterlogged\r\n     * true if the block should have water within it.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setWaterlogged(isWaterlogged: boolean): void;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the south of this block\r\n     * (positive in the Z direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the south to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    south(steps?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the {@link Block} to the west of this block\r\n     * (negative in the X direction).\r\n     *\r\n     * @param steps\r\n     * Number of steps to the west to step before returning.\r\n     * Defaults to: 1\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    west(steps?: number): Block | undefined;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a block in a dimension. A block represents a\r\n * unique X, Y, and Z within a dimension and get/sets the state\r\n * of the block at that location. This type was significantly\r\n * updated in version 1.17.10.21.\r\n */\r",
      "properties": [
        {
          "name": "dimension",
          "type": "Dimension",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isAir",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isLiquid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isWaterlogged",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "localizationKey",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "permutation",
          "type": "BlockPermutation",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "typeId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "x",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "y",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "z",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "above",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "above(steps?: number): Block | undefined"
        },
        {
          "name": "below",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "below(steps?: number): Block | undefined"
        },
        {
          "name": "bottomCenter",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "bottomCenter(): Vector3"
        },
        {
          "name": "canBeDestroyedByLiquidSpread",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean"
        },
        {
          "name": "canContainLiquid",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "canContainLiquid(liquidType: LiquidType): boolean"
        },
        {
          "name": "center",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "center(): Vector3"
        },
        {
          "name": "east",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "east(steps?: number): Block | undefined"
        },
        {
          "name": "getItemStack",
          "parameters": [],
          "returnType": "ItemStack | undefined",
          "accessibility": "public",
          "signature": "getItemStack(amount?: number, withData?: boolean): ItemStack | undefined"
        },
        {
          "name": "getRedstonePower",
          "parameters": [],
          "returnType": "number | undefined",
          "accessibility": "public",
          "signature": "getRedstonePower(): number | undefined"
        },
        {
          "name": "getTags",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getTags(): string[]"
        },
        {
          "name": "hasTag",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasTag(tag: string): boolean"
        },
        {
          "name": "isLiquidBlocking",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isLiquidBlocking(liquidType: LiquidType): boolean"
        },
        {
          "name": "liquidCanFlowFromDirection",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "liquidCanFlowFromDirection(liquidType: LiquidType, flowDirection: Direction): boolean"
        },
        {
          "name": "liquidSpreadCausesSpawn",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "liquidSpreadCausesSpawn(liquidType: LiquidType): boolean"
        },
        {
          "name": "matches",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "matches(blockName: string, states?: Record<string, boolean | number | string>): boolean"
        },
        {
          "name": "north",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "north(steps?: number): Block | undefined"
        },
        {
          "name": "offset",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "offset(offset: Vector3): Block | undefined"
        },
        {
          "name": "setPermutation",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setPermutation(permutation: BlockPermutation): void"
        },
        {
          "name": "setType",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setType(blockType: BlockType | string): void"
        },
        {
          "name": "setWaterlogged",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setWaterlogged(isWaterlogged: boolean): void"
        },
        {
          "name": "south",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "south(steps?: number): Block | undefined"
        },
        {
          "name": "west",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "west(steps?: number): Block | undefined"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "block",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponent": {
      "id": "@minecraft/server.BlockComponent",
      "name": "BlockComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base type for components associated with blocks.\r /",
      "definition": "export class BlockComponent extends Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block instance that this component pertains to.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n}\r",
      "jsdoc": "/**\r\n * Base type for components associated with blocks.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "Component",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentEntityFallOnEvent": {
      "id": "@minecraft/server.BlockComponentEntityFallOnEvent",
      "name": "BlockComponentEntityFallOnEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an entity falling onto a\r specific block.\r /",
      "definition": "export class BlockComponentEntityFallOnEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that fell onto the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * The distance that the entity fell onto this block with.\r\n     *\r\n     */\r\n    readonly fallDistance: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an entity falling onto a\r\n * specific block.\r\n */\r",
      "properties": [
        {
          "name": "fallDistance",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponententityfallonevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentOnPlaceEvent": {
      "id": "@minecraft/server.BlockComponentOnPlaceEvent",
      "name": "BlockComponentOnPlaceEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block that was\r placed.\r /",
      "definition": "export class BlockComponentOnPlaceEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Previous block at this location that was replaced.\r\n     *\r\n     */\r\n    readonly previousBlock: BlockPermutation;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a specific block that was\r\n * placed.\r\n */\r",
      "properties": [
        {
          "name": "previousBlock",
          "type": "BlockPermutation",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentonplaceevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentPlayerBreakEvent": {
      "id": "@minecraft/server.BlockComponentPlayerBreakEvent",
      "name": "BlockComponentPlayerBreakEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block being broken\r by a player.\r /",
      "definition": "export class BlockComponentPlayerBreakEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns permutation information about this block before it\r\n     * was broken.\r\n     *\r\n     */\r\n    readonly brokenBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The player that broke this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a specific block being broken\r\n * by a player.\r\n */\r",
      "properties": [
        {
          "name": "brokenBlockPermutation",
          "type": "BlockPermutation",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentplayerbreakevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentPlayerInteractEvent": {
      "id": "@minecraft/server.BlockComponentPlayerInteractEvent",
      "name": "BlockComponentPlayerInteractEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block being\r interacted with.\r /",
      "definition": "export class BlockComponentPlayerInteractEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block face that was interacted with.\r\n     *\r\n     */\r\n    readonly face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block that the player interacted with.\r\n     *\r\n     */\r\n    readonly faceLocation?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The player that interacted with this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a specific block being\r\n * interacted with.\r\n */\r",
      "properties": [
        {
          "name": "face",
          "type": "Direction",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentplayerinteractevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentPlayerPlaceBeforeEvent": {
      "id": "@minecraft/server.BlockComponentPlayerPlaceBeforeEvent",
      "name": "BlockComponentPlayerPlaceBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r places a block.\r /",
      "definition": "export class BlockComponentPlayerPlaceBeforeEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the block place event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The block face that was placed onto.\r\n     *\r\n     */\r\n    readonly face: Direction;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that will be placed if the event is\r\n     * not cancelled. If set to a different block permutation, that\r\n     * permutation will be placed instead.\r\n     *\r\n     */\r\n    permutationToPlace: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The player that is placing this block.\r\n     *\r\n     */\r\n    readonly player?: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * places a block.\r\n */\r",
      "properties": [
        {
          "name": "face",
          "type": "Direction",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentplayerplacebeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentRandomTickEvent": {
      "id": "@minecraft/server.BlockComponentRandomTickEvent",
      "name": "BlockComponentRandomTickEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block randomly\r ticking.\r /",
      "definition": "export class BlockComponentRandomTickEvent extends BlockEvent {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a specific block randomly\r\n * ticking.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentrandomtickevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentRegistry": {
      "id": "@minecraft/server.BlockComponentRegistry",
      "name": "BlockComponentRegistry",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class BlockComponentRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link BlockCustomComponentAlreadyRegisteredError}\r\n     *\r\n     * {@link BlockCustomComponentReloadNewComponentError}\r\n     *\r\n     * {@link BlockCustomComponentReloadNewEventError}\r\n     *\r\n     * {@link BlockCustomComponentReloadVersionError}\r\n     *\r\n     * {@link CustomComponentInvalidRegistryError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCustomComponent(name: string, customComponent: BlockCustomComponent): void;\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [
        {
          "name": "registerCustomComponent",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "registerCustomComponent(name: string, customComponent: BlockCustomComponent): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentregistry",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentStepOffEvent": {
      "id": "@minecraft/server.BlockComponentStepOffEvent",
      "name": "BlockComponentStepOffEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an entity stepping off a\r specific block.\r /",
      "definition": "export class BlockComponentStepOffEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that stepped off the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an entity stepping off a\r\n * specific block.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentstepoffevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentStepOnEvent": {
      "id": "@minecraft/server.BlockComponentStepOnEvent",
      "name": "BlockComponentStepOnEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an entity stepping onto a\r specific block.\r /",
      "definition": "export class BlockComponentStepOnEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that stepped on the block.\r\n     *\r\n     */\r\n    readonly entity?: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an entity stepping onto a\r\n * specific block.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentsteponevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockComponentTickEvent": {
      "id": "@minecraft/server.BlockComponentTickEvent",
      "name": "BlockComponentTickEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block ticking.\r /",
      "definition": "export class BlockComponentTickEvent extends BlockEvent {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a specific block ticking.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponenttickevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockCustomComponentInstance": {
      "id": "@minecraft/server.BlockCustomComponentInstance",
      "name": "BlockCustomComponentInstance",
      "type": "class",
      "module": "@minecraft/server",
      "description": "An instance of a custom component on a block.\r /",
      "definition": "export class BlockCustomComponentInstance extends BlockComponent {\n    private constructor();\r\n    readonly customComponentParameters: CustomComponentParameters;\r\n}\r",
      "jsdoc": "/**\r\n * An instance of a custom component on a block.\r\n */\r",
      "properties": [
        {
          "name": "customComponentParameters",
          "type": "CustomComponentParameters",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentinstance",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockEvent": {
      "id": "@minecraft/server.BlockEvent",
      "name": "BlockEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event that impacts a\r specific block.\r /",
      "definition": "export class BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block currently in the world at the location of this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * Dimension that contains the block that is the subject of\r\n     * this event.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event that impacts a\r\n * specific block.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "dimension",
          "type": "Dimension",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockExplodeAfterEvent": {
      "id": "@minecraft/server.BlockExplodeAfterEvent",
      "name": "BlockExplodeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an explosion that has\r occurred for a specific block.\r /",
      "definition": "export class BlockExplodeAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Description of the block that has exploded.\r\n     *\r\n     */\r\n    readonly explodedBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * occurred for a specific block.\r\n */\r",
      "properties": [
        {
          "name": "explodedBlockPermutation",
          "type": "BlockPermutation",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockexplodeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockExplodeAfterEventSignal": {
      "id": "@minecraft/server.BlockExplodeAfterEventSignal",
      "name": "BlockExplodeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an explosion\r occurs, as it impacts individual blocks.\r /",
      "definition": "export class BlockExplodeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an explosion\r\n     * occurs, as it impacts individual blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: BlockExplodeAfterEvent) => void): (arg0: BlockExplodeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an explosion\r\n     * occurs, as it impacts individual blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: BlockExplodeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when an explosion\r\n * occurs, as it impacts individual blocks.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockexplodeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockFluidContainerComponent": {
      "id": "@minecraft/server.BlockFluidContainerComponent",
      "name": "BlockFluidContainerComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the fluid container of a block in the world. Used\r with blocks like cauldrons.\r /",
      "definition": "export class BlockFluidContainerComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Relative fill level of the fluid container.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fillLevel: number;\r\n    /**\r\n     * @remarks\r\n     * Custom color of the fluid in the container.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fluidColor: RGBA;\r\n    static readonly componentId = 'minecraft:fluid_container';\r\n    /**\r\n     * @remarks\r\n     * Adds a dye to the fluid. The dye color is combined with any\r\n     * existing custom color.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    addDye(dye: ItemType): void;\r\n    /**\r\n     * @remarks\r\n     * Gets the current fluid type in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFluidType(): FluidType;\r\n    /**\r\n     * @remarks\r\n     * Sets the current fluid type in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setFluidType(fluidType: FluidType): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a potion item in the container. Changes the container's\r\n     * fluid type to potion.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setPotion(itemStack: ItemStack): void;\r\n}\r",
      "jsdoc": "/**\r\n * Represents the fluid container of a block in the world. Used\r\n * with blocks like cauldrons.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "fluid_container'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "addDye",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "addDye(dye: ItemType): void"
        },
        {
          "name": "getFluidType",
          "parameters": [],
          "returnType": "FluidType",
          "accessibility": "public",
          "signature": "getFluidType(): FluidType"
        },
        {
          "name": "setFluidType",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setFluidType(fluidType: FluidType): void"
        },
        {
          "name": "setPotion",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setPotion(itemStack: ItemStack): void"
        }
      ],
      "extends": "BlockComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockfluidcontainercomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockInventoryComponent": {
      "id": "@minecraft/server.BlockInventoryComponent",
      "name": "BlockInventoryComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the inventory of a block in the world. Used with\r blocks like chests.\r ```typescript\r  function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // Fetch block\r   const block = targetLocation.dimension.getBlock(targetLocation);\r    if (!block) {\r     log(\"Could not find block. Maybe it is not loaded?\", -1);\r     return;\r   }\r    // Make it a chest\r   block.setType(MinecraftBlockTypes.Chest);\r    // Get the inventory\r   const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r    if (!inventoryComponent || !inventoryComponent.container) {\r     log(\"Could not find inventory component.\", -1);\r     return;\r   }\r    const inventoryContainer = inventoryComponent.container;\r    // Set slot 0 to a stack of 10 apples\r   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r }\r ```\r /",
      "definition": "export class BlockInventoryComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The container which holds an {@link ItemStack}.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly container?: Container;\r\n    static readonly componentId = 'minecraft:inventory';\r\n}\r",
      "jsdoc": "/**\r\n * Represents the inventory of a block in the world. Used with\r\n * blocks like chests.\r\n * @example placeItemsInChest.ts\r\n * ```typescript\r\n * import { ItemStack, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes, MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // Fetch block\r\n *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (!block) {\r\n *     log(\"Could not find block. Maybe it is not loaded?\", -1);\r\n *     return;\r\n *   }\r\n *\r\n *   // Make it a chest\r\n *   block.setType(MinecraftBlockTypes.Chest);\r\n *\r\n *   // Get the inventory\r\n *   const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *\r\n *   if (!inventoryComponent || !inventoryComponent.container) {\r\n *     log(\"Could not find inventory component.\", -1);\r\n *     return;\r\n *   }\r\n *\r\n *   const inventoryContainer = inventoryComponent.container;\r\n *\r\n *   // Set slot 0 to a stack of 10 apples\r\n *   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "inventory'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockinventorycomponent",
        "class"
      ],
      "examples": [
        {
          "title": "placeItemsInChest.ts",
          "code": "import { ItemStack, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes, MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // Fetch block\r\n  const block = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (!block) {\r\n    log(\"Could not find block. Maybe it is not loaded?\", -1);\r\n    return;\r\n  }\r\n\n  // Make it a chest\r\n  block.setType(MinecraftBlockTypes.Chest);\r\n\n  // Get the inventory\r\n  const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r\n\n  if (!inventoryComponent || !inventoryComponent.container) {\r\n    log(\"Could not find inventory component.\", -1);\r\n    return;\r\n  }\r\n\n  const inventoryContainer = inventoryComponent.container;\r\n\n  // Set slot 0 to a stack of 10 apples\r\n  inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockLocationIterator": {
      "id": "@minecraft/server.BlockLocationIterator",
      "name": "BlockLocationIterator",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A BlockLocationIterator returns the next block location of\r the block volume across which it is iterating.\r The BlockLocationIterator is used to abstract the shape of\r the block volume it was fetched from (so it can represent\r all the block locations that make up rectangles, cubes,\r spheres, lines and complex shapes).\r Each iteration pass returns the next valid block location in\r the parent shape.\r Unless otherwise specified by the parent shape - the\r BlockLocationIterator will iterate over a 3D space in the\r order of increasing X, followed by increasing Z followed by\r increasing Y.\r (Effectively stepping across the XZ plane, and when all the\r locations in that plane are exhausted, increasing the Y\r coordinate to the next XZ slice)\r /",
      "definition": "export class BlockLocationIterator implements Iterable<Vector3> {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    [Symbol.iterator](): Iterator<Vector3>;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    next(): IteratorResult<Vector3>;\r\n}\r",
      "jsdoc": "/**\r\n * A BlockLocationIterator returns the next block location of\r\n * the block volume across which it is iterating.\r\n * The BlockLocationIterator is used to abstract the shape of\r\n * the block volume it was fetched from (so it can represent\r\n * all the block locations that make up rectangles, cubes,\r\n * spheres, lines and complex shapes).\r\n * Each iteration pass returns the next valid block location in\r\n * the parent shape.\r\n * Unless otherwise specified by the parent shape - the\r\n * BlockLocationIterator will iterate over a 3D space in the\r\n * order of increasing X, followed by increasing Z followed by\r\n * increasing Y.\r\n * (Effectively stepping across the XZ plane, and when all the\r\n * locations in that plane are exhausted, increasing the Y\r\n * coordinate to the next XZ slice)\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "next",
          "parameters": [],
          "returnType": "IteratorResult<Vector3>",
          "accessibility": "public",
          "signature": "next(): IteratorResult<Vector3>"
        }
      ],
      "implements": [
        "Iterable<Vector3>"
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blocklocationiterator",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockMapColorComponent": {
      "id": "@minecraft/server.BlockMapColorComponent",
      "name": "BlockMapColorComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the color of a block when displayed on a map.\r /",
      "definition": "export class BlockMapColorComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Base map color defined for that block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly color: RGBA;\r\n    /**\r\n     * @remarks\r\n     * Returns the base color multiplied to the evaluated tint at\r\n     * the given position.\r\n     *\r\n     */\r\n    readonly tintedColor: RGBA;\r\n    /**\r\n     * @remarks\r\n     * Type of tint applied to the color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tintMethod: TintMethod;\r\n    static readonly componentId = 'minecraft:map_color';\r\n}\r",
      "jsdoc": "/**\r\n * Represents the color of a block when displayed on a map.\r\n */\r",
      "properties": [
        {
          "name": "color",
          "type": "RGBA",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "tintedColor",
          "type": "RGBA",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "tintMethod",
          "type": "TintMethod",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "map_color'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockmapcolorcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockMovableComponent": {
      "id": "@minecraft/server.BlockMovableComponent",
      "name": "BlockMovableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Type of tint applied to the color.",
      "definition": "export class BlockMovableComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly movementType: MovementType;\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    readonly stickyType: StickyType;\r\n    static readonly componentId = 'minecraft:movable';\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Type of tint applied to the color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r",
      "properties": [
        {
          "name": "movementType",
          "type": "MovementType",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "stickyType",
          "type": "StickyType",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "movable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockmovablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockPermutation": {
      "id": "@minecraft/server.BlockPermutation",
      "name": "BlockPermutation",
      "type": "class",
      "module": "@minecraft/server",
      "description": "properties (also sometimes called block state) which\r Block}).\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
      "definition": "export class BlockPermutation {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The {@link BlockType} that the permutation has.\r\n     *\r\n     */\r\n    readonly 'type': BlockType;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed when touched by\r\n     * liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed when touched by liquid.\r\n     * @throws This function can throw errors.\r\n     */\r\n    canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block can have a liquid placed over it,\r\n     * i.e. be waterlogged.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block can have a liquid placed over it.\r\n     * @throws This function can throw errors.\r\n     */\r\n    canContainLiquid(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns all available block states associated with this\r\n     * block.\r\n     *\r\n     * @returns\r\n     * Returns the list of all of the block states that the\r\n     * permutation has.\r\n     */\r\n    getAllStates(): Record<string, boolean | number | string>;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a prototype item stack based on this block\r\n     * permutation that can be used with item\r\n     * Container/ContainerSlot APIs.\r\n     *\r\n     * @param amount\r\n     * Number of instances of this block to place in the prototype\r\n     * item stack.\r\n     * Defaults to: 1\r\n     */\r\n    getItemStack(amount?: number): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a state for the permutation.\r\n     *\r\n     * @param stateName\r\n     * Name of the block state who's value is to be returned.\r\n     * @returns\r\n     * Returns the state if the permutation has it, else\r\n     * `undefined`.\r\n     */\r\n    getState<T extends keyof minecraftvanilladata.BlockStateSuperset>(\r\n        stateName: T,\r\n    ): minecraftvanilladata.BlockStateSuperset[T] | undefined;\r\n    /**\r\n     * @remarks\r\n     * Creates a copy of the permutation.\r\n     *\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Checks to see if the permutation has a specific tag.\r\n     *\r\n     * @returns\r\n     * Returns `true` if the permutation has the tag, else `false`.\r\n     * @example checkBlockTags.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function checkBlockTags(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // Fetch the block\r\n     *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n     *\r\n     *   // check that the block is loaded\r\n     *   if (block) {\r\n     *     log(`Block is dirt: ${block.hasTag(\"dirt\")}`);\r\n     *     log(`Block is wood: ${block.hasTag(\"wood\")}`);\r\n     *     log(`Block is stone: ${block.hasTag(\"stone\")}`);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block stops liquid from flowing.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block stops liquid from flowing.\r\n     * @throws This function can throw errors.\r\n     */\r\n    isLiquidBlocking(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this block is removed and spawns its item\r\n     * when touched by liquid.\r\n     *\r\n     * @param liquidType\r\n     * The type of liquid this function should be called for.\r\n     * @returns\r\n     * Whether this block is removed and spawns its item when\r\n     * touched by liquid.\r\n     * @throws This function can throw errors.\r\n     */\r\n    liquidSpreadCausesSpawn(liquidType: LiquidType): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns a boolean whether a specified permutation matches\r\n     * this permutation. If states is not specified, matches checks\r\n     * against the set of types more broadly.\r\n     *\r\n     * @param blockName\r\n     * An optional set of states to compare against.\r\n     */\r\n    matches<T extends string = minecraftvanilladata.MinecraftBlockTypes>(\r\n        blockName: T,\r\n        states?: BlockStateArg<T>,\r\n    ): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns a derived BlockPermutation with a specific property\r\n     * set.\r\n     *\r\n     * @param name\r\n     * Identifier of the block property.\r\n     * @param value\r\n     * Value of the block property.\r\n     * @throws This function can throw errors.\r\n     */\r\n    withState<T extends keyof minecraftvanilladata.BlockStateSuperset>(\r\n        name: T,\r\n        value: minecraftvanilladata.BlockStateSuperset[T],\r\n    ): BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * Given a type identifier and an optional set of properties,\r\n     * will return a BlockPermutation object that is usable in\r\n     * other block APIs (e.g., block.setPermutation)\r\n     *\r\n     * @param blockName\r\n     * Identifier of the block to check.\r\n     * @throws This function can throw errors.\r\n     * @example addBlockColorCube.ts\r\n     * ```typescript\r\n     * import { BlockPermutation, DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function addBlockColorCube(targetLocation: DimensionLocation) {\r\n     *   const allWoolBlocks: string[] = [\r\n     *     MinecraftBlockTypes.WhiteWool,\r\n     *     MinecraftBlockTypes.OrangeWool,\r\n     *     MinecraftBlockTypes.MagentaWool,\r\n     *     MinecraftBlockTypes.LightBlueWool,\r\n     *     MinecraftBlockTypes.YellowWool,\r\n     *     MinecraftBlockTypes.LimeWool,\r\n     *     MinecraftBlockTypes.PinkWool,\r\n     *     MinecraftBlockTypes.GrayWool,\r\n     *     MinecraftBlockTypes.LightGrayWool,\r\n     *     MinecraftBlockTypes.CyanWool,\r\n     *     MinecraftBlockTypes.PurpleWool,\r\n     *     MinecraftBlockTypes.BlueWool,\r\n     *     MinecraftBlockTypes.BrownWool,\r\n     *     MinecraftBlockTypes.GreenWool,\r\n     *     MinecraftBlockTypes.RedWool,\r\n     *     MinecraftBlockTypes.BlackWool,\r\n     *   ];\r\n     *\r\n     *   const cubeDim = 7;\r\n     *\r\n     *   let colorIndex = 0;\r\n     *\r\n     *   for (let x = 0; x <= cubeDim; x++) {\r\n     *     for (let y = 0; y <= cubeDim; y++) {\r\n     *       for (let z = 0; z <= cubeDim; z++) {\r\n     *         colorIndex++;\r\n     *         targetLocation.dimension\r\n     *           .getBlock(Vector3Utils.add(targetLocation, { x, y, z }))\r\n     *           ?.setPermutation(BlockPermutation.resolve(allWoolBlocks[colorIndex % allWoolBlocks.length]));\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    static resolve<T extends string = minecraftvanilladata.MinecraftBlockTypes>(\r\n        blockName: T,\r\n        states?: BlockStateArg<T>,\r\n    ): BlockPermutation;\r\n}\r",
      "jsdoc": "/**\r\n * Contains the combination of type {@link BlockType} and\r\n * properties (also sometimes called block state) which\r\n * describe a block (but does not belong to a specific {@link\r\n * Block}).\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "canBeDestroyedByLiquidSpread",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean"
        },
        {
          "name": "canContainLiquid",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "canContainLiquid(liquidType: LiquidType): boolean"
        },
        {
          "name": "getAllStates",
          "parameters": [],
          "returnType": "Record<string, boolean | number | string>",
          "accessibility": "public",
          "signature": "getAllStates(): Record<string, boolean | number | string>"
        },
        {
          "name": "getItemStack",
          "parameters": [],
          "returnType": "ItemStack | undefined",
          "accessibility": "public",
          "signature": "getItemStack(amount?: number): ItemStack | undefined"
        },
        {
          "name": "getTags",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getTags(): string[]"
        },
        {
          "name": "hasTag",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasTag(tag: string): boolean"
        },
        {
          "name": "isLiquidBlocking",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isLiquidBlocking(liquidType: LiquidType): boolean"
        },
        {
          "name": "liquidSpreadCausesSpawn",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "liquidSpreadCausesSpawn(liquidType: LiquidType): boolean"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockpermutation",
        "class"
      ],
      "examples": [
        {
          "title": "addTranslatedSign.ts",
          "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockPistonComponent": {
      "id": "@minecraft/server.BlockPistonComponent",
      "name": "BlockPistonComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present, this block has piston-like behavior. Contains\r additional properties for discovering block piston state.\r /",
      "definition": "export class BlockPistonComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether the piston is in the process of expanding or\r\n     * retracting.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isMoving: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current state of the piston.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly state: BlockPistonState;\r\n    static readonly componentId = 'minecraft:piston';\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of blocks that this piston is connected\r\n     * with.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getAttachedBlocks(): Block[];\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of block locations that this piston is\r\n     * connected with.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getAttachedBlocksLocations(): Vector3[];\r\n}\r",
      "jsdoc": "/**\r\n * When present, this block has piston-like behavior. Contains\r\n * additional properties for discovering block piston state.\r\n */\r",
      "properties": [
        {
          "name": "isMoving",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "state",
          "type": "BlockPistonState",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "piston'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getAttachedBlocks",
          "parameters": [],
          "returnType": "Block[]",
          "accessibility": "public",
          "signature": "getAttachedBlocks(): Block[]"
        },
        {
          "name": "getAttachedBlocksLocations",
          "parameters": [],
          "returnType": "Vector3[]",
          "accessibility": "public",
          "signature": "getAttachedBlocksLocations(): Vector3[]"
        }
      ],
      "extends": "BlockComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockpistoncomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockRecordPlayerComponent": {
      "id": "@minecraft/server.BlockRecordPlayerComponent",
      "name": "BlockRecordPlayerComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a block that can play a record.\r /",
      "definition": "export class BlockRecordPlayerComponent extends BlockComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:record_player';\r\n    /**\r\n     * @remarks\r\n     * Ejects the currently set record of this record-playing\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Gets the currently set record of this record-playing block.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRecord(): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the record-playing block is currently\r\n     * playing a record.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    isPlaying(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Pauses the currently playing record of this record-playing\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    pauseRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Plays the currently set record of this record-playing block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    playRecord(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets and plays a record based on an item type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param startPlaying\r\n     * Defaults to: true\r\n     * @throws This function can throw errors.\r\n     */\r\n    setRecord(recordItemType?: ItemType | string, startPlaying?: boolean): void;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a block that can play a record.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "record_player'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "ejectRecord",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "ejectRecord(): void"
        },
        {
          "name": "getRecord",
          "parameters": [],
          "returnType": "ItemStack | undefined",
          "accessibility": "public",
          "signature": "getRecord(): ItemStack | undefined"
        },
        {
          "name": "isPlaying",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isPlaying(): boolean"
        },
        {
          "name": "pauseRecord",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "pauseRecord(): void"
        },
        {
          "name": "playRecord",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "playRecord(): void"
        },
        {
          "name": "setRecord",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setRecord(recordItemType?: ItemType | string, startPlaying?: boolean): void"
        }
      ],
      "extends": "BlockComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockrecordplayercomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockSignComponent": {
      "id": "@minecraft/server.BlockSignComponent",
      "name": "BlockSignComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a block that can display text on it.\r ```typescript\r  function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r }\r ```\r ```typescript\r  function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const signBlock = targetLocation.dimension.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    if (signComponent) {\r     signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r     signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r     signComponent.setTextDyeColor(DyeColor.Green);\r     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r      // players cannot edit sign!\r     signComponent.setWaxed(true);\r   } else {\r     log(\"Could not find sign component.\");\r   }\r }\r ```\r ```typescript\r  function updateSignText(targetLocation: DimensionLocation) {\r   const block = targetLocation.dimension.getBlock(targetLocation);\r   if (!block) {\r     console.warn(\"Could not find a block at specified location.\");\r     return;\r   }\r    const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r   if (sign) {\r     // RawMessage\r     const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r     sign.setText(helloWorldMessage);\r      // RawText\r     const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r     sign.setText(helloWorldText);\r      // Regular string\r     sign.setText(\"Hello World\");\r   } else {\r     console.warn(\"Could not find a sign component on the block.\");\r   }\r }\r ```\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
      "definition": "export class BlockSignComponent extends BlockComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether or not players can edit the sign. This happens if a\r\n     * sign has had a honeycomb used on it or `setWaxed` was called\r\n     * on the sign.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isWaxed: boolean;\r\n    static readonly componentId = 'minecraft:sign';\r\n    /**\r\n     * @remarks\r\n     * Returns the RawText of the sign if `setText` was called with\r\n     * a RawMessage or a RawText object, otherwise returns\r\n     * undefined.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the message from. If not\r\n     * provided, this will return the message from the front side\r\n     * of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRawText(side?: SignSide): RawText | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the text of the sign if `setText` was called with a\r\n     * string, otherwise returns undefined.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the message from. If not\r\n     * provided, this will return the message from the front side\r\n     * of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getText(side?: SignSide): string | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the dye that is on the text or undefined if the sign\r\n     * has not been dyed.\r\n     *\r\n     * @param side\r\n     * The side of the sign to read the dye from. If not provided,\r\n     * this will return the dye on the front side of the sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTextDyeColor(side?: SignSide): DyeColor | undefined;\r\n    /**\r\n     * @remarks\r\n     * Sets the text of the sign component.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param message\r\n     * The message to set on the sign. If set to a string, then\r\n     * call `getText` to read that string. If set to a RawMessage,\r\n     * then calling `getRawText` will return a RawText.\r\n     * @param side\r\n     * The side of the sign the message will be set on. If not\r\n     * provided, the message will be set on the front side of the\r\n     * sign.\r\n     * Defaults to: 0\r\n     * @throws\r\n     * Throws if the provided message is greater than 512\r\n     * characters in length.\r\n     */\r\n    setText(message: RawMessage | string, side?: SignSide): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the dye color of the text.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param color\r\n     * The dye color to apply to the sign or undefined to clear the\r\n     * dye on the sign.\r\n     * Defaults to: null\r\n     * @param side\r\n     * The side of the sign the color will be set on. If not\r\n     * provided, the color will be set on the front side of the\r\n     * sign.\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    setTextDyeColor(color?: DyeColor, side?: SignSide): void;\r\n    /**\r\n     * @remarks\r\n     * Makes it so players cannot edit this sign.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setWaxed(waxed: boolean): void;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a block that can display text on it.\r\n * @example addSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r\n * }\r\n * ```\r\n * @example addTwoSidedSign.ts\r\n * ```typescript\r\n * import { BlockPermutation, BlockSignComponent, SignSide, DyeColor, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const signBlock = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   if (signComponent) {\r\n *     signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r\n *     signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r\n *     signComponent.setTextDyeColor(DyeColor.Green);\r\n *     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r\n *\r\n *     // players cannot edit sign!\r\n *     signComponent.setWaxed(true);\r\n *   } else {\r\n *     log(\"Could not find sign component.\");\r\n *   }\r\n * }\r\n * ```\r\n * @example updateSignText.ts\r\n * ```typescript\r\n * import { BlockSignComponent, BlockComponentTypes, DimensionLocation, RawMessage, RawText } from \"@minecraft/server\";\r\n *\r\n * function updateSignText(targetLocation: DimensionLocation) {\r\n *   const block = targetLocation.dimension.getBlock(targetLocation);\r\n *   if (!block) {\r\n *     console.warn(\"Could not find a block at specified location.\");\r\n *     return;\r\n *   }\r\n *\r\n *   const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *   if (sign) {\r\n *     // RawMessage\r\n *     const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r\n *     sign.setText(helloWorldMessage);\r\n *\r\n *     // RawText\r\n *     const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r\n *     sign.setText(helloWorldText);\r\n *\r\n *     // Regular string\r\n *     sign.setText(\"Hello World\");\r\n *   } else {\r\n *     console.warn(\"Could not find a sign component on the block.\");\r\n *   }\r\n * }\r\n * ```\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "isWaxed",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "sign'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getRawText",
          "parameters": [],
          "returnType": "RawText | undefined",
          "accessibility": "public",
          "signature": "getRawText(side?: SignSide): RawText | undefined"
        },
        {
          "name": "getText",
          "parameters": [],
          "returnType": "string | undefined",
          "accessibility": "public",
          "signature": "getText(side?: SignSide): string | undefined"
        },
        {
          "name": "getTextDyeColor",
          "parameters": [],
          "returnType": "DyeColor | undefined",
          "accessibility": "public",
          "signature": "getTextDyeColor(side?: SignSide): DyeColor | undefined"
        },
        {
          "name": "setText",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setText(message: RawMessage | string, side?: SignSide): void"
        },
        {
          "name": "setTextDyeColor",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setTextDyeColor(color?: DyeColor, side?: SignSide): void"
        },
        {
          "name": "setWaxed",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setWaxed(waxed: boolean): void"
        }
      ],
      "extends": "BlockComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blocksigncomponent",
        "class"
      ],
      "examples": [
        {
          "title": "addSign.ts",
          "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r\n}"
        },
        {
          "title": "addTwoSidedSign.ts",
          "code": "import { BlockPermutation, BlockSignComponent, SignSide, DyeColor, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const signBlock = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  if (signComponent) {\r\n    signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r\n    signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r\n    signComponent.setTextDyeColor(DyeColor.Green);\r\n    signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r\n\n    // players cannot edit sign!\r\n    signComponent.setWaxed(true);\r\n  } else {\r\n    log(\"Could not find sign component.\");\r\n  }\r\n}"
        },
        {
          "title": "updateSignText.ts",
          "code": "import { BlockSignComponent, BlockComponentTypes, DimensionLocation, RawMessage, RawText } from \"@minecraft/server\";\r\n\nfunction updateSignText(targetLocation: DimensionLocation) {\r\n  const block = targetLocation.dimension.getBlock(targetLocation);\r\n  if (!block) {\r\n    console.warn(\"Could not find a block at specified location.\");\r\n    return;\r\n  }\r\n\n  const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n  if (sign) {\r\n    // RawMessage\r\n    const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r\n    sign.setText(helloWorldMessage);\r\n\n    // RawText\r\n    const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r\n    sign.setText(helloWorldText);\r\n\n    // Regular string\r\n    sign.setText(\"Hello World\");\r\n  } else {\r\n    console.warn(\"Could not find a sign component on the block.\");\r\n  }\r\n}"
        },
        {
          "title": "addTranslatedSign.ts",
          "code": "import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const dim = players[0].dimension;\r\n\n  const signBlock = dim.getBlock(targetLocation);\r\n\n  if (!signBlock) {\r\n    log(\"Could not find a block at specified location.\");\r\n    return -1;\r\n  }\r\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n\n  signBlock.setPermutation(signPerm);\r\n\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n\n  signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockStates": {
      "id": "@minecraft/server.BlockStates",
      "name": "BlockStates",
      "type": "class",
      "module": "@minecraft/server",
      "description": "/",
      "definition": "export class BlockStates {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves a specific block state instance.\r\n     *\r\n     * @returns\r\n     * Returns the {@link Block} state instance if it is found. If\r\n     * the block state instance is not found returns undefined.\r\n     */\r\n    static get(stateName: string): BlockStateType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of all available block states.\r\n     *\r\n     */\r\n    static getAll(): BlockStateType[];\r\n}\r",
      "jsdoc": "/**\r\n * Enumerates all {@link BlockStateType}s.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "BlockStateType | undefined",
          "accessibility": "public",
          "signature": "get(stateName: string): BlockStateType | undefined"
        },
        {
          "name": "getAll",
          "parameters": [],
          "returnType": "BlockStateType[]",
          "accessibility": "public",
          "signature": "getAll(): BlockStateType[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockstates",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockStateType": {
      "id": "@minecraft/server.BlockStateType",
      "name": "BlockStateType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a configurable state value of a block instance.\r For example, the facing direction of stairs is accessible as\r a block state.\r /",
      "definition": "export class BlockStateType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of the block property.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * A set of valid values for the block property.\r\n     *\r\n     */\r\n    readonly validValues: (boolean | number | string)[];\r\n}\r",
      "jsdoc": "/**\r\n * Represents a configurable state value of a block instance.\r\n * For example, the facing direction of stairs is accessible as\r\n * a block state.\r\n */\r",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "validValues",
          "type": "(boolean | number | string)[]",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockstatetype",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockType": {
      "id": "@minecraft/server.BlockType",
      "name": "BlockType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The type (or template) of a block. Does not contain\r permutation data (state) other than the type of block it\r represents. This type was introduced as of version\r 1.17.10.21.\r /",
      "definition": "export class BlockType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Block type name - for example, `minecraft:acacia_stairs`.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
      "jsdoc": "/**\r\n * The type (or template) of a block. Does not contain\r\n * permutation data (state) other than the type of block it\r\n * represents. This type was introduced as of version\r\n * 1.17.10.21.\r\n */\r",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blocktype",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockTypes": {
      "id": "@minecraft/server.BlockTypes",
      "name": "BlockTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a catalog of Minecraft Block Types that are\r available in this world.\r /",
      "definition": "export class BlockTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a BlockType object for the specified identifier.\r\n     *\r\n     * @param typeName\r\n     * Identifier of the block type. Should follow a namespace:id\r\n     * pattern, such as minecraft:dirt.\r\n     * @returns\r\n     * BlockType object, or undefined if the block type is not\r\n     * available within this world.\r\n     */\r\n    static get(typeName: string): BlockType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of all available block types.\r\n     *\r\n     */\r\n    static getAll(): BlockType[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains a catalog of Minecraft Block Types that are\r\n * available in this world.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "BlockType | undefined",
          "accessibility": "public",
          "signature": "get(typeName: string): BlockType | undefined"
        },
        {
          "name": "getAll",
          "parameters": [],
          "returnType": "BlockType[]",
          "accessibility": "public",
          "signature": "getAll(): BlockType[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blocktypes",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockVolume": {
      "id": "@minecraft/server.BlockVolume",
      "name": "BlockVolume",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A BlockVolume is a simple interface to an object which\r represents a 3D rectangle of a given size (in blocks) at a\r world block location.\r Note that these are not analogous to \"min\" and \"max\" values,\r in that the vector components are not guaranteed to be in\r any order.\r In addition, these vector positions are not interchangeable\r with BlockLocation.\r If you want to get this volume represented as range of of\r BlockLocations, you can use the getBoundingBox utility\r function.\r This volume class will maintain the ordering of the corner\r indexes as initially set. imagine that each corner is\r assigned in Editor - as you move the corner around\r (potentially inverting the min/max relationship of the\r bounds) - what\r you had originally selected as the top/left corner would\r traditionally become the bottom/right.\r When manually editing these kinds of volumes, you need to\r maintain the identity of the corner as you edit - the\r BlockVolume utility functions do this.\r  Important to note that this measures block sizes (to/from) -\r a normal AABB (0,0,0) to (0,0,0) would traditionally be of\r size (0,0,0)\r However, because we're measuring blocks - the size or span\r of a BlockVolume would actually be (1,1,1)\r  /",
      "definition": "export class BlockVolume extends BlockVolumeBase {\n    /**\r\n     * @remarks\r\n     * A world block location that represents a corner in a 3D\r\n     * rectangle\r\n     *\r\n     */\r\n    'from': Vector3;\r\n    /**\r\n     * @remarks\r\n     * A world block location that represents the opposite corner\r\n     * in a 3D rectangle\r\n     *\r\n     */\r\n    to: Vector3;\r\n    constructor(from: Vector3, to: Vector3);\r\n    /**\r\n     * @remarks\r\n     * Check to see if the given location is directly adjacent to\r\n     * the outer surface of a BlockVolume.\r\n     *\r\n     *\r\n     * @param pos\r\n     * The world block location to test\r\n     * @returns\r\n     * If the location is either inside or more than 0 blocks away,\r\n     * the function will return false.\r\n     * If the location is directly contacting the outer surface of\r\n     * the BlockVolume, the function will return true.\r\n     */\r\n    doesLocationTouchFaces(pos: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Check to see if a two block volumes are directly adjacent\r\n     * and two faces touch.\r\n     *\r\n     * @param other\r\n     * The volume to test\r\n     * @returns\r\n     * If the outer faces of both block volumes touch and are\r\n     * directly adjacent at any point, return true.\r\n     */\r\n    doesVolumeTouchFaces(other: BlockVolume): boolean;\r\n    /**\r\n     * @remarks\r\n     * Return an enumeration which represents the intersection\r\n     * between two BlockVolume objects\r\n     *\r\n     */\r\n    intersects(other: BlockVolume): BlockVolumeIntersection;\r\n}\r",
      "jsdoc": "/**\r\n * A BlockVolume is a simple interface to an object which\r\n * represents a 3D rectangle of a given size (in blocks) at a\r\n * world block location.\r\n * Note that these are not analogous to \"min\" and \"max\" values,\r\n * in that the vector components are not guaranteed to be in\r\n * any order.\r\n * In addition, these vector positions are not interchangeable\r\n * with BlockLocation.\r\n * If you want to get this volume represented as range of of\r\n * BlockLocations, you can use the getBoundingBox utility\r\n * function.\r\n * This volume class will maintain the ordering of the corner\r\n * indexes as initially set. imagine that each corner is\r\n * assigned in Editor - as you move the corner around\r\n * (potentially inverting the min/max relationship of the\r\n * bounds) - what\r\n * you had originally selected as the top/left corner would\r\n * traditionally become the bottom/right.\r\n * When manually editing these kinds of volumes, you need to\r\n * maintain the identity of the corner as you edit - the\r\n * BlockVolume utility functions do this.\r\n *\r\n * Important to note that this measures block sizes (to/from) -\r\n * a normal AABB (0,0,0) to (0,0,0) would traditionally be of\r\n * size (0,0,0)\r\n * However, because we're measuring blocks - the size or span\r\n * of a BlockVolume would actually be (1,1,1)\r\n *\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "doesLocationTouchFaces",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "doesLocationTouchFaces(pos: Vector3): boolean"
        },
        {
          "name": "doesVolumeTouchFaces",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "doesVolumeTouchFaces(other: BlockVolume): boolean"
        },
        {
          "name": "intersects",
          "parameters": [],
          "returnType": "BlockVolumeIntersection",
          "accessibility": "public",
          "signature": "intersects(other: BlockVolume): BlockVolumeIntersection"
        }
      ],
      "extends": "BlockVolumeBase",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockvolume",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockVolumeBase": {
      "id": "@minecraft/server.BlockVolumeBase",
      "name": "BlockVolumeBase",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base type for BlockVolumes.\r /",
      "definition": "export class BlockVolumeBase {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Fetch a {@link BlockLocationIterator} that represents all of\r\n     * the block world locations within the specified volume\r\n     *\r\n     */\r\n    getBlockLocationIterator(): BlockLocationIterator;\r\n    /**\r\n     * @remarks\r\n     * Return the capacity (volume) of the BlockVolume (W*D*H)\r\n     *\r\n     */\r\n    getCapacity(): number;\r\n    /**\r\n     * @remarks\r\n     * Get the largest corner position of the volume (guaranteed to\r\n     * be >= min)\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getMax(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Get the smallest corner position of the volume (guaranteed\r\n     * to be <= max)\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getMin(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Get a {@link Vector3} object where each component represents\r\n     * the number of blocks along that axis\r\n     *\r\n     */\r\n    getSpan(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Check to see if a given world block location is inside a\r\n     * BlockVolume\r\n     *\r\n     */\r\n    isInside(location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Move a BlockVolume by a specified amount\r\n     *\r\n     * @param delta\r\n     * Amount of blocks to move by\r\n     */\r\n    translate(delta: Vector3): void;\r\n}\r",
      "jsdoc": "/**\r\n * Base type for BlockVolumes.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "getBlockLocationIterator",
          "parameters": [],
          "returnType": "BlockLocationIterator",
          "accessibility": "public",
          "signature": "getBlockLocationIterator(): BlockLocationIterator"
        },
        {
          "name": "getCapacity",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getCapacity(): number"
        },
        {
          "name": "getMax",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "getMax(): Vector3"
        },
        {
          "name": "getMin",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "getMin(): Vector3"
        },
        {
          "name": "getSpan",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "getSpan(): Vector3"
        },
        {
          "name": "isInside",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isInside(location: Vector3): boolean"
        },
        {
          "name": "translate",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "translate(delta: Vector3): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockvolumebase",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ButtonPushAfterEvent": {
      "id": "@minecraft/server.ButtonPushAfterEvent",
      "name": "ButtonPushAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a button push.\r ```typescript\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a button on cobblestone\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r     const eventLoc = buttonPushEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Button push event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
      "definition": "export class ButtonPushAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Optional source that triggered the button push.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to a button push.\r\n * @example buttonPushEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a button on cobblestone\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n *     const eventLoc = buttonPushEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Button push event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "source",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "buttonpushafterevent",
        "class"
      ],
      "examples": [
        {
          "title": "buttonPushEvent.ts",
          "code": "import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a button on cobblestone\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n    const eventLoc = buttonPushEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Button push event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.ButtonPushAfterEventSignal": {
      "id": "@minecraft/server.ButtonPushAfterEventSignal",
      "name": "ButtonPushAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a button is\r pushed.\r ```typescript\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a button on cobblestone\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r     const eventLoc = buttonPushEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Button push event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
      "definition": "export class ButtonPushAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a button is pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ButtonPushAfterEvent) => void): (arg0: ButtonPushAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a button is\r\n     * pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ButtonPushAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a button is\r\n * pushed.\r\n * @example buttonPushEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a button on cobblestone\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n *     const eventLoc = buttonPushEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Button push event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "buttonpushaftereventsignal",
        "class"
      ],
      "examples": [
        {
          "title": "buttonPushEvent.ts",
          "code": "import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a button on cobblestone\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r\n    const eventLoc = buttonPushEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Button push event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.Camera": {
      "id": "@minecraft/server.Camera",
      "name": "Camera",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains methods relating to the active camera for the\r specified player.\r /",
      "definition": "export class Camera {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns whether the Camera is valid to access and use. A\r\n     * Camera is considered valid when the owning Player of the\r\n     * Camera is loaded and valid itself.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Clears the active camera for the specified player. Causes\r\n     * the specified players to end any in-progress camera\r\n     * perspectives, including any eased camera motions, and return\r\n     * to their normal perspective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    clear(): void;\r\n    /**\r\n     * @remarks\r\n     * Begins a camera fade transition. A fade transition is a\r\n     * full-screen color that fades-in, holds, and then fades-out.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fadeCameraOptions\r\n     * Additional options around camera fade operations.\r\n     * @throws This function can throw errors.\r\n     */\r\n    fade(fadeCameraOptions?: CameraFadeOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current active camera for the specified player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cameraPreset\r\n     * Identifier of a camera preset file defined within JSON.\r\n     * @param setOptions\r\n     * Additional options for the camera.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setCamera(\r\n        cameraPreset: string,\r\n        setOptions?:\r\n            | CameraFixedBoomOptions\r\n            | CameraSetFacingOptions\r\n            | CameraSetLocationOptions\r\n            | CameraSetPosOptions\r\n            | CameraSetRotOptions\r\n            | CameraTargetOptions,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current active camera for the specified player and\r\n     * resets the position and rotation to the values defined in\r\n     * the JSON.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cameraPreset\r\n     * Identifier of a camera preset file defined within JSON.\r\n     * @param easeOptions\r\n     * Options to ease the camera back to its original position and\r\n     * rotation.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setDefaultCamera(cameraPreset: string, easeOptions?: EaseOptions): void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains methods relating to the active camera for the\r\n * specified player.\r\n */\r",
      "properties": [
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "clear",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clear(): void"
        },
        {
          "name": "fade",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "fade(fadeCameraOptions?: CameraFadeOptions): void"
        },
        {
          "name": "setDefaultCamera",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setDefaultCamera(cameraPreset: string, easeOptions?: EaseOptions): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camera",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ClientSystemInfo": {
      "id": "@minecraft/server.ClientSystemInfo",
      "name": "ClientSystemInfo",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains the device information for a client instance.\r /",
      "definition": "export class ClientSystemInfo extends SystemInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The max render distance for the device in chunks.\r\n     *\r\n     */\r\n    readonly maxRenderDistance: number;\r\n    /**\r\n     * @remarks\r\n     * The platform type of the device.\r\n     *\r\n     */\r\n    readonly platformType: PlatformType;\r\n}\r",
      "jsdoc": "/**\r\n * Contains the device information for a client instance.\r\n */\r",
      "properties": [
        {
          "name": "maxRenderDistance",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "platformType",
          "type": "PlatformType",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "SystemInfo",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "clientsysteminfo",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.CommandResult": {
      "id": "@minecraft/server.CommandResult",
      "name": "CommandResult",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains return data on the result of a command execution.\r /",
      "definition": "export class CommandResult {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If the command operates against a number of entities,\r\n     * blocks, or items, this returns the number of successful\r\n     * applications of this command.\r\n     *\r\n     */\r\n    readonly successCount: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains return data on the result of a command execution.\r\n */\r",
      "properties": [
        {
          "name": "successCount",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "commandresult",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Component": {
      "id": "@minecraft/server.Component",
      "name": "Component",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base class for downstream Component implementations.\r /",
      "definition": "export class Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns whether the component is valid. A component is\r\n     * considered valid if its owner is valid, in addition to any\r\n     * addition to any additional validation required by the\r\n     * component.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the component.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
      "jsdoc": "/**\r\n * Base class for downstream Component implementations.\r\n */\r",
      "properties": [
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "typeId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "component",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Container": {
      "id": "@minecraft/server.Container",
      "name": "Container",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a container that can hold sets of items. Used\r with entities such as Players, Chest Minecarts, Llamas, and\r more.\r ```typescript\r  function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const xLocation = targetLocation; // left chest location\r   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r    const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r     x: targetLocation.x + 4,\r     y: targetLocation.y,\r     z: targetLocation.z,\r   });\r    const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r    if (!xChestBlock || !xPlusTwoChestBlock) {\r     log(\"Could not retrieve chest blocks.\");\r     return;\r   }\r    xChestBlock.setType(MinecraftBlockTypes.Chest);\r   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r    const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r   const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r   const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r    const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r   const xChestContainer = xChestInventoryComponent.container;\r   const chestCartContainer = chestCartInventoryComp.container;\r    if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r     log(\"Could not retrieve chest containers.\");\r     return;\r   }\r    xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r     log(\"Expected apple in x+2 container slot index 0\", -1);\r   }\r    xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r     log(\"Expected emerald in x+2 container slot index 1\", -1);\r   }\r    if (xPlusTwoChestContainer.size !== 27) {\r     log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r   }\r    if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r     log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r   }\r    xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r    xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r    if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r     log(\"Expected apple in minecraft chest container slot index 0\", -1);\r   }\r    if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r     log(\"Expected emerald in x container slot index 0\", -1);\r   }\r    if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r     log(\"Expected cake in x+2 container slot index 1\", -1);\r   }\r }\r ```\r /",
      "definition": "export class Container {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Count of the slots in the container that are empty.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    readonly emptySlotsCount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether a container object (or the entity or block\r\n     * that this container is associated with) is still available\r\n     * for use in this context.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * The number of slots in this container. For example, a\r\n     * standard single-block chest has a size of 27. Note, a\r\n     * player's inventory container contains a total of 36 slots, 9\r\n     * hotbar slots plus 27 inventory slots.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    readonly size: number;\r\n    /**\r\n     * @remarks\r\n     * Adds an item to the container. The item is placed in the\r\n     * first available slot(s) and can be stacked with existing\r\n     * items of the same type. Note, use {@link Container.setItem}\r\n     * if you wish to set the item in a particular slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param itemStack\r\n     * The stack of items to add.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addItem(itemStack: ItemStack): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Clears all inventory items in the container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the container is invalid.\r\n     */\r\n    clearAll(): void;\r\n    /**\r\n     * @remarks\r\n     * Attempts to find an item inside the container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    contains(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * Find the index of the first instance of an item inside the\r\n     * container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    find(itemStack: ItemStack): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Find the index of the last instance of an item inside the\r\n     * container\r\n     *\r\n     * @param itemStack\r\n     * The item to find.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    findLast(itemStack: ItemStack): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Finds the index of the first empty slot inside the container\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    firstEmptySlot(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Finds the index of the first item inside the container\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerError}\r\n     */\r\n    firstItem(): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets an {@link ItemStack} of the item at the specified slot.\r\n     * If the slot is empty, returns `undefined`. This method does\r\n     * not change or clear the contents of the specified slot. To\r\n     * get a reference to a particular slot, see {@link\r\n     * Container.getSlot}.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to retrieve items from.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     * @example getFirstHotbarItem.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function getFirstHotbarItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const inventory = player.getComponent(EntityInventoryComponent.componentId) as EntityInventoryComponent;\r\n     *     if (inventory && inventory.container) {\r\n     *       const firstItem = inventory.container.getItem(0);\r\n     *\r\n     *       if (firstItem) {\r\n     *         log(\"First item in hotbar is: \" + firstItem.typeId);\r\n     *       }\r\n     *\r\n     *       return inventory.container.getItem(0);\r\n     *     }\r\n     *     return undefined;\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getItem(slot: number): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a container slot. This acts as a reference to a slot\r\n     * at the given index for this container.\r\n     *\r\n     * @param slot\r\n     * The index of the slot to return. This index must be within\r\n     * the bounds of the container.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     */\r\n    getSlot(slot: number): ContainerSlot;\r\n    /**\r\n     * @remarks\r\n     * Moves an item from one slot to another, potentially across\r\n     * containers.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fromSlot\r\n     * Zero-based index of the slot to transfer an item from, on\r\n     * this container.\r\n     * @param toSlot\r\n     * Zero-based index of the slot to transfer an item to, on\r\n     * `toContainer`.\r\n     * @param toContainer\r\n     * Target container to transfer to. Note this can be the same\r\n     * container as the source.\r\n     * @throws\r\n     * Throws if either this container or `toContainer` are invalid\r\n     * or if the `fromSlot` or `toSlot` indices out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     * @example moveBetweenContainers.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function moveBetweenContainers(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getAllPlayers();\r\n     *\r\n     *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     const fromPlayer = players[0];\r\n     *\r\n     *     const fromInventory = fromPlayer.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     const toInventory = chestCart.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *\r\n     *     if (fromInventory && toInventory && fromInventory.container && toInventory.container) {\r\n     *       fromInventory.container.moveItem(0, 0, toInventory.container);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    moveItem(fromSlot: number, toSlot: number, toContainer: Container): void;\r\n    /**\r\n     * @remarks\r\n     * Sets an item stack within a particular slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to set an item at.\r\n     * @param itemStack\r\n     * Stack of items to place within the specified slot. Setting\r\n     * `itemStack` to undefined will clear the slot.\r\n     * @throws\r\n     * Throws if the container is invalid or if the `slot` index is\r\n     * out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    setItem(slot: number, itemStack?: ItemStack): void;\r\n    /**\r\n     * @remarks\r\n     * Swaps items between two different slots within containers.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param slot\r\n     * Zero-based index of the slot to swap from this container.\r\n     * @param otherSlot\r\n     * Zero-based index of the slot to swap with.\r\n     * @param otherContainer\r\n     * Target container to swap with. Note this can be the same\r\n     * container as this source.\r\n     * @throws\r\n     * Throws if either this container or `otherContainer` are\r\n     * invalid or if the `slot` or `otherSlot` are out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): void;\r\n    /**\r\n     * @remarks\r\n     * Moves an item from one slot to another container, or to the\r\n     * first available slot in the same container.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param fromSlot\r\n     * Zero-based index of the slot to transfer an item from, on\r\n     * this container.\r\n     * @param toContainer\r\n     * Target container to transfer to. Note this can be the same\r\n     * container as the source.\r\n     * @returns\r\n     * An itemStack with the items that couldn't be transferred.\r\n     * Returns undefined if all items were transferred.\r\n     * @throws\r\n     * Throws if either this container or `toContainer` are invalid\r\n     * or if the `fromSlot` or `toSlot` indices out of bounds.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link Error}\r\n     * @example transferBetweenContainers.ts\r\n     * ```typescript\r\n     * import { world, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function transferBetweenContainers(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getAllPlayers();\r\n     *\r\n     *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     const fromPlayer = players[0];\r\n     *\r\n     *     const fromInventory = fromPlayer.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     const toInventory = chestCart.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *\r\n     *     if (fromInventory && toInventory && fromInventory.container && toInventory.container) {\r\n     *       fromInventory.container.transferItem(0, toInventory.container);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    transferItem(fromSlot: number, toContainer: Container): ItemStack | undefined;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a container that can hold sets of items. Used\r\n * with entities such as Players, Chest Minecarts, Llamas, and\r\n * more.\r\n * @example containers.ts\r\n * ```typescript\r\n * import { ItemStack, EntityInventoryComponent, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes, MinecraftItemTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const xLocation = targetLocation; // left chest location\r\n *   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r\n *\r\n *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n *     x: targetLocation.x + 4,\r\n *     y: targetLocation.y,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r\n *   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r\n *\r\n *   if (!xChestBlock || !xPlusTwoChestBlock) {\r\n *     log(\"Could not retrieve chest blocks.\");\r\n *     return;\r\n *   }\r\n *\r\n *   xChestBlock.setType(MinecraftBlockTypes.Chest);\r\n *   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r\n *\r\n *   const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *   const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n *   const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r\n *\r\n *   const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r\n *   const xChestContainer = xChestInventoryComponent.container;\r\n *   const chestCartContainer = chestCartInventoryComp.container;\r\n *\r\n *   if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r\n *     log(\"Could not retrieve chest containers.\");\r\n *     return;\r\n *   }\r\n *\r\n *   xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n *   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n *     log(\"Expected apple in x+2 container slot index 0\", -1);\r\n *   }\r\n *\r\n *   xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r\n *   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r\n *     log(\"Expected emerald in x+2 container slot index 1\", -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.size !== 27) {\r\n *     log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r\n *     log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r\n *   }\r\n *\r\n *   xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r\n *\r\n *   xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r\n *   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r\n *\r\n *   if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n *     log(\"Expected apple in minecraft chest container slot index 0\", -1);\r\n *   }\r\n *\r\n *   if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r\n *     log(\"Expected emerald in x container slot index 0\", -1);\r\n *   }\r\n *\r\n *   if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r\n *     log(\"Expected cake in x+2 container slot index 1\", -1);\r\n *   }\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "emptySlotsCount",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "size",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "addItem",
          "parameters": [],
          "returnType": "ItemStack | undefined",
          "accessibility": "public",
          "signature": "addItem(itemStack: ItemStack): ItemStack | undefined"
        },
        {
          "name": "clearAll",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearAll(): void"
        },
        {
          "name": "contains",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "contains(itemStack: ItemStack): boolean"
        },
        {
          "name": "find",
          "parameters": [],
          "returnType": "number | undefined",
          "accessibility": "public",
          "signature": "find(itemStack: ItemStack): number | undefined"
        },
        {
          "name": "findLast",
          "parameters": [],
          "returnType": "number | undefined",
          "accessibility": "public",
          "signature": "findLast(itemStack: ItemStack): number | undefined"
        },
        {
          "name": "firstEmptySlot",
          "parameters": [],
          "returnType": "number | undefined",
          "accessibility": "public",
          "signature": "firstEmptySlot(): number | undefined"
        },
        {
          "name": "firstItem",
          "parameters": [],
          "returnType": "number | undefined",
          "accessibility": "public",
          "signature": "firstItem(): number | undefined"
        },
        {
          "name": "getItem",
          "parameters": [],
          "returnType": "ItemStack | undefined",
          "accessibility": "public",
          "signature": "getItem(slot: number): ItemStack | undefined"
        },
        {
          "name": "getSlot",
          "parameters": [],
          "returnType": "ContainerSlot",
          "accessibility": "public",
          "signature": "getSlot(slot: number): ContainerSlot"
        },
        {
          "name": "moveItem",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "moveItem(fromSlot: number, toSlot: number, toContainer: Container): void"
        },
        {
          "name": "setItem",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setItem(slot: number, itemStack?: ItemStack): void"
        },
        {
          "name": "swapItems",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "swapItems(slot: number, otherSlot: number, otherContainer: Container): void"
        },
        {
          "name": "transferItem",
          "parameters": [],
          "returnType": "ItemStack | undefined",
          "accessibility": "public",
          "signature": "transferItem(fromSlot: number, toContainer: Container): ItemStack | undefined"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "container",
        "class"
      ],
      "examples": [
        {
          "title": "containers.ts",
          "code": "import { ItemStack, EntityInventoryComponent, BlockInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes, MinecraftItemTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const xLocation = targetLocation; // left chest location\r\n  const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r\n\n  const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r\n    x: targetLocation.x + 4,\r\n    y: targetLocation.y,\r\n    z: targetLocation.z,\r\n  });\r\n\n  const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r\n  const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r\n\n  if (!xChestBlock || !xPlusTwoChestBlock) {\r\n    log(\"Could not retrieve chest blocks.\");\r\n    return;\r\n  }\r\n\n  xChestBlock.setType(MinecraftBlockTypes.Chest);\r\n  xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r\n\n  const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n  const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r\n  const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r\n\n  const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r\n  const xChestContainer = xChestInventoryComponent.container;\r\n  const chestCartContainer = chestCartInventoryComp.container;\r\n\n  if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r\n    log(\"Could not retrieve chest containers.\");\r\n    return;\r\n  }\r\n\n  xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r\n  if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n    log(\"Expected apple in x+2 container slot index 0\", -1);\r\n  }\r\n\n  xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r\n  if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r\n    log(\"Expected emerald in x+2 container slot index 1\", -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.size !== 27) {\r\n    log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r\n    log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r\n  }\r\n\n  xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r\n\n  xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r\n  xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r\n\n  if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r\n    log(\"Expected apple in minecraft chest container slot index 0\", -1);\r\n  }\r\n\n  if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r\n    log(\"Expected emerald in x container slot index 0\", -1);\r\n  }\r\n\n  if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r\n    log(\"Expected cake in x+2 container slot index 1\", -1);\r\n  }\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.ContainerSlot": {
      "id": "@minecraft/server.ContainerSlot",
      "name": "ContainerSlot",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a slot within a broader container (e.g., entity\r inventory.)\r /",
      "definition": "export class ContainerSlot {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Number of the items in the stack. Valid values range between\r\n     * 1-255. The provided value will be clamped to the item's\r\n     * maximum stack size.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the value is outside the range of 1-255.\r\n     */\r\n    amount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item is stackable. An item is considered\r\n     * stackable if the item's maximum stack size is greater than 1\r\n     * and the item does not contain any custom data or properties.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly isStackable: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the ContainerSlot is valid. The container\r\n     * slot is valid if the container exists and is loaded, and the\r\n     * slot index is valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets whether the item is kept on death.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     */\r\n    keepOnDeath: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets the item's lock mode. The default value is\r\n     * `ItemLockMode.none`.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     */\r\n    lockMode: ItemLockMode;\r\n    /**\r\n     * @remarks\r\n     * The maximum stack size. This value varies depending on the\r\n     * type of item. For example, torches have a maximum stack size\r\n     * of 64, while eggs have a maximum stack size of 16.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly maxAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Given name of this stack of items. The name tag is displayed\r\n     * when hovering over the item. Setting the name tag to an\r\n     * empty string or `undefined` will remove the name tag.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * the length exceeds 255 characters.\r\n     */\r\n    nameTag?: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the item.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly 'type': ItemType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of items for the stack. If a\r\n     * namespace is not specified, 'minecraft:' is assumed.\r\n     * Examples include 'wheat' or 'apple'.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * item stack.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item within this container slot can be\r\n     * destroyed.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getCanDestroy(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns if the item in this container slot can be placed on.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getCanPlaceOn(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this item stack.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Creates an exact copy of the item stack, including any\r\n     * custom data or properties.\r\n     *\r\n     * @returns\r\n     * Returns a copy of the item in the slot. Returns undefined if\r\n     * the slot is empty.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getItem(): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * @returns\r\n     * An array of lore strings. If the item does not have lore,\r\n     * returns an empty array.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getLore(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns all tags for the item in the slot.\r\n     *\r\n     * @returns\r\n     * Returns all tags for the item in the slot. Return an empty\r\n     * array if the the slot is empty.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if this slot has an item.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    hasItem(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item in the slot slot has the given tag.\r\n     *\r\n     * @param tag\r\n     * The item tag.\r\n     * @returns\r\n     * Returns false when the slot is empty or the item in the slot\r\n     * does not have the given tag.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`. This is determined by comparing the item\r\n     * type and any custom data and properties associated with the\r\n     * item stacks. The amount of each item stack is not taken into\r\n     * consideration.\r\n     *\r\n     * @param itemStack\r\n     * The ItemStack that is being compared.\r\n     * @returns\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    isStackableWith(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can break in Adventure\r\n     * mode. The block names are displayed in the item's tooltip.\r\n     * Setting the value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * The list of blocks, given by their identifiers.\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * any of the provided block identifiers are invalid.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setCanDestroy(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can be placed on in\r\n     * Adventure mode. This is only applicable to block items. The\r\n     * block names are displayed in the item's tooltip. Setting the\r\n     * value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * The list of blocks, given by their identifiers.\r\n     * @throws\r\n     * Throws if the slot's container is invalid. Also throws if\r\n     * any of the provided block identifiers are invalid.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setCanPlaceOn(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the given ItemStack in the slot, replacing any existing\r\n     * item.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param itemStack\r\n     * The ItemStack to be placed in the slot.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link ContainerRulesError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setItem(itemStack?: ItemStack): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param loreList\r\n     * A list of lore strings. Setting this argument to undefined\r\n     * will clear the lore.\r\n     * @throws\r\n     * Throws if the slot's container is invalid.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidContainerSlotError}\r\n     */\r\n    setLore(loreList?: string[]): void;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a slot within a broader container (e.g., entity\r\n * inventory.)\r\n */\r",
      "properties": [
        {
          "name": "isStackable",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "maxAmount",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "typeId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "clearDynamicProperties",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearDynamicProperties(): void"
        },
        {
          "name": "getCanDestroy",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getCanDestroy(): string[]"
        },
        {
          "name": "getCanPlaceOn",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getCanPlaceOn(): string[]"
        },
        {
          "name": "getDynamicProperty",
          "parameters": [],
          "returnType": "boolean | number | string | Vector3 | undefined",
          "accessibility": "public",
          "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
        },
        {
          "name": "getDynamicPropertyIds",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getDynamicPropertyIds(): string[]"
        },
        {
          "name": "getDynamicPropertyTotalByteCount",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getDynamicPropertyTotalByteCount(): number"
        },
        {
          "name": "getItem",
          "parameters": [],
          "returnType": "ItemStack | undefined",
          "accessibility": "public",
          "signature": "getItem(): ItemStack | undefined"
        },
        {
          "name": "getLore",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getLore(): string[]"
        },
        {
          "name": "getTags",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getTags(): string[]"
        },
        {
          "name": "hasItem",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasItem(): boolean"
        },
        {
          "name": "hasTag",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasTag(tag: string): boolean"
        },
        {
          "name": "isStackableWith",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isStackableWith(itemStack: ItemStack): boolean"
        },
        {
          "name": "setCanDestroy",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setCanDestroy(blockIdentifiers?: string[]): void"
        },
        {
          "name": "setCanPlaceOn",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setCanPlaceOn(blockIdentifiers?: string[]): void"
        },
        {
          "name": "setDynamicProperty",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
        },
        {
          "name": "setItem",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setItem(itemStack?: ItemStack): void"
        },
        {
          "name": "setLore",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setLore(loreList?: string[]): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "containerslot",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandOrigin": {
      "id": "@minecraft/server.CustomCommandOrigin",
      "name": "CustomCommandOrigin",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Details about the origins of the command.\r /",
      "definition": "export class CustomCommandOrigin {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If this command was initiated via an NPC, returns the entity\r\n     * that initiated the NPC dialogue.\r\n     *\r\n     */\r\n    readonly initiator?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Source block if this command was triggered via a block\r\n     * (e.g., a commandblock.)\r\n     *\r\n     */\r\n    readonly sourceBlock?: Block;\r\n    /**\r\n     * @remarks\r\n     * Source entity if this command was triggered by an entity\r\n     * (e.g., a NPC).\r\n     *\r\n     */\r\n    readonly sourceEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Returns the type of source that fired this command.\r\n     *\r\n     */\r\n    readonly sourceType: CustomCommandSource;\r\n}\r",
      "jsdoc": "/**\r\n * Details about the origins of the command.\r\n */\r",
      "properties": [
        {
          "name": "sourceType",
          "type": "CustomCommandSource",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandorigin",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandRegistry": {
      "id": "@minecraft/server.CustomCommandRegistry",
      "name": "CustomCommandRegistry",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides the functionality for registering custom commands.\r /",
      "definition": "export class CustomCommandRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a custom command that when executed triggers a\r\n     * script callback.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * The callback triggered when the command executes.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomCommandError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCommand(\r\n        customCommand: CustomCommand,\r\n        callback: (origin: CustomCommandOrigin, ...args: any[]) => CustomCommandResult | undefined,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Registers a custom command enum.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomCommandError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerEnum(name: string, values: string[]): void;\r\n}\r",
      "jsdoc": "/**\r\n * Provides the functionality for registering custom commands.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "registerEnum",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "registerEnum(name: string, values: string[]): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandregistry",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.CustomComponentParameters": {
      "id": "@minecraft/server.CustomComponentParameters",
      "name": "CustomComponentParameters",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains the custom component's JSON parameters\r /",
      "definition": "export class CustomComponentParameters {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * JSON object containing the parameters from the custom\r\n     * component definition\r\n     *\r\n     */\r\n    readonly params: unknown;\r\n}\r",
      "jsdoc": "/**\r\n * Contains the custom component's JSON parameters\r\n */\r",
      "properties": [
        {
          "name": "params",
          "type": "unknown",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcomponentparameters",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.DataDrivenEntityTriggerAfterEvent": {
      "id": "@minecraft/server.DataDrivenEntityTriggerAfterEvent",
      "name": "DataDrivenEntityTriggerAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to firing of a data driven\r entity event - for example, the minecraft:ageable_grow_up\r event on a chicken.\r /",
      "definition": "export class DataDrivenEntityTriggerAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that the event triggered on.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Name of the data driven event being triggered.\r\n     *\r\n     */\r\n    readonly eventId: string;\r\n    /**\r\n     * @remarks\r\n     * An updateable list of modifications to component state that\r\n     * are the effect of this triggered event.\r\n     *\r\n     */\r\n    getModifiers(): DefinitionModifier[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to firing of a data driven\r\n * entity event - for example, the minecraft:ageable_grow_up\r\n * event on a chicken.\r\n */\r",
      "properties": [
        {
          "name": "entity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "eventId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getModifiers",
          "parameters": [],
          "returnType": "DefinitionModifier[]",
          "accessibility": "public",
          "signature": "getModifiers(): DefinitionModifier[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "datadrivenentitytriggerafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.DataDrivenEntityTriggerAfterEventSignal": {
      "id": "@minecraft/server.DataDrivenEntityTriggerAfterEventSignal",
      "name": "DataDrivenEntityTriggerAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains event registration related to firing of a data\r driven entity event - for example, the\r minecraft:ageable_grow_up event on a chicken.\r /",
      "definition": "export class DataDrivenEntityTriggerAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a data driven\r\n     * entity event is triggered.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: DataDrivenEntityTriggerAfterEvent) => void,\r\n        options?: EntityDataDrivenTriggerEventOptions,\r\n    ): (arg0: DataDrivenEntityTriggerAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback that will be called after a data driven\r\n     * entity event is triggered.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: DataDrivenEntityTriggerAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains event registration related to firing of a data\r\n * driven entity event - for example, the\r\n * minecraft:ageable_grow_up event on a chicken.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "datadrivenentitytriggeraftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Dimension": {
      "id": "@minecraft/server.Dimension",
      "name": "Dimension",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A class that represents a particular dimension (e.g., The\r End) within a world.\r /",
      "definition": "export class Dimension {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Height range of the dimension.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly heightRange: minecraftcommon.NumberRange;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the dimension.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of a dimension's name used by\r\n     * language files.\r\n     *\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Searches the block volume for a block that satisfies the\r\n     * block filter.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks that will be checked.\r\n     * @param filter\r\n     * Block filter that will be checked against each block in the\r\n     * volume.\r\n     * @param allowUnloadedChunks\r\n     * If set to true will suppress the UnloadedChunksError if some\r\n     * or all of the block volume is outside of the loaded chunks.\r\n     * Will only check the block locations that are within the\r\n     * loaded chunks in the volume.\r\n     * Defaults to: false\r\n     * @returns\r\n     * Returns true if at least one block in the volume satisfies\r\n     * the filter, false otherwise.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    containsBlock(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Creates an explosion at the specified location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location of the explosion.\r\n     * @param radius\r\n     * Radius, in blocks, of the explosion to create.\r\n     * @param explosionOptions\r\n     * Additional configurable options for the explosion.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example createExplosion.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function createExplosion(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   log(\"Creating an explosion of radius 10.\");\r\n     *   targetLocation.dimension.createExplosion(targetLocation, 10);\r\n     * }\r\n     * ```\r\n     * @example createNoBlockExplosion.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function createNoBlockExplosion(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r\n     *\r\n     *   log(\"Creating an explosion of radius 15 that does not break blocks.\");\r\n     *   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r\n     * }\r\n     * ```\r\n     * @example createExplosions.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r\n     *\r\n     *   log(\"Creating an explosion of radius 15 that causes fire.\");\r\n     *   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r\n     *\r\n     *   const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r\n     *\r\n     *   log(\"Creating an explosion of radius 10 that can go underwater.\");\r\n     *   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r\n     * }\r\n     * ```\r\n     */\r\n    createExplosion(location: Vector3, radius: number, explosionOptions?: ExplosionOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Fills an area of blocks with a specific block type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks to be filled.\r\n     * @param block\r\n     * Type of block to fill the volume with.\r\n     * @param options\r\n     * A set of additional options, such as a block filter which\r\n     * can be used to include / exclude specific blocks in the\r\n     * fill.\r\n     * @returns\r\n     * Returns a ListBlockVolume which contains all the blocks that\r\n     * were placed.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    fillBlocks(\r\n        volume: BlockVolumeBase,\r\n        block: BlockPermutation | BlockType | string,\r\n        options?: BlockFillOptions,\r\n    ): ListBlockVolume;\r\n    /**\r\n     * @remarks\r\n     * Returns a block instance at the given location.\r\n     *\r\n     * @param location\r\n     * The location at which to return a block.\r\n     * @returns\r\n     * Block at the specified location, or 'undefined' if asking\r\n     * for a block at an unloaded chunk.\r\n     * @throws\r\n     * PositionInUnloadedChunkError: Exception thrown when trying\r\n     * to interact with a Block object that isn't in a loaded and\r\n     * ticking chunk anymore\r\n     *\r\n     * PositionOutOfWorldBoundariesError: Exception thrown when\r\n     * trying to interact with a position outside of dimension\r\n     * height range\r\n     *\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    getBlock(location: Vector3): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block found above a given block location\r\n     * based on the given options (by default will find the first\r\n     * solid block above).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to retrieve the block above from.\r\n     * @param options\r\n     * The options to decide if a block is a valid result.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockAbove(location: Vector3, options?: BlockRaycastOptions): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block found below a given block location\r\n     * based on the given options (by default will find the first\r\n     * solid block below).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to retrieve the block below from.\r\n     * @param options\r\n     * The options to decide if a block is a valid result.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockBelow(location: Vector3, options?: BlockRaycastOptions): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the first block that intersects with a vector emanating\r\n     * from a location.\r\n     *\r\n     * @param location\r\n     * Location from where to initiate the ray check.\r\n     * @param direction\r\n     * Vector direction to cast the ray.\r\n     * @param options\r\n     * Additional options for processing this raycast query.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBlockFromRay(location: Vector3, direction: Vector3, options?: BlockRaycastOptions): BlockRaycastHit | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all the blocks in a volume that satisfy the filter.\r\n     *\r\n     * @param volume\r\n     * Volume of blocks that will be checked.\r\n     * @param filter\r\n     * Block filter that will be checked against each block in the\r\n     * volume.\r\n     * @param allowUnloadedChunks\r\n     * If set to true will suppress the UnloadedChunksError if some\r\n     * or all of the block volume is outside of the loaded chunks.\r\n     * Will only check the block locations that are within the\r\n     * loaded chunks in the volume.\r\n     * Defaults to: false\r\n     * @returns\r\n     * Returns the ListBlockVolume that contains all the block\r\n     * locations that satisfied the block filter.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link UnloadedChunksError}\r\n     */\r\n    getBlocks(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): ListBlockVolume;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of entities based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * entities returned.\r\n     * @returns\r\n     * An entity array.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     * @example bounceSkeletons.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     type: \"skeleton\",\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.applyKnockback(0, 0, 0, 1);\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example testThatEntityIsFeatherItem.ts\r\n     * ```typescript\r\n     * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function testThatEntityIsFeatherItem(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const items = targetLocation.dimension.getEntities({\r\n     *     location: targetLocation,\r\n     *     maxDistance: 20,\r\n     *   });\r\n     *\r\n     *   for (const item of items) {\r\n     *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n     *\r\n     *     if (itemComp) {\r\n     *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n     *         log(\"Success! Found a feather\", 1);\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getEntities(options?: EntityQueryOptions): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of entities at a particular location.\r\n     *\r\n     * @param location\r\n     * The location at which to return entities.\r\n     * @returns\r\n     * Zero or more entities at the specified location.\r\n     */\r\n    getEntitiesAtBlockLocation(location: Vector3): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Gets entities that intersect with a specified vector\r\n     * emanating from a location.\r\n     *\r\n     * @param options\r\n     * Additional options for processing this raycast query.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    getEntitiesFromRay(location: Vector3, direction: Vector3, options?: EntityRaycastOptions): EntityRaycastHit[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of players based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * players returned.\r\n     * @returns\r\n     * A player array.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getPlayers(options?: EntityQueryOptions): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the highest block at the given XZ location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param locationXZ\r\n     * Location to retrieve the topmost block for.\r\n     * @param minHeight\r\n     * The Y height to begin the search from. Defaults to the\r\n     * maximum dimension height.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTopmostBlock(locationXZ: VectorXZ, minHeight?: number): Block | undefined;\r\n    /**\r\n     * @remarks\r\n     * Places the given feature into the dimension at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param featureName\r\n     * The string identifier for the feature.\r\n     * @param location\r\n     * Location to place the feature.\r\n     * @param shouldThrow\r\n     * Specifies if the function call will throw an error if the\r\n     * feature could not be placed.\r\n     * Note: The function call will always throw an error if using\r\n     * an unknown feature name or trying to place in a unloaded\r\n     * chunk.\r\n     * Defaults to: false\r\n     * @throws\r\n     * An error will be thrown if the feature name is invalid.\r\n     * An error will be thrown if the location is in an unloaded\r\n     * chunk.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     */\r\n    placeFeature(featureName: string, location: Vector3, shouldThrow?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Places the given feature rule into the dimension at the\r\n     * specified location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param featureRuleName\r\n     * The string identifier for the feature rule.\r\n     * @param location\r\n     * Location to place the feature rule.\r\n     * @throws\r\n     * An error will be thrown if the feature rule name is invalid.\r\n     * An error will be thrown if the location is in an unloaded\r\n     * chunk.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     */\r\n    placeFeatureRule(featureRuleName: string, location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Plays a sound for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param soundId\r\n     * Identifier of the sound.\r\n     * @param location\r\n     * Location of the sound.\r\n     * @param soundOptions\r\n     * Additional options for configuring additional effects for\r\n     * the sound.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     * An error will be thrown if pitch is less than 0.01.\r\n     * An error will be thrown if volume is less than 0.0.\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     */\r\n    playSound(soundId: string, location: Vector3, soundOptions?: WorldSoundOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Runs a command synchronously using the context of the\r\n     * broader dimenion.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param commandString\r\n     * Command to run. Note that command strings should not start\r\n     * with slash.\r\n     * @returns\r\n     * Returns a command result with a count of successful values\r\n     * from the command.\r\n     * @throws\r\n     * Throws an exception if the command fails due to incorrect\r\n     * parameters or command syntax, or in erroneous cases for the\r\n     * command. Note that in many cases, if the command does not\r\n     * operate (e.g., a target selector found no matches), this\r\n     * method will not throw an exception.\r\n     *\r\n     * {@link CommandError}\r\n     */\r\n    runCommand(commandString: string): CommandResult;\r\n    /**\r\n     * @remarks\r\n     * Sets a block in the world using a BlockPermutation.\r\n     * BlockPermutations are blocks with a particular state.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location within the dimension to set the block.\r\n     * @param permutation\r\n     * The block permutation to set.\r\n     * @throws\r\n     * Throws if the location is within an unloaded chunk or\r\n     * outside of the world bounds.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setBlockPermutation(location: Vector3, permutation: BlockPermutation): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a block at a given location within the dimension.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location within the dimension to set the block.\r\n     * @param blockType\r\n     * The type of block to set. This can be either a string\r\n     * identifier or a BlockType. The default block permutation is\r\n     * used.\r\n     * @throws\r\n     * Throws if the location is within an unloaded chunk or\r\n     * outside of the world bounds.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setBlockType(location: Vector3, blockType: BlockType | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current weather within the dimension\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param weatherType\r\n     * Set the type of weather to apply.\r\n     * @param duration\r\n     * Sets the duration of the weather (in ticks). If no duration\r\n     * is provided, the duration will be set to a random duration\r\n     * between 300 and 900 seconds.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setWeather(weatherType: WeatherType, duration?: number): void;\r\n    /**\r\n     * @remarks\r\n     * Creates a new entity (e.g., a mob) at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * Identifier of the type of entity to spawn. If no namespace\r\n     * is specified, 'minecraft:' is assumed.\r\n     * @param location\r\n     * The location at which to create the entity.\r\n     * @returns\r\n     * Newly created entity at the specified location.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link EntitySpawnError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnAdultHorse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from '@minecraft/server';\r\n     * import { Vector3Utils } from '@minecraft/math';\r\n     *\r\n     * function spawnAdultHorse(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *     log('Create a horse and triggering the ageable_grow_up event, ensuring the horse is created as an adult');\r\n     *     targetLocation.dimension.spawnEntity(\r\n     *         'minecraft:horse<minecraft:ageable_grow_up>',\r\n     *         Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n     *     );\r\n     * }\r\n     * ```\r\n     * @example quickFoxLazyDog.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes, MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function quickFoxLazyDog(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const fox = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Fox, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *\r\n     *   fox.addEffect(MinecraftEffectTypes.Speed, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   log(\"Created a fox.\");\r\n     *\r\n     *   const wolf = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Wolf, {\r\n     *     x: targetLocation.x + 4,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *   wolf.addEffect(MinecraftEffectTypes.Slowness, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   wolf.isSneaking = true;\r\n     *   log(\"Created a sneaking wolf.\", 1);\r\n     * }\r\n     * ```\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function triggerEvent(targetLocation: DimensionLocation) {\r\n     *   const creeper = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Creeper, targetLocation);\r\n     *\r\n     *   creeper.triggerEvent(\"minecraft:start_exploding_forced\");\r\n     * }\r\n     * ```\r\n     */\r\n    spawnEntity(identifier: EntityType | string, location: Vector3, options?: SpawnEntityOptions): Entity;\r\n    /**\r\n     * @remarks\r\n     * Creates a new item stack as an entity at the specified\r\n     * location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The location at which to create the item stack.\r\n     * @returns\r\n     * Newly created item stack entity at the specified location.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example itemStacks.ts\r\n     * ```typescript\r\n     * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n     *   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n     *   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n     *\r\n     *   const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n     *   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n     *   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n     *\r\n     *   log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n     *\r\n     *   log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n     *\r\n     *   log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n     *   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n     * }\r\n     * ```\r\n     * @example spawnFeatherItem.ts\r\n     * ```typescript\r\n     * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n     *\r\n     *   targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n     *   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n     * }\r\n     * ```\r\n     */\r\n    spawnItem(itemStack: ItemStack, location: Vector3): Entity;\r\n    /**\r\n     * @remarks\r\n     * Creates a new particle emitter at a specified location in\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectName\r\n     * Identifier of the particle to create.\r\n     * @param location\r\n     * The location at which to create the particle emitter.\r\n     * @param molangVariables\r\n     * A set of optional, customizable variables that can be\r\n     * adjusted for this particle.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnParticle.ts\r\n     * ```typescript\r\n     * import { MolangVariableMap, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function spawnParticle(targetLocation: DimensionLocation) {\r\n     *   for (let i = 0; i < 100; i++) {\r\n     *     const molang = new MolangVariableMap();\r\n     *\r\n     *     molang.setColorRGB(\"variable.color\", { red: Math.random(), green: Math.random(), blue: Math.random() });\r\n     *\r\n     *     const newLocation = {\r\n     *       x: targetLocation.x + Math.floor(Math.random() * 8) - 4,\r\n     *       y: targetLocation.y + Math.floor(Math.random() * 8) - 4,\r\n     *       z: targetLocation.z + Math.floor(Math.random() * 8) - 4,\r\n     *     };\r\n     *     targetLocation.dimension.spawnParticle(\"minecraft:colored_flame_particle\", newLocation, molang);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void;\r\n}\r",
      "jsdoc": "/**\r\n * A class that represents a particular dimension (e.g., The\r\n * End) within a world.\r\n */\r",
      "properties": [
        {
          "name": "heightRange",
          "type": "minecraftcommon.NumberRange",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "localizationKey",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "containsBlock",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "containsBlock(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): boolean"
        },
        {
          "name": "createExplosion",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "createExplosion(location: Vector3, radius: number, explosionOptions?: ExplosionOptions): boolean"
        },
        {
          "name": "getBlock",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "getBlock(location: Vector3): Block | undefined"
        },
        {
          "name": "getBlockAbove",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "getBlockAbove(location: Vector3, options?: BlockRaycastOptions): Block | undefined"
        },
        {
          "name": "getBlockBelow",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "getBlockBelow(location: Vector3, options?: BlockRaycastOptions): Block | undefined"
        },
        {
          "name": "getBlockFromRay",
          "parameters": [],
          "returnType": "BlockRaycastHit | undefined",
          "accessibility": "public",
          "signature": "getBlockFromRay(location: Vector3, direction: Vector3, options?: BlockRaycastOptions): BlockRaycastHit | undefined"
        },
        {
          "name": "getBlocks",
          "parameters": [],
          "returnType": "ListBlockVolume",
          "accessibility": "public",
          "signature": "getBlocks(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): ListBlockVolume"
        },
        {
          "name": "getEntities",
          "parameters": [],
          "returnType": "Entity[]",
          "accessibility": "public",
          "signature": "getEntities(options?: EntityQueryOptions): Entity[]"
        },
        {
          "name": "getEntitiesAtBlockLocation",
          "parameters": [],
          "returnType": "Entity[]",
          "accessibility": "public",
          "signature": "getEntitiesAtBlockLocation(location: Vector3): Entity[]"
        },
        {
          "name": "getEntitiesFromRay",
          "parameters": [],
          "returnType": "EntityRaycastHit[]",
          "accessibility": "public",
          "signature": "getEntitiesFromRay(location: Vector3, direction: Vector3, options?: EntityRaycastOptions): EntityRaycastHit[]"
        },
        {
          "name": "getPlayers",
          "parameters": [],
          "returnType": "Player[]",
          "accessibility": "public",
          "signature": "getPlayers(options?: EntityQueryOptions): Player[]"
        },
        {
          "name": "getTopmostBlock",
          "parameters": [],
          "returnType": "Block | undefined",
          "accessibility": "public",
          "signature": "getTopmostBlock(locationXZ: VectorXZ, minHeight?: number): Block | undefined"
        },
        {
          "name": "placeFeature",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "placeFeature(featureName: string, location: Vector3, shouldThrow?: boolean): boolean"
        },
        {
          "name": "placeFeatureRule",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "placeFeatureRule(featureRuleName: string, location: Vector3): boolean"
        },
        {
          "name": "playSound",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "playSound(soundId: string, location: Vector3, soundOptions?: WorldSoundOptions): void"
        },
        {
          "name": "runCommand",
          "parameters": [],
          "returnType": "CommandResult",
          "accessibility": "public",
          "signature": "runCommand(commandString: string): CommandResult"
        },
        {
          "name": "setBlockPermutation",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setBlockPermutation(location: Vector3, permutation: BlockPermutation): void"
        },
        {
          "name": "setBlockType",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setBlockType(location: Vector3, blockType: BlockType | string): void"
        },
        {
          "name": "setWeather",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setWeather(weatherType: WeatherType, duration?: number): void"
        },
        {
          "name": "spawnEntity",
          "parameters": [],
          "returnType": "Entity",
          "accessibility": "public",
          "signature": "spawnEntity(identifier: EntityType | string, location: Vector3, options?: SpawnEntityOptions): Entity"
        },
        {
          "name": "spawnItem",
          "parameters": [],
          "returnType": "Entity",
          "accessibility": "public",
          "signature": "spawnItem(itemStack: ItemStack, location: Vector3): Entity"
        },
        {
          "name": "spawnParticle",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dimension",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.DimensionType": {
      "id": "@minecraft/server.DimensionType",
      "name": "DimensionType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a type of dimension.\r /",
      "definition": "export class DimensionType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of the dimension type.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a type of dimension.\r\n */\r",
      "properties": [
        {
          "name": "typeId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dimensiontype",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.DimensionTypes": {
      "id": "@minecraft/server.DimensionTypes",
      "name": "DimensionTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Used for accessing all available dimension types.\r /",
      "definition": "export class DimensionTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves a dimension type using a string-based identifier.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    static get(dimensionTypeId: string): DimensionType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves an array of all dimension types.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    static getAll(): DimensionType[];\r\n}\r",
      "jsdoc": "/**\r\n * Used for accessing all available dimension types.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "DimensionType | undefined",
          "accessibility": "public",
          "signature": "get(dimensionTypeId: string): DimensionType | undefined"
        },
        {
          "name": "getAll",
          "parameters": [],
          "returnType": "DimensionType[]",
          "accessibility": "public",
          "signature": "getAll(): DimensionType[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dimensiontypes",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Effect": {
      "id": "@minecraft/server.Effect",
      "name": "Effect",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents an effect - like poison - that has been added to\r an Entity.\r /",
      "definition": "export class Effect {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Gets an amplifier that may have been applied to this effect.\r\n     * Sample values range typically from 0 to 4. Example: The\r\n     * effect 'Jump Boost II' will have an amplifier value of 1.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly amplifier: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the player-friendly name of this effect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Gets the entire specified duration, in ticks, of this\r\n     * effect. There are 20 ticks per second. Use {@link\r\n     * TicksPerSecond} constant to convert between ticks and\r\n     * seconds.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether an effect instance is available for use in\r\n     * this context.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets the type id of this effect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly typeId: string;\r\n}\r",
      "jsdoc": "/**\r\n * Represents an effect - like poison - that has been added to\r\n * an Entity.\r\n */\r",
      "properties": [
        {
          "name": "amplifier",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "displayName",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "duration",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "typeId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effect",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EffectAddAfterEvent": {
      "id": "@minecraft/server.EffectAddAfterEvent",
      "name": "EffectAddAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to an effect - like\r poison - being added to an entity.\r /",
      "definition": "export class EffectAddAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Additional properties and details of the effect.\r\n     *\r\n     */\r\n    readonly effect: Effect;\r\n    /**\r\n     * @remarks\r\n     * Entity that the effect is being added to.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to an effect - like\r\n * poison - being added to an entity.\r\n */\r",
      "properties": [
        {
          "name": "effect",
          "type": "Effect",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effectaddafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EffectAddAfterEventSignal": {
      "id": "@minecraft/server.EffectAddAfterEventSignal",
      "name": "EffectAddAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an effect is\r added to an entity.\r /",
      "definition": "export class EffectAddAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EffectAddAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EffectAddAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EffectAddAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when an effect is\r\n * added to an entity.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effectaddaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EffectAddBeforeEvent": {
      "id": "@minecraft/server.EffectAddBeforeEvent",
      "name": "EffectAddBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to an effect - like\r poison - being added to an entity.\r /",
      "definition": "export class EffectAddBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * When set to true will cancel the event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Effect duration.\r\n     *\r\n     */\r\n    duration: number;\r\n    /**\r\n     * @remarks\r\n     * The type of the effect that is being added.\r\n     *\r\n     */\r\n    readonly effectType: string;\r\n    /**\r\n     * @remarks\r\n     * Entity that the effect is being added to.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to an effect - like\r\n * poison - being added to an entity.\r\n */\r",
      "properties": [
        {
          "name": "effectType",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effectaddbeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EffectAddBeforeEventSignal": {
      "id": "@minecraft/server.EffectAddBeforeEventSignal",
      "name": "EffectAddBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an effect is\r added to an entity.\r /",
      "definition": "export class EffectAddBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: EffectAddBeforeEvent) => void): (arg0: EffectAddBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an effect is added\r\n     * to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EffectAddBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when an effect is\r\n * added to an entity.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effectaddbeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EffectType": {
      "id": "@minecraft/server.EffectType",
      "name": "EffectType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a type of effect - like poison - that can be\r applied to an entity.\r /",
      "definition": "export class EffectType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier name of this effect type.\r\n     *\r\n     * @returns\r\n     * Identifier of the effect type.\r\n     */\r\n    getName(): string;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a type of effect - like poison - that can be\r\n * applied to an entity.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "getName",
          "parameters": [],
          "returnType": "string",
          "accessibility": "public",
          "signature": "getName(): string"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effecttype",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EffectTypes": {
      "id": "@minecraft/server.EffectTypes",
      "name": "EffectTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a type of effect - like poison - that can be\r applied to an entity.\r /",
      "definition": "export class EffectTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Effect type for the given identifier.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The identifier for the effect.\r\n     * @returns\r\n     * Effect type for the given identifier or undefined if the\r\n     * effect does not exist.\r\n     */\r\n    static get(identifier: string): EffectType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all effects.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * A list of all effects.\r\n     */\r\n    static getAll(): EffectType[];\r\n}\r",
      "jsdoc": "/**\r\n * Represents a type of effect - like poison - that can be\r\n * applied to an entity.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "EffectType | undefined",
          "accessibility": "public",
          "signature": "get(identifier: string): EffectType | undefined"
        },
        {
          "name": "getAll",
          "parameters": [],
          "returnType": "EffectType[]",
          "accessibility": "public",
          "signature": "getAll(): EffectType[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effecttypes",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EnchantmentType": {
      "id": "@minecraft/server.EnchantmentType",
      "name": "EnchantmentType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information on a type of enchantment.\r /",
      "definition": "export class EnchantmentType {\n    /**\r\n     * @remarks\r\n     * The name of the enchantment type.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * The maximum level this type of enchantment can have.\r\n     *\r\n     */\r\n    readonly maxLevel: number;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    constructor(enchantmentType: string);\r\n}\r",
      "jsdoc": "/**\r\n * Contains information on a type of enchantment.\r\n */\r",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "maxLevel",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmenttype",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EnchantmentTypes": {
      "id": "@minecraft/server.EnchantmentTypes",
      "name": "EnchantmentTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a catalog of Minecraft Enchantment Types that are\r available in this world.\r /",
      "definition": "export class EnchantmentTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves an enchantment with the specified identifier.\r\n     *\r\n     * @param enchantmentId\r\n     * Identifier of the enchantment.  For example,\r\n     * \"minecraft:flame\".\r\n     * @returns\r\n     * If available, returns an EnchantmentType object that\r\n     * represents the specified enchantment.\r\n     */\r\n    static get(enchantmentId: string): EnchantmentType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of all available enchantment types.\r\n     *\r\n     */\r\n    static getAll(): EnchantmentType[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains a catalog of Minecraft Enchantment Types that are\r\n * available in this world.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "EnchantmentType | undefined",
          "accessibility": "public",
          "signature": "get(enchantmentId: string): EnchantmentType | undefined"
        },
        {
          "name": "getAll",
          "parameters": [],
          "returnType": "EnchantmentType[]",
          "accessibility": "public",
          "signature": "getAll(): EnchantmentType[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmenttypes",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Entity": {
      "id": "@minecraft/server.Entity",
      "name": "Entity",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the state of an entity (a mob, the player, or\r other moving objects like minecarts) in the world.\r /",
      "definition": "export class Entity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension that the entity is currently within.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Unique identifier of the entity. This identifier is intended\r\n     * to be consistent across loads of a world instance. No\r\n     * meaning should be inferred from the value and structure of\r\n     * this unique identifier - do not parse or interpret it. This\r\n     * property is accessible even if {@link Entity.isValid} is\r\n     * false.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is touching a climbable block. For\r\n     * example, a player next to a ladder or a spider next to a\r\n     * stone wall.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isClimbing: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity has a fall distance greater than 0, or\r\n     * greater than 1 while gliding.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isFalling: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether any part of the entity is inside a water block.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isInWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is on top of a solid block. This property\r\n     * may behave in unexpected ways. This property will always be\r\n     * true when an Entity is first spawned, and if the Entity has\r\n     * no gravity this property may be incorrect.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isOnGround: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity is currently sleeping.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSleeping: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is sneaking - that is, moving more slowly\r\n     * and more quietly.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    isSneaking: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is sprinting. For example, a player using\r\n     * the sprint action, an ocelot running away or a pig boosting\r\n     * with Carrot on a Stick.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSprinting: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the entity is in the swimming state. For example, a\r\n     * player using the swim action or a fish in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly isSwimming: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the entity can be manipulated by script. A\r\n     * Player is considered valid when it's EntityLifetimeState is\r\n     * set to Loaded.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this entity's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Current location of the entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Given name of the entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    nameTag: string;\r\n    /**\r\n     * @remarks\r\n     * Returns a scoreboard identity that represents this entity.\r\n     * Will remain valid when the entity is killed.\r\n     *\r\n     */\r\n    readonly scoreboardIdentity?: ScoreboardIdentity;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of the entity - for example,\r\n     * 'minecraft:skeleton'. This property is accessible even if\r\n     * {@link Entity.isValid} is false.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Adds or updates an effect, like poison, to the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectType\r\n     * Type of effect to add to the entity.\r\n     * @param duration\r\n     * Amount of time, in ticks, for the effect to apply. There are\r\n     * 20 ticks per second. Use {@link TicksPerSecond} constant to\r\n     * convert between ticks and seconds. The value must be within\r\n     * the range [0, 20000000].\r\n     * @param options\r\n     * Additional options for the effect.\r\n     * @returns\r\n     * Returns nothing if the effect was added or updated\r\n     * successfully. This can throw an error if the duration or\r\n     * amplifier are outside of the valid ranges, or if the effect\r\n     * does not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example spawnPoisonedVillager.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function spawnPoisonedVillager(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const villagerType = \"minecraft:villager_v2<minecraft:ageable_grow_up>\";\r\n     *   const villager = targetLocation.dimension.spawnEntity(villagerType, targetLocation);\r\n     *   const duration = 20;\r\n     *\r\n     *   villager.addEffect(MinecraftEffectTypes.Poison, duration, { amplifier: 1 });\r\n     * }\r\n     * ```\r\n     * @example quickFoxLazyDog.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes, MinecraftEffectTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function quickFoxLazyDog(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const fox = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Fox, {\r\n     *     x: targetLocation.x + 1,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *\r\n     *   fox.addEffect(MinecraftEffectTypes.Speed, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   log(\"Created a fox.\");\r\n     *\r\n     *   const wolf = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Wolf, {\r\n     *     x: targetLocation.x + 4,\r\n     *     y: targetLocation.y + 2,\r\n     *     z: targetLocation.z + 3,\r\n     *   });\r\n     *   wolf.addEffect(MinecraftEffectTypes.Slowness, 10, {\r\n     *     amplifier: 2,\r\n     *   });\r\n     *   wolf.isSneaking = true;\r\n     *   log(\"Created a sneaking wolf.\", 1);\r\n     * }\r\n     * ```\r\n     */\r\n    addEffect(effectType: EffectType | string, duration: number, options?: EntityEffectOptions): Effect | undefined;\r\n    /**\r\n     * @remarks\r\n     * Adds a specified tag to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param tag\r\n     * Content of the tag to add. The tag must be less than 256\r\n     * characters.\r\n     * @returns\r\n     * Returns true if the tag was added successfully. This can\r\n     * fail if the tag already exists on the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    addTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Applies a set of damage to an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount of damage to apply.\r\n     * @param options\r\n     * Additional options about the source of damage, which may add\r\n     * additional effects or spur additional behaviors on this\r\n     * entity.\r\n     * @returns\r\n     * Whether the entity takes any damage. This can return false\r\n     * if the entity is invulnerable or if the damage applied is\r\n     * less than or equal to 0.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example applyDamageThenHeal.ts\r\n     * ```typescript\r\n     * import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyDamageThenHeal(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n     *     log(\"Skeleton health before heal: \" + health?.currentValue);\r\n     *     health?.resetToMaxValue();\r\n     *     log(\"Skeleton health after heal: \" + health?.currentValue);\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    applyDamage(amount: number, options?: EntityApplyDamageByProjectileOptions | EntityApplyDamageOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Applies impulse vector to the current velocity of the\r\n     * entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param vector\r\n     * Impulse vector.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example applyImpulse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyImpulse(targetLocation: DimensionLocation) {\r\n     *   const zombie = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Zombie, targetLocation);\r\n     *\r\n     *   zombie.clearVelocity();\r\n     *\r\n     *   // throw the zombie up in the air\r\n     *   zombie.applyImpulse({ x: 0, y: 0.5, z: 0 });\r\n     * }\r\n     * ```\r\n     */\r\n    applyImpulse(vector: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Applies impulse vector to the current velocity of the\r\n     * entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param verticalStrength\r\n     * Knockback strength for the vertical vector.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example bounceSkeletons.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     type: \"skeleton\",\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.applyKnockback(0, 0, 0, 1);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    applyKnockback(horizontalForce: VectorXZ, verticalStrength: number): void;\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current velocity of the Entity to zero.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example applyImpulse.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function applyImpulse(targetLocation: DimensionLocation) {\r\n     *   const zombie = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Zombie, targetLocation);\r\n     *\r\n     *   zombie.clearVelocity();\r\n     *\r\n     *   // throw the zombie up in the air\r\n     *   zombie.applyImpulse({ x: 0, y: 0.5, z: 0 });\r\n     * }\r\n     * ```\r\n     */\r\n    clearVelocity(): void;\r\n    /**\r\n     * @remarks\r\n     * Extinguishes the fire if the entity is on fire. Note that\r\n     * you can call getComponent('minecraft:onfire') and, if\r\n     * present, the entity is on fire.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param useEffects\r\n     * Whether to show any visual effects connected to the\r\n     * extinguishing.\r\n     * Defaults to: true\r\n     * @returns\r\n     * Returns whether the entity was on fire.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example setOnFire.ts\r\n     * ```typescript\r\n     * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.setOnFire(20, true);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n     *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n     *\r\n     *     skelly.extinguishFire(true);\r\n     *     log(\"Never mind. Fire extinguished.\");\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    extinguishFire(useEffects?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the first intersecting block from the direction that\r\n     * this entity is looking at.\r\n     *\r\n     * @param options\r\n     * Additional configuration options for the ray cast.\r\n     * @returns\r\n     * Returns the first intersecting block from the direction that\r\n     * this entity is looking at.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getBlockFromViewDirection(options?: BlockRaycastOptions): BlockRaycastHit | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for an entity.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:health').\r\n     * If no namespace prefix is specified, 'minecraft:' is\r\n     * assumed. Available component IDs can be found as part of the\r\n     * {@link EntityComponentTypes} enum.\r\n     * @returns\r\n     * Returns the component if it exists on the entity, otherwise\r\n     * undefined.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getComponent<T extends string>(componentId: T): EntityComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all components that are both present on this entity\r\n     * and supported by the API.\r\n     *\r\n     * @returns\r\n     * Returns all components that are both present on this entity\r\n     * and supported by the API.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getComponents(): EntityComponent[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this entity.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effect for the specified EffectType on the\r\n     * entity, undefined if the effect is not present, or throws an\r\n     * error if the effect does not exist.\r\n     *\r\n     * @param effectType\r\n     * The effect identifier.\r\n     * @returns\r\n     * Effect object for the specified effect, undefined if the\r\n     * effect is not present, or throws an error if the effect does\r\n     * not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getEffect(effectType: EffectType | string): Effect | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of effects applied to this entity.\r\n     *\r\n     * @returns\r\n     * List of effects.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getEffects(): Effect[];\r\n    /**\r\n     * @remarks\r\n     * Gets the entities that this entity is looking at by\r\n     * performing a ray cast from the view of this entity.\r\n     *\r\n     * @param options\r\n     * Additional configuration options for the ray cast.\r\n     * @returns\r\n     * Returns a set of entities from the direction that this\r\n     * entity is looking at.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    getEntitiesFromViewDirection(options?: EntityRaycastOptions): EntityRaycastHit[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current location of the head component of this\r\n     * entity.\r\n     *\r\n     * @returns\r\n     * Returns the current location of the head component of this\r\n     * entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getHeadLocation(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Gets an entity Property value. If the property was set using\r\n     * the setProperty function within the same tick, the updated\r\n     * value will not be reflected until the subsequent tick.\r\n     *\r\n     * @param identifier\r\n     * The entity Property identifier.\r\n     * @returns\r\n     * Returns the current property value. For enum properties, a\r\n     * string is returned. For float and int properties, a number\r\n     * is returned. For undefined properties, undefined is\r\n     * returned.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getProperty(identifier: string): boolean | number | string | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the current rotation component of this entity.\r\n     *\r\n     * @returns\r\n     * Returns a Vec2 containing the rotation of this entity (in\r\n     * degrees).\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getRotation(): Vector2;\r\n    /**\r\n     * @remarks\r\n     * Returns all tags associated with the entity.\r\n     *\r\n     * @returns\r\n     * An array containing all tags as strings.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current velocity vector of the entity.\r\n     *\r\n     * @returns\r\n     * Returns the current velocity vector of the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example getFireworkVelocity.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function getFireworkVelocity(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const fireworkRocket = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.FireworksRocket, targetLocation);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const velocity = fireworkRocket.getVelocity();\r\n     *\r\n     *     log(\"Velocity of firework is: (x: \" + velocity.x + \", y:\" + velocity.y + \", z:\" + velocity.z + \")\");\r\n     *   }, 5);\r\n     * }\r\n     * ```\r\n     */\r\n    getVelocity(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns the current view direction of the entity.\r\n     *\r\n     * @returns\r\n     * Returns the current view direction of the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getViewDirection(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the specified component is present on this\r\n     * entity.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:rideable')\r\n     * to retrieve. If no namespace prefix is specified,\r\n     * 'minecraft:' is assumed.\r\n     * @returns\r\n     * Returns true if the specified component is present on this\r\n     * entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hasComponent(componentId: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether an entity has a particular tag.\r\n     *\r\n     * @param tag\r\n     * Identifier of the tag to test for.\r\n     * @returns\r\n     * Returns whether an entity has a particular tag.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Kills this entity. The entity will drop loot as normal.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * Returns true if entity can be killed (even if it is already\r\n     * dead), otherwise it returns false.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example tagsQuery.ts\r\n     * ```typescript\r\n     * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function tagsQuery(targetLocation: DimensionLocation) {\r\n     *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n     *\r\n     *   // create some sample mob data\r\n     *   for (let i = 0; i < 10; i++) {\r\n     *     const mobTypeId = mobs[i % mobs.length];\r\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n     *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n     *   }\r\n     *\r\n     *   const eqo: EntityQueryOptions = {\r\n     *     tags: [\"mobparty.skeleton\"],\r\n     *   };\r\n     *\r\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n     *     entity.kill();\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    kill(): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets the rotation of the entity to face a target location.\r\n     * Both pitch and yaw will be set, if applicable, such as for\r\n     * mobs where the pitch controls the head tilt and the yaw\r\n     * controls the body rotation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetLocation\r\n     * The target location that this entity should face/look\r\n     * towards.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    lookAt(targetLocation: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Matches the entity against the passed in options. Uses the\r\n     * location of the entity for matching if the location is not\r\n     * specified in the passed in EntityQueryOptions.\r\n     *\r\n     * @param options\r\n     * The query to perform the match against.\r\n     * @returns\r\n     * Returns true if the entity matches the criteria in the\r\n     * passed in EntityQueryOptions, otherwise it returns false.\r\n     * @throws\r\n     * Throws if the query options are misconfigured.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    matches(options: EntityQueryOptions): boolean;\r\n    /**\r\n     * @remarks\r\n     * Cause the entity to play the given animation.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param animationName\r\n     * The animation identifier. e.g. animation.creeper.swelling\r\n     * @param options\r\n     * Additional options to control the playback and transitions\r\n     * of the animation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    playAnimation(animationName: string, options?: PlayAnimationOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Immediately removes the entity from the world. The removed\r\n     * entity will not perform a death animation or drop loot upon\r\n     * removal.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    remove(): void;\r\n    /**\r\n     * @remarks\r\n     * Removes the specified EffectType on the entity, or returns\r\n     * false if the effect is not present.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectType\r\n     * The effect identifier.\r\n     * @returns\r\n     * Returns true if the effect has been removed. Returns false\r\n     * if the effect is not found or does not exist.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    removeEffect(effectType: EffectType | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes a specified tag from an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param tag\r\n     * Content of the tag to remove.\r\n     * @returns\r\n     * Returns whether the tag existed on the entity.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    removeTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Resets an Entity Property back to its default value, as\r\n     * specified in the Entity's definition. This property change\r\n     * is not applied until the next tick.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @returns\r\n     * Returns the default property value. For enum properties, a\r\n     * string is returned. For float and int properties, a number\r\n     * is returned. For undefined properties, undefined is\r\n     * returned.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    resetProperty(identifier: string): boolean | number | string;\r\n    /**\r\n     * @remarks\r\n     * Runs a synchronous command on the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param commandString\r\n     * The command string. Note: This should not include a leading\r\n     * forward slash.\r\n     * @returns\r\n     * A command result containing whether the command was\r\n     * successful.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    runCommand(commandString: string): CommandResult;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets an entity on fire (if it is not in water or rain). Note\r\n     * that you can call getComponent('minecraft:onfire') and, if\r\n     * present, the entity is on fire.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param seconds\r\n     * Length of time to set the entity on fire.\r\n     * @param useEffects\r\n     * Whether side-effects should be applied (e.g. thawing freeze)\r\n     * and other conditions such as rain or fire protection should\r\n     * be taken into consideration.\r\n     * Defaults to: true\r\n     * @returns\r\n     * Whether the entity was set on fire. This can fail if seconds\r\n     * is less than or equal to zero, the entity is wet or the\r\n     * entity is immune to fire.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example setOnFire.ts\r\n     * ```typescript\r\n     * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n     *\r\n     *   skelly.setOnFire(20, true);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n     *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n     *\r\n     *     skelly.extinguishFire(true);\r\n     *     log(\"Never mind. Fire extinguished.\");\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    setOnFire(seconds: number, useEffects?: boolean): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets an Entity Property to the provided value. This property\r\n     * change is not applied until the next tick.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @param value\r\n     * The property value. The provided type must be compatible\r\n     * with the type specified in the entity's definition.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     * Throws if the provided value is outside the expected range\r\n     * (int, float properties).\r\n     * Throws if the provided string value does not match the set\r\n     * of accepted enum values (enum properties\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setProperty(identifier: string, value: boolean | number | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the main rotation of the entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rotation\r\n     * The x and y rotation of the entity (in degrees). For most\r\n     * mobs, the x rotation controls the head tilt and the y\r\n     * rotation controls the body rotation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setRotation(rotation: Vector2): void;\r\n    /**\r\n     * @remarks\r\n     * Teleports the selected entity to a new location\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * New location for the entity.\r\n     * @param teleportOptions\r\n     * Options regarding the teleport operation.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     * @example teleport.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function teleport(targetLocation: DimensionLocation) {\r\n     *   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     cow.teleport(\r\n     *       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r\n     *       {\r\n     *         facingLocation: targetLocation,\r\n     *       }\r\n     *     );\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     * @example teleportMovement.ts\r\n     * ```typescript\r\n     * import { system, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function teleportMovement(targetLocation: DimensionLocation) {\r\n     *   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r\n     *\r\n     *   let inc = 1;\r\n     *   const runId = system.runInterval(() => {\r\n     *     pig.teleport(\r\n     *       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r\n     *       {\r\n     *         facingLocation: targetLocation,\r\n     *       }\r\n     *     );\r\n     *\r\n     *     if (inc > 100) {\r\n     *       system.clearRun(runId);\r\n     *     }\r\n     *     inc++;\r\n     *   }, 4);\r\n     * }\r\n     * ```\r\n     */\r\n    teleport(location: Vector3, teleportOptions?: TeleportOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Triggers an entity type event. For every entity, a number of\r\n     * events are defined in an entities' definition for key entity\r\n     * behaviors; for example, creepers have a\r\n     * minecraft:start_exploding type event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param eventName\r\n     * Name of the entity type event to trigger. If a namespace is\r\n     * not specified, minecraft: is assumed.\r\n     * @throws\r\n     * If the event is not defined in the definition of the entity,\r\n     * an error will be thrown.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * // A function that spawns a creeper and triggers it to explode immediately\r\n     * import { DimensionLocation } from '@minecraft/server';\r\n     * import { MinecraftEntityTypes } from '@minecraft/vanilla-data';\r\n     *\r\n     * function spawnExplodingCreeper(location: DimensionLocation) {\r\n     *     const creeper = location.dimension.spawnEntity(MinecraftEntityTypes.Creeper, location);\r\n     *\r\n     *     creeper.triggerEvent('minecraft:start_exploding_forced');\r\n     * }\r\n     * ```\r\n     * @example triggerEvent.ts\r\n     * ```typescript\r\n     * import { DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function triggerEvent(targetLocation: DimensionLocation) {\r\n     *   const creeper = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Creeper, targetLocation);\r\n     *\r\n     *   creeper.triggerEvent(\"minecraft:start_exploding_forced\");\r\n     * }\r\n     * ```\r\n     */\r\n    triggerEvent(eventName: string): void;\r\n    /**\r\n     * @remarks\r\n     * Attempts to try a teleport, but may not complete the\r\n     * teleport operation (for example, if there are blocks at the\r\n     * destination.)\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * Location to teleport the entity to.\r\n     * @param teleportOptions\r\n     * Options regarding the teleport operation.\r\n     * @returns\r\n     * Returns whether the teleport succeeded. This can fail if the\r\n     * destination chunk is unloaded or if the teleport would\r\n     * result in intersecting with blocks.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    tryTeleport(location: Vector3, teleportOptions?: TeleportOptions): boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Represents the state of an entity (a mob, the player, or\r\n * other moving objects like minecarts) in the world.\r\n */\r",
      "properties": [
        {
          "name": "dimension",
          "type": "Dimension",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isClimbing",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isFalling",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isInWater",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isOnGround",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isSleeping",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isSprinting",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isSwimming",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "localizationKey",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "typeId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "addEffect",
          "parameters": [],
          "returnType": "Effect | undefined",
          "accessibility": "public",
          "signature": "addEffect(effectType: EffectType | string, duration: number, options?: EntityEffectOptions): Effect | undefined"
        },
        {
          "name": "addTag",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "addTag(tag: string): boolean"
        },
        {
          "name": "applyDamage",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "applyDamage(amount: number, options?: EntityApplyDamageByProjectileOptions | EntityApplyDamageOptions): boolean"
        },
        {
          "name": "applyImpulse",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "applyImpulse(vector: Vector3): void"
        },
        {
          "name": "applyKnockback",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "applyKnockback(horizontalForce: VectorXZ, verticalStrength: number): void"
        },
        {
          "name": "clearDynamicProperties",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearDynamicProperties(): void"
        },
        {
          "name": "clearVelocity",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearVelocity(): void"
        },
        {
          "name": "extinguishFire",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "extinguishFire(useEffects?: boolean): boolean"
        },
        {
          "name": "getBlockFromViewDirection",
          "parameters": [],
          "returnType": "BlockRaycastHit | undefined",
          "accessibility": "public",
          "signature": "getBlockFromViewDirection(options?: BlockRaycastOptions): BlockRaycastHit | undefined"
        },
        {
          "name": "getComponents",
          "parameters": [],
          "returnType": "EntityComponent[]",
          "accessibility": "public",
          "signature": "getComponents(): EntityComponent[]"
        },
        {
          "name": "getDynamicProperty",
          "parameters": [],
          "returnType": "boolean | number | string | Vector3 | undefined",
          "accessibility": "public",
          "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
        },
        {
          "name": "getDynamicPropertyIds",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getDynamicPropertyIds(): string[]"
        },
        {
          "name": "getDynamicPropertyTotalByteCount",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getDynamicPropertyTotalByteCount(): number"
        },
        {
          "name": "getEffect",
          "parameters": [],
          "returnType": "Effect | undefined",
          "accessibility": "public",
          "signature": "getEffect(effectType: EffectType | string): Effect | undefined"
        },
        {
          "name": "getEffects",
          "parameters": [],
          "returnType": "Effect[]",
          "accessibility": "public",
          "signature": "getEffects(): Effect[]"
        },
        {
          "name": "getEntitiesFromViewDirection",
          "parameters": [],
          "returnType": "EntityRaycastHit[]",
          "accessibility": "public",
          "signature": "getEntitiesFromViewDirection(options?: EntityRaycastOptions): EntityRaycastHit[]"
        },
        {
          "name": "getHeadLocation",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "getHeadLocation(): Vector3"
        },
        {
          "name": "getProperty",
          "parameters": [],
          "returnType": "boolean | number | string | undefined",
          "accessibility": "public",
          "signature": "getProperty(identifier: string): boolean | number | string | undefined"
        },
        {
          "name": "getRotation",
          "parameters": [],
          "returnType": "Vector2",
          "accessibility": "public",
          "signature": "getRotation(): Vector2"
        },
        {
          "name": "getTags",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getTags(): string[]"
        },
        {
          "name": "getVelocity",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "getVelocity(): Vector3"
        },
        {
          "name": "getViewDirection",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "getViewDirection(): Vector3"
        },
        {
          "name": "hasComponent",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasComponent(componentId: string): boolean"
        },
        {
          "name": "hasTag",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasTag(tag: string): boolean"
        },
        {
          "name": "kill",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "kill(): boolean"
        },
        {
          "name": "lookAt",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "lookAt(targetLocation: Vector3): void"
        },
        {
          "name": "matches",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "matches(options: EntityQueryOptions): boolean"
        },
        {
          "name": "playAnimation",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "playAnimation(animationName: string, options?: PlayAnimationOptions): void"
        },
        {
          "name": "remove",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "remove(): void"
        },
        {
          "name": "removeEffect",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "removeEffect(effectType: EffectType | string): boolean"
        },
        {
          "name": "removeTag",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "removeTag(tag: string): boolean"
        },
        {
          "name": "resetProperty",
          "parameters": [],
          "returnType": "boolean | number | string",
          "accessibility": "public",
          "signature": "resetProperty(identifier: string): boolean | number | string"
        },
        {
          "name": "runCommand",
          "parameters": [],
          "returnType": "CommandResult",
          "accessibility": "public",
          "signature": "runCommand(commandString: string): CommandResult"
        },
        {
          "name": "setDynamicProperty",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
        },
        {
          "name": "setOnFire",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "setOnFire(seconds: number, useEffects?: boolean): boolean"
        },
        {
          "name": "setProperty",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setProperty(identifier: string, value: boolean | number | string): void"
        },
        {
          "name": "setRotation",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setRotation(rotation: Vector2): void"
        },
        {
          "name": "teleport",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "teleport(location: Vector3, teleportOptions?: TeleportOptions): void"
        },
        {
          "name": "triggerEvent",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "triggerEvent(eventName: string): void"
        },
        {
          "name": "tryTeleport",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "tryTeleport(location: Vector3, teleportOptions?: TeleportOptions): boolean"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entity",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityAddRiderComponent": {
      "id": "@minecraft/server.EntityAddRiderComponent",
      "name": "EntityAddRiderComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component makes the entity spawn with a\r rider of the specified entityType.\r /",
      "definition": "export class EntityAddRiderComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The type of entity that is added as a rider for this entity\r\n     * when spawned under certain conditions.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly entityType: string;\r\n    /**\r\n     * @remarks\r\n     * Optional spawn event to trigger on the rider when that rider\r\n     * is spawned for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly spawnEvent: string;\r\n    static readonly componentId = 'minecraft:addrider';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component makes the entity spawn with a\r\n * rider of the specified entityType.\r\n */\r",
      "properties": [
        {
          "name": "entityType",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "spawnEvent",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "addrider'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityaddridercomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityAgeableComponent": {
      "id": "@minecraft/server.EntityAgeableComponent",
      "name": "EntityAgeableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Adds a timer for the entity to grow up. It can be\r accelerated by giving the entity the items it likes as\r defined by feedItems.\r /",
      "definition": "export class EntityAgeableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Amount of time before the entity grows up, -1 for always a\r\n     * baby.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Event that runs when this entity grows up.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly growUp: Trigger;\r\n    /**\r\n     * @remarks\r\n     * The feed item used will transform into this item upon\r\n     * successful interaction.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly transformToItem: string;\r\n    static readonly componentId = 'minecraft:ageable';\r\n    /**\r\n     * @remarks\r\n     * List of items that the entity drops when it grows up.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDropItems(): string[];\r\n    /**\r\n     * @remarks\r\n     * List of items that can be fed to the entity. Includes 'item'\r\n     * for the item name and 'growth' to define how much time it\r\n     * grows up by.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFeedItems(): EntityDefinitionFeedItem[];\r\n}\r",
      "jsdoc": "/**\r\n * Adds a timer for the entity to grow up. It can be\r\n * accelerated by giving the entity the items it likes as\r\n * defined by feedItems.\r\n */\r",
      "properties": [
        {
          "name": "duration",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "growUp",
          "type": "Trigger",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "transformToItem",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "ageable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getDropItems",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getDropItems(): string[]"
        },
        {
          "name": "getFeedItems",
          "parameters": [],
          "returnType": "EntityDefinitionFeedItem[]",
          "accessibility": "public",
          "signature": "getFeedItems(): EntityDefinitionFeedItem[]"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityageablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityAttributeComponent": {
      "id": "@minecraft/server.EntityAttributeComponent",
      "name": "EntityAttributeComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This is a base abstract class for any entity component that\r centers around a number and can have a minimum, maximum, and\r default defined value.\r /",
      "definition": "export class EntityAttributeComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of this attribute for this instance.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly currentValue: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the default defined value for this attribute.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly defaultValue: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effective max of this attribute given any other\r\n     * ambient components or factors.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly effectiveMax: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the effective min of this attribute given any other\r\n     * ambient components or factors.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly effectiveMin: number;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the defined\r\n     * default value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToDefaultValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the maximum\r\n     * defined value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToMaxValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the current value of this attribute to the minimum\r\n     * defined value.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetToMinValue(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current value of this attribute.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * If the value is out of bounds, an ArgumentOutOfBounds Error\r\n     * is thrown.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setCurrentValue(value: number): boolean;\r\n}\r",
      "jsdoc": "/**\r\n * This is a base abstract class for any entity component that\r\n * centers around a number and can have a minimum, maximum, and\r\n * default defined value.\r\n */\r",
      "properties": [
        {
          "name": "currentValue",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "defaultValue",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "effectiveMax",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "effectiveMin",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "resetToDefaultValue",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "resetToDefaultValue(): void"
        },
        {
          "name": "resetToMaxValue",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "resetToMaxValue(): void"
        },
        {
          "name": "resetToMinValue",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "resetToMinValue(): void"
        },
        {
          "name": "setCurrentValue",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "setCurrentValue(value: number): boolean"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityattributecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityBaseMovementComponent": {
      "id": "@minecraft/server.EntityBaseMovementComponent",
      "name": "EntityBaseMovementComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base class for a family of entity movement events.\r /",
      "definition": "export class EntityBaseMovementComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Maximum turn rate for this movement modality of the mob.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxTurn: number;\r\n}\r",
      "jsdoc": "/**\r\n * Base class for a family of entity movement events.\r\n */\r",
      "properties": [
        {
          "name": "maxTurn",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitybasemovementcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityBreathableComponent": {
      "id": "@minecraft/server.EntityBreathableComponent",
      "name": "EntityBreathableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines what blocks this entity can breathe in and gives\r them the ability to suffocate.\r /",
      "definition": "export class EntityBreathableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in air.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in lava.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in solid blocks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesSolids: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity can breathe in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly breathesWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will have visible bubbles while in\r\n     * water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly generatesBubbles: boolean;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds to recover breath to maximum.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly inhaleTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds between suffocation damage.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly suffocateTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds the entity can hold its breath.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly totalSupply: number;\r\n    static readonly componentId = 'minecraft:breathable';\r\n    /**\r\n     * @remarks\r\n     * List of blocks this entity can breathe in, in addition to\r\n     * the separate properties for classes of blocks.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getBreatheBlocks(): BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * List of blocks this entity can't breathe in.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getNonBreatheBlocks(): BlockPermutation[];\r\n}\r",
      "jsdoc": "/**\r\n * Defines what blocks this entity can breathe in and gives\r\n * them the ability to suffocate.\r\n */\r",
      "properties": [
        {
          "name": "breathesAir",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "breathesLava",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "breathesSolids",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "breathesWater",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "generatesBubbles",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "inhaleTime",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "suffocateTime",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "totalSupply",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "breathable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getBreatheBlocks",
          "parameters": [],
          "returnType": "BlockPermutation[]",
          "accessibility": "public",
          "signature": "getBreatheBlocks(): BlockPermutation[]"
        },
        {
          "name": "getNonBreatheBlocks",
          "parameters": [],
          "returnType": "BlockPermutation[]",
          "accessibility": "public",
          "signature": "getNonBreatheBlocks(): BlockPermutation[]"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitybreathablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityCanClimbComponent": {
      "id": "@minecraft/server.EntityCanClimbComponent",
      "name": "EntityCanClimbComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that the entity can\r climb up ladders.\r /",
      "definition": "export class EntityCanClimbComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_climb';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * climb up ladders.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "can_climb'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycanclimbcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityCanFlyComponent": {
      "id": "@minecraft/server.EntityCanFlyComponent",
      "name": "EntityCanFlyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that the entity can\r fly, and the pathfinder won't be restricted to paths where a\r solid block is required underneath it.\r /",
      "definition": "export class EntityCanFlyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_fly';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * fly, and the pathfinder won't be restricted to paths where a\r\n * solid block is required underneath it.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "can_fly'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycanflycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityCanPowerJumpComponent": {
      "id": "@minecraft/server.EntityCanPowerJumpComponent",
      "name": "EntityCanPowerJumpComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that the entity can\r power jump like the horse does within Minecraft.\r /",
      "definition": "export class EntityCanPowerJumpComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:can_power_jump';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that the entity can\r\n * power jump like the horse does within Minecraft.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "can_power_jump'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycanpowerjumpcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityColor2Component": {
      "id": "@minecraft/server.EntityColor2Component",
      "name": "EntityColor2Component",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the entity's secondary color. Only works on certain\r entities that have secondary predefined color values (e.g.,\r tropical fish).\r /",
      "definition": "export class EntityColor2Component extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of this particular color.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: PaletteColor;\r\n    static readonly componentId = 'minecraft:color2';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the entity's secondary color. Only works on certain\r\n * entities that have secondary predefined color values (e.g.,\r\n * tropical fish).\r\n */\r",
      "properties": [
        {
          "name": "value",
          "type": "PaletteColor",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "color2'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycolor2component",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityColorComponent": {
      "id": "@minecraft/server.EntityColorComponent",
      "name": "EntityColorComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the entity's color. Only works on certain entities\r that have predefined color values (e.g., sheep, llama,\r shulker).\r /",
      "definition": "export class EntityColorComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of this particular color.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    value: number;\r\n    static readonly componentId = 'minecraft:color';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the entity's color. Only works on certain entities\r\n * that have predefined color values (e.g., sheep, llama,\r\n * shulker).\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "color'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycolorcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityComponent": {
      "id": "@minecraft/server.EntityComponent",
      "name": "EntityComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base class for downstream entity components.\r /",
      "definition": "export class EntityComponent extends Component {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that owns this component. The entity will be\r\n     * undefined if it has been removed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly entity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Base class for downstream entity components.\r\n */\r",
      "properties": [
        {
          "name": "entity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "Component",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityDefinitionFeedItem": {
      "id": "@minecraft/server.EntityDefinitionFeedItem",
      "name": "EntityDefinitionFeedItem",
      "type": "class",
      "module": "@minecraft/server",
      "description": "As part of the Ageable component, represents a set of items\r that can be fed to an entity and the rate at which that\r causes them to grow.\r /",
      "definition": "export class EntityDefinitionFeedItem {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The amount by which an entity's age will increase when fed\r\n     * this item. Values usually range between 0 and 1.\r\n     *\r\n     */\r\n    readonly growth: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of type of item that can be fed. If a namespace\r\n     * is not specified, 'minecraft:' is assumed. Example values\r\n     * include 'wheat' or 'golden_apple'.\r\n     *\r\n     */\r\n    readonly item: string;\r\n}\r",
      "jsdoc": "/**\r\n * As part of the Ageable component, represents a set of items\r\n * that can be fed to an entity and the rate at which that\r\n * causes them to grow.\r\n */\r",
      "properties": [
        {
          "name": "growth",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "item",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydefinitionfeeditem",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityDieAfterEvent": {
      "id": "@minecraft/server.EntityDieAfterEvent",
      "name": "EntityDieAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains data related to the death of an entity in the game.\r /",
      "definition": "export class EntityDieAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If specified, provides more information on the source of\r\n     * damage that caused the death of this entity.\r\n     *\r\n     */\r\n    readonly damageSource: EntityDamageSource;\r\n    /**\r\n     * @remarks\r\n     * Now-dead entity object.\r\n     *\r\n     */\r\n    readonly deadEntity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains data related to the death of an entity in the game.\r\n */\r",
      "properties": [
        {
          "name": "damageSource",
          "type": "EntityDamageSource",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "deadEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydieafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityDieAfterEventSignal": {
      "id": "@minecraft/server.EntityDieAfterEventSignal",
      "name": "EntityDieAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Supports registering for an event that fires after an entity\r has died.\r /",
      "definition": "export class EntityDieAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Subscribes to an event that fires when an entity dies.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call when an entity dies.\r\n     * @param options\r\n     * Additional filtering options for when the subscription\r\n     * fires.\r\n     * @returns\r\n     * Returns the closure that can be used in future downstream\r\n     * calls to unsubscribe.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityDieAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityDieAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Stops this event from calling your function when an entity\r\n     * dies.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityDieAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Supports registering for an event that fires after an entity\r\n * has died.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydieaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityEquippableComponent": {
      "id": "@minecraft/server.EntityEquippableComponent",
      "name": "EntityEquippableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides access to a mob's equipment slots. This component\r exists on player entities.\r ```typescript\r // Gives the player Elytra\r  function giveEquipment(player: Player) {\r     const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r     if (equipmentCompPlayer) {\r         equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r     }\r }\r ```\r /",
      "definition": "export class EntityEquippableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the total Armor level of the owner.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly totalArmor: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the total Toughness level of the owner.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly totalToughness: number;\r\n    static readonly componentId = 'minecraft:equippable';\r\n    /**\r\n     * @remarks\r\n     * Gets the equipped item for the given EquipmentSlot.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\"\r\n     * @returns\r\n     * Returns the item equipped to the given EquipmentSlot. If\r\n     * empty, returns undefined.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEquipment(equipmentSlot: EquipmentSlot): ItemStack | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets the ContainerSlot corresponding to the given\r\n     * EquipmentSlot.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\".\r\n     * @returns\r\n     * Returns the ContainerSlot corresponding to the given\r\n     * EquipmentSlot.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEquipmentSlot(equipmentSlot: EquipmentSlot): ContainerSlot;\r\n    /**\r\n     * @remarks\r\n     * Replaces the item in the given EquipmentSlot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param equipmentSlot\r\n     * The equipment slot. e.g. \"head\", \"chest\", \"offhand\".\r\n     * @param itemStack\r\n     * The item to equip. If undefined, clears the slot.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setEquipment(equipmentSlot: EquipmentSlot, itemStack?: ItemStack): boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Provides access to a mob's equipment slots. This component\r\n * exists on player entities.\r\n * @example givePlayerElytra.ts\r\n * ```typescript\r\n * // Gives the player Elytra\r\n * import { EquipmentSlot, ItemStack, Player, EntityComponentTypes } from '@minecraft/server';\r\n * import { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n *\r\n * function giveEquipment(player: Player) {\r\n *     const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r\n *     if (equipmentCompPlayer) {\r\n *         equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r\n *     }\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "totalArmor",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "totalToughness",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "equippable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getEquipment",
          "parameters": [],
          "returnType": "ItemStack | undefined",
          "accessibility": "public",
          "signature": "getEquipment(equipmentSlot: EquipmentSlot): ItemStack | undefined"
        },
        {
          "name": "getEquipmentSlot",
          "parameters": [],
          "returnType": "ContainerSlot",
          "accessibility": "public",
          "signature": "getEquipmentSlot(equipmentSlot: EquipmentSlot): ContainerSlot"
        },
        {
          "name": "setEquipment",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "setEquipment(equipmentSlot: EquipmentSlot, itemStack?: ItemStack): boolean"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityequippablecomponent",
        "class"
      ],
      "examples": [
        {
          "title": "givePlayerElytra.ts",
          "code": "// Gives the player Elytra\r\nimport { EquipmentSlot, ItemStack, Player, EntityComponentTypes } from '@minecraft/server';\r\nimport { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n\nfunction giveEquipment(player: Player) {\r\n    const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r\n    if (equipmentCompPlayer) {\r\n        equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r\n    }\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityExhaustionComponent": {
      "id": "@minecraft/server.EntityExhaustionComponent",
      "name": "EntityExhaustionComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the interactions with this entity for Exhaustion.\r Wraps the `minecraft.player.exhaustion` attribute.\r /",
      "definition": "export class EntityExhaustionComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.exhaustion';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the interactions with this entity for Exhaustion.\r\n * Wraps the `minecraft.player.exhaustion` attribute.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "player.exhaustion'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityAttributeComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityexhaustioncomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityFireImmuneComponent": {
      "id": "@minecraft/server.EntityFireImmuneComponent",
      "name": "EntityFireImmuneComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity\r doesn't take damage from fire.\r /",
      "definition": "export class EntityFireImmuneComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:fire_immune';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity\r\n * doesn't take damage from fire.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "fire_immune'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityfireimmunecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityFloatsInLiquidComponent": {
      "id": "@minecraft/server.EntityFloatsInLiquidComponent",
      "name": "EntityFloatsInLiquidComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity can\r float in liquid blocks.\r /",
      "definition": "export class EntityFloatsInLiquidComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:floats_in_liquid';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity can\r\n * float in liquid blocks.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "floats_in_liquid'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityfloatsinliquidcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityFlyingSpeedComponent": {
      "id": "@minecraft/server.EntityFlyingSpeedComponent",
      "name": "EntityFlyingSpeedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the flying speed of an entity.\r /",
      "definition": "export class EntityFlyingSpeedComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of the flying speed of the associated entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    value: number;\r\n    static readonly componentId = 'minecraft:flying_speed';\r\n}\r",
      "jsdoc": "/**\r\n * Represents the flying speed of an entity.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "flying_speed'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityflyingspeedcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityFrictionModifierComponent": {
      "id": "@minecraft/server.EntityFrictionModifierComponent",
      "name": "EntityFrictionModifierComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines how much friction affects this entity.\r /",
      "definition": "export class EntityFrictionModifierComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value of the friction modifier of the associated\r\n     * entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:friction_modifier';\r\n}\r",
      "jsdoc": "/**\r\n * Defines how much friction affects this entity.\r\n */\r",
      "properties": [
        {
          "name": "value",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "friction_modifier'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityfrictionmodifiercomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHealableComponent": {
      "id": "@minecraft/server.EntityHealableComponent",
      "name": "EntityHealableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the interactions with this entity for healing it.\r /",
      "definition": "export class EntityHealableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Determines if an item can be used regardless of the entity\r\n     * being at full health.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly forceUse: boolean;\r\n    static readonly componentId = 'minecraft:healable';\r\n    /**\r\n     * @remarks\r\n     * A set of items that can specifically heal this entity.\r\n     *\r\n     * @returns\r\n     * Entity that this component is associated with.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFeedItems(): FeedItem[];\r\n}\r",
      "jsdoc": "/**\r\n * Defines the interactions with this entity for healing it.\r\n */\r",
      "properties": [
        {
          "name": "forceUse",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "healable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getFeedItems",
          "parameters": [],
          "returnType": "FeedItem[]",
          "accessibility": "public",
          "signature": "getFeedItems(): FeedItem[]"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhealablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHealthChangedAfterEvent": {
      "id": "@minecraft/server.EntityHealthChangedAfterEvent",
      "name": "EntityHealthChangedAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an entity when its health\r changes. Warning: don't change the health of an entity in\r this event, or it will cause an infinite loop!\r /",
      "definition": "export class EntityHealthChangedAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity whose health changed.\r\n     *\r\n     */\r\n    readonly entity: Entity;\r\n    /**\r\n     * @remarks\r\n     * New health value of the entity.\r\n     *\r\n     */\r\n    readonly newValue: number;\r\n    /**\r\n     * @remarks\r\n     * Old health value of the entity.\r\n     *\r\n     */\r\n    readonly oldValue: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to an entity when its health\r\n * changes. Warning: don't change the health of an entity in\r\n * this event, or it will cause an infinite loop!\r\n */\r",
      "properties": [
        {
          "name": "entity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "newValue",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "oldValue",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhealthchangedafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHealthChangedAfterEventSignal": {
      "id": "@minecraft/server.EntityHealthChangedAfterEventSignal",
      "name": "EntityHealthChangedAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when the health of\r an entity changes.\r /",
      "definition": "export class EntityHealthChangedAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when the health of an\r\n     * entity changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHealthChangedAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHealthChangedAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when the health of an\r\n     * entity changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHealthChangedAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when the health of\r\n * an entity changes.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhealthchangedaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHealthComponent": {
      "id": "@minecraft/server.EntityHealthComponent",
      "name": "EntityHealthComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the health properties of an entity.\r ```typescript\r  function applyDamageThenHeal(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r    skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r    system.runTimeout(() => {\r     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r     log(\"Skeleton health before heal: \" + health?.currentValue);\r     health?.resetToMaxValue();\r     log(\"Skeleton health after heal: \" + health?.currentValue);\r   }, 20);\r }\r ```\r /",
      "definition": "export class EntityHealthComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:health';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the health properties of an entity.\r\n * @example applyDamageThenHeal.ts\r\n * ```typescript\r\n * import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function applyDamageThenHeal(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n *\r\n *   skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n *\r\n *   system.runTimeout(() => {\r\n *     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n *     log(\"Skeleton health before heal: \" + health?.currentValue);\r\n *     health?.resetToMaxValue();\r\n *     log(\"Skeleton health after heal: \" + health?.currentValue);\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "health'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityAttributeComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhealthcomponent",
        "class"
      ],
      "examples": [
        {
          "title": "applyDamageThenHeal.ts",
          "code": "import { system, EntityHealthComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction applyDamageThenHeal(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n\n  skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r\n\n  system.runTimeout(() => {\r\n    const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r\n    log(\"Skeleton health before heal: \" + health?.currentValue);\r\n    health?.resetToMaxValue();\r\n    log(\"Skeleton health after heal: \" + health?.currentValue);\r\n  }, 20);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityHitBlockAfterEvent": {
      "id": "@minecraft/server.EntityHitBlockAfterEvent",
      "name": "EntityHitBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an entity hitting a block.\r /",
      "definition": "export class EntityHitBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Entity that made the attack.\r\n     *\r\n     */\r\n    readonly damagingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Block that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitBlock: Block;\r\n    /**\r\n     * @remarks\r\n     * Block permutation that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitBlockPermutation: BlockPermutation;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to an entity hitting a block.\r\n */\r",
      "properties": [
        {
          "name": "blockFace",
          "type": "Direction",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "damagingEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hitBlock",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hitBlockPermutation",
          "type": "BlockPermutation",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitblockafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHitBlockAfterEventSignal": {
      "id": "@minecraft/server.EntityHitBlockAfterEventSignal",
      "name": "EntityHitBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an entity hits\r a block.\r /",
      "definition": "export class EntityHitBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHitBlockAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHitBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHitBlockAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity hits\r\n * a block.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitblockaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHitEntityAfterEvent": {
      "id": "@minecraft/server.EntityHitEntityAfterEvent",
      "name": "EntityHitEntityAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an entity hitting (melee\r attacking) another entity.\r /",
      "definition": "export class EntityHitEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that made a hit/melee attack.\r\n     *\r\n     */\r\n    readonly damagingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hit by the attack.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to an entity hitting (melee\r\n * attacking) another entity.\r\n */\r",
      "properties": [
        {
          "name": "damagingEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hitEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitentityafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHitEntityAfterEventSignal": {
      "id": "@minecraft/server.EntityHitEntityAfterEventSignal",
      "name": "EntityHitEntityAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an entity makes\r a melee attack on another entity.\r /",
      "definition": "export class EntityHitEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity hits\r\n     * another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHitEntityAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHitEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity makes a\r\n     * melee attack on another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHitEntityAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity makes\r\n * a melee attack on another entity.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitentityaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHungerComponent": {
      "id": "@minecraft/server.EntityHungerComponent",
      "name": "EntityHungerComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the interactions with this entity for hunger. Wraps\r the `minecraft.player.hunger` attribute.\r /",
      "definition": "export class EntityHungerComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.hunger';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the interactions with this entity for hunger. Wraps\r\n * the `minecraft.player.hunger` attribute.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "player.hunger'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityAttributeComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhungercomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHurtAfterEvent": {
      "id": "@minecraft/server.EntityHurtAfterEvent",
      "name": "EntityHurtAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an entity getting hurt.\r /",
      "definition": "export class EntityHurtAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Describes the amount of damage caused.\r\n     *\r\n     */\r\n    readonly damage: number;\r\n    /**\r\n     * @remarks\r\n     * Source information on the entity that may have applied this\r\n     * damage.\r\n     *\r\n     */\r\n    readonly damageSource: EntityDamageSource;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hurt.\r\n     *\r\n     */\r\n    readonly hurtEntity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to an entity getting hurt.\r\n */\r",
      "properties": [
        {
          "name": "damage",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "damageSource",
          "type": "EntityDamageSource",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hurtEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhurtafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityHurtAfterEventSignal": {
      "id": "@minecraft/server.EntityHurtAfterEventSignal",
      "name": "EntityHurtAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an entity is\r hurt.\r /",
      "definition": "export class EntityHurtAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an entity is hurt.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityHurtAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityHurtAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an entity is hurt.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityHurtAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when an entity is\r\n * hurt.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhurtaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityInventoryComponent": {
      "id": "@minecraft/server.EntityInventoryComponent",
      "name": "EntityInventoryComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines this entity's inventory properties.\r /",
      "definition": "export class EntityInventoryComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Number of slots that this entity can gain per extra\r\n     * strength.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly additionalSlotsPerStrength: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the contents of this inventory can be removed by a\r\n     * hopper.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBeSiphonedFrom: boolean;\r\n    /**\r\n     * @remarks\r\n     * Defines the container for this entity. The container will be\r\n     * undefined if the entity has been removed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly container: Container;\r\n    /**\r\n     * @remarks\r\n     * Type of container this entity has.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly containerType: string;\r\n    /**\r\n     * @remarks\r\n     * Number of slots the container has.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly inventorySize: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity will not drop it's inventory on death.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly 'private': boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity's inventory can only be accessed by its\r\n     * owner or itself.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly restrictToOwner: boolean;\r\n    static readonly componentId = 'minecraft:inventory';\r\n}\r",
      "jsdoc": "/**\r\n * Defines this entity's inventory properties.\r\n */\r",
      "properties": [
        {
          "name": "additionalSlotsPerStrength",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canBeSiphonedFrom",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "container",
          "type": "Container",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "containerType",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "inventorySize",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "restrictToOwner",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "inventory'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityinventorycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsBabyComponent": {
      "id": "@minecraft/server.EntityIsBabyComponent",
      "name": "EntityIsBabyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is a\r baby.\r /",
      "definition": "export class EntityIsBabyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_baby';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is a\r\n * baby.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_baby'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisbabycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsChargedComponent": {
      "id": "@minecraft/server.EntityIsChargedComponent",
      "name": "EntityIsChargedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r charged.\r /",
      "definition": "export class EntityIsChargedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_charged';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * charged.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_charged'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityischargedcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsChestedComponent": {
      "id": "@minecraft/server.EntityIsChestedComponent",
      "name": "EntityIsChestedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently carrying a chest.\r /",
      "definition": "export class EntityIsChestedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_chested';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently carrying a chest.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_chested'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityischestedcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsDyeableComponent": {
      "id": "@minecraft/server.EntityIsDyeableComponent",
      "name": "EntityIsDyeableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that dyes can be used\r on this entity to change its color.\r /",
      "definition": "export class EntityIsDyeableComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_dyeable';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that dyes can be used\r\n * on this entity to change its color.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_dyeable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisdyeablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsHiddenWhenInvisibleComponent": {
      "id": "@minecraft/server.EntityIsHiddenWhenInvisibleComponent",
      "name": "EntityIsHiddenWhenInvisibleComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity can\r hide from hostile mobs while invisible.\r /",
      "definition": "export class EntityIsHiddenWhenInvisibleComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_hidden_when_invisible';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity can\r\n * hide from hostile mobs while invisible.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_hidden_when_invisible'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityishiddenwheninvisiblecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsIgnitedComponent": {
      "id": "@minecraft/server.EntityIsIgnitedComponent",
      "name": "EntityIsIgnitedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity this\r currently on fire.\r /",
      "definition": "export class EntityIsIgnitedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_ignited';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity this\r\n * currently on fire.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_ignited'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisignitedcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsIllagerCaptainComponent": {
      "id": "@minecraft/server.EntityIsIllagerCaptainComponent",
      "name": "EntityIsIllagerCaptainComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is an\r illager captain.\r /",
      "definition": "export class EntityIsIllagerCaptainComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_illager_captain';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is an\r\n * illager captain.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_illager_captain'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisillagercaptaincomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsSaddledComponent": {
      "id": "@minecraft/server.EntityIsSaddledComponent",
      "name": "EntityIsSaddledComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently saddled.\r /",
      "definition": "export class EntityIsSaddledComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_saddled';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently saddled.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_saddled'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityissaddledcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsShakingComponent": {
      "id": "@minecraft/server.EntityIsShakingComponent",
      "name": "EntityIsShakingComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently shaking.\r /",
      "definition": "export class EntityIsShakingComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_shaking';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently shaking.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_shaking'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisshakingcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsShearedComponent": {
      "id": "@minecraft/server.EntityIsShearedComponent",
      "name": "EntityIsShearedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently sheared.\r /",
      "definition": "export class EntityIsShearedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_sheared';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently sheared.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_sheared'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisshearedcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsStackableComponent": {
      "id": "@minecraft/server.EntityIsStackableComponent",
      "name": "EntityIsStackableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity can be\r stacked.\r /",
      "definition": "export class EntityIsStackableComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_stackable';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity can be\r\n * stacked.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_stackable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisstackablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsStunnedComponent": {
      "id": "@minecraft/server.EntityIsStunnedComponent",
      "name": "EntityIsStunnedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently stunned.\r /",
      "definition": "export class EntityIsStunnedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_stunned';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently stunned.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_stunned'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisstunnedcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityIsTamedComponent": {
      "id": "@minecraft/server.EntityIsTamedComponent",
      "name": "EntityIsTamedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently tamed.\r /",
      "definition": "export class EntityIsTamedComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:is_tamed';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity is\r\n * currently tamed.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "is_tamed'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityistamedcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityItemComponent": {
      "id": "@minecraft/server.EntityItemComponent",
      "name": "EntityItemComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "If added onto the entity, this indicates that the entity\r represents a free-floating item in the world. Lets you\r retrieve the actual item stack contents via the itemStack\r property.\r ```typescript\r  function testThatEntityIsFeatherItem(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const items = targetLocation.dimension.getEntities({\r     location: targetLocation,\r     maxDistance: 20,\r   });\r    for (const item of items) {\r     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r      if (itemComp) {\r       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r         log(\"Success! Found a feather\", 1);\r       }\r     }\r   }\r }\r ```\r /",
      "definition": "export class EntityItemComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Item stack represented by this entity in the world.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    static readonly componentId = 'minecraft:item';\r\n}\r",
      "jsdoc": "/**\r\n * If added onto the entity, this indicates that the entity\r\n * represents a free-floating item in the world. Lets you\r\n * retrieve the actual item stack contents via the itemStack\r\n * property.\r\n * @example testThatEntityIsFeatherItem.ts\r\n * ```typescript\r\n * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function testThatEntityIsFeatherItem(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const items = targetLocation.dimension.getEntities({\r\n *     location: targetLocation,\r\n *     maxDistance: 20,\r\n *   });\r\n *\r\n *   for (const item of items) {\r\n *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n *\r\n *     if (itemComp) {\r\n *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n *         log(\"Success! Found a feather\", 1);\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "item'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityitemcomponent",
        "class"
      ],
      "examples": [
        {
          "title": "testThatEntityIsFeatherItem.ts",
          "code": "import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction testThatEntityIsFeatherItem(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const items = targetLocation.dimension.getEntities({\r\n    location: targetLocation,\r\n    maxDistance: 20,\r\n  });\r\n\n  for (const item of items) {\r\n    const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n\n    if (itemComp) {\r\n      if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n        log(\"Success! Found a feather\", 1);\r\n      }\r\n    }\r\n  }\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityLavaMovementComponent": {
      "id": "@minecraft/server.EntityLavaMovementComponent",
      "name": "EntityLavaMovementComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the base movement speed in lava of this entity.\r /",
      "definition": "export class EntityLavaMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:lava_movement';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the base movement speed in lava of this entity.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "lava_movement'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityAttributeComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitylavamovementcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityLeashableComponent": {
      "id": "@minecraft/server.EntityLeashableComponent",
      "name": "EntityLeashableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows the entity to be leashed. Defines the conditions and\r events for when an entity is leashed.\r /",
      "definition": "export class EntityLeashableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if another entity can 'steal' the leashed\r\n     * entity by attaching their own leash to it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBeStolen: boolean;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the leash stiffens, restricting\r\n     * movement.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly hardDistance: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is leashed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isLeashed: boolean;\r\n    /**\r\n     * @remarks\r\n     * Entity that is holding the leash.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly leashHolder?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Identifier of entity that is holding the leash.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly leashHolderEntityId?: string;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the leash breaks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxDistance: number;\r\n    /**\r\n     * @remarks\r\n     * Distance in blocks at which the 'spring' effect starts\r\n     * acting to keep this entity close to the entity that leashed\r\n     * it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly softDistance: number;\r\n    static readonly componentId = 'minecraft:leashable';\r\n    /**\r\n     * @remarks\r\n     * Leashes this entity to another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param leashHolder\r\n     * The entity to leash this entity to.\r\n     * @throws\r\n     * Throws if the entity to leash to is over the max distance,\r\n     * and if the player is dead or in spectator mode.\r\n     */\r\n    leashTo(leashHolder: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Unleashes this entity if it is leashed to another entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    unleash(): void;\r\n}\r",
      "jsdoc": "/**\r\n * Allows the entity to be leashed. Defines the conditions and\r\n * events for when an entity is leashed.\r\n */\r",
      "properties": [
        {
          "name": "canBeStolen",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hardDistance",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isLeashed",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "maxDistance",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "softDistance",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "leashable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "leashTo",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "leashTo(leashHolder: Entity): void"
        },
        {
          "name": "unleash",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "unleash(): void"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityleashablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityLoadAfterEvent": {
      "id": "@minecraft/server.EntityLoadAfterEvent",
      "name": "EntityLoadAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains data related to an entity loaded within the world.\r This could happen when an unloaded chunk is reloaded, or\r when an entity changes dimensions.\r /",
      "definition": "export class EntityLoadAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Entity that was loaded.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains data related to an entity loaded within the world.\r\n * This could happen when an unloaded chunk is reloaded, or\r\n * when an entity changes dimensions.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityloadafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityLoadAfterEventSignal": {
      "id": "@minecraft/server.EntityLoadAfterEventSignal",
      "name": "EntityLoadAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Registers a script-based event handler for handling what\r happens when an entity loads.\r /",
      "definition": "export class EntityLoadAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Method to register an event handler for what happens when an\r\n     * entity loads.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function that handles the load event.\r\n     */\r\n    subscribe(callback: (arg0: EntityLoadAfterEvent) => void): (arg0: EntityLoadAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unregisters a method that was previously subscribed to the\r\n     * subscription event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Original function that was passed into the subscribe event,\r\n     * that is to be unregistered.\r\n     */\r\n    unsubscribe(callback: (arg0: EntityLoadAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Registers a script-based event handler for handling what\r\n * happens when an entity loads.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityloadaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMarkVariantComponent": {
      "id": "@minecraft/server.EntityMarkVariantComponent",
      "name": "EntityMarkVariantComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Additional variant value. Can be used to further\r differentiate variants.\r /",
      "definition": "export class EntityMarkVariantComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of the mark variant value for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:mark_variant';\r\n}\r",
      "jsdoc": "/**\r\n * Additional variant value. Can be used to further\r\n * differentiate variants.\r\n */\r",
      "properties": [
        {
          "name": "value",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "mark_variant'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymarkvariantcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementAmphibiousComponent": {
      "id": "@minecraft/server.EntityMovementAmphibiousComponent",
      "name": "EntityMovementAmphibiousComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this movement control allows the mob to swim in\r water and walk on land.\r /",
      "definition": "export class EntityMovementAmphibiousComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.amphibious';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this movement control allows the mob to swim in\r\n * water and walk on land.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "movement.amphibious'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementamphibiouscomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementBasicComponent": {
      "id": "@minecraft/server.EntityMovementBasicComponent",
      "name": "EntityMovementBasicComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This component accents the movement of an entity.\r /",
      "definition": "export class EntityMovementBasicComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.basic';\r\n}\r",
      "jsdoc": "/**\r\n * This component accents the movement of an entity.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "movement.basic'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementbasiccomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementComponent": {
      "id": "@minecraft/server.EntityMovementComponent",
      "name": "EntityMovementComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the general movement speed of this entity.\r /",
      "definition": "export class EntityMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the general movement speed of this entity.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "movement'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityAttributeComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementFlyComponent": {
      "id": "@minecraft/server.EntityMovementFlyComponent",
      "name": "EntityMovementFlyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control causes the mob to fly.\r /",
      "definition": "export class EntityMovementFlyComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.fly';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this move control causes the mob to fly.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "movement.fly'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementflycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementGenericComponent": {
      "id": "@minecraft/server.EntityMovementGenericComponent",
      "name": "EntityMovementGenericComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control allows a mob to fly, swim,\r climb, etc.\r /",
      "definition": "export class EntityMovementGenericComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.generic';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this move control allows a mob to fly, swim,\r\n * climb, etc.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "movement.generic'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementgenericcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementGlideComponent": {
      "id": "@minecraft/server.EntityMovementGlideComponent",
      "name": "EntityMovementGlideComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this movement control allows the mob to glide.\r /",
      "definition": "export class EntityMovementGlideComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Speed in effect when the entity is turning.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly speedWhenTurning: number;\r\n    /**\r\n     * @remarks\r\n     * Start speed during a glide.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly startSpeed: number;\r\n    static readonly componentId = 'minecraft:movement.glide';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this movement control allows the mob to glide.\r\n */\r",
      "properties": [
        {
          "name": "speedWhenTurning",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "startSpeed",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "movement.glide'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementglidecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementHoverComponent": {
      "id": "@minecraft/server.EntityMovementHoverComponent",
      "name": "EntityMovementHoverComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control causes the mob to hover.\r /",
      "definition": "export class EntityMovementHoverComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.hover';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this move control causes the mob to hover.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "movement.hover'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementhovercomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementJumpComponent": {
      "id": "@minecraft/server.EntityMovementJumpComponent",
      "name": "EntityMovementJumpComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Move control that causes the mob to jump as it moves with a\r specified delay between jumps.\r /",
      "definition": "export class EntityMovementJumpComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.jump';\r\n}\r",
      "jsdoc": "/**\r\n * Move control that causes the mob to jump as it moves with a\r\n * specified delay between jumps.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "movement.jump'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementjumpcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementSkipComponent": {
      "id": "@minecraft/server.EntityMovementSkipComponent",
      "name": "EntityMovementSkipComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control causes the mob to hop as it\r moves.\r /",
      "definition": "export class EntityMovementSkipComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:movement.skip';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this move control causes the mob to hop as it\r\n * moves.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "movement.skip'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementskipcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityMovementSwayComponent": {
      "id": "@minecraft/server.EntityMovementSwayComponent",
      "name": "EntityMovementSwayComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control causes the mob to sway side to\r side giving the impression it is swimming.\r /",
      "definition": "export class EntityMovementSwayComponent extends EntityBaseMovementComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Amplitude of the sway motion.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly swayAmplitude: number;\r\n    /**\r\n     * @remarks\r\n     * Amount of sway frequency.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly swayFrequency: number;\r\n    static readonly componentId = 'minecraft:movement.sway';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this move control causes the mob to sway side to\r\n * side giving the impression it is swimming.\r\n */\r",
      "properties": [
        {
          "name": "swayAmplitude",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "swayFrequency",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "movement.sway'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityBaseMovementComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementswaycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityNavigationClimbComponent": {
      "id": "@minecraft/server.EntityNavigationClimbComponent",
      "name": "EntityNavigationClimbComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths that include vertical\r walls (for example, like Minecraft spiders do.)\r /",
      "definition": "export class EntityNavigationClimbComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.climb';\r\n}\r",
      "jsdoc": "/**\r\n * Allows this entity to generate paths that include vertical\r\n * walls (for example, like Minecraft spiders do.)\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "navigation.climb'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityNavigationComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationclimbcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityNavigationComponent": {
      "id": "@minecraft/server.EntityNavigationComponent",
      "name": "EntityNavigationComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths that include vertical\r walls (for example, like Minecraft spiders do.)\r /",
      "definition": "export class EntityNavigationComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid blocks that cause damage when\r\n     * finding a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidDamageBlocks: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid portals (like nether portals)\r\n     * when finding a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidPortals: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether or not the pathfinder should avoid tiles that are\r\n     * exposed to the sun when creating paths.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidSun: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder to avoid water when creating a path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly avoidWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can jump out of water\r\n     * (like a dolphin).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBreach: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed door\r\n     * and break it.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canBreakDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can float.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canFloat: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can jump up blocks.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canJump: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed door\r\n     * assuming the AI will open the door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canOpenDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can path through a closed iron\r\n     * door assuming the AI will open the door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canOpenIronDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether a path can be created through a door.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPassDoors: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder that it can start pathing when in the\r\n     * air.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathFromAir: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel on the\r\n     * surface of the lava.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathOverLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel on the\r\n     * surface of the water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canPathOverWater: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it will be pulled down\r\n     * by gravity while in water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canSink: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can path anywhere\r\n     * through water and plays swimming animation along that path.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canSwim: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can walk on the\r\n     * ground outside water.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canWalk: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can travel in lava\r\n     * like walking on ground.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canWalkInLava: boolean;\r\n    /**\r\n     * @remarks\r\n     * Tells the pathfinder whether or not it can walk on the\r\n     * ground or go underwater.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isAmphibious: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Allows this entity to generate paths that include vertical\r\n * walls (for example, like Minecraft spiders do.)\r\n */\r",
      "properties": [
        {
          "name": "avoidDamageBlocks",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "avoidPortals",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "avoidSun",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "avoidWater",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canBreach",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canBreakDoors",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canFloat",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canJump",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canOpenDoors",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canOpenIronDoors",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canPassDoors",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canPathFromAir",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canPathOverLava",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canPathOverWater",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canSink",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canSwim",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canWalk",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "canWalkInLava",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isAmphibious",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityNavigationFloatComponent": {
      "id": "@minecraft/server.EntityNavigationFloatComponent",
      "name": "EntityNavigationFloatComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths by flying around the\r air like the regular Ghast.\r /",
      "definition": "export class EntityNavigationFloatComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.float';\r\n}\r",
      "jsdoc": "/**\r\n * Allows this entity to generate paths by flying around the\r\n * air like the regular Ghast.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "navigation.float'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityNavigationComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationfloatcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityNavigationFlyComponent": {
      "id": "@minecraft/server.EntityNavigationFlyComponent",
      "name": "EntityNavigationFlyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths in the air (for\r example, like Minecraft parrots do.)\r /",
      "definition": "export class EntityNavigationFlyComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.fly';\r\n}\r",
      "jsdoc": "/**\r\n * Allows this entity to generate paths in the air (for\r\n * example, like Minecraft parrots do.)\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "navigation.fly'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityNavigationComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationflycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityNavigationGenericComponent": {
      "id": "@minecraft/server.EntityNavigationGenericComponent",
      "name": "EntityNavigationGenericComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths by walking, swimming,\r flying and/or climbing around and jumping up and down a\r block.\r /",
      "definition": "export class EntityNavigationGenericComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.generic';\r\n}\r",
      "jsdoc": "/**\r\n * Allows this entity to generate paths by walking, swimming,\r\n * flying and/or climbing around and jumping up and down a\r\n * block.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "navigation.generic'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityNavigationComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationgenericcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityNavigationHoverComponent": {
      "id": "@minecraft/server.EntityNavigationHoverComponent",
      "name": "EntityNavigationHoverComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths in the air (for\r example, like the Minecraft Bees do.) Keeps them from\r falling out of the skies and doing predictive movement.\r /",
      "definition": "export class EntityNavigationHoverComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.hover';\r\n}\r",
      "jsdoc": "/**\r\n * Allows this entity to generate paths in the air (for\r\n * example, like the Minecraft Bees do.) Keeps them from\r\n * falling out of the skies and doing predictive movement.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "navigation.hover'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityNavigationComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationhovercomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityNavigationWalkComponent": {
      "id": "@minecraft/server.EntityNavigationWalkComponent",
      "name": "EntityNavigationWalkComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths by walking around and\r jumping up and down a block like regular mobs.\r /",
      "definition": "export class EntityNavigationWalkComponent extends EntityNavigationComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:navigation.walk';\r\n}\r",
      "jsdoc": "/**\r\n * Allows this entity to generate paths by walking around and\r\n * jumping up and down a block like regular mobs.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "navigation.walk'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityNavigationComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationwalkcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityOnFireComponent": {
      "id": "@minecraft/server.EntityOnFireComponent",
      "name": "EntityOnFireComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an entity, this entity is on fire.\r ```typescript\r  function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r    skelly.setOnFire(20, true);\r    system.runTimeout(() => {\r     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r      skelly.extinguishFire(true);\r     log(\"Never mind. Fire extinguished.\");\r   }, 20);\r }\r ```\r /",
      "definition": "export class EntityOnFireComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The number of ticks remaining before the fire goes out.\r\n     *\r\n     */\r\n    readonly onFireTicksRemaining: number;\r\n    static readonly componentId = 'minecraft:onfire';\r\n}\r",
      "jsdoc": "/**\r\n * When present on an entity, this entity is on fire.\r\n * @example setOnFire.ts\r\n * ```typescript\r\n * import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n *\r\n *   skelly.setOnFire(20, true);\r\n *\r\n *   system.runTimeout(() => {\r\n *     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n *     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n *\r\n *     skelly.extinguishFire(true);\r\n *     log(\"Never mind. Fire extinguished.\");\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "onFireTicksRemaining",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "onfire'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityonfirecomponent",
        "class"
      ],
      "examples": [
        {
          "title": "setOnFire.ts",
          "code": "import { system, EntityOnFireComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r\n\n  skelly.setOnFire(20, true);\r\n\n  system.runTimeout(() => {\r\n    const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r\n    log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r\n\n    skelly.extinguishFire(true);\r\n    log(\"Never mind. Fire extinguished.\");\r\n  }, 20);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityProjectileComponent": {
      "id": "@minecraft/server.EntityProjectileComponent",
      "name": "EntityProjectileComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The projectile component controls the properties of a\r projectile entity and allows it to be shot in a given\r direction.\r This component is present when the entity has the\r minecraft:projectile component.\r ```typescript\r  function shootArrow(targetLocation: DimensionLocation) {\r   const velocity = { x: 0, y: 1, z: 5 };\r    const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r     x: targetLocation.x,\r     y: targetLocation.y + 2,\r     z: targetLocation.z,\r   });\r    const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r    projectileComp?.shoot(velocity);\r }\r ```\r /",
      "definition": "export class EntityProjectileComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The fraction of the projectile's speed maintained every tick\r\n     * while traveling through air.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    airInertia: number;\r\n    /**\r\n     * @remarks\r\n     * If true, the entity will be set on fire when hurt. The\r\n     * default burn duration is 5 seconds. This duration can be\r\n     * modified via the onFireTime property. The entity will not\r\n     * catch fire if immune or if the entity is wet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    catchFireOnHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will spawn crit particles when hit\r\n     * by a player. E.g. Player attacking a Shulker bullet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    critParticlesOnProjectileHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will be destroyed when it takes\r\n     * damage. E.g. Player attacking a Shulker bullet.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    destroyOnProjectileHurt: boolean;\r\n    /**\r\n     * @remarks\r\n     * The gravity applied to the projectile. When the entity is\r\n     * not on the ground, subtracts this amount from the\r\n     * projectile’s change in vertical position every tick. The\r\n     * higher the value, the faster the projectile falls. If\r\n     * negative, the entity will rise instead of fall.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    gravity: number;\r\n    /**\r\n     * @remarks\r\n     * The sound that plays when the projectile hits an entity.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitEntitySound?: string;\r\n    /**\r\n     * @remarks\r\n     * The sound that plays when the projectile hits a block.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitGroundSound?: string;\r\n    /**\r\n     * @remarks\r\n     * The particle that spawns when the projectile hits something.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    hitParticle?: string;\r\n    /**\r\n     * @remarks\r\n     * If true and the weather is thunder and the entity has line\r\n     * of sight to the sky, the entity will be struck by lightning\r\n     * when hit. E.g. A thrown Trident with the Channeling\r\n     * enchantment.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    lightningStrikeOnHit: boolean;\r\n    /**\r\n     * @remarks\r\n     * The fraction of the projectile's speed maintained every tick\r\n     * while traveling through a liquid.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    liquidInertia: number;\r\n    /**\r\n     * @remarks\r\n     * Duration in seconds that the entity hit will be on fire for\r\n     * when catchFireOnHurt is set to true.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    onFireTime: number;\r\n    /**\r\n     * @remarks\r\n     * The owner of the projectile. This is used to determine what\r\n     * the projectile can collide with and damage. It also\r\n     * determines which entity is assigned as the attacker.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    owner?: Entity;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will bounce off mobs when no damage\r\n     * is taken. E.g. A spawning wither.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    shouldBounceOnHit: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the projectile will stop moving when an entity is\r\n     * hit as thought it had been blocked. E.g. Thrown trident on\r\n     * hit behavior.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    stopOnHit: boolean;\r\n    static readonly componentId = 'minecraft:projectile';\r\n    /**\r\n     * @remarks\r\n     * Shoots the projectile with a given velocity. The projectile\r\n     * will be shot from its current location.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param velocity\r\n     * The velocity to fire the projectile. This controls both the\r\n     * speed and direction which which the projectile will be shot.\r\n     * @param options\r\n     * Optional configuration for the shoot.\r\n     * @throws\r\n     * Throws if the component or entity no longer exist.\r\n     */\r\n    shoot(velocity: Vector3, options?: ProjectileShootOptions): void;\r\n}\r",
      "jsdoc": "/**\r\n * The projectile component controls the properties of a\r\n * projectile entity and allows it to be shot in a given\r\n * direction.\r\n * This component is present when the entity has the\r\n * minecraft:projectile component.\r\n * @example shootArrow.ts\r\n * ```typescript\r\n * import { DimensionLocation, EntityProjectileComponent } from \"@minecraft/server\";\r\n *\r\n * function shootArrow(targetLocation: DimensionLocation) {\r\n *   const velocity = { x: 0, y: 1, z: 5 };\r\n *\r\n *   const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 2,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r\n *\r\n *   projectileComp?.shoot(velocity);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "projectile'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "shoot",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "shoot(velocity: Vector3, options?: ProjectileShootOptions): void"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityprojectilecomponent",
        "class"
      ],
      "examples": [
        {
          "title": "shootArrow.ts",
          "code": "import { DimensionLocation, EntityProjectileComponent } from \"@minecraft/server\";\r\n\nfunction shootArrow(targetLocation: DimensionLocation) {\r\n  const velocity = { x: 0, y: 1, z: 5 };\r\n\n  const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 2,\r\n    z: targetLocation.z,\r\n  });\r\n\n  const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r\n\n  projectileComp?.shoot(velocity);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityPushThroughComponent": {
      "id": "@minecraft/server.EntityPushThroughComponent",
      "name": "EntityPushThroughComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Sets the distance through which the entity can push through.\r /",
      "definition": "export class EntityPushThroughComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Value of the push through distances of this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:push_through';\r\n}\r",
      "jsdoc": "/**\r\n * Sets the distance through which the entity can push through.\r\n */\r",
      "properties": [
        {
          "name": "value",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "push_through'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitypushthroughcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityRemoveAfterEvent": {
      "id": "@minecraft/server.EntityRemoveAfterEvent",
      "name": "EntityRemoveAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Data for an event that happens when an entity is removed\r from the world (for example, the entity is unloaded because\r it is not close to players.)\r /",
      "definition": "export class EntityRemoveAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Id of the entity that was removed.\r\n     *\r\n     */\r\n    readonly removedEntityId: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of the entity removed - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n}\r",
      "jsdoc": "/**\r\n * Data for an event that happens when an entity is removed\r\n * from the world (for example, the entity is unloaded because\r\n * it is not close to players.)\r\n */\r",
      "properties": [
        {
          "name": "removedEntityId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "typeId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityremoveafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityRemoveAfterEventSignal": {
      "id": "@minecraft/server.EntityRemoveAfterEventSignal",
      "name": "EntityRemoveAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows registration for an event that fires when an entity\r is removed from  the game (for example, unloaded, or a few\r seconds after they are dead.)\r /",
      "definition": "export class EntityRemoveAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Will call your function every time an entity is removed from\r\n     * the game.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call.\r\n     * @param options\r\n     * Additional filtering options for this event.\r\n     * @returns\r\n     * Returns a closure that can be used in subsequent unsubscribe\r\n     * operations.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: EntityRemoveAfterEvent) => void,\r\n        options?: EntityEventOptions,\r\n    ): (arg0: EntityRemoveAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes your function from subsequent calls when an\r\n     * entity is removed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityRemoveAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Allows registration for an event that fires when an entity\r\n * is removed from  the game (for example, unloaded, or a few\r\n * seconds after they are dead.)\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityremoveaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityRemoveBeforeEvent": {
      "id": "@minecraft/server.EntityRemoveBeforeEvent",
      "name": "EntityRemoveBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Data for an event that happens when an entity is being\r removed from the world (for example, the entity is unloaded\r because it is not close to players.)\r /",
      "definition": "export class EntityRemoveBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Reference to an entity that is being removed.\r\n     *\r\n     */\r\n    readonly removedEntity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Data for an event that happens when an entity is being\r\n * removed from the world (for example, the entity is unloaded\r\n * because it is not close to players.)\r\n */\r",
      "properties": [
        {
          "name": "removedEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityremovebeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityRemoveBeforeEventSignal": {
      "id": "@minecraft/server.EntityRemoveBeforeEventSignal",
      "name": "EntityRemoveBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows registration for an event that fires when an entity\r is being removed from  the game (for example, unloaded, or a\r few seconds after they are dead.)\r /",
      "definition": "export class EntityRemoveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Will call your function every time an entity is being\r\n     * removed from the game.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function to call.\r\n     * @returns\r\n     * Returns a closure that can be used in subsequent unsubscribe\r\n     * operations.\r\n     */\r\n    subscribe(callback: (arg0: EntityRemoveBeforeEvent) => void): (arg0: EntityRemoveBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes your function from subsequent calls when an\r\n     * entity is being removed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: EntityRemoveBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Allows registration for an event that fires when an entity\r\n * is being removed from  the game (for example, unloaded, or a\r\n * few seconds after they are dead.)\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityremovebeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityRideableComponent": {
      "id": "@minecraft/server.EntityRideableComponent",
      "name": "EntityRideableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component adds the capability that an\r entity can be ridden by another entity.\r ```typescript\r  function minibiomes(test: Test) {\r   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r    test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r    const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r    minecartRideableComp?.addRider(pig);\r    test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r }\r register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r ```\r /",
      "definition": "export class EntityRideableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Zero-based index of the seat that can used to control this\r\n     * entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly controllingSeat: number;\r\n    /**\r\n     * @remarks\r\n     * Determines whether interactions are not supported if the\r\n     * entity is crouching.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly crouchingSkipInteract: boolean;\r\n    /**\r\n     * @remarks\r\n     * Set of text that should be displayed when a player is\r\n     * looking to ride on this entity (commonly with touch-screen\r\n     * controls).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly interactText: string;\r\n    /**\r\n     * @remarks\r\n     * The max width a mob can be to be a passenger.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly passengerMaxWidth: number;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will pull in entities that are in the\r\n     * correct family_types into any available seat.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly pullInEntities: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, this entity will be picked when looked at by the\r\n     * rider.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly riderCanInteract: boolean;\r\n    /**\r\n     * @remarks\r\n     * Number of seats for riders defined for this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly seatCount: number;\r\n    static readonly componentId = 'minecraft:rideable';\r\n    /**\r\n     * @remarks\r\n     * Adds an entity to this entity as a rider.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rider\r\n     * Entity that will become the rider of this entity.\r\n     * @returns\r\n     * True if the rider entity was successfully added.\r\n     * @throws This function can throw errors.\r\n     * @example minibiomes.ts\r\n     * ```typescript\r\n     * import { EntityComponentTypes } from \"@minecraft/server\";\r\n     * import { Test, register } from \"@minecraft/server-gametest\";\r\n     * import { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function minibiomes(test: Test) {\r\n     *   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n     *   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n     *\r\n     *   test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n     *\r\n     *   const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n     *\r\n     *   minecartRideableComp?.addRider(pig);\r\n     *\r\n     *   test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n     * }\r\n     * register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r\n     * ```\r\n     */\r\n    addRider(rider: Entity): boolean;\r\n    /**\r\n     * @remarks\r\n     * Ejects the specified rider of this entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param rider\r\n     * Entity that should be ejected from this entity.\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRider(rider: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Ejects all riders of this entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    ejectRiders(): void;\r\n    /**\r\n     * @remarks\r\n     * A string-list of entity types that this entity can support\r\n     * as riders.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getFamilyTypes(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets a list of the all the entities currently riding this\r\n     * entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getRiders(): Entity[];\r\n    /**\r\n     * @remarks\r\n     * Gets a list of positions and number of riders for each\r\n     * position for entities riding this entity.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getSeats(): Seat[];\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component adds the capability that an\r\n * entity can be ridden by another entity.\r\n * @example minibiomes.ts\r\n * ```typescript\r\n * import { EntityComponentTypes } from \"@minecraft/server\";\r\n * import { Test, register } from \"@minecraft/server-gametest\";\r\n * import { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function minibiomes(test: Test) {\r\n *   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n *   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n *\r\n *   test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n *\r\n *   const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n *\r\n *   minecartRideableComp?.addRider(pig);\r\n *\r\n *   test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n * }\r\n * register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "controllingSeat",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "crouchingSkipInteract",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "interactText",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "passengerMaxWidth",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "pullInEntities",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "riderCanInteract",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "seatCount",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "rideable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "addRider",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "addRider(rider: Entity): boolean"
        },
        {
          "name": "ejectRider",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "ejectRider(rider: Entity): void"
        },
        {
          "name": "ejectRiders",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "ejectRiders(): void"
        },
        {
          "name": "getFamilyTypes",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getFamilyTypes(): string[]"
        },
        {
          "name": "getRiders",
          "parameters": [],
          "returnType": "Entity[]",
          "accessibility": "public",
          "signature": "getRiders(): Entity[]"
        },
        {
          "name": "getSeats",
          "parameters": [],
          "returnType": "Seat[]",
          "accessibility": "public",
          "signature": "getSeats(): Seat[]"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityrideablecomponent",
        "class"
      ],
      "examples": [
        {
          "title": "minibiomes.ts",
          "code": "import { EntityComponentTypes } from \"@minecraft/server\";\r\nimport { Test, register } from \"@minecraft/server-gametest\";\r\nimport { MinecraftBlockTypes, MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction minibiomes(test: Test) {\r\n  const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r\n  const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r\n\n  test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r\n\n  const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r\n\n  minecartRideableComp?.addRider(pig);\r\n\n  test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r\n}\r\nregister(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityRidingComponent": {
      "id": "@minecraft/server.EntityRidingComponent",
      "name": "EntityRidingComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This component is added to any entity when it is riding\r another entity.\r /",
      "definition": "export class EntityRidingComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity this entity is currently riding on.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly entityRidingOn: Entity;\r\n    static readonly componentId = 'minecraft:riding';\r\n}\r",
      "jsdoc": "/**\r\n * This component is added to any entity when it is riding\r\n * another entity.\r\n */\r",
      "properties": [
        {
          "name": "entityRidingOn",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "riding'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityridingcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntitySaturationComponent": {
      "id": "@minecraft/server.EntitySaturationComponent",
      "name": "EntitySaturationComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the interactions with this entity for Saturation.\r Wraps the `minecraft.player.saturation` attribute.\r /",
      "definition": "export class EntitySaturationComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:player.saturation';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the interactions with this entity for Saturation.\r\n * Wraps the `minecraft.player.saturation` attribute.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "player.saturation'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityAttributeComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitysaturationcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityScaleComponent": {
      "id": "@minecraft/server.EntityScaleComponent",
      "name": "EntityScaleComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Sets the entity's visual size.\r /",
      "definition": "export class EntityScaleComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value for the scale property set on entities.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:scale';\r\n}\r",
      "jsdoc": "/**\r\n * Sets the entity's visual size.\r\n */\r",
      "properties": [
        {
          "name": "value",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "scale'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityscalecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntitySkinIdComponent": {
      "id": "@minecraft/server.EntitySkinIdComponent",
      "name": "EntitySkinIdComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Skin Id value. Can be used to differentiate skins, such as\r base skins for villagers.\r /",
      "definition": "export class EntitySkinIdComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the value of the skin Id identifier of the entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:skin_id';\r\n}\r",
      "jsdoc": "/**\r\n * Skin Id value. Can be used to differentiate skins, such as\r\n * base skins for villagers.\r\n */\r",
      "properties": [
        {
          "name": "value",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "skin_id'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityskinidcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntitySpawnAfterEvent": {
      "id": "@minecraft/server.EntitySpawnAfterEvent",
      "name": "EntitySpawnAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains data related to an entity spawning within the\r world.\r ```typescript\r  function logEntitySpawnEvent(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   // register a new function that is called when a new entity is created.\r   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r     if (entityEvent && entityEvent.entity) {\r       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r     } else {\r       log(`The entity event did not work as expected.`, -1);\r     }\r   });\r    system.runTimeout(() => {\r     targetLocation.dimension.spawnEntity(\r       \"minecraft:horse<minecraft:ageable_grow_up>\",\r       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r     );\r   }, 20);\r }\r ```\r /",
      "definition": "export class EntitySpawnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Initialization cause (Spawned, Born ...).\r\n     *\r\n     */\r\n    readonly cause: EntityInitializationCause;\r\n    /**\r\n     * @remarks\r\n     * Entity that was spawned.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains data related to an entity spawning within the\r\n * world.\r\n * @example logEntitySpawnEvent.ts\r\n * ```typescript\r\n * import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function logEntitySpawnEvent(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   // register a new function that is called when a new entity is created.\r\n *   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n *     if (entityEvent && entityEvent.entity) {\r\n *       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n *     } else {\r\n *       log(`The entity event did not work as expected.`, -1);\r\n *     }\r\n *   });\r\n *\r\n *   system.runTimeout(() => {\r\n *     targetLocation.dimension.spawnEntity(\r\n *       \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n *       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n *     );\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "cause",
          "type": "EntityInitializationCause",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityspawnafterevent",
        "class"
      ],
      "examples": [
        {
          "title": "logEntitySpawnEvent.ts",
          "code": "import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { Vector3Utils } from \"@minecraft/math\";\r\n\nfunction logEntitySpawnEvent(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  // register a new function that is called when a new entity is created.\r\n  world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n    if (entityEvent && entityEvent.entity) {\r\n      log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n    } else {\r\n      log(`The entity event did not work as expected.`, -1);\r\n    }\r\n  });\r\n\n  system.runTimeout(() => {\r\n    targetLocation.dimension.spawnEntity(\r\n      \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n      Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n    );\r\n  }, 20);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntitySpawnAfterEventSignal": {
      "id": "@minecraft/server.EntitySpawnAfterEventSignal",
      "name": "EntitySpawnAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Registers a script-based event handler for handling what\r happens when an entity spawns.\r /",
      "definition": "export class EntitySpawnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Method to register an event handler for what happens when an\r\n     * entity spawns.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function that handles the spawn event.\r\n     * @example logEntitySpawnEvent.ts\r\n     * ```typescript\r\n     * import { world, system, EntitySpawnAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { Vector3Utils } from \"@minecraft/math\";\r\n     *\r\n     * function logEntitySpawnEvent(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   // register a new function that is called when a new entity is created.\r\n     *   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r\n     *     if (entityEvent && entityEvent.entity) {\r\n     *       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r\n     *     } else {\r\n     *       log(`The entity event did not work as expected.`, -1);\r\n     *     }\r\n     *   });\r\n     *\r\n     *   system.runTimeout(() => {\r\n     *     targetLocation.dimension.spawnEntity(\r\n     *       \"minecraft:horse<minecraft:ageable_grow_up>\",\r\n     *       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r\n     *     );\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    subscribe(callback: (arg0: EntitySpawnAfterEvent) => void): (arg0: EntitySpawnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unregisters a method that was previously subscribed to the\r\n     * subscription event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Original function that was passed into the subscribe event,\r\n     * that is to be unregistered.\r\n     */\r\n    unsubscribe(callback: (arg0: EntitySpawnAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Registers a script-based event handler for handling what\r\n * happens when an entity spawns.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityspawnaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityStrengthComponent": {
      "id": "@minecraft/server.EntityStrengthComponent",
      "name": "EntityStrengthComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the entity's ability to carry items. An entity with\r a higher strength would have higher potential carry capacity\r and more item slots.\r /",
      "definition": "export class EntityStrengthComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Maximum strength of this entity, as defined in the entity\r\n     * type definition.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly max: number;\r\n    /**\r\n     * @remarks\r\n     * Current value of the strength component that has been set\r\n     * for entities.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:strength';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the entity's ability to carry items. An entity with\r\n * a higher strength would have higher potential carry capacity\r\n * and more item slots.\r\n */\r",
      "properties": [
        {
          "name": "max",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "value",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "strength'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitystrengthcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityTameableComponent": {
      "id": "@minecraft/server.EntityTameableComponent",
      "name": "EntityTameableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the rules for an entity to be tamed by the player.\r /",
      "definition": "export class EntityTameableComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a set of items that can be used to tame this entity.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly getTameItems: ItemStack[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed by player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamed: boolean;\r\n    /**\r\n     * @remarks\r\n     * The chance of taming the entity with each item use between\r\n     * 0.0 and 1.0, where 1.0 is 100%\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly probability: number;\r\n    /**\r\n     * @remarks\r\n     * Returns the player that has tamed the entity, or 'undefined'\r\n     * if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayer?: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the id of player that has tamed the entity, or\r\n     * 'undefined' if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayerId?: string;\r\n    static readonly componentId = 'minecraft:tameable';\r\n    /**\r\n     * @remarks\r\n     * Set this entity as tamed by the given player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * The player that this entity should be tamed by.\r\n     * @returns\r\n     * Returns true if the entity was tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tame(player: Player): boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Defines the rules for an entity to be tamed by the player.\r\n */\r",
      "properties": [
        {
          "name": "getTameItems",
          "type": "ItemStack[]",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isTamed",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "probability",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "tameable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "tame",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "tame(player: Player): boolean"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytameablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityTameMountComponent": {
      "id": "@minecraft/server.EntityTameMountComponent",
      "name": "EntityTameMountComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains options for taming a rideable entity based on the\r entity that mounts it.\r /",
      "definition": "export class EntityTameMountComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamed: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the entity is tamed by a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isTamedToPlayer: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the player that has tamed the entity, or 'undefined'\r\n     * if entity is not tamed by a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayer?: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the id of player that has tamed the entity, or\r\n     * 'undefined' if entity is not tamed.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly tamedToPlayerId?: string;\r\n    static readonly componentId = 'minecraft:tamemount';\r\n    /**\r\n     * @remarks\r\n     * Sets this rideable entity as tamed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param showParticles\r\n     * Whether to show effect particles when this entity is tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tame(showParticles: boolean): void;\r\n    /**\r\n     * @remarks\r\n     * Sets this rideable entity as tamed by the given player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param showParticles\r\n     * Whether to show effect particles when this entity is tamed.\r\n     * @param player\r\n     * The player that this entity should be tamed by.\r\n     * @returns\r\n     * Returns true if the entity was tamed.\r\n     * @throws This function can throw errors.\r\n     */\r\n    tameToPlayer(showParticles: boolean, player: Player): boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Contains options for taming a rideable entity based on the\r\n * entity that mounts it.\r\n */\r",
      "properties": [
        {
          "name": "isTamed",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isTamedToPlayer",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "tamemount'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "tame",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "tame(showParticles: boolean): void"
        },
        {
          "name": "tameToPlayer",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "tameToPlayer(showParticles: boolean, player: Player): boolean"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytamemountcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityType": {
      "id": "@minecraft/server.EntityType",
      "name": "EntityType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents information about a type of entity.\r /",
      "definition": "export class EntityType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of this entity type - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
      "jsdoc": "/**\r\n * Represents information about a type of entity.\r\n */\r",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytype",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityTypeFamilyComponent": {
      "id": "@minecraft/server.EntityTypeFamilyComponent",
      "name": "EntityTypeFamilyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Identifier of this entity type - for example,\r 'minecraft:skeleton'.",
      "definition": "export class EntityTypeFamilyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:type_family';\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTypeFamilies(): string[];\r\n    /**\r\n     * @throws This function can throw errors.\r\n     */\r\n    hasTypeFamily(typeFamily: string): boolean;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Identifier of this entity type - for example,\r\n     * 'minecraft:skeleton'.\r\n     *\r\n     */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "type_family'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getTypeFamilies",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getTypeFamilies(): string[]"
        },
        {
          "name": "hasTypeFamily",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasTypeFamily(typeFamily: string): boolean"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytypefamilycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityTypes": {
      "id": "@minecraft/server.EntityTypes",
      "name": "EntityTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Used for accessing all entity types currently available for\r use within the world.\r /",
      "definition": "export class EntityTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Retrieves an entity type using a string-based identifier.\r\n     *\r\n     */\r\n    static get(identifier: string): EntityType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves a set of all entity types within this world.\r\n     *\r\n     */\r\n    static getAll(): EntityType[];\r\n}\r",
      "jsdoc": "/**\r\n * Used for accessing all entity types currently available for\r\n * use within the world.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "EntityType | undefined",
          "accessibility": "public",
          "signature": "get(identifier: string): EntityType | undefined"
        },
        {
          "name": "getAll",
          "parameters": [],
          "returnType": "EntityType[]",
          "accessibility": "public",
          "signature": "getAll(): EntityType[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytypes",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityUnderwaterMovementComponent": {
      "id": "@minecraft/server.EntityUnderwaterMovementComponent",
      "name": "EntityUnderwaterMovementComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the general movement speed underwater of this\r entity.\r /",
      "definition": "export class EntityUnderwaterMovementComponent extends EntityAttributeComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:underwater_movement';\r\n}\r",
      "jsdoc": "/**\r\n * Defines the general movement speed underwater of this\r\n * entity.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "underwater_movement'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityAttributeComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityunderwatermovementcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityVariantComponent": {
      "id": "@minecraft/server.EntityVariantComponent",
      "name": "EntityVariantComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Used to differentiate the component group of a variant of an\r entity from others. (e.g. ocelot, villager).\r /",
      "definition": "export class EntityVariantComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Current value for variant for this entity, as specified via\r\n     * components.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly value: number;\r\n    static readonly componentId = 'minecraft:variant';\r\n}\r",
      "jsdoc": "/**\r\n * Used to differentiate the component group of a variant of an\r\n * entity from others. (e.g. ocelot, villager).\r\n */\r",
      "properties": [
        {
          "name": "value",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "variant'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityvariantcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntityWantsJockeyComponent": {
      "id": "@minecraft/server.EntityWantsJockeyComponent",
      "name": "EntityWantsJockeyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity wants\r to become a jockey.\r /",
      "definition": "export class EntityWantsJockeyComponent extends EntityComponent {\n    private constructor();\r\n    static readonly componentId = 'minecraft:wants_jockey';\r\n}\r",
      "jsdoc": "/**\r\n * When added, this component signifies that this entity wants\r\n * to become a jockey.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "wants_jockey'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitywantsjockeycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ExplosionAfterEvent": {
      "id": "@minecraft/server.ExplosionAfterEvent",
      "name": "ExplosionAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an explosion that has\r happened.\r /",
      "definition": "export class ExplosionAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where the explosion has occurred.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * A collection of blocks impacted by this explosion event.\r\n     *\r\n     */\r\n    getImpactedBlocks(): Block[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * happened.\r\n */\r",
      "properties": [
        {
          "name": "dimension",
          "type": "Dimension",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getImpactedBlocks",
          "parameters": [],
          "returnType": "Block[]",
          "accessibility": "public",
          "signature": "getImpactedBlocks(): Block[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ExplosionAfterEventSignal": {
      "id": "@minecraft/server.ExplosionAfterEventSignal",
      "name": "ExplosionAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an explosion\r occurs.\r /",
      "definition": "export class ExplosionAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an explosion\r\n     * occurs.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ExplosionAfterEvent) => void): (arg0: ExplosionAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an explosion\r\n     * occurs.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ExplosionAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when an explosion\r\n * occurs.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ExplosionBeforeEvent": {
      "id": "@minecraft/server.ExplosionBeforeEvent",
      "name": "ExplosionBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an explosion that has\r happened.\r /",
      "definition": "export class ExplosionBeforeEvent extends ExplosionAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the explosion event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Updates a collection of blocks impacted by this explosion\r\n     * event.\r\n     *\r\n     * @param blocks\r\n     * New list of blocks that are impacted by this explosion.\r\n     */\r\n    setImpactedBlocks(blocks: Block[]): void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an explosion that has\r\n * happened.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "setImpactedBlocks",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setImpactedBlocks(blocks: Block[]): void"
        }
      ],
      "extends": "ExplosionAfterEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionbeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ExplosionBeforeEventSignal": {
      "id": "@minecraft/server.ExplosionBeforeEventSignal",
      "name": "ExplosionBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before an explosion\r occurs.\r /",
      "definition": "export class ExplosionBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when before an explosion\r\n     * occurs. The callback can optionally change or cancel\r\n     * explosion behavior.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ExplosionBeforeEvent) => void): (arg0: ExplosionBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called from before when an\r\n     * explosion would occur.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ExplosionBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to before an explosion\r\n * occurs.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionbeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.FeedItem": {
      "id": "@minecraft/server.FeedItem",
      "name": "FeedItem",
      "type": "class",
      "module": "@minecraft/server",
      "description": "As part of the Healable component, represents a specific\r item that can be fed to an entity to cause health effects.\r /",
      "definition": "export class FeedItem {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The amount of health this entity gains when fed this item.\r\n     * This number is an integer starting at 0. Sample values can\r\n     * go as high as 40.\r\n     *\r\n     */\r\n    readonly healAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of type of item that can be fed. If a namespace\r\n     * is not specified, 'minecraft:' is assumed. Example values\r\n     * include 'wheat' or 'golden_apple'.\r\n     *\r\n     */\r\n    readonly item: string;\r\n    /**\r\n     * @remarks\r\n     * As part of the Healable component, an optional collection of\r\n     * side effects that can occur from being fed an item.\r\n     *\r\n     */\r\n    getEffects(): FeedItemEffect[];\r\n}\r",
      "jsdoc": "/**\r\n * As part of the Healable component, represents a specific\r\n * item that can be fed to an entity to cause health effects.\r\n */\r",
      "properties": [
        {
          "name": "healAmount",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "item",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getEffects",
          "parameters": [],
          "returnType": "FeedItemEffect[]",
          "accessibility": "public",
          "signature": "getEffects(): FeedItemEffect[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "feeditem",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.FeedItemEffect": {
      "id": "@minecraft/server.FeedItemEffect",
      "name": "FeedItemEffect",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents an effect that is applied as a result of a food\r item being fed to an entity.\r /",
      "definition": "export class FeedItemEffect {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Gets an amplifier that may have been applied to this effect.\r\n     * Valid values are integers starting at 0 and up - but usually\r\n     * ranging between 0 and 4.\r\n     *\r\n     */\r\n    readonly amplifier: number;\r\n    /**\r\n     * @remarks\r\n     * Chance that this effect is applied as a result of the entity\r\n     * being fed this item. Valid values range between 0 and 1.\r\n     *\r\n     */\r\n    readonly chance: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the duration, in ticks, of this effect.\r\n     *\r\n     */\r\n    readonly duration: number;\r\n    /**\r\n     * @remarks\r\n     * Gets the identifier of the effect to apply. Example values\r\n     * include 'fire_resistance' or 'regeneration'.\r\n     *\r\n     */\r\n    readonly name: string;\r\n}\r",
      "jsdoc": "/**\r\n * Represents an effect that is applied as a result of a food\r\n * item being fed to an entity.\r\n */\r",
      "properties": [
        {
          "name": "amplifier",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "chance",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "duration",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "name",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "feeditemeffect",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.FluidContainer": {
      "id": "@minecraft/server.FluidContainer",
      "name": "FluidContainer",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents constants related to fluid containers.\r /",
      "definition": "export class FluidContainer {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Constant that represents the maximum fill level of a fluid\r\n     * container.\r\n     *\r\n     */\r\n    static readonly maxFillLevel = 6;\r\n    /**\r\n     * @remarks\r\n     * Constant that represents the minimum fill level of a fluid\r\n     * container.\r\n     *\r\n     */\r\n    static readonly minFillLevel = 0;\r\n}\r",
      "jsdoc": "/**\r\n * Represents constants related to fluid containers.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "fluidcontainer",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.GameRuleChangeAfterEvent": {
      "id": "@minecraft/server.GameRuleChangeAfterEvent",
      "name": "GameRuleChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a changed world.gameRules\r property.\r /",
      "definition": "export class GameRuleChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The rule identifier pertaining to the changed\r\n     * world.gameRules property.\r\n     *\r\n     */\r\n    readonly rule: GameRule;\r\n    /**\r\n     * @remarks\r\n     * The value of the world.gameRules property after being\r\n     * changed.\r\n     *\r\n     */\r\n    readonly value: boolean | number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a changed world.gameRules\r\n * property.\r\n */\r",
      "properties": [
        {
          "name": "rule",
          "type": "GameRule",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "value",
          "type": "boolean | number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamerulechangeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.GameRuleChangeAfterEventSignal": {
      "id": "@minecraft/server.GameRuleChangeAfterEventSignal",
      "name": "GameRuleChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a\r world.gameRules property has changed.\r /",
      "definition": "export class GameRuleChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a world.gameRules\r\n     * property is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: GameRuleChangeAfterEvent) => void): (arg0: GameRuleChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a world.gameRules\r\n     * property is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: GameRuleChangeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a\r\n * world.gameRules property has changed.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamerulechangeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.GameRules": {
      "id": "@minecraft/server.GameRules",
      "name": "GameRules",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the game rules for a world experience.\r /",
      "definition": "export class GameRules {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandBlockOutput: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandBlocksEnabled: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doDayLightCycle: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doEntityDrops: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doFireTick: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doImmediateRespawn: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doInsomnia: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doLimitedCrafting: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doMobLoot: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doMobSpawning: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doTileDrops: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    doWeatherCycle: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    drowningDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fallDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    fireDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    freezeDamage: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    functionCommandLimit: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    keepInventory: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    maxCommandChainLength: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    mobGriefing: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    naturalRegeneration: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    playersSleepingPercentage: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    projectilesCanBreakBlocks: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    pvp: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    randomTickSpeed: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    recipesUnlock: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    respawnBlocksExplode: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    sendCommandFeedback: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showBorderEffect: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showCoordinates: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showDaysPlayed: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showDeathMessages: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showRecipeMessages: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    showTags: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    spawnRadius: number;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    tntExplodes: boolean;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    tntExplosionDropDecay: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Represents the game rules for a world experience.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamerules",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.InputInfo": {
      "id": "@minecraft/server.InputInfo",
      "name": "InputInfo",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains the input information for a client instance.\r /",
      "definition": "export class InputInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The last input mode used by the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly lastInputModeUsed: InputMode;\r\n    /**\r\n     * @remarks\r\n     * Whether the player touch input only affects the touchbar or\r\n     * not.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly touchOnlyAffectsHotbar: boolean;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getButtonState(button: InputButton): ButtonState;\r\n    /**\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getMovementVector(): Vector2;\r\n}\r",
      "jsdoc": "/**\r\n * Contains the input information for a client instance.\r\n */\r",
      "properties": [
        {
          "name": "lastInputModeUsed",
          "type": "InputMode",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "touchOnlyAffectsHotbar",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getButtonState",
          "parameters": [],
          "returnType": "ButtonState",
          "accessibility": "public",
          "signature": "getButtonState(button: InputButton): ButtonState"
        },
        {
          "name": "getMovementVector",
          "parameters": [],
          "returnType": "Vector2",
          "accessibility": "public",
          "signature": "getMovementVector(): Vector2"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputinfo",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCompleteUseAfterEvent": {
      "id": "@minecraft/server.ItemCompleteUseAfterEvent",
      "name": "ItemCompleteUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item completing\r being charged.\r /",
      "definition": "export class ItemCompleteUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that has completed charging.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged.\r\n */\r",
      "properties": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "useDuration",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcompleteuseafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCompleteUseAfterEventSignal": {
      "id": "@minecraft/server.ItemCompleteUseAfterEventSignal",
      "name": "ItemCompleteUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to the completion of\r charging for a chargeable item.\r /",
      "definition": "export class ItemCompleteUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * completes charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemCompleteUseAfterEvent) => void): (arg0: ItemCompleteUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * completes charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemCompleteUseAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to the completion of\r\n * charging for a chargeable item.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcompleteuseaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCompleteUseEvent": {
      "id": "@minecraft/server.ItemCompleteUseEvent",
      "name": "ItemCompleteUseEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item completing\r being charged.\r /",
      "definition": "export class ItemCompleteUseEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that has completed charging.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged.\r\n */\r",
      "properties": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcompleteuseevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponent": {
      "id": "@minecraft/server.ItemComponent",
      "name": "ItemComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base class for item components.\r /",
      "definition": "export class ItemComponent extends Component {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Base class for item components.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Component",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentBeforeDurabilityDamageEvent": {
      "id": "@minecraft/server.ItemComponentBeforeDurabilityDamageEvent",
      "name": "ItemComponentBeforeDurabilityDamageEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an item before it is damaged\r from hitting an entity.\r /",
      "definition": "export class ItemComponentBeforeDurabilityDamageEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The attacking entity.\r\n     *\r\n     */\r\n    readonly attackingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The damage applied to the item's durability when the event\r\n     * occurs.\r\n     *\r\n     */\r\n    durabilityDamage: number;\r\n    /**\r\n     * @remarks\r\n     * The entity being hit.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to hit the entity.\r\n     *\r\n     */\r\n    itemStack?: ItemStack;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an item before it is damaged\r\n * from hitting an entity.\r\n */\r",
      "properties": [
        {
          "name": "attackingEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hitEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentbeforedurabilitydamageevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentCompleteUseEvent": {
      "id": "@minecraft/server.ItemComponentCompleteUseEvent",
      "name": "ItemComponentCompleteUseEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item completing\r being charged via a component.\r /",
      "definition": "export class ItemComponentCompleteUseEvent extends ItemCompleteUseEvent {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a chargeable item completing\r\n * being charged via a component.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "ItemCompleteUseEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentcompleteuseevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentConsumeEvent": {
      "id": "@minecraft/server.ItemComponentConsumeEvent",
      "name": "ItemComponentConsumeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a food item being consumed.\r /",
      "definition": "export class ItemComponentConsumeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack that was consumed.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The source entity that consumed the item.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a food item being consumed.\r\n */\r",
      "properties": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentconsumeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentHitEntityEvent": {
      "id": "@minecraft/server.ItemComponentHitEntityEvent",
      "name": "ItemComponentHitEntityEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding when an item is used to hit\r an entity.\r /",
      "definition": "export class ItemComponentHitEntityEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The attacking entity.\r\n     *\r\n     */\r\n    readonly attackingEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * Whether the hit landed or had any effect.\r\n     *\r\n     */\r\n    readonly hadEffect: boolean;\r\n    /**\r\n     * @remarks\r\n     * The entity being hit.\r\n     *\r\n     */\r\n    readonly hitEntity: Entity;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to hit the entity.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding when an item is used to hit\r\n * an entity.\r\n */\r",
      "properties": [
        {
          "name": "attackingEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hadEffect",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hitEntity",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponenthitentityevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentMineBlockEvent": {
      "id": "@minecraft/server.ItemComponentMineBlockEvent",
      "name": "ItemComponentMineBlockEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding the mining of a block using\r an item.\r /",
      "definition": "export class ItemComponentMineBlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block impacted by this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The item stack used to mine the block.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that was mined.\r\n     *\r\n     */\r\n    readonly minedBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The entity that mined the block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding the mining of a block using\r\n * an item.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minedBlockPermutation",
          "type": "BlockPermutation",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentmineblockevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentRegistry": {
      "id": "@minecraft/server.ItemComponentRegistry",
      "name": "ItemComponentRegistry",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides the functionality for registering custom components\r for items.\r /",
      "definition": "export class ItemComponentRegistry {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers an item custom component that can be used in item\r\n     * JSON configuration.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param name\r\n     * The id that represents this custom component. Must have a\r\n     * namespace. This id can be specified in a item's JSON\r\n     * configuration under the 'minecraft:custom_components' item\r\n     * component.\r\n     * @param itemCustomComponent\r\n     * The collection of event functions that will be called when\r\n     * the event occurs on an item using this custom component id.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CustomComponentInvalidRegistryError}\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link ItemCustomComponentAlreadyRegisteredError}\r\n     *\r\n     * {@link ItemCustomComponentReloadNewComponentError}\r\n     *\r\n     * {@link ItemCustomComponentReloadNewEventError}\r\n     *\r\n     * {@link ItemCustomComponentReloadVersionError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    registerCustomComponent(name: string, itemCustomComponent: ItemCustomComponent): void;\r\n}\r",
      "jsdoc": "/**\r\n * Provides the functionality for registering custom components\r\n * for items.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "registerCustomComponent",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "registerCustomComponent(name: string, itemCustomComponent: ItemCustomComponent): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentregistry",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentUseEvent": {
      "id": "@minecraft/server.ItemComponentUseEvent",
      "name": "ItemComponentUseEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding the use of an item.\r /",
      "definition": "export class ItemComponentUseEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack when the item was used.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The player who used the item.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding the use of an item.\r\n */\r",
      "properties": [
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentuseevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemComponentUseOnEvent": {
      "id": "@minecraft/server.ItemComponentUseOnEvent",
      "name": "ItemComponentUseOnEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding the use of an item on a block\r via a component.\r /",
      "definition": "export class ItemComponentUseOnEvent extends ItemUseOnEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The entity that used the item on the block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n    /**\r\n     * @remarks\r\n     * The block permutation that the item was used on.\r\n     *\r\n     */\r\n    readonly usedOnBlockPermutation: BlockPermutation;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding the use of an item on a block\r\n * via a component.\r\n */\r",
      "properties": [
        {
          "name": "source",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "usedOnBlockPermutation",
          "type": "BlockPermutation",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "ItemUseOnEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentuseonevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCompostableComponent": {
      "id": "@minecraft/server.ItemCompostableComponent",
      "name": "ItemCompostableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present, the item can be composted in the composter\r block if the composting chance is in the range [1 - 100].\r /",
      "definition": "export class ItemCompostableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This is the percent chance of the item composting in the\r\n     * composter block and generating a compost layer. Note this\r\n     * api will also return the composting chance for vanilla items\r\n     * that are compostable but do not use the compostable item\r\n     * component.\r\n     *\r\n     * @throws\r\n     * Throws if value outside the range [1 - 100]\r\n     */\r\n    readonly compostingChance: number;\r\n    static readonly componentId = 'minecraft:compostable';\r\n}\r",
      "jsdoc": "/**\r\n * When present, the item can be composted in the composter\r\n * block if the composting chance is in the range [1 - 100].\r\n */\r",
      "properties": [
        {
          "name": "compostingChance",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "compostable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "ItemComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcompostablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCooldownComponent": {
      "id": "@minecraft/server.ItemCooldownComponent",
      "name": "ItemCooldownComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item has a cooldown effect\r when used by entities.\r /",
      "definition": "export class ItemCooldownComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Represents the cooldown category that this item is\r\n     * associated with.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly cooldownCategory: string;\r\n    /**\r\n     * @remarks\r\n     * Amount of time, in ticks, it will take this item to\r\n     * cooldown.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly cooldownTicks: number;\r\n    static readonly componentId = 'minecraft:cooldown';\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getCooldownTicksRemaining(player: Player): number;\r\n    /**\r\n     * @remarks\r\n     * Will return true if the item is the cooldown category passed\r\n     * in and false otherwise.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cooldownCategory\r\n     * The cooldown category that might be associated with this\r\n     * item.\r\n     * @returns\r\n     * True if the item is the given cooldown category.\r\n     * @throws This function can throw errors.\r\n     */\r\n    isCooldownCategory(cooldownCategory: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Starts a new cooldown period for this item.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    startCooldown(player: Player): void;\r\n}\r",
      "jsdoc": "/**\r\n * When present on an item, this item has a cooldown effect\r\n * when used by entities.\r\n */\r",
      "properties": [
        {
          "name": "cooldownCategory",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "cooldownTicks",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "cooldown'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getCooldownTicksRemaining",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getCooldownTicksRemaining(player: Player): number"
        },
        {
          "name": "isCooldownCategory",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isCooldownCategory(cooldownCategory: string): boolean"
        },
        {
          "name": "startCooldown",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "startCooldown(player: Player): void"
        }
      ],
      "extends": "ItemComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcooldowncomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCustomComponentInstance": {
      "id": "@minecraft/server.ItemCustomComponentInstance",
      "name": "ItemCustomComponentInstance",
      "type": "class",
      "module": "@minecraft/server",
      "description": "An instance of a custom component on an item.\r /",
      "definition": "export class ItemCustomComponentInstance extends ItemComponent {\n    private constructor();\r\n    readonly customComponentParameters: CustomComponentParameters;\r\n}\r",
      "jsdoc": "/**\r\n * An instance of a custom component on an item.\r\n */\r",
      "properties": [
        {
          "name": "customComponentParameters",
          "type": "CustomComponentParameters",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "ItemComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentinstance",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemDurabilityComponent": {
      "id": "@minecraft/server.ItemDurabilityComponent",
      "name": "ItemDurabilityComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item can take damage in the\r process of being used. Note that this component only applies\r to data-driven items.\r ```typescript\r  function giveHurtDiamondSword(\r     targetLocation: DimensionLocation\r ) {\r   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r    const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r    if (durabilityComponent !== undefined) {\r     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r   }\r    for (const player of world.getAllPlayers()) {\r     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r     if (inventory && inventory.container) {\r       inventory.container.addItem(hurtDiamondSword);\r     }\r   }\r }\r ```\r /",
      "definition": "export class ItemDurabilityComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the current damage level of this particular item.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    damage: number;\r\n    /**\r\n     * @remarks\r\n     * Represents the amount of damage that this item can take\r\n     * before breaking.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly maxDurability: number;\r\n    static readonly componentId = 'minecraft:durability';\r\n    /**\r\n     * @remarks\r\n     * Returns the maximum chance that this item would be damaged\r\n     * using the damageRange property, given an unbreaking\r\n     * enchantment level.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param unbreakingEnchantmentLevel\r\n     * Unbreaking factor to consider in factoring the damage\r\n     * chance. Incoming unbreaking parameter must be within the\r\n     * range [0, 3].\r\n     * Defaults to: 0\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDamageChance(unbreakingEnchantmentLevel?: number): number;\r\n    /**\r\n     * @remarks\r\n     * A range of numbers that is used to calculate the damage\r\n     * chance for an item. The damage chance will fall within this\r\n     * range.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getDamageChanceRange(): minecraftcommon.NumberRange;\r\n}\r",
      "jsdoc": "/**\r\n * When present on an item, this item can take damage in the\r\n * process of being used. Note that this component only applies\r\n * to data-driven items.\r\n * @example giveHurtDiamondSword.ts\r\n * ```typescript\r\n * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function giveHurtDiamondSword(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n *\r\n *   const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n *\r\n *   if (durabilityComponent !== undefined) {\r\n *     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n *   }\r\n *\r\n *   for (const player of world.getAllPlayers()) {\r\n *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n *     if (inventory && inventory.container) {\r\n *       inventory.container.addItem(hurtDiamondSword);\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "maxDurability",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "durability'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getDamageChance",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getDamageChance(unbreakingEnchantmentLevel?: number): number"
        },
        {
          "name": "getDamageChanceRange",
          "parameters": [],
          "returnType": "minecraftcommon.NumberRange",
          "accessibility": "public",
          "signature": "getDamageChanceRange(): minecraftcommon.NumberRange"
        }
      ],
      "extends": "ItemComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemdurabilitycomponent",
        "class"
      ],
      "examples": [
        {
          "title": "giveHurtDiamondSword.ts",
          "code": "import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction giveHurtDiamondSword(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n\n  const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n\n  if (durabilityComponent !== undefined) {\r\n    durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n  }\r\n\n  for (const player of world.getAllPlayers()) {\r\n    const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n    if (inventory && inventory.container) {\r\n      inventory.container.addItem(hurtDiamondSword);\r\n    }\r\n  }\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.ItemDyeableComponent": {
      "id": "@minecraft/server.ItemDyeableComponent",
      "name": "ItemDyeableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item can be dyed.\r /",
      "definition": "export class ItemDyeableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Sets and returns the current color of the item.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    color?: RGB;\r\n    /**\r\n     * @remarks\r\n     * Returns the default color of the item.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly defaultColor?: RGB;\r\n    static readonly componentId = 'minecraft:dyeable';\r\n}\r",
      "jsdoc": "/**\r\n * When present on an item, this item can be dyed.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "dyeable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "ItemComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemdyeablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemEnchantableComponent": {
      "id": "@minecraft/server.ItemEnchantableComponent",
      "name": "ItemEnchantableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item can have enchantments\r applied to it.\r /",
      "definition": "export class ItemEnchantableComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly slots: EnchantmentSlot[];\r\n    static readonly componentId = 'minecraft:enchantable';\r\n    /**\r\n     * @remarks\r\n     * Adds an enchantment to the item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantment\r\n     * The enchantment interface to be added.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if the enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     * ScriptItemEnchantmentTypeNotCompatibleError: Exception\r\n     * thrown if the enchantment is not compatible with the item\r\n     * stack.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeNotCompatibleError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addEnchantment(enchantment: Enchantment): void;\r\n    /**\r\n     * @remarks\r\n     * Adds a list of enchantments to the item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantments\r\n     * The list of enchantments to be added.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if any\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if any enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     * ScriptItemEnchantmentTypeNotCompatibleError: Exception\r\n     * thrown if any enchantment is not compatible with the item\r\n     * stack.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeNotCompatibleError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    addEnchantments(enchantments: Enchantment[]): void;\r\n    /**\r\n     * @remarks\r\n     * Checks whether an enchantment can be added to the item\r\n     * stack.\r\n     *\r\n     * @param enchantment\r\n     * The enchantment interface to be added.\r\n     * @returns\r\n     * Returns true if the enchantment can be added to the item\r\n     * stack.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     * ScriptItemEnchantmentLevelOutOfBoundsError: Exception thrown\r\n     * if the enchantment level is outside the allowable range for\r\n     * the given enchantment type.\r\n     *\r\n     *\r\n     * {@link EnchantmentLevelOutOfBoundsError}\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    canAddEnchantment(enchantment: Enchantment): boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets the enchantment of a given type from the item stack.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to get.\r\n     * @returns\r\n     * Returns the enchantment if it exists on the item stack.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    getEnchantment(enchantmentType: EnchantmentType | string): Enchantment | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets all enchantments on the item stack.\r\n     *\r\n     * @returns\r\n     * Returns a list of enchantments on the item stack.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEnchantments(): Enchantment[];\r\n    /**\r\n     * @remarks\r\n     * Checks whether an item stack has a given enchantment type.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to check for.\r\n     * @returns\r\n     * Returns true if the item stack has the enchantment type.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     */\r\n    hasEnchantment(enchantmentType: EnchantmentType | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes all enchantments applied to this item stack.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeAllEnchantments(): void;\r\n    /**\r\n     * @remarks\r\n     * Removes an enchantment of the given type.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param enchantmentType\r\n     * The enchantment type to remove.\r\n     * @throws\r\n     * ScriptItemEnchantmentUnknownIdError: Exception thrown if the\r\n     * enchantment type does not exist.\r\n     *\r\n     *\r\n     * {@link EnchantmentTypeUnknownIdError}\r\n     *\r\n     * {@link Error}\r\n     */\r\n    removeEnchantment(enchantmentType: EnchantmentType | string): void;\r\n}\r",
      "jsdoc": "/**\r\n * When present on an item, this item can have enchantments\r\n * applied to it.\r\n */\r",
      "properties": [
        {
          "name": "slots",
          "type": "EnchantmentSlot[]",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "enchantable'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "addEnchantment",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "addEnchantment(enchantment: Enchantment): void"
        },
        {
          "name": "addEnchantments",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "addEnchantments(enchantments: Enchantment[]): void"
        },
        {
          "name": "canAddEnchantment",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "canAddEnchantment(enchantment: Enchantment): boolean"
        },
        {
          "name": "getEnchantment",
          "parameters": [],
          "returnType": "Enchantment | undefined",
          "accessibility": "public",
          "signature": "getEnchantment(enchantmentType: EnchantmentType | string): Enchantment | undefined"
        },
        {
          "name": "getEnchantments",
          "parameters": [],
          "returnType": "Enchantment[]",
          "accessibility": "public",
          "signature": "getEnchantments(): Enchantment[]"
        },
        {
          "name": "hasEnchantment",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasEnchantment(enchantmentType: EnchantmentType | string): boolean"
        },
        {
          "name": "removeAllEnchantments",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "removeAllEnchantments(): void"
        },
        {
          "name": "removeEnchantment",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "removeEnchantment(enchantmentType: EnchantmentType | string): void"
        }
      ],
      "extends": "ItemComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemenchantablecomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemFoodComponent": {
      "id": "@minecraft/server.ItemFoodComponent",
      "name": "ItemFoodComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item is consumable by\r entities. Note that this component only applies to\r data-driven items.\r /",
      "definition": "export class ItemFoodComponent extends ItemComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, the player can always eat this item (even when not\r\n     * hungry).\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly canAlwaysEat: boolean;\r\n    /**\r\n     * @remarks\r\n     * Represents how much nutrition this food item will give an\r\n     * entity when eaten.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly nutrition: number;\r\n    /**\r\n     * @remarks\r\n     * When an item is eaten, this value is used according to this\r\n     * formula (nutrition * saturation_modifier * 2) to apply a\r\n     * saturation buff.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly saturationModifier: number;\r\n    /**\r\n     * @remarks\r\n     * When specified, converts the active item to the one\r\n     * specified by this property.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly usingConvertsTo: string;\r\n    static readonly componentId = 'minecraft:food';\r\n}\r",
      "jsdoc": "/**\r\n * When present on an item, this item is consumable by\r\n * entities. Note that this component only applies to\r\n * data-driven items.\r\n */\r",
      "properties": [
        {
          "name": "canAlwaysEat",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "nutrition",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "saturationModifier",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "usingConvertsTo",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minecraft",
          "type": "food'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "ItemComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemfoodcomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemReleaseUseAfterEvent": {
      "id": "@minecraft/server.ItemReleaseUseAfterEvent",
      "name": "ItemReleaseUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item when the\r player has finished using the item and released the build\r action.\r /",
      "definition": "export class ItemReleaseUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the item stack that triggered this item event.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a chargeable item when the\r\n * player has finished using the item and released the build\r\n * action.\r\n */\r",
      "properties": [
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "useDuration",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemreleaseuseafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemReleaseUseAfterEventSignal": {
      "id": "@minecraft/server.ItemReleaseUseAfterEventSignal",
      "name": "ItemReleaseUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to the releasing of\r charging for a chargeable item.\r /",
      "definition": "export class ItemReleaseUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * is released from charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemReleaseUseAfterEvent) => void): (arg0: ItemReleaseUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * is released from charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemReleaseUseAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to the releasing of\r\n * charging for a chargeable item.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemreleaseuseaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemStack": {
      "id": "@minecraft/server.ItemStack",
      "name": "ItemStack",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines a collection of items.\r ```typescript\r  function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r    const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r    log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r    log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r    log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r }\r ```\r ```typescript\r  function givePlayerEquipment(\r     targetLocation: DimensionLocation\r ) {\r   const players = world.getAllPlayers();\r    const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r   const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r    const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r   if (equipmentCompPlayer) {\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r   }\r    const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r   if (equipmentCompArmorStand) {\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r   }\r }\r ```\r ```typescript\r  function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r    targetLocation.dimension.spawnItem(featherItem, targetLocation);\r   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r }\r ```\r /",
      "definition": "export class ItemStack {\n    /**\r\n     * @remarks\r\n     * Number of the items in the stack. Valid values range between\r\n     * 1-255. The provided value will be clamped to the item's\r\n     * maximum stack size.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the value is outside the range of 1-255.\r\n     */\r\n    amount: number;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the item is stackable. An item is considered\r\n     * stackable if the item's maximum stack size is greater than 1\r\n     * and the item does not contain any custom data or properties.\r\n     *\r\n     */\r\n    readonly isStackable: boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets whether the item is kept on death.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    keepOnDeath: boolean;\r\n    /**\r\n     * @remarks\r\n     * Key for the localization of this items's name used in .lang\r\n     * files.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     */\r\n    readonly localizationKey: string;\r\n    /**\r\n     * @remarks\r\n     * Gets or sets the item's lock mode. The default value is\r\n     * `ItemLockMode.none`.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    lockMode: ItemLockMode;\r\n    /**\r\n     * @remarks\r\n     * The maximum stack size. This value varies depending on the\r\n     * type of item. For example, torches have a maximum stack size\r\n     * of 64, while eggs have a maximum stack size of 16.\r\n     *\r\n     */\r\n    readonly maxAmount: number;\r\n    /**\r\n     * @remarks\r\n     * Given name of this stack of items. The name tag is displayed\r\n     * when hovering over the item. Setting the name tag to an\r\n     * empty string or `undefined` will remove the name tag.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the length exceeds 255 characters.\r\n     */\r\n    nameTag?: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the item.\r\n     *\r\n     */\r\n    readonly 'type': ItemType;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the type of items for the stack. If a\r\n     * namespace is not specified, 'minecraft:' is assumed.\r\n     * Examples include 'wheat' or 'apple'.\r\n     *\r\n     */\r\n    readonly typeId: string;\r\n    /**\r\n     * @remarks\r\n     * Creates a new instance of a stack of items for use in the\r\n     * world.\r\n     *\r\n     * @param itemType\r\n     * Type of item to create. See the {@link\r\n     * @minecraft/vanilla-data.MinecraftItemTypes} enumeration for\r\n     * a list of standard item types in Minecraft experiences.\r\n     * @param amount\r\n     * Number of items to place in the stack, between 1-255. The\r\n     * provided value will be clamped to the item's maximum stack\r\n     * size. Note that certain items can only have one item in the\r\n     * stack.\r\n     * Defaults to: 1\r\n     * @throws\r\n     * Throws if `itemType` is invalid, or if `amount` is outside\r\n     * the range of 1-255.\r\n     */\r\n    constructor(itemType: ItemType | string, amount?: number);\r\n    /**\r\n     * @remarks\r\n     * Clears all dynamic properties that have been set on this\r\n     * item stack.\r\n     *\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Creates an exact copy of the item stack, including any\r\n     * custom data or properties.\r\n     *\r\n     * @returns\r\n     * Returns a copy of this item stack.\r\n     */\r\n    clone(): ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Get the list of block types this item can break in Adventure\r\n     * mode.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getCanDestroy(): string[];\r\n    /**\r\n     * @remarks\r\n     * Get the list of block types this item can be placed on in\r\n     * Adventure mode.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getCanPlaceOn(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets a component (that represents additional capabilities)\r\n     * for an item stack.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:food'). If\r\n     * no namespace prefix is specified, 'minecraft:' is assumed.\r\n     * Available component IDs are those in the {@link\r\n     * ItemComponentTypes} enum and custom component IDs registered\r\n     * with the {@link ItemComponentRegistry}.\r\n     * @returns\r\n     * Returns the component if it exists on the item stack,\r\n     * otherwise undefined.\r\n     * @example giveHurtDiamondSword.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, ItemComponentTypes, ItemDurabilityComponent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function giveHurtDiamondSword(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r\n     *\r\n     *   const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r\n     *\r\n     *   if (durabilityComponent !== undefined) {\r\n     *     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r\n     *   }\r\n     *\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     if (inventory && inventory.container) {\r\n     *       inventory.container.addItem(hurtDiamondSword);\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    getComponent<T extends string>(componentId: T): ItemComponentReturnType<T> | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all components that are both present on this item\r\n     * stack and supported by the API.\r\n     *\r\n     */\r\n    getComponents(): ItemComponent[];\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the available set of dynamic property identifiers\r\n     * that have been used on this entity.\r\n     *\r\n     * @returns\r\n     * A string array of the dynamic properties set on this entity.\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the total size, in bytes, of all the dynamic\r\n     * properties that are currently stored for this entity. This\r\n     * includes the size of both the key and the value.  This can\r\n     * be useful for diagnosing performance warning signs - if, for\r\n     * example, an entity has many megabytes of associated dynamic\r\n     * properties, it may be slow to load on various devices.\r\n     *\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the lore value - a secondary display string - for an\r\n     * ItemStack.\r\n     *\r\n     * @returns\r\n     * An array of lore lines. If the item does not have lore,\r\n     * returns an empty array.\r\n     */\r\n    getLore(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a set of tags associated with this item stack.\r\n     *\r\n     */\r\n    getTags(): string[];\r\n    /**\r\n     * @remarks\r\n     * Returns true if the specified component is present on this\r\n     * item stack.\r\n     *\r\n     * @param componentId\r\n     * The identifier of the component (e.g., 'minecraft:food') to\r\n     * retrieve. If no namespace prefix is specified, 'minecraft:'\r\n     * is assumed.\r\n     */\r\n    hasComponent(componentId: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Checks whether this item stack has a particular tag\r\n     * associated with it.\r\n     *\r\n     * @param tag\r\n     * Tag to search for.\r\n     * @returns\r\n     * True if the Item Stack has the tag associated with it, else\r\n     * false.\r\n     */\r\n    hasTag(tag: string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns whether this item stack can be stacked with the\r\n     * given `itemStack`. This is determined by comparing the item\r\n     * type and any custom data and properties associated with the\r\n     * item stacks. The amount of each item stack is not taken into\r\n     * consideration, but for non-stackable items this will always\r\n     * return false.\r\n     *\r\n     * @param itemStack\r\n     * ItemStack to check stacking compatibility with.\r\n     * @returns\r\n     * True if the Item Stack is stackable with the itemStack\r\n     * passed in. False for non-stackable items.\r\n     */\r\n    isStackableWith(itemStack: ItemStack): boolean;\r\n    /**\r\n     * @remarks\r\n     * Version safe way of checking if an item matches.\r\n     *\r\n     * @param itemName\r\n     * Identifier of the item.\r\n     * @param states\r\n     *  Applicable only for blocks. An optional set of states to\r\n     * compare against. If states is not specified, matches checks\r\n     * against the set of types more broadly.\r\n     * @returns\r\n     * Returns a boolean whether the specified item matches.\r\n     */\r\n    matches(itemName: string, states?: Record<string, boolean | number | string>): boolean;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can break in Adventure\r\n     * mode. The block names are displayed in the item's tooltip.\r\n     * Setting the value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * String list of block types that the item can destroy.\r\n     * @throws\r\n     * Throws if any of the provided block identifiers are invalid.\r\n     * @example giveDestroyRestrictedPickaxe.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function giveDestroyRestrictedPickaxe(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const specialPickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe);\r\n     *     specialPickaxe.setCanDestroy([MinecraftItemTypes.Cobblestone, MinecraftItemTypes.Obsidian]);\r\n     *\r\n     *     const inventory = player.getComponent(\"inventory\") as EntityInventoryComponent;\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *       return;\r\n     *     }\r\n     *\r\n     *     inventory.container.addItem(specialPickaxe);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    setCanDestroy(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * The list of block types this item can be placed on in\r\n     * Adventure mode. This is only applicable to block items. The\r\n     * block names are displayed in the item's tooltip. Setting the\r\n     * value to undefined will clear the list.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param blockIdentifiers\r\n     * String list of block types that the item can be placed on.\r\n     * @throws\r\n     * Throws if any of the provided block identifiers are invalid.\r\n     * @example givePlaceRestrictedGoldBlock.ts\r\n     * ```typescript\r\n     * import { world, ItemStack, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function givePlaceRestrictedGoldBlock(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     const specialGoldBlock = new ItemStack(MinecraftItemTypes.GoldBlock);\r\n     *     specialGoldBlock.setCanPlaceOn([MinecraftItemTypes.GrassBlock, MinecraftItemTypes.Dirt]);\r\n     *\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *       return;\r\n     *     }\r\n     *\r\n     *     inventory.container.addItem(specialGoldBlock);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    setCanPlaceOn(blockIdentifiers?: string[]): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value. Note: This function\r\n     * only works with non-stackable items.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the item stack is stackable.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the lore value - a secondary display string - for an\r\n     * ItemStack. The lore list is cleared if set to an empty\r\n     * string or undefined.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param loreList\r\n     * List of lore lines. Each element in the list represents a\r\n     * new line. The maximum lore line count is 20. The maximum\r\n     * lore line length is 50 characters.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     * @example diamondAwesomeSword.ts\r\n     * ```typescript\r\n     * import { EntityComponentTypes, ItemStack, Player } from '@minecraft/server';\r\n     * import { MinecraftItemTypes } from '@minecraft/vanilla-data';\r\n     *\r\n     * function giveAwesomeSword(player: Player) {\r\n     *     const diamondAwesomeSword = new ItemStack(MinecraftItemTypes.DiamondSword, 1);\r\n     *     diamondAwesomeSword.setLore([\r\n     *         '§c§lDiamond Sword of Awesome§r',\r\n     *          '+10 coolness', '§p+4 shiny§r'\r\n     *     ]);\r\n     *\r\n     *     // hover over/select the item in your inventory to see the lore.\r\n     *     const inventory = player.getComponent(EntityComponentTypes.Inventory);\r\n     *     if (inventory === undefined || inventory.container === undefined) {\r\n     *         return;\r\n     *     }\r\n     *\r\n     *     inventory.container.setItem(0, diamondAwesomeSword);\r\n     * }\r\n     * ```\r\n     */\r\n    setLore(loreList?: string[]): void;\r\n}\r",
      "jsdoc": "/**\r\n * Defines a collection of items.\r\n * @example itemStacks.ts\r\n * ```typescript\r\n * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n *   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n *   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n *\r\n *   const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n *   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n *   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n *\r\n *   log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n *\r\n *   log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n *\r\n *   log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n *   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n * }\r\n * ```\r\n * @example givePlayerEquipment.ts\r\n * ```typescript\r\n * import { world, ItemStack, EntityEquippableComponent, EquipmentSlot, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function givePlayerEquipment(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getAllPlayers();\r\n *\r\n *   const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r\n *   const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r\n *\r\n *   const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n *   if (equipmentCompPlayer) {\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n *     equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n *   }\r\n *\r\n *   const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n *   if (equipmentCompArmorStand) {\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n *     equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n *   }\r\n * }\r\n * ```\r\n * @example spawnFeatherItem.ts\r\n * ```typescript\r\n * import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n *\r\n *   targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n *   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "isStackable",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "localizationKey",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "maxAmount",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "typeId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "clearDynamicProperties",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearDynamicProperties(): void"
        },
        {
          "name": "clone",
          "parameters": [],
          "returnType": "ItemStack",
          "accessibility": "public",
          "signature": "clone(): ItemStack"
        },
        {
          "name": "getCanDestroy",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getCanDestroy(): string[]"
        },
        {
          "name": "getCanPlaceOn",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getCanPlaceOn(): string[]"
        },
        {
          "name": "getComponents",
          "parameters": [],
          "returnType": "ItemComponent[]",
          "accessibility": "public",
          "signature": "getComponents(): ItemComponent[]"
        },
        {
          "name": "getDynamicProperty",
          "parameters": [],
          "returnType": "boolean | number | string | Vector3 | undefined",
          "accessibility": "public",
          "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
        },
        {
          "name": "getDynamicPropertyIds",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getDynamicPropertyIds(): string[]"
        },
        {
          "name": "getDynamicPropertyTotalByteCount",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getDynamicPropertyTotalByteCount(): number"
        },
        {
          "name": "getLore",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getLore(): string[]"
        },
        {
          "name": "getTags",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getTags(): string[]"
        },
        {
          "name": "hasComponent",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasComponent(componentId: string): boolean"
        },
        {
          "name": "hasTag",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasTag(tag: string): boolean"
        },
        {
          "name": "isStackableWith",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isStackableWith(itemStack: ItemStack): boolean"
        },
        {
          "name": "matches",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "matches(itemName: string, states?: Record<string, boolean | number | string>): boolean"
        },
        {
          "name": "setCanDestroy",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setCanDestroy(blockIdentifiers?: string[]): void"
        },
        {
          "name": "setCanPlaceOn",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setCanPlaceOn(blockIdentifiers?: string[]): void"
        },
        {
          "name": "setDynamicProperty",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
        },
        {
          "name": "setLore",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setLore(loreList?: string[]): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstack",
        "class"
      ],
      "examples": [
        {
          "title": "itemStacks.ts",
          "code": "import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r\n  const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r\n  const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r\n\n  const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r\n  const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r\n  const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r\n\n  log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r\n  targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r\n\n  log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r\n  targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r\n\n  log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r\n  targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r\n}"
        },
        {
          "title": "givePlayerEquipment.ts",
          "code": "import { world, ItemStack, EntityEquippableComponent, EquipmentSlot, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction givePlayerEquipment(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getAllPlayers();\r\n\n  const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r\n  const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r\n\n  const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n  if (equipmentCompPlayer) {\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n    equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n  }\r\n\n  const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r\n  if (equipmentCompArmorStand) {\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r\n    equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r\n  }\r\n}"
        },
        {
          "title": "spawnFeatherItem.ts",
          "code": "import { ItemStack, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftItemTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r\n\n  targetLocation.dimension.spawnItem(featherItem, targetLocation);\r\n  log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.ItemStartUseAfterEvent": {
      "id": "@minecraft/server.ItemStartUseAfterEvent",
      "name": "ItemStartUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item starting\r to be charged.\r /",
      "definition": "export class ItemStartUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is starting to be charged.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a chargeable item starting\r\n * to be charged.\r\n */\r",
      "properties": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "useDuration",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstartuseafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemStartUseAfterEventSignal": {
      "id": "@minecraft/server.ItemStartUseAfterEventSignal",
      "name": "ItemStartUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to the start of\r charging for a chargeable item.\r /",
      "definition": "export class ItemStartUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * starts charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStartUseAfterEvent) => void): (arg0: ItemStartUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * starts charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStartUseAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to the start of\r\n * charging for a chargeable item.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstartuseaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemStartUseOnAfterEvent": {
      "id": "@minecraft/server.ItemStartUseOnAfterEvent",
      "name": "ItemStartUseOnAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an item being used on a\r block. This event fires when a player presses the the Use\r Item / Place Block button to successfully use an item or\r place a block. Fires for the first block that is interacted\r with when performing a build action. Note: This event cannot\r be used with Hoe or Axe items.\r /",
      "definition": "export class ItemStartUseOnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that the item is used on.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that an item is being used on.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is starting to be used. Can be\r\n     * undefined in some gameplay scenarios like pushing a button\r\n     * with an empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to an item being used on a\r\n * block. This event fires when a player presses the the Use\r\n * Item / Place Block button to successfully use an item or\r\n * place a block. Fires for the first block that is interacted\r\n * with when performing a build action. Note: This event cannot\r\n * be used with Hoe or Axe items.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "blockFace",
          "type": "Direction",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstartuseonafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemStartUseOnAfterEventSignal": {
      "id": "@minecraft/server.ItemStartUseOnAfterEventSignal",
      "name": "ItemStartUseOnAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to an item starting\r being used on a block event.\r /",
      "definition": "export class ItemStartUseOnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStartUseOnAfterEvent) => void): (arg0: ItemStartUseOnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStartUseOnAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to an item starting\r\n * being used on a block event.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstartuseonaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemStopUseAfterEvent": {
      "id": "@minecraft/server.ItemStopUseAfterEvent",
      "name": "ItemStopUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item has\r finished an items use cycle, or when the player has released\r the use action with the item.\r /",
      "definition": "export class ItemStopUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is stopping being charged.\r\n     * ItemStopUseAfterEvent can be called when teleporting to a\r\n     * different dimension and this can be undefined.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n    /**\r\n     * @remarks\r\n     * Returns the time, in ticks, for the remaining duration left\r\n     * before the charge completes its cycle.\r\n     *\r\n     */\r\n    readonly useDuration: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a chargeable item has\r\n * finished an items use cycle, or when the player has released\r\n * the use action with the item.\r\n */\r",
      "properties": [
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "useDuration",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstopuseafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemStopUseAfterEventSignal": {
      "id": "@minecraft/server.ItemStopUseAfterEventSignal",
      "name": "ItemStopUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to the stopping of\r charging for an item that has a registered\r minecraft:chargeable component.\r /",
      "definition": "export class ItemStopUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a chargeable item\r\n     * stops charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStopUseAfterEvent) => void): (arg0: ItemStopUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a chargeable item\r\n     * stops charging.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStopUseAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to the stopping of\r\n * charging for an item that has a registered\r\n * minecraft:chargeable component.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstopuseaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemStopUseOnAfterEvent": {
      "id": "@minecraft/server.ItemStopUseOnAfterEvent",
      "name": "ItemStopUseOnAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an item that has stopped\r being used on a block. This event fires when a player\r successfully uses an item or places a block by pressing the\r Use Item / Place Block button. If multiple blocks are\r placed, this event will only occur once at the beginning of\r the block placement. Note: This event cannot be used with\r Hoe or Axe items.\r /",
      "definition": "export class ItemStopUseOnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that the item is used on.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is being used on a block.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to an item that has stopped\r\n * being used on a block. This event fires when a player\r\n * successfully uses an item or places a block by pressing the\r\n * Use Item / Place Block button. If multiple blocks are\r\n * placed, this event will only occur once at the beginning of\r\n * the block placement. Note: This event cannot be used with\r\n * Hoe or Axe items.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstopuseonafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemStopUseOnAfterEventSignal": {
      "id": "@minecraft/server.ItemStopUseOnAfterEventSignal",
      "name": "ItemStopUseOnAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to an item stops used\r on a block event.\r /",
      "definition": "export class ItemStopUseOnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item stops being\r\n     * used on a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemStopUseOnAfterEvent) => void): (arg0: ItemStopUseOnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used on\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemStopUseOnAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to an item stops used\r\n * on a block event.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstopuseonaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemType": {
      "id": "@minecraft/server.ItemType",
      "name": "ItemType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the type of an item - for example, Wool.\r /",
      "definition": "export class ItemType {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the identifier of the item type - for example,\r\n     * 'minecraft:apple'.\r\n     *\r\n     */\r\n    readonly id: string;\r\n}\r",
      "jsdoc": "/**\r\n * Represents the type of an item - for example, Wool.\r\n */\r",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemtype",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemTypes": {
      "id": "@minecraft/server.ItemTypes",
      "name": "ItemTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Returns the set of item types registered within Minecraft.\r /",
      "definition": "export class ItemTypes {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a specific item type, if available within Minecraft.\r\n     *\r\n     */\r\n    static get(itemId: string): ItemType | undefined;\r\n    /**\r\n     * @remarks\r\n     * Retrieves all available item types registered within\r\n     * Minecraft.\r\n     *\r\n     */\r\n    static getAll(): ItemType[];\r\n}\r",
      "jsdoc": "/**\r\n * Returns the set of item types registered within Minecraft.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "ItemType | undefined",
          "accessibility": "public",
          "signature": "get(itemId: string): ItemType | undefined"
        },
        {
          "name": "getAll",
          "parameters": [],
          "returnType": "ItemType[]",
          "accessibility": "public",
          "signature": "getAll(): ItemType[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemtypes",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemUseAfterEvent": {
      "id": "@minecraft/server.ItemUseAfterEvent",
      "name": "ItemUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an item being used on a\r block. This event fires when an item used by a player\r successfully triggers an entity interaction.\r /",
      "definition": "export class ItemUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The impacted item stack that is being used.\r\n     *\r\n     */\r\n    itemStack: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Returns the source entity that triggered this item event.\r\n     *\r\n     */\r\n    readonly source: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to an item being used on a\r\n * block. This event fires when an item used by a player\r\n * successfully triggers an entity interaction.\r\n */\r",
      "properties": [
        {
          "name": "source",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemuseafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemUseAfterEventSignal": {
      "id": "@minecraft/server.ItemUseAfterEventSignal",
      "name": "ItemUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to an item use event.\r /",
      "definition": "export class ItemUseAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemUseAfterEvent) => void): (arg0: ItemUseAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemUseAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to an item use event.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemuseaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemUseBeforeEvent": {
      "id": "@minecraft/server.ItemUseBeforeEvent",
      "name": "ItemUseBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an item being used.\r /",
      "definition": "export class ItemUseBeforeEvent extends ItemUseAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, this will cancel the item use behavior.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to an item being used.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "ItemUseAfterEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemusebeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemUseBeforeEventSignal": {
      "id": "@minecraft/server.ItemUseBeforeEventSignal",
      "name": "ItemUseBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that fire before an item is used.\r /",
      "definition": "export class ItemUseBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ItemUseBeforeEvent) => void): (arg0: ItemUseBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before an item is used.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ItemUseBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that fire before an item is used.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemusebeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemUseOnEvent": {
      "id": "@minecraft/server.ItemUseOnEvent",
      "name": "ItemUseOnEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding the use of an item on a\r block.\r /",
      "definition": "export class ItemUseOnEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block impacted by this event.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that the item was used on.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block that the item was used on.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The item stack used on the block.\r\n     *\r\n     */\r\n    readonly itemStack: ItemStack;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding the use of an item on a\r\n * block.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "blockFace",
          "type": "Direction",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "faceLocation",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemStack",
          "type": "ItemStack",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemuseonevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.LeverActionAfterEvent": {
      "id": "@minecraft/server.LeverActionAfterEvent",
      "name": "LeverActionAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a lever\r activating or deactivating.\r ```typescript\r  function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a lever\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const lever = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || lever === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   lever.setPermutation(\r     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r   );\r    world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r     const eventLoc = leverActionEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Lever activate event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
      "definition": "export class LeverActionAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * True if the lever is activated (that is, transmitting\r\n     * power).\r\n     *\r\n     */\r\n    readonly isPowered: boolean;\r\n    /**\r\n     * @remarks\r\n     * Optional player that triggered the lever activation.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to a lever\r\n * activating or deactivating.\r\n * @example leverActionEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a lever\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const lever = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || lever === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   lever.setPermutation(\r\n *     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n *   );\r\n *\r\n *   world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n *     const eventLoc = leverActionEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Lever activate event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "isPowered",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "leveractionafterevent",
        "class"
      ],
      "examples": [
        {
          "title": "leverActionEvent.ts",
          "code": "import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a lever\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const lever = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || lever === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  lever.setPermutation(\r\n    BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n  );\r\n\n  world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n    const eventLoc = leverActionEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Lever activate event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.LeverActionAfterEventSignal": {
      "id": "@minecraft/server.LeverActionAfterEventSignal",
      "name": "LeverActionAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to lever moves\r (activates or deactivates).\r ```typescript\r  function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a lever\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const lever = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || lever === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   lever.setPermutation(\r     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r   );\r    world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r     const eventLoc = leverActionEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Lever activate event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
      "definition": "export class LeverActionAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a lever is moved\r\n     * (activates or deactivates).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: LeverActionAfterEvent) => void): (arg0: LeverActionAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a lever is moved\r\n     * (activates or deactivates).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: LeverActionAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to lever moves\r\n * (activates or deactivates).\r\n * @example leverActionEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a lever\r\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n *   const lever = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (cobblestone === undefined || lever === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n *   lever.setPermutation(\r\n *     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n *   );\r\n *\r\n *   world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n *     const eventLoc = leverActionEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n *       log(\"Lever activate event at tick \" + system.currentTick);\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "leveractionaftereventsignal",
        "class"
      ],
      "examples": [
        {
          "title": "leverActionEvent.ts",
          "code": "import { world, system, BlockPermutation, LeverActionAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a lever\r\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r\n  const lever = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (cobblestone === undefined || lever === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r\n  lever.setPermutation(\r\n    BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r\n  );\r\n\n  world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r\n    const eventLoc = leverActionEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r\n      log(\"Lever activate event at tick \" + system.currentTick);\r\n    }\r\n  });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.ListBlockVolume": {
      "id": "@minecraft/server.ListBlockVolume",
      "name": "ListBlockVolume",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Volume composed of an unordered container of unique block\r locations.\r /",
      "definition": "export class ListBlockVolume extends BlockVolumeBase {\n    /**\r\n     * @remarks\r\n     * Creates a new instance of ListBlockVolume.\r\n     *\r\n     * @param locations\r\n     * Initial array of block locations that ListBlockVolume will\r\n     * be constructed with.\r\n     */\r\n    constructor(locations: Vector3[]);\r\n    /**\r\n     * @remarks\r\n     * Insert block locations into container.\r\n     *\r\n     * @param locations\r\n     * Array of block locations to be inserted into container.\r\n     */\r\n    add(locations: Vector3[]): void;\r\n    /**\r\n     * @remarks\r\n     * Remove block locations from container.\r\n     *\r\n     * @param locations\r\n     * Array of block locations to be removed from container.\r\n     */\r\n    remove(locations: Vector3[]): void;\r\n}\r",
      "jsdoc": "/**\r\n * Volume composed of an unordered container of unique block\r\n * locations.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "add",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "add(locations: Vector3[]): void"
        },
        {
          "name": "remove",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "remove(locations: Vector3[]): void"
        }
      ],
      "extends": "BlockVolumeBase",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "listblockvolume",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.MolangVariableMap": {
      "id": "@minecraft/server.MolangVariableMap",
      "name": "MolangVariableMap",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a set of additional variable values for further\r defining how rendering and animations function.\r /",
      "definition": "export class MolangVariableMap {\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.r` - Red color value [0-1]\r\n     * - `<variable_name>.g` - Green color value [0-1]\r\n     * - `<variable_name>.b` - Blue color value [0-1]\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setColorRGB(variableName: string, color: RGB): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.r` - Red color value [0-1]\r\n     * - `<variable_name>.g` - Green color value [0-1]\r\n     * - `<variable_name>.b` - Blue color value [0-1]\r\n     * - `<variable_name>.a` - Alpha (transparency) color value\r\n     * [0-1]\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setColorRGBA(variableName: string, color: RGBA): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a numeric (decimal) value within the Molang variable\r\n     * map.\r\n     *\r\n     * @param variableName\r\n     * Name of the float-based number to set.\r\n     * @param number\r\n     * Value for the Molang-based variable to set.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setFloat(variableName: string, number: number): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.speed` - Speed number provided\r\n     * - `<variable_name>.direction_x` - X value from the {@link\r\n     * Vector3} provided\r\n     * - `<variable_name>.direction_y` - Y value from the {@link\r\n     * Vector3} provided\r\n     * - `<variable_name>.direction_z` - Z value from the {@link\r\n     * Vector3} provided\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setSpeedAndDirection(variableName: string, speed: number, direction: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Adds the following variables to Molang:\r\n     * - `<variable_name>.x` - X value from the {@link Vector3}\r\n     * provided\r\n     * - `<variable_name>.y` - Y value from the {@link Vector3}\r\n     * provided\r\n     * - `<variable_name>.z` - Z value from the {@link Vector3}\r\n     * provided\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setVector3(variableName: string, vector: Vector3): void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains a set of additional variable values for further\r\n * defining how rendering and animations function.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "setColorRGB",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setColorRGB(variableName: string, color: RGB): void"
        },
        {
          "name": "setColorRGBA",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setColorRGBA(variableName: string, color: RGBA): void"
        },
        {
          "name": "setFloat",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setFloat(variableName: string, number: number): void"
        },
        {
          "name": "setSpeedAndDirection",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setSpeedAndDirection(variableName: string, speed: number, direction: Vector3): void"
        },
        {
          "name": "setVector3",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setVector3(variableName: string, vector: Vector3): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "molangvariablemap",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PistonActivateAfterEvent": {
      "id": "@minecraft/server.PistonActivateAfterEvent",
      "name": "PistonActivateAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a piston\r expanding or retracting.\r ```typescript\r  function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a couple of piston blocks\r   const piston = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (piston === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r     const eventLoc = pistonEvent.piston.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Piston event at \" +\r           system.currentTick +\r           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r       );\r     }\r   });\r }\r ```\r /",
      "definition": "export class PistonActivateAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * True if the piston is the process of expanding.\r\n     *\r\n     */\r\n    readonly isExpanding: boolean;\r\n    /**\r\n     * @remarks\r\n     * Contains additional properties and details of the piston.\r\n     *\r\n     */\r\n    readonly piston: BlockPistonComponent;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to a piston\r\n * expanding or retracting.\r\n * @example pistonAfterEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a couple of piston blocks\r\n *   const piston = targetLocation.dimension.getBlock(targetLocation);\r\n *   const button = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y + 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *\r\n *   if (piston === undefined || button === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n *\r\n *   world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n *     const eventLoc = pistonEvent.piston.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Piston event at \" +\r\n *           system.currentTick +\r\n *           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n *           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "isExpanding",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "piston",
          "type": "BlockPistonComponent",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pistonactivateafterevent",
        "class"
      ],
      "examples": [
        {
          "title": "pistonAfterEvent.ts",
          "code": "import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a couple of piston blocks\r\n  const piston = targetLocation.dimension.getBlock(targetLocation);\r\n  const button = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y + 1,\r\n    z: targetLocation.z,\r\n  });\r\n\n  if (piston === undefined || button === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n\n  world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n    const eventLoc = pistonEvent.piston.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Piston event at \" +\r\n          system.currentTick +\r\n          (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n          (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.PistonActivateAfterEventSignal": {
      "id": "@minecraft/server.PistonActivateAfterEventSignal",
      "name": "PistonActivateAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to piston activations.\r /",
      "definition": "export class PistonActivateAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @example pistonAfterEvent.ts\r\n     * ```typescript\r\n     * import { world, system, BlockPermutation, BlockPistonState, PistonActivateAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n     * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n     *\r\n     * function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   // set up a couple of piston blocks\r\n     *   const piston = targetLocation.dimension.getBlock(targetLocation);\r\n     *   const button = targetLocation.dimension.getBlock({\r\n     *     x: targetLocation.x,\r\n     *     y: targetLocation.y + 1,\r\n     *     z: targetLocation.z,\r\n     *   });\r\n     *\r\n     *   if (piston === undefined || button === undefined) {\r\n     *     log(\"Could not find block at location.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r\n     *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r\n     *\r\n     *   world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r\n     *     const eventLoc = pistonEvent.piston.block.location;\r\n     *\r\n     *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n     *       log(\r\n     *         \"Piston event at \" +\r\n     *           system.currentTick +\r\n     *           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r\n     *           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r\n     *       );\r\n     *     }\r\n     *   });\r\n     * }\r\n     * ```\r\n     */\r\n    subscribe(callback: (arg0: PistonActivateAfterEvent) => void): (arg0: PistonActivateAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a piston expands\r\n     * or retracts.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PistonActivateAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to piston activations.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pistonactivateaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Player": {
      "id": "@minecraft/server.Player",
      "name": "Player",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a player within the world.\r /",
      "definition": "export class Player extends Entity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The player's Camera.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly camera: Camera;\r\n    /**\r\n     * @remarks\r\n     * Contains the player's device information.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly clientSystemInfo: ClientSystemInfo;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    commandPermissionLevel: CommandPermissionLevel;\r\n    /**\r\n     * @remarks\r\n     * Gets the current graphics mode of the player's client. This\r\n     * can be changed in the Video section of the settings menu\r\n     * based on what hardware is available.\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly graphicsMode: GraphicsMode;\r\n    /**\r\n     * @remarks\r\n     * Contains the player's input information.\r\n     *\r\n     */\r\n    readonly inputInfo: InputInfo;\r\n    /**\r\n     * @remarks\r\n     * Input permissions of the player.\r\n     *\r\n     */\r\n    readonly inputPermissions: PlayerInputPermissions;\r\n    /**\r\n     * @remarks\r\n     * If true, the player is currently emoting.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isEmoting: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is flying. For example, in Creative or\r\n     * Spectator mode.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isFlying: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is gliding with Elytra.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isGliding: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the player is jumping. This will remain true while\r\n     * the player is holding the jump action.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly isJumping: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current overall level for the player, based on their\r\n     * experience.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly level: number;\r\n    /**\r\n     * @remarks\r\n     * Name of the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * @remarks\r\n     * Contains methods for manipulating the on-screen display of a\r\n     * Player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly onScreenDisplay: ScreenDisplay;\r\n    /**\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    readonly playerPermissionLevel: PlayerPermissionLevel;\r\n    /**\r\n     * @remarks\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    selectedSlotIndex: number;\r\n    /**\r\n     * @remarks\r\n     * The overall total set of experience needed to achieve the\r\n     * next level for a player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly totalXpNeededForNextLevel: number;\r\n    /**\r\n     * @remarks\r\n     * The current set of experience achieved for the player.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly xpEarnedAtCurrentLevel: number;\r\n    /**\r\n     * @remarks\r\n     * Adds/removes experience to/from the Player and returns the\r\n     * current experience of the Player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount of experience to add. Note that this can be negative.\r\n     * Min/max bounds at -2^24 ~ 2^24\r\n     * @returns\r\n     * Returns the current experience of the Player.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addExperience(amount: number): number;\r\n    /**\r\n     * @remarks\r\n     * Adds/removes level to/from the Player and returns the\r\n     * current level of the Player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param amount\r\n     * Amount to add to the player. Min/max bounds at -2^24 ~ 2^24\r\n     * @returns\r\n     * Returns the current level of the Player.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addLevels(amount: number): number;\r\n    /**\r\n     * @remarks\r\n     * For this player, removes all overrides of any Entity\r\n     * Properties on the target Entity. This change is not applied\r\n     * until the next tick and will not apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property overrides are being\r\n     * cleared.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     */\r\n    clearPropertyOverridesForEntity(targetEntity: Entity): void;\r\n    /**\r\n     * @remarks\r\n     * Retrieves the active gamemode for this player, if specified.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getGameMode(): GameMode;\r\n    /**\r\n     * @remarks\r\n     * Gets the current item cooldown time for a particular\r\n     * cooldown category.\r\n     *\r\n     * @param cooldownCategory\r\n     * Specifies the cooldown category to retrieve the current\r\n     * cooldown for.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getItemCooldown(cooldownCategory: string): number;\r\n    /**\r\n     * @remarks\r\n     * Gets the current spawn point of the player.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getSpawnPoint(): DimensionLocation | undefined;\r\n    /**\r\n     * @remarks\r\n     *  Gets the total experience of the Player.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getTotalXp(): number;\r\n    /**\r\n     * @remarks\r\n     * Plays a music track that only this particular player can\r\n     * hear.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws This function can throw errors.\r\n     */\r\n    playMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Plays a sound that only this particular player can hear.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param soundOptions\r\n     * Additional optional options for the sound.\r\n     * @throws This function can throw errors.\r\n     * @example playMusicAndSound.ts\r\n     * ```typescript\r\n     * import { world, MusicOptions, WorldSoundOptions, PlayerSoundOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function playMusicAndSound(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   const musicOptions: MusicOptions = {\r\n     *     fade: 0.5,\r\n     *     loop: true,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *   world.playMusic(\"music.menu\", musicOptions);\r\n     *\r\n     *   const worldSoundOptions: WorldSoundOptions = {\r\n     *     pitch: 0.5,\r\n     *     volume: 4.0,\r\n     *   };\r\n     *   world.playSound(\"ambient.weather.thunder\", targetLocation, worldSoundOptions);\r\n     *\r\n     *   const playerSoundOptions: PlayerSoundOptions = {\r\n     *     pitch: 1.0,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *\r\n     *   players[0].playSound(\"bucket.fill_water\", playerSoundOptions);\r\n     * }\r\n     * ```\r\n     */\r\n    playSound(soundId: string, soundOptions?: PlayerSoundOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Queues an additional music track that only this particular\r\n     * player can hear. If a track is not playing, a music track\r\n     * will play.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     *\r\n     */\r\n    queueMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * For this player, removes the override on an Entity Property.\r\n     * This change is not applied until the next tick and will not\r\n     * apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property override is being removed.\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     */\r\n    removePropertyOverrideForEntity(targetEntity: Entity, identifier: string): void;\r\n    /**\r\n     * @remarks\r\n     * Resets the level of the player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    resetLevel(): void;\r\n    /**\r\n     * @remarks\r\n     * Sends a message to the player.\r\n     *\r\n     * @param message\r\n     * The message to be displayed.\r\n     * @throws\r\n     * This method can throw if the provided {@link RawMessage} is\r\n     * in an invalid format. For example, if an empty `name` string\r\n     * is provided to `score`.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example nestedTranslation.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function nestedTranslation(targetLocation: DimensionLocation) {\r\n     *   // Displays \"Apple or Coal\"\r\n     *   const rawMessage = {\r\n     *     translate: \"accessibility.list.or.two\",\r\n     *     with: { rawtext: [{ translate: \"item.apple.name\" }, { translate: \"item.coal.name\" }] },\r\n     *   };\r\n     *   world.sendMessage(rawMessage);\r\n     * }\r\n     * ```\r\n     * @example scoreWildcard.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function scoreWildcard(targetLocation: DimensionLocation) {\r\n     *   // Displays the player's score for objective \"obj\". Each player will see their own score.\r\n     *   const rawMessage = { score: { name: \"*\", objective: \"obj\" } };\r\n     *   world.sendMessage(rawMessage);\r\n     * }\r\n     * ```\r\n     * @example sendBasicMessage.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendBasicMessage(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].sendMessage(\"Hello World!\");\r\n     * }\r\n     * ```\r\n     * @example sendPlayerMessages.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendPlayerMessages(targetLocation: DimensionLocation) {\r\n     *   for (const player of world.getAllPlayers()) {\r\n     *     // Displays \"First or Second\"\r\n     *     const rawMessage = { translate: \"accessibility.list.or.two\", with: [\"First\", \"Second\"] };\r\n     *     player.sendMessage(rawMessage);\r\n     *\r\n     *     // Displays \"Hello, world!\"\r\n     *     player.sendMessage(\"Hello, world!\");\r\n     *\r\n     *     // Displays \"Welcome, Amazing Player 1!\"\r\n     *     player.sendMessage({ translate: \"authentication.welcome\", with: [\"Amazing Player 1\"] });\r\n     *\r\n     *     // Displays the player's score for objective \"obj\". Each player will see their own score.\r\n     *     const rawMessageWithScore = { score: { name: \"*\", objective: \"obj\" } };\r\n     *     player.sendMessage(rawMessageWithScore);\r\n     *\r\n     *     // Displays \"Apple or Coal\"\r\n     *     const rawMessageWithNestedTranslations = {\r\n     *       translate: \"accessibility.list.or.two\",\r\n     *       with: { rawtext: [{ translate: \"item.apple.name\" }, { translate: \"item.coal.name\" }] },\r\n     *     };\r\n     *     player.sendMessage(rawMessageWithNestedTranslations);\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example sendTranslatedMessage.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function sendTranslatedMessage(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].sendMessage({ translate: \"authentication.welcome\", with: [\"Amazing Player 1\"] });\r\n     * }\r\n     * ```\r\n     */\r\n    sendMessage(message: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a gamemode override for this player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param gameMode\r\n     * Active gamemode.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setGameMode(gameMode?: GameMode): void;\r\n    /**\r\n     * @remarks\r\n     * For this player, overrides an Entity Property on the target\r\n     * Entity to the provided value. This property must be client\r\n     * synced. This change is not applied until the next tick and\r\n     * will not apply to other players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param targetEntity\r\n     * The Entity whose Entity Property is being overriden.\r\n     * @param identifier\r\n     * The Entity Property identifier.\r\n     * @param value\r\n     * The override value. The provided type must be compatible\r\n     * with the type specified in the entity's definition.\r\n     * @throws\r\n     * Throws if the entity is invalid.\r\n     * Throws if an invalid identifier is provided.\r\n     * Throws if the provided value type does not match the\r\n     * property type.\r\n     * Throws if the provided value is outside the expected range\r\n     * (int, float properties).\r\n     * Throws if the provided string value does not match the set\r\n     * of accepted enum values (enum properties)\r\n     */\r\n    setPropertyOverrideForEntity(targetEntity: Entity, identifier: string, value: boolean | number | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the current starting spawn point for this particular\r\n     * player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setSpawnPoint(spawnPoint?: DimensionLocation): void;\r\n    /**\r\n     * @remarks\r\n     * Creates a new particle emitter at a specified location in\r\n     * the world. Only visible to the target player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param effectName\r\n     * Identifier of the particle to create.\r\n     * @param location\r\n     * The location at which to create the particle emitter.\r\n     * @param molangVariables\r\n     * A set of optional, customizable variables that can be\r\n     * adjusted for this particle.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationInUnloadedChunkError}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     * @example spawnParticle.ts\r\n     * ```typescript\r\n     * import { world, MolangVariableMap, Vector3 } from '@minecraft/server';\r\n     *\r\n     * world.afterEvents.playerSpawn.subscribe(event => {\r\n     *     const targetLocation = event.player.location;\r\n     *     for (let i = 0; i < 100; i++) {\r\n     *         const molang = new MolangVariableMap();\r\n     *\r\n     *         molang.setColorRGB('variable.color', {\r\n     *             red: Math.random(),\r\n     *             green: Math.random(),\r\n     *             blue: Math.random()\r\n     *         });\r\n     *\r\n     *         const newLocation: Vector3 = {\r\n     *             x: targetLocation.x + Math.floor(Math.random() * 8) - 4,\r\n     *             y: targetLocation.y + Math.floor(Math.random() * 8) - 4,\r\n     *             z: targetLocation.z + Math.floor(Math.random() * 8) - 4,\r\n     *         };\r\n     *         event.player.spawnParticle('minecraft:colored_flame_particle', newLocation, molang);\r\n     *     }\r\n     * });\r\n     * ```\r\n     */\r\n    spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the item cooldown time for a particular cooldown\r\n     * category.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param cooldownCategory\r\n     * Specifies the cooldown category to retrieve the current\r\n     * cooldown for.\r\n     * @param tickDuration\r\n     * Duration in ticks of the item cooldown.\r\n     * @throws This function can throw errors.\r\n     */\r\n    startItemCooldown(cooldownCategory: string, tickDuration: number): void;\r\n    /**\r\n     * @remarks\r\n     * Stops any music tracks from playing for this particular\r\n     * player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    stopMusic(): void;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a player within the world.\r\n */\r",
      "properties": [
        {
          "name": "camera",
          "type": "Camera",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "clientSystemInfo",
          "type": "ClientSystemInfo",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "graphicsMode",
          "type": "GraphicsMode",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "inputInfo",
          "type": "InputInfo",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "inputPermissions",
          "type": "PlayerInputPermissions",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isEmoting",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isFlying",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isGliding",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isJumping",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "level",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "name",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "onScreenDisplay",
          "type": "ScreenDisplay",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerPermissionLevel",
          "type": "PlayerPermissionLevel",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "totalXpNeededForNextLevel",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "xpEarnedAtCurrentLevel",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "addExperience",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "addExperience(amount: number): number"
        },
        {
          "name": "addLevels",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "addLevels(amount: number): number"
        },
        {
          "name": "clearPropertyOverridesForEntity",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearPropertyOverridesForEntity(targetEntity: Entity): void"
        },
        {
          "name": "getGameMode",
          "parameters": [],
          "returnType": "GameMode",
          "accessibility": "public",
          "signature": "getGameMode(): GameMode"
        },
        {
          "name": "getItemCooldown",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getItemCooldown(cooldownCategory: string): number"
        },
        {
          "name": "getSpawnPoint",
          "parameters": [],
          "returnType": "DimensionLocation | undefined",
          "accessibility": "public",
          "signature": "getSpawnPoint(): DimensionLocation | undefined"
        },
        {
          "name": "getTotalXp",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getTotalXp(): number"
        },
        {
          "name": "playMusic",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "playMusic(trackId: string, musicOptions?: MusicOptions): void"
        },
        {
          "name": "playSound",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "playSound(soundId: string, soundOptions?: PlayerSoundOptions): void"
        },
        {
          "name": "queueMusic",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "queueMusic(trackId: string, musicOptions?: MusicOptions): void"
        },
        {
          "name": "removePropertyOverrideForEntity",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "removePropertyOverrideForEntity(targetEntity: Entity, identifier: string): void"
        },
        {
          "name": "resetLevel",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "resetLevel(): void"
        },
        {
          "name": "setGameMode",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setGameMode(gameMode?: GameMode): void"
        },
        {
          "name": "setPropertyOverrideForEntity",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setPropertyOverrideForEntity(targetEntity: Entity, identifier: string, value: boolean | number | string): void"
        },
        {
          "name": "setSpawnPoint",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setSpawnPoint(spawnPoint?: DimensionLocation): void"
        },
        {
          "name": "spawnParticle",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "spawnParticle(effectName: string, location: Vector3, molangVariables?: MolangVariableMap): void"
        },
        {
          "name": "startItemCooldown",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "startItemCooldown(cooldownCategory: string, tickDuration: number): void"
        },
        {
          "name": "stopMusic",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "stopMusic(): void"
        }
      ],
      "extends": "Entity",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "player",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerBreakBlockAfterEvent": {
      "id": "@minecraft/server.PlayerBreakBlockAfterEvent",
      "name": "PlayerBreakBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a player\r breaks a block.\r /",
      "definition": "export class PlayerBreakBlockAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns permutation information about this block before it\r\n     * was broken.\r\n     *\r\n     */\r\n    readonly brokenBlockPermutation: BlockPermutation;\r\n    /**\r\n     * @remarks\r\n     * The item stack that was used to break the block after the\r\n     * block was broken, or undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStackAfterBreak?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The item stack that was used to break the block before the\r\n     * block was broken, or undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStackBeforeBreak?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Player that broke the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * breaks a block.\r\n */\r",
      "properties": [
        {
          "name": "brokenBlockPermutation",
          "type": "BlockPermutation",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbreakblockafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerBreakBlockAfterEventSignal": {
      "id": "@minecraft/server.PlayerBreakBlockAfterEventSignal",
      "name": "PlayerBreakBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a player breaks\r a block.\r /",
      "definition": "export class PlayerBreakBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a block is broken\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerBreakBlockAfterEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerBreakBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player breaks a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerBreakBlockAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a player breaks\r\n * a block.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbreakblockaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerBreakBlockBeforeEvent": {
      "id": "@minecraft/server.PlayerBreakBlockBeforeEvent",
      "name": "PlayerBreakBlockBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r breaks a block.\r /",
      "definition": "export class PlayerBreakBlockBeforeEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true, cancels the block break event.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used to break the block, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Player breaking the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * breaks a block.\r\n */\r",
      "properties": [
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbreakblockbeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerBreakBlockBeforeEventSignal": {
      "id": "@minecraft/server.PlayerBreakBlockBeforeEventSignal",
      "name": "PlayerBreakBlockBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before a player\r breaks a block.\r /",
      "definition": "export class PlayerBreakBlockBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a block is broken\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerBreakBlockBeforeEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerBreakBlockBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player breaks\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerBreakBlockBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * breaks a block.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbreakblockbeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerButtonInputAfterEvent": {
      "id": "@minecraft/server.PlayerButtonInputAfterEvent",
      "name": "PlayerButtonInputAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Event data for when a player presses a button.\r /",
      "definition": "export class PlayerButtonInputAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The button this event is about.\r\n     *\r\n     */\r\n    readonly button: InputButton;\r\n    /**\r\n     * @remarks\r\n     * The state that this button transferred to.\r\n     *\r\n     */\r\n    readonly newButtonState: ButtonState;\r\n    /**\r\n     * @remarks\r\n     * The player that performed the input event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Event data for when a player presses a button.\r\n */\r",
      "properties": [
        {
          "name": "button",
          "type": "InputButton",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "newButtonState",
          "type": "ButtonState",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbuttoninputafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerButtonInputAfterEventSignal": {
      "id": "@minecraft/server.PlayerButtonInputAfterEventSignal",
      "name": "PlayerButtonInputAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to player inputs.\r /",
      "definition": "export class PlayerButtonInputAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after the player\r\n     * performs an input.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerButtonInputAfterEvent) => void,\r\n        options?: InputEventOptions,\r\n    ): (arg0: PlayerButtonInputAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after the player\r\n     * performs an input.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerButtonInputAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to player inputs.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbuttoninputaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerCursorInventoryComponent": {
      "id": "@minecraft/server.PlayerCursorInventoryComponent",
      "name": "PlayerCursorInventoryComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the players cursor inventory. Used when moving\r items between between containers in the inventory UI. Not\r used with touch controls.\r /",
      "definition": "export class PlayerCursorInventoryComponent extends EntityComponent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack currently in the players cursor inventory.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly item?: ItemStack;\r\n    static readonly componentId = 'minecraft:cursor_inventory';\r\n    /**\r\n     * @remarks\r\n     * Clears the players cursor inventory.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    clear(): void;\r\n}\r",
      "jsdoc": "/**\r\n * Represents the players cursor inventory. Used when moving\r\n * items between between containers in the inventory UI. Not\r\n * used with touch controls.\r\n */\r",
      "properties": [
        {
          "name": "minecraft",
          "type": "cursor_inventory'",
          "readonly": false,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "clear",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clear(): void"
        }
      ],
      "extends": "EntityComponent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playercursorinventorycomponent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerDimensionChangeAfterEvent": {
      "id": "@minecraft/server.PlayerDimensionChangeAfterEvent",
      "name": "PlayerDimensionChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a player's\r dimension having been changed.\r /",
      "definition": "export class PlayerDimensionChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The dimension the player is changing from.\r\n     *\r\n     */\r\n    readonly fromDimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * The location the player was at before changing dimensions.\r\n     *\r\n     */\r\n    readonly fromLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Handle to the player that is changing dimensions.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The dimension that the player is changing to.\r\n     *\r\n     */\r\n    readonly toDimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * The location the player will spawn to after changing\r\n     * dimensions.\r\n     *\r\n     */\r\n    readonly toLocation: Vector3;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to a player's\r\n * dimension having been changed.\r\n */\r",
      "properties": [
        {
          "name": "fromDimension",
          "type": "Dimension",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "fromLocation",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "toDimension",
          "type": "Dimension",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "toLocation",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerdimensionchangeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerDimensionChangeAfterEventSignal": {
      "id": "@minecraft/server.PlayerDimensionChangeAfterEventSignal",
      "name": "PlayerDimensionChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to successful player\r dimension changes.\r /",
      "definition": "export class PlayerDimensionChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Subscribes the specified callback to a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerDimensionChangeAfterEvent) => void,\r\n    ): (arg0: PlayerDimensionChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes the specified callback from a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerDimensionChangeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to successful player\r\n * dimension changes.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerdimensionchangeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerEmoteAfterEvent": {
      "id": "@minecraft/server.PlayerEmoteAfterEvent",
      "name": "PlayerEmoteAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Removes the specified callback from a player dimension\r change after event.\r  This function can't be called in read-only mode.\r  This function can be called in early-execution mode.",
      "definition": "export class PlayerEmoteAfterEvent {\n    private constructor();\r\n    readonly personaPieceId: string;\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Removes the specified callback from a player dimension\r\n     * change after event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r",
      "properties": [
        {
          "name": "personaPieceId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [
        "readonly-restricted"
      ],
      "keywords": [
        "playeremoteafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerEmoteAfterEventSignal": {
      "id": "@minecraft/server.PlayerEmoteAfterEventSignal",
      "name": "PlayerEmoteAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class PlayerEmoteAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerEmoteAfterEvent) => void): (arg0: PlayerEmoteAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerEmoteAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playeremoteaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerGameModeChangeAfterEvent": {
      "id": "@minecraft/server.PlayerGameModeChangeAfterEvent",
      "name": "PlayerGameModeChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a players game\r mode is changed.\r /",
      "definition": "export class PlayerGameModeChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The previous game mode before the change.\r\n     *\r\n     */\r\n    readonly fromGameMode: GameMode;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The current game mode after the change.\r\n     *\r\n     */\r\n    readonly toGameMode: GameMode;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event after a players game\r\n * mode is changed.\r\n */\r",
      "properties": [
        {
          "name": "fromGameMode",
          "type": "GameMode",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "toGameMode",
          "type": "GameMode",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playergamemodechangeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerGameModeChangeAfterEventSignal": {
      "id": "@minecraft/server.PlayerGameModeChangeAfterEventSignal",
      "name": "PlayerGameModeChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to after a players game\r mode is changed.\r /",
      "definition": "export class PlayerGameModeChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerGameModeChangeAfterEvent) => void): (arg0: PlayerGameModeChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerGameModeChangeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to after a players game\r\n * mode is changed.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playergamemodechangeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerGameModeChangeBeforeEvent": {
      "id": "@minecraft/server.PlayerGameModeChangeBeforeEvent",
      "name": "PlayerGameModeChangeBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r interacts with an entity.\r /",
      "definition": "export class PlayerGameModeChangeBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the game mode change will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The current game mode.\r\n     *\r\n     */\r\n    readonly fromGameMode: GameMode;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The game mode being changed to.\r\n     *\r\n     */\r\n    toGameMode: GameMode;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with an entity.\r\n */\r",
      "properties": [
        {
          "name": "fromGameMode",
          "type": "GameMode",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playergamemodechangebeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerGameModeChangeBeforeEventSignal": {
      "id": "@minecraft/server.PlayerGameModeChangeBeforeEventSignal",
      "name": "PlayerGameModeChangeBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before a players\r game mode is changed.\r /",
      "definition": "export class PlayerGameModeChangeBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerGameModeChangeBeforeEvent) => void,\r\n    ): (arg0: PlayerGameModeChangeBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a players game\r\n     * mode is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerGameModeChangeBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to before a players\r\n * game mode is changed.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playergamemodechangebeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEvent": {
      "id": "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEvent",
      "name": "PlayerHotbarSelectedSlotChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after changing the\r selected hotbar slot for a player.\r /",
      "definition": "export class PlayerHotbarSelectedSlotChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The item stack of the new slot selected.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The new hotbar slot index selected.\r\n     *\r\n     */\r\n    readonly newSlotSelected: number;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The previous hotbar slot index selected.\r\n     *\r\n     */\r\n    readonly previousSlotSelected: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event after changing the\r\n * selected hotbar slot for a player.\r\n */\r",
      "properties": [
        {
          "name": "newSlotSelected",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "previousSlotSelected",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerhotbarselectedslotchangeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEventSignal": {
      "id": "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEventSignal",
      "name": "PlayerHotbarSelectedSlotChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected after a player selected\r hotbar slot is changed.\r /",
      "definition": "export class PlayerHotbarSelectedSlotChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player selected\r\n     * hotbar slot is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     * @param options\r\n     * Additional filtering options for the event subscription.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void,\r\n        options?: HotbarEventOptions,\r\n    ): (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player selected\r\n     * hotbar slot is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerHotbarSelectedSlotChangeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected after a player selected\r\n * hotbar slot is changed.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerhotbarselectedslotchangeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInputModeChangeAfterEvent": {
      "id": "@minecraft/server.PlayerInputModeChangeAfterEvent",
      "name": "PlayerInputModeChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Event data for when a player input mode changes.\r /",
      "definition": "export class PlayerInputModeChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The new input mode used by the player.\r\n     *\r\n     */\r\n    readonly newInputModeUsed: InputMode;\r\n    /**\r\n     * @remarks\r\n     * The player that had an input mode change.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The previous input mode used by the player.\r\n     *\r\n     */\r\n    readonly previousInputModeUsed: InputMode;\r\n}\r",
      "jsdoc": "/**\r\n * Event data for when a player input mode changes.\r\n */\r",
      "properties": [
        {
          "name": "newInputModeUsed",
          "type": "InputMode",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "previousInputModeUsed",
          "type": "InputMode",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputmodechangeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInputModeChangeAfterEventSignal": {
      "id": "@minecraft/server.PlayerInputModeChangeAfterEventSignal",
      "name": "PlayerInputModeChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to player input mode.\r /",
      "definition": "export class PlayerInputModeChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after the player input\r\n     * mode changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInputModeChangeAfterEvent) => void,\r\n    ): (arg0: PlayerInputModeChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after the player input\r\n     * mode changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInputModeChangeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to player input mode.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputmodechangeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEvent": {
      "id": "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEvent",
      "name": "PlayerInputPermissionCategoryChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a players\r input permissions change.\r /",
      "definition": "export class PlayerInputPermissionCategoryChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The category of input permissions that have changed.\r\n     *\r\n     */\r\n    readonly category: InputPermissionCategory;\r\n    /**\r\n     * @remarks\r\n     * The enabled/disabled state of the players input permissions.\r\n     *\r\n     */\r\n    readonly enabled: boolean;\r\n    /**\r\n     * @remarks\r\n     * The player that has had their input permissions changed.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event after a players\r\n * input permissions change.\r\n */\r",
      "properties": [
        {
          "name": "category",
          "type": "InputPermissionCategory",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "enabled",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputpermissioncategorychangeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEventSignal": {
      "id": "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEventSignal",
      "name": "PlayerInputPermissionCategoryChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to after a players\r input permissions change.\r /",
      "definition": "export class PlayerInputPermissionCategoryChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a players input\r\n     * permissions change.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void,\r\n    ): (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a players input\r\n     * permissions change.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInputPermissionCategoryChangeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to after a players\r\n * input permissions change.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputpermissioncategorychangeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInputPermissions": {
      "id": "@minecraft/server.PlayerInputPermissions",
      "name": "PlayerInputPermissions",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains APIs to enable/disable player input permissions.\r /",
      "definition": "export class PlayerInputPermissions {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if an input permission is enabled.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    isPermissionCategoryEnabled(permissionCategory: InputPermissionCategory): boolean;\r\n    /**\r\n     * @remarks\r\n     * Enable or disable an input permission. When enabled the\r\n     * input will work, when disabled will not work.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    setPermissionCategory(permissionCategory: InputPermissionCategory, isEnabled: boolean): void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains APIs to enable/disable player input permissions.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "isPermissionCategoryEnabled",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isPermissionCategoryEnabled(permissionCategory: InputPermissionCategory): boolean"
        },
        {
          "name": "setPermissionCategory",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setPermissionCategory(permissionCategory: InputPermissionCategory, isEnabled: boolean): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputpermissions",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInteractWithBlockAfterEvent": {
      "id": "@minecraft/server.PlayerInteractWithBlockAfterEvent",
      "name": "PlayerInteractWithBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a player\r successfully interacts with a block.\r /",
      "definition": "export class PlayerInteractWithBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack before the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The block that will be interacted with.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that is being interacted with.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block where the item is placed.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * This value will be true if the event was triggered on\r\n     * players initial interaction button press and false on events\r\n     * triggered from holding the interaction button.\r\n     *\r\n     */\r\n    readonly isFirstEvent: boolean;\r\n    /**\r\n     * @remarks\r\n     * The ItemStack after the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * successfully interacts with a block.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "blockFace",
          "type": "Direction",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "faceLocation",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isFirstEvent",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithblockafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInteractWithBlockAfterEventSignal": {
      "id": "@minecraft/server.PlayerInteractWithBlockAfterEventSignal",
      "name": "PlayerInteractWithBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to after a player\r interacts with a block.\r /",
      "definition": "export class PlayerInteractWithBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player interacts\r\n     * with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithBlockAfterEvent) => void,\r\n    ): (arg0: PlayerInteractWithBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithBlockAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to after a player\r\n * interacts with a block.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithblockaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInteractWithBlockBeforeEvent": {
      "id": "@minecraft/server.PlayerInteractWithBlockBeforeEvent",
      "name": "PlayerInteractWithBlockBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r interacts with a block.\r /",
      "definition": "export class PlayerInteractWithBlockBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The block that will be interacted with.\r\n     *\r\n     */\r\n    readonly block: Block;\r\n    /**\r\n     * @remarks\r\n     * The face of the block that is being interacted with.\r\n     *\r\n     */\r\n    readonly blockFace: Direction;\r\n    /**\r\n     * @remarks\r\n     * If set to true the interaction will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block where the item is placed.\r\n     *\r\n     */\r\n    readonly faceLocation: Vector3;\r\n    /**\r\n     * @remarks\r\n     * This value will be true if the event was triggered on\r\n     * players initial interaction button press and false on events\r\n     * triggered from holding the interaction button.\r\n     *\r\n     */\r\n    readonly isFirstEvent: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used in the interaction, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with a block.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "blockFace",
          "type": "Direction",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "faceLocation",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isFirstEvent",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithblockbeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInteractWithBlockBeforeEventSignal": {
      "id": "@minecraft/server.PlayerInteractWithBlockBeforeEventSignal",
      "name": "PlayerInteractWithBlockBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before a player\r interacts with a block.\r /",
      "definition": "export class PlayerInteractWithBlockBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithBlockBeforeEvent) => void,\r\n    ): (arg0: PlayerInteractWithBlockBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player\r\n     * interacts with a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithBlockBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * interacts with a block.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithblockbeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInteractWithEntityAfterEvent": {
      "id": "@minecraft/server.PlayerInteractWithEntityAfterEvent",
      "name": "PlayerInteractWithEntityAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a player\r successfully interacts with an entity.\r /",
      "definition": "export class PlayerInteractWithEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The ItemStack before the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * The ItemStack after the interaction succeeded, or undefined\r\n     * if hand is empty.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The entity that will be interacted with.\r\n     *\r\n     */\r\n    readonly target: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event after a player\r\n * successfully interacts with an entity.\r\n */\r",
      "properties": [
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "target",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithentityafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInteractWithEntityAfterEventSignal": {
      "id": "@minecraft/server.PlayerInteractWithEntityAfterEventSignal",
      "name": "PlayerInteractWithEntityAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to after a player\r interacts with an entity.\r /",
      "definition": "export class PlayerInteractWithEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player interacts\r\n     * with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithEntityAfterEvent) => void,\r\n    ): (arg0: PlayerInteractWithEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithEntityAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to after a player\r\n * interacts with an entity.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithentityaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInteractWithEntityBeforeEvent": {
      "id": "@minecraft/server.PlayerInteractWithEntityBeforeEvent",
      "name": "PlayerInteractWithEntityBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r interacts with an entity.\r /",
      "definition": "export class PlayerInteractWithEntityBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the interaction will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item stack that is being used in the interaction, or\r\n     * undefined if empty hand.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The entity that will be interacted with.\r\n     *\r\n     */\r\n    readonly target: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event before a player\r\n * interacts with an entity.\r\n */\r",
      "properties": [
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "target",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithentitybeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInteractWithEntityBeforeEventSignal": {
      "id": "@minecraft/server.PlayerInteractWithEntityBeforeEventSignal",
      "name": "PlayerInteractWithEntityBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before a player\r interacts with an entity.\r /",
      "definition": "export class PlayerInteractWithEntityBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInteractWithEntityBeforeEvent) => void,\r\n    ): (arg0: PlayerInteractWithEntityBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before a player\r\n     * interacts with an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInteractWithEntityBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to before a player\r\n * interacts with an entity.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithentitybeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInventoryItemChangeAfterEvent": {
      "id": "@minecraft/server.PlayerInventoryItemChangeAfterEvent",
      "name": "PlayerInventoryItemChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a player's\r inventory item changes.\r /",
      "definition": "export class PlayerInventoryItemChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The previous item stack.\r\n     *\r\n     */\r\n    readonly beforeItemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Inventory type.\r\n     *\r\n     */\r\n    readonly inventoryType: PlayerInventoryType;\r\n    /**\r\n     * @remarks\r\n     * The new item stack.\r\n     *\r\n     */\r\n    readonly itemStack?: ItemStack;\r\n    /**\r\n     * @remarks\r\n     * Source Player for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n    /**\r\n     * @remarks\r\n     * The slot index with the change.\r\n     *\r\n     */\r\n    readonly slot: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event after a player's\r\n * inventory item changes.\r\n */\r",
      "properties": [
        {
          "name": "inventoryType",
          "type": "PlayerInventoryType",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "slot",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinventoryitemchangeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerInventoryItemChangeAfterEventSignal": {
      "id": "@minecraft/server.PlayerInventoryItemChangeAfterEventSignal",
      "name": "PlayerInventoryItemChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected after a player's\r inventory item is changed.\r /",
      "definition": "export class PlayerInventoryItemChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called after a player's\r\n     * inventory item is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     * @param options\r\n     * Additional filtering options for the event subscription.\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerInventoryItemChangeAfterEvent) => void,\r\n        options?: InventoryItemEventOptions,\r\n    ): (arg0: PlayerInventoryItemChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called after a player's\r\n     * inventory item is changed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerInventoryItemChangeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected after a player's\r\n * inventory item is changed.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinventoryitemchangeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerJoinAfterEvent": {
      "id": "@minecraft/server.PlayerJoinAfterEvent",
      "name": "PlayerJoinAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a player that has joined.\r See the playerSpawn event for more detailed information that\r could be returned after the first time a player has spawned\r within the game.\r /",
      "definition": "export class PlayerJoinAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Opaque string identifier of the player that joined the game.\r\n     *\r\n     */\r\n    readonly playerId: string;\r\n    /**\r\n     * @remarks\r\n     * Name of the player that has joined.\r\n     *\r\n     */\r\n    readonly playerName: string;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a player that has joined.\r\n * See the playerSpawn event for more detailed information that\r\n * could be returned after the first time a player has spawned\r\n * within the game.\r\n */\r",
      "properties": [
        {
          "name": "playerId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerName",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerjoinafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerJoinAfterEventSignal": {
      "id": "@minecraft/server.PlayerJoinAfterEventSignal",
      "name": "PlayerJoinAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to a player joining the\r world.\r /",
      "definition": "export class PlayerJoinAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player joins the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerJoinAfterEvent) => void): (arg0: PlayerJoinAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player joins the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerJoinAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to a player joining the\r\n * world.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerjoinaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerLeaveAfterEvent": {
      "id": "@minecraft/server.PlayerLeaveAfterEvent",
      "name": "PlayerLeaveAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a player that has left the\r world.\r /",
      "definition": "export class PlayerLeaveAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Opaque string identifier of the player that has left the\r\n     * event.\r\n     *\r\n     */\r\n    readonly playerId: string;\r\n    /**\r\n     * @remarks\r\n     * Player that has left the world.\r\n     *\r\n     */\r\n    readonly playerName: string;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a player that has left the\r\n * world.\r\n */\r",
      "properties": [
        {
          "name": "playerId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerName",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerleaveafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerLeaveAfterEventSignal": {
      "id": "@minecraft/server.PlayerLeaveAfterEventSignal",
      "name": "PlayerLeaveAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to a player leaving the\r world.\r /",
      "definition": "export class PlayerLeaveAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player leaves the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerLeaveAfterEvent) => void): (arg0: PlayerLeaveAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a player leaves\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerLeaveAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to a player leaving the\r\n * world.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerleaveaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerLeaveBeforeEvent": {
      "id": "@minecraft/server.PlayerLeaveBeforeEvent",
      "name": "PlayerLeaveBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a player that is leaving the\r world.\r /",
      "definition": "export class PlayerLeaveBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The leaving player.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding a player that is leaving the\r\n * world.\r\n */\r",
      "properties": [
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerleavebeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerLeaveBeforeEventSignal": {
      "id": "@minecraft/server.PlayerLeaveBeforeEventSignal",
      "name": "PlayerLeaveBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to a player leaving the\r world.\r /",
      "definition": "export class PlayerLeaveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a player leaves the\r\n     * world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerLeaveBeforeEvent) => void): (arg0: PlayerLeaveBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback that will be called when a player leaves\r\n     * the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerLeaveBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to a player leaving the\r\n * world.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerleavebeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerPlaceBlockAfterEvent": {
      "id": "@minecraft/server.PlayerPlaceBlockAfterEvent",
      "name": "PlayerPlaceBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event where a player\r places a block.\r /",
      "definition": "export class PlayerPlaceBlockAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Player that placed the block for this event.\r\n     *\r\n     */\r\n    readonly player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information regarding an event where a player\r\n * places a block.\r\n */\r",
      "properties": [
        {
          "name": "player",
          "type": "Player",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerplaceblockafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerPlaceBlockAfterEventSignal": {
      "id": "@minecraft/server.PlayerPlaceBlockAfterEventSignal",
      "name": "PlayerPlaceBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a block is\r placed by a player.\r /",
      "definition": "export class PlayerPlaceBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a block is placed\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PlayerPlaceBlockAfterEvent) => void,\r\n        options?: BlockEventOptions,\r\n    ): (arg0: PlayerPlaceBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when an block is placed\r\n     * by a player.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerPlaceBlockAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a block is\r\n * placed by a player.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerplaceblockaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerSpawnAfterEvent": {
      "id": "@minecraft/server.PlayerSpawnAfterEvent",
      "name": "PlayerSpawnAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "An event that contains more information about a player\r spawning.\r /",
      "definition": "export class PlayerSpawnAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If true, this is the initial spawn of a player after joining\r\n     * the game.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    initialSpawn: boolean;\r\n    /**\r\n     * @remarks\r\n     * Object that represents the player that joined the game.\r\n     *\r\n     * This property can't be edited in read-only mode.\r\n     *\r\n     */\r\n    player: Player;\r\n}\r",
      "jsdoc": "/**\r\n * An event that contains more information about a player\r\n * spawning.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerspawnafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlayerSpawnAfterEventSignal": {
      "id": "@minecraft/server.PlayerSpawnAfterEventSignal",
      "name": "PlayerSpawnAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Registers an event when a player is spawned (or re-spawned\r after death) and fully ready within the world.\r /",
      "definition": "export class PlayerSpawnAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a new event receiver for this particular type of\r\n     * event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PlayerSpawnAfterEvent) => void): (arg0: PlayerSpawnAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * De-registers an event receiver for the player spawn event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PlayerSpawnAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Registers an event when a player is spawned (or re-spawned\r\n * after death) and fully ready within the world.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerspawnaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PressurePlatePopAfterEvent": {
      "id": "@minecraft/server.PressurePlatePopAfterEvent",
      "name": "PressurePlatePopAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a pressure plate\r pop.\r /",
      "definition": "export class PressurePlatePopAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate before it was\r\n     * popped.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate at the time of the\r\n     * pop.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to a pressure plate\r\n * pop.\r\n */\r",
      "properties": [
        {
          "name": "previousRedstonePower",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "redstonePower",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pressureplatepopafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PressurePlatePopAfterEventSignal": {
      "id": "@minecraft/server.PressurePlatePopAfterEventSignal",
      "name": "PressurePlatePopAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a pressure\r plate is popped.\r /",
      "definition": "export class PressurePlatePopAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a pressure plate is\r\n     * popped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PressurePlatePopAfterEvent) => void): (arg0: PressurePlatePopAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a pressure plate\r\n     * is popped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PressurePlatePopAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a pressure\r\n * plate is popped.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pressureplatepopaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PressurePlatePushAfterEvent": {
      "id": "@minecraft/server.PressurePlatePushAfterEvent",
      "name": "PressurePlatePushAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a pressure plate\r push.\r /",
      "definition": "export class PressurePlatePushAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate before it was\r\n     * pushed.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power of the pressure plate at the time of the\r\n     * push.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * Source that triggered the pressure plate push.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to a pressure plate\r\n * push.\r\n */\r",
      "properties": [
        {
          "name": "previousRedstonePower",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "redstonePower",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pressureplatepushafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PressurePlatePushAfterEventSignal": {
      "id": "@minecraft/server.PressurePlatePushAfterEventSignal",
      "name": "PressurePlatePushAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a pressure\r plate is pushed.\r /",
      "definition": "export class PressurePlatePushAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a pressure plate is\r\n     * pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: PressurePlatePushAfterEvent) => void): (arg0: PressurePlatePushAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a pressure plate\r\n     * is pushed.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PressurePlatePushAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a pressure\r\n * plate is pushed.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pressureplatepushaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ProjectileHitBlockAfterEvent": {
      "id": "@minecraft/server.ProjectileHitBlockAfterEvent",
      "name": "ProjectileHitBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a projectile hitting a\r block.\r /",
      "definition": "export class ProjectileHitBlockAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where this projectile hit took place.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Direction vector of the projectile as it hit a block.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Location where the projectile hit occurred.\r\n     *\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Entity for the projectile that hit a block.\r\n     *\r\n     */\r\n    readonly projectile: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional source entity that fired the projectile.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Contains additional information about the block that was hit\r\n     * by the projectile.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getBlockHit(): BlockHitInformation;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a projectile hitting a\r\n * block.\r\n */\r",
      "properties": [
        {
          "name": "dimension",
          "type": "Dimension",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hitVector",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "projectile",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getBlockHit",
          "parameters": [],
          "returnType": "BlockHitInformation",
          "accessibility": "public",
          "signature": "getBlockHit(): BlockHitInformation"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectilehitblockafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ProjectileHitBlockAfterEventSignal": {
      "id": "@minecraft/server.ProjectileHitBlockAfterEventSignal",
      "name": "ProjectileHitBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a projectile\r hits a block.\r /",
      "definition": "export class ProjectileHitBlockAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a projectile hits a\r\n     * block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ProjectileHitBlockAfterEvent) => void): (arg0: ProjectileHitBlockAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a projectile hits\r\n     * a block.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ProjectileHitBlockAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a projectile\r\n * hits a block.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectilehitblockaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ProjectileHitEntityAfterEvent": {
      "id": "@minecraft/server.ProjectileHitEntityAfterEvent",
      "name": "ProjectileHitEntityAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a projectile hitting an\r entity.\r /",
      "definition": "export class ProjectileHitEntityAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension where this projectile hit took place.\r\n     *\r\n     */\r\n    readonly dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Direction vector of the projectile as it hit an entity.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Location where the projectile hit occurred.\r\n     *\r\n     */\r\n    readonly location: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Entity for the projectile that hit an entity.\r\n     *\r\n     */\r\n    readonly projectile: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional source entity that fired the projectile.\r\n     *\r\n     */\r\n    readonly source?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Contains additional information about an entity that was\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getEntityHit(): EntityHitInformation;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to a projectile hitting an\r\n * entity.\r\n */\r",
      "properties": [
        {
          "name": "dimension",
          "type": "Dimension",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "hitVector",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "projectile",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getEntityHit",
          "parameters": [],
          "returnType": "EntityHitInformation",
          "accessibility": "public",
          "signature": "getEntityHit(): EntityHitInformation"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectilehitentityafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ProjectileHitEntityAfterEventSignal": {
      "id": "@minecraft/server.ProjectileHitEntityAfterEventSignal",
      "name": "ProjectileHitEntityAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a projectile\r hits an entity.\r /",
      "definition": "export class ProjectileHitEntityAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a projectile hits\r\n     * an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: ProjectileHitEntityAfterEvent) => void): (arg0: ProjectileHitEntityAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a projectile hits\r\n     * an entity.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ProjectileHitEntityAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a projectile\r\n * hits an entity.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectilehitentityaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Scoreboard": {
      "id": "@minecraft/server.Scoreboard",
      "name": "Scoreboard",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains objectives and participants for the scoreboard.\r ```typescript\r  function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r    const players = world.getPlayers();\r    // Ensure a new objective.\r   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r    if (!objective) {\r     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r   }\r    // get the scoreboard identity for player 0\r   const player0Identity = players[0].scoreboardIdentity;\r    if (player0Identity === undefined) {\r     log(\"Could not get a scoreboard identity for player 0.\");\r     return -1;\r   }\r    // initialize player score to 100;\r   objective.setScore(player0Identity, 100);\r    world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r     objective: objective,\r     sortOrder: ObjectiveSortOrder.Descending,\r   });\r    const playerScore = objective.getScore(player0Identity) ?? 0;\r    // score should now be 110.\r   objective.setScore(player0Identity, playerScore + 10);\r }\r ```\r /",
      "definition": "export class Scoreboard {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a new objective to the scoreboard.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     * @example updateScoreboard.ts\r\n     * ```typescript\r\n     * import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n     *   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n     *   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n     *\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   // Ensure a new objective.\r\n     *   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n     *\r\n     *   if (!objective) {\r\n     *     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n     *   }\r\n     *\r\n     *   // get the scoreboard identity for player 0\r\n     *   const player0Identity = players[0].scoreboardIdentity;\r\n     *\r\n     *   if (player0Identity === undefined) {\r\n     *     log(\"Could not get a scoreboard identity for player 0.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   // initialize player score to 100;\r\n     *   objective.setScore(player0Identity, 100);\r\n     *\r\n     *   world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n     *     objective: objective,\r\n     *     sortOrder: ObjectiveSortOrder.Descending,\r\n     *   });\r\n     *\r\n     *   const playerScore = objective.getScore(player0Identity) ?? 0;\r\n     *\r\n     *   // score should now be 110.\r\n     *   objective.setScore(player0Identity, playerScore + 10);\r\n     * }\r\n     * ```\r\n     */\r\n    addObjective(objectiveId: string, displayName?: string): ScoreboardObjective;\r\n    /**\r\n     * @remarks\r\n     * Clears the objective that occupies a display slot.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    clearObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjective | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns a specific objective (by id).\r\n     *\r\n     * @param objectiveId\r\n     * Identifier of the objective.\r\n     */\r\n    getObjective(objectiveId: string): ScoreboardObjective | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns an objective that occupies the specified display\r\n     * slot.\r\n     *\r\n     */\r\n    getObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjectiveDisplayOptions | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns all defined objectives.\r\n     *\r\n     */\r\n    getObjectives(): ScoreboardObjective[];\r\n    /**\r\n     * @remarks\r\n     * Returns all defined scoreboard identities.\r\n     *\r\n     */\r\n    getParticipants(): ScoreboardIdentity[];\r\n    /**\r\n     * @remarks\r\n     * Removes an objective from the scoreboard.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeObjective(objectiveId: ScoreboardObjective | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets an objective into a display slot with specified\r\n     * additional display settings.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @returns\r\n     * Returns the previous `ScoreboardObjective` set at the\r\n     * display slot, if no objective was previously set it returns\r\n     * `undefined`.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setObjectiveAtDisplaySlot(\r\n        displaySlotId: DisplaySlotId,\r\n        objectiveDisplaySetting: ScoreboardObjectiveDisplayOptions,\r\n    ): ScoreboardObjective | undefined;\r\n}\r",
      "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n * @example updateScoreboard.ts\r\n * ```typescript\r\n * import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n *   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n *\r\n *   const players = world.getPlayers();\r\n *\r\n *   // Ensure a new objective.\r\n *   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n *\r\n *   if (!objective) {\r\n *     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n *   }\r\n *\r\n *   // get the scoreboard identity for player 0\r\n *   const player0Identity = players[0].scoreboardIdentity;\r\n *\r\n *   if (player0Identity === undefined) {\r\n *     log(\"Could not get a scoreboard identity for player 0.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   // initialize player score to 100;\r\n *   objective.setScore(player0Identity, 100);\r\n *\r\n *   world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n *     objective: objective,\r\n *     sortOrder: ObjectiveSortOrder.Descending,\r\n *   });\r\n *\r\n *   const playerScore = objective.getScore(player0Identity) ?? 0;\r\n *\r\n *   // score should now be 110.\r\n *   objective.setScore(player0Identity, playerScore + 10);\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "addObjective",
          "parameters": [],
          "returnType": "ScoreboardObjective",
          "accessibility": "public",
          "signature": "addObjective(objectiveId: string, displayName?: string): ScoreboardObjective"
        },
        {
          "name": "clearObjectiveAtDisplaySlot",
          "parameters": [],
          "returnType": "ScoreboardObjective | undefined",
          "accessibility": "public",
          "signature": "clearObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjective | undefined"
        },
        {
          "name": "getObjective",
          "parameters": [],
          "returnType": "ScoreboardObjective | undefined",
          "accessibility": "public",
          "signature": "getObjective(objectiveId: string): ScoreboardObjective | undefined"
        },
        {
          "name": "getObjectiveAtDisplaySlot",
          "parameters": [],
          "returnType": "ScoreboardObjectiveDisplayOptions | undefined",
          "accessibility": "public",
          "signature": "getObjectiveAtDisplaySlot(displaySlotId: DisplaySlotId): ScoreboardObjectiveDisplayOptions | undefined"
        },
        {
          "name": "getObjectives",
          "parameters": [],
          "returnType": "ScoreboardObjective[]",
          "accessibility": "public",
          "signature": "getObjectives(): ScoreboardObjective[]"
        },
        {
          "name": "getParticipants",
          "parameters": [],
          "returnType": "ScoreboardIdentity[]",
          "accessibility": "public",
          "signature": "getParticipants(): ScoreboardIdentity[]"
        },
        {
          "name": "removeObjective",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "removeObjective(objectiveId: ScoreboardObjective | string): boolean"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboard",
        "class"
      ],
      "examples": [
        {
          "title": "updateScoreboard.ts",
          "code": "import { world, DisplaySlotId, ObjectiveSortOrder, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r\n  const scoreboardObjectiveDisplayName = \"Demo Objective\";\r\n\n  const players = world.getPlayers();\r\n\n  // Ensure a new objective.\r\n  let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r\n\n  if (!objective) {\r\n    objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r\n  }\r\n\n  // get the scoreboard identity for player 0\r\n  const player0Identity = players[0].scoreboardIdentity;\r\n\n  if (player0Identity === undefined) {\r\n    log(\"Could not get a scoreboard identity for player 0.\");\r\n    return -1;\r\n  }\r\n\n  // initialize player score to 100;\r\n  objective.setScore(player0Identity, 100);\r\n\n  world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r\n    objective: objective,\r\n    sortOrder: ObjectiveSortOrder.Descending,\r\n  });\r\n\n  const playerScore = objective.getScore(player0Identity) ?? 0;\r\n\n  // score should now be 110.\r\n  objective.setScore(player0Identity, playerScore + 10);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.ScoreboardIdentity": {
      "id": "@minecraft/server.ScoreboardIdentity",
      "name": "ScoreboardIdentity",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains an identity of the scoreboard item.\r /",
      "definition": "export class ScoreboardIdentity {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the player-visible name of this identity.\r\n     *\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard identity.\r\n     *\r\n     */\r\n    readonly id: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the ScoreboardIdentity reference is still\r\n     * valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Type of the scoreboard identity.\r\n     *\r\n     */\r\n    readonly 'type': ScoreboardIdentityType;\r\n    /**\r\n     * @remarks\r\n     * If the scoreboard identity is an entity or player, returns\r\n     * the entity that this scoreboard item corresponds to.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getEntity(): Entity | undefined;\r\n}\r",
      "jsdoc": "/**\r\n * Contains an identity of the scoreboard item.\r\n */\r",
      "properties": [
        {
          "name": "displayName",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "id",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getEntity",
          "parameters": [],
          "returnType": "Entity | undefined",
          "accessibility": "public",
          "signature": "getEntity(): Entity | undefined"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardidentity",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ScoreboardObjective": {
      "id": "@minecraft/server.ScoreboardObjective",
      "name": "ScoreboardObjective",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains objectives and participants for the scoreboard.\r /",
      "definition": "export class ScoreboardObjective {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the player-visible name of this scoreboard\r\n     * objective.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly displayName: string;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard objective.\r\n     *\r\n     * @throws This property can throw when used.\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Returns true if the ScoreboardObjective reference is still\r\n     * valid.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * Adds a score to the given participant and objective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Participant to apply the scoreboard value addition to.\r\n     * @throws This function can throw errors.\r\n     */\r\n    addScore(participant: Entity | ScoreboardIdentity | string, scoreToAdd: number): number;\r\n    /**\r\n     * @remarks\r\n     * Returns all objective participant identities.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getParticipants(): ScoreboardIdentity[];\r\n    /**\r\n     * @remarks\r\n     * Returns a specific score for a participant.\r\n     *\r\n     * @param participant\r\n     * Identifier of the participant to retrieve a score for.\r\n     * @throws This function can throw errors.\r\n     */\r\n    getScore(participant: Entity | ScoreboardIdentity | string): number | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns specific scores for this objective for all\r\n     * participants.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    getScores(): ScoreboardScoreInfo[];\r\n    /**\r\n     * @remarks\r\n     * Returns if the specified identity is a participant of the\r\n     * scoreboard objective.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    hasParticipant(participant: Entity | ScoreboardIdentity | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Removes a participant from this scoreboard objective.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Participant to remove from being tracked with this\r\n     * objective.\r\n     * @throws This function can throw errors.\r\n     */\r\n    removeParticipant(participant: Entity | ScoreboardIdentity | string): boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets a score for a participant.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param participant\r\n     * Identity of the participant.\r\n     * @param score\r\n     * New value of the score.\r\n     * @throws This function can throw errors.\r\n     */\r\n    setScore(participant: Entity | ScoreboardIdentity | string, score: number): void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains objectives and participants for the scoreboard.\r\n */\r",
      "properties": [
        {
          "name": "displayName",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "addScore",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "addScore(participant: Entity | ScoreboardIdentity | string, scoreToAdd: number): number"
        },
        {
          "name": "getParticipants",
          "parameters": [],
          "returnType": "ScoreboardIdentity[]",
          "accessibility": "public",
          "signature": "getParticipants(): ScoreboardIdentity[]"
        },
        {
          "name": "getScore",
          "parameters": [],
          "returnType": "number | undefined",
          "accessibility": "public",
          "signature": "getScore(participant: Entity | ScoreboardIdentity | string): number | undefined"
        },
        {
          "name": "getScores",
          "parameters": [],
          "returnType": "ScoreboardScoreInfo[]",
          "accessibility": "public",
          "signature": "getScores(): ScoreboardScoreInfo[]"
        },
        {
          "name": "hasParticipant",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "hasParticipant(participant: Entity | ScoreboardIdentity | string): boolean"
        },
        {
          "name": "removeParticipant",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "removeParticipant(participant: Entity | ScoreboardIdentity | string): boolean"
        },
        {
          "name": "setScore",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setScore(participant: Entity | ScoreboardIdentity | string, score: number): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardobjective",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ScoreboardScoreInfo": {
      "id": "@minecraft/server.ScoreboardScoreInfo",
      "name": "ScoreboardScoreInfo",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a pair of a scoreboard participant and its\r respective score.\r /",
      "definition": "export class ScoreboardScoreInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This scoreboard participant for this score.\r\n     *\r\n     */\r\n    readonly participant: ScoreboardIdentity;\r\n    /**\r\n     * @remarks\r\n     * Score value of the identity for this objective.\r\n     *\r\n     */\r\n    readonly score: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains a pair of a scoreboard participant and its\r\n * respective score.\r\n */\r",
      "properties": [
        {
          "name": "participant",
          "type": "ScoreboardIdentity",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "score",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardscoreinfo",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ScreenDisplay": {
      "id": "@minecraft/server.ScreenDisplay",
      "name": "ScreenDisplay",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information about user interface elements that are\r showing up on the screen.\r ```typescript\r  function setTitle(targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length > 0) {\r     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r   }\r }\r ```\r ```typescript\r  function setTitleAndSubtitle(\r     targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r     stayDuration: 100,\r     fadeInDuration: 2,\r     fadeOutDuration: 4,\r     subtitle: \"Trouble in Block Town\",\r   });\r }\r ```\r ```typescript\r  function countdown(targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r     stayDuration: 220,\r     fadeInDuration: 2,\r     fadeOutDuration: 4,\r     subtitle: \"10\",\r   });\r    let countdown = 10;\r    const intervalId = system.runInterval(() => {\r     countdown--;\r     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r      if (countdown == 0) {\r       system.clearRun(intervalId);\r     }\r   }, 20);\r }\r ```\r /",
      "definition": "export class ScreenDisplay {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns true if the current reference to this screen display\r\n     * manager object is valid and functional.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    getHiddenHudElements(): HudElement[];\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    hideAllExcept(hudElements?: HudElement[]): void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    isForcedHidden(hudElement: HudElement): boolean;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    resetHudElementsVisibility(): void;\r\n    /**\r\n     * @remarks\r\n     * Set the action bar text - a piece of text that displays\r\n     * beneath the title and above the hot-bar.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param text\r\n     * New value for the action bar text.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     */\r\n    setActionBar(text: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets visibility of a particular element of the heads up\r\n     * display (HUD).\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param visible\r\n     * Whether to set the HUD element to invisible, or to reset it\r\n     * back to its default.\r\n     * @param hudElements\r\n     * Optional list of HUD elements to configure visibility for.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     */\r\n    setHudVisibility(visible: HudVisibility, hudElements?: HudElement[]): void;\r\n    /**\r\n     * @remarks\r\n     * Will cause a title to show up on the player's on screen\r\n     * display. Will clear the title if set to empty string. You\r\n     * can optionally specify an additional subtitle as well as\r\n     * fade in, stay and fade out times.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example setTitle.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function setTitle(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   if (players.length > 0) {\r\n     *     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @example setTitleAndSubtitle.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function setTitleAndSubtitle(\r\n     *     targetLocation: DimensionLocation\r\n     * ) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n     *     stayDuration: 100,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"Trouble in Block Town\",\r\n     *   });\r\n     * }\r\n     * ```\r\n     * @example countdown.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function countdown(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n     *     stayDuration: 220,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"10\",\r\n     *   });\r\n     *\r\n     *   let countdown = 10;\r\n     *\r\n     *   const intervalId = system.runInterval(() => {\r\n     *     countdown--;\r\n     *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n     *\r\n     *     if (countdown == 0) {\r\n     *       system.clearRun(intervalId);\r\n     *     }\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    setTitle(title: (RawMessage | string)[] | RawMessage | string, options?: TitleDisplayOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Updates the subtitle if the subtitle was previously\r\n     * displayed via the setTitle method.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link InvalidEntityError}\r\n     *\r\n     * {@link RawMessageError}\r\n     * @example countdown.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function countdown(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n     *     stayDuration: 220,\r\n     *     fadeInDuration: 2,\r\n     *     fadeOutDuration: 4,\r\n     *     subtitle: \"10\",\r\n     *   });\r\n     *\r\n     *   let countdown = 10;\r\n     *\r\n     *   const intervalId = system.runInterval(() => {\r\n     *     countdown--;\r\n     *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n     *\r\n     *     if (countdown == 0) {\r\n     *       system.clearRun(intervalId);\r\n     *     }\r\n     *   }, 20);\r\n     * }\r\n     * ```\r\n     */\r\n    updateSubtitle(subtitle: (RawMessage | string)[] | RawMessage | string): void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information about user interface elements that are\r\n * showing up on the screen.\r\n * @example setTitle.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setTitle(targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length > 0) {\r\n *     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n *   }\r\n * }\r\n * ```\r\n * @example setTitleAndSubtitle.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setTitleAndSubtitle(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n *     stayDuration: 100,\r\n *     fadeInDuration: 2,\r\n *     fadeOutDuration: 4,\r\n *     subtitle: \"Trouble in Block Town\",\r\n *   });\r\n * }\r\n * ```\r\n * @example countdown.ts\r\n * ```typescript\r\n * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function countdown(targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n *     stayDuration: 220,\r\n *     fadeInDuration: 2,\r\n *     fadeOutDuration: 4,\r\n *     subtitle: \"10\",\r\n *   });\r\n *\r\n *   let countdown = 10;\r\n *\r\n *   const intervalId = system.runInterval(() => {\r\n *     countdown--;\r\n *     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n *\r\n *     if (countdown == 0) {\r\n *       system.clearRun(intervalId);\r\n *     }\r\n *   }, 20);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getHiddenHudElements",
          "parameters": [],
          "returnType": "HudElement[]",
          "accessibility": "public",
          "signature": "getHiddenHudElements(): HudElement[]"
        },
        {
          "name": "hideAllExcept",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "hideAllExcept(hudElements?: HudElement[]): void"
        },
        {
          "name": "isForcedHidden",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isForcedHidden(hudElement: HudElement): boolean"
        },
        {
          "name": "resetHudElementsVisibility",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "resetHudElementsVisibility(): void"
        },
        {
          "name": "setHudVisibility",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setHudVisibility(visible: HudVisibility, hudElements?: HudElement[]): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "screendisplay",
        "class"
      ],
      "examples": [
        {
          "title": "setTitle.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction setTitle(targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length > 0) {\r\n    players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r\n  }\r\n}"
        },
        {
          "title": "setTitleAndSubtitle.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction setTitleAndSubtitle(\r\n    targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r\n    stayDuration: 100,\r\n    fadeInDuration: 2,\r\n    fadeOutDuration: 4,\r\n    subtitle: \"Trouble in Block Town\",\r\n  });\r\n}"
        },
        {
          "title": "countdown.ts",
          "code": "import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n\nfunction countdown(targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r\n    stayDuration: 220,\r\n    fadeInDuration: 2,\r\n    fadeOutDuration: 4,\r\n    subtitle: \"10\",\r\n  });\r\n\n  let countdown = 10;\r\n\n  const intervalId = system.runInterval(() => {\r\n    countdown--;\r\n    players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r\n\n    if (countdown == 0) {\r\n      system.clearRun(intervalId);\r\n    }\r\n  }, 20);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.ScriptEventCommandMessageAfterEvent": {
      "id": "@minecraft/server.ScriptEventCommandMessageAfterEvent",
      "name": "ScriptEventCommandMessageAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Returns additional data about a /scriptevent command\r invocation.\r /",
      "definition": "export class ScriptEventCommandMessageAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Identifier of this ScriptEvent command message.\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * If this command was initiated via an NPC, returns the entity\r\n     * that initiated the NPC dialogue.\r\n     *\r\n     */\r\n    readonly initiator?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional additional data passed in with the script event\r\n     * command.\r\n     *\r\n     */\r\n    readonly message: string;\r\n    /**\r\n     * @remarks\r\n     * Source block if this command was triggered via a block\r\n     * (e.g., a commandblock.)\r\n     *\r\n     */\r\n    readonly sourceBlock?: Block;\r\n    /**\r\n     * @remarks\r\n     * Source entity if this command was triggered by an entity\r\n     * (e.g., a NPC).\r\n     *\r\n     */\r\n    readonly sourceEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Returns the type of source that fired this command.\r\n     *\r\n     */\r\n    readonly sourceType: ScriptEventSource;\r\n}\r",
      "jsdoc": "/**\r\n * Returns additional data about a /scriptevent command\r\n * invocation.\r\n */\r",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "message",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "sourceType",
          "type": "ScriptEventSource",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scripteventcommandmessageafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ScriptEventCommandMessageAfterEventSignal": {
      "id": "@minecraft/server.ScriptEventCommandMessageAfterEventSignal",
      "name": "ScriptEventCommandMessageAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows for registering an event handler that responds to\r inbound /scriptevent commands.\r /",
      "definition": "export class ScriptEventCommandMessageAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Registers a new ScriptEvent handler.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: ScriptEventCommandMessageAfterEvent) => void,\r\n        options?: ScriptEventMessageFilterOptions,\r\n    ): (arg0: ScriptEventCommandMessageAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Unsubscribes a particular handler for a ScriptEvent event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: ScriptEventCommandMessageAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Allows for registering an event handler that responds to\r\n * inbound /scriptevent commands.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scripteventcommandmessageaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Seat": {
      "id": "@minecraft/server.Seat",
      "name": "Seat",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Describes a particular seating position on this rideable\r entity.\r /",
      "definition": "export class Seat {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Angle in degrees that a rider is allowed to rotate while\r\n     * riding this entity.\r\n     *\r\n     */\r\n    readonly lockRiderRotation: number;\r\n    /**\r\n     * @remarks\r\n     * A maximum number of riders that this seat can support.\r\n     *\r\n     */\r\n    readonly maxRiderCount: number;\r\n    /**\r\n     * @remarks\r\n     * A minimum number of riders that can be placed in this seat\r\n     * position, if this seat is to be filled.\r\n     *\r\n     */\r\n    readonly minRiderCount: number;\r\n    /**\r\n     * @remarks\r\n     * Physical location of this seat, relative to the entity's\r\n     * location.\r\n     *\r\n     */\r\n    readonly position: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Angle in degrees to rotate riders by.\r\n     *\r\n     */\r\n    readonly seatRotation: number;\r\n}\r",
      "jsdoc": "/**\r\n * Describes a particular seating position on this rideable\r\n * entity.\r\n */\r",
      "properties": [
        {
          "name": "lockRiderRotation",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "maxRiderCount",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "minRiderCount",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "position",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "seatRotation",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "seat",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ShutdownBeforeEventSignal": {
      "id": "@minecraft/server.ShutdownBeforeEventSignal",
      "name": "ShutdownBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides an adaptable interface for callers to subscribe to\r an event that fires before the game world shuts down. This\r event occurs after players have left, but before the world\r has closed.\r /",
      "definition": "export class ShutdownBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a new subscriber callback to this event.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback that is called when this event fires.\r\n     */\r\n    subscribe(callback: (arg0: ShutdownEvent) => void): (arg0: ShutdownEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a subscriber callback previously subscribed to via\r\n     * the subscribe method.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function closure that was previously passed to the subscribe\r\n     * method.\r\n     */\r\n    unsubscribe(callback: (arg0: ShutdownEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Provides an adaptable interface for callers to subscribe to\r\n * an event that fires before the game world shuts down. This\r\n * event occurs after players have left, but before the world\r\n * has closed.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "shutdownbeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ShutdownEvent": {
      "id": "@minecraft/server.ShutdownEvent",
      "name": "ShutdownEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The event object that gets dispatched when the game world is\r shutting down.\r /",
      "definition": "export class ShutdownEvent {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * The event object that gets dispatched when the game world is\r\n * shutting down.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "shutdownevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.StartupBeforeEventSignal": {
      "id": "@minecraft/server.StartupBeforeEventSignal",
      "name": "StartupBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class StartupBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: StartupEvent) => void): (arg0: StartupEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: StartupEvent) => void): void;\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "startupbeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.StartupEvent": {
      "id": "@minecraft/server.StartupEvent",
      "name": "StartupEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This function can't be called in read-only mode.\r  This function can be called in early-execution mode.",
      "definition": "export class StartupEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly blockComponentRegistry: BlockComponentRegistry;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly customCommandRegistry: CustomCommandRegistry;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemComponentRegistry: ItemComponentRegistry;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r",
      "properties": [
        {
          "name": "blockComponentRegistry",
          "type": "BlockComponentRegistry",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "customCommandRegistry",
          "type": "CustomCommandRegistry",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemComponentRegistry",
          "type": "ItemComponentRegistry",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [
        "readonly-restricted"
      ],
      "keywords": [
        "startupevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Structure": {
      "id": "@minecraft/server.Structure",
      "name": "Structure",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a loaded structure template (.mcstructure file).\r Structures can be placed in a world using the /structure\r /",
      "definition": "export class Structure {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The name of the structure. The identifier must include a\r\n     * namespace. For structures created via the /structure command\r\n     * or structure blocks, this namespace defaults to\r\n     * \"mystructure\".\r\n     *\r\n     */\r\n    readonly id: string;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the Structure is valid. The Structure may\r\n     * become invalid if it is deleted.\r\n     *\r\n     */\r\n    readonly isValid: boolean;\r\n    /**\r\n     * @remarks\r\n     * The dimensions of the structure. For example, a single block\r\n     * structure will have a size of {x:1, y:1, z:1}\r\n     *\r\n     * @throws This property can throw when used.\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    readonly size: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Returns a BlockPermutation representing the block contained\r\n     * within the Structure at the given location.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @returns\r\n     * Returns a BlockPermutation. Returns undefined if a block\r\n     * does not exist at the given location.\r\n     * @throws\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    getBlockPermutation(location: Vector3): BlockPermutation | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns whether the block at the given location is\r\n     * waterlogged.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @returns\r\n     * Returns whether the block at the given location is\r\n     * waterlogged. Returns false if a block does not exist at the\r\n     * given location.\r\n     * @throws\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    getIsWaterlogged(location: Vector3): boolean;\r\n    /**\r\n     * @remarks\r\n     * Creates a copy of a Structure and saves it with a new name.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the newly created Structure.\r\n     * @param saveMode\r\n     * Determines how the Structure should be saved. Defaults to\r\n     * saving to the world.\r\n     * Defaults to: 1\r\n     * @returns\r\n     * Returns the newly created structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    saveAs(identifier: string, saveMode?: StructureSaveMode): Structure;\r\n    /**\r\n     * @remarks\r\n     * Saves a modified Structure to the world file.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    saveToWorld(): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a BlockPermutation within a Structure.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param location\r\n     * The block location relative to the Structure's origin.\r\n     * @param blockPermutation\r\n     * The BlockPermutation to set.\r\n     * Defaults to: null\r\n     * @param waterlogged\r\n     * Specifies whether the block should be waterlogged. Air and\r\n     * undefined blocks cannot be waterlogged.\r\n     * Defaults to: false\r\n     * @throws\r\n     * Throws if the type of block is StructureVoid.\r\n     * Throws if the block is undefined and waterlogged is set to\r\n     * true.\r\n     * Throws if the block is air and waterlogged is set to true.\r\n     * Throws if the location is outside the structure's bounds.\r\n     * Throws if the Structure has been deleted.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    setBlockPermutation(location: Vector3, blockPermutation?: BlockPermutation, waterlogged?: boolean): void;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a loaded structure template (.mcstructure file).\r\n * Structures can be placed in a world using the /structure\r\n * command or the {@link StructureManager} APIs.\r\n */\r",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isValid",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "size",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "getBlockPermutation",
          "parameters": [],
          "returnType": "BlockPermutation | undefined",
          "accessibility": "public",
          "signature": "getBlockPermutation(location: Vector3): BlockPermutation | undefined"
        },
        {
          "name": "getIsWaterlogged",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "getIsWaterlogged(location: Vector3): boolean"
        },
        {
          "name": "saveAs",
          "parameters": [],
          "returnType": "Structure",
          "accessibility": "public",
          "signature": "saveAs(identifier: string, saveMode?: StructureSaveMode): Structure"
        },
        {
          "name": "saveToWorld",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "saveToWorld(): void"
        },
        {
          "name": "setBlockPermutation",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setBlockPermutation(location: Vector3, blockPermutation?: BlockPermutation, waterlogged?: boolean): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structure",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.StructureManager": {
      "id": "@minecraft/server.StructureManager",
      "name": "StructureManager",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manager for Structure related APIs. Includes APIs for\r creating, getting, placing and deleting Structures.\r /",
      "definition": "export class StructureManager {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Creates an empty Structure in memory. Use {@link\r\n     * Structure.setBlockPermutation} to populate the structure\r\n     * with blocks and save changes with {@link Structure.saveAs}.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure. A valid identifier must include a\r\n     * namespace and must be unique.\r\n     * @param size\r\n     * The size of the structure. For example, to create a single\r\n     * block structure the size should be {x:1, y:1, z:1}.\r\n     * @param saveMode\r\n     * How the Structure should be saved upon creation. Defaults to\r\n     * StructureSaveMode.Memory.\r\n     * Defaults to: 0\r\n     * @returns\r\n     * Returns the newly created Structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    createEmpty(identifier: string, size: Vector3, saveMode?: StructureSaveMode): Structure;\r\n    /**\r\n     * @remarks\r\n     * Creates a new Structure from blocks in the world. This is\r\n     * functionally equivalent to the /structure save command.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure. A valid identifier must include a\r\n     * namespace and must be unique.\r\n     * @param dimension\r\n     * The dimension where the blocks should be read from.\r\n     * @param options\r\n     * Additional options for creating a structure from the world.\r\n     * @returns\r\n     * Returns the newly created Structure.\r\n     * @throws\r\n     * Throws if the identifier is invalid. A valid identifier must\r\n     * include a namespace and must be unique.\r\n     * Throws if the structure bounds exceed the maximum size.\r\n     * Throws if the structure bounds contains blocks outside the\r\n     * world bounds.\r\n     *\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    createFromWorld(\r\n        identifier: string,\r\n        dimension: Dimension,\r\n        from: Vector3,\r\n        to: Vector3,\r\n        options?: StructureCreateOptions,\r\n    ): Structure;\r\n    /**\r\n     * @remarks\r\n     * Deletes a structure from memory and from the world if it\r\n     * exists.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param structure\r\n     * The structure identifier or Structure object that should be\r\n     * deleted. Note, a Structure object will become invalid after\r\n     * it is deleted.\r\n     * @returns\r\n     * Returns whether the structure was removed.\r\n     * @throws\r\n     * Throws if a structure cannot be removed. For example, a\r\n     * structure loaded from a Behavior Pack.\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    delete(structure: string | Structure): boolean;\r\n    /**\r\n     * @remarks\r\n     * Gets a Structure that is saved to memory or the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The name of the structure to get.\r\n     * @returns\r\n     * Returns a Structure if it exists, otherwise undefined.\r\n     */\r\n    get(identifier: string): Structure | undefined;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    getWorldStructureIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Places a structure in the world. Structures placed in\r\n     * unloaded chunks will be queued for loading.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param structure\r\n     * The structure's identifier or a Structure object.\r\n     * @param dimension\r\n     * The dimension where the Structure should be placed.\r\n     * @param location\r\n     * The location within the dimension where the Structure should\r\n     * be placed.\r\n     * @param options\r\n     * Additional options for Structure placement.\r\n     * @throws\r\n     * Throws if the integrity value is outside of the range [0,1]\r\n     * Throws if the integrity seed is invalid.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link InvalidStructureError}\r\n     */\r\n    place(\r\n        structure: string | Structure,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: StructurePlaceOptions,\r\n    ): void;\r\n    /**\r\n     * @remarks\r\n     * Places a partial jigsaw structure in the world. This is\r\n     * useful for debugging connections between jigsaw blocks.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param pool\r\n     * The identifier of the template pool to start from.\r\n     * @param targetJigsaw\r\n     * The name of the jigsaw block to start from. This block must\r\n     * be included in at least one of the starting pool structure\r\n     * templates.\r\n     * @param maxDepth\r\n     * The maximum recursion depth for the jigsaw structure.\r\n     * @param dimension\r\n     * The dimension to place the jigsaw structure in.\r\n     * @param location\r\n     * The location where the jigsaw structure will begin\r\n     * generating relative to the targetJigsaw block.\r\n     * @param options\r\n     * Optional settings to use when generating the jigsaw\r\n     * structure.\r\n     * @returns\r\n     * Returns a {@link BlockBoundingBox} object which represents\r\n     * the maximum bounds of the jigsaw structure.\r\n     * @throws\r\n     * Throws if maxDepth is outside of the range [1,20]\r\n     * Throws if generation fails due to invalid parameters or\r\n     * jigsaw configuration.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link PlaceJigsawError}\r\n     */\r\n    placeJigsaw(\r\n        pool: string,\r\n        targetJigsaw: string,\r\n        maxDepth: number,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: JigsawPlaceOptions,\r\n    ): BlockBoundingBox;\r\n    /**\r\n     * @remarks\r\n     * Places a jigsaw structure in the world.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param identifier\r\n     * The identifier of the jigsaw structure.\r\n     * @param dimension\r\n     * The dimension to place the jigsaw structure in.\r\n     * @param location\r\n     * The location where the jigsaw structure will begin\r\n     * generating. Note that the y value will be overridden by the\r\n     * structure's start height unless the\r\n     * ignoreStarJigsawStructurePlaceOptions ignoreStartHeight\r\n     * option is set.\r\n     * @param options\r\n     * Optional settings to use when generating the jigsaw\r\n     * structure.\r\n     * @returns\r\n     * Returns a {@link BlockBoundingBox} object which represents\r\n     * the maximum bounds of the jigsaw structure.\r\n     * @throws\r\n     * Throws if generation fails due to invalid parameters or\r\n     * jigsaw configuration.\r\n     * Throws if the placement location contains blocks that are\r\n     * outside the world bounds.\r\n     *\r\n     * {@link PlaceJigsawError}\r\n     */\r\n    placeJigsawStructure(\r\n        identifier: string,\r\n        dimension: Dimension,\r\n        location: Vector3,\r\n        options?: JigsawStructurePlaceOptions,\r\n    ): BlockBoundingBox;\r\n}\r",
      "jsdoc": "/**\r\n * Manager for Structure related APIs. Includes APIs for\r\n * creating, getting, placing and deleting Structures.\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "createEmpty",
          "parameters": [],
          "returnType": "Structure",
          "accessibility": "public",
          "signature": "createEmpty(identifier: string, size: Vector3, saveMode?: StructureSaveMode): Structure"
        },
        {
          "name": "delete",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "delete(structure: string | Structure): boolean"
        },
        {
          "name": "get",
          "parameters": [],
          "returnType": "Structure | undefined",
          "accessibility": "public",
          "signature": "get(identifier: string): Structure | undefined"
        },
        {
          "name": "getWorldStructureIds",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getWorldStructureIds(): string[]"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structuremanager",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.System": {
      "id": "@minecraft/server.System",
      "name": "System",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A class that provides system-level events and functions.\r /",
      "definition": "export class System {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of after-events for system-level\r\n     * operations.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly afterEvents: SystemAfterEvents;\r\n    /**\r\n     * @remarks\r\n     * Returns a collection of before-events for system-level\r\n     * operations.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly beforeEvents: SystemBeforeEvents;\r\n    /**\r\n     * @remarks\r\n     * Represents the current world tick of the server.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly currentTick: number;\r\n    /**\r\n     * @remarks\r\n     * Returns true if this is a world where the editor is\r\n     * currently loaded, returns false otherwise.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly isEditorWorld: boolean;\r\n    /**\r\n     * @remarks\r\n     * Contains the device information for the server.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly serverSystemInfo: SystemInfo;\r\n    /**\r\n     * @remarks\r\n     * Cancels the execution of a job queued via {@link\r\n     * System.runJob}.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param jobId\r\n     * The job ID returned from {@link System.runJob}.\r\n     */\r\n    clearJob(jobId: number): void;\r\n    /**\r\n     * @remarks\r\n     * Cancels the execution of a function run that was previously\r\n     * scheduled via {@link System.run}.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    clearRun(runId: number): void;\r\n    /**\r\n     * @remarks\r\n     * Runs a specified function at the next available future time.\r\n     * This is frequently used to implement delayed behaviors and\r\n     * game loops. When run within the context of an event handler,\r\n     * this will generally run the code at the end of the same tick\r\n     * where the event occurred. When run in other code (a\r\n     * system.run callout), this will run the function in the next\r\n     * tick. Note, however, that depending on load on the system,\r\n     * running in the same or next tick is not guaranteed.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Function callback to run at the next game tick.\r\n     * @returns\r\n     * An opaque identifier that can be used with the `clearRun`\r\n     * function to cancel the execution of this run.\r\n     * @example trapTick.ts\r\n     * ```typescript\r\n     * import { world, system } from \"@minecraft/server\";\r\n     *\r\n     * function trapTick() {\r\n     *   try {\r\n     *     // Minecraft runs at 20 ticks per second.\r\n     *     if (system.currentTick % 1200 === 0) {\r\n     *       world.sendMessage(\"Another minute passes...\");\r\n     *     }\r\n     *   } catch (e) {\r\n     *     console.warn(\"Error: \" + e);\r\n     *   }\r\n     *\r\n     *   system.run(trapTick);\r\n     * }\r\n     * ```\r\n     */\r\n    run(callback: () => void): number;\r\n    /**\r\n     * @remarks\r\n     * Runs a set of code on an interval.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Functional code that will run when this interval occurs.\r\n     * @param tickInterval\r\n     * An interval of every N ticks that the callback will be\r\n     * called upon.\r\n     * @returns\r\n     * An opaque handle that can be used with the clearRun method\r\n     * to stop the run of this function on an interval.\r\n     * @example every30Seconds.ts\r\n     * ```typescript\r\n     * import { world, system, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function every30Seconds(targetLocation: DimensionLocation) {\r\n     *   const intervalRunIdentifier = Math.floor(Math.random() * 10000);\r\n     *\r\n     *   system.runInterval(() => {\r\n     *     world.sendMessage(\"This is an interval run \" + intervalRunIdentifier + \" sending a message every 30 seconds.\");\r\n     *   }, 600);\r\n     * }\r\n     * ```\r\n     */\r\n    runInterval(callback: () => void, tickInterval?: number): number;\r\n    /**\r\n     * @remarks\r\n     * Queues a generator to run until completion.  The generator\r\n     * will be given a time slice each tick, and will be run until\r\n     * it yields or completes.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param generator\r\n     * The instance of the generator to run.\r\n     * @returns\r\n     * An opaque handle that can be used with {@link\r\n     * System.clearJob} to stop the run of this generator.\r\n     * @example cubeGenerator.ts\r\n     * ```typescript\r\n     * import { system, BlockPermutation, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function cubeGenerator(targetLocation: DimensionLocation) {\r\n     *   const blockPerm = BlockPermutation.resolve(\"minecraft:cobblestone\");\r\n     *\r\n     *   system.runJob(blockPlacingGenerator(blockPerm, targetLocation, 15));\r\n     * }\r\n     *\r\n     * function* blockPlacingGenerator(blockPerm: BlockPermutation, startingLocation: DimensionLocation, size: number) {\r\n     *   for (let x = startingLocation.x; x < startingLocation.x + size; x++) {\r\n     *     for (let y = startingLocation.y; y < startingLocation.y + size; y++) {\r\n     *       for (let z = startingLocation.z; z < startingLocation.z + size; z++) {\r\n     *         const block = startingLocation.dimension.getBlock({ x: x, y: y, z: z });\r\n     *         if (block) {\r\n     *           block.setPermutation(blockPerm);\r\n     *         }\r\n     *         yield;\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    runJob(generator: Generator<void, void, void>): number;\r\n    /**\r\n     * @remarks\r\n     * Runs a set of code at a future time specified by tickDelay.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param callback\r\n     * Functional code that will run when this timeout occurs.\r\n     * @param tickDelay\r\n     * Amount of time, in ticks, before the interval will be\r\n     * called.\r\n     * @returns\r\n     * An opaque handle that can be used with the clearRun method\r\n     * to stop the run of this function on an interval.\r\n     */\r\n    runTimeout(callback: () => void, tickDelay?: number): number;\r\n    /**\r\n     * @remarks\r\n     * Causes an event to fire within script with the specified\r\n     * message ID and payload.\r\n     *\r\n     * @param id\r\n     * Identifier of the message to send. This is custom and\r\n     * dependent on the kinds of behavior packs and content you may\r\n     * have installed within the world.\r\n     * @param message\r\n     * Data component of the message to send. This is custom and\r\n     * dependent on the kinds of behavior packs and content you may\r\n     * have installed within the world.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     *\r\n     * {@link NamespaceNameError}\r\n     */\r\n    sendScriptEvent(id: string, message: string): void;\r\n    /**\r\n     * @remarks\r\n     * waitTicks returns a promise that resolves after the\r\n     * requested number of ticks.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param ticks\r\n     * The amount of ticks to wait. Minimum value is 1.\r\n     * @returns\r\n     * A promise that is resolved when the specified amount of\r\n     * ticks have occurred.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     */\r\n    waitTicks(ticks: number): Promise<void>;\r\n}\r",
      "jsdoc": "/**\r\n * A class that provides system-level events and functions.\r\n */\r",
      "properties": [
        {
          "name": "afterEvents",
          "type": "SystemAfterEvents",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "beforeEvents",
          "type": "SystemBeforeEvents",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "currentTick",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isEditorWorld",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "serverSystemInfo",
          "type": "SystemInfo",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "clearJob",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearJob(jobId: number): void"
        },
        {
          "name": "clearRun",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearRun(runId: number): void"
        },
        {
          "name": "runJob",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "runJob(generator: Generator<void, void, void>): number"
        },
        {
          "name": "sendScriptEvent",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "sendScriptEvent(id: string, message: string): void"
        },
        {
          "name": "waitTicks",
          "parameters": [],
          "returnType": "Promise<void>",
          "accessibility": "public",
          "signature": "waitTicks(ticks: number): Promise<void>"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "system",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.SystemAfterEvents": {
      "id": "@minecraft/server.SystemAfterEvents",
      "name": "SystemAfterEvents",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides a set of events that fire within the broader\r scripting system within Minecraft.\r /",
      "definition": "export class SystemAfterEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * An event that fires when a /scriptevent command is set. This\r\n     * provides a way for commands and other systems to trigger\r\n     * behavior within script.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly scriptEventReceive: ScriptEventCommandMessageAfterEventSignal;\r\n}\r",
      "jsdoc": "/**\r\n * Provides a set of events that fire within the broader\r\n * scripting system within Minecraft.\r\n */\r",
      "properties": [
        {
          "name": "scriptEventReceive",
          "type": "ScriptEventCommandMessageAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "systemafterevents",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.SystemBeforeEvents": {
      "id": "@minecraft/server.SystemBeforeEvents",
      "name": "SystemBeforeEvents",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A set of events that fire before an actual action occurs. In\r most cases, you can potentially cancel or modify the\r impending event. Note that in before events any APIs that\r modify gameplay state will not function and will throw an\r error.\r /",
      "definition": "export class SystemBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly shutdown: ShutdownBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly startup: StartupBeforeEventSignal;\r\n}\r",
      "jsdoc": "/**\r\n * A set of events that fire before an actual action occurs. In\r\n * most cases, you can potentially cancel or modify the\r\n * impending event. Note that in before events any APIs that\r\n * modify gameplay state will not function and will throw an\r\n * error.\r\n */\r",
      "properties": [
        {
          "name": "shutdown",
          "type": "ShutdownBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "startup",
          "type": "StartupBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "systembeforeevents",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.SystemInfo": {
      "id": "@minecraft/server.SystemInfo",
      "name": "SystemInfo",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains device information, like memory tier.\r /",
      "definition": "export class SystemInfo {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Describes the memory of the device.\r\n     *\r\n     */\r\n    readonly memoryTier: MemoryTier;\r\n}\r",
      "jsdoc": "/**\r\n * Contains device information, like memory tier.\r\n */\r",
      "properties": [
        {
          "name": "memoryTier",
          "type": "MemoryTier",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "systeminfo",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.TargetBlockHitAfterEvent": {
      "id": "@minecraft/server.TargetBlockHitAfterEvent",
      "name": "TargetBlockHitAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a target block\r hit.\r /",
      "definition": "export class TargetBlockHitAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The position where the source hit the block.\r\n     *\r\n     */\r\n    readonly hitVector: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The redstone power before the block is hit.\r\n     *\r\n     */\r\n    readonly previousRedstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * The redstone power at the time the block is hit.\r\n     *\r\n     */\r\n    readonly redstonePower: number;\r\n    /**\r\n     * @remarks\r\n     * Optional source that hit the target block.\r\n     *\r\n     */\r\n    readonly source: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to a target block\r\n * hit.\r\n */\r",
      "properties": [
        {
          "name": "hitVector",
          "type": "Vector3",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "previousRedstonePower",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "redstonePower",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Entity",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "targetblockhitafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.TargetBlockHitAfterEventSignal": {
      "id": "@minecraft/server.TargetBlockHitAfterEventSignal",
      "name": "TargetBlockHitAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a target block\r is hit.\r /",
      "definition": "export class TargetBlockHitAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a target block is\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: TargetBlockHitAfterEvent) => void): (arg0: TargetBlockHitAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a target block is\r\n     * hit.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: TargetBlockHitAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a target block\r\n * is hit.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "targetblockhitaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.Trigger": {
      "id": "@minecraft/server.Trigger",
      "name": "Trigger",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a trigger for firing an event.\r /",
      "definition": "export class Trigger {\n    /**\r\n     * @remarks\r\n     * Event name of the trigger.\r\n     *\r\n     */\r\n    eventName: string;\r\n    /**\r\n     * @remarks\r\n     * Creates a new trigger.\r\n     *\r\n     */\r\n    constructor(eventName: string);\r\n}\r",
      "jsdoc": "/**\r\n * Represents a trigger for firing an event.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "trigger",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.TripWireTripAfterEvent": {
      "id": "@minecraft/server.TripWireTripAfterEvent",
      "name": "TripWireTripAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a trip wire trip.\r ```typescript\r  function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a tripwire\r   const redstone = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y - 1,\r     z: targetLocation.z,\r   });\r   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r    if (redstone === undefined || tripwire === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r    world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r     const eventLoc = tripWireTripEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Tripwire trip event at tick \" +\r           system.currentTick +\r           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r       );\r     }\r   });\r }\r ```\r /",
      "definition": "export class TripWireTripAfterEvent extends BlockEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Whether or not the block has redstone power.\r\n     *\r\n     */\r\n    readonly isPowered: boolean;\r\n    /**\r\n     * @remarks\r\n     * The sources that triggered the trip wire to trip.\r\n     *\r\n     */\r\n    readonly sources: Entity[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes to a trip wire trip.\r\n * @example tripWireTripEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a tripwire\r\n *   const redstone = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y - 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (redstone === undefined || tripwire === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n *   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n *\r\n *   world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n *     const eventLoc = tripWireTripEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Tripwire trip event at tick \" +\r\n *           system.currentTick +\r\n *           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "isPowered",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "sources",
          "type": "Entity[]",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "extends": "BlockEvent",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "tripwiretripafterevent",
        "class"
      ],
      "examples": [
        {
          "title": "tripWireTripEvent.ts",
          "code": "import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a tripwire\r\n  const redstone = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y - 1,\r\n    z: targetLocation.z,\r\n  });\r\n  const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (redstone === undefined || tripwire === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n  tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n\n  world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n    const eventLoc = tripWireTripEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Tripwire trip event at tick \" +\r\n          system.currentTick +\r\n          (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.TripWireTripAfterEventSignal": {
      "id": "@minecraft/server.TripWireTripAfterEventSignal",
      "name": "TripWireTripAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a trip wire is\r tripped.\r ```typescript\r  function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a tripwire\r   const redstone = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y - 1,\r     z: targetLocation.z,\r   });\r   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r    if (redstone === undefined || tripwire === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r    world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r     const eventLoc = tripWireTripEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Tripwire trip event at tick \" +\r           system.currentTick +\r           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r       );\r     }\r   });\r }\r ```\r /",
      "definition": "export class TripWireTripAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when a trip wire is\r\n     * tripped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: TripWireTripAfterEvent) => void): (arg0: TripWireTripAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when a trip wire is\r\n     * tripped.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: TripWireTripAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to when a trip wire is\r\n * tripped.\r\n * @example tripWireTripEvent.ts\r\n * ```typescript\r\n * import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   // set up a tripwire\r\n *   const redstone = targetLocation.dimension.getBlock({\r\n *     x: targetLocation.x,\r\n *     y: targetLocation.y - 1,\r\n *     z: targetLocation.z,\r\n *   });\r\n *   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n *\r\n *   if (redstone === undefined || tripwire === undefined) {\r\n *     log(\"Could not find block at location.\");\r\n *     return -1;\r\n *   }\r\n *\r\n *   redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n *   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n *\r\n *   world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n *     const eventLoc = tripWireTripEvent.block.location;\r\n *\r\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n *       log(\r\n *         \"Tripwire trip event at tick \" +\r\n *           system.currentTick +\r\n *           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n *       );\r\n *     }\r\n *   });\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "tripwiretripaftereventsignal",
        "class"
      ],
      "examples": [
        {
          "title": "tripWireTripEvent.ts",
          "code": "import { world, system, BlockPermutation, TripWireTripAfterEvent, DimensionLocation } from \"@minecraft/server\";\r\nimport { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n\nfunction tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  // set up a tripwire\r\n  const redstone = targetLocation.dimension.getBlock({\r\n    x: targetLocation.x,\r\n    y: targetLocation.y - 1,\r\n    z: targetLocation.z,\r\n  });\r\n  const tripwire = targetLocation.dimension.getBlock(targetLocation);\r\n\n  if (redstone === undefined || tripwire === undefined) {\r\n    log(\"Could not find block at location.\");\r\n    return -1;\r\n  }\r\n\n  redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r\n  tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r\n\n  world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r\n    const eventLoc = tripWireTripEvent.block.location;\r\n\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r\n      log(\r\n        \"Tripwire trip event at tick \" +\r\n          system.currentTick +\r\n          (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r\n      );\r\n    }\r\n  });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server.WeatherChangeAfterEvent": {
      "id": "@minecraft/server.WeatherChangeAfterEvent",
      "name": "WeatherChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes in weather in the\r environment.\r /",
      "definition": "export class WeatherChangeAfterEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Dimension in which the weather has changed.\r\n     *\r\n     */\r\n    readonly dimension: string;\r\n    /**\r\n     * @remarks\r\n     * The weather type after the weather was changed.\r\n     *\r\n     */\r\n    readonly newWeather: WeatherType;\r\n    /**\r\n     * @remarks\r\n     * The weather type before the weather was changed.\r\n     *\r\n     */\r\n    readonly previousWeather: WeatherType;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes in weather in the\r\n * environment.\r\n */\r",
      "properties": [
        {
          "name": "dimension",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "newWeather",
          "type": "WeatherType",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "previousWeather",
          "type": "WeatherType",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weatherchangeafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.WeatherChangeAfterEventSignal": {
      "id": "@minecraft/server.WeatherChangeAfterEventSignal",
      "name": "WeatherChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to weather changing.\r /",
      "definition": "export class WeatherChangeAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called when weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WeatherChangeAfterEvent) => void): (arg0: WeatherChangeAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called when weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WeatherChangeAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to weather changing.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weatherchangeaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.WeatherChangeBeforeEvent": {
      "id": "@minecraft/server.WeatherChangeBeforeEvent",
      "name": "WeatherChangeBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes in weather in the\r environment.\r /",
      "definition": "export class WeatherChangeBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * If set to true the weather change will be cancelled.\r\n     *\r\n     */\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * Sets the duration of the new weather (in ticks).\r\n     *\r\n     */\r\n    duration: number;\r\n    /**\r\n     * @remarks\r\n     * The type of weather that will be applied.\r\n     *\r\n     */\r\n    newWeather: WeatherType;\r\n    /**\r\n     * @remarks\r\n     * The type of weather that it was prior to the event being\r\n     * fired.\r\n     *\r\n     */\r\n    readonly previousWeather: WeatherType;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information related to changes in weather in the\r\n * environment.\r\n */\r",
      "properties": [
        {
          "name": "previousWeather",
          "type": "WeatherType",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weatherchangebeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.WeatherChangeBeforeEventSignal": {
      "id": "@minecraft/server.WeatherChangeBeforeEventSignal",
      "name": "WeatherChangeBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before weather\r changing.\r /",
      "definition": "export class WeatherChangeBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Adds a callback that will be called before weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WeatherChangeBeforeEvent) => void): (arg0: WeatherChangeBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * Removes a callback from being called before weather changes.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WeatherChangeBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "/**\r\n * Manages callbacks that are connected to before weather\r\n * changing.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weatherchangebeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.World": {
      "id": "@minecraft/server.World",
      "name": "World",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A class that wraps the state of a world - a set of\r dimensions and the environment of Minecraft.\r /",
      "definition": "export class World {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Contains a set of events that are applicable to the entirety\r\n     * of the world.  Event callbacks are called in a deferred\r\n     * manner. Event callbacks are executed in read-write mode.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly afterEvents: WorldAfterEvents;\r\n    /**\r\n     * @remarks\r\n     * Contains a set of events that are applicable to the entirety\r\n     * of the world. Event callbacks are called immediately. Event\r\n     * callbacks are executed in read-only mode.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     * @example customCommand.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function customCommand(targetLocation: DimensionLocation) {\r\n     *   const chatCallback = world.beforeEvents.chatSend.subscribe((eventData) => {\r\n     *     if (eventData.message.includes(\"cancel\")) {\r\n     *       // Cancel event if the message contains \"cancel\"\r\n     *       eventData.cancel = true;\r\n     *     } else {\r\n     *       const args = eventData.message.split(\" \");\r\n     *\r\n     *       if (args.length > 0) {\r\n     *         switch (args[0].toLowerCase()) {\r\n     *           case \"echo\":\r\n     *             // Send a modified version of chat message\r\n     *             world.sendMessage(`Echo '${eventData.message.substring(4).trim()}'`);\r\n     *             break;\r\n     *           case \"help\":\r\n     *             world.sendMessage(`Available commands: echo <message>`);\r\n     *             break;\r\n     *         }\r\n     *       }\r\n     *     }\r\n     *   });\r\n     * }\r\n     * ```\r\n     */\r\n    readonly beforeEvents: WorldBeforeEvents;\r\n    /**\r\n     * @remarks\r\n     * The game rules that apply to the world.\r\n     *\r\n     */\r\n    readonly gameRules: GameRules;\r\n    readonly isHardcore: boolean;\r\n    /**\r\n     * @remarks\r\n     * Returns the general global scoreboard that applies to the\r\n     * world.\r\n     *\r\n     */\r\n    readonly scoreboard: Scoreboard;\r\n    /**\r\n     * @remarks\r\n     * Returns the manager for {@link Structure} related APIs.\r\n     *\r\n     */\r\n    readonly structureManager: StructureManager;\r\n    /**\r\n     * @remarks\r\n     * Clears the set of dynamic properties declared for this\r\n     * behavior pack within the world.\r\n     *\r\n     */\r\n    clearDynamicProperties(): void;\r\n    /**\r\n     * @remarks\r\n     * Returns the absolute time since the start of the world.\r\n     *\r\n     */\r\n    getAbsoluteTime(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns an array of all active players within the world.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getAllPlayers(): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the current day.\r\n     *\r\n     * @returns\r\n     * The current day, determined by the world time divided by the\r\n     * number of ticks per day. New worlds start at day 0.\r\n     */\r\n    getDay(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns the default Overworld spawn location.\r\n     *\r\n     * @returns\r\n     * The default Overworld spawn location. By default, the Y\r\n     * coordinate is 32767, indicating a player's spawn height is\r\n     * not fixed and will be determined by surrounding blocks.\r\n     */\r\n    getDefaultSpawnLocation(): Vector3;\r\n    /**\r\n     * @remarks\r\n     * Gets the difficulty from the world.\r\n     *\r\n     * @returns\r\n     * Returns the world difficulty.\r\n     */\r\n    getDifficulty(): Difficulty;\r\n    /**\r\n     * @remarks\r\n     * Returns a dimension object.\r\n     *\r\n     * @param dimensionId\r\n     * The name of the dimension. For example, \"overworld\",\r\n     * \"nether\" or \"the_end\".\r\n     * @returns\r\n     * The requested dimension\r\n     * @throws\r\n     * Throws if the given dimension name is invalid\r\n     */\r\n    getDimension(dimensionId: string): Dimension;\r\n    /**\r\n     * @remarks\r\n     * Returns a property value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @returns\r\n     * Returns the value for the property, or undefined if the\r\n     * property has not been set.\r\n     * @throws\r\n     * Throws if the given dynamic property identifier is not\r\n     * defined.\r\n     * @example incrementDynamicProperty.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicProperty(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let number = world.getDynamicProperty(\"samplelibrary:number\");\r\n     *\r\n     *   log(\"Current value is: \" + number);\r\n     *\r\n     *   if (number === undefined) {\r\n     *     number = 0;\r\n     *   }\r\n     *\r\n     *   if (typeof number !== \"number\") {\r\n     *     log(\"Number is of an unexpected type.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   world.setDynamicProperty(\"samplelibrary:number\", number + 1);\r\n     * }\r\n     * ```\r\n     * @example incrementDynamicPropertyInJsonBlob.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicPropertyInJsonBlob(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let paintStr = world.getDynamicProperty(\"samplelibrary:longerjson\");\r\n     *   let paint: { color: string; intensity: number } | undefined = undefined;\r\n     *\r\n     *   log(\"Current value is: \" + paintStr);\r\n     *\r\n     *   if (paintStr === undefined) {\r\n     *     paint = {\r\n     *       color: \"purple\",\r\n     *       intensity: 0,\r\n     *     };\r\n     *   } else {\r\n     *     if (typeof paintStr !== \"string\") {\r\n     *       log(\"Paint is of an unexpected type.\");\r\n     *       return -1;\r\n     *     }\r\n     *\r\n     *     try {\r\n     *       paint = JSON.parse(paintStr);\r\n     *     } catch (e) {\r\n     *       log(\"Error parsing serialized struct.\");\r\n     *       return -1;\r\n     *     }\r\n     *   }\r\n     *\r\n     *   if (!paint) {\r\n     *     log(\"Error parsing serialized struct.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   paint.intensity++;\r\n     *   paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits\r\n     *   world.setDynamicProperty(\"samplelibrary:longerjson\", paintStr);\r\n     * }\r\n     * ```\r\n     */\r\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\r\n    /**\r\n     * @remarks\r\n     * Gets a set of dynamic property identifiers that have been\r\n     * set in this world.\r\n     *\r\n     * @returns\r\n     * A string array of active dynamic property identifiers.\r\n     */\r\n    getDynamicPropertyIds(): string[];\r\n    /**\r\n     * @remarks\r\n     * Gets the total byte count of dynamic properties. This could\r\n     * potentially be used for your own analytics to ensure you're\r\n     * not storing gigantic sets of dynamic properties.\r\n     *\r\n     */\r\n    getDynamicPropertyTotalByteCount(): number;\r\n    /**\r\n     * @remarks\r\n     * Returns an entity based on the provided id.\r\n     *\r\n     * @param id\r\n     * The id of the entity.\r\n     * @returns\r\n     * The requested entity object.\r\n     * @throws\r\n     * Throws if the given entity id is invalid.\r\n     */\r\n    getEntity(id: string): Entity | undefined;\r\n    /**\r\n     * @remarks\r\n     * Returns the MoonPhase for the current time.\r\n     *\r\n     */\r\n    getMoonPhase(): MoonPhase;\r\n    /**\r\n     * @remarks\r\n     * Returns a set of players based on a set of conditions\r\n     * defined via the EntityQueryOptions set of filter criteria.\r\n     *\r\n     * @param options\r\n     * Additional options that can be used to filter the set of\r\n     * players returned.\r\n     * @returns\r\n     * A player array.\r\n     * @throws\r\n     * Throws if the provided EntityQueryOptions are invalid.\r\n     *\r\n     * {@link CommandError}\r\n     *\r\n     * {@link minecraftcommon.InvalidArgumentError}\r\n     */\r\n    getPlayers(options?: EntityQueryOptions): Player[];\r\n    /**\r\n     * @remarks\r\n     * Returns the time of day.\r\n     *\r\n     * @returns\r\n     * The time of day, in ticks, between 0 and 24000.\r\n     */\r\n    getTimeOfDay(): number;\r\n    /**\r\n     * @remarks\r\n     * Plays a particular music track for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     * @example playMusicAndSound.ts\r\n     * ```typescript\r\n     * import { world, MusicOptions, WorldSoundOptions, PlayerSoundOptions, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function playMusicAndSound(targetLocation: DimensionLocation) {\r\n     *   const players = world.getPlayers();\r\n     *\r\n     *   const musicOptions: MusicOptions = {\r\n     *     fade: 0.5,\r\n     *     loop: true,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *   world.playMusic(\"music.menu\", musicOptions);\r\n     *\r\n     *   const worldSoundOptions: WorldSoundOptions = {\r\n     *     pitch: 0.5,\r\n     *     volume: 4.0,\r\n     *   };\r\n     *   world.playSound(\"ambient.weather.thunder\", targetLocation, worldSoundOptions);\r\n     *\r\n     *   const playerSoundOptions: PlayerSoundOptions = {\r\n     *     pitch: 1.0,\r\n     *     volume: 1.0,\r\n     *   };\r\n     *\r\n     *   players[0].playSound(\"bucket.fill_water\", playerSoundOptions);\r\n     * }\r\n     * ```\r\n     */\r\n    playMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Queues an additional music track for players. If a track is\r\n     * not playing, a music track will play.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param trackId\r\n     * Identifier of the music track to play.\r\n     * @param musicOptions\r\n     * Additional options for the music track.\r\n     * @throws\r\n     * An error will be thrown if volume is less than 0.0.\r\n     * An error will be thrown if fade is less than 0.0.\r\n     *\r\n     *\r\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\r\n     */\r\n    queueMusic(trackId: string, musicOptions?: MusicOptions): void;\r\n    /**\r\n     * @remarks\r\n     * Sends a message to all players.\r\n     *\r\n     * @param message\r\n     * The message to be displayed.\r\n     * @throws\r\n     * This method can throw if the provided {@link RawMessage} is\r\n     * in an invalid format. For example, if an empty `name` string\r\n     * is provided to `score`.\r\n     */\r\n    sendMessage(message: (RawMessage | string)[] | RawMessage | string): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the world time.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param absoluteTime\r\n     * The world time, in ticks.\r\n     */\r\n    setAbsoluteTime(absoluteTime: number): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a default spawn location for all players.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param spawnLocation\r\n     * Location of the spawn point. Note that this is assumed to be\r\n     * within the overworld dimension.\r\n     * @throws\r\n     * Throws if the provided spawn location is out of bounds.\r\n     *\r\n     * {@link Error}\r\n     *\r\n     * {@link LocationOutOfWorldBoundariesError}\r\n     */\r\n    setDefaultSpawnLocation(spawnLocation: Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the worlds difficulty.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param difficulty\r\n     * The difficulty we want to set the world to.\r\n     */\r\n    setDifficulty(difficulty: Difficulty): void;\r\n    /**\r\n     * @remarks\r\n     * Sets a specified property to a value.\r\n     *\r\n     * @param identifier\r\n     * The property identifier.\r\n     * @param value\r\n     * Data value of the property to set.\r\n     * @throws\r\n     * Throws if the given dynamic property identifier is not\r\n     * defined.\r\n     *\r\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\r\n     * @example incrementDynamicProperty.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicProperty(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let number = world.getDynamicProperty(\"samplelibrary:number\");\r\n     *\r\n     *   log(\"Current value is: \" + number);\r\n     *\r\n     *   if (number === undefined) {\r\n     *     number = 0;\r\n     *   }\r\n     *\r\n     *   if (typeof number !== \"number\") {\r\n     *     log(\"Number is of an unexpected type.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   world.setDynamicProperty(\"samplelibrary:number\", number + 1);\r\n     * }\r\n     * ```\r\n     * @example incrementDynamicPropertyInJsonBlob.ts\r\n     * ```typescript\r\n     * import { world, DimensionLocation } from \"@minecraft/server\";\r\n     *\r\n     * function incrementDynamicPropertyInJsonBlob(\r\n     *   log: (message: string, status?: number) => void,\r\n     *   targetLocation: DimensionLocation\r\n     * ) {\r\n     *   let paintStr = world.getDynamicProperty(\"samplelibrary:longerjson\");\r\n     *   let paint: { color: string; intensity: number } | undefined = undefined;\r\n     *\r\n     *   log(\"Current value is: \" + paintStr);\r\n     *\r\n     *   if (paintStr === undefined) {\r\n     *     paint = {\r\n     *       color: \"purple\",\r\n     *       intensity: 0,\r\n     *     };\r\n     *   } else {\r\n     *     if (typeof paintStr !== \"string\") {\r\n     *       log(\"Paint is of an unexpected type.\");\r\n     *       return -1;\r\n     *     }\r\n     *\r\n     *     try {\r\n     *       paint = JSON.parse(paintStr);\r\n     *     } catch (e) {\r\n     *       log(\"Error parsing serialized struct.\");\r\n     *       return -1;\r\n     *     }\r\n     *   }\r\n     *\r\n     *   if (!paint) {\r\n     *     log(\"Error parsing serialized struct.\");\r\n     *     return -1;\r\n     *   }\r\n     *\r\n     *   paint.intensity++;\r\n     *   paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits\r\n     *   world.setDynamicProperty(\"samplelibrary:longerjson\", paintStr);\r\n     * }\r\n     * ```\r\n     */\r\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\r\n    /**\r\n     * @remarks\r\n     * Sets the time of day.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param timeOfDay\r\n     * The time of day, in ticks, between 0 and 24000.\r\n     * @throws\r\n     * Throws if the provided time of day is not within the valid\r\n     * range.\r\n     */\r\n    setTimeOfDay(timeOfDay: number | TimeOfDay): void;\r\n    /**\r\n     * @remarks\r\n     * Stops any music tracks from playing.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     */\r\n    stopMusic(): void;\r\n}\r",
      "jsdoc": "/**\r\n * A class that wraps the state of a world - a set of\r\n * dimensions and the environment of Minecraft.\r\n */\r",
      "properties": [
        {
          "name": "afterEvents",
          "type": "WorldAfterEvents",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "beforeEvents",
          "type": "WorldBeforeEvents",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "gameRules",
          "type": "GameRules",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "isHardcore",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "scoreboard",
          "type": "Scoreboard",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "structureManager",
          "type": "StructureManager",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "clearDynamicProperties",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "clearDynamicProperties(): void"
        },
        {
          "name": "getAbsoluteTime",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getAbsoluteTime(): number"
        },
        {
          "name": "getAllPlayers",
          "parameters": [],
          "returnType": "Player[]",
          "accessibility": "public",
          "signature": "getAllPlayers(): Player[]"
        },
        {
          "name": "getDay",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getDay(): number"
        },
        {
          "name": "getDefaultSpawnLocation",
          "parameters": [],
          "returnType": "Vector3",
          "accessibility": "public",
          "signature": "getDefaultSpawnLocation(): Vector3"
        },
        {
          "name": "getDifficulty",
          "parameters": [],
          "returnType": "Difficulty",
          "accessibility": "public",
          "signature": "getDifficulty(): Difficulty"
        },
        {
          "name": "getDimension",
          "parameters": [],
          "returnType": "Dimension",
          "accessibility": "public",
          "signature": "getDimension(dimensionId: string): Dimension"
        },
        {
          "name": "getDynamicProperty",
          "parameters": [],
          "returnType": "boolean | number | string | Vector3 | undefined",
          "accessibility": "public",
          "signature": "getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined"
        },
        {
          "name": "getDynamicPropertyIds",
          "parameters": [],
          "returnType": "string[]",
          "accessibility": "public",
          "signature": "getDynamicPropertyIds(): string[]"
        },
        {
          "name": "getDynamicPropertyTotalByteCount",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getDynamicPropertyTotalByteCount(): number"
        },
        {
          "name": "getEntity",
          "parameters": [],
          "returnType": "Entity | undefined",
          "accessibility": "public",
          "signature": "getEntity(id: string): Entity | undefined"
        },
        {
          "name": "getMoonPhase",
          "parameters": [],
          "returnType": "MoonPhase",
          "accessibility": "public",
          "signature": "getMoonPhase(): MoonPhase"
        },
        {
          "name": "getPlayers",
          "parameters": [],
          "returnType": "Player[]",
          "accessibility": "public",
          "signature": "getPlayers(options?: EntityQueryOptions): Player[]"
        },
        {
          "name": "getTimeOfDay",
          "parameters": [],
          "returnType": "number",
          "accessibility": "public",
          "signature": "getTimeOfDay(): number"
        },
        {
          "name": "playMusic",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "playMusic(trackId: string, musicOptions?: MusicOptions): void"
        },
        {
          "name": "queueMusic",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "queueMusic(trackId: string, musicOptions?: MusicOptions): void"
        },
        {
          "name": "setAbsoluteTime",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setAbsoluteTime(absoluteTime: number): void"
        },
        {
          "name": "setDefaultSpawnLocation",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setDefaultSpawnLocation(spawnLocation: Vector3): void"
        },
        {
          "name": "setDifficulty",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setDifficulty(difficulty: Difficulty): void"
        },
        {
          "name": "setDynamicProperty",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void"
        },
        {
          "name": "setTimeOfDay",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "setTimeOfDay(timeOfDay: number | TimeOfDay): void"
        },
        {
          "name": "stopMusic",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "stopMusic(): void"
        }
      ],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "world",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.WorldAfterEvents": {
      "id": "@minecraft/server.WorldAfterEvents",
      "name": "WorldAfterEvents",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a set of events that are available across the scope\r of the World.\r /",
      "definition": "export class WorldAfterEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event fires for each BlockLocation destroyed by an\r\n     * explosion. It is fired after the blocks have already been\r\n     * destroyed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly blockExplode: BlockExplodeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a button is pushed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly buttonPush: ButtonPushAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired when an entity event has been triggered\r\n     * that will update the component definition state of an\r\n     * entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly dataDrivenEntityTrigger: DataDrivenEntityTriggerAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an effect, like poisoning, is added to\r\n     * an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly effectAdd: EffectAddAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity dies.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityDie: EntityDieAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when entity health changes in any degree.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHealthChanged: EntityHealthChangedAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity hits (that is, melee\r\n     * attacks) a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHitBlock: EntityHitBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity hits (that is, melee\r\n     * attacks) another entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHitEntity: EntityHitEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity is hurt (takes damage).\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityHurt: EntityHurtAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when an entity is loaded.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityLoad: EntityLoadAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when an entity is removed (for example, potentially\r\n     * unloaded, or removed after being killed).\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityRemove: EntityRemoveAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an entity is spawned.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entitySpawn: EntitySpawnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired after an explosion occurs.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly explosion: ExplosionAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a world.gameRules property has\r\n     * changed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly gameRuleChange: GameRuleChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item completes charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemCompleteUse: ItemCompleteUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item is released from\r\n     * charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemReleaseUse: ItemReleaseUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item starts charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStartUse: ItemStartUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player successfully uses an item or\r\n     * places a block by pressing the Use Item / Place Block\r\n     * button. If multiple blocks are placed, this event will only\r\n     * occur once at the beginning of the block placement. Note:\r\n     * This event cannot be used with Hoe or Axe items.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStartUseOn: ItemStartUseOnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a chargeable item stops charging.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStopUse: ItemStopUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player releases the Use Item / Place\r\n     * Block button after successfully using an item. Note: This\r\n     * event cannot be used with Hoe or Axe items.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemStopUseOn: ItemStopUseOnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item is successfully used by a\r\n     * player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemUse: ItemUseAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A lever has been pulled.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly leverAction: LeverActionAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a piston expands or retracts.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pistonActivate: PistonActivateAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires for a block that is broken by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerBreakBlock: PlayerBreakBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an {@link InputButton} state is\r\n     * changed.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerButtonInput: PlayerButtonInputAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when a player moved to a different dimension.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerDimensionChange: PlayerDimensionChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerEmote: PlayerEmoteAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerGameModeChange: PlayerGameModeChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player's selected slot changes.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerHotbarSelectedSlotChange: PlayerHotbarSelectedSlotChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player's {@link InputMode} changes.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInputModeChange: PlayerInputModeChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a players input permissions change.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInputPermissionCategoryChange: PlayerInputPermissionCategoryChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * An event for when a player interacts with a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithBlock: PlayerInteractWithBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player interacts with an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithEntity: PlayerInteractWithEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item gets added or removed to the\r\n     * player's inventory.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInventoryItemChange: PlayerInventoryItemChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player joins a world.  See also\r\n     * playerSpawn for another related event you can trap for when\r\n     * a player is spawned the first time within a world.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerJoin: PlayerJoinAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player leaves a world.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerLeave: PlayerLeaveAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires for a block that is placed by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerPlaceBlock: PlayerPlaceBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a player spawns or respawns. Note that\r\n     * an additional flag within this event will tell you whether\r\n     * the player is spawning right after join vs. a respawn.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerSpawn: PlayerSpawnAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A pressure plate has popped back up (i.e., there are no\r\n     * entities on the pressure plate.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pressurePlatePop: PressurePlatePopAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A pressure plate has pushed (at least one entity has moved\r\n     * onto a pressure plate.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly pressurePlatePush: PressurePlatePushAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a projectile hits a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly projectileHitBlock: ProjectileHitBlockAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when a projectile hits an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly projectileHitEntity: ProjectileHitEntityAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A target block was hit.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly targetBlockHit: TargetBlockHitAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * A trip wire was tripped.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly tripWireTrip: TripWireTripAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event will be triggered when the weather changes within\r\n     * Minecraft.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly weatherChange: WeatherChangeAfterEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly worldLoad: WorldLoadAfterEventSignal;\r\n}\r",
      "jsdoc": "/**\r\n * Contains a set of events that are available across the scope\r\n * of the World.\r\n */\r",
      "properties": [
        {
          "name": "blockExplode",
          "type": "BlockExplodeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "buttonPush",
          "type": "ButtonPushAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "dataDrivenEntityTrigger",
          "type": "DataDrivenEntityTriggerAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "effectAdd",
          "type": "EffectAddAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entityDie",
          "type": "EntityDieAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entityHealthChanged",
          "type": "EntityHealthChangedAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entityHitBlock",
          "type": "EntityHitBlockAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entityHitEntity",
          "type": "EntityHitEntityAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entityHurt",
          "type": "EntityHurtAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entityLoad",
          "type": "EntityLoadAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entityRemove",
          "type": "EntityRemoveAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entitySpawn",
          "type": "EntitySpawnAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "explosion",
          "type": "ExplosionAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "gameRuleChange",
          "type": "GameRuleChangeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemCompleteUse",
          "type": "ItemCompleteUseAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemReleaseUse",
          "type": "ItemReleaseUseAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemStartUse",
          "type": "ItemStartUseAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemStartUseOn",
          "type": "ItemStartUseOnAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemStopUse",
          "type": "ItemStopUseAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemStopUseOn",
          "type": "ItemStopUseOnAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemUse",
          "type": "ItemUseAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "leverAction",
          "type": "LeverActionAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "pistonActivate",
          "type": "PistonActivateAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerBreakBlock",
          "type": "PlayerBreakBlockAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerButtonInput",
          "type": "PlayerButtonInputAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerDimensionChange",
          "type": "PlayerDimensionChangeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerEmote",
          "type": "PlayerEmoteAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerGameModeChange",
          "type": "PlayerGameModeChangeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerHotbarSelectedSlotChange",
          "type": "PlayerHotbarSelectedSlotChangeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerInputModeChange",
          "type": "PlayerInputModeChangeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerInputPermissionCategoryChange",
          "type": "PlayerInputPermissionCategoryChangeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerInteractWithBlock",
          "type": "PlayerInteractWithBlockAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerInteractWithEntity",
          "type": "PlayerInteractWithEntityAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerInventoryItemChange",
          "type": "PlayerInventoryItemChangeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerJoin",
          "type": "PlayerJoinAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerLeave",
          "type": "PlayerLeaveAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerPlaceBlock",
          "type": "PlayerPlaceBlockAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerSpawn",
          "type": "PlayerSpawnAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "pressurePlatePop",
          "type": "PressurePlatePopAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "pressurePlatePush",
          "type": "PressurePlatePushAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "projectileHitBlock",
          "type": "ProjectileHitBlockAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "projectileHitEntity",
          "type": "ProjectileHitEntityAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "targetBlockHit",
          "type": "TargetBlockHitAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "tripWireTrip",
          "type": "TripWireTripAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "weatherChange",
          "type": "WeatherChangeAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "worldLoad",
          "type": "WorldLoadAfterEventSignal",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldafterevents",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.WorldBeforeEvents": {
      "id": "@minecraft/server.WorldBeforeEvents",
      "name": "WorldBeforeEvents",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A set of events that fire before an actual action occurs. In\r most cases, you can potentially cancel or modify the\r impending event. Note that in before events any APIs that\r modify gameplay state will not function and will throw an\r error. (e.g., dimension.spawnEntity)\r /",
      "definition": "export class WorldBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event is triggered after an event has been added to an\r\n     * entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly effectAdd: EffectAddBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before an entity is removed from the world (for\r\n     * example, unloaded or removed after being killed.)\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly entityRemove: EntityRemoveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event is fired after an explosion occurs.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly explosion: ExplosionBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires when an item is successfully used by a\r\n     * player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly itemUse: ItemUseBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This event fires before a block is broken by a player.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerBreakBlock: PlayerBreakBlockBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerGameModeChange: PlayerGameModeChangeBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before a player interacts with a block.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithBlock: PlayerInteractWithBlockBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires before a player interacts with an entity.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerInteractWithEntity: PlayerInteractWithEntityBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * Fires when a player leaves the game.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly playerLeave: PlayerLeaveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly weatherChange: WeatherChangeBeforeEventSignal;\r\n}\r",
      "jsdoc": "/**\r\n * A set of events that fire before an actual action occurs. In\r\n * most cases, you can potentially cancel or modify the\r\n * impending event. Note that in before events any APIs that\r\n * modify gameplay state will not function and will throw an\r\n * error. (e.g., dimension.spawnEntity)\r\n */\r",
      "properties": [
        {
          "name": "effectAdd",
          "type": "EffectAddBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "entityRemove",
          "type": "EntityRemoveBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "explosion",
          "type": "ExplosionBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "itemUse",
          "type": "ItemUseBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerBreakBlock",
          "type": "PlayerBreakBlockBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerGameModeChange",
          "type": "PlayerGameModeChangeBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerInteractWithBlock",
          "type": "PlayerInteractWithBlockBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerInteractWithEntity",
          "type": "PlayerInteractWithEntityBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "playerLeave",
          "type": "PlayerLeaveBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "weatherChange",
          "type": "WeatherChangeBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldbeforeevents",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.WorldLoadAfterEvent": {
      "id": "@minecraft/server.WorldLoadAfterEvent",
      "name": "WorldLoadAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This property can be read in early-execution mode.",
      "definition": "export class WorldLoadAfterEvent {\n    private constructor();\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldloadafterevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.WorldLoadAfterEventSignal": {
      "id": "@minecraft/server.WorldLoadAfterEventSignal",
      "name": "WorldLoadAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class WorldLoadAfterEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(callback: (arg0: WorldLoadAfterEvent) => void): (arg0: WorldLoadAfterEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: WorldLoadAfterEvent) => void): void;\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldloadaftereventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockBoundingBox": {
      "id": "@minecraft/server.BlockBoundingBox",
      "name": "BlockBoundingBox",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "A BlockBoundingBox is an interface to an object which\r represents an AABB aligned rectangle.\r The BlockBoundingBox assumes that it was created in a valid\r state (min <= max) but cannot guarantee it (unless it was\r The min/max coordinates represent the diametrically opposite\r corners of the rectangle.\r The BlockBoundingBox is not a representation of blocks - it\r has no association with any type, it is just a mathematical\r construct - so a rectangle with\r ( 0,0,0 ) -> ( 0,0,0 )\r BlockVolume} object)\r /",
      "definition": "export interface BlockBoundingBox {\n    /**\r\n     * @remarks\r\n     * A {@link Vector3} that represents the largest corner of the\r\n     * rectangle\r\n     *\r\n     */\r\n    max: Vector3;\r\n    /**\r\n     * @remarks\r\n     * A {@link Vector3} that represents the smallest corner of the\r\n     * rectangle\r\n     *\r\n     */\r\n    min: Vector3;\r\n}\r",
      "jsdoc": "/**\r\n * A BlockBoundingBox is an interface to an object which\r\n * represents an AABB aligned rectangle.\r\n * The BlockBoundingBox assumes that it was created in a valid\r\n * state (min <= max) but cannot guarantee it (unless it was\r\n * created using the associated {@link\r\n * @minecraft/server.BlockBoundingBoxUtils} utility functions.\r\n * The min/max coordinates represent the diametrically opposite\r\n * corners of the rectangle.\r\n * The BlockBoundingBox is not a representation of blocks - it\r\n * has no association with any type, it is just a mathematical\r\n * construct - so a rectangle with\r\n * ( 0,0,0 ) -> ( 0,0,0 )\r\n * has a size of ( 0,0,0 ) (unlike the very similar {@link\r\n * BlockVolume} object)\r\n */\r",
      "properties": [
        {
          "name": "max",
          "type": "Vector3",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "min",
          "type": "Vector3",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockboundingbox",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockCustomComponent": {
      "id": "@minecraft/server.BlockCustomComponent",
      "name": "BlockCustomComponent",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains a set of events that will be raised for a block.\r This object must be bound using the BlockRegistry.\r /",
      "definition": "export interface BlockCustomComponent {\n    /**\r\n     * @remarks\r\n     * This function will be called before a player places the\r\n     * block.\r\n     *\r\n     */\r\n    beforeOnPlayerPlace?: (arg0: BlockComponentPlayerPlaceBeforeEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity falls onto the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onEntityFallOn?: (arg0: BlockComponentEntityFallOnEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when the block that this custom\r\n     * component is bound to is placed.\r\n     *\r\n     */\r\n    onPlace?: (arg0: BlockComponentOnPlaceEvent, arg1: CustomComponentParameters) => void;\r\n    onPlayerBreak?: (arg0: BlockComponentPlayerBreakEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a player sucessfully\r\n     * interacts with the block that this custom component is bound\r\n     * to.\r\n     *\r\n     */\r\n    onPlayerInteract?: (arg0: BlockComponentPlayerInteractEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a block randomly ticks.\r\n     *\r\n     */\r\n    onRandomTick?: (arg0: BlockComponentRandomTickEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity steps off the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onStepOff?: (arg0: BlockComponentStepOffEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an entity steps onto the\r\n     * block that this custom component is bound to.\r\n     *\r\n     */\r\n    onStepOn?: (arg0: BlockComponentStepOnEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when a block ticks.\r\n     *\r\n     */\r\n    onTick?: (arg0: BlockComponentTickEvent, arg1: CustomComponentParameters) => void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains a set of events that will be raised for a block.\r\n * This object must be bound using the BlockRegistry.\r\n */\r",
      "properties": [
        {
          "name": "beforeOnPlayerPlace",
          "type": "(arg0: BlockComponentPlayerPlaceBeforeEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onEntityFallOn",
          "type": "(arg0: BlockComponentEntityFallOnEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onPlace",
          "type": "(arg0: BlockComponentOnPlaceEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onPlayerBreak",
          "type": "(arg0: BlockComponentPlayerBreakEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onPlayerInteract",
          "type": "(arg0: BlockComponentPlayerInteractEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onRandomTick",
          "type": "(arg0: BlockComponentRandomTickEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onStepOff",
          "type": "(arg0: BlockComponentStepOffEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onStepOn",
          "type": "(arg0: BlockComponentStepOnEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onTick",
          "type": "(arg0: BlockComponentTickEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponent",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockEventOptions": {
      "id": "@minecraft/server.BlockEventOptions",
      "name": "BlockEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains optional parameters for registering a block event.\r /",
      "definition": "export interface BlockEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted block's type matches this parameter.\r\n     *\r\n     */\r\n    blockTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted block's permutation matches this parameter.\r\n     *\r\n     */\r\n    permutations?: BlockPermutation[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains optional parameters for registering a block event.\r\n */\r",
      "properties": [
        {
          "name": "blockTypes",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "permutations",
          "type": "BlockPermutation[]",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockeventoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockFillOptions": {
      "id": "@minecraft/server.BlockFillOptions",
      "name": "BlockFillOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for a block fill operation.\r /",
      "definition": "export interface BlockFillOptions {\n    /**\r\n     * @remarks\r\n     * When specified, the fill operation will include / exclude\r\n     * the blocks added to the block filter.\r\n     *\r\n     */\r\n    blockFilter?: BlockFilter;\r\n    /**\r\n     * @remarks\r\n     * When true fillBlocks will not error if part of the fill\r\n     * volume is outside of loaded chunks bounds. Instead it will\r\n     * just fill the blocks that are inside the loaded chunk bounds\r\n     * and ignoring blocks outside.\r\n     *\r\n     */\r\n    ignoreChunkBoundErrors?: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for a block fill operation.\r\n */\r",
      "properties": [
        {
          "name": "blockFilter",
          "type": "BlockFilter",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "ignoreChunkBoundErrors",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockfilloptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockFilter": {
      "id": "@minecraft/server.BlockFilter",
      "name": "BlockFilter",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Options to include or exclude blocks based on type, tag or\r permutation. If no include options are added it will select\r all blocks that are not rejected by the exclude options. If\r at least one include option is added the block must match\r one of the include options to not be rejected.\r /",
      "definition": "export interface BlockFilter {\n    /**\r\n     * @remarks\r\n     * Array of block permutations that the filter should reject if\r\n     * any matches.\r\n     *\r\n     */\r\n    excludePermutations?: BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * Array of block tags that the filter should reject if any\r\n     * matches.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block types that the filter should reject if any\r\n     * matches.\r\n     *\r\n     */\r\n    excludeTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block permutations that the filter should select if\r\n     * at least one matches.\r\n     *\r\n     */\r\n    includePermutations?: BlockPermutation[];\r\n    /**\r\n     * @remarks\r\n     * Array of block tags that the filter should select if at\r\n     * least one matches.\r\n     *\r\n     */\r\n    includeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Array of block types that the filter should select if at\r\n     * least one matches.\r\n     *\r\n     */\r\n    includeTypes?: string[];\r\n}\r",
      "jsdoc": "/**\r\n * Options to include or exclude blocks based on type, tag or\r\n * permutation. If no include options are added it will select\r\n * all blocks that are not rejected by the exclude options. If\r\n * at least one include option is added the block must match\r\n * one of the include options to not be rejected.\r\n */\r",
      "properties": [
        {
          "name": "excludePermutations",
          "type": "BlockPermutation[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "excludeTags",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "excludeTypes",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includePermutations",
          "type": "BlockPermutation[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeTags",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeTypes",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockfilter",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockHitInformation": {
      "id": "@minecraft/server.BlockHitInformation",
      "name": "BlockHitInformation",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains more information for events where a block is hit.\r /",
      "definition": "export interface BlockHitInformation {\n    /**\r\n     * @remarks\r\n     * Block that was hit.\r\n     *\r\n     */\r\n    block: Block;\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Location relative to the bottom north-west corner of the\r\n     * block.\r\n     *\r\n     */\r\n    faceLocation: Vector3;\r\n}\r",
      "jsdoc": "/**\r\n * Contains more information for events where a block is hit.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "face",
          "type": "Direction",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "faceLocation",
          "type": "Vector3",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockhitinformation",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockRaycastHit": {
      "id": "@minecraft/server.BlockRaycastHit",
      "name": "BlockRaycastHit",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains information for block raycast hit results.\r /",
      "definition": "export interface BlockRaycastHit {\n    /**\r\n     * @remarks\r\n     * Block that was hit.\r\n     *\r\n     */\r\n    block: Block;\r\n    /**\r\n     * @remarks\r\n     * Face of the block that was hit.\r\n     *\r\n     */\r\n    face: Direction;\r\n    /**\r\n     * @remarks\r\n     * Hit location relative to the bottom north-west corner of the\r\n     * block.\r\n     *\r\n     */\r\n    faceLocation: Vector3;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information for block raycast hit results.\r\n */\r",
      "properties": [
        {
          "name": "block",
          "type": "Block",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "face",
          "type": "Direction",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "faceLocation",
          "type": "Vector3",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockraycasthit",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockRaycastOptions": {
      "id": "@minecraft/server.BlockRaycastOptions",
      "name": "BlockRaycastOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for configuring a block raycast\r query.\r /",
      "definition": "export interface BlockRaycastOptions extends BlockFilter {\n    /**\r\n     * @remarks\r\n     * If true, liquid blocks will be considered as blocks that\r\n     * 'stop' the raycast.\r\n     *\r\n     */\r\n    includeLiquidBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, passable blocks like vines and flowers will be\r\n     * considered as blocks that 'stop' the raycast.\r\n     *\r\n     */\r\n    includePassableBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Maximum distance, in blocks, to process the raycast.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for configuring a block raycast\r\n * query.\r\n */\r",
      "properties": [
        {
          "name": "includeLiquidBlocks",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includePassableBlocks",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "maxDistance",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "extends": "BlockFilter",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockraycastoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CameraFadeOptions": {
      "id": "@minecraft/server.CameraFadeOptions",
      "name": "CameraFadeOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Used to initiate a full-screen color fade.\r /",
      "definition": "export interface CameraFadeOptions {\n    /**\r\n     * @remarks\r\n     * Fade color to use.\r\n     *\r\n     */\r\n    fadeColor?: RGB;\r\n    /**\r\n     * @remarks\r\n     * Time in seconds for the fade-in, hold, and fade-out seconds.\r\n     *\r\n     */\r\n    fadeTime?: CameraFadeTimeOptions;\r\n}\r",
      "jsdoc": "/**\r\n * Used to initiate a full-screen color fade.\r\n */\r",
      "properties": [
        {
          "name": "fadeColor",
          "type": "RGB",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "fadeTime",
          "type": "CameraFadeTimeOptions",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerafadeoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CameraFadeTimeOptions": {
      "id": "@minecraft/server.CameraFadeTimeOptions",
      "name": "CameraFadeTimeOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains timings for a fade transition.\r /",
      "definition": "export interface CameraFadeTimeOptions {\n    /**\r\n     * @remarks\r\n     * Time, in seconds, for a fade-in.\r\n     *\r\n     */\r\n    fadeInTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time, in seconds, for a fade-out.\r\n     *\r\n     */\r\n    fadeOutTime: number;\r\n    /**\r\n     * @remarks\r\n     * Time, in seconds, to hold the full screen color.\r\n     *\r\n     */\r\n    holdTime: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains timings for a fade transition.\r\n */\r",
      "properties": [
        {
          "name": "fadeInTime",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "fadeOutTime",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "holdTime",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerafadetimeoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CameraFixedBoomOptions": {
      "id": "@minecraft/server.CameraFixedBoomOptions",
      "name": "CameraFixedBoomOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Options to control pivot points and offsets of the third\r person boom preset.\r /",
      "definition": "export interface CameraFixedBoomOptions {\n    /**\r\n     * @remarks\r\n     * Changes the pivot point to be <x, y, z> away from the\r\n     * player.\r\n     *\r\n     */\r\n    entityOffset?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Offsets the camera from center by <x, y>.\r\n     *\r\n     */\r\n    viewOffset?: Vector2;\r\n}\r",
      "jsdoc": "/**\r\n * Options to control pivot points and offsets of the third\r\n * person boom preset.\r\n */\r",
      "properties": [
        {
          "name": "entityOffset",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "viewOffset",
          "type": "Vector2",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerafixedboomoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CameraSetFacingOptions": {
      "id": "@minecraft/server.CameraSetFacingOptions",
      "name": "CameraSetFacingOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Offsets the camera from center by <x, y>.",
      "definition": "export interface CameraSetFacingOptions {\n    easeOptions?: EaseOptions;\r\n    facingEntity: Entity;\r\n    location?: Vector3;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Offsets the camera from center by <x, y>.\r\n     *\r\n     */\r",
      "properties": [
        {
          "name": "easeOptions",
          "type": "EaseOptions",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "facingEntity",
          "type": "Entity",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerasetfacingoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CameraSetLocationOptions": {
      "id": "@minecraft/server.CameraSetLocationOptions",
      "name": "CameraSetLocationOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "definition": "export interface CameraSetLocationOptions {\n    easeOptions?: EaseOptions;\r\n    location: Vector3;\r\n}\r",
      "jsdoc": "",
      "properties": [
        {
          "name": "easeOptions",
          "type": "EaseOptions",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerasetlocationoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CameraSetPosOptions": {
      "id": "@minecraft/server.CameraSetPosOptions",
      "name": "CameraSetPosOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "definition": "export interface CameraSetPosOptions {\n    easeOptions?: EaseOptions;\r\n    facingLocation: Vector3;\r\n    location?: Vector3;\r\n}\r",
      "jsdoc": "",
      "properties": [
        {
          "name": "easeOptions",
          "type": "EaseOptions",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "facingLocation",
          "type": "Vector3",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerasetposoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CameraSetRotOptions": {
      "id": "@minecraft/server.CameraSetRotOptions",
      "name": "CameraSetRotOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "definition": "export interface CameraSetRotOptions {\n    easeOptions?: EaseOptions;\r\n    location?: Vector3;\r\n    rotation: Vector2;\r\n}\r",
      "jsdoc": "",
      "properties": [
        {
          "name": "easeOptions",
          "type": "EaseOptions",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "rotation",
          "type": "Vector2",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerasetrotoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CameraTargetOptions": {
      "id": "@minecraft/server.CameraTargetOptions",
      "name": "CameraTargetOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Used to target an entity with a free camera.\r /",
      "definition": "export interface CameraTargetOptions {\n    /**\r\n     * @remarks\r\n     * Set an <x, y, z> offset from the target entity's center.\r\n     *\r\n     */\r\n    offsetFromTargetCenter?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * The singular entity you want to target.\r\n     *\r\n     */\r\n    targetEntity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Used to target an entity with a free camera.\r\n */\r",
      "properties": [
        {
          "name": "offsetFromTargetCenter",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "targetEntity",
          "type": "Entity",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "cameratargetoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommand": {
      "id": "@minecraft/server.CustomCommand",
      "name": "CustomCommand",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Define the custom command, including name, permissions, and\r parameters.\r /",
      "definition": "export interface CustomCommand {\n    /**\r\n     * @remarks\r\n     * Cheats must be enabled to run this command. Defaults to\r\n     * true.\r\n     *\r\n     */\r\n    cheatsRequired?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Command description as seen on the command line.\r\n     *\r\n     */\r\n    description: string;\r\n    /**\r\n     * @remarks\r\n     * List of mandatory command parameters.\r\n     *\r\n     */\r\n    mandatoryParameters?: CustomCommandParameter[];\r\n    /**\r\n     * @remarks\r\n     * The name of the command. A namespace is required.\r\n     *\r\n     */\r\n    name: string;\r\n    /**\r\n     * @remarks\r\n     * List of optional command parameters.\r\n     *\r\n     */\r\n    optionalParameters?: CustomCommandParameter[];\r\n    /**\r\n     * @remarks\r\n     * The permission level required to execute the command.\r\n     *\r\n     */\r\n    permissionLevel: CommandPermissionLevel;\r\n}\r",
      "jsdoc": "/**\r\n * Define the custom command, including name, permissions, and\r\n * parameters.\r\n */\r",
      "properties": [
        {
          "name": "cheatsRequired",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "description",
          "type": "string",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "mandatoryParameters",
          "type": "CustomCommandParameter[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "optionalParameters",
          "type": "CustomCommandParameter[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "permissionLevel",
          "type": "CommandPermissionLevel",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommand",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandParameter": {
      "id": "@minecraft/server.CustomCommandParameter",
      "name": "CustomCommandParameter",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Definition for each parameter expected by the custom\r command.\r /",
      "definition": "export interface CustomCommandParameter {\n    /**\r\n     * @remarks\r\n     * The name of parameter as it appears on the command line.\r\n     *\r\n     */\r\n    name: string;\r\n    /**\r\n     * @remarks\r\n     * The data type of the parameter.\r\n     *\r\n     */\r\n    type: CustomCommandParamType;\r\n}\r",
      "jsdoc": "/**\r\n * Definition for each parameter expected by the custom\r\n * command.\r\n */\r",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "type",
          "type": "CustomCommandParamType",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandparameter",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandResult": {
      "id": "@minecraft/server.CustomCommandResult",
      "name": "CustomCommandResult",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Interface returned from custom command callback function.\r /",
      "definition": "export interface CustomCommandResult {\n    /**\r\n     * @remarks\r\n     * Message displayed to chat after command execution.\r\n     *\r\n     */\r\n    message?: string;\r\n    /**\r\n     * @remarks\r\n     * Command execution Success or Failure. Determines how the\r\n     * status message is displayed.\r\n     *\r\n     */\r\n    status: CustomCommandStatus;\r\n}\r",
      "jsdoc": "/**\r\n * Interface returned from custom command callback function.\r\n */\r",
      "properties": [
        {
          "name": "message",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "status",
          "type": "CustomCommandStatus",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandresult",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.DefinitionModifier": {
      "id": "@minecraft/server.DefinitionModifier",
      "name": "DefinitionModifier",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains a set of updates to the component definition state\r of an entity.\r /",
      "definition": "export interface DefinitionModifier {\n    /**\r\n     * @remarks\r\n     * Retrieves the list of component groups that will be added\r\n     * via this definition modification.\r\n     *\r\n     */\r\n    addedComponentGroups: string[];\r\n    /**\r\n     * @remarks\r\n     * The list of component groups that will be removed via this\r\n     * definition modification.\r\n     *\r\n     */\r\n    removedComponentGroups: string[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains a set of updates to the component definition state\r\n * of an entity.\r\n */\r",
      "properties": [
        {
          "name": "addedComponentGroups",
          "type": "string[]",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "removedComponentGroups",
          "type": "string[]",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "definitionmodifier",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.DimensionLocation": {
      "id": "@minecraft/server.DimensionLocation",
      "name": "DimensionLocation",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "An exact coordinate within the world, including its\r dimension and location.\r /",
      "definition": "export interface DimensionLocation {\n    /**\r\n     * @remarks\r\n     * Dimension that this coordinate is associated with.\r\n     *\r\n     */\r\n    dimension: Dimension;\r\n    /**\r\n     * @remarks\r\n     * X component of this dimension-location.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of this dimension-location.\r\n     *\r\n     */\r\n    y: number;\r\n    /**\r\n     * @remarks\r\n     * Z component of this dimension-location.\r\n     *\r\n     */\r\n    z: number;\r\n}\r",
      "jsdoc": "/**\r\n * An exact coordinate within the world, including its\r\n * dimension and location.\r\n */\r",
      "properties": [
        {
          "name": "dimension",
          "type": "Dimension",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "x",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "y",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "z",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dimensionlocation",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EaseOptions": {
      "id": "@minecraft/server.EaseOptions",
      "name": "EaseOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains options associated with easing between positions\r and/or rotations.\r /",
      "definition": "export interface EaseOptions {\n    /**\r\n     * @remarks\r\n     * Time for the ease operation.\r\n     *\r\n     */\r\n    easeTime?: number;\r\n    /**\r\n     * @remarks\r\n     * Type of ease operation to use.\r\n     *\r\n     */\r\n    easeType?: EasingType;\r\n}\r",
      "jsdoc": "/**\r\n * Contains options associated with easing between positions\r\n * and/or rotations.\r\n */\r",
      "properties": [
        {
          "name": "easeTime",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "easeType",
          "type": "EasingType",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "easeoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.Enchantment": {
      "id": "@minecraft/server.Enchantment",
      "name": "Enchantment",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "This interface represents a specific leveled enchantment\r that is applied to an item.\r /",
      "definition": "export interface Enchantment {\n    /**\r\n     * @remarks\r\n     * The level of this enchantment instance.\r\n     *\r\n     */\r\n    level: number;\r\n    /**\r\n     * @remarks\r\n     * The enchantment type of this instance.\r\n     *\r\n     */\r\n    type: EnchantmentType;\r\n}\r",
      "jsdoc": "/**\r\n * This interface represents a specific leveled enchantment\r\n * that is applied to an item.\r\n */\r",
      "properties": [
        {
          "name": "level",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "type",
          "type": "EnchantmentType",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantment",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityApplyDamageByProjectileOptions": {
      "id": "@minecraft/server.EntityApplyDamageByProjectileOptions",
      "name": "EntityApplyDamageByProjectileOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Additional options for when damage has been applied via a\r projectile.\r /",
      "definition": "export interface EntityApplyDamageByProjectileOptions {\n    /**\r\n     * @remarks\r\n     * Optional entity that fired the projectile.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Projectile that caused damage.\r\n     *\r\n     */\r\n    damagingProjectile: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Additional options for when damage has been applied via a\r\n * projectile.\r\n */\r",
      "properties": [
        {
          "name": "damagingEntity",
          "type": "Entity",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "damagingProjectile",
          "type": "Entity",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityapplydamagebyprojectileoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityApplyDamageOptions": {
      "id": "@minecraft/server.EntityApplyDamageOptions",
      "name": "EntityApplyDamageOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Additional descriptions and metadata for a damage event.\r /",
      "definition": "export interface EntityApplyDamageOptions {\n    /**\r\n     * @remarks\r\n     * Underlying cause of the damage.\r\n     *\r\n     */\r\n    cause: EntityDamageCause;\r\n    /**\r\n     * @remarks\r\n     * Optional entity that caused the damage.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Additional descriptions and metadata for a damage event.\r\n */\r",
      "properties": [
        {
          "name": "cause",
          "type": "EntityDamageCause",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "damagingEntity",
          "type": "Entity",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityapplydamageoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityDamageSource": {
      "id": "@minecraft/server.EntityDamageSource",
      "name": "EntityDamageSource",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Provides information about how damage has been applied to an\r entity.\r /",
      "definition": "export interface EntityDamageSource {\n    /**\r\n     * @remarks\r\n     * Cause enumeration of damage.\r\n     *\r\n     */\r\n    cause: EntityDamageCause;\r\n    /**\r\n     * @remarks\r\n     * Optional entity that caused the damage.\r\n     *\r\n     */\r\n    damagingEntity?: Entity;\r\n    /**\r\n     * @remarks\r\n     * Optional projectile that may have caused damage.\r\n     *\r\n     */\r\n    damagingProjectile?: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Provides information about how damage has been applied to an\r\n * entity.\r\n */\r",
      "properties": [
        {
          "name": "cause",
          "type": "EntityDamageCause",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "damagingEntity",
          "type": "Entity",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "damagingProjectile",
          "type": "Entity",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydamagesource",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityDataDrivenTriggerEventOptions": {
      "id": "@minecraft/server.EntityDataDrivenTriggerEventOptions",
      "name": "EntityDataDrivenTriggerEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Specifies additional filters that are used in registering a\r data driven trigger event for entities.\r /",
      "definition": "export interface EntityDataDrivenTriggerEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire for entities\r\n     * that match the entities within this collection.\r\n     *\r\n     */\r\n    entities?: Entity[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted entities' type matches this parameter.\r\n     *\r\n     */\r\n    entityTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted triggered event matches one of the events listed in\r\n     * this parameter.\r\n     *\r\n     */\r\n    eventTypes?: string[];\r\n}\r",
      "jsdoc": "/**\r\n * Specifies additional filters that are used in registering a\r\n * data driven trigger event for entities.\r\n */\r",
      "properties": [
        {
          "name": "entities",
          "type": "Entity[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "entityTypes",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "eventTypes",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydatadriventriggereventoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityEffectOptions": {
      "id": "@minecraft/server.EntityEffectOptions",
      "name": "EntityEffectOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for entity effects.\r /",
      "definition": "export interface EntityEffectOptions {\n    /**\r\n     * @remarks\r\n     * The strength of the effect.\r\n     *\r\n     */\r\n    amplifier?: number;\r\n    /**\r\n     * @remarks\r\n     * If true, will show particles when effect is on the entity.\r\n     *\r\n     */\r\n    showParticles?: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for entity effects.\r\n */\r",
      "properties": [
        {
          "name": "amplifier",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "showParticles",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityeffectoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityEventOptions": {
      "id": "@minecraft/server.EntityEventOptions",
      "name": "EntityEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains optional parameters for registering an entity\r event.\r /",
      "definition": "export interface EntityEventOptions {\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire for entities\r\n     * that match the entities within this collection.\r\n     *\r\n     */\r\n    entities?: Entity[];\r\n    /**\r\n     * @remarks\r\n     * If this value is set, this event will only fire if the\r\n     * impacted entities' type matches this parameter.\r\n     *\r\n     */\r\n    entityTypes?: string[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains optional parameters for registering an entity\r\n * event.\r\n */\r",
      "properties": [
        {
          "name": "entities",
          "type": "Entity[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "entityTypes",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityeventoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityFilter": {
      "id": "@minecraft/server.EntityFilter",
      "name": "EntityFilter",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains options for filtering entities.\r /",
      "definition": "export interface EntityFilter {\n    /**\r\n     * @remarks\r\n     * Excludes entities that match one or more of the specified\r\n     * families.\r\n     *\r\n     */\r\n    excludeFamilies?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities if have a specific gamemode that matches\r\n     * the specified gamemode.\r\n     *\r\n     */\r\n    excludeGameModes?: GameMode[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities that have a name that match one of the\r\n     * specified values.\r\n     *\r\n     */\r\n    excludeNames?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities with a tag that matches one of the\r\n     * specified values.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Excludes entities if they are one of the specified types.\r\n     *\r\n     */\r\n    excludeTypes?: string[];\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that match all of the\r\n     * specified families.\r\n     *\r\n     */\r\n    families?: string[];\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities with a gamemode that matches\r\n     * the specified gamemode.\r\n     *\r\n     */\r\n    gameMode?: GameMode;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at most\r\n     * this horizontal rotation.\r\n     *\r\n     */\r\n    maxHorizontalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have at most this level are\r\n     * returned.\r\n     *\r\n     */\r\n    maxLevel?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, only entities that have at most this vertical\r\n     * rotation are returned.\r\n     *\r\n     */\r\n    maxVerticalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at a\r\n     * minimum this horizontal rotation.\r\n     *\r\n     */\r\n    minHorizontalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have at least this level are\r\n     * returned.\r\n     *\r\n     */\r\n    minLevel?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, will only include entities that have at least\r\n     * this vertical rotation.\r\n     *\r\n     */\r\n    minVerticalRotation?: number;\r\n    /**\r\n     * @remarks\r\n     * Includes entities with the specified name.\r\n     *\r\n     */\r\n    name?: string;\r\n    propertyOptions?: EntityQueryPropertyOptions[];\r\n    /**\r\n     * @remarks\r\n     * Gets/sets a collection of EntityQueryScoreOptions objects\r\n     * with filters for specific scoreboard objectives.\r\n     *\r\n     */\r\n    scoreOptions?: EntityQueryScoreOptions[];\r\n    /**\r\n     * @remarks\r\n     * Includes entities that match all of the specified tags.\r\n     *\r\n     */\r\n    tags?: string[];\r\n    /**\r\n     * @remarks\r\n     * If defined, entities that match this type are included.\r\n     *\r\n     */\r\n    type?: string;\r\n}\r",
      "jsdoc": "/**\r\n * Contains options for filtering entities.\r\n */\r",
      "properties": [
        {
          "name": "excludeFamilies",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "excludeGameModes",
          "type": "GameMode[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "excludeNames",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "excludeTags",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "excludeTypes",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "families",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "gameMode",
          "type": "GameMode",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "maxHorizontalRotation",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "maxLevel",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "maxVerticalRotation",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "minHorizontalRotation",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "minLevel",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "minVerticalRotation",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "name",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "propertyOptions",
          "type": "EntityQueryPropertyOptions[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "scoreOptions",
          "type": "EntityQueryScoreOptions[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "tags",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "type",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityfilter",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityHitInformation": {
      "id": "@minecraft/server.EntityHitInformation",
      "name": "EntityHitInformation",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional information about an entity that was\r hit.\r /",
      "definition": "export interface EntityHitInformation {\n    /**\r\n     * @remarks\r\n     * Entity that was hit.\r\n     *\r\n     */\r\n    entity?: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional information about an entity that was\r\n * hit.\r\n */\r",
      "properties": [
        {
          "name": "entity",
          "type": "Entity",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitinformation",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityQueryOptions": {
      "id": "@minecraft/server.EntityQueryOptions",
      "name": "EntityQueryOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains options for selecting entities within an area.\r ```typescript\r  function blockConditional(targetLocation: DimensionLocation) {\r   targetLocation.dimension\r     .getEntities({\r       type: \"fox\",\r     })\r     .filter((entity) => {\r       const block = targetLocation.dimension.getBlock({\r         x: entity.location.x,\r         y: entity.location.y - 1,\r         z: entity.location.z,\r       });\r        return block !== undefined && block.matches(\"minecraft:stone\");\r     })\r     .forEach((entity) => {\r       targetLocation.dimension.spawnEntity(\"salmon\", entity.location);\r     });\r }\r ```\r ```typescript\r  function findEntitiesHavingPropertyEqualsTo(\r     targetLocation: DimensionLocation\r ) {\r   // Minecraft bees have a has_nectar boolean property\r   const queryOption: EntityQueryOptions = {\r     propertyOptions: [{ propertyId: \"minecraft:has_nectar\", value: { equals: true } }],\r   };\r    const entities = targetLocation.dimension.getEntities(queryOption);\r }\r ```\r ```typescript\r  function playSoundChained(targetLocation: DimensionLocation) {\r   const targetPlayers = targetLocation.dimension.getPlayers();\r   const originEntities = targetLocation.dimension.getEntities({\r     type: \"armor_stand\",\r     name: \"myArmorStand\",\r     tags: [\"dummyTag1\"],\r     excludeTags: [\"dummyTag2\"],\r   });\r    originEntities.forEach((entity) => {\r     targetPlayers.forEach((player) => {\r       player.playSound(\"raid.horn\");\r     });\r   });\r }\r ```\r ```typescript\r  function setScoreboardChained(\r     targetLocation: DimensionLocation\r ) {\r   const objective = world.scoreboard.addObjective(\"scoreObjective1\", \"dummy\");\r   targetLocation.dimension\r     .getEntities({\r       type: \"armor_stand\",\r       name: \"myArmorStand\",\r     })\r     .forEach((entity) => {\r       if (entity.scoreboardIdentity !== undefined) {\r         objective.setScore(entity.scoreboardIdentity, -1);\r       }\r     });\r }\r ```\r ```typescript\r  function summonMobChained(targetLocation: DimensionLocation) {\r   const armorStandArray = targetLocation.dimension.getEntities({\r     type: \"armor_stand\",\r   });\r   const playerArray = targetLocation.dimension.getPlayers({\r     location: { x: 0, y: -60, z: 0 },\r     closest: 4,\r     maxDistance: 15,\r   });\r   armorStandArray.forEach((entity) => {\r     playerArray.forEach((player) => {\r       targetLocation.dimension.spawnEntity(\"pig\", {\r         x: player.location.x + 1,\r         y: player.location.y,\r         z: player.location.z,\r       });\r     });\r   });\r }\r ```\r ```typescript\r  function bounceSkeletons(targetLocation: DimensionLocation) {\r   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r    // create some sample mob data\r   for (let i = 0; i < 10; i++) {\r     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r   }\r    const eqo: EntityQueryOptions = {\r     type: \"skeleton\",\r   };\r    for (const entity of targetLocation.dimension.getEntities(eqo)) {\r     entity.applyKnockback(0, 0, 0, 1);\r   }\r }\r ```\r ```typescript\r  function tagsQuery(targetLocation: DimensionLocation) {\r   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r    // create some sample mob data\r   for (let i = 0; i < 10; i++) {\r     const mobTypeId = mobs[i % mobs.length];\r     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r     entity.addTag(\"mobparty.\" + mobTypeId);\r   }\r    const eqo: EntityQueryOptions = {\r     tags: [\"mobparty.skeleton\"],\r   };\r    for (const entity of targetLocation.dimension.getEntities(eqo)) {\r     entity.kill();\r   }\r }\r ```\r ```typescript\r  function testThatEntityIsFeatherItem(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const items = targetLocation.dimension.getEntities({\r     location: targetLocation,\r     maxDistance: 20,\r   });\r    for (const item of items) {\r     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r      if (itemComp) {\r       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r         log(\"Success! Found a feather\", 1);\r       }\r     }\r   }\r }\r ```\r /",
      "definition": "export interface EntityQueryOptions extends EntityFilter {\n    /**\r\n     * @remarks\r\n     * Limits the number of entities to return, opting for the\r\n     * closest N entities as specified by this property. The\r\n     * location value must also be specified on the query options\r\n     * object.\r\n     *\r\n     */\r\n    closest?: number;\r\n    /**\r\n     * @remarks\r\n     * Limits the number of entities to return, opting for the\r\n     * farthest N entities as specified by this property. The\r\n     * location value must also be specified on the query options\r\n     * object.\r\n     *\r\n     */\r\n    farthest?: number;\r\n    /**\r\n     * @remarks\r\n     * Adds a seed location to the query that is used in\r\n     * conjunction with closest, farthest, limit, volume, and\r\n     * distance properties.\r\n     *\r\n     */\r\n    location?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that are less than this\r\n     * distance away from the location specified in the location\r\n     * property.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n    /**\r\n     * @remarks\r\n     * If specified, includes entities that are least this distance\r\n     * away from the location specified in the location property.\r\n     *\r\n     */\r\n    minDistance?: number;\r\n    /**\r\n     * @remarks\r\n     * In conjunction with location, specified a cuboid volume of\r\n     * entities to include.\r\n     *\r\n     */\r\n    volume?: Vector3;\r\n}\r",
      "jsdoc": "/**\r\n * Contains options for selecting entities within an area.\r\n * @example blockConditional.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function blockConditional(targetLocation: DimensionLocation) {\r\n *   targetLocation.dimension\r\n *     .getEntities({\r\n *       type: \"fox\",\r\n *     })\r\n *     .filter((entity) => {\r\n *       const block = targetLocation.dimension.getBlock({\r\n *         x: entity.location.x,\r\n *         y: entity.location.y - 1,\r\n *         z: entity.location.z,\r\n *       });\r\n *\r\n *       return block !== undefined && block.matches(\"minecraft:stone\");\r\n *     })\r\n *     .forEach((entity) => {\r\n *       targetLocation.dimension.spawnEntity(\"salmon\", entity.location);\r\n *     });\r\n * }\r\n * ```\r\n * @example findEntitiesHavingPropertyEqualsTo.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function findEntitiesHavingPropertyEqualsTo(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   // Minecraft bees have a has_nectar boolean property\r\n *   const queryOption: EntityQueryOptions = {\r\n *     propertyOptions: [{ propertyId: \"minecraft:has_nectar\", value: { equals: true } }],\r\n *   };\r\n *\r\n *   const entities = targetLocation.dimension.getEntities(queryOption);\r\n * }\r\n * ```\r\n * @example playSoundChained.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function playSoundChained(targetLocation: DimensionLocation) {\r\n *   const targetPlayers = targetLocation.dimension.getPlayers();\r\n *   const originEntities = targetLocation.dimension.getEntities({\r\n *     type: \"armor_stand\",\r\n *     name: \"myArmorStand\",\r\n *     tags: [\"dummyTag1\"],\r\n *     excludeTags: [\"dummyTag2\"],\r\n *   });\r\n *\r\n *   originEntities.forEach((entity) => {\r\n *     targetPlayers.forEach((player) => {\r\n *       player.playSound(\"raid.horn\");\r\n *     });\r\n *   });\r\n * }\r\n * ```\r\n * @example setScoreboardChained.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function setScoreboardChained(\r\n *     targetLocation: DimensionLocation\r\n * ) {\r\n *   const objective = world.scoreboard.addObjective(\"scoreObjective1\", \"dummy\");\r\n *   targetLocation.dimension\r\n *     .getEntities({\r\n *       type: \"armor_stand\",\r\n *       name: \"myArmorStand\",\r\n *     })\r\n *     .forEach((entity) => {\r\n *       if (entity.scoreboardIdentity !== undefined) {\r\n *         objective.setScore(entity.scoreboardIdentity, -1);\r\n *       }\r\n *     });\r\n * }\r\n * ```\r\n * @example summonMobChained.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function summonMobChained(targetLocation: DimensionLocation) {\r\n *   const armorStandArray = targetLocation.dimension.getEntities({\r\n *     type: \"armor_stand\",\r\n *   });\r\n *   const playerArray = targetLocation.dimension.getPlayers({\r\n *     location: { x: 0, y: -60, z: 0 },\r\n *     closest: 4,\r\n *     maxDistance: 15,\r\n *   });\r\n *   armorStandArray.forEach((entity) => {\r\n *     playerArray.forEach((player) => {\r\n *       targetLocation.dimension.spawnEntity(\"pig\", {\r\n *         x: player.location.x + 1,\r\n *         y: player.location.y,\r\n *         z: player.location.z,\r\n *       });\r\n *     });\r\n *   });\r\n * }\r\n * ```\r\n * @example bounceSkeletons.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function bounceSkeletons(targetLocation: DimensionLocation) {\r\n *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n *\r\n *   // create some sample mob data\r\n *   for (let i = 0; i < 10; i++) {\r\n *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r\n *   }\r\n *\r\n *   const eqo: EntityQueryOptions = {\r\n *     type: \"skeleton\",\r\n *   };\r\n *\r\n *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n *     entity.applyKnockback(0, 0, 0, 1);\r\n *   }\r\n * }\r\n * ```\r\n * @example tagsQuery.ts\r\n * ```typescript\r\n * import { EntityQueryOptions, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function tagsQuery(targetLocation: DimensionLocation) {\r\n *   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r\n *\r\n *   // create some sample mob data\r\n *   for (let i = 0; i < 10; i++) {\r\n *     const mobTypeId = mobs[i % mobs.length];\r\n *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r\n *     entity.addTag(\"mobparty.\" + mobTypeId);\r\n *   }\r\n *\r\n *   const eqo: EntityQueryOptions = {\r\n *     tags: [\"mobparty.skeleton\"],\r\n *   };\r\n *\r\n *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\r\n *     entity.kill();\r\n *   }\r\n * }\r\n * ```\r\n * @example testThatEntityIsFeatherItem.ts\r\n * ```typescript\r\n * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n *\r\n * function testThatEntityIsFeatherItem(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const items = targetLocation.dimension.getEntities({\r\n *     location: targetLocation,\r\n *     maxDistance: 20,\r\n *   });\r\n *\r\n *   for (const item of items) {\r\n *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r\n *\r\n *     if (itemComp) {\r\n *       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r\n *         log(\"Success! Found a feather\", 1);\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "closest",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "farthest",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "location",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "maxDistance",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "minDistance",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "volume",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "extends": "EntityFilter",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityqueryoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityQueryPropertyOptions": {
      "id": "@minecraft/server.EntityQueryPropertyOptions",
      "name": "EntityQueryPropertyOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "In conjunction with location, specified a cuboid volume of\r entities to include.",
      "definition": "export interface EntityQueryPropertyOptions {\n    exclude?: boolean;\r\n    propertyId: string;\r\n    value?:\r\n        | boolean\r\n        | string\r\n        | EqualsComparison\r\n        | GreaterThanComparison\r\n        | GreaterThanOrEqualsComparison\r\n        | LessThanComparison\r\n        | LessThanOrEqualsComparison\r\n        | NotEqualsComparison\r\n        | RangeComparison;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * In conjunction with location, specified a cuboid volume of\r\n     * entities to include.\r\n     *\r\n     */\r",
      "properties": [
        {
          "name": "exclude",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "propertyId",
          "type": "string",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityquerypropertyoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityQueryScoreOptions": {
      "id": "@minecraft/server.EntityQueryScoreOptions",
      "name": "EntityQueryScoreOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for filtering players based on\r their score for an objective.\r /",
      "definition": "export interface EntityQueryScoreOptions {\n    /**\r\n     * @remarks\r\n     * If set to true, entities and players within this score range\r\n     * are excluded from query results.\r\n     *\r\n     */\r\n    exclude?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have a score equal to or under\r\n     * maxScore are included.\r\n     *\r\n     */\r\n    maxScore?: number;\r\n    /**\r\n     * @remarks\r\n     * If defined, only players that have a score equal to or over\r\n     * minScore are included.\r\n     *\r\n     */\r\n    minScore?: number;\r\n    /**\r\n     * @remarks\r\n     * Identifier of the scoreboard objective to filter on.\r\n     *\r\n     */\r\n    objective?: string;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for filtering players based on\r\n * their score for an objective.\r\n */\r",
      "properties": [
        {
          "name": "exclude",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "maxScore",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "minScore",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "objective",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityqueryscoreoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityRaycastHit": {
      "id": "@minecraft/server.EntityRaycastHit",
      "name": "EntityRaycastHit",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains information for entity raycast hit results.\r /",
      "definition": "export interface EntityRaycastHit {\n    /**\r\n     * @remarks\r\n     * Distance from ray origin to entity bounds.\r\n     *\r\n     */\r\n    distance: number;\r\n    /**\r\n     * @remarks\r\n     * Entity that was hit.\r\n     *\r\n     */\r\n    entity: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Contains information for entity raycast hit results.\r\n */\r",
      "properties": [
        {
          "name": "distance",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "entity",
          "type": "Entity",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityraycasthit",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EntityRaycastOptions": {
      "id": "@minecraft/server.EntityRaycastOptions",
      "name": "EntityRaycastOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for an entity raycast operation.\r /",
      "definition": "export interface EntityRaycastOptions extends EntityFilter {\n    /**\r\n     * @remarks\r\n     * If true, blocks will not be considered as blocks that 'stop'\r\n     * the raycast.\r\n     *\r\n     */\r\n    ignoreBlockCollision?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, liquid blocks will be considered as blocks that\r\n     * 'stop' the raycast.\r\n     *\r\n     */\r\n    includeLiquidBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, passable blocks like vines and flowers will be\r\n     * considered as blocks that 'stop' the raycast.\r\n     *\r\n     */\r\n    includePassableBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Maximum distance, in blocks, to process the raycast.\r\n     *\r\n     */\r\n    maxDistance?: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for an entity raycast operation.\r\n */\r",
      "properties": [
        {
          "name": "ignoreBlockCollision",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeLiquidBlocks",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includePassableBlocks",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "maxDistance",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "extends": "EntityFilter",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityraycastoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.EqualsComparison": {
      "id": "@minecraft/server.EqualsComparison",
      "name": "EqualsComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Equal to operator.\r /",
      "definition": "export interface EqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    equals: boolean | number | string;\r\n}\r",
      "jsdoc": "/**\r\n * Equal to operator.\r\n */\r",
      "properties": [
        {
          "name": "equals",
          "type": "boolean | number | string",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "equalscomparison",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ExplosionOptions": {
      "id": "@minecraft/server.ExplosionOptions",
      "name": "ExplosionOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Dimension.createExplosion} method.\r ```typescript\r  function createNoBlockExplosion(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r    log(\"Creating an explosion of radius 15 that does not break blocks.\");\r   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r }\r ```\r ```typescript\r  function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r    log(\"Creating an explosion of radius 15 that causes fire.\");\r   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r    const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r    log(\"Creating an explosion of radius 10 that can go underwater.\");\r   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r }\r ```\r /",
      "definition": "export interface ExplosionOptions {\n    /**\r\n     * @remarks\r\n     * Whether parts of the explosion also impact underwater.\r\n     *\r\n     */\r\n    allowUnderwater?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the explosion will break blocks within the blast\r\n     * radius.\r\n     *\r\n     */\r\n    breaksBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * If true, the explosion is accompanied by fires within or\r\n     * near the blast radius.\r\n     *\r\n     */\r\n    causesFire?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Optional source of the explosion.\r\n     *\r\n     */\r\n    source?: Entity;\r\n}\r",
      "jsdoc": "/**\r\n * Additional configuration options for the {@link\r\n * Dimension.createExplosion} method.\r\n * @example createNoBlockExplosion.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function createNoBlockExplosion(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r\n *\r\n *   log(\"Creating an explosion of radius 15 that does not break blocks.\");\r\n *   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r\n * }\r\n * ```\r\n * @example createExplosions.ts\r\n * ```typescript\r\n * import { DimensionLocation } from \"@minecraft/server\";\r\n * import { Vector3Utils } from \"@minecraft/math\";\r\n *\r\n * function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r\n *\r\n *   log(\"Creating an explosion of radius 15 that causes fire.\");\r\n *   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r\n *\r\n *   const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r\n *\r\n *   log(\"Creating an explosion of radius 10 that can go underwater.\");\r\n *   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "allowUnderwater",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "breaksBlocks",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "causesFire",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "source",
          "type": "Entity",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.GreaterThanComparison": {
      "id": "@minecraft/server.GreaterThanComparison",
      "name": "GreaterThanComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Greater than operator.\r /",
      "definition": "export interface GreaterThanComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    greaterThan: number;\r\n}\r",
      "jsdoc": "/**\r\n * Greater than operator.\r\n */\r",
      "properties": [
        {
          "name": "greaterThan",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "greaterthancomparison",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.GreaterThanOrEqualsComparison": {
      "id": "@minecraft/server.GreaterThanOrEqualsComparison",
      "name": "GreaterThanOrEqualsComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Greater than or equal to operator.\r /",
      "definition": "export interface GreaterThanOrEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    greaterThanOrEquals: number;\r\n}\r",
      "jsdoc": "/**\r\n * Greater than or equal to operator.\r\n */\r",
      "properties": [
        {
          "name": "greaterThanOrEquals",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "greaterthanorequalscomparison",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.HotbarEventOptions": {
      "id": "@minecraft/server.HotbarEventOptions",
      "name": "HotbarEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional filtering options for hotbar events.\r /",
      "definition": "export interface HotbarEventOptions {\n    /**\r\n     * @remarks\r\n     * The slot indexes to consider. Values should be between 0 and\r\n     * 8, inclusive. If not specified, all slots are considered.\r\n     *\r\n     */\r\n    allowedSlots?: number[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional filtering options for hotbar events.\r\n */\r",
      "properties": [
        {
          "name": "allowedSlots",
          "type": "number[]",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "hotbareventoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.InputEventOptions": {
      "id": "@minecraft/server.InputEventOptions",
      "name": "InputEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "that filters out which events are passed to the provided\r callback.\r /",
      "definition": "export interface InputEventOptions {\n    /**\r\n     * @remarks\r\n     * The buttons the callback should be called for. If undefined,\r\n     * the callback will be called for all buttons.\r\n     *\r\n     */\r\n    buttons?: InputButton[];\r\n    /**\r\n     * @remarks\r\n     * The state the callback should be called for. If undefined,\r\n     * the callback will be called for all button states.\r\n     *\r\n     */\r\n    state?: ButtonState;\r\n}\r",
      "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server.PlayerButtonInputAfterEventSignal.subscribe}\r\n * that filters out which events are passed to the provided\r\n * callback.\r\n */\r",
      "properties": [
        {
          "name": "buttons",
          "type": "InputButton[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "state",
          "type": "ButtonState",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputeventoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.InventoryItemEventOptions": {
      "id": "@minecraft/server.InventoryItemEventOptions",
      "name": "InventoryItemEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional filtering options for inventory item\r events.\r /",
      "definition": "export interface InventoryItemEventOptions {\n    /**\r\n     * @remarks\r\n     * The slot indexes to consider. Values should be positive\r\n     * numbers. If not specified, all slots are considered.\r\n     *\r\n     */\r\n    allowedSlots?: number[];\r\n    /**\r\n     * @remarks\r\n     * The names for the items to exclude.\r\n     *\r\n     */\r\n    excludeItems?: string[];\r\n    /**\r\n     * @remarks\r\n     * The item tags to exclude.\r\n     *\r\n     */\r\n    excludeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * Flag to specify to ignore quantity changes only. True to\r\n     * ignore quantity changes, false to not ignore quantity\r\n     * changes.\r\n     *\r\n     */\r\n    ignoreQuantityChange?: boolean;\r\n    /**\r\n     * @remarks\r\n     * The item names to consider.\r\n     *\r\n     */\r\n    includeItems?: string[];\r\n    /**\r\n     * @remarks\r\n     * The item tags to consider.\r\n     *\r\n     */\r\n    includeTags?: string[];\r\n    /**\r\n     * @remarks\r\n     * The player inventory type to consider.\r\n     *\r\n     */\r\n    inventoryType?: PlayerInventoryType;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional filtering options for inventory item\r\n * events.\r\n */\r",
      "properties": [
        {
          "name": "allowedSlots",
          "type": "number[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "excludeItems",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "excludeTags",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "ignoreQuantityChange",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeItems",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeTags",
          "type": "string[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "inventoryType",
          "type": "PlayerInventoryType",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inventoryitemeventoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ItemCustomComponent": {
      "id": "@minecraft/server.ItemCustomComponent",
      "name": "ItemCustomComponent",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains a set of events that will be raised for an item.\r This object must be bound using the ItemComponentRegistry.\r /",
      "definition": "export interface ItemCustomComponent {\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is hitting an entity and about to take durability\r\n     * damage.\r\n     *\r\n     */\r\n    onBeforeDurabilityDamage?: (\r\n        arg0: ItemComponentBeforeDurabilityDamageEvent,\r\n        arg1: CustomComponentParameters,\r\n    ) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component's use duration was completed.\r\n     *\r\n     */\r\n    onCompleteUse?: (arg0: ItemComponentCompleteUseEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is eaten by an entity.\r\n     *\r\n     */\r\n    onConsume?: (arg0: ItemComponentConsumeEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used to hit another entity.\r\n     *\r\n     */\r\n    onHitEntity?: (arg0: ItemComponentHitEntityEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used to mine a block.\r\n     *\r\n     */\r\n    onMineBlock?: (arg0: ItemComponentMineBlockEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used by a player.\r\n     *\r\n     */\r\n    onUse?: (arg0: ItemComponentUseEvent, arg1: CustomComponentParameters) => void;\r\n    /**\r\n     * @remarks\r\n     * This function will be called when an item containing this\r\n     * component is used on a block.\r\n     *\r\n     */\r\n    onUseOn?: (arg0: ItemComponentUseOnEvent, arg1: CustomComponentParameters) => void;\r\n}\r",
      "jsdoc": "/**\r\n * Contains a set of events that will be raised for an item.\r\n * This object must be bound using the ItemComponentRegistry.\r\n */\r",
      "properties": [
        {
          "name": "onBeforeDurabilityDamage",
          "type": "(",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "arg0",
          "type": "ItemComponentBeforeDurabilityDamageEvent,",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "arg1",
          "type": "CustomComponentParameters,",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "onCompleteUse",
          "type": "(arg0: ItemComponentCompleteUseEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onConsume",
          "type": "(arg0: ItemComponentConsumeEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onHitEntity",
          "type": "(arg0: ItemComponentHitEntityEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onMineBlock",
          "type": "(arg0: ItemComponentMineBlockEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onUse",
          "type": "(arg0: ItemComponentUseEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "onUseOn",
          "type": "(arg0: ItemComponentUseOnEvent, arg1: CustomComponentParameters) => void",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponent",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.JigsawPlaceOptions": {
      "id": "@minecraft/server.JigsawPlaceOptions",
      "name": "JigsawPlaceOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "StructureManager.placeJigsaw}.\r /",
      "definition": "export interface JigsawPlaceOptions {\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the jigsaw blocks should be kept when generating the\r\n     * structure. Defaults to false.\r\n     *\r\n     */\r\n    keepJigsaws?: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.placeJigsaw}.\r\n */\r",
      "properties": [
        {
          "name": "includeEntities",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "keepJigsaws",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "jigsawplaceoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.JigsawStructurePlaceOptions": {
      "id": "@minecraft/server.JigsawStructurePlaceOptions",
      "name": "JigsawStructurePlaceOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "StructureManager.placeJigsawStructure}.\r /",
      "definition": "export interface JigsawStructurePlaceOptions {\n    /**\r\n     * @remarks\r\n     * Whether the start height defined in the jigsaw structure\r\n     * definition should be ignored and overridden with the\r\n     * specified y coordinate. Defaults to false.\r\n     *\r\n     */\r\n    ignoreStartHeight?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether the jigsaw blocks should be kept when generating the\r\n     * structure. Defaults to false.\r\n     *\r\n     */\r\n    keepJigsaws?: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.placeJigsawStructure}.\r\n */\r",
      "properties": [
        {
          "name": "ignoreStartHeight",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeEntities",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "keepJigsaws",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "jigsawstructureplaceoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.LessThanComparison": {
      "id": "@minecraft/server.LessThanComparison",
      "name": "LessThanComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Less than operator.\r /",
      "definition": "export interface LessThanComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    lessThan: number;\r\n}\r",
      "jsdoc": "/**\r\n * Less than operator.\r\n */\r",
      "properties": [
        {
          "name": "lessThan",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "lessthancomparison",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.LessThanOrEqualsComparison": {
      "id": "@minecraft/server.LessThanOrEqualsComparison",
      "name": "LessThanOrEqualsComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Less than or equal to operator.\r /",
      "definition": "export interface LessThanOrEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    lessThanOrEquals: number;\r\n}\r",
      "jsdoc": "/**\r\n * Less than or equal to operator.\r\n */\r",
      "properties": [
        {
          "name": "lessThanOrEquals",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "lessthanorequalscomparison",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.MusicOptions": {
      "id": "@minecraft/server.MusicOptions",
      "name": "MusicOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "/",
      "definition": "export interface MusicOptions {\n    /**\r\n     * @remarks\r\n     * Specifies a fade overlap for music at the end of play.\r\n     *\r\n     */\r\n    fade?: number;\r\n    /**\r\n     * @remarks\r\n     * If set to true, this music track will play repeatedly.\r\n     *\r\n     */\r\n    loop?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Relative volume level of the music.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
      "jsdoc": "/**\r\n * Additional configuration options for {@link\r\n * World.playMusic}/{@link World.queueMusic} methods.\r\n */\r",
      "properties": [
        {
          "name": "fade",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "loop",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "volume",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "musicoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.NotEqualsComparison": {
      "id": "@minecraft/server.NotEqualsComparison",
      "name": "NotEqualsComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Not equal to operator.\r /",
      "definition": "export interface NotEqualsComparison {\n    /**\r\n     * @remarks\r\n     * Threshold value compared against.\r\n     *\r\n     */\r\n    notEquals: boolean | number | string;\r\n}\r",
      "jsdoc": "/**\r\n * Not equal to operator.\r\n */\r",
      "properties": [
        {
          "name": "notEquals",
          "type": "boolean | number | string",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "notequalscomparison",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.PlayAnimationOptions": {
      "id": "@minecraft/server.PlayAnimationOptions",
      "name": "PlayAnimationOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for how an animation is played.\r /",
      "definition": "export interface PlayAnimationOptions {\n    /**\r\n     * @remarks\r\n     * Amount of time to fade out after an animation stops.\r\n     *\r\n     */\r\n    blendOutTime?: number;\r\n    /**\r\n     * @remarks\r\n     * Specifies a controller to use that has been defined on the\r\n     * entity.\r\n     *\r\n     */\r\n    controller?: string;\r\n    /**\r\n     * @remarks\r\n     * Specifies the state to transition to.\r\n     *\r\n     */\r\n    nextState?: string;\r\n    /**\r\n     * @remarks\r\n     * A list of players the animation will be visible to.\r\n     *\r\n     */\r\n    players?: Player[];\r\n    /**\r\n     * @remarks\r\n     * Specifies a Molang expression for when this animation should\r\n     * complete.\r\n     *\r\n     */\r\n    stopExpression?: string;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for how an animation is played.\r\n */\r",
      "properties": [
        {
          "name": "blendOutTime",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "controller",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "nextState",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "players",
          "type": "Player[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "stopExpression",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playanimationoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.PlayerSoundOptions": {
      "id": "@minecraft/server.PlayerSoundOptions",
      "name": "PlayerSoundOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Additional options for how a sound plays for a player.\r /",
      "definition": "export interface PlayerSoundOptions {\n    /**\r\n     * @remarks\r\n     * Location of the sound; if not specified, the sound is played\r\n     * near a player.\r\n     *\r\n     */\r\n    location?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Optional pitch of the sound.\r\n     *\r\n     */\r\n    pitch?: number;\r\n    /**\r\n     * @remarks\r\n     * Optional volume of the sound.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
      "jsdoc": "/**\r\n * Additional options for how a sound plays for a player.\r\n */\r",
      "properties": [
        {
          "name": "location",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "pitch",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "volume",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playersoundoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ProjectileShootOptions": {
      "id": "@minecraft/server.ProjectileShootOptions",
      "name": "ProjectileShootOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Optional arguments for\r /",
      "definition": "export interface ProjectileShootOptions {\n    /**\r\n     * @remarks\r\n     * Controls the accuracy of the shot. A value of 0 is perfect\r\n     * accuracy.\r\n     *\r\n     */\r\n    uncertainty?: number;\r\n}\r",
      "jsdoc": "/**\r\n * Optional arguments for\r\n * @minecraft/server.EntityProjectileComponent.shoot.\r\n */\r",
      "properties": [
        {
          "name": "uncertainty",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectileshootoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.RangeComparison": {
      "id": "@minecraft/server.RangeComparison",
      "name": "RangeComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Operator represents a lower/upper bound structure for\r expressing a potential range of numbers.\r /",
      "definition": "export interface RangeComparison {\n    /**\r\n     * @remarks\r\n     * Lower bound within a range.\r\n     *\r\n     */\r\n    lowerBound: number;\r\n    /**\r\n     * @remarks\r\n     * Upper bound within a range.\r\n     *\r\n     */\r\n    upperBound: number;\r\n}\r",
      "jsdoc": "/**\r\n * Operator represents a lower/upper bound structure for\r\n * expressing a potential range of numbers.\r\n */\r",
      "properties": [
        {
          "name": "lowerBound",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "upperBound",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rangecomparison",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.RawMessage": {
      "id": "@minecraft/server.RawMessage",
      "name": "RawMessage",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Defines a JSON structure that is used for more flexible.\r ```typescript\r  function placeTranslatedSign(location: DimensionLocation, text: string) {\r     const signBlock = location.dimension.getBlock(location);\r      if (!signBlock) {\r         console.warn('Could not find a block at specified location.');\r         return;\r     }\r     const signPerm = BlockPermutation.resolve('minecraft:standing_sign', { ground_sign_direction: 8 });\r     signBlock.setPermutation(signPerm);\r      const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\r     if (signComponent) {\r         signComponent.setText({ translate: 'item.skull.player.name', with: [text] });\r     } else {\r         console.error('Could not find a sign component on the block.');\r     }\r }\r  placeTranslatedSign(\r     {\r         dimension: world.getDimension('overworld'),\r         x: 0,\r         y: 0,\r         z: 0,\r     },\r     'Steve',\r );\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
      "definition": "export interface RawMessage {\n    /**\r\n     * @remarks\r\n     * Provides a raw-text equivalent of the current message.\r\n     *\r\n     */\r\n    rawtext?: RawMessage[];\r\n    /**\r\n     * @remarks\r\n     * Provides a token that will get replaced with the value of a\r\n     * score.\r\n     *\r\n     */\r\n    score?: RawMessageScore;\r\n    /**\r\n     * @remarks\r\n     * Provides a string literal value to use.\r\n     *\r\n     */\r\n    text?: string;\r\n    /**\r\n     * @remarks\r\n     * Provides a translation token where, if the client has an\r\n     * available resource in the players' language which matches\r\n     * the token, will get translated on the client.\r\n     *\r\n     */\r\n    translate?: string;\r\n    /**\r\n     * @remarks\r\n     * Arguments for the translation token. Can be either an array\r\n     * of strings or RawMessage containing an array of raw text\r\n     * objects.\r\n     *\r\n     */\r\n    with?: string[] | RawMessage;\r\n}\r",
      "jsdoc": "/**\r\n * Defines a JSON structure that is used for more flexible.\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { DimensionLocation, world, BlockPermutation, BlockComponentTypes } from '@minecraft/server';\r\n *\r\n * function placeTranslatedSign(location: DimensionLocation, text: string) {\r\n *     const signBlock = location.dimension.getBlock(location);\r\n *\r\n *     if (!signBlock) {\r\n *         console.warn('Could not find a block at specified location.');\r\n *         return;\r\n *     }\r\n *     const signPerm = BlockPermutation.resolve('minecraft:standing_sign', { ground_sign_direction: 8 });\r\n *     signBlock.setPermutation(signPerm);\r\n *\r\n *     const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\r\n *     if (signComponent) {\r\n *         signComponent.setText({ translate: 'item.skull.player.name', with: [text] });\r\n *     } else {\r\n *         console.error('Could not find a sign component on the block.');\r\n *     }\r\n * }\r\n *\r\n * placeTranslatedSign(\r\n *     {\r\n *         dimension: world.getDimension('overworld'),\r\n *         x: 0,\r\n *         y: 0,\r\n *         z: 0,\r\n *     },\r\n *     'Steve',\r\n * );\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example addTranslatedSign.ts\r\n * ```typescript\r\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftBlockTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const dim = players[0].dimension;\r\n *\r\n *   const signBlock = dim.getBlock(targetLocation);\r\n *\r\n *   if (!signBlock) {\r\n *     log(\"Could not find a block at specified location.\");\r\n *     return -1;\r\n *   }\r\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r\n *\r\n *   signBlock.setPermutation(signPerm);\r\n *\r\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r\n *\r\n *   signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "rawtext",
          "type": "RawMessage[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "score",
          "type": "RawMessageScore",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "text",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "translate",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "with",
          "type": "string[] | RawMessage",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rawmessage",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.RawMessageScore": {
      "id": "@minecraft/server.RawMessageScore",
      "name": "RawMessageScore",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Provides a description of a score token to use within a raw\r message.\r /",
      "definition": "export interface RawMessageScore {\n    /**\r\n     * @remarks\r\n     * Name of the score value to match.\r\n     *\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @remarks\r\n     * Name of the score value to match.\r\n     *\r\n     */\r\n    objective?: string;\r\n}\r",
      "jsdoc": "/**\r\n * Provides a description of a score token to use within a raw\r\n * message.\r\n */\r",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "objective",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rawmessagescore",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.RawText": {
      "id": "@minecraft/server.RawText",
      "name": "RawText",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "A `RawMessage` with only the `rawtext` property. When a\r `RawMessage` is serialized the contents are put into a\r rawtext property, so this is useful when reading saved\r RawMessages. See `BlockSignComponent.setText` and\r `BlockSignComponent.getRawText` for examples.\r /",
      "definition": "export interface RawText {\n    /**\r\n     * @remarks\r\n     * A serialization of the current value of an associated sign.\r\n     *\r\n     */\r\n    rawtext?: RawMessage[];\r\n}\r",
      "jsdoc": "/**\r\n * A `RawMessage` with only the `rawtext` property. When a\r\n * `RawMessage` is serialized the contents are put into a\r\n * rawtext property, so this is useful when reading saved\r\n * RawMessages. See `BlockSignComponent.setText` and\r\n * `BlockSignComponent.getRawText` for examples.\r\n */\r",
      "properties": [
        {
          "name": "rawtext",
          "type": "RawMessage[]",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rawtext",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.RGB": {
      "id": "@minecraft/server.RGB",
      "name": "RGB",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Represents a fully customizable color within Minecraft.\r /",
      "definition": "export interface RGB {\n    /**\r\n     * @remarks\r\n     * Determines a color's blue component. Valid values are\r\n     * between 0 and 1.0.\r\n     *\r\n     */\r\n    blue: number;\r\n    /**\r\n     * @remarks\r\n     * Determines a color's green component. Valid values are\r\n     * between 0 and 1.0.\r\n     *\r\n     */\r\n    green: number;\r\n    /**\r\n     * @remarks\r\n     * Determines a color's red component. Valid values are between\r\n     * 0 and 1.0.\r\n     *\r\n     */\r\n    red: number;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a fully customizable color within Minecraft.\r\n */\r",
      "properties": [
        {
          "name": "blue",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "green",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "red",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rgb",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.RGBA": {
      "id": "@minecraft/server.RGBA",
      "name": "RGBA",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Represents a fully customizable color within Minecraft.\r /",
      "definition": "export interface RGBA extends RGB {\n    /**\r\n     * @remarks\r\n     * Determines a color's alpha (opacity) component. Valid values\r\n     * are between 0 (transparent) and 1.0 (opaque).\r\n     *\r\n     */\r\n    alpha: number;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a fully customizable color within Minecraft.\r\n */\r",
      "properties": [
        {
          "name": "alpha",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "extends": "RGB",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rgba",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ScoreboardObjectiveDisplayOptions": {
      "id": "@minecraft/server.ScoreboardObjectiveDisplayOptions",
      "name": "ScoreboardObjectiveDisplayOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for how a scoreboard should be\r displayed within its display slot.\r /",
      "definition": "export interface ScoreboardObjectiveDisplayOptions {\n    /**\r\n     * @remarks\r\n     * Objective to be displayed.\r\n     *\r\n     */\r\n    objective: ScoreboardObjective;\r\n    /**\r\n     * @remarks\r\n     * The sort order to display the objective items within.\r\n     *\r\n     */\r\n    sortOrder?: ObjectiveSortOrder;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for how a scoreboard should be\r\n * displayed within its display slot.\r\n */\r",
      "properties": [
        {
          "name": "objective",
          "type": "ScoreboardObjective",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "sortOrder",
          "type": "ObjectiveSortOrder",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardobjectivedisplayoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.ScriptEventMessageFilterOptions": {
      "id": "@minecraft/server.ScriptEventMessageFilterOptions",
      "name": "ScriptEventMessageFilterOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for registering a script event\r event callback.\r /",
      "definition": "export interface ScriptEventMessageFilterOptions {\n    /**\r\n     * @remarks\r\n     * Optional list of namespaces to filter inbound script event\r\n     * messages.\r\n     *\r\n     */\r\n    namespaces: string[];\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for registering a script event\r\n * event callback.\r\n */\r",
      "properties": [
        {
          "name": "namespaces",
          "type": "string[]",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scripteventmessagefilteroptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.SpawnEntityOptions": {
      "id": "@minecraft/server.SpawnEntityOptions",
      "name": "SpawnEntityOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for spawning an Entity.\r /",
      "definition": "export interface SpawnEntityOptions {\n    /**\r\n     * @remarks\r\n     * Optional spawn event to send to the entity after it is\r\n     * spawned.\r\n     *\r\n     */\r\n    spawnEvent?: string;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for spawning an Entity.\r\n */\r",
      "properties": [
        {
          "name": "spawnEvent",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "spawnentityoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.StructureCreateOptions": {
      "id": "@minecraft/server.StructureCreateOptions",
      "name": "StructureCreateOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "StructureManager.createFromWorld}\r /",
      "definition": "export interface StructureCreateOptions {\n    /**\r\n     * @remarks\r\n     * Whether blocks should be included in the structure. Defaults\r\n     * to true.\r\n     *\r\n     */\r\n    includeBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * How the Structure should be saved. Defaults to\r\n     * StructureSaveMode.World.\r\n     *\r\n     */\r\n    saveMode?: StructureSaveMode;\r\n}\r",
      "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.createFromWorld}\r\n */\r",
      "properties": [
        {
          "name": "includeBlocks",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeEntities",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "saveMode",
          "type": "StructureSaveMode",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structurecreateoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.StructurePlaceOptions": {
      "id": "@minecraft/server.StructurePlaceOptions",
      "name": "StructurePlaceOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "StructureManager.place}\r /",
      "definition": "export interface StructurePlaceOptions {\n    /**\r\n     * @remarks\r\n     * How the Structure should be animated when placed.\r\n     *\r\n     */\r\n    animationMode?: StructureAnimationMode;\r\n    /**\r\n     * @remarks\r\n     * How many seconds the animation should take.\r\n     *\r\n     */\r\n    animationSeconds?: number;\r\n    /**\r\n     * @remarks\r\n     * Whether blocks should be included in the structure. Defaults\r\n     * to true.\r\n     *\r\n     */\r\n    includeBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Whether entities should be included in the structure.\r\n     * Defaults to true.\r\n     *\r\n     */\r\n    includeEntities?: boolean;\r\n    /**\r\n     * @remarks\r\n     * What percentage of blocks should be placed. A value of 1\r\n     * will place 100% of the blocks while a value of 0 will place\r\n     * none. The blocks are chosen randomly based on the {@link\r\n     * StructurePlaceOptions.integritySeed}.\r\n     *\r\n     */\r\n    integrity?: number;\r\n    /**\r\n     * @remarks\r\n     * Seed that determines which blocks are randomly chosen to be\r\n     * placed. Defaults to a random seed.\r\n     *\r\n     */\r\n    integritySeed?: string;\r\n    /**\r\n     * @remarks\r\n     * Which axes the Structure should be mirrored on when placed.\r\n     * Defaults to StructureMirrorAxis.None.\r\n     *\r\n     */\r\n    mirror?: StructureMirrorAxis;\r\n    /**\r\n     * @remarks\r\n     * How the Structure should be rotated when placed. Defaults to\r\n     * AxisAlignedRotation.None.\r\n     *\r\n     */\r\n    rotation?: StructureRotation;\r\n    /**\r\n     * @remarks\r\n     * Whether the structure should be waterlogged when placed.\r\n     * Defaults to false. If true, blocks will become waterlogged\r\n     * when placed in water.\r\n     *\r\n     */\r\n    waterlogged?: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Provides additional options for {@link\r\n * StructureManager.place}\r\n */\r",
      "properties": [
        {
          "name": "animationMode",
          "type": "StructureAnimationMode",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "animationSeconds",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeBlocks",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "includeEntities",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "integrity",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "integritySeed",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "mirror",
          "type": "StructureMirrorAxis",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "rotation",
          "type": "StructureRotation",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "waterlogged",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structureplaceoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.TeleportOptions": {
      "id": "@minecraft/server.TeleportOptions",
      "name": "TeleportOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for teleporting an entity.\r ```typescript\r  function teleport(targetLocation: DimensionLocation) {\r   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r    system.runTimeout(() => {\r     cow.teleport(\r       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r       {\r         facingLocation: targetLocation,\r       }\r     );\r   }, 20);\r }\r ```\r ```typescript\r  function teleportMovement(targetLocation: DimensionLocation) {\r   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r    let inc = 1;\r   const runId = system.runInterval(() => {\r     pig.teleport(\r       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r       {\r         facingLocation: targetLocation,\r       }\r     );\r      if (inc > 100) {\r       system.clearRun(runId);\r     }\r     inc++;\r   }, 4);\r }\r ```\r /",
      "definition": "export interface TeleportOptions {\n    /**\r\n     * @remarks\r\n     * Whether to check whether blocks will block the entity after\r\n     * teleport.\r\n     *\r\n     */\r\n    checkForBlocks?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Dimension to potentially move the entity to.  If not\r\n     * specified, the entity is teleported within the dimension\r\n     * that they reside.\r\n     *\r\n     */\r\n    dimension?: Dimension;\r\n    /**\r\n     * @remarks\r\n     * Location that the entity should be facing after teleport.\r\n     *\r\n     */\r\n    facingLocation?: Vector3;\r\n    /**\r\n     * @remarks\r\n     * Whether to retain the entities velocity after teleport.\r\n     *\r\n     */\r\n    keepVelocity?: boolean;\r\n    /**\r\n     * @remarks\r\n     * Rotation of the entity after teleport.\r\n     *\r\n     */\r\n    rotation?: Vector2;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for teleporting an entity.\r\n * @example teleport.ts\r\n * ```typescript\r\n * import { system, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function teleport(targetLocation: DimensionLocation) {\r\n *   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r\n *\r\n *   system.runTimeout(() => {\r\n *     cow.teleport(\r\n *       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r\n *       {\r\n *         facingLocation: targetLocation,\r\n *       }\r\n *     );\r\n *   }, 20);\r\n * }\r\n * ```\r\n * @example teleportMovement.ts\r\n * ```typescript\r\n * import { system, DimensionLocation } from \"@minecraft/server\";\r\n * import { MinecraftEntityTypes } from \"@minecraft/vanilla-data\";\r\n *\r\n * function teleportMovement(targetLocation: DimensionLocation) {\r\n *   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r\n *\r\n *   let inc = 1;\r\n *   const runId = system.runInterval(() => {\r\n *     pig.teleport(\r\n *       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r\n *       {\r\n *         facingLocation: targetLocation,\r\n *       }\r\n *     );\r\n *\r\n *     if (inc > 100) {\r\n *       system.clearRun(runId);\r\n *     }\r\n *     inc++;\r\n *   }, 4);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "checkForBlocks",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "dimension",
          "type": "Dimension",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "facingLocation",
          "type": "Vector3",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "keepVelocity",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "rotation",
          "type": "Vector2",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "teleportoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.TitleDisplayOptions": {
      "id": "@minecraft/server.TitleDisplayOptions",
      "name": "TitleDisplayOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for displaying a title and\r optional subtitle.\r /",
      "definition": "export interface TitleDisplayOptions {\n    /**\r\n     * @remarks\r\n     * Fade-in duration for the title and subtitle, in ticks. There\r\n     * are 20 ticks per second. Use {@link TicksPerSecond} constant\r\n     * to convert between ticks and seconds.\r\n     *\r\n     */\r\n    fadeInDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Fade-out time for the title and subtitle, in ticks. There\r\n     * are 20 ticks per second. Use {@link TicksPerSecond} constant\r\n     * to convert between ticks and seconds.\r\n     *\r\n     */\r\n    fadeOutDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Amount of time for the title and subtitle to stay in place,\r\n     * in ticks. There are 20 ticks per second. Use {@link\r\n     * TicksPerSecond} constant to convert between ticks and\r\n     * seconds.\r\n     *\r\n     */\r\n    stayDuration: number;\r\n    /**\r\n     * @remarks\r\n     * Optional subtitle text.\r\n     *\r\n     */\r\n    subtitle?: (RawMessage | string)[] | RawMessage | string;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for displaying a title and\r\n * optional subtitle.\r\n */\r",
      "properties": [
        {
          "name": "fadeInDuration",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "fadeOutDuration",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "stayDuration",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "subtitle",
          "type": "(RawMessage | string)[] | RawMessage | string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "titledisplayoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.Vector2": {
      "id": "@minecraft/server.Vector2",
      "name": "Vector2",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Represents a two-directional vector.\r /",
      "definition": "export interface Vector2 {\n    /**\r\n     * @remarks\r\n     * X component of the two-dimensional vector.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of the two-dimensional vector.\r\n     *\r\n     */\r\n    y: number;\r\n}\r",
      "jsdoc": "/**\r\n * Represents a two-directional vector.\r\n */\r",
      "properties": [
        {
          "name": "x",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "y",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "vector2",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.Vector3": {
      "id": "@minecraft/server.Vector3",
      "name": "Vector3",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains a description of a vector.\r /",
      "definition": "export interface Vector3 {\n    /**\r\n     * @remarks\r\n     * X component of this vector.\r\n     *\r\n     */\r\n    x: number;\r\n    /**\r\n     * @remarks\r\n     * Y component of this vector.\r\n     *\r\n     */\r\n    y: number;\r\n    /**\r\n     * @remarks\r\n     * Z component of this vector.\r\n     *\r\n     */\r\n    z: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains a description of a vector.\r\n */\r",
      "properties": [
        {
          "name": "x",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "y",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "z",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "vector3",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.VectorXZ": {
      "id": "@minecraft/server.VectorXZ",
      "name": "VectorXZ",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Z component of this vector.",
      "definition": "export interface VectorXZ {\n    x: number;\r\n    z: number;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Z component of this vector.\r\n     *\r\n     */\r",
      "properties": [
        {
          "name": "x",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "z",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "vectorxz",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.WorldSoundOptions": {
      "id": "@minecraft/server.WorldSoundOptions",
      "name": "WorldSoundOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for a playSound occurrence.\r /",
      "definition": "export interface WorldSoundOptions {\n    /**\r\n     * @remarks\r\n     * Pitch of the sound played.\r\n     *\r\n     */\r\n    pitch?: number;\r\n    /**\r\n     * @remarks\r\n     * Relative volume and space by which this sound is heard.\r\n     *\r\n     */\r\n    volume?: number;\r\n}\r",
      "jsdoc": "/**\r\n * Contains additional options for a playSound occurrence.\r\n */\r",
      "properties": [
        {
          "name": "pitch",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "volume",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldsoundoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server.BlockCustomComponentAlreadyRegisteredError": {
      "id": "@minecraft/server.BlockCustomComponentAlreadyRegisteredError",
      "name": "BlockCustomComponentAlreadyRegisteredError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Relative volume and space by which this sound is heard.",
      "definition": "export class BlockCustomComponentAlreadyRegisteredError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Relative volume and space by which this sound is heard.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentalreadyregisterederror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockCustomComponentReloadNewComponentError": {
      "id": "@minecraft/server.BlockCustomComponentReloadNewComponentError",
      "name": "BlockCustomComponentReloadNewComponentError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class BlockCustomComponentReloadNewComponentError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentreloadnewcomponenterror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockCustomComponentReloadNewEventError": {
      "id": "@minecraft/server.BlockCustomComponentReloadNewEventError",
      "name": "BlockCustomComponentReloadNewEventError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class BlockCustomComponentReloadNewEventError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentreloadneweventerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.BlockCustomComponentReloadVersionError": {
      "id": "@minecraft/server.BlockCustomComponentReloadVersionError",
      "name": "BlockCustomComponentReloadVersionError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class BlockCustomComponentReloadVersionError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentreloadversionerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.CommandError": {
      "id": "@minecraft/server.CommandError",
      "name": "CommandError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class CommandError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "commanderror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ContainerRulesError": {
      "id": "@minecraft/server.ContainerRulesError",
      "name": "ContainerRulesError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "broken on container operations.\r /",
      "definition": "export class ContainerRulesError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Error thrown if {@link @minecraft/server.ContainerRules} are\r\n * broken on container operations.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "containerruleserror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.CustomCommandError": {
      "id": "@minecraft/server.CustomCommandError",
      "name": "CustomCommandError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Error object thrown when CustomCommandRegistry errors occur.\r /",
      "definition": "export class CustomCommandError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Reason for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: CustomCommandErrorReason;\r\n}\r",
      "jsdoc": "/**\r\n * Error object thrown when CustomCommandRegistry errors occur.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommanderror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.CustomComponentInvalidRegistryError": {
      "id": "@minecraft/server.CustomComponentInvalidRegistryError",
      "name": "CustomComponentInvalidRegistryError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Reason for the error.\r  This property can be read in early-execution mode.",
      "definition": "export class CustomComponentInvalidRegistryError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Reason for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcomponentinvalidregistryerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.CustomComponentNameError": {
      "id": "@minecraft/server.CustomComponentNameError",
      "name": "CustomComponentNameError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class CustomComponentNameError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: CustomComponentNameErrorReason;\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcomponentnameerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EnchantmentLevelOutOfBoundsError": {
      "id": "@minecraft/server.EnchantmentLevelOutOfBoundsError",
      "name": "EnchantmentLevelOutOfBoundsError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This property can be read in early-execution mode.",
      "definition": "export class EnchantmentLevelOutOfBoundsError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmentleveloutofboundserror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EnchantmentTypeNotCompatibleError": {
      "id": "@minecraft/server.EnchantmentTypeNotCompatibleError",
      "name": "EnchantmentTypeNotCompatibleError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class EnchantmentTypeNotCompatibleError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmenttypenotcompatibleerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EnchantmentTypeUnknownIdError": {
      "id": "@minecraft/server.EnchantmentTypeUnknownIdError",
      "name": "EnchantmentTypeUnknownIdError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class EnchantmentTypeUnknownIdError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmenttypeunknowniderror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.EntitySpawnError": {
      "id": "@minecraft/server.EntitySpawnError",
      "name": "EntitySpawnError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class EntitySpawnError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityspawnerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.InvalidContainerError": {
      "id": "@minecraft/server.InvalidContainerError",
      "name": "InvalidContainerError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The container is invalid. This can occur if the container is\r missing or deleted.\r /",
      "definition": "export class InvalidContainerError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * The container is invalid. This can occur if the container is\r\n * missing or deleted.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invalidcontainererror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.InvalidContainerSlotError": {
      "id": "@minecraft/server.InvalidContainerSlotError",
      "name": "InvalidContainerSlotError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The container slot is invalid. This can occur when the\r owning container is destroyed or unloaded.\r /",
      "definition": "export class InvalidContainerSlotError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * The container slot is invalid. This can occur when the\r\n * owning container is destroyed or unloaded.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invalidcontainersloterror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.InvalidEntityError": {
      "id": "@minecraft/server.InvalidEntityError",
      "name": "InvalidEntityError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The error called when an entity is invalid. This can occur\r when accessing components on a removed entity.\r /",
      "definition": "export class InvalidEntityError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The id of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    id: string;\r\n    /**\r\n     * @remarks\r\n     * The type of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    type: string;\r\n}\r",
      "jsdoc": "/**\r\n * The error called when an entity is invalid. This can occur\r\n * when accessing components on a removed entity.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invalidentityerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.InvalidIteratorError": {
      "id": "@minecraft/server.InvalidIteratorError",
      "name": "InvalidIteratorError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The type of the entity that is now invalid.\r  This property can be read in early-execution mode.",
      "definition": "export class InvalidIteratorError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * The type of the entity that is now invalid.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invaliditeratorerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.InvalidStructureError": {
      "id": "@minecraft/server.InvalidStructureError",
      "name": "InvalidStructureError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when a Structure is invalid. A structure becomes\r invalid when it is deleted.\r /",
      "definition": "export class InvalidStructureError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Thrown when a Structure is invalid. A structure becomes\r\n * invalid when it is deleted.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invalidstructureerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCustomComponentAlreadyRegisteredError": {
      "id": "@minecraft/server.ItemCustomComponentAlreadyRegisteredError",
      "name": "ItemCustomComponentAlreadyRegisteredError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when trying to register an item custom component with\r a name that has already been registered.\r /",
      "definition": "export class ItemCustomComponentAlreadyRegisteredError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Thrown when trying to register an item custom component with\r\n * a name that has already been registered.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentalreadyregisterederror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCustomComponentReloadNewComponentError": {
      "id": "@minecraft/server.ItemCustomComponentReloadNewComponentError",
      "name": "ItemCustomComponentReloadNewComponentError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown after using the /reload command when trying to\r register a previously unregistered item custom component.\r /",
      "definition": "export class ItemCustomComponentReloadNewComponentError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously unregistered item custom component.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentreloadnewcomponenterror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCustomComponentReloadNewEventError": {
      "id": "@minecraft/server.ItemCustomComponentReloadNewEventError",
      "name": "ItemCustomComponentReloadNewEventError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown after using the /reload command when trying to\r register a previously registered item custom component that\r handles a new event.\r /",
      "definition": "export class ItemCustomComponentReloadNewEventError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously registered item custom component that\r\n * handles a new event.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentreloadneweventerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.ItemCustomComponentReloadVersionError": {
      "id": "@minecraft/server.ItemCustomComponentReloadVersionError",
      "name": "ItemCustomComponentReloadVersionError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown after using the /reload command when trying to\r register a previously registered item custom component with\r a newer API version.\r /",
      "definition": "export class ItemCustomComponentReloadVersionError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Thrown after using the /reload command when trying to\r\n * register a previously registered item custom component with\r\n * a newer API version.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentreloadversionerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.LocationInUnloadedChunkError": {
      "id": "@minecraft/server.LocationInUnloadedChunkError",
      "name": "LocationInUnloadedChunkError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when the chunk for provided location or bounding area\r is not loaded.\r /",
      "definition": "export class LocationInUnloadedChunkError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Thrown when the chunk for provided location or bounding area\r\n * is not loaded.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "locationinunloadedchunkerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.LocationOutOfWorldBoundariesError": {
      "id": "@minecraft/server.LocationOutOfWorldBoundariesError",
      "name": "LocationOutOfWorldBoundariesError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when a provided location or bounding area is outside\r the minimum or maximum dimension height.\r /",
      "definition": "export class LocationOutOfWorldBoundariesError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Thrown when a provided location or bounding area is outside\r\n * the minimum or maximum dimension height.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "locationoutofworldboundarieserror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.NamespaceNameError": {
      "id": "@minecraft/server.NamespaceNameError",
      "name": "NamespaceNameError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when a name requires a namespace and an error occurs\r when validating that namespace\r /",
      "definition": "export class NamespaceNameError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: NamespaceNameErrorReason;\r\n}\r",
      "jsdoc": "/**\r\n * Thrown when a name requires a namespace and an error occurs\r\n * when validating that namespace\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "namespacenameerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.PlaceJigsawError": {
      "id": "@minecraft/server.PlaceJigsawError",
      "name": "PlaceJigsawError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This property can be read in early-execution mode.",
      "definition": "export class PlaceJigsawError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "placejigsawerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.RawMessageError": {
      "id": "@minecraft/server.RawMessageError",
      "name": "RawMessageError",
      "type": "class",
      "module": "@minecraft/server",
      "definition": "export class RawMessageError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rawmessageerror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server.UnloadedChunksError": {
      "id": "@minecraft/server.UnloadedChunksError",
      "name": "UnloadedChunksError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Error thrown when the specified area contains one or more\r unloaded chunks.\r /",
      "definition": "export class UnloadedChunksError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * Error thrown when the specified area contains one or more\r\n * unloaded chunks.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "unloadedchunkserror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-admin.AdminBeforeEvents": {
      "id": "@minecraft/server-admin.AdminBeforeEvents",
      "name": "AdminBeforeEvents",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "Contains types related to administering a Bedrock Dedicated\r Server. These types allow for the configuration of variables\r and secrets in JSON files in the Bedrock Dedicated Server\r folder. These types cannot be used on Minecraft clients or\r within Minecraft Realms.\r  Manifest Details\r ```json\r {\r   \"version\": \"1.0.0-beta\"\r }\r ```\r  /",
      "definition": "export class AdminBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This event is fired before a player joins the world. Unlike\r\n     * other before events, this event is a before event that you\r\n     * can delay several ticks by not resolving the promise\r\n     * returned in the subscribe function. If the promise is\r\n     * rejected, the client is rejected.\r\n     *\r\n     */\r\n    readonly asyncPlayerJoin: AsyncPlayerJoinBeforeEventSignal;\r\n}\r",
      "jsdoc": "/**\r\n * @beta\r\n * @packageDocumentation\r\n * Contains types related to administering a Bedrock Dedicated\r\n * Server. These types allow for the configuration of variables\r\n * and secrets in JSON files in the Bedrock Dedicated Server\r\n * folder. These types cannot be used on Minecraft clients or\r\n * within Minecraft Realms.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-admin\",\r\n *   \"version\": \"1.0.0-beta\"\r\n * }\r\n * ```\r\n *\r\n */\r",
      "properties": [
        {
          "name": "asyncPlayerJoin",
          "type": "AsyncPlayerJoinBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [
        "beta"
      ],
      "keywords": [
        "adminbeforeevents",
        "class"
      ],
      "examples": [],
      "stability": "experimental"
    },
    "@minecraft/server-admin.AsyncPlayerJoinBeforeEvent": {
      "id": "@minecraft/server-admin.AsyncPlayerJoinBeforeEvent",
      "name": "AsyncPlayerJoinBeforeEvent",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "The data available before a player joins the world.\r /",
      "definition": "export class AsyncPlayerJoinBeforeEvent {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The player's name\r\n     *\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * @remarks\r\n     * An identifier that can be used to identify a player across\r\n     * sessions.\r\n     *\r\n     */\r\n    readonly persistentId: string;\r\n    /**\r\n     * @remarks\r\n     * Call this to disconnect a player. They will be allowed to\r\n     * try to join again.\r\n     *\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link DisconnectedError}\r\n     */\r\n    disconnect(reason?: string): void;\r\n    /**\r\n     * @remarks\r\n     * Will return true if the player is still waiting to join the\r\n     * world. If they disconnect then it will return false.\r\n     *\r\n     */\r\n    isValid(): boolean;\r\n}\r",
      "jsdoc": "/**\r\n * The data available before a player joins the world.\r\n */\r",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "persistentId",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "disconnect",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "disconnect(reason?: string): void"
        },
        {
          "name": "isValid",
          "parameters": [],
          "returnType": "boolean",
          "accessibility": "public",
          "signature": "isValid(): boolean"
        }
      ],
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "asyncplayerjoinbeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-admin.AsyncPlayerJoinBeforeEventSignal": {
      "id": "@minecraft/server-admin.AsyncPlayerJoinBeforeEventSignal",
      "name": "AsyncPlayerJoinBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "Will return true if the player is still waiting to join the\r world. If they disconnect then it will return false.",
      "definition": "export class AsyncPlayerJoinBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Add a callback that's ran before a player joins the world.\r\n     * This callback returns a promise and the player won't join\r\n     * until that promise is resolved. If the promise is not\r\n     * resolved within a reasonable time, the player joining will\r\n     * be rejected. If the player joining leaves/disconnects, then\r\n     * the event data's isValid will return false.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>,\r\n    ): (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>;\r\n    unsubscribe(callback: (arg0: AsyncPlayerJoinBeforeEvent) => Promise<void>): boolean;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Will return true if the player is still waiting to join the\r\n     * world. If they disconnect then it will return false.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "asyncplayerjoinbeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-admin.SecretString": {
      "id": "@minecraft/server-admin.SecretString",
      "name": "SecretString",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "This represents a placeholder object that represents a\r secret string. The contents of that string are not available\r to script; this object is just a placeholder.\r /",
      "definition": "export class SecretString {\n    constructor(value: string);\r\n}\r",
      "jsdoc": "/**\r\n * This represents a placeholder object that represents a\r\n * secret string. The contents of that string are not available\r\n * to script; this object is just a placeholder.\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "secretstring",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-admin.ServerSecrets": {
      "id": "@minecraft/server-admin.ServerSecrets",
      "name": "ServerSecrets",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "A collection of server secrets defined in dedicated server\r configuration.\r ```typescript\r  const serverUrl = variables.get('serverEndpoint');\r  function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r      req.body = JSON.stringify({\r         playerId,\r     });\r      const authTokenSec = secrets.get('authtoken');\r      if (!authTokenSec) {\r         throw new Error('authtoken secret not defined.');\r     }\r      req.method = HttpRequestMethod.Post;\r     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r      return http.request(req);\r }\r ```\r /",
      "definition": "export class ServerSecrets {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * A list of available, configured server secrets.\r\n     *\r\n     */\r\n    readonly names: string[];\r\n    /**\r\n     * @remarks\r\n     * Returns a SecretString that is a placeholder for a secret\r\n     * configured in a JSON file. In certain objects, like an\r\n     * HttpHeader, this Secret is resolved at the time of execution\r\n     * but is not made available to the script environment.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    get(name: string): SecretString | undefined;\r\n}\r",
      "jsdoc": "/**\r\n * A collection of server secrets defined in dedicated server\r\n * configuration.\r\n * @example getPlayerProfile.ts\r\n * ```typescript\r\n * import { variables, secrets } from \"@minecraft/server-admin\";\r\n * import { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n *\r\n * const serverUrl = variables.get('serverEndpoint');\r\n *\r\n * function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n *     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         playerId,\r\n *     });\r\n *\r\n *     const authTokenSec = secrets.get('authtoken');\r\n *\r\n *     if (!authTokenSec) {\r\n *         throw new Error('authtoken secret not defined.');\r\n *     }\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n *\r\n *     return http.request(req);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "names",
          "type": "string[]",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "SecretString | undefined",
          "accessibility": "public",
          "signature": "get(name: string): SecretString | undefined"
        }
      ],
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "serversecrets",
        "class"
      ],
      "examples": [
        {
          "title": "getPlayerProfile.ts",
          "code": "import { variables, secrets } from \"@minecraft/server-admin\";\r\nimport { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n\nconst serverUrl = variables.get('serverEndpoint');\r\n\nfunction getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n    const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n\n    req.body = JSON.stringify({\r\n        playerId,\r\n    });\r\n\n    const authTokenSec = secrets.get('authtoken');\r\n\n    if (!authTokenSec) {\r\n        throw new Error('authtoken secret not defined.');\r\n    }\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n\n    return http.request(req);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-admin.ServerVariables": {
      "id": "@minecraft/server-admin.ServerVariables",
      "name": "ServerVariables",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "A collection of server variables defined in dedicated server\r configuration.\r ```typescript\r  const serverUrl = variables.get('serverEndpoint');\r  function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r      req.body = JSON.stringify({\r         playerId,\r     });\r      const authTokenSec = secrets.get('authtoken');\r      if (!authTokenSec) {\r         throw new Error('authtoken secret not defined.');\r     }\r      req.method = HttpRequestMethod.Post;\r     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r      return http.request(req);\r }\r ```\r /",
      "definition": "export class ServerVariables {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * A list of available, configured server variables.\r\n     *\r\n     */\r\n    readonly names: string[];\r\n    /**\r\n     * @remarks\r\n     * Returns the value of variable that has been configured in a\r\n     * dedicated server configuration JSON file.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    get(name: string): unknown | undefined;\r\n}\r",
      "jsdoc": "/**\r\n * A collection of server variables defined in dedicated server\r\n * configuration.\r\n * @example getPlayerProfile.ts\r\n * ```typescript\r\n * import { variables, secrets } from \"@minecraft/server-admin\";\r\n * import { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n *\r\n * const serverUrl = variables.get('serverEndpoint');\r\n *\r\n * function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n *     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         playerId,\r\n *     });\r\n *\r\n *     const authTokenSec = secrets.get('authtoken');\r\n *\r\n *     if (!authTokenSec) {\r\n *         throw new Error('authtoken secret not defined.');\r\n *     }\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n *\r\n *     return http.request(req);\r\n * }\r\n * ```\r\n */\r",
      "properties": [
        {
          "name": "names",
          "type": "string[]",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [
        {
          "name": "get",
          "parameters": [],
          "returnType": "unknown | undefined",
          "accessibility": "public",
          "signature": "get(name: string): unknown | undefined"
        }
      ],
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "servervariables",
        "class"
      ],
      "examples": [
        {
          "title": "getPlayerProfile.ts",
          "code": "import { variables, secrets } from \"@minecraft/server-admin\";\r\nimport { http, HttpRequest, HttpRequestMethod, HttpHeader, HttpResponse } from \"@minecraft/server-net\";\r\n\nconst serverUrl = variables.get('serverEndpoint');\r\n\nfunction getPlayerProfile(playerId: string): Promise<HttpResponse> {\r\n    const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r\n\n    req.body = JSON.stringify({\r\n        playerId,\r\n    });\r\n\n    const authTokenSec = secrets.get('authtoken');\r\n\n    if (!authTokenSec) {\r\n        throw new Error('authtoken secret not defined.');\r\n    }\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r\n\n    return http.request(req);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-admin.TransferPlayerIpPortOptions": {
      "id": "@minecraft/server-admin.TransferPlayerIpPortOptions",
      "name": "TransferPlayerIpPortOptions",
      "type": "interface",
      "module": "@minecraft/server-admin",
      "description": "Options when transferring a player to a server that supports\r direct host/port connections.\r /",
      "definition": "export interface TransferPlayerIpPortOptions {\n    /**\r\n     * @remarks\r\n     * Hostname of the destination server.\r\n     *\r\n     */\r\n    hostname: string;\r\n    /**\r\n     * @remarks\r\n     * Port of the destination server.\r\n     *\r\n     */\r\n    port: number;\r\n}\r",
      "jsdoc": "/**\r\n * Options when transferring a player to a server that supports\r\n * direct host/port connections.\r\n */\r",
      "properties": [
        {
          "name": "hostname",
          "type": "string",
          "optional": false,
          "accessibility": "public"
        },
        {
          "name": "port",
          "type": "number",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "transferplayeripportoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server-admin.TransferPlayerNetherNetOptions": {
      "id": "@minecraft/server-admin.TransferPlayerNetherNetOptions",
      "name": "TransferPlayerNetherNetOptions",
      "type": "interface",
      "module": "@minecraft/server-admin",
      "description": "Options when transferring a player to a server that supports\r NetherNet connections.\r /",
      "definition": "export interface TransferPlayerNetherNetOptions {\n    /**\r\n     * @remarks\r\n     * NetherNet ID of the destination server.\r\n     *\r\n     */\r\n    netherNetId: string;\r\n}\r",
      "jsdoc": "/**\r\n * Options when transferring a player to a server that supports\r\n * NetherNet connections.\r\n */\r",
      "properties": [
        {
          "name": "netherNetId",
          "type": "string",
          "optional": false,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "transferplayernethernetoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server-admin.DisconnectedError": {
      "id": "@minecraft/server-admin.DisconnectedError",
      "name": "DisconnectedError",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "An error that is thrown when trying to interact with a join\r event and the player is disconnected.\r /",
      "definition": "export class DisconnectedError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The id of the player that was disconnected.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    id: string;\r\n}\r",
      "jsdoc": "/**\r\n * An error that is thrown when trying to interact with a join\r\n * event and the player is disconnected.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "disconnectederror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-net.HttpRequestMethod": {
      "id": "@minecraft/server-net.HttpRequestMethod",
      "name": "HttpRequestMethod",
      "type": "enum",
      "module": "@minecraft/server-net",
      "description": "executing HTTP-based requests. This module can only be used\r on Bedrock Dedicated Server. These APIs do not function\r within the Minecraft game client or within Minecraft Realms.\r  Manifest Details\r ```json\r {\r   \"version\": \"1.0.0-beta\"\r }\r ```\r  /",
      "definition": "export enum HttpRequestMethod {\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP HEAD request. HEAD\r\n     * requests are similar to a GET request, but are commonly used\r\n     * to retrieve just the HTTP response headers from the\r\n     * specified URI, and not the body contents.\r\n     *\r\n     */\r\n    Delete = 'Delete',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. POST requests\r\n     * are commonly used to create a new resource that is a\r\n     * subordinate of the specified URI.\r\n     *\r\n     */\r\n    Get = 'Get',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. GET requests\r\n     * are commonly used to retrieve information about a resource\r\n     * at the specified URI.\r\n     *\r\n     */\r\n    Head = 'Head',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. GET requests\r\n     * are commonly used to retrieve information about a resource\r\n     * at the specified URI.\r\n     *\r\n     */\r\n    Post = 'Post',\r\n    /**\r\n     * @remarks\r\n     * Represents the method for an HTTP PUT request. PUT requests\r\n     * are commonly used to update a single resource that already\r\n     * exists in a resource collection.\r\n     *\r\n     */\r\n    Put = 'Put',\r\n}\r",
      "jsdoc": "/**\r\n * @beta\r\n * @packageDocumentation\r\n * The `@minecraft/server-net` module contains types for\r\n * executing HTTP-based requests. This module can only be used\r\n * on Bedrock Dedicated Server. These APIs do not function\r\n * within the Minecraft game client or within Minecraft Realms.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-net\",\r\n *   \"version\": \"1.0.0-beta\"\r\n * }\r\n * ```\r\n *\r\n */\r",
      "enumValues": [
        {
          "name": "Delete",
          "value": "Delete",
          "description": ""
        },
        {
          "name": "Get",
          "value": "Get",
          "description": ""
        },
        {
          "name": "Head",
          "value": "Head",
          "description": ""
        },
        {
          "name": "Post",
          "value": "Post",
          "description": ""
        },
        {
          "name": "Put",
          "value": "Put",
          "description": ""
        }
      ],
      "categories": [
        "Enums",
        "Networking"
      ],
      "tags": [
        "beta"
      ],
      "keywords": [
        "httprequestmethod",
        "enum"
      ],
      "stability": "experimental"
    },
    "@minecraft/server-net.PacketId": {
      "id": "@minecraft/server-net.PacketId",
      "name": "PacketId",
      "type": "enum",
      "module": "@minecraft/server-net",
      "description": "Represents the unique type of network packet.\r /",
      "definition": "export enum PacketId {\n    ActorEventPacket = 'ActorEventPacket',\r\n    ActorPickRequestPacket = 'ActorPickRequestPacket',\r\n    AddActorPacket = 'AddActorPacket',\r\n    AddBehaviorTreePacket = 'AddBehaviorTreePacket',\r\n    AddItemActorPacket = 'AddItemActorPacket',\r\n    AddPaintingPacket = 'AddPaintingPacket',\r\n    AddPlayerPacket = 'AddPlayerPacket',\r\n    AddVolumeEntityPacket = 'AddVolumeEntityPacket',\r\n    AgentActionEventPacket = 'AgentActionEventPacket',\r\n    AgentAnimationPacket = 'AgentAnimationPacket',\r\n    AnimateEntityPacket = 'AnimateEntityPacket',\r\n    AnimatePacket = 'AnimatePacket',\r\n    AnvilDamagePacket = 'AnvilDamagePacket',\r\n    AutomationClientConnectPacket = 'AutomationClientConnectPacket',\r\n    AvailableActorIdentifiersPacket = 'AvailableActorIdentifiersPacket',\r\n    AvailableCommandsPacket = 'AvailableCommandsPacket',\r\n    AwardAchievementPacket = 'AwardAchievementPacket',\r\n    BiomeDefinitionListPacket = 'BiomeDefinitionListPacket',\r\n    BlockActorDataPacket = 'BlockActorDataPacket',\r\n    BlockEventPacket = 'BlockEventPacket',\r\n    BlockPickRequestPacket = 'BlockPickRequestPacket',\r\n    BookEditPacket = 'BookEditPacket',\r\n    BossEventPacket = 'BossEventPacket',\r\n    CameraAimAssistPacket = 'CameraAimAssistPacket',\r\n    CameraAimAssistPresetsPacket = 'CameraAimAssistPresetsPacket',\r\n    CameraInstructionPacket = 'CameraInstructionPacket',\r\n    CameraPacket = 'CameraPacket',\r\n    CameraPresetsPacket = 'CameraPresetsPacket',\r\n    CameraShakePacket = 'CameraShakePacket',\r\n    ChangeDimensionPacket = 'ChangeDimensionPacket',\r\n    ChangeMobPropertyPacket = 'ChangeMobPropertyPacket',\r\n    ChunkRadiusUpdatedPacket = 'ChunkRadiusUpdatedPacket',\r\n    ClientboundCloseFormPacket = 'ClientboundCloseFormPacket',\r\n    ClientboundControlSchemeSetPacket = 'ClientboundControlSchemeSetPacket',\r\n    ClientboundDebugRendererPacket = 'ClientboundDebugRendererPacket',\r\n    ClientboundMapItemDataPacket = 'ClientboundMapItemDataPacket',\r\n    ClientCacheBlobStatusPacket = 'ClientCacheBlobStatusPacket',\r\n    ClientCacheMissResponsePacket = 'ClientCacheMissResponsePacket',\r\n    ClientCacheStatusPacket = 'ClientCacheStatusPacket',\r\n    ClientCameraAimAssistPacket = 'ClientCameraAimAssistPacket',\r\n    ClientMovementPredictionSyncPacket = 'ClientMovementPredictionSyncPacket',\r\n    ClientToServerHandshakePacket = 'ClientToServerHandshakePacket',\r\n    CodeBuilderPacket = 'CodeBuilderPacket',\r\n    CodeBuilderSourcePacket = 'CodeBuilderSourcePacket',\r\n    CommandBlockUpdatePacket = 'CommandBlockUpdatePacket',\r\n    CommandOutputPacket = 'CommandOutputPacket',\r\n    CommandRequestPacket = 'CommandRequestPacket',\r\n    CompletedUsingItemPacket = 'CompletedUsingItemPacket',\r\n    ContainerClosePacket = 'ContainerClosePacket',\r\n    ContainerOpenPacket = 'ContainerOpenPacket',\r\n    ContainerRegistryCleanupPacket = 'ContainerRegistryCleanupPacket',\r\n    ContainerSetDataPacket = 'ContainerSetDataPacket',\r\n    CorrectPlayerMovePredictionPacket = 'CorrectPlayerMovePredictionPacket',\r\n    CraftingDataPacket = 'CraftingDataPacket',\r\n    CreatePhotoPacket = 'CreatePhotoPacket',\r\n    CreativeContentPacket = 'CreativeContentPacket',\r\n    CurrentStructureFeaturePacket = 'CurrentStructureFeaturePacket',\r\n    DeathInfoPacket = 'DeathInfoPacket',\r\n    DebugInfoPacket = 'DebugInfoPacket',\r\n    DimensionDataPacket = 'DimensionDataPacket',\r\n    DisconnectPacket = 'DisconnectPacket',\r\n    EditorNetworkPacket = 'EditorNetworkPacket',\r\n    EducationSettingsPacket = 'EducationSettingsPacket',\r\n    EduUriResourcePacket = 'EduUriResourcePacket',\r\n    EmoteListPacket = 'EmoteListPacket',\r\n    EmotePacket = 'EmotePacket',\r\n    FeatureRegistryPacket = 'FeatureRegistryPacket',\r\n    GameRulesChangedPacket = 'GameRulesChangedPacket',\r\n    GameTestRequestPacket = 'GameTestRequestPacket',\r\n    GameTestResultsPacket = 'GameTestResultsPacket',\r\n    GuiDataPickItemPacket = 'GuiDataPickItemPacket',\r\n    HurtArmorPacket = 'HurtArmorPacket',\r\n    InteractPacket = 'InteractPacket',\r\n    InventoryContentPacket = 'InventoryContentPacket',\r\n    InventorySlotPacket = 'InventorySlotPacket',\r\n    InventoryTransactionPacket = 'InventoryTransactionPacket',\r\n    ItemRegistryPacket = 'ItemRegistryPacket',\r\n    ItemStackRequestPacket = 'ItemStackRequestPacket',\r\n    ItemStackResponsePacket = 'ItemStackResponsePacket',\r\n    JigsawStructureDataPacket = 'JigsawStructureDataPacket',\r\n    LabTablePacket = 'LabTablePacket',\r\n    LecternUpdatePacket = 'LecternUpdatePacket',\r\n    LegacyTelemetryEventPacket = 'LegacyTelemetryEventPacket',\r\n    LessonProgressPacket = 'LessonProgressPacket',\r\n    LevelChunkPacket = 'LevelChunkPacket',\r\n    LevelEventGenericPacket = 'LevelEventGenericPacket',\r\n    LevelEventPacket = 'LevelEventPacket',\r\n    LevelSoundEventPacket = 'LevelSoundEventPacket',\r\n    LoginPacket = 'LoginPacket',\r\n    MapCreateLockedCopyPacket = 'MapCreateLockedCopyPacket',\r\n    MapInfoRequestPacket = 'MapInfoRequestPacket',\r\n    MobArmorEquipmentPacket = 'MobArmorEquipmentPacket',\r\n    MobEffectPacket = 'MobEffectPacket',\r\n    MobEquipmentPacket = 'MobEquipmentPacket',\r\n    ModalFormRequestPacket = 'ModalFormRequestPacket',\r\n    ModalFormResponsePacket = 'ModalFormResponsePacket',\r\n    MotionPredictionHintsPacket = 'MotionPredictionHintsPacket',\r\n    MoveActorAbsolutePacket = 'MoveActorAbsolutePacket',\r\n    MoveActorDeltaPacket = 'MoveActorDeltaPacket',\r\n    MovementEffectPacket = 'MovementEffectPacket',\r\n    MovePlayerPacket = 'MovePlayerPacket',\r\n    MultiplayerSettingsPacket = 'MultiplayerSettingsPacket',\r\n    NetworkChunkPublisherUpdatePacket = 'NetworkChunkPublisherUpdatePacket',\r\n    NetworkSettingsPacket = 'NetworkSettingsPacket',\r\n    NetworkStackLatencyPacket = 'NetworkStackLatencyPacket',\r\n    NpcDialoguePacket = 'NpcDialoguePacket',\r\n    NpcRequestPacket = 'NpcRequestPacket',\r\n    OnScreenTextureAnimationPacket = 'OnScreenTextureAnimationPacket',\r\n    OpenSignPacket = 'OpenSignPacket',\r\n    PacketViolationWarningPacket = 'PacketViolationWarningPacket',\r\n    PhotoTransferPacket = 'PhotoTransferPacket',\r\n    PlayerActionPacket = 'PlayerActionPacket',\r\n    PlayerArmorDamagePacket = 'PlayerArmorDamagePacket',\r\n    PlayerAuthInputPacket = 'PlayerAuthInputPacket',\r\n    PlayerEnchantOptionsPacket = 'PlayerEnchantOptionsPacket',\r\n    PlayerFogPacket = 'PlayerFogPacket',\r\n    PlayerHotbarPacket = 'PlayerHotbarPacket',\r\n    PlayerListPacket = 'PlayerListPacket',\r\n    PlayerLocationPacket = 'PlayerLocationPacket',\r\n    PlayerSkinPacket = 'PlayerSkinPacket',\r\n    PlayerStartItemCooldownPacket = 'PlayerStartItemCooldownPacket',\r\n    PlayerToggleCrafterSlotRequestPacket = 'PlayerToggleCrafterSlotRequestPacket',\r\n    PlayerUpdateEntityOverridesPacket = 'PlayerUpdateEntityOverridesPacket',\r\n    PlaySoundPacket = 'PlaySoundPacket',\r\n    PlayStatusPacket = 'PlayStatusPacket',\r\n    PositionTrackingDBClientRequestPacket = 'PositionTrackingDBClientRequestPacket',\r\n    PositionTrackingDBServerBroadcastPacket = 'PositionTrackingDBServerBroadcastPacket',\r\n    PurchaseReceiptPacket = 'PurchaseReceiptPacket',\r\n    RefreshEntitlementsPacket = 'RefreshEntitlementsPacket',\r\n    RemoveActorPacket = 'RemoveActorPacket',\r\n    RemoveObjectivePacket = 'RemoveObjectivePacket',\r\n    RemoveVolumeEntityPacket = 'RemoveVolumeEntityPacket',\r\n    RequestAbilityPacket = 'RequestAbilityPacket',\r\n    RequestChunkRadiusPacket = 'RequestChunkRadiusPacket',\r\n    RequestNetworkSettingsPacket = 'RequestNetworkSettingsPacket',\r\n    RequestPermissionsPacket = 'RequestPermissionsPacket',\r\n    ResourcePackChunkDataPacket = 'ResourcePackChunkDataPacket',\r\n    ResourcePackChunkRequestPacket = 'ResourcePackChunkRequestPacket',\r\n    ResourcePackClientResponsePacket = 'ResourcePackClientResponsePacket',\r\n    ResourcePackDataInfoPacket = 'ResourcePackDataInfoPacket',\r\n    ResourcePacksInfoPacket = 'ResourcePacksInfoPacket',\r\n    ResourcePackStackPacket = 'ResourcePackStackPacket',\r\n    RespawnPacket = 'RespawnPacket',\r\n    ScriptMessagePacket = 'ScriptMessagePacket',\r\n    ServerboundDiagnosticsPacket = 'ServerboundDiagnosticsPacket',\r\n    ServerboundLoadingScreenPacket = 'ServerboundLoadingScreenPacket',\r\n    ServerPlayerPostMovePositionPacket = 'ServerPlayerPostMovePositionPacket',\r\n    ServerSettingsRequestPacket = 'ServerSettingsRequestPacket',\r\n    ServerSettingsResponsePacket = 'ServerSettingsResponsePacket',\r\n    ServerStatsPacket = 'ServerStatsPacket',\r\n    ServerToClientHandshakePacket = 'ServerToClientHandshakePacket',\r\n    SetActorDataPacket = 'SetActorDataPacket',\r\n    SetActorLinkPacket = 'SetActorLinkPacket',\r\n    SetActorMotionPacket = 'SetActorMotionPacket',\r\n    SetCommandsEnabledPacket = 'SetCommandsEnabledPacket',\r\n    SetDefaultGameTypePacket = 'SetDefaultGameTypePacket',\r\n    SetDifficultyPacket = 'SetDifficultyPacket',\r\n    SetDisplayObjectivePacket = 'SetDisplayObjectivePacket',\r\n    SetHealthPacket = 'SetHealthPacket',\r\n    SetHudPacket = 'SetHudPacket',\r\n    SetLastHurtByPacket = 'SetLastHurtByPacket',\r\n    SetLocalPlayerAsInitializedPacket = 'SetLocalPlayerAsInitializedPacket',\r\n    SetMovementAuthorityPacket = 'SetMovementAuthorityPacket',\r\n    SetPlayerGameTypePacket = 'SetPlayerGameTypePacket',\r\n    SetPlayerInventoryOptionsPacket = 'SetPlayerInventoryOptionsPacket',\r\n    SetScoreboardIdentityPacket = 'SetScoreboardIdentityPacket',\r\n    SetScorePacket = 'SetScorePacket',\r\n    SetSpawnPositionPacket = 'SetSpawnPositionPacket',\r\n    SetTimePacket = 'SetTimePacket',\r\n    SettingsCommandPacket = 'SettingsCommandPacket',\r\n    SetTitlePacket = 'SetTitlePacket',\r\n    ShowCreditsPacket = 'ShowCreditsPacket',\r\n    ShowProfilePacket = 'ShowProfilePacket',\r\n    ShowStoreOfferPacket = 'ShowStoreOfferPacket',\r\n    SimpleEventPacket = 'SimpleEventPacket',\r\n    SimulationTypePacket = 'SimulationTypePacket',\r\n    SpawnExperienceOrbPacket = 'SpawnExperienceOrbPacket',\r\n    SpawnParticleEffectPacket = 'SpawnParticleEffectPacket',\r\n    StartGamePacket = 'StartGamePacket',\r\n    StopSoundPacket = 'StopSoundPacket',\r\n    StructureBlockUpdatePacket = 'StructureBlockUpdatePacket',\r\n    StructureTemplateDataRequestPacket = 'StructureTemplateDataRequestPacket',\r\n    StructureTemplateDataResponsePacket = 'StructureTemplateDataResponsePacket',\r\n    SubChunkPacket = 'SubChunkPacket',\r\n    SubChunkRequestPacket = 'SubChunkRequestPacket',\r\n    SubClientLoginPacket = 'SubClientLoginPacket',\r\n    SyncActorPropertyPacket = 'SyncActorPropertyPacket',\r\n    TakeItemActorPacket = 'TakeItemActorPacket',\r\n    TextPacket = 'TextPacket',\r\n    TickingAreasLoadStatusPacket = 'TickingAreasLoadStatusPacket',\r\n    ToastRequestPacket = 'ToastRequestPacket',\r\n    TransferPacket = 'TransferPacket',\r\n    TrimDataPacket = 'TrimDataPacket',\r\n    UnlockedRecipesPacket = 'UnlockedRecipesPacket',\r\n    UpdateAbilitiesPacket = 'UpdateAbilitiesPacket',\r\n    UpdateAdventureSettingsPacket = 'UpdateAdventureSettingsPacket',\r\n    UpdateAttributesPacket = 'UpdateAttributesPacket',\r\n    UpdateBlockPacket = 'UpdateBlockPacket',\r\n    UpdateBlockSyncedPacket = 'UpdateBlockSyncedPacket',\r\n    UpdateClientInputLocksPacket = 'UpdateClientInputLocksPacket',\r\n    UpdateClientOptions = 'UpdateClientOptions',\r\n    UpdateEquipPacket = 'UpdateEquipPacket',\r\n    UpdatePlayerGameTypePacket = 'UpdatePlayerGameTypePacket',\r\n    UpdateSoftEnumPacket = 'UpdateSoftEnumPacket',\r\n    UpdateSubChunkBlocksPacket = 'UpdateSubChunkBlocksPacket',\r\n    UpdateTradePacket = 'UpdateTradePacket',\r\n}\r",
      "jsdoc": "/**\r\n * Represents the unique type of network packet.\r\n */\r",
      "enumValues": [
        {
          "name": "ActorEventPacket",
          "value": "ActorEventPacket"
        },
        {
          "name": "ActorPickRequestPacket",
          "value": "ActorPickRequestPacket"
        },
        {
          "name": "AddActorPacket",
          "value": "AddActorPacket"
        },
        {
          "name": "AddBehaviorTreePacket",
          "value": "AddBehaviorTreePacket"
        },
        {
          "name": "AddItemActorPacket",
          "value": "AddItemActorPacket"
        },
        {
          "name": "AddPaintingPacket",
          "value": "AddPaintingPacket"
        },
        {
          "name": "AddPlayerPacket",
          "value": "AddPlayerPacket"
        },
        {
          "name": "AddVolumeEntityPacket",
          "value": "AddVolumeEntityPacket"
        },
        {
          "name": "AgentActionEventPacket",
          "value": "AgentActionEventPacket"
        },
        {
          "name": "AgentAnimationPacket",
          "value": "AgentAnimationPacket"
        },
        {
          "name": "AnimateEntityPacket",
          "value": "AnimateEntityPacket"
        },
        {
          "name": "AnimatePacket",
          "value": "AnimatePacket"
        },
        {
          "name": "AnvilDamagePacket",
          "value": "AnvilDamagePacket"
        },
        {
          "name": "AutomationClientConnectPacket",
          "value": "AutomationClientConnectPacket"
        },
        {
          "name": "AvailableActorIdentifiersPacket",
          "value": "AvailableActorIdentifiersPacket"
        },
        {
          "name": "AvailableCommandsPacket",
          "value": "AvailableCommandsPacket"
        },
        {
          "name": "AwardAchievementPacket",
          "value": "AwardAchievementPacket"
        },
        {
          "name": "BiomeDefinitionListPacket",
          "value": "BiomeDefinitionListPacket"
        },
        {
          "name": "BlockActorDataPacket",
          "value": "BlockActorDataPacket"
        },
        {
          "name": "BlockEventPacket",
          "value": "BlockEventPacket"
        },
        {
          "name": "BlockPickRequestPacket",
          "value": "BlockPickRequestPacket"
        },
        {
          "name": "BookEditPacket",
          "value": "BookEditPacket"
        },
        {
          "name": "BossEventPacket",
          "value": "BossEventPacket"
        },
        {
          "name": "CameraAimAssistPacket",
          "value": "CameraAimAssistPacket"
        },
        {
          "name": "CameraAimAssistPresetsPacket",
          "value": "CameraAimAssistPresetsPacket"
        },
        {
          "name": "CameraInstructionPacket",
          "value": "CameraInstructionPacket"
        },
        {
          "name": "CameraPacket",
          "value": "CameraPacket"
        },
        {
          "name": "CameraPresetsPacket",
          "value": "CameraPresetsPacket"
        },
        {
          "name": "CameraShakePacket",
          "value": "CameraShakePacket"
        },
        {
          "name": "ChangeDimensionPacket",
          "value": "ChangeDimensionPacket"
        },
        {
          "name": "ChangeMobPropertyPacket",
          "value": "ChangeMobPropertyPacket"
        },
        {
          "name": "ChunkRadiusUpdatedPacket",
          "value": "ChunkRadiusUpdatedPacket"
        },
        {
          "name": "ClientboundCloseFormPacket",
          "value": "ClientboundCloseFormPacket"
        },
        {
          "name": "ClientboundControlSchemeSetPacket",
          "value": "ClientboundControlSchemeSetPacket"
        },
        {
          "name": "ClientboundDebugRendererPacket",
          "value": "ClientboundDebugRendererPacket"
        },
        {
          "name": "ClientboundMapItemDataPacket",
          "value": "ClientboundMapItemDataPacket"
        },
        {
          "name": "ClientCacheBlobStatusPacket",
          "value": "ClientCacheBlobStatusPacket"
        },
        {
          "name": "ClientCacheMissResponsePacket",
          "value": "ClientCacheMissResponsePacket"
        },
        {
          "name": "ClientCacheStatusPacket",
          "value": "ClientCacheStatusPacket"
        },
        {
          "name": "ClientCameraAimAssistPacket",
          "value": "ClientCameraAimAssistPacket"
        },
        {
          "name": "ClientMovementPredictionSyncPacket",
          "value": "ClientMovementPredictionSyncPacket"
        },
        {
          "name": "ClientToServerHandshakePacket",
          "value": "ClientToServerHandshakePacket"
        },
        {
          "name": "CodeBuilderPacket",
          "value": "CodeBuilderPacket"
        },
        {
          "name": "CodeBuilderSourcePacket",
          "value": "CodeBuilderSourcePacket"
        },
        {
          "name": "CommandBlockUpdatePacket",
          "value": "CommandBlockUpdatePacket"
        },
        {
          "name": "CommandOutputPacket",
          "value": "CommandOutputPacket"
        },
        {
          "name": "CommandRequestPacket",
          "value": "CommandRequestPacket"
        },
        {
          "name": "CompletedUsingItemPacket",
          "value": "CompletedUsingItemPacket"
        },
        {
          "name": "ContainerClosePacket",
          "value": "ContainerClosePacket"
        },
        {
          "name": "ContainerOpenPacket",
          "value": "ContainerOpenPacket"
        },
        {
          "name": "ContainerRegistryCleanupPacket",
          "value": "ContainerRegistryCleanupPacket"
        },
        {
          "name": "ContainerSetDataPacket",
          "value": "ContainerSetDataPacket"
        },
        {
          "name": "CorrectPlayerMovePredictionPacket",
          "value": "CorrectPlayerMovePredictionPacket"
        },
        {
          "name": "CraftingDataPacket",
          "value": "CraftingDataPacket"
        },
        {
          "name": "CreatePhotoPacket",
          "value": "CreatePhotoPacket"
        },
        {
          "name": "CreativeContentPacket",
          "value": "CreativeContentPacket"
        },
        {
          "name": "CurrentStructureFeaturePacket",
          "value": "CurrentStructureFeaturePacket"
        },
        {
          "name": "DeathInfoPacket",
          "value": "DeathInfoPacket"
        },
        {
          "name": "DebugInfoPacket",
          "value": "DebugInfoPacket"
        },
        {
          "name": "DimensionDataPacket",
          "value": "DimensionDataPacket"
        },
        {
          "name": "DisconnectPacket",
          "value": "DisconnectPacket"
        },
        {
          "name": "EditorNetworkPacket",
          "value": "EditorNetworkPacket"
        },
        {
          "name": "EducationSettingsPacket",
          "value": "EducationSettingsPacket"
        },
        {
          "name": "EduUriResourcePacket",
          "value": "EduUriResourcePacket"
        },
        {
          "name": "EmoteListPacket",
          "value": "EmoteListPacket"
        },
        {
          "name": "EmotePacket",
          "value": "EmotePacket"
        },
        {
          "name": "FeatureRegistryPacket",
          "value": "FeatureRegistryPacket"
        },
        {
          "name": "GameRulesChangedPacket",
          "value": "GameRulesChangedPacket"
        },
        {
          "name": "GameTestRequestPacket",
          "value": "GameTestRequestPacket"
        },
        {
          "name": "GameTestResultsPacket",
          "value": "GameTestResultsPacket"
        },
        {
          "name": "GuiDataPickItemPacket",
          "value": "GuiDataPickItemPacket"
        },
        {
          "name": "HurtArmorPacket",
          "value": "HurtArmorPacket"
        },
        {
          "name": "InteractPacket",
          "value": "InteractPacket"
        },
        {
          "name": "InventoryContentPacket",
          "value": "InventoryContentPacket"
        },
        {
          "name": "InventorySlotPacket",
          "value": "InventorySlotPacket"
        },
        {
          "name": "InventoryTransactionPacket",
          "value": "InventoryTransactionPacket"
        },
        {
          "name": "ItemRegistryPacket",
          "value": "ItemRegistryPacket"
        },
        {
          "name": "ItemStackRequestPacket",
          "value": "ItemStackRequestPacket"
        },
        {
          "name": "ItemStackResponsePacket",
          "value": "ItemStackResponsePacket"
        },
        {
          "name": "JigsawStructureDataPacket",
          "value": "JigsawStructureDataPacket"
        },
        {
          "name": "LabTablePacket",
          "value": "LabTablePacket"
        },
        {
          "name": "LecternUpdatePacket",
          "value": "LecternUpdatePacket"
        },
        {
          "name": "LegacyTelemetryEventPacket",
          "value": "LegacyTelemetryEventPacket"
        },
        {
          "name": "LessonProgressPacket",
          "value": "LessonProgressPacket"
        },
        {
          "name": "LevelChunkPacket",
          "value": "LevelChunkPacket"
        },
        {
          "name": "LevelEventGenericPacket",
          "value": "LevelEventGenericPacket"
        },
        {
          "name": "LevelEventPacket",
          "value": "LevelEventPacket"
        },
        {
          "name": "LevelSoundEventPacket",
          "value": "LevelSoundEventPacket"
        },
        {
          "name": "LoginPacket",
          "value": "LoginPacket"
        },
        {
          "name": "MapCreateLockedCopyPacket",
          "value": "MapCreateLockedCopyPacket"
        },
        {
          "name": "MapInfoRequestPacket",
          "value": "MapInfoRequestPacket"
        },
        {
          "name": "MobArmorEquipmentPacket",
          "value": "MobArmorEquipmentPacket"
        },
        {
          "name": "MobEffectPacket",
          "value": "MobEffectPacket"
        },
        {
          "name": "MobEquipmentPacket",
          "value": "MobEquipmentPacket"
        },
        {
          "name": "ModalFormRequestPacket",
          "value": "ModalFormRequestPacket"
        },
        {
          "name": "ModalFormResponsePacket",
          "value": "ModalFormResponsePacket"
        },
        {
          "name": "MotionPredictionHintsPacket",
          "value": "MotionPredictionHintsPacket"
        },
        {
          "name": "MoveActorAbsolutePacket",
          "value": "MoveActorAbsolutePacket"
        },
        {
          "name": "MoveActorDeltaPacket",
          "value": "MoveActorDeltaPacket"
        },
        {
          "name": "MovementEffectPacket",
          "value": "MovementEffectPacket"
        },
        {
          "name": "MovePlayerPacket",
          "value": "MovePlayerPacket"
        },
        {
          "name": "MultiplayerSettingsPacket",
          "value": "MultiplayerSettingsPacket"
        },
        {
          "name": "NetworkChunkPublisherUpdatePacket",
          "value": "NetworkChunkPublisherUpdatePacket"
        },
        {
          "name": "NetworkSettingsPacket",
          "value": "NetworkSettingsPacket"
        },
        {
          "name": "NetworkStackLatencyPacket",
          "value": "NetworkStackLatencyPacket"
        },
        {
          "name": "NpcDialoguePacket",
          "value": "NpcDialoguePacket"
        },
        {
          "name": "NpcRequestPacket",
          "value": "NpcRequestPacket"
        },
        {
          "name": "OnScreenTextureAnimationPacket",
          "value": "OnScreenTextureAnimationPacket"
        },
        {
          "name": "OpenSignPacket",
          "value": "OpenSignPacket"
        },
        {
          "name": "PacketViolationWarningPacket",
          "value": "PacketViolationWarningPacket"
        },
        {
          "name": "PhotoTransferPacket",
          "value": "PhotoTransferPacket"
        },
        {
          "name": "PlayerActionPacket",
          "value": "PlayerActionPacket"
        },
        {
          "name": "PlayerArmorDamagePacket",
          "value": "PlayerArmorDamagePacket"
        },
        {
          "name": "PlayerAuthInputPacket",
          "value": "PlayerAuthInputPacket"
        },
        {
          "name": "PlayerEnchantOptionsPacket",
          "value": "PlayerEnchantOptionsPacket"
        },
        {
          "name": "PlayerFogPacket",
          "value": "PlayerFogPacket"
        },
        {
          "name": "PlayerHotbarPacket",
          "value": "PlayerHotbarPacket"
        },
        {
          "name": "PlayerListPacket",
          "value": "PlayerListPacket"
        },
        {
          "name": "PlayerLocationPacket",
          "value": "PlayerLocationPacket"
        },
        {
          "name": "PlayerSkinPacket",
          "value": "PlayerSkinPacket"
        },
        {
          "name": "PlayerStartItemCooldownPacket",
          "value": "PlayerStartItemCooldownPacket"
        },
        {
          "name": "PlayerToggleCrafterSlotRequestPacket",
          "value": "PlayerToggleCrafterSlotRequestPacket"
        },
        {
          "name": "PlayerUpdateEntityOverridesPacket",
          "value": "PlayerUpdateEntityOverridesPacket"
        },
        {
          "name": "PlaySoundPacket",
          "value": "PlaySoundPacket"
        },
        {
          "name": "PlayStatusPacket",
          "value": "PlayStatusPacket"
        },
        {
          "name": "PositionTrackingDBClientRequestPacket",
          "value": "PositionTrackingDBClientRequestPacket"
        },
        {
          "name": "PositionTrackingDBServerBroadcastPacket",
          "value": "PositionTrackingDBServerBroadcastPacket"
        },
        {
          "name": "PurchaseReceiptPacket",
          "value": "PurchaseReceiptPacket"
        },
        {
          "name": "RefreshEntitlementsPacket",
          "value": "RefreshEntitlementsPacket"
        },
        {
          "name": "RemoveActorPacket",
          "value": "RemoveActorPacket"
        },
        {
          "name": "RemoveObjectivePacket",
          "value": "RemoveObjectivePacket"
        },
        {
          "name": "RemoveVolumeEntityPacket",
          "value": "RemoveVolumeEntityPacket"
        },
        {
          "name": "RequestAbilityPacket",
          "value": "RequestAbilityPacket"
        },
        {
          "name": "RequestChunkRadiusPacket",
          "value": "RequestChunkRadiusPacket"
        },
        {
          "name": "RequestNetworkSettingsPacket",
          "value": "RequestNetworkSettingsPacket"
        },
        {
          "name": "RequestPermissionsPacket",
          "value": "RequestPermissionsPacket"
        },
        {
          "name": "ResourcePackChunkDataPacket",
          "value": "ResourcePackChunkDataPacket"
        },
        {
          "name": "ResourcePackChunkRequestPacket",
          "value": "ResourcePackChunkRequestPacket"
        },
        {
          "name": "ResourcePackClientResponsePacket",
          "value": "ResourcePackClientResponsePacket"
        },
        {
          "name": "ResourcePackDataInfoPacket",
          "value": "ResourcePackDataInfoPacket"
        },
        {
          "name": "ResourcePacksInfoPacket",
          "value": "ResourcePacksInfoPacket"
        },
        {
          "name": "ResourcePackStackPacket",
          "value": "ResourcePackStackPacket"
        },
        {
          "name": "RespawnPacket",
          "value": "RespawnPacket"
        },
        {
          "name": "ScriptMessagePacket",
          "value": "ScriptMessagePacket"
        },
        {
          "name": "ServerboundDiagnosticsPacket",
          "value": "ServerboundDiagnosticsPacket"
        },
        {
          "name": "ServerboundLoadingScreenPacket",
          "value": "ServerboundLoadingScreenPacket"
        },
        {
          "name": "ServerPlayerPostMovePositionPacket",
          "value": "ServerPlayerPostMovePositionPacket"
        },
        {
          "name": "ServerSettingsRequestPacket",
          "value": "ServerSettingsRequestPacket"
        },
        {
          "name": "ServerSettingsResponsePacket",
          "value": "ServerSettingsResponsePacket"
        },
        {
          "name": "ServerStatsPacket",
          "value": "ServerStatsPacket"
        },
        {
          "name": "ServerToClientHandshakePacket",
          "value": "ServerToClientHandshakePacket"
        },
        {
          "name": "SetActorDataPacket",
          "value": "SetActorDataPacket"
        },
        {
          "name": "SetActorLinkPacket",
          "value": "SetActorLinkPacket"
        },
        {
          "name": "SetActorMotionPacket",
          "value": "SetActorMotionPacket"
        },
        {
          "name": "SetCommandsEnabledPacket",
          "value": "SetCommandsEnabledPacket"
        },
        {
          "name": "SetDefaultGameTypePacket",
          "value": "SetDefaultGameTypePacket"
        },
        {
          "name": "SetDifficultyPacket",
          "value": "SetDifficultyPacket"
        },
        {
          "name": "SetDisplayObjectivePacket",
          "value": "SetDisplayObjectivePacket"
        },
        {
          "name": "SetHealthPacket",
          "value": "SetHealthPacket"
        },
        {
          "name": "SetHudPacket",
          "value": "SetHudPacket"
        },
        {
          "name": "SetLastHurtByPacket",
          "value": "SetLastHurtByPacket"
        },
        {
          "name": "SetLocalPlayerAsInitializedPacket",
          "value": "SetLocalPlayerAsInitializedPacket"
        },
        {
          "name": "SetMovementAuthorityPacket",
          "value": "SetMovementAuthorityPacket"
        },
        {
          "name": "SetPlayerGameTypePacket",
          "value": "SetPlayerGameTypePacket"
        },
        {
          "name": "SetPlayerInventoryOptionsPacket",
          "value": "SetPlayerInventoryOptionsPacket"
        },
        {
          "name": "SetScoreboardIdentityPacket",
          "value": "SetScoreboardIdentityPacket"
        },
        {
          "name": "SetScorePacket",
          "value": "SetScorePacket"
        },
        {
          "name": "SetSpawnPositionPacket",
          "value": "SetSpawnPositionPacket"
        },
        {
          "name": "SetTimePacket",
          "value": "SetTimePacket"
        },
        {
          "name": "SettingsCommandPacket",
          "value": "SettingsCommandPacket"
        },
        {
          "name": "SetTitlePacket",
          "value": "SetTitlePacket"
        },
        {
          "name": "ShowCreditsPacket",
          "value": "ShowCreditsPacket"
        },
        {
          "name": "ShowProfilePacket",
          "value": "ShowProfilePacket"
        },
        {
          "name": "ShowStoreOfferPacket",
          "value": "ShowStoreOfferPacket"
        },
        {
          "name": "SimpleEventPacket",
          "value": "SimpleEventPacket"
        },
        {
          "name": "SimulationTypePacket",
          "value": "SimulationTypePacket"
        },
        {
          "name": "SpawnExperienceOrbPacket",
          "value": "SpawnExperienceOrbPacket"
        },
        {
          "name": "SpawnParticleEffectPacket",
          "value": "SpawnParticleEffectPacket"
        },
        {
          "name": "StartGamePacket",
          "value": "StartGamePacket"
        },
        {
          "name": "StopSoundPacket",
          "value": "StopSoundPacket"
        },
        {
          "name": "StructureBlockUpdatePacket",
          "value": "StructureBlockUpdatePacket"
        },
        {
          "name": "StructureTemplateDataRequestPacket",
          "value": "StructureTemplateDataRequestPacket"
        },
        {
          "name": "StructureTemplateDataResponsePacket",
          "value": "StructureTemplateDataResponsePacket"
        },
        {
          "name": "SubChunkPacket",
          "value": "SubChunkPacket"
        },
        {
          "name": "SubChunkRequestPacket",
          "value": "SubChunkRequestPacket"
        },
        {
          "name": "SubClientLoginPacket",
          "value": "SubClientLoginPacket"
        },
        {
          "name": "SyncActorPropertyPacket",
          "value": "SyncActorPropertyPacket"
        },
        {
          "name": "TakeItemActorPacket",
          "value": "TakeItemActorPacket"
        },
        {
          "name": "TextPacket",
          "value": "TextPacket"
        },
        {
          "name": "TickingAreasLoadStatusPacket",
          "value": "TickingAreasLoadStatusPacket"
        },
        {
          "name": "ToastRequestPacket",
          "value": "ToastRequestPacket"
        },
        {
          "name": "TransferPacket",
          "value": "TransferPacket"
        },
        {
          "name": "TrimDataPacket",
          "value": "TrimDataPacket"
        },
        {
          "name": "UnlockedRecipesPacket",
          "value": "UnlockedRecipesPacket"
        },
        {
          "name": "UpdateAbilitiesPacket",
          "value": "UpdateAbilitiesPacket"
        },
        {
          "name": "UpdateAdventureSettingsPacket",
          "value": "UpdateAdventureSettingsPacket"
        },
        {
          "name": "UpdateAttributesPacket",
          "value": "UpdateAttributesPacket"
        },
        {
          "name": "UpdateBlockPacket",
          "value": "UpdateBlockPacket"
        },
        {
          "name": "UpdateBlockSyncedPacket",
          "value": "UpdateBlockSyncedPacket"
        },
        {
          "name": "UpdateClientInputLocksPacket",
          "value": "UpdateClientInputLocksPacket"
        },
        {
          "name": "UpdateClientOptions",
          "value": "UpdateClientOptions"
        },
        {
          "name": "UpdateEquipPacket",
          "value": "UpdateEquipPacket"
        },
        {
          "name": "UpdatePlayerGameTypePacket",
          "value": "UpdatePlayerGameTypePacket"
        },
        {
          "name": "UpdateSoftEnumPacket",
          "value": "UpdateSoftEnumPacket"
        },
        {
          "name": "UpdateSubChunkBlocksPacket",
          "value": "UpdateSubChunkBlocksPacket"
        },
        {
          "name": "UpdateTradePacket",
          "value": "UpdateTradePacket"
        }
      ],
      "categories": [
        "Enums",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetid",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server-net.HttpClient": {
      "id": "@minecraft/server-net.HttpClient",
      "name": "HttpClient",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
      "definition": "export class HttpClient {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Cancels all pending requests.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    cancelAll(reason: string): void;\r\n    /**\r\n     * @remarks\r\n     * Performs a simple HTTP get request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param uri\r\n     * URL to make an HTTP Request to.\r\n     * @returns\r\n     * An awaitable promise that contains the HTTP response.\r\n     */\r\n    get(uri: string): Promise<HttpResponse>;\r\n    /**\r\n     * @remarks\r\n     * Performs an HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     * @param config\r\n     * Contains an HTTP Request object with configuration data on\r\n     * the HTTP request.\r\n     * @returns\r\n     * An awaitable promise that contains the HTTP response.\r\n     * @example simpleHttpRequest.ts\r\n     * ```typescript\r\n     * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n     *\r\n     * async function updateScore() {\r\n     *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n     *\r\n     *     req.body = JSON.stringify({\r\n     *         score: 22,\r\n     *     });\r\n     *\r\n     *     req.method = HttpRequestMethod.Post;\r\n     *     req.headers = [\r\n     *         new HttpHeader('Content-Type', 'application/json'),\r\n     *         new HttpHeader('auth', 'my-auth-token'),\r\n     *     ];\r\n     *\r\n     *     await http.request(req);\r\n     * }\r\n     * ```\r\n     */\r\n    request(config: HttpRequest): Promise<HttpResponse>;\r\n}\r",
      "jsdoc": "/**\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "cancelAll",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "cancelAll(reason: string): void"
        },
        {
          "name": "get",
          "parameters": [],
          "returnType": "Promise<HttpResponse>",
          "accessibility": "public",
          "signature": "get(uri: string): Promise<HttpResponse>"
        },
        {
          "name": "request",
          "parameters": [],
          "returnType": "Promise<HttpResponse>",
          "accessibility": "public",
          "signature": "request(config: HttpRequest): Promise<HttpResponse>"
        }
      ],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "httpclient",
        "class"
      ],
      "examples": [
        {
          "title": "simpleHttpRequest.ts",
          "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-net.HttpHeader": {
      "id": "@minecraft/server-net.HttpHeader",
      "name": "HttpHeader",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Represents an HTTP header - a key/value pair of\r meta-information about a request.\r ```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
      "definition": "export class HttpHeader {\n    /**\r\n     * @remarks\r\n     * Key of the HTTP header.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    key: string;\r\n    /**\r\n     * @remarks\r\n     * Value of the HTTP header.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    value: minecraftserveradmin.SecretString | string;\r\n    constructor(key: string, value: minecraftserveradmin.SecretString | string);\r\n}\r",
      "jsdoc": "/**\r\n * Represents an HTTP header - a key/value pair of\r\n * meta-information about a request.\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "httpheader",
        "class"
      ],
      "examples": [
        {
          "title": "simpleHttpRequest.ts",
          "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-net.HttpRequest": {
      "id": "@minecraft/server-net.HttpRequest",
      "name": "HttpRequest",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Main object for structuring a request.\r ```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
      "definition": "export class HttpRequest {\n    /**\r\n     * @remarks\r\n     * Content of the body of the HTTP request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    body: string;\r\n    /**\r\n     * @remarks\r\n     * A collection of HTTP headers to add to the outbound request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    headers: HttpHeader[];\r\n    /**\r\n     * @remarks\r\n     * HTTP method (e.g., GET or PUT or PATCH) to use for making\r\n     * the request.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    method: HttpRequestMethod;\r\n    /**\r\n     * @remarks\r\n     * Amount of time, in seconds, before the request times out and\r\n     * is abandoned.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    timeout: number;\r\n    /**\r\n     * @remarks\r\n     * The HTTP resource to access.\r\n     *\r\n     * This property can be edited in early-execution mode.\r\n     *\r\n     */\r\n    uri: string;\r\n    constructor(uri: string);\r\n    /**\r\n     * @remarks\r\n     * Adds an additional header to the overall list of headers\r\n     * used in the corresponding HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    addHeader(key: string, value: minecraftserveradmin.SecretString | string): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Updates the content of the body of the HTTP request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setBody(body: string): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Replaces and applies a set of HTTP Headers for the request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setHeaders(headers: HttpHeader[]): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * Sets the desired HTTP method (e.g., GET or PUT or PATCH) to\r\n     * use for making the request.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setMethod(method: HttpRequestMethod): HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    setTimeout(timeout: number): HttpRequest;\r\n}\r",
      "jsdoc": "/**\r\n * Main object for structuring a request.\r\n * @example simpleHttpRequest.ts\r\n * ```typescript\r\n * import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n *\r\n * async function updateScore() {\r\n *     const req = new HttpRequest('http://localhost:3000/updateScore');\r\n *\r\n *     req.body = JSON.stringify({\r\n *         score: 22,\r\n *     });\r\n *\r\n *     req.method = HttpRequestMethod.Post;\r\n *     req.headers = [\r\n *         new HttpHeader('Content-Type', 'application/json'),\r\n *         new HttpHeader('auth', 'my-auth-token'),\r\n *     ];\r\n *\r\n *     await http.request(req);\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "addHeader",
          "parameters": [],
          "returnType": "HttpRequest",
          "accessibility": "public",
          "signature": "addHeader(key: string, value: minecraftserveradmin.SecretString | string): HttpRequest"
        },
        {
          "name": "setBody",
          "parameters": [],
          "returnType": "HttpRequest",
          "accessibility": "public",
          "signature": "setBody(body: string): HttpRequest"
        },
        {
          "name": "setHeaders",
          "parameters": [],
          "returnType": "HttpRequest",
          "accessibility": "public",
          "signature": "setHeaders(headers: HttpHeader[]): HttpRequest"
        },
        {
          "name": "setMethod",
          "parameters": [],
          "returnType": "HttpRequest",
          "accessibility": "public",
          "signature": "setMethod(method: HttpRequestMethod): HttpRequest"
        },
        {
          "name": "setTimeout",
          "parameters": [],
          "returnType": "HttpRequest",
          "accessibility": "public",
          "signature": "setTimeout(timeout: number): HttpRequest"
        }
      ],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "httprequest",
        "class"
      ],
      "examples": [
        {
          "title": "simpleHttpRequest.ts",
          "code": "import { HttpRequest, HttpHeader, HttpRequestMethod, http } from '@minecraft/server-net';\r\n\nasync function updateScore() {\r\n    const req = new HttpRequest('http://localhost:3000/updateScore');\r\n\n    req.body = JSON.stringify({\r\n        score: 22,\r\n    });\r\n\n    req.method = HttpRequestMethod.Post;\r\n    req.headers = [\r\n        new HttpHeader('Content-Type', 'application/json'),\r\n        new HttpHeader('auth', 'my-auth-token'),\r\n    ];\r\n\n    await http.request(req);\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-net.HttpResponse": {
      "id": "@minecraft/server-net.HttpResponse",
      "name": "HttpResponse",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Main object that contains result information from a request.\r /",
      "definition": "export class HttpResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Body content of the HTTP response.\r\n     *\r\n     */\r\n    readonly body: string;\r\n    /**\r\n     * @remarks\r\n     * A collection of HTTP response headers returned from the\r\n     * request.\r\n     *\r\n     */\r\n    readonly headers: HttpHeader[];\r\n    /**\r\n     * @remarks\r\n     * Information that was used to formulate the HTTP response\r\n     * that this object represents.\r\n     *\r\n     */\r\n    readonly request: HttpRequest;\r\n    /**\r\n     * @remarks\r\n     * HTTP response code for the request. For example, 404\r\n     * represents resource not found, and 500 represents an\r\n     * internal server error.\r\n     *\r\n     */\r\n    readonly status: number;\r\n}\r",
      "jsdoc": "/**\r\n * Main object that contains result information from a request.\r\n */\r",
      "properties": [
        {
          "name": "body",
          "type": "string",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "headers",
          "type": "HttpHeader[]",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "request",
          "type": "HttpRequest",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "status",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "httpresponse",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-net.NetworkBeforeEvents": {
      "id": "@minecraft/server-net.NetworkBeforeEvents",
      "name": "NetworkBeforeEvents",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "HTTP response code for the request. For example, 404\r represents resource not found, and 500 represents an\r internal server error.",
      "definition": "export class NetworkBeforeEvents {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly packetReceive: PacketReceiveBeforeEventSignal;\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    readonly packetSend: PacketSendBeforeEventSignal;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * HTTP response code for the request. For example, 404\r\n     * represents resource not found, and 500 represents an\r\n     * internal server error.\r\n     *\r\n     */\r",
      "properties": [
        {
          "name": "packetReceive",
          "type": "PacketReceiveBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "packetSend",
          "type": "PacketSendBeforeEventSignal",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "networkbeforeevents",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-net.PacketReceiveBeforeEventSignal": {
      "id": "@minecraft/server-net.PacketReceiveBeforeEventSignal",
      "name": "PacketReceiveBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "This property can be read in early-execution mode.",
      "definition": "export class PacketReceiveBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PacketReceivedBeforeEvent) => void,\r\n        options?: PacketEventOptions,\r\n    ): (arg0: PacketReceivedBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PacketReceivedBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetreceivebeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-net.PacketReceivedBeforeEvent": {
      "id": "@minecraft/server-net.PacketReceivedBeforeEvent",
      "name": "PacketReceivedBeforeEvent",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Sent as the server receives a network packet from a client.\r If cancelled, the server will not parse the network packet\r and will silently ignore it.\r /",
      "definition": "export class PacketReceivedBeforeEvent {\n    private constructor();\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The type of network packet.\r\n     *\r\n     */\r\n    readonly packetId: PacketId;\r\n    /**\r\n     * @remarks\r\n     * The size of the network packet in bytes.\r\n     *\r\n     */\r\n    readonly packetSize: number;\r\n    /**\r\n     * @remarks\r\n     * Which client sent the network packet to the game server.\r\n     *\r\n     */\r\n    readonly sender?: minecraftserver.Player;\r\n}\r",
      "jsdoc": "/**\r\n * Sent as the server receives a network packet from a client.\r\n * If cancelled, the server will not parse the network packet\r\n * and will silently ignore it.\r\n */\r",
      "properties": [
        {
          "name": "packetId",
          "type": "PacketId",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "packetSize",
          "type": "number",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetreceivedbeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-net.PacketSendBeforeEvent": {
      "id": "@minecraft/server-net.PacketSendBeforeEvent",
      "name": "PacketSendBeforeEvent",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Sent as the server sends a network packet to clients.  If\r cancelled, the server will not send the network packet to\r the receiving clients.\r /",
      "definition": "export class PacketSendBeforeEvent {\n    private constructor();\r\n    cancel: boolean;\r\n    /**\r\n     * @remarks\r\n     * The type of network packet.\r\n     *\r\n     */\r\n    readonly packetId: PacketId;\r\n    /**\r\n     * @remarks\r\n     * Which clients the network packet is being sent to.\r\n     *\r\n     */\r\n    readonly recipients: (minecraftserver.Player | undefined)[];\r\n}\r",
      "jsdoc": "/**\r\n * Sent as the server sends a network packet to clients.  If\r\n * cancelled, the server will not send the network packet to\r\n * the receiving clients.\r\n */\r",
      "properties": [
        {
          "name": "packetId",
          "type": "PacketId",
          "readonly": true,
          "accessibility": "public"
        },
        {
          "name": "recipients",
          "type": "(minecraftserver.Player | undefined)[]",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetsendbeforeevent",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-net.PacketSendBeforeEventSignal": {
      "id": "@minecraft/server-net.PacketSendBeforeEventSignal",
      "name": "PacketSendBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Which clients the network packet is being sent to.",
      "definition": "export class PacketSendBeforeEventSignal {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    subscribe(\r\n        callback: (arg0: PacketSendBeforeEvent) => void,\r\n        options?: PacketEventOptions,\r\n    ): (arg0: PacketSendBeforeEvent) => void;\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * This function can be called in early-execution mode.\r\n     *\r\n     */\r\n    unsubscribe(callback: (arg0: PacketSendBeforeEvent) => void): void;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * Which clients the network packet is being sent to.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetsendbeforeeventsignal",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-net.PacketEventOptions": {
      "id": "@minecraft/server-net.PacketEventOptions",
      "name": "PacketEventOptions",
      "type": "interface",
      "module": "@minecraft/server-net",
      "description": "Options for events triggered by network packets.\r /",
      "definition": "export interface PacketEventOptions {\n    /**\r\n     * @remarks\r\n     * If provided, packet IDs in this list will not trigger the\r\n     * event subscriptions.\r\n     *\r\n     */\r\n    ignoredPacketIds?: PacketId[];\r\n    /**\r\n     * @remarks\r\n     * If provided only packet IDs in this list will trigger the\r\n     * event subscriptions.\r\n     *\r\n     */\r\n    monitoredPacketIds?: PacketId[];\r\n}\r",
      "jsdoc": "/**\r\n * Options for events triggered by network packets.\r\n */\r",
      "properties": [
        {
          "name": "ignoredPacketIds",
          "type": "PacketId[]",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "monitoredPacketIds",
          "type": "PacketId[]",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packeteventoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server-net.InternalHttpRequestError": {
      "id": "@minecraft/server-net.InternalHttpRequestError",
      "name": "InternalHttpRequestError",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "An error thrown when a platform-level HTTP error occurs.\r Information provided in this class may be useful for\r diagnostics purposes but will differ from platform to\r platform.\r /",
      "definition": "export class InternalHttpRequestError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * The platform-provided numeric error code for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    code: number;\r\n    /**\r\n     * @remarks\r\n     * The platform-provided message for the error.\r\n     *\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    message: string;\r\n}\r",
      "jsdoc": "/**\r\n * An error thrown when a platform-level HTTP error occurs.\r\n * Information provided in this class may be useful for\r\n * diagnostics purposes but will differ from platform to\r\n * platform.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "internalhttprequesterror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-net.MalformedHttpRequestError": {
      "id": "@minecraft/server-net.MalformedHttpRequestError",
      "name": "MalformedHttpRequestError",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "An error thrown when a malformed HTTP request is attempted\r to be sent.\r /",
      "definition": "export class MalformedHttpRequestError extends Error {\n    private constructor();\r\n}\r",
      "jsdoc": "/**\r\n * An error thrown when a malformed HTTP request is attempted\r\n * to be sent.\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "malformedhttprequesterror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-ui.FormCancelationReason": {
      "id": "@minecraft/server-ui.FormCancelationReason",
      "name": "FormCancelationReason",
      "type": "enum",
      "module": "@minecraft/server-ui",
      "description": "expressing simple dialog-based user experiences.\r  captions and images that can be used for presenting a set of\r options to a player.\r experiences that are functional for Yes/No or OK/Cancel\r questions.\r \"questionnaire-style\" list of controls that can be used to\r take input.\r  Manifest Details\r ```json\r {\r   \"version\": \"2.0.0\"\r }\r ```\r  /",
      "definition": "export enum FormCancelationReason {\n    UserBusy = 'UserBusy',\r\n    UserClosed = 'UserClosed',\r\n}\r",
      "jsdoc": "/**\r\n * @packageDocumentation\r\n * The `@minecraft/server-ui` module contains types for\r\n * expressing simple dialog-based user experiences.\r\n *\r\n *   * {@link ActionFormData} contain a list of buttons with\r\n * captions and images that can be used for presenting a set of\r\n * options to a player.\r\n *   * {@link MessageFormData} are simple two-button message\r\n * experiences that are functional for Yes/No or OK/Cancel\r\n * questions.\r\n *   * {@link ModalFormData} allow for a more flexible\r\n * \"questionnaire-style\" list of controls that can be used to\r\n * take input.\r\n *\r\n * Manifest Details\r\n * ```json\r\n * {\r\n *   \"module_name\": \"@minecraft/server-ui\",\r\n *   \"version\": \"2.0.0\"\r\n * }\r\n * ```\r\n *\r\n */\r",
      "enumValues": [
        {
          "name": "UserBusy",
          "value": "UserBusy"
        },
        {
          "name": "UserClosed",
          "value": "UserClosed"
        }
      ],
      "categories": [
        "Enums",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "formcancelationreason",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.FormRejectReason": {
      "id": "@minecraft/server-ui.FormRejectReason",
      "name": "FormRejectReason",
      "type": "enum",
      "module": "@minecraft/server-ui",
      "definition": "export enum FormRejectReason {\n    MalformedResponse = 'MalformedResponse',\r\n    PlayerQuit = 'PlayerQuit',\r\n    ServerShutdown = 'ServerShutdown',\r\n}\r",
      "jsdoc": "",
      "enumValues": [
        {
          "name": "MalformedResponse",
          "value": "MalformedResponse"
        },
        {
          "name": "PlayerQuit",
          "value": "PlayerQuit"
        },
        {
          "name": "ServerShutdown",
          "value": "ServerShutdown"
        }
      ],
      "categories": [
        "Enums",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "formrejectreason",
        "enum"
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.ActionFormData": {
      "id": "@minecraft/server-ui.ActionFormData",
      "name": "ActionFormData",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Builds a simple player form with buttons that let the player\r take action.\r ```typescript\r  function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const playerList = world.getPlayers();\r    if (playerList.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Test Title\")\r       .body(\"Body text here!\")\r       .button(\"btn 1\")\r       .button(\"btn 2\")\r       .button(\"btn 3\")\r       .button(\"btn 4\")\r       .button(\"btn 5\");\r      form.show(playerList[0]).then((result: ActionFormResponse) => {\r       if (result.canceled) {\r         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r         return -1;\r       } else {\r         log(\"Your result was: \" + result.selection);\r       }\r     });\r   }\r }\r ```\r ```typescript\r  function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Months\")\r       .body(\"Choose your favorite month!\")\r       .button(\"January\")\r       .button(\"February\")\r       .button(\"March\")\r       .button(\"April\")\r       .button(\"May\");\r      form.show(players[0]).then((response: ActionFormResponse) => {\r       if (response.selection === 3) {\r         log(\"I like April too!\");\r         return -1;\r       }\r     });\r   }\r }\r ```\r /",
      "definition": "export class ActionFormData {\n    /**\r\n     * @remarks\r\n     * Method that sets the body text for the modal form.\r\n     *\r\n     */\r\n    body(bodyText: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a button to this form with an icon from a resource\r\n     * pack.\r\n     *\r\n     */\r\n    button(text: minecraftserver.RawMessage | string, iconPath?: string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a section divider to the form.\r\n     *\r\n     */\r\n    divider(): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a header to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    header(text: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a label to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    label(text: minecraftserver.RawMessage | string): ActionFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<ActionFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): ActionFormData;\r\n}\r",
      "jsdoc": "/**\r\n * Builds a simple player form with buttons that let the player\r\n * take action.\r\n * @example showActionForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const playerList = world.getPlayers();\r\n *\r\n *   if (playerList.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Test Title\")\r\n *       .body(\"Body text here!\")\r\n *       .button(\"btn 1\")\r\n *       .button(\"btn 2\")\r\n *       .button(\"btn 3\")\r\n *       .button(\"btn 4\")\r\n *       .button(\"btn 5\");\r\n *\r\n *     form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n *       if (result.canceled) {\r\n *         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n *         return -1;\r\n *       } else {\r\n *         log(\"Your result was: \" + result.selection);\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n * @example showFavoriteMonth.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Months\")\r\n *       .body(\"Choose your favorite month!\")\r\n *       .button(\"January\")\r\n *       .button(\"February\")\r\n *       .button(\"March\")\r\n *       .button(\"April\")\r\n *       .button(\"May\");\r\n *\r\n *     form.show(players[0]).then((response: ActionFormResponse) => {\r\n *       if (response.selection === 3) {\r\n *         log(\"I like April too!\");\r\n *         return -1;\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "body",
          "parameters": [],
          "returnType": "ActionFormData",
          "accessibility": "public",
          "signature": "body(bodyText: minecraftserver.RawMessage | string): ActionFormData"
        },
        {
          "name": "button",
          "parameters": [],
          "returnType": "ActionFormData",
          "accessibility": "public",
          "signature": "button(text: minecraftserver.RawMessage | string, iconPath?: string): ActionFormData"
        },
        {
          "name": "divider",
          "parameters": [],
          "returnType": "ActionFormData",
          "accessibility": "public",
          "signature": "divider(): ActionFormData"
        },
        {
          "name": "header",
          "parameters": [],
          "returnType": "ActionFormData",
          "accessibility": "public",
          "signature": "header(text: minecraftserver.RawMessage | string): ActionFormData"
        },
        {
          "name": "label",
          "parameters": [],
          "returnType": "ActionFormData",
          "accessibility": "public",
          "signature": "label(text: minecraftserver.RawMessage | string): ActionFormData"
        },
        {
          "name": "show",
          "parameters": [],
          "returnType": "Promise<ActionFormResponse>",
          "accessibility": "public",
          "signature": "show(player: minecraftserver.Player): Promise<ActionFormResponse>"
        },
        {
          "name": "title",
          "parameters": [],
          "returnType": "ActionFormData",
          "accessibility": "public",
          "signature": "title(titleText: minecraftserver.RawMessage | string): ActionFormData"
        }
      ],
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "actionformdata",
        "class"
      ],
      "examples": [
        {
          "title": "showActionForm.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const playerList = world.getPlayers();\r\n\n  if (playerList.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Test Title\")\r\n      .body(\"Body text here!\")\r\n      .button(\"btn 1\")\r\n      .button(\"btn 2\")\r\n      .button(\"btn 3\")\r\n      .button(\"btn 4\")\r\n      .button(\"btn 5\");\r\n\n    form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n      if (result.canceled) {\r\n        log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n        return -1;\r\n      } else {\r\n        log(\"Your result was: \" + result.selection);\r\n      }\r\n    });\r\n  }\r\n}"
        },
        {
          "title": "showFavoriteMonth.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Months\")\r\n      .body(\"Choose your favorite month!\")\r\n      .button(\"January\")\r\n      .button(\"February\")\r\n      .button(\"March\")\r\n      .button(\"April\")\r\n      .button(\"May\");\r\n\n    form.show(players[0]).then((response: ActionFormResponse) => {\r\n      if (response.selection === 3) {\r\n        log(\"I like April too!\");\r\n        return -1;\r\n      }\r\n    });\r\n  }\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.ActionFormResponse": {
      "id": "@minecraft/server-ui.ActionFormResponse",
      "name": "ActionFormResponse",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Returns data about the player results from a modal action\r form.\r ```typescript\r  function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const playerList = world.getPlayers();\r    if (playerList.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Test Title\")\r       .body(\"Body text here!\")\r       .button(\"btn 1\")\r       .button(\"btn 2\")\r       .button(\"btn 3\")\r       .button(\"btn 4\")\r       .button(\"btn 5\");\r      form.show(playerList[0]).then((result: ActionFormResponse) => {\r       if (result.canceled) {\r         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r         return -1;\r       } else {\r         log(\"Your result was: \" + result.selection);\r       }\r     });\r   }\r }\r ```\r ```typescript\r  function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Months\")\r       .body(\"Choose your favorite month!\")\r       .button(\"January\")\r       .button(\"February\")\r       .button(\"March\")\r       .button(\"April\")\r       .button(\"May\");\r      form.show(players[0]).then((response: ActionFormResponse) => {\r       if (response.selection === 3) {\r         log(\"I like April too!\");\r         return -1;\r       }\r     });\r   }\r }\r ```\r /",
      "definition": "export class ActionFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the index of the button that was pushed.\r\n     *\r\n     */\r\n    readonly selection?: number;\r\n}\r",
      "jsdoc": "/**\r\n * Returns data about the player results from a modal action\r\n * form.\r\n * @example showActionForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const playerList = world.getPlayers();\r\n *\r\n *   if (playerList.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Test Title\")\r\n *       .body(\"Body text here!\")\r\n *       .button(\"btn 1\")\r\n *       .button(\"btn 2\")\r\n *       .button(\"btn 3\")\r\n *       .button(\"btn 4\")\r\n *       .button(\"btn 5\");\r\n *\r\n *     form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n *       if (result.canceled) {\r\n *         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n *         return -1;\r\n *       } else {\r\n *         log(\"Your result was: \" + result.selection);\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n * @example showFavoriteMonth.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n *\r\n * function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   if (players.length >= 1) {\r\n *     const form = new ActionFormData()\r\n *       .title(\"Months\")\r\n *       .body(\"Choose your favorite month!\")\r\n *       .button(\"January\")\r\n *       .button(\"February\")\r\n *       .button(\"March\")\r\n *       .button(\"April\")\r\n *       .button(\"May\");\r\n *\r\n *     form.show(players[0]).then((response: ActionFormResponse) => {\r\n *       if (response.selection === 3) {\r\n *         log(\"I like April too!\");\r\n *         return -1;\r\n *       }\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "FormResponse",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "actionformresponse",
        "class"
      ],
      "examples": [
        {
          "title": "showActionForm.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const playerList = world.getPlayers();\r\n\n  if (playerList.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Test Title\")\r\n      .body(\"Body text here!\")\r\n      .button(\"btn 1\")\r\n      .button(\"btn 2\")\r\n      .button(\"btn 3\")\r\n      .button(\"btn 4\")\r\n      .button(\"btn 5\");\r\n\n    form.show(playerList[0]).then((result: ActionFormResponse) => {\r\n      if (result.canceled) {\r\n        log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r\n        return -1;\r\n      } else {\r\n        log(\"Your result was: \" + result.selection);\r\n      }\r\n    });\r\n  }\r\n}"
        },
        {
          "title": "showFavoriteMonth.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ActionFormData, ActionFormResponse } from \"@minecraft/server-ui\";\r\n\nfunction showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  if (players.length >= 1) {\r\n    const form = new ActionFormData()\r\n      .title(\"Months\")\r\n      .body(\"Choose your favorite month!\")\r\n      .button(\"January\")\r\n      .button(\"February\")\r\n      .button(\"March\")\r\n      .button(\"April\")\r\n      .button(\"May\");\r\n\n    form.show(players[0]).then((response: ActionFormResponse) => {\r\n      if (response.selection === 3) {\r\n        log(\"I like April too!\");\r\n        return -1;\r\n      }\r\n    });\r\n  }\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.FormResponse": {
      "id": "@minecraft/server-ui.FormResponse",
      "name": "FormResponse",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Base type for a form response.\r /",
      "definition": "export class FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Contains additional details as to why a form was canceled.\r\n     *\r\n     */\r\n    readonly cancelationReason?: FormCancelationReason;\r\n    /**\r\n     * @remarks\r\n     * If true, the form was canceled by the player (e.g., they\r\n     * selected the pop-up X close button).\r\n     *\r\n     */\r\n    readonly canceled: boolean;\r\n}\r",
      "jsdoc": "/**\r\n * Base type for a form response.\r\n */\r",
      "properties": [
        {
          "name": "canceled",
          "type": "boolean",
          "readonly": true,
          "accessibility": "public"
        }
      ],
      "methods": [],
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "formresponse",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-ui.MessageFormData": {
      "id": "@minecraft/server-ui.MessageFormData",
      "name": "MessageFormData",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Builds a simple two-button modal dialog.\r ```typescript\r  function showBasicMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title(\"Message Form Example\")\r     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r     .button1(\"Button 1\")\r     .button2(\"Button 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
      "definition": "export class MessageFormData {\n    /**\r\n     * @remarks\r\n     * Method that sets the body text for the modal form.\r\n     *\r\n     */\r\n    body(bodyText: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * Method that sets the text for the first button of the\r\n     * dialog.\r\n     *\r\n     */\r\n    button1(text: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * This method sets the text for the second button on the\r\n     * dialog.\r\n     *\r\n     */\r\n    button2(text: minecraftserver.RawMessage | string): MessageFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<MessageFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): MessageFormData;\r\n}\r",
      "jsdoc": "/**\r\n * Builds a simple two-button modal dialog.\r\n * @example showBasicMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title(\"Message Form Example\")\r\n *     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n *     .button1(\"Button 1\")\r\n *     .button2(\"Button 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "body",
          "parameters": [],
          "returnType": "MessageFormData",
          "accessibility": "public",
          "signature": "body(bodyText: minecraftserver.RawMessage | string): MessageFormData"
        },
        {
          "name": "button1",
          "parameters": [],
          "returnType": "MessageFormData",
          "accessibility": "public",
          "signature": "button1(text: minecraftserver.RawMessage | string): MessageFormData"
        },
        {
          "name": "button2",
          "parameters": [],
          "returnType": "MessageFormData",
          "accessibility": "public",
          "signature": "button2(text: minecraftserver.RawMessage | string): MessageFormData"
        },
        {
          "name": "show",
          "parameters": [],
          "returnType": "Promise<MessageFormResponse>",
          "accessibility": "public",
          "signature": "show(player: minecraftserver.Player): Promise<MessageFormResponse>"
        },
        {
          "name": "title",
          "parameters": [],
          "returnType": "MessageFormData",
          "accessibility": "public",
          "signature": "title(titleText: minecraftserver.RawMessage | string): MessageFormData"
        }
      ],
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "messageformdata",
        "class"
      ],
      "examples": [
        {
          "title": "showBasicMessageForm.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title(\"Message Form Example\")\r\n    .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n    .button1(\"Button 1\")\r\n    .button2(\"Button 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
        },
        {
          "title": "showTranslatedMessageForm.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showTranslatedMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title({ translate: \"permissions.removeplayer\" })\r\n    .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n    .button1(\"Player 1\")\r\n    .button2(\"Player 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.MessageFormResponse": {
      "id": "@minecraft/server-ui.MessageFormResponse",
      "name": "MessageFormResponse",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Returns data about the player results from a modal message\r form.\r ```typescript\r  function showBasicMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title(\"Message Form Example\")\r     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r     .button1(\"Button 1\")\r     .button2(\"Button 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
      "definition": "export class MessageFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * Returns the index of the button that was pushed.\r\n     *\r\n     */\r\n    readonly selection?: number;\r\n}\r",
      "jsdoc": "/**\r\n * Returns data about the player results from a modal message\r\n * form.\r\n * @example showBasicMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title(\"Message Form Example\")\r\n *     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n *     .button1(\"Button 1\")\r\n *     .button2(\"Button 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n * @example showTranslatedMessageForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showTranslatedMessageForm(\r\n *   log: (message: string, status?: number) => void,\r\n *   targetLocation: DimensionLocation\r\n * ) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const messageForm = new MessageFormData()\r\n *     .title({ translate: \"permissions.removeplayer\" })\r\n *     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n *     .button1(\"Player 1\")\r\n *     .button2(\"Player 2\");\r\n *\r\n *   messageForm\r\n *     .show(players[0])\r\n *     .then((formData: MessageFormResponse) => {\r\n *       // player canceled the form, or another dialog was up and open.\r\n *       if (formData.canceled || formData.selection === undefined) {\r\n *         return;\r\n *       }\r\n *\r\n *       log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "FormResponse",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "messageformresponse",
        "class"
      ],
      "examples": [
        {
          "title": "showBasicMessageForm.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title(\"Message Form Example\")\r\n    .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r\n    .button1(\"Button 1\")\r\n    .button2(\"Button 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
        },
        {
          "title": "showTranslatedMessageForm.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { MessageFormResponse, MessageFormData } from \"@minecraft/server-ui\";\r\n\nfunction showTranslatedMessageForm(\r\n  log: (message: string, status?: number) => void,\r\n  targetLocation: DimensionLocation\r\n) {\r\n  const players = world.getPlayers();\r\n\n  const messageForm = new MessageFormData()\r\n    .title({ translate: \"permissions.removeplayer\" })\r\n    .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r\n    .button1(\"Player 1\")\r\n    .button2(\"Player 2\");\r\n\n  messageForm\r\n    .show(players[0])\r\n    .then((formData: MessageFormResponse) => {\r\n      // player canceled the form, or another dialog was up and open.\r\n      if (formData.canceled || formData.selection === undefined) {\r\n        return;\r\n      }\r\n\n      log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.ModalFormData": {
      "id": "@minecraft/server-ui.ModalFormData",
      "name": "ModalFormData",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Used to create a fully customizable pop-up form for a\r player.\r ```typescript\r  function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r    modalForm.toggle(\"Toggle w/o default\");\r   modalForm.toggle(\"Toggle w/ default\", true);\r    modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r    modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r    modalForm.textField(\"Input w/o default\", \"type text here\");\r   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r    modalForm\r     .show(players[0])\r     .then((formData) => {\r       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
      "definition": "export class ModalFormData {\n    /**\r\n     * @remarks\r\n     * Adds a section divider to the form.\r\n     *\r\n     */\r\n    divider(): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a dropdown with choices to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the dropdown.\r\n     * @param items\r\n     * The selectable items for the dropdown.\r\n     * @param dropdownOptions\r\n     * The optional additional values for the dropdown creation.\r\n     */\r\n    dropdown(\r\n        label: minecraftserver.RawMessage | string,\r\n        items: (minecraftserver.RawMessage | string)[],\r\n        dropdownOptions?: ModalFormDataDropdownOptions,\r\n    ): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a header to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    header(text: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a label to the form.\r\n     *\r\n     * @param text\r\n     * Text to display.\r\n     */\r\n    label(text: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Creates and shows this modal popup form. Returns\r\n     * asynchronously when the player confirms or cancels the\r\n     * dialog.\r\n     *\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @param player\r\n     * Player to show this dialog to.\r\n     * @throws This function can throw errors.\r\n     *\r\n     * {@link minecraftcommon.EngineError}\r\n     *\r\n     * {@link minecraftserver.InvalidEntityError}\r\n     *\r\n     * {@link minecraftserver.RawMessageError}\r\n     */\r\n    show(player: minecraftserver.Player): Promise<ModalFormResponse>;\r\n    /**\r\n     * @remarks\r\n     * Adds a numeric slider to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the slider.\r\n     * @param minimumValue\r\n     * The minimum selectable possible value.\r\n     * @param maximumValue\r\n     * The maximum selectable possible value.\r\n     * @param sliderOptions\r\n     * The optional additional values for the slider creation.\r\n     */\r\n    slider(\r\n        label: minecraftserver.RawMessage | string,\r\n        minimumValue: number,\r\n        maximumValue: number,\r\n        sliderOptions?: ModalFormDataSliderOptions,\r\n    ): ModalFormData;\r\n    submitButton(submitButtonText: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a textbox to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the textfield.\r\n     * @param placeholderText\r\n     * The place holder text to display.\r\n     * @param textFieldOptions\r\n     * The optional additional values for the textfield creation.\r\n     */\r\n    textField(\r\n        label: minecraftserver.RawMessage | string,\r\n        placeholderText: minecraftserver.RawMessage | string,\r\n        textFieldOptions?: ModalFormDataTextFieldOptions,\r\n    ): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * This builder method sets the title for the modal dialog.\r\n     *\r\n     */\r\n    title(titleText: minecraftserver.RawMessage | string): ModalFormData;\r\n    /**\r\n     * @remarks\r\n     * Adds a toggle checkbox button to the form.\r\n     *\r\n     * @param label\r\n     * The label to display for the toggle.\r\n     * @param toggleOptions\r\n     * The optional additional values for the toggle creation.\r\n     */\r\n    toggle(label: minecraftserver.RawMessage | string, toggleOptions?: ModalFormDataToggleOptions): ModalFormData;\r\n}\r",
      "jsdoc": "/**\r\n * Used to create a fully customizable pop-up form for a\r\n * player.\r\n * @example showBasicModalForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ModalFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n *\r\n *   modalForm.toggle(\"Toggle w/o default\");\r\n *   modalForm.toggle(\"Toggle w/ default\", true);\r\n *\r\n *   modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n *   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n *\r\n *   modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n *   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n *\r\n *   modalForm.textField(\"Input w/o default\", \"type text here\");\r\n *   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n *\r\n *   modalForm\r\n *     .show(players[0])\r\n *     .then((formData) => {\r\n *       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [
        {
          "name": "divider",
          "parameters": [],
          "returnType": "ModalFormData",
          "accessibility": "public",
          "signature": "divider(): ModalFormData"
        },
        {
          "name": "header",
          "parameters": [],
          "returnType": "ModalFormData",
          "accessibility": "public",
          "signature": "header(text: minecraftserver.RawMessage | string): ModalFormData"
        },
        {
          "name": "label",
          "parameters": [],
          "returnType": "ModalFormData",
          "accessibility": "public",
          "signature": "label(text: minecraftserver.RawMessage | string): ModalFormData"
        },
        {
          "name": "show",
          "parameters": [],
          "returnType": "Promise<ModalFormResponse>",
          "accessibility": "public",
          "signature": "show(player: minecraftserver.Player): Promise<ModalFormResponse>"
        },
        {
          "name": "submitButton",
          "parameters": [],
          "returnType": "ModalFormData",
          "accessibility": "public",
          "signature": "submitButton(submitButtonText: minecraftserver.RawMessage | string): ModalFormData"
        },
        {
          "name": "title",
          "parameters": [],
          "returnType": "ModalFormData",
          "accessibility": "public",
          "signature": "title(titleText: minecraftserver.RawMessage | string): ModalFormData"
        },
        {
          "name": "toggle",
          "parameters": [],
          "returnType": "ModalFormData",
          "accessibility": "public",
          "signature": "toggle(label: minecraftserver.RawMessage | string, toggleOptions?: ModalFormDataToggleOptions): ModalFormData"
        }
      ],
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdata",
        "class"
      ],
      "examples": [
        {
          "title": "showBasicModalForm.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n\n  modalForm.toggle(\"Toggle w/o default\");\r\n  modalForm.toggle(\"Toggle w/ default\", true);\r\n\n  modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n  modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n\n  modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n  modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n\n  modalForm.textField(\"Input w/o default\", \"type text here\");\r\n  modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n\n  modalForm\r\n    .show(players[0])\r\n    .then((formData) => {\r\n      players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.ModalFormResponse": {
      "id": "@minecraft/server-ui.ModalFormResponse",
      "name": "ModalFormResponse",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Returns data about player responses to a modal form.\r ```typescript\r  function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r    modalForm.toggle(\"Toggle w/o default\");\r   modalForm.toggle(\"Toggle w/ default\", true);\r    modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r    modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r    modalForm.textField(\"Input w/o default\", \"type text here\");\r   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r    modalForm\r     .show(players[0])\r     .then((formData) => {\r       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
      "definition": "export class ModalFormResponse extends FormResponse {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * An ordered set of values based on the order of controls\r\n     * specified by ModalFormData.\r\n     *\r\n     */\r\n    readonly formValues?: (boolean | number | string | undefined)[];\r\n}\r",
      "jsdoc": "/**\r\n * Returns data about player responses to a modal form.\r\n * @example showBasicModalForm.ts\r\n * ```typescript\r\n * import { world, DimensionLocation } from \"@minecraft/server\";\r\n * import { ModalFormData } from \"@minecraft/server-ui\";\r\n *\r\n * function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n *   const players = world.getPlayers();\r\n *\r\n *   const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n *\r\n *   modalForm.toggle(\"Toggle w/o default\");\r\n *   modalForm.toggle(\"Toggle w/ default\", true);\r\n *\r\n *   modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n *   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n *\r\n *   modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n *   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n *\r\n *   modalForm.textField(\"Input w/o default\", \"type text here\");\r\n *   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n *\r\n *   modalForm\r\n *     .show(players[0])\r\n *     .then((formData) => {\r\n *       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n *     })\r\n *     .catch((error: Error) => {\r\n *       log(\"Failed to show form: \" + error);\r\n *       return -1;\r\n *     });\r\n * }\r\n * ```\r\n */\r",
      "properties": [],
      "methods": [],
      "extends": "FormResponse",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformresponse",
        "class"
      ],
      "examples": [
        {
          "title": "showBasicModalForm.ts",
          "code": "import { world, DimensionLocation } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\n\nfunction showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r\n  const players = world.getPlayers();\r\n\n  const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r\n\n  modalForm.toggle(\"Toggle w/o default\");\r\n  modalForm.toggle(\"Toggle w/ default\", true);\r\n\n  modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r\n  modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r\n\n  modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r\n  modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r\n\n  modalForm.textField(\"Input w/o default\", \"type text here\");\r\n  modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r\n\n  modalForm\r\n    .show(players[0])\r\n    .then((formData) => {\r\n      players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r\n    })\r\n    .catch((error: Error) => {\r\n      log(\"Failed to show form: \" + error);\r\n      return -1;\r\n    });\r\n}"
        }
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.UIManager": {
      "id": "@minecraft/server-ui.UIManager",
      "name": "UIManager",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "An ordered set of values based on the order of controls\r specified by ModalFormData.",
      "definition": "export class UIManager {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This function can't be called in read-only mode.\r\n     *\r\n     * @throws This function can throw errors.\r\n     */\r\n    closeAllForms(player: minecraftserver.Player): void;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * An ordered set of values based on the order of controls\r\n     * specified by ModalFormData.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [
        {
          "name": "closeAllForms",
          "parameters": [],
          "returnType": "void",
          "accessibility": "public",
          "signature": "closeAllForms(player: minecraftserver.Player): void"
        }
      ],
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "uimanager",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    },
    "@minecraft/server-ui.ModalFormDataDropdownOptions": {
      "id": "@minecraft/server-ui.ModalFormDataDropdownOptions",
      "name": "ModalFormDataDropdownOptions",
      "type": "interface",
      "module": "@minecraft/server-ui",
      "description": "additional options for the dropdown creation.\r /",
      "definition": "export interface ModalFormDataDropdownOptions {\n    /**\r\n     * @remarks\r\n     * The default selected item index. It will be zero in case of\r\n     * not setting this value.\r\n     *\r\n     */\r\n    defaultValueIndex?: number;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
      "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.dropdown} to provide\r\n * additional options for the dropdown creation.\r\n */\r",
      "properties": [
        {
          "name": "defaultValueIndex",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "tooltip",
          "type": "minecraftserver.RawMessage | string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdatadropdownoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.ModalFormDataSliderOptions": {
      "id": "@minecraft/server-ui.ModalFormDataSliderOptions",
      "name": "ModalFormDataSliderOptions",
      "type": "interface",
      "module": "@minecraft/server-ui",
      "description": "additional options for the slider creation.\r /",
      "definition": "export interface ModalFormDataSliderOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the slider.\r\n     *\r\n     */\r\n    defaultValue?: number;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n    /**\r\n     * @remarks\r\n     * Defines the increment of values that the slider generates\r\n     * when moved. It will be '1' in case of not providing this.\r\n     *\r\n     */\r\n    valueStep?: number;\r\n}\r",
      "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.slider} to provide\r\n * additional options for the slider creation.\r\n */\r",
      "properties": [
        {
          "name": "defaultValue",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "tooltip",
          "type": "minecraftserver.RawMessage | string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "valueStep",
          "type": "number",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdataslideroptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.ModalFormDataTextFieldOptions": {
      "id": "@minecraft/server-ui.ModalFormDataTextFieldOptions",
      "name": "ModalFormDataTextFieldOptions",
      "type": "interface",
      "module": "@minecraft/server-ui",
      "description": "additional options for the textfield creation.\r /",
      "definition": "export interface ModalFormDataTextFieldOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the textfield.\r\n     *\r\n     */\r\n    defaultValue?: string;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
      "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.textField} to provide\r\n * additional options for the textfield creation.\r\n */\r",
      "properties": [
        {
          "name": "defaultValue",
          "type": "string",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "tooltip",
          "type": "minecraftserver.RawMessage | string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdatatextfieldoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.ModalFormDataToggleOptions": {
      "id": "@minecraft/server-ui.ModalFormDataToggleOptions",
      "name": "ModalFormDataToggleOptions",
      "type": "interface",
      "module": "@minecraft/server-ui",
      "description": "additional options for the toggle creation.\r /",
      "definition": "export interface ModalFormDataToggleOptions {\n    /**\r\n     * @remarks\r\n     * The default value for the toggle.\r\n     *\r\n     */\r\n    defaultValue?: boolean;\r\n    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r\n    tooltip?: minecraftserver.RawMessage | string;\r\n}\r",
      "jsdoc": "/**\r\n * An interface that is passed into {@link\r\n * @minecraft/Server-ui.ModalFormData.toggle} to provide\r\n * additional options for the toggle creation.\r\n */\r",
      "properties": [
        {
          "name": "defaultValue",
          "type": "boolean",
          "optional": true,
          "accessibility": "public"
        },
        {
          "name": "tooltip",
          "type": "minecraftserver.RawMessage | string",
          "optional": true,
          "accessibility": "public"
        }
      ],
      "categories": [
        "Interfaces",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdatatoggleoptions",
        "interface"
      ],
      "stability": "stable"
    },
    "@minecraft/server-ui.FormRejectError": {
      "id": "@minecraft/server-ui.FormRejectError",
      "name": "FormRejectError",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "It will show an exclamation icon that will display a tooltip\r if it is hovered.",
      "definition": "export class FormRejectError extends Error {\n    private constructor();\r\n    /**\r\n     * @remarks\r\n     * This property can be read in early-execution mode.\r\n     *\r\n     */\r\n    reason: FormRejectReason;\r\n}\r",
      "jsdoc": "    /**\r\n     * @remarks\r\n     * It will show an exclamation icon that will display a tooltip\r\n     * if it is hovered.\r\n     *\r\n     */\r",
      "properties": [],
      "methods": [],
      "extends": "Error",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "formrejecterror",
        "class"
      ],
      "examples": [],
      "stability": "stable"
    }
  },
  "categories": {
    "Enums": [
      "@minecraft/server.BlockComponentTypes",
      "@minecraft/server.BlockPistonState",
      "@minecraft/server.BlockVolumeIntersection",
      "@minecraft/server.ButtonState",
      "@minecraft/server.CommandPermissionLevel",
      "@minecraft/server.CustomCommandErrorReason",
      "@minecraft/server.CustomCommandParamType",
      "@minecraft/server.CustomCommandSource",
      "@minecraft/server.CustomCommandStatus",
      "@minecraft/server.CustomComponentNameErrorReason",
      "@minecraft/server.Difficulty",
      "@minecraft/server.Direction",
      "@minecraft/server.DisplaySlotId",
      "@minecraft/server.DyeColor",
      "@minecraft/server.EasingType",
      "@minecraft/server.EnchantmentSlot",
      "@minecraft/server.EntityComponentTypes",
      "@minecraft/server.EntityDamageCause",
      "@minecraft/server.EntityInitializationCause",
      "@minecraft/server.EquipmentSlot",
      "@minecraft/server.FluidType",
      "@minecraft/server.GameMode",
      "@minecraft/server.GameRule",
      "@minecraft/server.GraphicsMode",
      "@minecraft/server.HudElement",
      "@minecraft/server.HudVisibility",
      "@minecraft/server.InputButton",
      "@minecraft/server.InputMode",
      "@minecraft/server.InputPermissionCategory",
      "@minecraft/server.ItemComponentTypes",
      "@minecraft/server.ItemLockMode",
      "@minecraft/server.LiquidType",
      "@minecraft/server.MemoryTier",
      "@minecraft/server.MoonPhase",
      "@minecraft/server.MovementType",
      "@minecraft/server.NamespaceNameErrorReason",
      "@minecraft/server.ObjectiveSortOrder",
      "@minecraft/server.PaletteColor",
      "@minecraft/server.PlatformType",
      "@minecraft/server.PlayerInventoryType",
      "@minecraft/server.PlayerPermissionLevel",
      "@minecraft/server.ScoreboardIdentityType",
      "@minecraft/server.ScriptEventSource",
      "@minecraft/server.SignSide",
      "@minecraft/server.StickyType",
      "@minecraft/server.StructureAnimationMode",
      "@minecraft/server.StructureMirrorAxis",
      "@minecraft/server.StructureRotation",
      "@minecraft/server.StructureSaveMode",
      "@minecraft/server.TimeOfDay",
      "@minecraft/server.TintMethod",
      "@minecraft/server.WeatherType",
      "@minecraft/server-net.HttpRequestMethod",
      "@minecraft/server-net.PacketId",
      "@minecraft/server-ui.FormCancelationReason",
      "@minecraft/server-ui.FormRejectReason"
    ],
    "Server": [
      "@minecraft/server.BlockComponentTypes",
      "@minecraft/server.BlockPistonState",
      "@minecraft/server.BlockVolumeIntersection",
      "@minecraft/server.ButtonState",
      "@minecraft/server.CommandPermissionLevel",
      "@minecraft/server.CustomCommandErrorReason",
      "@minecraft/server.CustomCommandParamType",
      "@minecraft/server.CustomCommandSource",
      "@minecraft/server.CustomCommandStatus",
      "@minecraft/server.CustomComponentNameErrorReason",
      "@minecraft/server.Difficulty",
      "@minecraft/server.Direction",
      "@minecraft/server.DisplaySlotId",
      "@minecraft/server.DyeColor",
      "@minecraft/server.EasingType",
      "@minecraft/server.EnchantmentSlot",
      "@minecraft/server.EntityComponentTypes",
      "@minecraft/server.EntityDamageCause",
      "@minecraft/server.EntityInitializationCause",
      "@minecraft/server.EquipmentSlot",
      "@minecraft/server.FluidType",
      "@minecraft/server.GameMode",
      "@minecraft/server.GameRule",
      "@minecraft/server.GraphicsMode",
      "@minecraft/server.HudElement",
      "@minecraft/server.HudVisibility",
      "@minecraft/server.InputButton",
      "@minecraft/server.InputMode",
      "@minecraft/server.InputPermissionCategory",
      "@minecraft/server.ItemComponentTypes",
      "@minecraft/server.ItemLockMode",
      "@minecraft/server.LiquidType",
      "@minecraft/server.MemoryTier",
      "@minecraft/server.MoonPhase",
      "@minecraft/server.MovementType",
      "@minecraft/server.NamespaceNameErrorReason",
      "@minecraft/server.ObjectiveSortOrder",
      "@minecraft/server.PaletteColor",
      "@minecraft/server.PlatformType",
      "@minecraft/server.PlayerInventoryType",
      "@minecraft/server.PlayerPermissionLevel",
      "@minecraft/server.ScoreboardIdentityType",
      "@minecraft/server.ScriptEventSource",
      "@minecraft/server.SignSide",
      "@minecraft/server.StickyType",
      "@minecraft/server.StructureAnimationMode",
      "@minecraft/server.StructureMirrorAxis",
      "@minecraft/server.StructureRotation",
      "@minecraft/server.StructureSaveMode",
      "@minecraft/server.TimeOfDay",
      "@minecraft/server.TintMethod",
      "@minecraft/server.WeatherType",
      "@minecraft/server.BlockComponentTypeMap",
      "@minecraft/server.EntityComponentTypeMap",
      "@minecraft/server.ItemComponentTypeMap",
      "@minecraft/server.Block",
      "@minecraft/server.BlockComponent",
      "@minecraft/server.BlockComponentEntityFallOnEvent",
      "@minecraft/server.BlockComponentOnPlaceEvent",
      "@minecraft/server.BlockComponentPlayerBreakEvent",
      "@minecraft/server.BlockComponentPlayerInteractEvent",
      "@minecraft/server.BlockComponentPlayerPlaceBeforeEvent",
      "@minecraft/server.BlockComponentRandomTickEvent",
      "@minecraft/server.BlockComponentRegistry",
      "@minecraft/server.BlockComponentStepOffEvent",
      "@minecraft/server.BlockComponentStepOnEvent",
      "@minecraft/server.BlockComponentTickEvent",
      "@minecraft/server.BlockCustomComponentInstance",
      "@minecraft/server.BlockEvent",
      "@minecraft/server.BlockExplodeAfterEvent",
      "@minecraft/server.BlockExplodeAfterEventSignal",
      "@minecraft/server.BlockFluidContainerComponent",
      "@minecraft/server.BlockInventoryComponent",
      "@minecraft/server.BlockLocationIterator",
      "@minecraft/server.BlockMapColorComponent",
      "@minecraft/server.BlockMovableComponent",
      "@minecraft/server.BlockPermutation",
      "@minecraft/server.BlockPistonComponent",
      "@minecraft/server.BlockRecordPlayerComponent",
      "@minecraft/server.BlockSignComponent",
      "@minecraft/server.BlockStates",
      "@minecraft/server.BlockStateType",
      "@minecraft/server.BlockType",
      "@minecraft/server.BlockTypes",
      "@minecraft/server.BlockVolume",
      "@minecraft/server.BlockVolumeBase",
      "@minecraft/server.ButtonPushAfterEvent",
      "@minecraft/server.ButtonPushAfterEventSignal",
      "@minecraft/server.Camera",
      "@minecraft/server.ClientSystemInfo",
      "@minecraft/server.CommandResult",
      "@minecraft/server.Component",
      "@minecraft/server.Container",
      "@minecraft/server.ContainerSlot",
      "@minecraft/server.CustomCommandOrigin",
      "@minecraft/server.CustomCommandRegistry",
      "@minecraft/server.CustomComponentParameters",
      "@minecraft/server.DataDrivenEntityTriggerAfterEvent",
      "@minecraft/server.DataDrivenEntityTriggerAfterEventSignal",
      "@minecraft/server.Dimension",
      "@minecraft/server.DimensionType",
      "@minecraft/server.DimensionTypes",
      "@minecraft/server.Effect",
      "@minecraft/server.EffectAddAfterEvent",
      "@minecraft/server.EffectAddAfterEventSignal",
      "@minecraft/server.EffectAddBeforeEvent",
      "@minecraft/server.EffectAddBeforeEventSignal",
      "@minecraft/server.EffectType",
      "@minecraft/server.EffectTypes",
      "@minecraft/server.EnchantmentType",
      "@minecraft/server.EnchantmentTypes",
      "@minecraft/server.Entity",
      "@minecraft/server.EntityAddRiderComponent",
      "@minecraft/server.EntityAgeableComponent",
      "@minecraft/server.EntityAttributeComponent",
      "@minecraft/server.EntityBaseMovementComponent",
      "@minecraft/server.EntityBreathableComponent",
      "@minecraft/server.EntityCanClimbComponent",
      "@minecraft/server.EntityCanFlyComponent",
      "@minecraft/server.EntityCanPowerJumpComponent",
      "@minecraft/server.EntityColor2Component",
      "@minecraft/server.EntityColorComponent",
      "@minecraft/server.EntityComponent",
      "@minecraft/server.EntityDefinitionFeedItem",
      "@minecraft/server.EntityDieAfterEvent",
      "@minecraft/server.EntityDieAfterEventSignal",
      "@minecraft/server.EntityEquippableComponent",
      "@minecraft/server.EntityExhaustionComponent",
      "@minecraft/server.EntityFireImmuneComponent",
      "@minecraft/server.EntityFloatsInLiquidComponent",
      "@minecraft/server.EntityFlyingSpeedComponent",
      "@minecraft/server.EntityFrictionModifierComponent",
      "@minecraft/server.EntityHealableComponent",
      "@minecraft/server.EntityHealthChangedAfterEvent",
      "@minecraft/server.EntityHealthChangedAfterEventSignal",
      "@minecraft/server.EntityHealthComponent",
      "@minecraft/server.EntityHitBlockAfterEvent",
      "@minecraft/server.EntityHitBlockAfterEventSignal",
      "@minecraft/server.EntityHitEntityAfterEvent",
      "@minecraft/server.EntityHitEntityAfterEventSignal",
      "@minecraft/server.EntityHungerComponent",
      "@minecraft/server.EntityHurtAfterEvent",
      "@minecraft/server.EntityHurtAfterEventSignal",
      "@minecraft/server.EntityInventoryComponent",
      "@minecraft/server.EntityIsBabyComponent",
      "@minecraft/server.EntityIsChargedComponent",
      "@minecraft/server.EntityIsChestedComponent",
      "@minecraft/server.EntityIsDyeableComponent",
      "@minecraft/server.EntityIsHiddenWhenInvisibleComponent",
      "@minecraft/server.EntityIsIgnitedComponent",
      "@minecraft/server.EntityIsIllagerCaptainComponent",
      "@minecraft/server.EntityIsSaddledComponent",
      "@minecraft/server.EntityIsShakingComponent",
      "@minecraft/server.EntityIsShearedComponent",
      "@minecraft/server.EntityIsStackableComponent",
      "@minecraft/server.EntityIsStunnedComponent",
      "@minecraft/server.EntityIsTamedComponent",
      "@minecraft/server.EntityItemComponent",
      "@minecraft/server.EntityLavaMovementComponent",
      "@minecraft/server.EntityLeashableComponent",
      "@minecraft/server.EntityLoadAfterEvent",
      "@minecraft/server.EntityLoadAfterEventSignal",
      "@minecraft/server.EntityMarkVariantComponent",
      "@minecraft/server.EntityMovementAmphibiousComponent",
      "@minecraft/server.EntityMovementBasicComponent",
      "@minecraft/server.EntityMovementComponent",
      "@minecraft/server.EntityMovementFlyComponent",
      "@minecraft/server.EntityMovementGenericComponent",
      "@minecraft/server.EntityMovementGlideComponent",
      "@minecraft/server.EntityMovementHoverComponent",
      "@minecraft/server.EntityMovementJumpComponent",
      "@minecraft/server.EntityMovementSkipComponent",
      "@minecraft/server.EntityMovementSwayComponent",
      "@minecraft/server.EntityNavigationClimbComponent",
      "@minecraft/server.EntityNavigationComponent",
      "@minecraft/server.EntityNavigationFloatComponent",
      "@minecraft/server.EntityNavigationFlyComponent",
      "@minecraft/server.EntityNavigationGenericComponent",
      "@minecraft/server.EntityNavigationHoverComponent",
      "@minecraft/server.EntityNavigationWalkComponent",
      "@minecraft/server.EntityOnFireComponent",
      "@minecraft/server.EntityProjectileComponent",
      "@minecraft/server.EntityPushThroughComponent",
      "@minecraft/server.EntityRemoveAfterEvent",
      "@minecraft/server.EntityRemoveAfterEventSignal",
      "@minecraft/server.EntityRemoveBeforeEvent",
      "@minecraft/server.EntityRemoveBeforeEventSignal",
      "@minecraft/server.EntityRideableComponent",
      "@minecraft/server.EntityRidingComponent",
      "@minecraft/server.EntitySaturationComponent",
      "@minecraft/server.EntityScaleComponent",
      "@minecraft/server.EntitySkinIdComponent",
      "@minecraft/server.EntitySpawnAfterEvent",
      "@minecraft/server.EntitySpawnAfterEventSignal",
      "@minecraft/server.EntityStrengthComponent",
      "@minecraft/server.EntityTameableComponent",
      "@minecraft/server.EntityTameMountComponent",
      "@minecraft/server.EntityType",
      "@minecraft/server.EntityTypeFamilyComponent",
      "@minecraft/server.EntityTypes",
      "@minecraft/server.EntityUnderwaterMovementComponent",
      "@minecraft/server.EntityVariantComponent",
      "@minecraft/server.EntityWantsJockeyComponent",
      "@minecraft/server.ExplosionAfterEvent",
      "@minecraft/server.ExplosionAfterEventSignal",
      "@minecraft/server.ExplosionBeforeEvent",
      "@minecraft/server.ExplosionBeforeEventSignal",
      "@minecraft/server.FeedItem",
      "@minecraft/server.FeedItemEffect",
      "@minecraft/server.FluidContainer",
      "@minecraft/server.GameRuleChangeAfterEvent",
      "@minecraft/server.GameRuleChangeAfterEventSignal",
      "@minecraft/server.GameRules",
      "@minecraft/server.InputInfo",
      "@minecraft/server.ItemCompleteUseAfterEvent",
      "@minecraft/server.ItemCompleteUseAfterEventSignal",
      "@minecraft/server.ItemCompleteUseEvent",
      "@minecraft/server.ItemComponent",
      "@minecraft/server.ItemComponentBeforeDurabilityDamageEvent",
      "@minecraft/server.ItemComponentCompleteUseEvent",
      "@minecraft/server.ItemComponentConsumeEvent",
      "@minecraft/server.ItemComponentHitEntityEvent",
      "@minecraft/server.ItemComponentMineBlockEvent",
      "@minecraft/server.ItemComponentRegistry",
      "@minecraft/server.ItemComponentUseEvent",
      "@minecraft/server.ItemComponentUseOnEvent",
      "@minecraft/server.ItemCompostableComponent",
      "@minecraft/server.ItemCooldownComponent",
      "@minecraft/server.ItemCustomComponentInstance",
      "@minecraft/server.ItemDurabilityComponent",
      "@minecraft/server.ItemDyeableComponent",
      "@minecraft/server.ItemEnchantableComponent",
      "@minecraft/server.ItemFoodComponent",
      "@minecraft/server.ItemReleaseUseAfterEvent",
      "@minecraft/server.ItemReleaseUseAfterEventSignal",
      "@minecraft/server.ItemStack",
      "@minecraft/server.ItemStartUseAfterEvent",
      "@minecraft/server.ItemStartUseAfterEventSignal",
      "@minecraft/server.ItemStartUseOnAfterEvent",
      "@minecraft/server.ItemStartUseOnAfterEventSignal",
      "@minecraft/server.ItemStopUseAfterEvent",
      "@minecraft/server.ItemStopUseAfterEventSignal",
      "@minecraft/server.ItemStopUseOnAfterEvent",
      "@minecraft/server.ItemStopUseOnAfterEventSignal",
      "@minecraft/server.ItemType",
      "@minecraft/server.ItemTypes",
      "@minecraft/server.ItemUseAfterEvent",
      "@minecraft/server.ItemUseAfterEventSignal",
      "@minecraft/server.ItemUseBeforeEvent",
      "@minecraft/server.ItemUseBeforeEventSignal",
      "@minecraft/server.ItemUseOnEvent",
      "@minecraft/server.LeverActionAfterEvent",
      "@minecraft/server.LeverActionAfterEventSignal",
      "@minecraft/server.ListBlockVolume",
      "@minecraft/server.MolangVariableMap",
      "@minecraft/server.PistonActivateAfterEvent",
      "@minecraft/server.PistonActivateAfterEventSignal",
      "@minecraft/server.Player",
      "@minecraft/server.PlayerBreakBlockAfterEvent",
      "@minecraft/server.PlayerBreakBlockAfterEventSignal",
      "@minecraft/server.PlayerBreakBlockBeforeEvent",
      "@minecraft/server.PlayerBreakBlockBeforeEventSignal",
      "@minecraft/server.PlayerButtonInputAfterEvent",
      "@minecraft/server.PlayerButtonInputAfterEventSignal",
      "@minecraft/server.PlayerCursorInventoryComponent",
      "@minecraft/server.PlayerDimensionChangeAfterEvent",
      "@minecraft/server.PlayerDimensionChangeAfterEventSignal",
      "@minecraft/server.PlayerEmoteAfterEvent",
      "@minecraft/server.PlayerEmoteAfterEventSignal",
      "@minecraft/server.PlayerGameModeChangeAfterEvent",
      "@minecraft/server.PlayerGameModeChangeAfterEventSignal",
      "@minecraft/server.PlayerGameModeChangeBeforeEvent",
      "@minecraft/server.PlayerGameModeChangeBeforeEventSignal",
      "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEvent",
      "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEventSignal",
      "@minecraft/server.PlayerInputModeChangeAfterEvent",
      "@minecraft/server.PlayerInputModeChangeAfterEventSignal",
      "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEvent",
      "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEventSignal",
      "@minecraft/server.PlayerInputPermissions",
      "@minecraft/server.PlayerInteractWithBlockAfterEvent",
      "@minecraft/server.PlayerInteractWithBlockAfterEventSignal",
      "@minecraft/server.PlayerInteractWithBlockBeforeEvent",
      "@minecraft/server.PlayerInteractWithBlockBeforeEventSignal",
      "@minecraft/server.PlayerInteractWithEntityAfterEvent",
      "@minecraft/server.PlayerInteractWithEntityAfterEventSignal",
      "@minecraft/server.PlayerInteractWithEntityBeforeEvent",
      "@minecraft/server.PlayerInteractWithEntityBeforeEventSignal",
      "@minecraft/server.PlayerInventoryItemChangeAfterEvent",
      "@minecraft/server.PlayerInventoryItemChangeAfterEventSignal",
      "@minecraft/server.PlayerJoinAfterEvent",
      "@minecraft/server.PlayerJoinAfterEventSignal",
      "@minecraft/server.PlayerLeaveAfterEvent",
      "@minecraft/server.PlayerLeaveAfterEventSignal",
      "@minecraft/server.PlayerLeaveBeforeEvent",
      "@minecraft/server.PlayerLeaveBeforeEventSignal",
      "@minecraft/server.PlayerPlaceBlockAfterEvent",
      "@minecraft/server.PlayerPlaceBlockAfterEventSignal",
      "@minecraft/server.PlayerSpawnAfterEvent",
      "@minecraft/server.PlayerSpawnAfterEventSignal",
      "@minecraft/server.PressurePlatePopAfterEvent",
      "@minecraft/server.PressurePlatePopAfterEventSignal",
      "@minecraft/server.PressurePlatePushAfterEvent",
      "@minecraft/server.PressurePlatePushAfterEventSignal",
      "@minecraft/server.ProjectileHitBlockAfterEvent",
      "@minecraft/server.ProjectileHitBlockAfterEventSignal",
      "@minecraft/server.ProjectileHitEntityAfterEvent",
      "@minecraft/server.ProjectileHitEntityAfterEventSignal",
      "@minecraft/server.Scoreboard",
      "@minecraft/server.ScoreboardIdentity",
      "@minecraft/server.ScoreboardObjective",
      "@minecraft/server.ScoreboardScoreInfo",
      "@minecraft/server.ScreenDisplay",
      "@minecraft/server.ScriptEventCommandMessageAfterEvent",
      "@minecraft/server.ScriptEventCommandMessageAfterEventSignal",
      "@minecraft/server.Seat",
      "@minecraft/server.ShutdownBeforeEventSignal",
      "@minecraft/server.ShutdownEvent",
      "@minecraft/server.StartupBeforeEventSignal",
      "@minecraft/server.StartupEvent",
      "@minecraft/server.Structure",
      "@minecraft/server.StructureManager",
      "@minecraft/server.System",
      "@minecraft/server.SystemAfterEvents",
      "@minecraft/server.SystemBeforeEvents",
      "@minecraft/server.SystemInfo",
      "@minecraft/server.TargetBlockHitAfterEvent",
      "@minecraft/server.TargetBlockHitAfterEventSignal",
      "@minecraft/server.Trigger",
      "@minecraft/server.TripWireTripAfterEvent",
      "@minecraft/server.TripWireTripAfterEventSignal",
      "@minecraft/server.WeatherChangeAfterEvent",
      "@minecraft/server.WeatherChangeAfterEventSignal",
      "@minecraft/server.WeatherChangeBeforeEvent",
      "@minecraft/server.WeatherChangeBeforeEventSignal",
      "@minecraft/server.World",
      "@minecraft/server.WorldAfterEvents",
      "@minecraft/server.WorldBeforeEvents",
      "@minecraft/server.WorldLoadAfterEvent",
      "@minecraft/server.WorldLoadAfterEventSignal",
      "@minecraft/server.BlockBoundingBox",
      "@minecraft/server.BlockCustomComponent",
      "@minecraft/server.BlockEventOptions",
      "@minecraft/server.BlockFillOptions",
      "@minecraft/server.BlockFilter",
      "@minecraft/server.BlockHitInformation",
      "@minecraft/server.BlockRaycastHit",
      "@minecraft/server.BlockRaycastOptions",
      "@minecraft/server.CameraFadeOptions",
      "@minecraft/server.CameraFadeTimeOptions",
      "@minecraft/server.CameraFixedBoomOptions",
      "@minecraft/server.CameraSetFacingOptions",
      "@minecraft/server.CameraSetLocationOptions",
      "@minecraft/server.CameraSetPosOptions",
      "@minecraft/server.CameraSetRotOptions",
      "@minecraft/server.CameraTargetOptions",
      "@minecraft/server.CustomCommand",
      "@minecraft/server.CustomCommandParameter",
      "@minecraft/server.CustomCommandResult",
      "@minecraft/server.DefinitionModifier",
      "@minecraft/server.DimensionLocation",
      "@minecraft/server.EaseOptions",
      "@minecraft/server.Enchantment",
      "@minecraft/server.EntityApplyDamageByProjectileOptions",
      "@minecraft/server.EntityApplyDamageOptions",
      "@minecraft/server.EntityDamageSource",
      "@minecraft/server.EntityDataDrivenTriggerEventOptions",
      "@minecraft/server.EntityEffectOptions",
      "@minecraft/server.EntityEventOptions",
      "@minecraft/server.EntityFilter",
      "@minecraft/server.EntityHitInformation",
      "@minecraft/server.EntityQueryOptions",
      "@minecraft/server.EntityQueryPropertyOptions",
      "@minecraft/server.EntityQueryScoreOptions",
      "@minecraft/server.EntityRaycastHit",
      "@minecraft/server.EntityRaycastOptions",
      "@minecraft/server.EqualsComparison",
      "@minecraft/server.ExplosionOptions",
      "@minecraft/server.GreaterThanComparison",
      "@minecraft/server.GreaterThanOrEqualsComparison",
      "@minecraft/server.HotbarEventOptions",
      "@minecraft/server.InputEventOptions",
      "@minecraft/server.InventoryItemEventOptions",
      "@minecraft/server.ItemCustomComponent",
      "@minecraft/server.JigsawPlaceOptions",
      "@minecraft/server.JigsawStructurePlaceOptions",
      "@minecraft/server.LessThanComparison",
      "@minecraft/server.LessThanOrEqualsComparison",
      "@minecraft/server.MusicOptions",
      "@minecraft/server.NotEqualsComparison",
      "@minecraft/server.PlayAnimationOptions",
      "@minecraft/server.PlayerSoundOptions",
      "@minecraft/server.ProjectileShootOptions",
      "@minecraft/server.RangeComparison",
      "@minecraft/server.RawMessage",
      "@minecraft/server.RawMessageScore",
      "@minecraft/server.RawText",
      "@minecraft/server.RGB",
      "@minecraft/server.RGBA",
      "@minecraft/server.ScoreboardObjectiveDisplayOptions",
      "@minecraft/server.ScriptEventMessageFilterOptions",
      "@minecraft/server.SpawnEntityOptions",
      "@minecraft/server.StructureCreateOptions",
      "@minecraft/server.StructurePlaceOptions",
      "@minecraft/server.TeleportOptions",
      "@minecraft/server.TitleDisplayOptions",
      "@minecraft/server.Vector2",
      "@minecraft/server.Vector3",
      "@minecraft/server.VectorXZ",
      "@minecraft/server.WorldSoundOptions",
      "@minecraft/server.BlockCustomComponentAlreadyRegisteredError",
      "@minecraft/server.BlockCustomComponentReloadNewComponentError",
      "@minecraft/server.BlockCustomComponentReloadNewEventError",
      "@minecraft/server.BlockCustomComponentReloadVersionError",
      "@minecraft/server.CommandError",
      "@minecraft/server.ContainerRulesError",
      "@minecraft/server.CustomCommandError",
      "@minecraft/server.CustomComponentInvalidRegistryError",
      "@minecraft/server.CustomComponentNameError",
      "@minecraft/server.EnchantmentLevelOutOfBoundsError",
      "@minecraft/server.EnchantmentTypeNotCompatibleError",
      "@minecraft/server.EnchantmentTypeUnknownIdError",
      "@minecraft/server.EntitySpawnError",
      "@minecraft/server.InvalidContainerError",
      "@minecraft/server.InvalidContainerSlotError",
      "@minecraft/server.InvalidEntityError",
      "@minecraft/server.InvalidIteratorError",
      "@minecraft/server.InvalidStructureError",
      "@minecraft/server.ItemCustomComponentAlreadyRegisteredError",
      "@minecraft/server.ItemCustomComponentReloadNewComponentError",
      "@minecraft/server.ItemCustomComponentReloadNewEventError",
      "@minecraft/server.ItemCustomComponentReloadVersionError",
      "@minecraft/server.LocationInUnloadedChunkError",
      "@minecraft/server.LocationOutOfWorldBoundariesError",
      "@minecraft/server.NamespaceNameError",
      "@minecraft/server.PlaceJigsawError",
      "@minecraft/server.RawMessageError",
      "@minecraft/server.UnloadedChunksError"
    ],
    "Types": [
      "@minecraft/server.BlockComponentTypeMap",
      "@minecraft/server.EntityComponentTypeMap",
      "@minecraft/server.ItemComponentTypeMap"
    ],
    "Classes": [
      "@minecraft/server.Block",
      "@minecraft/server.BlockComponent",
      "@minecraft/server.BlockComponentEntityFallOnEvent",
      "@minecraft/server.BlockComponentOnPlaceEvent",
      "@minecraft/server.BlockComponentPlayerBreakEvent",
      "@minecraft/server.BlockComponentPlayerInteractEvent",
      "@minecraft/server.BlockComponentPlayerPlaceBeforeEvent",
      "@minecraft/server.BlockComponentRandomTickEvent",
      "@minecraft/server.BlockComponentRegistry",
      "@minecraft/server.BlockComponentStepOffEvent",
      "@minecraft/server.BlockComponentStepOnEvent",
      "@minecraft/server.BlockComponentTickEvent",
      "@minecraft/server.BlockCustomComponentInstance",
      "@minecraft/server.BlockEvent",
      "@minecraft/server.BlockExplodeAfterEvent",
      "@minecraft/server.BlockExplodeAfterEventSignal",
      "@minecraft/server.BlockFluidContainerComponent",
      "@minecraft/server.BlockInventoryComponent",
      "@minecraft/server.BlockLocationIterator",
      "@minecraft/server.BlockMapColorComponent",
      "@minecraft/server.BlockMovableComponent",
      "@minecraft/server.BlockPermutation",
      "@minecraft/server.BlockPistonComponent",
      "@minecraft/server.BlockRecordPlayerComponent",
      "@minecraft/server.BlockSignComponent",
      "@minecraft/server.BlockStates",
      "@minecraft/server.BlockStateType",
      "@minecraft/server.BlockType",
      "@minecraft/server.BlockTypes",
      "@minecraft/server.BlockVolume",
      "@minecraft/server.BlockVolumeBase",
      "@minecraft/server.ButtonPushAfterEvent",
      "@minecraft/server.ButtonPushAfterEventSignal",
      "@minecraft/server.Camera",
      "@minecraft/server.ClientSystemInfo",
      "@minecraft/server.CommandResult",
      "@minecraft/server.Component",
      "@minecraft/server.Container",
      "@minecraft/server.ContainerSlot",
      "@minecraft/server.CustomCommandOrigin",
      "@minecraft/server.CustomCommandRegistry",
      "@minecraft/server.CustomComponentParameters",
      "@minecraft/server.DataDrivenEntityTriggerAfterEvent",
      "@minecraft/server.DataDrivenEntityTriggerAfterEventSignal",
      "@minecraft/server.Dimension",
      "@minecraft/server.DimensionType",
      "@minecraft/server.DimensionTypes",
      "@minecraft/server.Effect",
      "@minecraft/server.EffectAddAfterEvent",
      "@minecraft/server.EffectAddAfterEventSignal",
      "@minecraft/server.EffectAddBeforeEvent",
      "@minecraft/server.EffectAddBeforeEventSignal",
      "@minecraft/server.EffectType",
      "@minecraft/server.EffectTypes",
      "@minecraft/server.EnchantmentType",
      "@minecraft/server.EnchantmentTypes",
      "@minecraft/server.Entity",
      "@minecraft/server.EntityAddRiderComponent",
      "@minecraft/server.EntityAgeableComponent",
      "@minecraft/server.EntityAttributeComponent",
      "@minecraft/server.EntityBaseMovementComponent",
      "@minecraft/server.EntityBreathableComponent",
      "@minecraft/server.EntityCanClimbComponent",
      "@minecraft/server.EntityCanFlyComponent",
      "@minecraft/server.EntityCanPowerJumpComponent",
      "@minecraft/server.EntityColor2Component",
      "@minecraft/server.EntityColorComponent",
      "@minecraft/server.EntityComponent",
      "@minecraft/server.EntityDefinitionFeedItem",
      "@minecraft/server.EntityDieAfterEvent",
      "@minecraft/server.EntityDieAfterEventSignal",
      "@minecraft/server.EntityEquippableComponent",
      "@minecraft/server.EntityExhaustionComponent",
      "@minecraft/server.EntityFireImmuneComponent",
      "@minecraft/server.EntityFloatsInLiquidComponent",
      "@minecraft/server.EntityFlyingSpeedComponent",
      "@minecraft/server.EntityFrictionModifierComponent",
      "@minecraft/server.EntityHealableComponent",
      "@minecraft/server.EntityHealthChangedAfterEvent",
      "@minecraft/server.EntityHealthChangedAfterEventSignal",
      "@minecraft/server.EntityHealthComponent",
      "@minecraft/server.EntityHitBlockAfterEvent",
      "@minecraft/server.EntityHitBlockAfterEventSignal",
      "@minecraft/server.EntityHitEntityAfterEvent",
      "@minecraft/server.EntityHitEntityAfterEventSignal",
      "@minecraft/server.EntityHungerComponent",
      "@minecraft/server.EntityHurtAfterEvent",
      "@minecraft/server.EntityHurtAfterEventSignal",
      "@minecraft/server.EntityInventoryComponent",
      "@minecraft/server.EntityIsBabyComponent",
      "@minecraft/server.EntityIsChargedComponent",
      "@minecraft/server.EntityIsChestedComponent",
      "@minecraft/server.EntityIsDyeableComponent",
      "@minecraft/server.EntityIsHiddenWhenInvisibleComponent",
      "@minecraft/server.EntityIsIgnitedComponent",
      "@minecraft/server.EntityIsIllagerCaptainComponent",
      "@minecraft/server.EntityIsSaddledComponent",
      "@minecraft/server.EntityIsShakingComponent",
      "@minecraft/server.EntityIsShearedComponent",
      "@minecraft/server.EntityIsStackableComponent",
      "@minecraft/server.EntityIsStunnedComponent",
      "@minecraft/server.EntityIsTamedComponent",
      "@minecraft/server.EntityItemComponent",
      "@minecraft/server.EntityLavaMovementComponent",
      "@minecraft/server.EntityLeashableComponent",
      "@minecraft/server.EntityLoadAfterEvent",
      "@minecraft/server.EntityLoadAfterEventSignal",
      "@minecraft/server.EntityMarkVariantComponent",
      "@minecraft/server.EntityMovementAmphibiousComponent",
      "@minecraft/server.EntityMovementBasicComponent",
      "@minecraft/server.EntityMovementComponent",
      "@minecraft/server.EntityMovementFlyComponent",
      "@minecraft/server.EntityMovementGenericComponent",
      "@minecraft/server.EntityMovementGlideComponent",
      "@minecraft/server.EntityMovementHoverComponent",
      "@minecraft/server.EntityMovementJumpComponent",
      "@minecraft/server.EntityMovementSkipComponent",
      "@minecraft/server.EntityMovementSwayComponent",
      "@minecraft/server.EntityNavigationClimbComponent",
      "@minecraft/server.EntityNavigationComponent",
      "@minecraft/server.EntityNavigationFloatComponent",
      "@minecraft/server.EntityNavigationFlyComponent",
      "@minecraft/server.EntityNavigationGenericComponent",
      "@minecraft/server.EntityNavigationHoverComponent",
      "@minecraft/server.EntityNavigationWalkComponent",
      "@minecraft/server.EntityOnFireComponent",
      "@minecraft/server.EntityProjectileComponent",
      "@minecraft/server.EntityPushThroughComponent",
      "@minecraft/server.EntityRemoveAfterEvent",
      "@minecraft/server.EntityRemoveAfterEventSignal",
      "@minecraft/server.EntityRemoveBeforeEvent",
      "@minecraft/server.EntityRemoveBeforeEventSignal",
      "@minecraft/server.EntityRideableComponent",
      "@minecraft/server.EntityRidingComponent",
      "@minecraft/server.EntitySaturationComponent",
      "@minecraft/server.EntityScaleComponent",
      "@minecraft/server.EntitySkinIdComponent",
      "@minecraft/server.EntitySpawnAfterEvent",
      "@minecraft/server.EntitySpawnAfterEventSignal",
      "@minecraft/server.EntityStrengthComponent",
      "@minecraft/server.EntityTameableComponent",
      "@minecraft/server.EntityTameMountComponent",
      "@minecraft/server.EntityType",
      "@minecraft/server.EntityTypeFamilyComponent",
      "@minecraft/server.EntityTypes",
      "@minecraft/server.EntityUnderwaterMovementComponent",
      "@minecraft/server.EntityVariantComponent",
      "@minecraft/server.EntityWantsJockeyComponent",
      "@minecraft/server.ExplosionAfterEvent",
      "@minecraft/server.ExplosionAfterEventSignal",
      "@minecraft/server.ExplosionBeforeEvent",
      "@minecraft/server.ExplosionBeforeEventSignal",
      "@minecraft/server.FeedItem",
      "@minecraft/server.FeedItemEffect",
      "@minecraft/server.FluidContainer",
      "@minecraft/server.GameRuleChangeAfterEvent",
      "@minecraft/server.GameRuleChangeAfterEventSignal",
      "@minecraft/server.GameRules",
      "@minecraft/server.InputInfo",
      "@minecraft/server.ItemCompleteUseAfterEvent",
      "@minecraft/server.ItemCompleteUseAfterEventSignal",
      "@minecraft/server.ItemCompleteUseEvent",
      "@minecraft/server.ItemComponent",
      "@minecraft/server.ItemComponentBeforeDurabilityDamageEvent",
      "@minecraft/server.ItemComponentCompleteUseEvent",
      "@minecraft/server.ItemComponentConsumeEvent",
      "@minecraft/server.ItemComponentHitEntityEvent",
      "@minecraft/server.ItemComponentMineBlockEvent",
      "@minecraft/server.ItemComponentRegistry",
      "@minecraft/server.ItemComponentUseEvent",
      "@minecraft/server.ItemComponentUseOnEvent",
      "@minecraft/server.ItemCompostableComponent",
      "@minecraft/server.ItemCooldownComponent",
      "@minecraft/server.ItemCustomComponentInstance",
      "@minecraft/server.ItemDurabilityComponent",
      "@minecraft/server.ItemDyeableComponent",
      "@minecraft/server.ItemEnchantableComponent",
      "@minecraft/server.ItemFoodComponent",
      "@minecraft/server.ItemReleaseUseAfterEvent",
      "@minecraft/server.ItemReleaseUseAfterEventSignal",
      "@minecraft/server.ItemStack",
      "@minecraft/server.ItemStartUseAfterEvent",
      "@minecraft/server.ItemStartUseAfterEventSignal",
      "@minecraft/server.ItemStartUseOnAfterEvent",
      "@minecraft/server.ItemStartUseOnAfterEventSignal",
      "@minecraft/server.ItemStopUseAfterEvent",
      "@minecraft/server.ItemStopUseAfterEventSignal",
      "@minecraft/server.ItemStopUseOnAfterEvent",
      "@minecraft/server.ItemStopUseOnAfterEventSignal",
      "@minecraft/server.ItemType",
      "@minecraft/server.ItemTypes",
      "@minecraft/server.ItemUseAfterEvent",
      "@minecraft/server.ItemUseAfterEventSignal",
      "@minecraft/server.ItemUseBeforeEvent",
      "@minecraft/server.ItemUseBeforeEventSignal",
      "@minecraft/server.ItemUseOnEvent",
      "@minecraft/server.LeverActionAfterEvent",
      "@minecraft/server.LeverActionAfterEventSignal",
      "@minecraft/server.ListBlockVolume",
      "@minecraft/server.MolangVariableMap",
      "@minecraft/server.PistonActivateAfterEvent",
      "@minecraft/server.PistonActivateAfterEventSignal",
      "@minecraft/server.Player",
      "@minecraft/server.PlayerBreakBlockAfterEvent",
      "@minecraft/server.PlayerBreakBlockAfterEventSignal",
      "@minecraft/server.PlayerBreakBlockBeforeEvent",
      "@minecraft/server.PlayerBreakBlockBeforeEventSignal",
      "@minecraft/server.PlayerButtonInputAfterEvent",
      "@minecraft/server.PlayerButtonInputAfterEventSignal",
      "@minecraft/server.PlayerCursorInventoryComponent",
      "@minecraft/server.PlayerDimensionChangeAfterEvent",
      "@minecraft/server.PlayerDimensionChangeAfterEventSignal",
      "@minecraft/server.PlayerEmoteAfterEvent",
      "@minecraft/server.PlayerEmoteAfterEventSignal",
      "@minecraft/server.PlayerGameModeChangeAfterEvent",
      "@minecraft/server.PlayerGameModeChangeAfterEventSignal",
      "@minecraft/server.PlayerGameModeChangeBeforeEvent",
      "@minecraft/server.PlayerGameModeChangeBeforeEventSignal",
      "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEvent",
      "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEventSignal",
      "@minecraft/server.PlayerInputModeChangeAfterEvent",
      "@minecraft/server.PlayerInputModeChangeAfterEventSignal",
      "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEvent",
      "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEventSignal",
      "@minecraft/server.PlayerInputPermissions",
      "@minecraft/server.PlayerInteractWithBlockAfterEvent",
      "@minecraft/server.PlayerInteractWithBlockAfterEventSignal",
      "@minecraft/server.PlayerInteractWithBlockBeforeEvent",
      "@minecraft/server.PlayerInteractWithBlockBeforeEventSignal",
      "@minecraft/server.PlayerInteractWithEntityAfterEvent",
      "@minecraft/server.PlayerInteractWithEntityAfterEventSignal",
      "@minecraft/server.PlayerInteractWithEntityBeforeEvent",
      "@minecraft/server.PlayerInteractWithEntityBeforeEventSignal",
      "@minecraft/server.PlayerInventoryItemChangeAfterEvent",
      "@minecraft/server.PlayerInventoryItemChangeAfterEventSignal",
      "@minecraft/server.PlayerJoinAfterEvent",
      "@minecraft/server.PlayerJoinAfterEventSignal",
      "@minecraft/server.PlayerLeaveAfterEvent",
      "@minecraft/server.PlayerLeaveAfterEventSignal",
      "@minecraft/server.PlayerLeaveBeforeEvent",
      "@minecraft/server.PlayerLeaveBeforeEventSignal",
      "@minecraft/server.PlayerPlaceBlockAfterEvent",
      "@minecraft/server.PlayerPlaceBlockAfterEventSignal",
      "@minecraft/server.PlayerSpawnAfterEvent",
      "@minecraft/server.PlayerSpawnAfterEventSignal",
      "@minecraft/server.PressurePlatePopAfterEvent",
      "@minecraft/server.PressurePlatePopAfterEventSignal",
      "@minecraft/server.PressurePlatePushAfterEvent",
      "@minecraft/server.PressurePlatePushAfterEventSignal",
      "@minecraft/server.ProjectileHitBlockAfterEvent",
      "@minecraft/server.ProjectileHitBlockAfterEventSignal",
      "@minecraft/server.ProjectileHitEntityAfterEvent",
      "@minecraft/server.ProjectileHitEntityAfterEventSignal",
      "@minecraft/server.Scoreboard",
      "@minecraft/server.ScoreboardIdentity",
      "@minecraft/server.ScoreboardObjective",
      "@minecraft/server.ScoreboardScoreInfo",
      "@minecraft/server.ScreenDisplay",
      "@minecraft/server.ScriptEventCommandMessageAfterEvent",
      "@minecraft/server.ScriptEventCommandMessageAfterEventSignal",
      "@minecraft/server.Seat",
      "@minecraft/server.ShutdownBeforeEventSignal",
      "@minecraft/server.ShutdownEvent",
      "@minecraft/server.StartupBeforeEventSignal",
      "@minecraft/server.StartupEvent",
      "@minecraft/server.Structure",
      "@minecraft/server.StructureManager",
      "@minecraft/server.System",
      "@minecraft/server.SystemAfterEvents",
      "@minecraft/server.SystemBeforeEvents",
      "@minecraft/server.SystemInfo",
      "@minecraft/server.TargetBlockHitAfterEvent",
      "@minecraft/server.TargetBlockHitAfterEventSignal",
      "@minecraft/server.Trigger",
      "@minecraft/server.TripWireTripAfterEvent",
      "@minecraft/server.TripWireTripAfterEventSignal",
      "@minecraft/server.WeatherChangeAfterEvent",
      "@minecraft/server.WeatherChangeAfterEventSignal",
      "@minecraft/server.WeatherChangeBeforeEvent",
      "@minecraft/server.WeatherChangeBeforeEventSignal",
      "@minecraft/server.World",
      "@minecraft/server.WorldAfterEvents",
      "@minecraft/server.WorldBeforeEvents",
      "@minecraft/server.WorldLoadAfterEvent",
      "@minecraft/server.WorldLoadAfterEventSignal",
      "@minecraft/server.BlockCustomComponentAlreadyRegisteredError",
      "@minecraft/server.BlockCustomComponentReloadNewComponentError",
      "@minecraft/server.BlockCustomComponentReloadNewEventError",
      "@minecraft/server.BlockCustomComponentReloadVersionError",
      "@minecraft/server.CommandError",
      "@minecraft/server.ContainerRulesError",
      "@minecraft/server.CustomCommandError",
      "@minecraft/server.CustomComponentInvalidRegistryError",
      "@minecraft/server.CustomComponentNameError",
      "@minecraft/server.EnchantmentLevelOutOfBoundsError",
      "@minecraft/server.EnchantmentTypeNotCompatibleError",
      "@minecraft/server.EnchantmentTypeUnknownIdError",
      "@minecraft/server.EntitySpawnError",
      "@minecraft/server.InvalidContainerError",
      "@minecraft/server.InvalidContainerSlotError",
      "@minecraft/server.InvalidEntityError",
      "@minecraft/server.InvalidIteratorError",
      "@minecraft/server.InvalidStructureError",
      "@minecraft/server.ItemCustomComponentAlreadyRegisteredError",
      "@minecraft/server.ItemCustomComponentReloadNewComponentError",
      "@minecraft/server.ItemCustomComponentReloadNewEventError",
      "@minecraft/server.ItemCustomComponentReloadVersionError",
      "@minecraft/server.LocationInUnloadedChunkError",
      "@minecraft/server.LocationOutOfWorldBoundariesError",
      "@minecraft/server.NamespaceNameError",
      "@minecraft/server.PlaceJigsawError",
      "@minecraft/server.RawMessageError",
      "@minecraft/server.UnloadedChunksError",
      "@minecraft/server-admin.AdminBeforeEvents",
      "@minecraft/server-admin.AsyncPlayerJoinBeforeEvent",
      "@minecraft/server-admin.AsyncPlayerJoinBeforeEventSignal",
      "@minecraft/server-admin.SecretString",
      "@minecraft/server-admin.ServerSecrets",
      "@minecraft/server-admin.ServerVariables",
      "@minecraft/server-admin.DisconnectedError",
      "@minecraft/server-net.HttpClient",
      "@minecraft/server-net.HttpHeader",
      "@minecraft/server-net.HttpRequest",
      "@minecraft/server-net.HttpResponse",
      "@minecraft/server-net.NetworkBeforeEvents",
      "@minecraft/server-net.PacketReceiveBeforeEventSignal",
      "@minecraft/server-net.PacketReceivedBeforeEvent",
      "@minecraft/server-net.PacketSendBeforeEvent",
      "@minecraft/server-net.PacketSendBeforeEventSignal",
      "@minecraft/server-net.InternalHttpRequestError",
      "@minecraft/server-net.MalformedHttpRequestError",
      "@minecraft/server-ui.ActionFormData",
      "@minecraft/server-ui.ActionFormResponse",
      "@minecraft/server-ui.FormResponse",
      "@minecraft/server-ui.MessageFormData",
      "@minecraft/server-ui.MessageFormResponse",
      "@minecraft/server-ui.ModalFormData",
      "@minecraft/server-ui.ModalFormResponse",
      "@minecraft/server-ui.UIManager",
      "@minecraft/server-ui.FormRejectError"
    ],
    "Interfaces": [
      "@minecraft/server.BlockBoundingBox",
      "@minecraft/server.BlockCustomComponent",
      "@minecraft/server.BlockEventOptions",
      "@minecraft/server.BlockFillOptions",
      "@minecraft/server.BlockFilter",
      "@minecraft/server.BlockHitInformation",
      "@minecraft/server.BlockRaycastHit",
      "@minecraft/server.BlockRaycastOptions",
      "@minecraft/server.CameraFadeOptions",
      "@minecraft/server.CameraFadeTimeOptions",
      "@minecraft/server.CameraFixedBoomOptions",
      "@minecraft/server.CameraSetFacingOptions",
      "@minecraft/server.CameraSetLocationOptions",
      "@minecraft/server.CameraSetPosOptions",
      "@minecraft/server.CameraSetRotOptions",
      "@minecraft/server.CameraTargetOptions",
      "@minecraft/server.CustomCommand",
      "@minecraft/server.CustomCommandParameter",
      "@minecraft/server.CustomCommandResult",
      "@minecraft/server.DefinitionModifier",
      "@minecraft/server.DimensionLocation",
      "@minecraft/server.EaseOptions",
      "@minecraft/server.Enchantment",
      "@minecraft/server.EntityApplyDamageByProjectileOptions",
      "@minecraft/server.EntityApplyDamageOptions",
      "@minecraft/server.EntityDamageSource",
      "@minecraft/server.EntityDataDrivenTriggerEventOptions",
      "@minecraft/server.EntityEffectOptions",
      "@minecraft/server.EntityEventOptions",
      "@minecraft/server.EntityFilter",
      "@minecraft/server.EntityHitInformation",
      "@minecraft/server.EntityQueryOptions",
      "@minecraft/server.EntityQueryPropertyOptions",
      "@minecraft/server.EntityQueryScoreOptions",
      "@minecraft/server.EntityRaycastHit",
      "@minecraft/server.EntityRaycastOptions",
      "@minecraft/server.EqualsComparison",
      "@minecraft/server.ExplosionOptions",
      "@minecraft/server.GreaterThanComparison",
      "@minecraft/server.GreaterThanOrEqualsComparison",
      "@minecraft/server.HotbarEventOptions",
      "@minecraft/server.InputEventOptions",
      "@minecraft/server.InventoryItemEventOptions",
      "@minecraft/server.ItemCustomComponent",
      "@minecraft/server.JigsawPlaceOptions",
      "@minecraft/server.JigsawStructurePlaceOptions",
      "@minecraft/server.LessThanComparison",
      "@minecraft/server.LessThanOrEqualsComparison",
      "@minecraft/server.MusicOptions",
      "@minecraft/server.NotEqualsComparison",
      "@minecraft/server.PlayAnimationOptions",
      "@minecraft/server.PlayerSoundOptions",
      "@minecraft/server.ProjectileShootOptions",
      "@minecraft/server.RangeComparison",
      "@minecraft/server.RawMessage",
      "@minecraft/server.RawMessageScore",
      "@minecraft/server.RawText",
      "@minecraft/server.RGB",
      "@minecraft/server.RGBA",
      "@minecraft/server.ScoreboardObjectiveDisplayOptions",
      "@minecraft/server.ScriptEventMessageFilterOptions",
      "@minecraft/server.SpawnEntityOptions",
      "@minecraft/server.StructureCreateOptions",
      "@minecraft/server.StructurePlaceOptions",
      "@minecraft/server.TeleportOptions",
      "@minecraft/server.TitleDisplayOptions",
      "@minecraft/server.Vector2",
      "@minecraft/server.Vector3",
      "@minecraft/server.VectorXZ",
      "@minecraft/server.WorldSoundOptions",
      "@minecraft/server-admin.TransferPlayerIpPortOptions",
      "@minecraft/server-admin.TransferPlayerNetherNetOptions",
      "@minecraft/server-net.PacketEventOptions",
      "@minecraft/server-ui.ModalFormDataDropdownOptions",
      "@minecraft/server-ui.ModalFormDataSliderOptions",
      "@minecraft/server-ui.ModalFormDataTextFieldOptions",
      "@minecraft/server-ui.ModalFormDataToggleOptions"
    ],
    "Admin": [
      "@minecraft/server-admin.AdminBeforeEvents",
      "@minecraft/server-admin.AsyncPlayerJoinBeforeEvent",
      "@minecraft/server-admin.AsyncPlayerJoinBeforeEventSignal",
      "@minecraft/server-admin.SecretString",
      "@minecraft/server-admin.ServerSecrets",
      "@minecraft/server-admin.ServerVariables",
      "@minecraft/server-admin.TransferPlayerIpPortOptions",
      "@minecraft/server-admin.TransferPlayerNetherNetOptions",
      "@minecraft/server-admin.DisconnectedError"
    ],
    "Networking": [
      "@minecraft/server-net.HttpRequestMethod",
      "@minecraft/server-net.PacketId",
      "@minecraft/server-net.HttpClient",
      "@minecraft/server-net.HttpHeader",
      "@minecraft/server-net.HttpRequest",
      "@minecraft/server-net.HttpResponse",
      "@minecraft/server-net.NetworkBeforeEvents",
      "@minecraft/server-net.PacketReceiveBeforeEventSignal",
      "@minecraft/server-net.PacketReceivedBeforeEvent",
      "@minecraft/server-net.PacketSendBeforeEvent",
      "@minecraft/server-net.PacketSendBeforeEventSignal",
      "@minecraft/server-net.PacketEventOptions",
      "@minecraft/server-net.InternalHttpRequestError",
      "@minecraft/server-net.MalformedHttpRequestError"
    ],
    "UI": [
      "@minecraft/server-ui.FormCancelationReason",
      "@minecraft/server-ui.FormRejectReason",
      "@minecraft/server-ui.ActionFormData",
      "@minecraft/server-ui.ActionFormResponse",
      "@minecraft/server-ui.FormResponse",
      "@minecraft/server-ui.MessageFormData",
      "@minecraft/server-ui.MessageFormResponse",
      "@minecraft/server-ui.ModalFormData",
      "@minecraft/server-ui.ModalFormResponse",
      "@minecraft/server-ui.UIManager",
      "@minecraft/server-ui.ModalFormDataDropdownOptions",
      "@minecraft/server-ui.ModalFormDataSliderOptions",
      "@minecraft/server-ui.ModalFormDataTextFieldOptions",
      "@minecraft/server-ui.ModalFormDataToggleOptions",
      "@minecraft/server-ui.FormRejectError"
    ]
  },
  "tags": {
    "readonly-restricted": [
      "@minecraft/server.PlayerEmoteAfterEvent",
      "@minecraft/server.StartupEvent"
    ],
    "beta": [
      "@minecraft/server-admin.AdminBeforeEvents",
      "@minecraft/server-net.HttpRequestMethod"
    ]
  }
};

export default minecraftRegistry;
