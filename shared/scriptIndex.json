{
  "elements": [
    {
      "id": "@minecraft/server.BlockComponentTypes",
      "name": "BlockComponentTypes",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The types of block components that are accessible via\r function Block.getComponent.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponenttypes",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.BlockPistonState",
      "name": "BlockPistonState",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "An enumeration describing the state of a block piston.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockpistonstate",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.BlockVolumeIntersection",
      "name": "BlockVolumeIntersection",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Description of the resulting intersection test on two\r BlockVolume objects\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockvolumeintersection",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.ButtonState",
      "name": "ButtonState",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The state of a button on a keyboard, controller, or touch\r interface.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "buttonstate",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.CommandPermissionLevel",
      "name": "CommandPermissionLevel",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The required permission level to execute the custom command.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "commandpermissionlevel",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommandErrorReason",
      "name": "CustomCommandErrorReason",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Reason why custom command registration failed.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommanderrorreason",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommandParamType",
      "name": "CustomCommandParamType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The types of paramaters accepted by a custom command.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandparamtype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommandSource",
      "name": "CustomCommandSource",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Who executed the command.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandsource",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommandStatus",
      "name": "CustomCommandStatus",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Command originated from the server.",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandstatus",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.CustomComponentNameErrorReason",
      "name": "CustomComponentNameErrorReason",
      "type": "enum",
      "module": "@minecraft/server",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcomponentnameerrorreason",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.Difficulty",
      "name": "Difficulty",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "An enumeration for the various difficulty levels of\r Minecraft.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "difficulty",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.Direction",
      "name": "Direction",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "A general purpose relative direction enumeration.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "direction",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.DisplaySlotId",
      "name": "DisplaySlotId",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies a mechanism for displaying scores on a scoreboard.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "displayslotid",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.DyeColor",
      "name": "DyeColor",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies different colors for use as dye.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dyecolor",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.EasingType",
      "name": "EasingType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Yellow dye color.",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "easingtype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.EnchantmentSlot",
      "name": "EnchantmentSlot",
      "type": "enum",
      "module": "@minecraft/server",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmentslot",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.EntityComponentTypes",
      "name": "EntityComponentTypes",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The types of entity components that are accessible via\r function Entity.getComponent.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycomponenttypes",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.EntityDamageCause",
      "name": "EntityDamageCause",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes the source of damage from an Entity.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydamagecause",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.EntityInitializationCause",
      "name": "EntityInitializationCause",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "An enumeration describing initialization cause of an entity.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityinitializationcause",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.EquipmentSlot",
      "name": "EquipmentSlot",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The equipment slot of the mob. This includes armor, offhand\r and mainhand slots.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "equipmentslot",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.FluidType",
      "name": "FluidType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Represents the type of fluid for use within a fluid\r containing block, like a cauldron.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "fluidtype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.GameMode",
      "name": "GameMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Represents a game mode for the current world experience.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamemode",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.GameRule",
      "name": "GameRule",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Game rules. These values can also be controlled via the\r /gamerule command.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamerule",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.GraphicsMode",
      "name": "GraphicsMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Player.graphicsMode}\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "graphicsmode",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.HudElement",
      "name": "HudElement",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "A graphics mode that refers to the Simple graphics mode\r setting. Most graphics effects are turned off in this\r setting.",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "hudelement",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.HudVisibility",
      "name": "HudVisibility",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Enumeration that specifies how to treat the visibility of a\r HUD element.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "hudvisibility",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.InputButton",
      "name": "InputButton",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "All the different input buttons that are supported. Use with\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputbutton",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.InputMode",
      "name": "InputMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes the type of input of a device.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputmode",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.InputPermissionCategory",
      "name": "InputPermissionCategory",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "PlayerInputPermissionCategoryChangeAfterEvent} to specify\r PlayerInputPermissions} to get or set permissions.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputpermissioncategory",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponentTypes",
      "name": "ItemComponentTypes",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The types of item components that are accessible via\r function ItemStack.getComponent.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponenttypes",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.ItemLockMode",
      "name": "ItemLockMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes how an an item can be moved within a container.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemlockmode",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.LiquidType",
      "name": "LiquidType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Represents the type of liquid that can be placed on a block\r or flow dynamically in the world.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "liquidtype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.MemoryTier",
      "name": "MemoryTier",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes the memory of a device.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "memorytier",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.MoonPhase",
      "name": "MoonPhase",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Enum containing the different phases of the moon based on\r the current day.,Obtain the current MoonPhase using\r world.getMoonPhase.\r  The fullness of the moon controls various mob behaviors such\r as the number of slimes that spawn in Swamp biomes, the\r chance skeletons and zombies have to spawn with armor, as\r well as the chance for spiders to spawn with certain status\r effects.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "moonphase",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.MovementType",
      "name": "MovementType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The phase following the First Quarter.",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "movementtype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.NamespaceNameErrorReason",
      "name": "NamespaceNameErrorReason",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "An enumeration describing the reason for the namespace name\r error being thrown\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "namespacenameerrorreason",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.ObjectiveSortOrder",
      "name": "ObjectiveSortOrder",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Used for specifying a sort order for how to display an\r objective and its list of participants.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "objectivesortorder",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.PaletteColor",
      "name": "PaletteColor",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Enum containing colors to be used with EntityColorComponent\r and EntityColor2Component\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "palettecolor",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.PlatformType",
      "name": "PlatformType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes what kind of platform is a device.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "platformtype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInventoryType",
      "name": "PlayerInventoryType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies the player inventory type.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinventorytype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.PlayerPermissionLevel",
      "name": "PlayerPermissionLevel",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The player permission level.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerpermissionlevel",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.ScoreboardIdentityType",
      "name": "ScoreboardIdentityType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Contains objectives and participants for the scoreboard.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardidentitytype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.ScriptEventSource",
      "name": "ScriptEventSource",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Describes where the script event originated from.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scripteventsource",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.SignSide",
      "name": "SignSide",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Represents a side of a sign.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "signside",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.StickyType",
      "name": "StickyType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "The front of the sign.",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "stickytype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.StructureAnimationMode",
      "name": "StructureAnimationMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies how structure blocks should be animated when a\r structure is placed.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structureanimationmode",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.StructureMirrorAxis",
      "name": "StructureMirrorAxis",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies how a structure should be mirrored when placed.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structuremirroraxis",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.StructureRotation",
      "name": "StructureRotation",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Enum describing a structure's placement rotation.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structurerotation",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.StructureSaveMode",
      "name": "StructureSaveMode",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Specifies how a structure should be saved.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structuresavemode",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.TimeOfDay",
      "name": "TimeOfDay",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Provides numeric values for common periods in the Minecraft\r day.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "timeofday",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.TintMethod",
      "name": "TintMethod",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Tint logic applied to a block or part of a block. The color\r may vary when a world position is part of the context, as\r biomes often have an influence on the resulting tint.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "tintmethod",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.WeatherType",
      "name": "WeatherType",
      "type": "enum",
      "module": "@minecraft/server",
      "description": "Used to specify the type of weather condition within the\r world.\r /",
      "categories": [
        "Enums",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weathertype",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentTypeMap",
      "name": "BlockComponentTypeMap",
      "type": "type",
      "module": "@minecraft/server",
      "categories": [
        "Types",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponenttypemap",
        "type"
      ],
      "signature": "{"
    },
    {
      "id": "@minecraft/server.EntityComponentTypeMap",
      "name": "EntityComponentTypeMap",
      "type": "type",
      "module": "@minecraft/server",
      "categories": [
        "Types",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycomponenttypemap",
        "type"
      ],
      "signature": "{"
    },
    {
      "id": "@minecraft/server.ItemComponentTypeMap",
      "name": "ItemComponentTypeMap",
      "type": "type",
      "module": "@minecraft/server",
      "categories": [
        "Types",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponenttypemap",
        "type"
      ],
      "signature": "{"
    },
    {
      "id": "@minecraft/server.Block",
      "name": "Block",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a block in a dimension. A block represents a\r unique X, Y, and Z within a dimension and get/sets the state\r of the block at that location. This type was significantly\r updated in version 1.17.10.21.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "block",
        "class"
      ],
      "signature": "above(steps?: number): Block | undefined"
    },
    {
      "id": "@minecraft/server.BlockComponent",
      "name": "BlockComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base type for components associated with blocks.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentEntityFallOnEvent",
      "name": "BlockComponentEntityFallOnEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an entity falling onto a\r specific block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponententityfallonevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentOnPlaceEvent",
      "name": "BlockComponentOnPlaceEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block that was\r placed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentonplaceevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentPlayerBreakEvent",
      "name": "BlockComponentPlayerBreakEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block being broken\r by a player.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentplayerbreakevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentPlayerInteractEvent",
      "name": "BlockComponentPlayerInteractEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block being\r interacted with.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentplayerinteractevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentPlayerPlaceBeforeEvent",
      "name": "BlockComponentPlayerPlaceBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r places a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentplayerplacebeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentRandomTickEvent",
      "name": "BlockComponentRandomTickEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block randomly\r ticking.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentrandomtickevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentRegistry",
      "name": "BlockComponentRegistry",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentregistry",
        "class"
      ],
      "signature": "registerCustomComponent(name: string, customComponent: BlockCustomComponent): void"
    },
    {
      "id": "@minecraft/server.BlockComponentStepOffEvent",
      "name": "BlockComponentStepOffEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an entity stepping off a\r specific block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentstepoffevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentStepOnEvent",
      "name": "BlockComponentStepOnEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an entity stepping onto a\r specific block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponentsteponevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockComponentTickEvent",
      "name": "BlockComponentTickEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a specific block ticking.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcomponenttickevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockCustomComponentInstance",
      "name": "BlockCustomComponentInstance",
      "type": "class",
      "module": "@minecraft/server",
      "description": "An instance of a custom component on a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentinstance",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockEvent",
      "name": "BlockEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event that impacts a\r specific block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockExplodeAfterEvent",
      "name": "BlockExplodeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an explosion that has\r occurred for a specific block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockexplodeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockExplodeAfterEventSignal",
      "name": "BlockExplodeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an explosion\r occurs, as it impacts individual blocks.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockexplodeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockFluidContainerComponent",
      "name": "BlockFluidContainerComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the fluid container of a block in the world. Used\r with blocks like cauldrons.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockfluidcontainercomponent",
        "class"
      ],
      "signature": "addDye(dye: ItemType): void"
    },
    {
      "id": "@minecraft/server.BlockInventoryComponent",
      "name": "BlockInventoryComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the inventory of a block in the world. Used with\r blocks like chests.\r ```typescript\r  function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // Fetch block\r   const block = targetLocation.dimension.getBlock(targetLocation);\r    if (!block) {\r     log(\"Could not find block. Maybe it is not loaded?\", -1);\r     return;\r   }\r    // Make it a chest\r   block.setType(MinecraftBlockTypes.Chest);\r    // Get the inventory\r   const inventoryComponent = block.getComponent(\"inventory\") as BlockInventoryComponent;\r    if (!inventoryComponent || !inventoryComponent.container) {\r     log(\"Could not find inventory component.\", -1);\r     return;\r   }\r    const inventoryContainer = inventoryComponent.container;\r    // Set slot 0 to a stack of 10 apples\r   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockinventorycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockLocationIterator",
      "name": "BlockLocationIterator",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A BlockLocationIterator returns the next block location of\r the block volume across which it is iterating.\r The BlockLocationIterator is used to abstract the shape of\r the block volume it was fetched from (so it can represent\r all the block locations that make up rectangles, cubes,\r spheres, lines and complex shapes).\r Each iteration pass returns the next valid block location in\r the parent shape.\r Unless otherwise specified by the parent shape - the\r BlockLocationIterator will iterate over a 3D space in the\r order of increasing X, followed by increasing Z followed by\r increasing Y.\r (Effectively stepping across the XZ plane, and when all the\r locations in that plane are exhausted, increasing the Y\r coordinate to the next XZ slice)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blocklocationiterator",
        "class"
      ],
      "signature": "next(): IteratorResult<Vector3>"
    },
    {
      "id": "@minecraft/server.BlockMapColorComponent",
      "name": "BlockMapColorComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the color of a block when displayed on a map.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockmapcolorcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockMovableComponent",
      "name": "BlockMovableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Type of tint applied to the color.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockmovablecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockPermutation",
      "name": "BlockPermutation",
      "type": "class",
      "module": "@minecraft/server",
      "description": "properties (also sometimes called block state) which\r Block}).\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockpermutation",
        "class"
      ],
      "signature": "canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean"
    },
    {
      "id": "@minecraft/server.BlockPistonComponent",
      "name": "BlockPistonComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present, this block has piston-like behavior. Contains\r additional properties for discovering block piston state.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockpistoncomponent",
        "class"
      ],
      "signature": "getAttachedBlocks(): Block[]"
    },
    {
      "id": "@minecraft/server.BlockRecordPlayerComponent",
      "name": "BlockRecordPlayerComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a block that can play a record.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockrecordplayercomponent",
        "class"
      ],
      "signature": "ejectRecord(): void"
    },
    {
      "id": "@minecraft/server.BlockSignComponent",
      "name": "BlockSignComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a block that can display text on it.\r ```typescript\r  function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText(`Basic sign!\\nThis is green on the front.`);\r }\r ```\r ```typescript\r  function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const signBlock = targetLocation.dimension.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    if (signComponent) {\r     signComponent.setText(`Party Sign!\\nThis is green on the front.`);\r     signComponent.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\r     signComponent.setTextDyeColor(DyeColor.Green);\r     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\r      // players cannot edit sign!\r     signComponent.setWaxed(true);\r   } else {\r     log(\"Could not find sign component.\");\r   }\r }\r ```\r ```typescript\r  function updateSignText(targetLocation: DimensionLocation) {\r   const block = targetLocation.dimension.getBlock(targetLocation);\r   if (!block) {\r     console.warn(\"Could not find a block at specified location.\");\r     return;\r   }\r    const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r   if (sign) {\r     // RawMessage\r     const helloWorldMessage: RawMessage = { text: \"Hello World\" };\r     sign.setText(helloWorldMessage);\r      // RawText\r     const helloWorldText: RawText = { rawtext: [{ text: \"Hello World\" }] };\r     sign.setText(helloWorldText);\r      // Regular string\r     sign.setText(\"Hello World\");\r   } else {\r     console.warn(\"Could not find a sign component on the block.\");\r   }\r }\r ```\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blocksigncomponent",
        "class"
      ],
      "signature": "getRawText(side?: SignSide): RawText | undefined"
    },
    {
      "id": "@minecraft/server.BlockStates",
      "name": "BlockStates",
      "type": "class",
      "module": "@minecraft/server",
      "description": "/",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockstates",
        "class"
      ],
      "signature": "get(stateName: string): BlockStateType | undefined"
    },
    {
      "id": "@minecraft/server.BlockStateType",
      "name": "BlockStateType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a configurable state value of a block instance.\r For example, the facing direction of stairs is accessible as\r a block state.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockstatetype",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockType",
      "name": "BlockType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The type (or template) of a block. Does not contain\r permutation data (state) other than the type of block it\r represents. This type was introduced as of version\r 1.17.10.21.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blocktype",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockTypes",
      "name": "BlockTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a catalog of Minecraft Block Types that are\r available in this world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blocktypes",
        "class"
      ],
      "signature": "get(typeName: string): BlockType | undefined"
    },
    {
      "id": "@minecraft/server.BlockVolume",
      "name": "BlockVolume",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A BlockVolume is a simple interface to an object which\r represents a 3D rectangle of a given size (in blocks) at a\r world block location.\r Note that these are not analogous to \"min\" and \"max\" values,\r in that the vector components are not guaranteed to be in\r any order.\r In addition, these vector positions are not interchangeable\r with BlockLocation.\r If you want to get this volume represented as range of of\r BlockLocations, you can use the getBoundingBox utility\r function.\r This volume class will maintain the ordering of the corner\r indexes as initially set. imagine that each corner is\r assigned in Editor - as you move the corner around\r (potentially inverting the min/max relationship of the\r bounds) - what\r you had originally selected as the top/left corner would\r traditionally become the bottom/right.\r When manually editing these kinds of volumes, you need to\r maintain the identity of the corner as you edit - the\r BlockVolume utility functions do this.\r  Important to note that this measures block sizes (to/from) -\r a normal AABB (0,0,0) to (0,0,0) would traditionally be of\r size (0,0,0)\r However, because we're measuring blocks - the size or span\r of a BlockVolume would actually be (1,1,1)\r  /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockvolume",
        "class"
      ],
      "signature": "doesLocationTouchFaces(pos: Vector3): boolean"
    },
    {
      "id": "@minecraft/server.BlockVolumeBase",
      "name": "BlockVolumeBase",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base type for BlockVolumes.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockvolumebase",
        "class"
      ],
      "signature": "getBlockLocationIterator(): BlockLocationIterator"
    },
    {
      "id": "@minecraft/server.ButtonPushAfterEvent",
      "name": "ButtonPushAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a button push.\r ```typescript\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a button on cobblestone\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r     const eventLoc = buttonPushEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Button push event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "buttonpushafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ButtonPushAfterEventSignal",
      "name": "ButtonPushAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a button is\r pushed.\r ```typescript\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a button on cobblestone\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\r     const eventLoc = buttonPushEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Button push event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "buttonpushaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Camera",
      "name": "Camera",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains methods relating to the active camera for the\r specified player.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camera",
        "class"
      ],
      "signature": "clear(): void"
    },
    {
      "id": "@minecraft/server.ClientSystemInfo",
      "name": "ClientSystemInfo",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains the device information for a client instance.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "clientsysteminfo",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.CommandResult",
      "name": "CommandResult",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains return data on the result of a command execution.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "commandresult",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Component",
      "name": "Component",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base class for downstream Component implementations.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "component",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Container",
      "name": "Container",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a container that can hold sets of items. Used\r with entities such as Players, Chest Minecarts, Llamas, and\r more.\r ```typescript\r  function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const xLocation = targetLocation; // left chest location\r   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\r    const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\r     x: targetLocation.x + 4,\r     y: targetLocation.y,\r     z: targetLocation.z,\r   });\r    const xChestBlock = targetLocation.dimension.getBlock(xLocation);\r   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\r    if (!xChestBlock || !xPlusTwoChestBlock) {\r     log(\"Could not retrieve chest blocks.\");\r     return;\r   }\r    xChestBlock.setType(MinecraftBlockTypes.Chest);\r   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\r    const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r   const xChestInventoryComponent = xChestBlock.getComponent(\"inventory\") as BlockInventoryComponent;\r   const chestCartInventoryComp = chestCart.getComponent(\"inventory\") as EntityInventoryComponent;\r    const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\r   const xChestContainer = xChestInventoryComponent.container;\r   const chestCartContainer = chestCartInventoryComp.container;\r    if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\r     log(\"Could not retrieve chest containers.\");\r     return;\r   }\r    xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\r   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r     log(\"Expected apple in x+2 container slot index 0\", -1);\r   }\r    xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\r   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\r     log(\"Expected emerald in x+2 container slot index 1\", -1);\r   }\r    if (xPlusTwoChestContainer.size !== 27) {\r     log(\"Unexpected size: \" + xPlusTwoChestContainer.size, -1);\r   }\r    if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\r     log(\"Unexpected emptySlotsCount: \" + xPlusTwoChestContainer.emptySlotsCount, -1);\r   }\r    xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\r    xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\r   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\r    if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\r     log(\"Expected apple in minecraft chest container slot index 0\", -1);\r   }\r    if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\r     log(\"Expected emerald in x container slot index 0\", -1);\r   }\r    if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\r     log(\"Expected cake in x+2 container slot index 1\", -1);\r   }\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "container",
        "class"
      ],
      "signature": "addItem(itemStack: ItemStack): ItemStack | undefined"
    },
    {
      "id": "@minecraft/server.ContainerSlot",
      "name": "ContainerSlot",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a slot within a broader container (e.g., entity\r inventory.)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "containerslot",
        "class"
      ],
      "signature": "clearDynamicProperties(): void"
    },
    {
      "id": "@minecraft/server.CustomCommandOrigin",
      "name": "CustomCommandOrigin",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Details about the origins of the command.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandorigin",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommandRegistry",
      "name": "CustomCommandRegistry",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides the functionality for registering custom commands.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandregistry",
        "class"
      ],
      "signature": "registerEnum(name: string, values: string[]): void"
    },
    {
      "id": "@minecraft/server.CustomComponentParameters",
      "name": "CustomComponentParameters",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains the custom component's JSON parameters\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcomponentparameters",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.DataDrivenEntityTriggerAfterEvent",
      "name": "DataDrivenEntityTriggerAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to firing of a data driven\r entity event - for example, the minecraft:ageable_grow_up\r event on a chicken.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "datadrivenentitytriggerafterevent",
        "class"
      ],
      "signature": "getModifiers(): DefinitionModifier[]"
    },
    {
      "id": "@minecraft/server.DataDrivenEntityTriggerAfterEventSignal",
      "name": "DataDrivenEntityTriggerAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains event registration related to firing of a data\r driven entity event - for example, the\r minecraft:ageable_grow_up event on a chicken.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "datadrivenentitytriggeraftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Dimension",
      "name": "Dimension",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A class that represents a particular dimension (e.g., The\r End) within a world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dimension",
        "class"
      ],
      "signature": "containsBlock(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): boolean"
    },
    {
      "id": "@minecraft/server.DimensionType",
      "name": "DimensionType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a type of dimension.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dimensiontype",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.DimensionTypes",
      "name": "DimensionTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Used for accessing all available dimension types.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dimensiontypes",
        "class"
      ],
      "signature": "get(dimensionTypeId: string): DimensionType | undefined"
    },
    {
      "id": "@minecraft/server.Effect",
      "name": "Effect",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents an effect - like poison - that has been added to\r an Entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effect",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EffectAddAfterEvent",
      "name": "EffectAddAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to an effect - like\r poison - being added to an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effectaddafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EffectAddAfterEventSignal",
      "name": "EffectAddAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an effect is\r added to an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effectaddaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EffectAddBeforeEvent",
      "name": "EffectAddBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to an effect - like\r poison - being added to an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effectaddbeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EffectAddBeforeEventSignal",
      "name": "EffectAddBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an effect is\r added to an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effectaddbeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EffectType",
      "name": "EffectType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a type of effect - like poison - that can be\r applied to an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effecttype",
        "class"
      ],
      "signature": "getName(): string"
    },
    {
      "id": "@minecraft/server.EffectTypes",
      "name": "EffectTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a type of effect - like poison - that can be\r applied to an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "effecttypes",
        "class"
      ],
      "signature": "get(identifier: string): EffectType | undefined"
    },
    {
      "id": "@minecraft/server.EnchantmentType",
      "name": "EnchantmentType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information on a type of enchantment.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmenttype",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EnchantmentTypes",
      "name": "EnchantmentTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a catalog of Minecraft Enchantment Types that are\r available in this world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmenttypes",
        "class"
      ],
      "signature": "get(enchantmentId: string): EnchantmentType | undefined"
    },
    {
      "id": "@minecraft/server.Entity",
      "name": "Entity",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the state of an entity (a mob, the player, or\r other moving objects like minecarts) in the world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entity",
        "class"
      ],
      "signature": "addEffect(effectType: EffectType | string, duration: number, options?: EntityEffectOptions): Effect | undefined"
    },
    {
      "id": "@minecraft/server.EntityAddRiderComponent",
      "name": "EntityAddRiderComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component makes the entity spawn with a\r rider of the specified entityType.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityaddridercomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityAgeableComponent",
      "name": "EntityAgeableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Adds a timer for the entity to grow up. It can be\r accelerated by giving the entity the items it likes as\r defined by feedItems.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityageablecomponent",
        "class"
      ],
      "signature": "getDropItems(): string[]"
    },
    {
      "id": "@minecraft/server.EntityAttributeComponent",
      "name": "EntityAttributeComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This is a base abstract class for any entity component that\r centers around a number and can have a minimum, maximum, and\r default defined value.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityattributecomponent",
        "class"
      ],
      "signature": "resetToDefaultValue(): void"
    },
    {
      "id": "@minecraft/server.EntityBaseMovementComponent",
      "name": "EntityBaseMovementComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base class for a family of entity movement events.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitybasemovementcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityBreathableComponent",
      "name": "EntityBreathableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines what blocks this entity can breathe in and gives\r them the ability to suffocate.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitybreathablecomponent",
        "class"
      ],
      "signature": "getBreatheBlocks(): BlockPermutation[]"
    },
    {
      "id": "@minecraft/server.EntityCanClimbComponent",
      "name": "EntityCanClimbComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that the entity can\r climb up ladders.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycanclimbcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityCanFlyComponent",
      "name": "EntityCanFlyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that the entity can\r fly, and the pathfinder won't be restricted to paths where a\r solid block is required underneath it.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycanflycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityCanPowerJumpComponent",
      "name": "EntityCanPowerJumpComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that the entity can\r power jump like the horse does within Minecraft.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycanpowerjumpcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityColor2Component",
      "name": "EntityColor2Component",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the entity's secondary color. Only works on certain\r entities that have secondary predefined color values (e.g.,\r tropical fish).\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycolor2component",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityColorComponent",
      "name": "EntityColorComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the entity's color. Only works on certain entities\r that have predefined color values (e.g., sheep, llama,\r shulker).\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycolorcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityComponent",
      "name": "EntityComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base class for downstream entity components.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityDefinitionFeedItem",
      "name": "EntityDefinitionFeedItem",
      "type": "class",
      "module": "@minecraft/server",
      "description": "As part of the Ageable component, represents a set of items\r that can be fed to an entity and the rate at which that\r causes them to grow.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydefinitionfeeditem",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityDieAfterEvent",
      "name": "EntityDieAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains data related to the death of an entity in the game.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydieafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityDieAfterEventSignal",
      "name": "EntityDieAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Supports registering for an event that fires after an entity\r has died.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydieaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityEquippableComponent",
      "name": "EntityEquippableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides access to a mob's equipment slots. This component\r exists on player entities.\r ```typescript\r // Gives the player Elytra\r  function giveEquipment(player: Player) {\r     const equipmentCompPlayer = player.getComponent(EntityComponentTypes.Equippable);\r     if (equipmentCompPlayer) {\r         equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.Elytra));\r     }\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityequippablecomponent",
        "class"
      ],
      "signature": "getEquipment(equipmentSlot: EquipmentSlot): ItemStack | undefined"
    },
    {
      "id": "@minecraft/server.EntityExhaustionComponent",
      "name": "EntityExhaustionComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the interactions with this entity for Exhaustion.\r Wraps the `minecraft.player.exhaustion` attribute.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityexhaustioncomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityFireImmuneComponent",
      "name": "EntityFireImmuneComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity\r doesn't take damage from fire.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityfireimmunecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityFloatsInLiquidComponent",
      "name": "EntityFloatsInLiquidComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity can\r float in liquid blocks.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityfloatsinliquidcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityFlyingSpeedComponent",
      "name": "EntityFlyingSpeedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the flying speed of an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityflyingspeedcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityFrictionModifierComponent",
      "name": "EntityFrictionModifierComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines how much friction affects this entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityfrictionmodifiercomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHealableComponent",
      "name": "EntityHealableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the interactions with this entity for healing it.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhealablecomponent",
        "class"
      ],
      "signature": "getFeedItems(): FeedItem[]"
    },
    {
      "id": "@minecraft/server.EntityHealthChangedAfterEvent",
      "name": "EntityHealthChangedAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an entity when its health\r changes. Warning: don't change the health of an entity in\r this event, or it will cause an infinite loop!\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhealthchangedafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHealthChangedAfterEventSignal",
      "name": "EntityHealthChangedAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when the health of\r an entity changes.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhealthchangedaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHealthComponent",
      "name": "EntityHealthComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the health properties of an entity.\r ```typescript\r  function applyDamageThenHeal(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r    skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton\r    system.runTimeout(() => {\r     const health = skelly.getComponent(EntityComponentTypes.Health) as EntityHealthComponent;\r     log(\"Skeleton health before heal: \" + health?.currentValue);\r     health?.resetToMaxValue();\r     log(\"Skeleton health after heal: \" + health?.currentValue);\r   }, 20);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhealthcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHitBlockAfterEvent",
      "name": "EntityHitBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an entity hitting a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitblockafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHitBlockAfterEventSignal",
      "name": "EntityHitBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an entity hits\r a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitblockaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHitEntityAfterEvent",
      "name": "EntityHitEntityAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an entity hitting (melee\r attacking) another entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitentityafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHitEntityAfterEventSignal",
      "name": "EntityHitEntityAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an entity makes\r a melee attack on another entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitentityaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHungerComponent",
      "name": "EntityHungerComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the interactions with this entity for hunger. Wraps\r the `minecraft.player.hunger` attribute.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhungercomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHurtAfterEvent",
      "name": "EntityHurtAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an entity getting hurt.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhurtafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityHurtAfterEventSignal",
      "name": "EntityHurtAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an entity is\r hurt.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhurtaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityInventoryComponent",
      "name": "EntityInventoryComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines this entity's inventory properties.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityinventorycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsBabyComponent",
      "name": "EntityIsBabyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is a\r baby.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisbabycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsChargedComponent",
      "name": "EntityIsChargedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r charged.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityischargedcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsChestedComponent",
      "name": "EntityIsChestedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently carrying a chest.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityischestedcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsDyeableComponent",
      "name": "EntityIsDyeableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that dyes can be used\r on this entity to change its color.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisdyeablecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsHiddenWhenInvisibleComponent",
      "name": "EntityIsHiddenWhenInvisibleComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity can\r hide from hostile mobs while invisible.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityishiddenwheninvisiblecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsIgnitedComponent",
      "name": "EntityIsIgnitedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity this\r currently on fire.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisignitedcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsIllagerCaptainComponent",
      "name": "EntityIsIllagerCaptainComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is an\r illager captain.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisillagercaptaincomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsSaddledComponent",
      "name": "EntityIsSaddledComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently saddled.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityissaddledcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsShakingComponent",
      "name": "EntityIsShakingComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently shaking.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisshakingcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsShearedComponent",
      "name": "EntityIsShearedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently sheared.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisshearedcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsStackableComponent",
      "name": "EntityIsStackableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity can be\r stacked.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisstackablecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsStunnedComponent",
      "name": "EntityIsStunnedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently stunned.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityisstunnedcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityIsTamedComponent",
      "name": "EntityIsTamedComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity is\r currently tamed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityistamedcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityItemComponent",
      "name": "EntityItemComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "If added onto the entity, this indicates that the entity\r represents a free-floating item in the world. Lets you\r retrieve the actual item stack contents via the itemStack\r property.\r ```typescript\r  function testThatEntityIsFeatherItem(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const items = targetLocation.dimension.getEntities({\r     location: targetLocation,\r     maxDistance: 20,\r   });\r    for (const item of items) {\r     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r      if (itemComp) {\r       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r         log(\"Success! Found a feather\", 1);\r       }\r     }\r   }\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityitemcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityLavaMovementComponent",
      "name": "EntityLavaMovementComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the base movement speed in lava of this entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitylavamovementcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityLeashableComponent",
      "name": "EntityLeashableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows the entity to be leashed. Defines the conditions and\r events for when an entity is leashed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityleashablecomponent",
        "class"
      ],
      "signature": "leashTo(leashHolder: Entity): void"
    },
    {
      "id": "@minecraft/server.EntityLoadAfterEvent",
      "name": "EntityLoadAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains data related to an entity loaded within the world.\r This could happen when an unloaded chunk is reloaded, or\r when an entity changes dimensions.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityloadafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityLoadAfterEventSignal",
      "name": "EntityLoadAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Registers a script-based event handler for handling what\r happens when an entity loads.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityloadaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMarkVariantComponent",
      "name": "EntityMarkVariantComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Additional variant value. Can be used to further\r differentiate variants.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymarkvariantcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementAmphibiousComponent",
      "name": "EntityMovementAmphibiousComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this movement control allows the mob to swim in\r water and walk on land.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementamphibiouscomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementBasicComponent",
      "name": "EntityMovementBasicComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This component accents the movement of an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementbasiccomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementComponent",
      "name": "EntityMovementComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the general movement speed of this entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementFlyComponent",
      "name": "EntityMovementFlyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control causes the mob to fly.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementflycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementGenericComponent",
      "name": "EntityMovementGenericComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control allows a mob to fly, swim,\r climb, etc.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementgenericcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementGlideComponent",
      "name": "EntityMovementGlideComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this movement control allows the mob to glide.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementglidecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementHoverComponent",
      "name": "EntityMovementHoverComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control causes the mob to hover.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementhovercomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementJumpComponent",
      "name": "EntityMovementJumpComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Move control that causes the mob to jump as it moves with a\r specified delay between jumps.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementjumpcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementSkipComponent",
      "name": "EntityMovementSkipComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control causes the mob to hop as it\r moves.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementskipcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityMovementSwayComponent",
      "name": "EntityMovementSwayComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this move control causes the mob to sway side to\r side giving the impression it is swimming.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitymovementswaycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityNavigationClimbComponent",
      "name": "EntityNavigationClimbComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths that include vertical\r walls (for example, like Minecraft spiders do.)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationclimbcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityNavigationComponent",
      "name": "EntityNavigationComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths that include vertical\r walls (for example, like Minecraft spiders do.)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityNavigationFloatComponent",
      "name": "EntityNavigationFloatComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths by flying around the\r air like the regular Ghast.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationfloatcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityNavigationFlyComponent",
      "name": "EntityNavigationFlyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths in the air (for\r example, like Minecraft parrots do.)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationflycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityNavigationGenericComponent",
      "name": "EntityNavigationGenericComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths by walking, swimming,\r flying and/or climbing around and jumping up and down a\r block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationgenericcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityNavigationHoverComponent",
      "name": "EntityNavigationHoverComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths in the air (for\r example, like the Minecraft Bees do.) Keeps them from\r falling out of the skies and doing predictive movement.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationhovercomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityNavigationWalkComponent",
      "name": "EntityNavigationWalkComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows this entity to generate paths by walking around and\r jumping up and down a block like regular mobs.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitynavigationwalkcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityOnFireComponent",
      "name": "EntityOnFireComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an entity, this entity is on fire.\r ```typescript\r  function setOnFire(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const skelly = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Skeleton, targetLocation);\r    skelly.setOnFire(20, true);\r    system.runTimeout(() => {\r     const onfire = skelly.getComponent(EntityComponentTypes.OnFire) as EntityOnFireComponent;\r     log(onfire?.onFireTicksRemaining + \" fire ticks remaining.\");\r      skelly.extinguishFire(true);\r     log(\"Never mind. Fire extinguished.\");\r   }, 20);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityonfirecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityProjectileComponent",
      "name": "EntityProjectileComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The projectile component controls the properties of a\r projectile entity and allows it to be shot in a given\r direction.\r This component is present when the entity has the\r minecraft:projectile component.\r ```typescript\r  function shootArrow(targetLocation: DimensionLocation) {\r   const velocity = { x: 0, y: 1, z: 5 };\r    const arrow = targetLocation.dimension.spawnEntity(\"minecraft:arrow\", {\r     x: targetLocation.x,\r     y: targetLocation.y + 2,\r     z: targetLocation.z,\r   });\r    const projectileComp = arrow.getComponent(\"minecraft:projectile\") as EntityProjectileComponent;\r    projectileComp?.shoot(velocity);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityprojectilecomponent",
        "class"
      ],
      "signature": "shoot(velocity: Vector3, options?: ProjectileShootOptions): void"
    },
    {
      "id": "@minecraft/server.EntityPushThroughComponent",
      "name": "EntityPushThroughComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Sets the distance through which the entity can push through.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitypushthroughcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityRemoveAfterEvent",
      "name": "EntityRemoveAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Data for an event that happens when an entity is removed\r from the world (for example, the entity is unloaded because\r it is not close to players.)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityremoveafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityRemoveAfterEventSignal",
      "name": "EntityRemoveAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows registration for an event that fires when an entity\r is removed from  the game (for example, unloaded, or a few\r seconds after they are dead.)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityremoveaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityRemoveBeforeEvent",
      "name": "EntityRemoveBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Data for an event that happens when an entity is being\r removed from the world (for example, the entity is unloaded\r because it is not close to players.)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityremovebeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityRemoveBeforeEventSignal",
      "name": "EntityRemoveBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows registration for an event that fires when an entity\r is being removed from  the game (for example, unloaded, or a\r few seconds after they are dead.)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityremovebeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityRideableComponent",
      "name": "EntityRideableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component adds the capability that an\r entity can be ridden by another entity.\r ```typescript\r  function minibiomes(test: Test) {\r   const minecart = test.spawn(MinecraftEntityTypes.Minecart, { x: 9, y: 7, z: 7 });\r   const pig = test.spawn(MinecraftEntityTypes.Pig, { x: 9, y: 7, z: 7 });\r    test.setBlockType(MinecraftBlockTypes.Cobblestone, { x: 10, y: 7, z: 7 });\r    const minecartRideableComp = minecart.getComponent(EntityComponentTypes.Rideable);\r    minecartRideableComp?.addRider(pig);\r    test.succeedWhenEntityPresent(MinecraftEntityTypes.Pig, { x: 8, y: 3, z: 1 }, true);\r }\r register(\"ChallengeTests\", \"minibiomes\", minibiomes).structureName(\"gametests:minibiomes\").maxTicks(160);\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityrideablecomponent",
        "class"
      ],
      "signature": "addRider(rider: Entity): boolean"
    },
    {
      "id": "@minecraft/server.EntityRidingComponent",
      "name": "EntityRidingComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This component is added to any entity when it is riding\r another entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityridingcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntitySaturationComponent",
      "name": "EntitySaturationComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the interactions with this entity for Saturation.\r Wraps the `minecraft.player.saturation` attribute.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitysaturationcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityScaleComponent",
      "name": "EntityScaleComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Sets the entity's visual size.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityscalecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntitySkinIdComponent",
      "name": "EntitySkinIdComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Skin Id value. Can be used to differentiate skins, such as\r base skins for villagers.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityskinidcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntitySpawnAfterEvent",
      "name": "EntitySpawnAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains data related to an entity spawning within the\r world.\r ```typescript\r  function logEntitySpawnEvent(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   // register a new function that is called when a new entity is created.\r   world.afterEvents.entitySpawn.subscribe((entityEvent: EntitySpawnAfterEvent) => {\r     if (entityEvent && entityEvent.entity) {\r       log(`New entity of type ${entityEvent.entity.typeId} created!`, 1);\r     } else {\r       log(`The entity event did not work as expected.`, -1);\r     }\r   });\r    system.runTimeout(() => {\r     targetLocation.dimension.spawnEntity(\r       \"minecraft:horse<minecraft:ageable_grow_up>\",\r       Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\r     );\r   }, 20);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityspawnafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntitySpawnAfterEventSignal",
      "name": "EntitySpawnAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Registers a script-based event handler for handling what\r happens when an entity spawns.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityspawnaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityStrengthComponent",
      "name": "EntityStrengthComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the entity's ability to carry items. An entity with\r a higher strength would have higher potential carry capacity\r and more item slots.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitystrengthcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityTameableComponent",
      "name": "EntityTameableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the rules for an entity to be tamed by the player.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytameablecomponent",
        "class"
      ],
      "signature": "tame(player: Player): boolean"
    },
    {
      "id": "@minecraft/server.EntityTameMountComponent",
      "name": "EntityTameMountComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains options for taming a rideable entity based on the\r entity that mounts it.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytamemountcomponent",
        "class"
      ],
      "signature": "tame(showParticles: boolean): void"
    },
    {
      "id": "@minecraft/server.EntityType",
      "name": "EntityType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents information about a type of entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytype",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityTypeFamilyComponent",
      "name": "EntityTypeFamilyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Identifier of this entity type - for example,\r 'minecraft:skeleton'.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytypefamilycomponent",
        "class"
      ],
      "signature": "getTypeFamilies(): string[]"
    },
    {
      "id": "@minecraft/server.EntityTypes",
      "name": "EntityTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Used for accessing all entity types currently available for\r use within the world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitytypes",
        "class"
      ],
      "signature": "get(identifier: string): EntityType | undefined"
    },
    {
      "id": "@minecraft/server.EntityUnderwaterMovementComponent",
      "name": "EntityUnderwaterMovementComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines the general movement speed underwater of this\r entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityunderwatermovementcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityVariantComponent",
      "name": "EntityVariantComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Used to differentiate the component group of a variant of an\r entity from others. (e.g. ocelot, villager).\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityvariantcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntityWantsJockeyComponent",
      "name": "EntityWantsJockeyComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When added, this component signifies that this entity wants\r to become a jockey.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitywantsjockeycomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ExplosionAfterEvent",
      "name": "ExplosionAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an explosion that has\r happened.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionafterevent",
        "class"
      ],
      "signature": "getImpactedBlocks(): Block[]"
    },
    {
      "id": "@minecraft/server.ExplosionAfterEventSignal",
      "name": "ExplosionAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when an explosion\r occurs.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ExplosionBeforeEvent",
      "name": "ExplosionBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an explosion that has\r happened.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionbeforeevent",
        "class"
      ],
      "signature": "setImpactedBlocks(blocks: Block[]): void"
    },
    {
      "id": "@minecraft/server.ExplosionBeforeEventSignal",
      "name": "ExplosionBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before an explosion\r occurs.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionbeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.FeedItem",
      "name": "FeedItem",
      "type": "class",
      "module": "@minecraft/server",
      "description": "As part of the Healable component, represents a specific\r item that can be fed to an entity to cause health effects.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "feeditem",
        "class"
      ],
      "signature": "getEffects(): FeedItemEffect[]"
    },
    {
      "id": "@minecraft/server.FeedItemEffect",
      "name": "FeedItemEffect",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents an effect that is applied as a result of a food\r item being fed to an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "feeditemeffect",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.FluidContainer",
      "name": "FluidContainer",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents constants related to fluid containers.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "fluidcontainer",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.GameRuleChangeAfterEvent",
      "name": "GameRuleChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a changed world.gameRules\r property.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamerulechangeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.GameRuleChangeAfterEventSignal",
      "name": "GameRuleChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a\r world.gameRules property has changed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamerulechangeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.GameRules",
      "name": "GameRules",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the game rules for a world experience.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "gamerules",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.InputInfo",
      "name": "InputInfo",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains the input information for a client instance.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputinfo",
        "class"
      ],
      "signature": "getButtonState(button: InputButton): ButtonState"
    },
    {
      "id": "@minecraft/server.ItemCompleteUseAfterEvent",
      "name": "ItemCompleteUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item completing\r being charged.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcompleteuseafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemCompleteUseAfterEventSignal",
      "name": "ItemCompleteUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to the completion of\r charging for a chargeable item.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcompleteuseaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemCompleteUseEvent",
      "name": "ItemCompleteUseEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item completing\r being charged.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcompleteuseevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponent",
      "name": "ItemComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Base class for item components.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponentBeforeDurabilityDamageEvent",
      "name": "ItemComponentBeforeDurabilityDamageEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an item before it is damaged\r from hitting an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentbeforedurabilitydamageevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponentCompleteUseEvent",
      "name": "ItemComponentCompleteUseEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item completing\r being charged via a component.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentcompleteuseevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponentConsumeEvent",
      "name": "ItemComponentConsumeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a food item being consumed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentconsumeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponentHitEntityEvent",
      "name": "ItemComponentHitEntityEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding when an item is used to hit\r an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponenthitentityevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponentMineBlockEvent",
      "name": "ItemComponentMineBlockEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding the mining of a block using\r an item.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentmineblockevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponentRegistry",
      "name": "ItemComponentRegistry",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides the functionality for registering custom components\r for items.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentregistry",
        "class"
      ],
      "signature": "registerCustomComponent(name: string, itemCustomComponent: ItemCustomComponent): void"
    },
    {
      "id": "@minecraft/server.ItemComponentUseEvent",
      "name": "ItemComponentUseEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding the use of an item.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentuseevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemComponentUseOnEvent",
      "name": "ItemComponentUseOnEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding the use of an item on a block\r via a component.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcomponentuseonevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemCompostableComponent",
      "name": "ItemCompostableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present, the item can be composted in the composter\r block if the composting chance is in the range [1 - 100].\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcompostablecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemCooldownComponent",
      "name": "ItemCooldownComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item has a cooldown effect\r when used by entities.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcooldowncomponent",
        "class"
      ],
      "signature": "getCooldownTicksRemaining(player: Player): number"
    },
    {
      "id": "@minecraft/server.ItemCustomComponentInstance",
      "name": "ItemCustomComponentInstance",
      "type": "class",
      "module": "@minecraft/server",
      "description": "An instance of a custom component on an item.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentinstance",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemDurabilityComponent",
      "name": "ItemDurabilityComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item can take damage in the\r process of being used. Note that this component only applies\r to data-driven items.\r ```typescript\r  function giveHurtDiamondSword(\r     targetLocation: DimensionLocation\r ) {\r   const hurtDiamondSword = new ItemStack(MinecraftItemTypes.DiamondSword);\r    const durabilityComponent = hurtDiamondSword.getComponent(ItemComponentTypes.Durability) as ItemDurabilityComponent;\r    if (durabilityComponent !== undefined) {\r     durabilityComponent.damage = durabilityComponent.maxDurability / 2;\r   }\r    for (const player of world.getAllPlayers()) {\r     const inventory = player.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\r     if (inventory && inventory.container) {\r       inventory.container.addItem(hurtDiamondSword);\r     }\r   }\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemdurabilitycomponent",
        "class"
      ],
      "signature": "getDamageChance(unbreakingEnchantmentLevel?: number): number"
    },
    {
      "id": "@minecraft/server.ItemDyeableComponent",
      "name": "ItemDyeableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item can be dyed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemdyeablecomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemEnchantableComponent",
      "name": "ItemEnchantableComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item can have enchantments\r applied to it.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemenchantablecomponent",
        "class"
      ],
      "signature": "addEnchantment(enchantment: Enchantment): void"
    },
    {
      "id": "@minecraft/server.ItemFoodComponent",
      "name": "ItemFoodComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "When present on an item, this item is consumable by\r entities. Note that this component only applies to\r data-driven items.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemfoodcomponent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemReleaseUseAfterEvent",
      "name": "ItemReleaseUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item when the\r player has finished using the item and released the build\r action.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemreleaseuseafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemReleaseUseAfterEventSignal",
      "name": "ItemReleaseUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to the releasing of\r charging for a chargeable item.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemreleaseuseaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemStack",
      "name": "ItemStack",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Defines a collection of items.\r ```typescript\r  function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\r   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\r   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\r    const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\r   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\r   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\r    log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\r   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\r    log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\r   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\r    log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPickaxeLoc.y}, ${diamondPickaxeLoc.z})`);\r   targetLocation.dimension.spawnItem(onePickaxe, diamondPickaxeLoc);\r }\r ```\r ```typescript\r  function givePlayerEquipment(\r     targetLocation: DimensionLocation\r ) {\r   const players = world.getAllPlayers();\r    const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };\r   const armorStand = players[0].dimension.spawnEntity(MinecraftItemTypes.ArmorStand, armorStandLoc);\r    const equipmentCompPlayer = players[0].getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r   if (equipmentCompPlayer) {\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r     equipmentCompPlayer.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r   }\r    const equipmentCompArmorStand = armorStand.getComponent(EntityComponentTypes.Equippable) as EntityEquippableComponent;\r   if (equipmentCompArmorStand) {\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Head, new ItemStack(MinecraftItemTypes.GoldenHelmet));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Chest, new ItemStack(MinecraftItemTypes.IronChestplate));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Legs, new ItemStack(MinecraftItemTypes.DiamondLeggings));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Feet, new ItemStack(MinecraftItemTypes.NetheriteBoots));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Mainhand, new ItemStack(MinecraftItemTypes.WoodenSword));\r     equipmentCompArmorStand.setEquipment(EquipmentSlot.Offhand, new ItemStack(MinecraftItemTypes.Shield));\r   }\r }\r ```\r ```typescript\r  function spawnFeatherItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const featherItem = new ItemStack(MinecraftItemTypes.Feather, 1);\r    targetLocation.dimension.spawnItem(featherItem, targetLocation);\r   log(`New feather created at ${targetLocation.x}, ${targetLocation.y}, ${targetLocation.z}!`);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstack",
        "class"
      ],
      "signature": "clearDynamicProperties(): void"
    },
    {
      "id": "@minecraft/server.ItemStartUseAfterEvent",
      "name": "ItemStartUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item starting\r to be charged.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstartuseafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemStartUseAfterEventSignal",
      "name": "ItemStartUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to the start of\r charging for a chargeable item.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstartuseaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemStartUseOnAfterEvent",
      "name": "ItemStartUseOnAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an item being used on a\r block. This event fires when a player presses the the Use\r Item / Place Block button to successfully use an item or\r place a block. Fires for the first block that is interacted\r with when performing a build action. Note: This event cannot\r be used with Hoe or Axe items.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstartuseonafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemStartUseOnAfterEventSignal",
      "name": "ItemStartUseOnAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to an item starting\r being used on a block event.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstartuseonaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemStopUseAfterEvent",
      "name": "ItemStopUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a chargeable item has\r finished an items use cycle, or when the player has released\r the use action with the item.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstopuseafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemStopUseAfterEventSignal",
      "name": "ItemStopUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to the stopping of\r charging for an item that has a registered\r minecraft:chargeable component.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstopuseaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemStopUseOnAfterEvent",
      "name": "ItemStopUseOnAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an item that has stopped\r being used on a block. This event fires when a player\r successfully uses an item or places a block by pressing the\r Use Item / Place Block button. If multiple blocks are\r placed, this event will only occur once at the beginning of\r the block placement. Note: This event cannot be used with\r Hoe or Axe items.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstopuseonafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemStopUseOnAfterEventSignal",
      "name": "ItemStopUseOnAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to an item stops used\r on a block event.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemstopuseonaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemType",
      "name": "ItemType",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the type of an item - for example, Wool.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemtype",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemTypes",
      "name": "ItemTypes",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Returns the set of item types registered within Minecraft.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemtypes",
        "class"
      ],
      "signature": "get(itemId: string): ItemType | undefined"
    },
    {
      "id": "@minecraft/server.ItemUseAfterEvent",
      "name": "ItemUseAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an item being used on a\r block. This event fires when an item used by a player\r successfully triggers an entity interaction.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemuseafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemUseAfterEventSignal",
      "name": "ItemUseAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to an item use event.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemuseaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemUseBeforeEvent",
      "name": "ItemUseBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to an item being used.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemusebeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemUseBeforeEventSignal",
      "name": "ItemUseBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that fire before an item is used.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemusebeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemUseOnEvent",
      "name": "ItemUseOnEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding the use of an item on a\r block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemuseonevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.LeverActionAfterEvent",
      "name": "LeverActionAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a lever\r activating or deactivating.\r ```typescript\r  function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a lever\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const lever = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || lever === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   lever.setPermutation(\r     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r   );\r    world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r     const eventLoc = leverActionEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Lever activate event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "leveractionafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.LeverActionAfterEventSignal",
      "name": "LeverActionAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to lever moves\r (activates or deactivates).\r ```typescript\r  function leverActionEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a lever\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\r   const lever = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (cobblestone === undefined || lever === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\r   lever.setPermutation(\r     BlockPermutation.resolve(MinecraftBlockTypes.Lever).withState(\"lever_direction\", \"up_north_south\")\r   );\r    world.afterEvents.leverAction.subscribe((leverActionEvent: LeverActionAfterEvent) => {\r     const eventLoc = leverActionEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\r       log(\"Lever activate event at tick \" + system.currentTick);\r     }\r   });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "leveractionaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ListBlockVolume",
      "name": "ListBlockVolume",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Volume composed of an unordered container of unique block\r locations.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "listblockvolume",
        "class"
      ],
      "signature": "add(locations: Vector3[]): void"
    },
    {
      "id": "@minecraft/server.MolangVariableMap",
      "name": "MolangVariableMap",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a set of additional variable values for further\r defining how rendering and animations function.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "molangvariablemap",
        "class"
      ],
      "signature": "setColorRGB(variableName: string, color: RGB): void"
    },
    {
      "id": "@minecraft/server.PistonActivateAfterEvent",
      "name": "PistonActivateAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a piston\r expanding or retracting.\r ```typescript\r  function pistonAfterEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a couple of piston blocks\r   const piston = targetLocation.dimension.getBlock(targetLocation);\r   const button = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y + 1,\r     z: targetLocation.z,\r   });\r    if (piston === undefined || button === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    piston.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Piston).withState(\"facing_direction\", 3));\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\"facing_direction\", 1));\r    world.afterEvents.pistonActivate.subscribe((pistonEvent: PistonActivateAfterEvent) => {\r     const eventLoc = pistonEvent.piston.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Piston event at \" +\r           system.currentTick +\r           (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Expanding ? \" Expanding\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Expanded ? \" Expanded\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Retracting ? \" Retracting\" : \"\") +\r           (pistonEvent.piston.state === BlockPistonState.Retracted ? \" Retracted\" : \"\")\r       );\r     }\r   });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pistonactivateafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PistonActivateAfterEventSignal",
      "name": "PistonActivateAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to piston activations.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pistonactivateaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Player",
      "name": "Player",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a player within the world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "player",
        "class"
      ],
      "signature": "addExperience(amount: number): number"
    },
    {
      "id": "@minecraft/server.PlayerBreakBlockAfterEvent",
      "name": "PlayerBreakBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a player\r breaks a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbreakblockafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerBreakBlockAfterEventSignal",
      "name": "PlayerBreakBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a player breaks\r a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbreakblockaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerBreakBlockBeforeEvent",
      "name": "PlayerBreakBlockBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r breaks a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbreakblockbeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerBreakBlockBeforeEventSignal",
      "name": "PlayerBreakBlockBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before a player\r breaks a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbreakblockbeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerButtonInputAfterEvent",
      "name": "PlayerButtonInputAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Event data for when a player presses a button.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbuttoninputafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerButtonInputAfterEventSignal",
      "name": "PlayerButtonInputAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to player inputs.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerbuttoninputaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerCursorInventoryComponent",
      "name": "PlayerCursorInventoryComponent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents the players cursor inventory. Used when moving\r items between between containers in the inventory UI. Not\r used with touch controls.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playercursorinventorycomponent",
        "class"
      ],
      "signature": "clear(): void"
    },
    {
      "id": "@minecraft/server.PlayerDimensionChangeAfterEvent",
      "name": "PlayerDimensionChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a player's\r dimension having been changed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerdimensionchangeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerDimensionChangeAfterEventSignal",
      "name": "PlayerDimensionChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to successful player\r dimension changes.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerdimensionchangeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerEmoteAfterEvent",
      "name": "PlayerEmoteAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Removes the specified callback from a player dimension\r change after event.\r  This function can't be called in read-only mode.\r  This function can be called in early-execution mode.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [
        "readonly-restricted"
      ],
      "keywords": [
        "playeremoteafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerEmoteAfterEventSignal",
      "name": "PlayerEmoteAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playeremoteaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerGameModeChangeAfterEvent",
      "name": "PlayerGameModeChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a players game\r mode is changed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playergamemodechangeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerGameModeChangeAfterEventSignal",
      "name": "PlayerGameModeChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to after a players game\r mode is changed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playergamemodechangeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerGameModeChangeBeforeEvent",
      "name": "PlayerGameModeChangeBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r interacts with an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playergamemodechangebeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerGameModeChangeBeforeEventSignal",
      "name": "PlayerGameModeChangeBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before a players\r game mode is changed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playergamemodechangebeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEvent",
      "name": "PlayerHotbarSelectedSlotChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after changing the\r selected hotbar slot for a player.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerhotbarselectedslotchangeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerHotbarSelectedSlotChangeAfterEventSignal",
      "name": "PlayerHotbarSelectedSlotChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected after a player selected\r hotbar slot is changed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerhotbarselectedslotchangeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInputModeChangeAfterEvent",
      "name": "PlayerInputModeChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Event data for when a player input mode changes.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputmodechangeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInputModeChangeAfterEventSignal",
      "name": "PlayerInputModeChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to player input mode.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputmodechangeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEvent",
      "name": "PlayerInputPermissionCategoryChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a players\r input permissions change.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputpermissioncategorychangeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInputPermissionCategoryChangeAfterEventSignal",
      "name": "PlayerInputPermissionCategoryChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to after a players\r input permissions change.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputpermissioncategorychangeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInputPermissions",
      "name": "PlayerInputPermissions",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains APIs to enable/disable player input permissions.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinputpermissions",
        "class"
      ],
      "signature": "isPermissionCategoryEnabled(permissionCategory: InputPermissionCategory): boolean"
    },
    {
      "id": "@minecraft/server.PlayerInteractWithBlockAfterEvent",
      "name": "PlayerInteractWithBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a player\r successfully interacts with a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithblockafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInteractWithBlockAfterEventSignal",
      "name": "PlayerInteractWithBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to after a player\r interacts with a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithblockaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInteractWithBlockBeforeEvent",
      "name": "PlayerInteractWithBlockBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r interacts with a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithblockbeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInteractWithBlockBeforeEventSignal",
      "name": "PlayerInteractWithBlockBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before a player\r interacts with a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithblockbeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInteractWithEntityAfterEvent",
      "name": "PlayerInteractWithEntityAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a player\r successfully interacts with an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithentityafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInteractWithEntityAfterEventSignal",
      "name": "PlayerInteractWithEntityAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to after a player\r interacts with an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithentityaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInteractWithEntityBeforeEvent",
      "name": "PlayerInteractWithEntityBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event before a player\r interacts with an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithentitybeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInteractWithEntityBeforeEventSignal",
      "name": "PlayerInteractWithEntityBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before a player\r interacts with an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinteractwithentitybeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInventoryItemChangeAfterEvent",
      "name": "PlayerInventoryItemChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event after a player's\r inventory item changes.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinventoryitemchangeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerInventoryItemChangeAfterEventSignal",
      "name": "PlayerInventoryItemChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected after a player's\r inventory item is changed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerinventoryitemchangeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerJoinAfterEvent",
      "name": "PlayerJoinAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a player that has joined.\r See the playerSpawn event for more detailed information that\r could be returned after the first time a player has spawned\r within the game.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerjoinafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerJoinAfterEventSignal",
      "name": "PlayerJoinAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to a player joining the\r world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerjoinaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerLeaveAfterEvent",
      "name": "PlayerLeaveAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a player that has left the\r world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerleaveafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerLeaveAfterEventSignal",
      "name": "PlayerLeaveAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to a player leaving the\r world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerleaveaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerLeaveBeforeEvent",
      "name": "PlayerLeaveBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding a player that is leaving the\r world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerleavebeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerLeaveBeforeEventSignal",
      "name": "PlayerLeaveBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to a player leaving the\r world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerleavebeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerPlaceBlockAfterEvent",
      "name": "PlayerPlaceBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information regarding an event where a player\r places a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerplaceblockafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerPlaceBlockAfterEventSignal",
      "name": "PlayerPlaceBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a block is\r placed by a player.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerplaceblockaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerSpawnAfterEvent",
      "name": "PlayerSpawnAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "An event that contains more information about a player\r spawning.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerspawnafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlayerSpawnAfterEventSignal",
      "name": "PlayerSpawnAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Registers an event when a player is spawned (or re-spawned\r after death) and fully ready within the world.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playerspawnaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PressurePlatePopAfterEvent",
      "name": "PressurePlatePopAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a pressure plate\r pop.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pressureplatepopafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PressurePlatePopAfterEventSignal",
      "name": "PressurePlatePopAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a pressure\r plate is popped.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pressureplatepopaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PressurePlatePushAfterEvent",
      "name": "PressurePlatePushAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a pressure plate\r push.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pressureplatepushafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PressurePlatePushAfterEventSignal",
      "name": "PressurePlatePushAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a pressure\r plate is pushed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "pressureplatepushaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ProjectileHitBlockAfterEvent",
      "name": "ProjectileHitBlockAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a projectile hitting a\r block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectilehitblockafterevent",
        "class"
      ],
      "signature": "getBlockHit(): BlockHitInformation"
    },
    {
      "id": "@minecraft/server.ProjectileHitBlockAfterEventSignal",
      "name": "ProjectileHitBlockAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a projectile\r hits a block.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectilehitblockaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ProjectileHitEntityAfterEvent",
      "name": "ProjectileHitEntityAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to a projectile hitting an\r entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectilehitentityafterevent",
        "class"
      ],
      "signature": "getEntityHit(): EntityHitInformation"
    },
    {
      "id": "@minecraft/server.ProjectileHitEntityAfterEventSignal",
      "name": "ProjectileHitEntityAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a projectile\r hits an entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectilehitentityaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Scoreboard",
      "name": "Scoreboard",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains objectives and participants for the scoreboard.\r ```typescript\r  function updateScoreboard(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const scoreboardObjectiveId = \"scoreboard_demo_objective\";\r   const scoreboardObjectiveDisplayName = \"Demo Objective\";\r    const players = world.getPlayers();\r    // Ensure a new objective.\r   let objective = world.scoreboard.getObjective(scoreboardObjectiveId);\r    if (!objective) {\r     objective = world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);\r   }\r    // get the scoreboard identity for player 0\r   const player0Identity = players[0].scoreboardIdentity;\r    if (player0Identity === undefined) {\r     log(\"Could not get a scoreboard identity for player 0.\");\r     return -1;\r   }\r    // initialize player score to 100;\r   objective.setScore(player0Identity, 100);\r    world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\r     objective: objective,\r     sortOrder: ObjectiveSortOrder.Descending,\r   });\r    const playerScore = objective.getScore(player0Identity) ?? 0;\r    // score should now be 110.\r   objective.setScore(player0Identity, playerScore + 10);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboard",
        "class"
      ],
      "signature": "addObjective(objectiveId: string, displayName?: string): ScoreboardObjective"
    },
    {
      "id": "@minecraft/server.ScoreboardIdentity",
      "name": "ScoreboardIdentity",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains an identity of the scoreboard item.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardidentity",
        "class"
      ],
      "signature": "getEntity(): Entity | undefined"
    },
    {
      "id": "@minecraft/server.ScoreboardObjective",
      "name": "ScoreboardObjective",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains objectives and participants for the scoreboard.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardobjective",
        "class"
      ],
      "signature": "addScore(participant: Entity | ScoreboardIdentity | string, scoreToAdd: number): number"
    },
    {
      "id": "@minecraft/server.ScoreboardScoreInfo",
      "name": "ScoreboardScoreInfo",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a pair of a scoreboard participant and its\r respective score.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardscoreinfo",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ScreenDisplay",
      "name": "ScreenDisplay",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information about user interface elements that are\r showing up on the screen.\r ```typescript\r  function setTitle(targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length > 0) {\r     players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");\r   }\r }\r ```\r ```typescript\r  function setTitleAndSubtitle(\r     targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    players[0].onScreenDisplay.setTitle(\"Chapter 1\", {\r     stayDuration: 100,\r     fadeInDuration: 2,\r     fadeOutDuration: 4,\r     subtitle: \"Trouble in Block Town\",\r   });\r }\r ```\r ```typescript\r  function countdown(targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    players[0].onScreenDisplay.setTitle(\"Get ready!\", {\r     stayDuration: 220,\r     fadeInDuration: 2,\r     fadeOutDuration: 4,\r     subtitle: \"10\",\r   });\r    let countdown = 10;\r    const intervalId = system.runInterval(() => {\r     countdown--;\r     players[0].onScreenDisplay.updateSubtitle(countdown.toString());\r      if (countdown == 0) {\r       system.clearRun(intervalId);\r     }\r   }, 20);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "screendisplay",
        "class"
      ],
      "signature": "getHiddenHudElements(): HudElement[]"
    },
    {
      "id": "@minecraft/server.ScriptEventCommandMessageAfterEvent",
      "name": "ScriptEventCommandMessageAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Returns additional data about a /scriptevent command\r invocation.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scripteventcommandmessageafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ScriptEventCommandMessageAfterEventSignal",
      "name": "ScriptEventCommandMessageAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Allows for registering an event handler that responds to\r inbound /scriptevent commands.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scripteventcommandmessageaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Seat",
      "name": "Seat",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Describes a particular seating position on this rideable\r entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "seat",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ShutdownBeforeEventSignal",
      "name": "ShutdownBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides an adaptable interface for callers to subscribe to\r an event that fires before the game world shuts down. This\r event occurs after players have left, but before the world\r has closed.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "shutdownbeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ShutdownEvent",
      "name": "ShutdownEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The event object that gets dispatched when the game world is\r shutting down.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "shutdownevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.StartupBeforeEventSignal",
      "name": "StartupBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "startupbeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.StartupEvent",
      "name": "StartupEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This function can't be called in read-only mode.\r  This function can be called in early-execution mode.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [
        "readonly-restricted"
      ],
      "keywords": [
        "startupevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Structure",
      "name": "Structure",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a loaded structure template (.mcstructure file).\r Structures can be placed in a world using the /structure\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structure",
        "class"
      ],
      "signature": "getBlockPermutation(location: Vector3): BlockPermutation | undefined"
    },
    {
      "id": "@minecraft/server.StructureManager",
      "name": "StructureManager",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manager for Structure related APIs. Includes APIs for\r creating, getting, placing and deleting Structures.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structuremanager",
        "class"
      ],
      "signature": "createEmpty(identifier: string, size: Vector3, saveMode?: StructureSaveMode): Structure"
    },
    {
      "id": "@minecraft/server.System",
      "name": "System",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A class that provides system-level events and functions.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "system",
        "class"
      ],
      "signature": "clearJob(jobId: number): void"
    },
    {
      "id": "@minecraft/server.SystemAfterEvents",
      "name": "SystemAfterEvents",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Provides a set of events that fire within the broader\r scripting system within Minecraft.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "systemafterevents",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.SystemBeforeEvents",
      "name": "SystemBeforeEvents",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A set of events that fire before an actual action occurs. In\r most cases, you can potentially cancel or modify the\r impending event. Note that in before events any APIs that\r modify gameplay state will not function and will throw an\r error.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "systembeforeevents",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.SystemInfo",
      "name": "SystemInfo",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains device information, like memory tier.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "systeminfo",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.TargetBlockHitAfterEvent",
      "name": "TargetBlockHitAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a target block\r hit.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "targetblockhitafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.TargetBlockHitAfterEventSignal",
      "name": "TargetBlockHitAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a target block\r is hit.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "targetblockhitaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.Trigger",
      "name": "Trigger",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Represents a trigger for firing an event.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "trigger",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.TripWireTripAfterEvent",
      "name": "TripWireTripAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes to a trip wire trip.\r ```typescript\r  function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a tripwire\r   const redstone = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y - 1,\r     z: targetLocation.z,\r   });\r   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r    if (redstone === undefined || tripwire === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r    world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r     const eventLoc = tripWireTripEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Tripwire trip event at tick \" +\r           system.currentTick +\r           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r       );\r     }\r   });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "tripwiretripafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.TripWireTripAfterEventSignal",
      "name": "TripWireTripAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to when a trip wire is\r tripped.\r ```typescript\r  function tripWireTripEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   // set up a tripwire\r   const redstone = targetLocation.dimension.getBlock({\r     x: targetLocation.x,\r     y: targetLocation.y - 1,\r     z: targetLocation.z,\r   });\r   const tripwire = targetLocation.dimension.getBlock(targetLocation);\r    if (redstone === undefined || tripwire === undefined) {\r     log(\"Could not find block at location.\");\r     return -1;\r   }\r    redstone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.RedstoneBlock));\r   tripwire.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.TripWire));\r    world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: TripWireTripAfterEvent) => {\r     const eventLoc = tripWireTripEvent.block.location;\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {\r       log(\r         \"Tripwire trip event at tick \" +\r           system.currentTick +\r           (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")\r       );\r     }\r   });\r }\r ```\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "tripwiretripaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.WeatherChangeAfterEvent",
      "name": "WeatherChangeAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes in weather in the\r environment.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weatherchangeafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.WeatherChangeAfterEventSignal",
      "name": "WeatherChangeAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to weather changing.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weatherchangeaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.WeatherChangeBeforeEvent",
      "name": "WeatherChangeBeforeEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains information related to changes in weather in the\r environment.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weatherchangebeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.WeatherChangeBeforeEventSignal",
      "name": "WeatherChangeBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Manages callbacks that are connected to before weather\r changing.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "weatherchangebeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.World",
      "name": "World",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A class that wraps the state of a world - a set of\r dimensions and the environment of Minecraft.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "world",
        "class"
      ],
      "signature": "clearDynamicProperties(): void"
    },
    {
      "id": "@minecraft/server.WorldAfterEvents",
      "name": "WorldAfterEvents",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Contains a set of events that are available across the scope\r of the World.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldafterevents",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.WorldBeforeEvents",
      "name": "WorldBeforeEvents",
      "type": "class",
      "module": "@minecraft/server",
      "description": "A set of events that fire before an actual action occurs. In\r most cases, you can potentially cancel or modify the\r impending event. Note that in before events any APIs that\r modify gameplay state will not function and will throw an\r error. (e.g., dimension.spawnEntity)\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldbeforeevents",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.WorldLoadAfterEvent",
      "name": "WorldLoadAfterEvent",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This property can be read in early-execution mode.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldloadafterevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.WorldLoadAfterEventSignal",
      "name": "WorldLoadAfterEventSignal",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldloadaftereventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockBoundingBox",
      "name": "BlockBoundingBox",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "A BlockBoundingBox is an interface to an object which\r represents an AABB aligned rectangle.\r The BlockBoundingBox assumes that it was created in a valid\r state (min <= max) but cannot guarantee it (unless it was\r The min/max coordinates represent the diametrically opposite\r corners of the rectangle.\r The BlockBoundingBox is not a representation of blocks - it\r has no association with any type, it is just a mathematical\r construct - so a rectangle with\r ( 0,0,0 ) -> ( 0,0,0 )\r BlockVolume} object)\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockboundingbox",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.BlockCustomComponent",
      "name": "BlockCustomComponent",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains a set of events that will be raised for a block.\r This object must be bound using the BlockRegistry.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponent",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.BlockEventOptions",
      "name": "BlockEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains optional parameters for registering a block event.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockeventoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.BlockFillOptions",
      "name": "BlockFillOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for a block fill operation.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockfilloptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.BlockFilter",
      "name": "BlockFilter",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Options to include or exclude blocks based on type, tag or\r permutation. If no include options are added it will select\r all blocks that are not rejected by the exclude options. If\r at least one include option is added the block must match\r one of the include options to not be rejected.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockfilter",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.BlockHitInformation",
      "name": "BlockHitInformation",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains more information for events where a block is hit.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockhitinformation",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.BlockRaycastHit",
      "name": "BlockRaycastHit",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains information for block raycast hit results.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockraycasthit",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.BlockRaycastOptions",
      "name": "BlockRaycastOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for configuring a block raycast\r query.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockraycastoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CameraFadeOptions",
      "name": "CameraFadeOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Used to initiate a full-screen color fade.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerafadeoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CameraFadeTimeOptions",
      "name": "CameraFadeTimeOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains timings for a fade transition.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerafadetimeoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CameraFixedBoomOptions",
      "name": "CameraFixedBoomOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Options to control pivot points and offsets of the third\r person boom preset.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerafixedboomoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CameraSetFacingOptions",
      "name": "CameraSetFacingOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Offsets the camera from center by <x, y>.",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerasetfacingoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CameraSetLocationOptions",
      "name": "CameraSetLocationOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerasetlocationoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CameraSetPosOptions",
      "name": "CameraSetPosOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerasetposoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CameraSetRotOptions",
      "name": "CameraSetRotOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "camerasetrotoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CameraTargetOptions",
      "name": "CameraTargetOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Used to target an entity with a free camera.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "cameratargetoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommand",
      "name": "CustomCommand",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Define the custom command, including name, permissions, and\r parameters.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommand",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommandParameter",
      "name": "CustomCommandParameter",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Definition for each parameter expected by the custom\r command.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandparameter",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommandResult",
      "name": "CustomCommandResult",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Interface returned from custom command callback function.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommandresult",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.DefinitionModifier",
      "name": "DefinitionModifier",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains a set of updates to the component definition state\r of an entity.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "definitionmodifier",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.DimensionLocation",
      "name": "DimensionLocation",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "An exact coordinate within the world, including its\r dimension and location.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "dimensionlocation",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EaseOptions",
      "name": "EaseOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains options associated with easing between positions\r and/or rotations.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "easeoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.Enchantment",
      "name": "Enchantment",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "This interface represents a specific leveled enchantment\r that is applied to an item.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantment",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityApplyDamageByProjectileOptions",
      "name": "EntityApplyDamageByProjectileOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Additional options for when damage has been applied via a\r projectile.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityapplydamagebyprojectileoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityApplyDamageOptions",
      "name": "EntityApplyDamageOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Additional descriptions and metadata for a damage event.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityapplydamageoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityDamageSource",
      "name": "EntityDamageSource",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Provides information about how damage has been applied to an\r entity.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydamagesource",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityDataDrivenTriggerEventOptions",
      "name": "EntityDataDrivenTriggerEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Specifies additional filters that are used in registering a\r data driven trigger event for entities.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entitydatadriventriggereventoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityEffectOptions",
      "name": "EntityEffectOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for entity effects.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityeffectoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityEventOptions",
      "name": "EntityEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains optional parameters for registering an entity\r event.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityeventoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityFilter",
      "name": "EntityFilter",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains options for filtering entities.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityfilter",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityHitInformation",
      "name": "EntityHitInformation",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional information about an entity that was\r hit.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityhitinformation",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityQueryOptions",
      "name": "EntityQueryOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains options for selecting entities within an area.\r ```typescript\r  function blockConditional(targetLocation: DimensionLocation) {\r   targetLocation.dimension\r     .getEntities({\r       type: \"fox\",\r     })\r     .filter((entity) => {\r       const block = targetLocation.dimension.getBlock({\r         x: entity.location.x,\r         y: entity.location.y - 1,\r         z: entity.location.z,\r       });\r        return block !== undefined && block.matches(\"minecraft:stone\");\r     })\r     .forEach((entity) => {\r       targetLocation.dimension.spawnEntity(\"salmon\", entity.location);\r     });\r }\r ```\r ```typescript\r  function findEntitiesHavingPropertyEqualsTo(\r     targetLocation: DimensionLocation\r ) {\r   // Minecraft bees have a has_nectar boolean property\r   const queryOption: EntityQueryOptions = {\r     propertyOptions: [{ propertyId: \"minecraft:has_nectar\", value: { equals: true } }],\r   };\r    const entities = targetLocation.dimension.getEntities(queryOption);\r }\r ```\r ```typescript\r  function playSoundChained(targetLocation: DimensionLocation) {\r   const targetPlayers = targetLocation.dimension.getPlayers();\r   const originEntities = targetLocation.dimension.getEntities({\r     type: \"armor_stand\",\r     name: \"myArmorStand\",\r     tags: [\"dummyTag1\"],\r     excludeTags: [\"dummyTag2\"],\r   });\r    originEntities.forEach((entity) => {\r     targetPlayers.forEach((player) => {\r       player.playSound(\"raid.horn\");\r     });\r   });\r }\r ```\r ```typescript\r  function setScoreboardChained(\r     targetLocation: DimensionLocation\r ) {\r   const objective = world.scoreboard.addObjective(\"scoreObjective1\", \"dummy\");\r   targetLocation.dimension\r     .getEntities({\r       type: \"armor_stand\",\r       name: \"myArmorStand\",\r     })\r     .forEach((entity) => {\r       if (entity.scoreboardIdentity !== undefined) {\r         objective.setScore(entity.scoreboardIdentity, -1);\r       }\r     });\r }\r ```\r ```typescript\r  function summonMobChained(targetLocation: DimensionLocation) {\r   const armorStandArray = targetLocation.dimension.getEntities({\r     type: \"armor_stand\",\r   });\r   const playerArray = targetLocation.dimension.getPlayers({\r     location: { x: 0, y: -60, z: 0 },\r     closest: 4,\r     maxDistance: 15,\r   });\r   armorStandArray.forEach((entity) => {\r     playerArray.forEach((player) => {\r       targetLocation.dimension.spawnEntity(\"pig\", {\r         x: player.location.x + 1,\r         y: player.location.y,\r         z: player.location.z,\r       });\r     });\r   });\r }\r ```\r ```typescript\r  function bounceSkeletons(targetLocation: DimensionLocation) {\r   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r    // create some sample mob data\r   for (let i = 0; i < 10; i++) {\r     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\r   }\r    const eqo: EntityQueryOptions = {\r     type: \"skeleton\",\r   };\r    for (const entity of targetLocation.dimension.getEntities(eqo)) {\r     entity.applyKnockback(0, 0, 0, 1);\r   }\r }\r ```\r ```typescript\r  function tagsQuery(targetLocation: DimensionLocation) {\r   const mobs = [\"creeper\", \"skeleton\", \"sheep\"];\r    // create some sample mob data\r   for (let i = 0; i < 10; i++) {\r     const mobTypeId = mobs[i % mobs.length];\r     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\r     entity.addTag(\"mobparty.\" + mobTypeId);\r   }\r    const eqo: EntityQueryOptions = {\r     tags: [\"mobparty.skeleton\"],\r   };\r    for (const entity of targetLocation.dimension.getEntities(eqo)) {\r     entity.kill();\r   }\r }\r ```\r ```typescript\r  function testThatEntityIsFeatherItem(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const items = targetLocation.dimension.getEntities({\r     location: targetLocation,\r     maxDistance: 20,\r   });\r    for (const item of items) {\r     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\r      if (itemComp) {\r       if (itemComp.itemStack.typeId.endsWith(\"feather\")) {\r         log(\"Success! Found a feather\", 1);\r       }\r     }\r   }\r }\r ```\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityqueryoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityQueryPropertyOptions",
      "name": "EntityQueryPropertyOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "In conjunction with location, specified a cuboid volume of\r entities to include.",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityquerypropertyoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityQueryScoreOptions",
      "name": "EntityQueryScoreOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for filtering players based on\r their score for an objective.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityqueryscoreoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityRaycastHit",
      "name": "EntityRaycastHit",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains information for entity raycast hit results.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityraycasthit",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EntityRaycastOptions",
      "name": "EntityRaycastOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for an entity raycast operation.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityraycastoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.EqualsComparison",
      "name": "EqualsComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Equal to operator.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "equalscomparison",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.ExplosionOptions",
      "name": "ExplosionOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Dimension.createExplosion} method.\r ```typescript\r  function createNoBlockExplosion(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\r    log(\"Creating an explosion of radius 15 that does not break blocks.\");\r   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\r }\r ```\r ```typescript\r  function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\r    log(\"Creating an explosion of radius 15 that causes fire.\");\r   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\r    const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\r    log(\"Creating an explosion of radius 10 that can go underwater.\");\r   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\r }\r ```\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "explosionoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.GreaterThanComparison",
      "name": "GreaterThanComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Greater than operator.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "greaterthancomparison",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.GreaterThanOrEqualsComparison",
      "name": "GreaterThanOrEqualsComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Greater than or equal to operator.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "greaterthanorequalscomparison",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.HotbarEventOptions",
      "name": "HotbarEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional filtering options for hotbar events.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "hotbareventoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.InputEventOptions",
      "name": "InputEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "that filters out which events are passed to the provided\r callback.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inputeventoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.InventoryItemEventOptions",
      "name": "InventoryItemEventOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional filtering options for inventory item\r events.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "inventoryitemeventoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.ItemCustomComponent",
      "name": "ItemCustomComponent",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains a set of events that will be raised for an item.\r This object must be bound using the ItemComponentRegistry.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponent",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.JigsawPlaceOptions",
      "name": "JigsawPlaceOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "StructureManager.placeJigsaw}.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "jigsawplaceoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.JigsawStructurePlaceOptions",
      "name": "JigsawStructurePlaceOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "StructureManager.placeJigsawStructure}.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "jigsawstructureplaceoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.LessThanComparison",
      "name": "LessThanComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Less than operator.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "lessthancomparison",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.LessThanOrEqualsComparison",
      "name": "LessThanOrEqualsComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Less than or equal to operator.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "lessthanorequalscomparison",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.MusicOptions",
      "name": "MusicOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "/",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "musicoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.NotEqualsComparison",
      "name": "NotEqualsComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Not equal to operator.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "notequalscomparison",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.PlayAnimationOptions",
      "name": "PlayAnimationOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for how an animation is played.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playanimationoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.PlayerSoundOptions",
      "name": "PlayerSoundOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Additional options for how a sound plays for a player.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "playersoundoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.ProjectileShootOptions",
      "name": "ProjectileShootOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Optional arguments for\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "projectileshootoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.RangeComparison",
      "name": "RangeComparison",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Operator represents a lower/upper bound structure for\r expressing a potential range of numbers.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rangecomparison",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.RawMessage",
      "name": "RawMessage",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Defines a JSON structure that is used for more flexible.\r ```typescript\r  function placeTranslatedSign(location: DimensionLocation, text: string) {\r     const signBlock = location.dimension.getBlock(location);\r      if (!signBlock) {\r         console.warn('Could not find a block at specified location.');\r         return;\r     }\r     const signPerm = BlockPermutation.resolve('minecraft:standing_sign', { ground_sign_direction: 8 });\r     signBlock.setPermutation(signPerm);\r      const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\r     if (signComponent) {\r         signComponent.setText({ translate: 'item.skull.player.name', with: [text] });\r     } else {\r         console.error('Could not find a sign component on the block.');\r     }\r }\r  placeTranslatedSign(\r     {\r         dimension: world.getDimension('overworld'),\r         x: 0,\r         y: 0,\r         z: 0,\r     },\r     'Steve',\r );\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const dim = players[0].dimension;\r    const signBlock = dim.getBlock(targetLocation);\r    if (!signBlock) {\r     log(\"Could not find a block at specified location.\");\r     return -1;\r   }\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\r    signBlock.setPermutation(signPerm);\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\r    signComponent?.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });\r }\r ```\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rawmessage",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.RawMessageScore",
      "name": "RawMessageScore",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Provides a description of a score token to use within a raw\r message.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rawmessagescore",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.RawText",
      "name": "RawText",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "A `RawMessage` with only the `rawtext` property. When a\r `RawMessage` is serialized the contents are put into a\r rawtext property, so this is useful when reading saved\r RawMessages. See `BlockSignComponent.setText` and\r `BlockSignComponent.getRawText` for examples.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rawtext",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.RGB",
      "name": "RGB",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Represents a fully customizable color within Minecraft.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rgb",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.RGBA",
      "name": "RGBA",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Represents a fully customizable color within Minecraft.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rgba",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.ScoreboardObjectiveDisplayOptions",
      "name": "ScoreboardObjectiveDisplayOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for how a scoreboard should be\r displayed within its display slot.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scoreboardobjectivedisplayoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.ScriptEventMessageFilterOptions",
      "name": "ScriptEventMessageFilterOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for registering a script event\r event callback.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "scripteventmessagefilteroptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.SpawnEntityOptions",
      "name": "SpawnEntityOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for spawning an Entity.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "spawnentityoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.StructureCreateOptions",
      "name": "StructureCreateOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "StructureManager.createFromWorld}\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structurecreateoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.StructurePlaceOptions",
      "name": "StructurePlaceOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "StructureManager.place}\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "structureplaceoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.TeleportOptions",
      "name": "TeleportOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for teleporting an entity.\r ```typescript\r  function teleport(targetLocation: DimensionLocation) {\r   const cow = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Cow, targetLocation);\r    system.runTimeout(() => {\r     cow.teleport(\r       { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },\r       {\r         facingLocation: targetLocation,\r       }\r     );\r   }, 20);\r }\r ```\r ```typescript\r  function teleportMovement(targetLocation: DimensionLocation) {\r   const pig = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Pig, targetLocation);\r    let inc = 1;\r   const runId = system.runInterval(() => {\r     pig.teleport(\r       { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },\r       {\r         facingLocation: targetLocation,\r       }\r     );\r      if (inc > 100) {\r       system.clearRun(runId);\r     }\r     inc++;\r   }, 4);\r }\r ```\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "teleportoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.TitleDisplayOptions",
      "name": "TitleDisplayOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for displaying a title and\r optional subtitle.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "titledisplayoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.Vector2",
      "name": "Vector2",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Represents a two-directional vector.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "vector2",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.Vector3",
      "name": "Vector3",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains a description of a vector.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "vector3",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.VectorXZ",
      "name": "VectorXZ",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Z component of this vector.",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "vectorxz",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.WorldSoundOptions",
      "name": "WorldSoundOptions",
      "type": "interface",
      "module": "@minecraft/server",
      "description": "Contains additional options for a playSound occurrence.\r /",
      "categories": [
        "Interfaces",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "worldsoundoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server.BlockCustomComponentAlreadyRegisteredError",
      "name": "BlockCustomComponentAlreadyRegisteredError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Relative volume and space by which this sound is heard.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentalreadyregisterederror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockCustomComponentReloadNewComponentError",
      "name": "BlockCustomComponentReloadNewComponentError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentreloadnewcomponenterror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockCustomComponentReloadNewEventError",
      "name": "BlockCustomComponentReloadNewEventError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentreloadneweventerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.BlockCustomComponentReloadVersionError",
      "name": "BlockCustomComponentReloadVersionError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "blockcustomcomponentreloadversionerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.CommandError",
      "name": "CommandError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "commanderror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ContainerRulesError",
      "name": "ContainerRulesError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "broken on container operations.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "containerruleserror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.CustomCommandError",
      "name": "CustomCommandError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Error object thrown when CustomCommandRegistry errors occur.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcommanderror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.CustomComponentInvalidRegistryError",
      "name": "CustomComponentInvalidRegistryError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Reason for the error.\r  This property can be read in early-execution mode.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcomponentinvalidregistryerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.CustomComponentNameError",
      "name": "CustomComponentNameError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "customcomponentnameerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EnchantmentLevelOutOfBoundsError",
      "name": "EnchantmentLevelOutOfBoundsError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This property can be read in early-execution mode.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmentleveloutofboundserror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EnchantmentTypeNotCompatibleError",
      "name": "EnchantmentTypeNotCompatibleError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmenttypenotcompatibleerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EnchantmentTypeUnknownIdError",
      "name": "EnchantmentTypeUnknownIdError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "enchantmenttypeunknowniderror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.EntitySpawnError",
      "name": "EntitySpawnError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "entityspawnerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.InvalidContainerError",
      "name": "InvalidContainerError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The container is invalid. This can occur if the container is\r missing or deleted.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invalidcontainererror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.InvalidContainerSlotError",
      "name": "InvalidContainerSlotError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The container slot is invalid. This can occur when the\r owning container is destroyed or unloaded.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invalidcontainersloterror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.InvalidEntityError",
      "name": "InvalidEntityError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The error called when an entity is invalid. This can occur\r when accessing components on a removed entity.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invalidentityerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.InvalidIteratorError",
      "name": "InvalidIteratorError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "The type of the entity that is now invalid.\r  This property can be read in early-execution mode.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invaliditeratorerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.InvalidStructureError",
      "name": "InvalidStructureError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when a Structure is invalid. A structure becomes\r invalid when it is deleted.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "invalidstructureerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemCustomComponentAlreadyRegisteredError",
      "name": "ItemCustomComponentAlreadyRegisteredError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when trying to register an item custom component with\r a name that has already been registered.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentalreadyregisterederror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemCustomComponentReloadNewComponentError",
      "name": "ItemCustomComponentReloadNewComponentError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown after using the /reload command when trying to\r register a previously unregistered item custom component.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentreloadnewcomponenterror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemCustomComponentReloadNewEventError",
      "name": "ItemCustomComponentReloadNewEventError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown after using the /reload command when trying to\r register a previously registered item custom component that\r handles a new event.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentreloadneweventerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.ItemCustomComponentReloadVersionError",
      "name": "ItemCustomComponentReloadVersionError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown after using the /reload command when trying to\r register a previously registered item custom component with\r a newer API version.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "itemcustomcomponentreloadversionerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.LocationInUnloadedChunkError",
      "name": "LocationInUnloadedChunkError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when the chunk for provided location or bounding area\r is not loaded.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "locationinunloadedchunkerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.LocationOutOfWorldBoundariesError",
      "name": "LocationOutOfWorldBoundariesError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when a provided location or bounding area is outside\r the minimum or maximum dimension height.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "locationoutofworldboundarieserror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.NamespaceNameError",
      "name": "NamespaceNameError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Thrown when a name requires a namespace and an error occurs\r when validating that namespace\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "namespacenameerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.PlaceJigsawError",
      "name": "PlaceJigsawError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "This property can be read in early-execution mode.",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "placejigsawerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.RawMessageError",
      "name": "RawMessageError",
      "type": "class",
      "module": "@minecraft/server",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "rawmessageerror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server.UnloadedChunksError",
      "name": "UnloadedChunksError",
      "type": "class",
      "module": "@minecraft/server",
      "description": "Error thrown when the specified area contains one or more\r unloaded chunks.\r /",
      "categories": [
        "Classes",
        "Server"
      ],
      "tags": [],
      "keywords": [
        "unloadedchunkserror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-admin.AdminBeforeEvents",
      "name": "AdminBeforeEvents",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "Contains types related to administering a Bedrock Dedicated\r Server. These types allow for the configuration of variables\r and secrets in JSON files in the Bedrock Dedicated Server\r folder. These types cannot be used on Minecraft clients or\r within Minecraft Realms.\r  Manifest Details\r ```json\r {\r   \"version\": \"1.0.0-beta\"\r }\r ```\r  /",
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [
        "beta"
      ],
      "keywords": [
        "adminbeforeevents",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-admin.AsyncPlayerJoinBeforeEvent",
      "name": "AsyncPlayerJoinBeforeEvent",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "The data available before a player joins the world.\r /",
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "asyncplayerjoinbeforeevent",
        "class"
      ],
      "signature": "disconnect(reason?: string): void"
    },
    {
      "id": "@minecraft/server-admin.AsyncPlayerJoinBeforeEventSignal",
      "name": "AsyncPlayerJoinBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "Will return true if the player is still waiting to join the\r world. If they disconnect then it will return false.",
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "asyncplayerjoinbeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-admin.SecretString",
      "name": "SecretString",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "This represents a placeholder object that represents a\r secret string. The contents of that string are not available\r to script; this object is just a placeholder.\r /",
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "secretstring",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-admin.ServerSecrets",
      "name": "ServerSecrets",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "A collection of server secrets defined in dedicated server\r configuration.\r ```typescript\r  const serverUrl = variables.get('serverEndpoint');\r  function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r      req.body = JSON.stringify({\r         playerId,\r     });\r      const authTokenSec = secrets.get('authtoken');\r      if (!authTokenSec) {\r         throw new Error('authtoken secret not defined.');\r     }\r      req.method = HttpRequestMethod.Post;\r     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r      return http.request(req);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "serversecrets",
        "class"
      ],
      "signature": "get(name: string): SecretString | undefined"
    },
    {
      "id": "@minecraft/server-admin.ServerVariables",
      "name": "ServerVariables",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "A collection of server variables defined in dedicated server\r configuration.\r ```typescript\r  const serverUrl = variables.get('serverEndpoint');\r  function getPlayerProfile(playerId: string): Promise<HttpResponse> {\r     const req = new HttpRequest(serverUrl + 'getPlayerProfile');\r      req.body = JSON.stringify({\r         playerId,\r     });\r      const authTokenSec = secrets.get('authtoken');\r      if (!authTokenSec) {\r         throw new Error('authtoken secret not defined.');\r     }\r      req.method = HttpRequestMethod.Post;\r     req.headers = [new HttpHeader('Content-Type', 'application/json'), new HttpHeader('auth', authTokenSec)];\r      return http.request(req);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "servervariables",
        "class"
      ],
      "signature": "get(name: string): unknown | undefined"
    },
    {
      "id": "@minecraft/server-admin.TransferPlayerIpPortOptions",
      "name": "TransferPlayerIpPortOptions",
      "type": "interface",
      "module": "@minecraft/server-admin",
      "description": "Options when transferring a player to a server that supports\r direct host/port connections.\r /",
      "categories": [
        "Interfaces",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "transferplayeripportoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server-admin.TransferPlayerNetherNetOptions",
      "name": "TransferPlayerNetherNetOptions",
      "type": "interface",
      "module": "@minecraft/server-admin",
      "description": "Options when transferring a player to a server that supports\r NetherNet connections.\r /",
      "categories": [
        "Interfaces",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "transferplayernethernetoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server-admin.DisconnectedError",
      "name": "DisconnectedError",
      "type": "class",
      "module": "@minecraft/server-admin",
      "description": "An error that is thrown when trying to interact with a join\r event and the player is disconnected.\r /",
      "categories": [
        "Classes",
        "Admin"
      ],
      "tags": [],
      "keywords": [
        "disconnectederror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.HttpRequestMethod",
      "name": "HttpRequestMethod",
      "type": "enum",
      "module": "@minecraft/server-net",
      "description": "executing HTTP-based requests. This module can only be used\r on Bedrock Dedicated Server. These APIs do not function\r within the Minecraft game client or within Minecraft Realms.\r  Manifest Details\r ```json\r {\r   \"version\": \"1.0.0-beta\"\r }\r ```\r  /",
      "categories": [
        "Enums",
        "Networking"
      ],
      "tags": [
        "beta"
      ],
      "keywords": [
        "httprequestmethod",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server-net.PacketId",
      "name": "PacketId",
      "type": "enum",
      "module": "@minecraft/server-net",
      "description": "Represents the unique type of network packet.\r /",
      "categories": [
        "Enums",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetid",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server-net.HttpClient",
      "name": "HttpClient",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "httpclient",
        "class"
      ],
      "signature": "cancelAll(reason: string): void"
    },
    {
      "id": "@minecraft/server-net.HttpHeader",
      "name": "HttpHeader",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Represents an HTTP header - a key/value pair of\r meta-information about a request.\r ```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "httpheader",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.HttpRequest",
      "name": "HttpRequest",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Main object for structuring a request.\r ```typescript\r  async function updateScore() {\r     const req = new HttpRequest('http://localhost:3000/updateScore');\r      req.body = JSON.stringify({\r         score: 22,\r     });\r      req.method = HttpRequestMethod.Post;\r     req.headers = [\r         new HttpHeader('Content-Type', 'application/json'),\r         new HttpHeader('auth', 'my-auth-token'),\r     ];\r      await http.request(req);\r }\r ```\r /",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "httprequest",
        "class"
      ],
      "signature": "addHeader(key: string, value: minecraftserveradmin.SecretString | string): HttpRequest"
    },
    {
      "id": "@minecraft/server-net.HttpResponse",
      "name": "HttpResponse",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Main object that contains result information from a request.\r /",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "httpresponse",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.NetworkBeforeEvents",
      "name": "NetworkBeforeEvents",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "HTTP response code for the request. For example, 404\r represents resource not found, and 500 represents an\r internal server error.",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "networkbeforeevents",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.PacketReceiveBeforeEventSignal",
      "name": "PacketReceiveBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "This property can be read in early-execution mode.",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetreceivebeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.PacketReceivedBeforeEvent",
      "name": "PacketReceivedBeforeEvent",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Sent as the server receives a network packet from a client.\r If cancelled, the server will not parse the network packet\r and will silently ignore it.\r /",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetreceivedbeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.PacketSendBeforeEvent",
      "name": "PacketSendBeforeEvent",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Sent as the server sends a network packet to clients.  If\r cancelled, the server will not send the network packet to\r the receiving clients.\r /",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetsendbeforeevent",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.PacketSendBeforeEventSignal",
      "name": "PacketSendBeforeEventSignal",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "Which clients the network packet is being sent to.",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packetsendbeforeeventsignal",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.PacketEventOptions",
      "name": "PacketEventOptions",
      "type": "interface",
      "module": "@minecraft/server-net",
      "description": "Options for events triggered by network packets.\r /",
      "categories": [
        "Interfaces",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "packeteventoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server-net.InternalHttpRequestError",
      "name": "InternalHttpRequestError",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "An error thrown when a platform-level HTTP error occurs.\r Information provided in this class may be useful for\r diagnostics purposes but will differ from platform to\r platform.\r /",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "internalhttprequesterror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-net.MalformedHttpRequestError",
      "name": "MalformedHttpRequestError",
      "type": "class",
      "module": "@minecraft/server-net",
      "description": "An error thrown when a malformed HTTP request is attempted\r to be sent.\r /",
      "categories": [
        "Classes",
        "Networking"
      ],
      "tags": [],
      "keywords": [
        "malformedhttprequesterror",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-ui.FormCancelationReason",
      "name": "FormCancelationReason",
      "type": "enum",
      "module": "@minecraft/server-ui",
      "description": "expressing simple dialog-based user experiences.\r  captions and images that can be used for presenting a set of\r options to a player.\r experiences that are functional for Yes/No or OK/Cancel\r questions.\r \"questionnaire-style\" list of controls that can be used to\r take input.\r  Manifest Details\r ```json\r {\r   \"version\": \"2.0.0\"\r }\r ```\r  /",
      "categories": [
        "Enums",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "formcancelationreason",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server-ui.FormRejectReason",
      "name": "FormRejectReason",
      "type": "enum",
      "module": "@minecraft/server-ui",
      "categories": [
        "Enums",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "formrejectreason",
        "enum"
      ]
    },
    {
      "id": "@minecraft/server-ui.ActionFormData",
      "name": "ActionFormData",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Builds a simple player form with buttons that let the player\r take action.\r ```typescript\r  function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const playerList = world.getPlayers();\r    if (playerList.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Test Title\")\r       .body(\"Body text here!\")\r       .button(\"btn 1\")\r       .button(\"btn 2\")\r       .button(\"btn 3\")\r       .button(\"btn 4\")\r       .button(\"btn 5\");\r      form.show(playerList[0]).then((result: ActionFormResponse) => {\r       if (result.canceled) {\r         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r         return -1;\r       } else {\r         log(\"Your result was: \" + result.selection);\r       }\r     });\r   }\r }\r ```\r ```typescript\r  function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Months\")\r       .body(\"Choose your favorite month!\")\r       .button(\"January\")\r       .button(\"February\")\r       .button(\"March\")\r       .button(\"April\")\r       .button(\"May\");\r      form.show(players[0]).then((response: ActionFormResponse) => {\r       if (response.selection === 3) {\r         log(\"I like April too!\");\r         return -1;\r       }\r     });\r   }\r }\r ```\r /",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "actionformdata",
        "class"
      ],
      "signature": "body(bodyText: minecraftserver.RawMessage | string): ActionFormData"
    },
    {
      "id": "@minecraft/server-ui.ActionFormResponse",
      "name": "ActionFormResponse",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Returns data about the player results from a modal action\r form.\r ```typescript\r  function showActionForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const playerList = world.getPlayers();\r    if (playerList.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Test Title\")\r       .body(\"Body text here!\")\r       .button(\"btn 1\")\r       .button(\"btn 2\")\r       .button(\"btn 3\")\r       .button(\"btn 4\")\r       .button(\"btn 5\");\r      form.show(playerList[0]).then((result: ActionFormResponse) => {\r       if (result.canceled) {\r         log(\"Player exited out of the dialog. Note that if the chat window is up, dialogs are automatically canceled.\");\r         return -1;\r       } else {\r         log(\"Your result was: \" + result.selection);\r       }\r     });\r   }\r }\r ```\r ```typescript\r  function showFavoriteMonth(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    if (players.length >= 1) {\r     const form = new ActionFormData()\r       .title(\"Months\")\r       .body(\"Choose your favorite month!\")\r       .button(\"January\")\r       .button(\"February\")\r       .button(\"March\")\r       .button(\"April\")\r       .button(\"May\");\r      form.show(players[0]).then((response: ActionFormResponse) => {\r       if (response.selection === 3) {\r         log(\"I like April too!\");\r         return -1;\r       }\r     });\r   }\r }\r ```\r /",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "actionformresponse",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-ui.FormResponse",
      "name": "FormResponse",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Base type for a form response.\r /",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "formresponse",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-ui.MessageFormData",
      "name": "MessageFormData",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Builds a simple two-button modal dialog.\r ```typescript\r  function showBasicMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title(\"Message Form Example\")\r     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r     .button1(\"Button 1\")\r     .button2(\"Button 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "messageformdata",
        "class"
      ],
      "signature": "body(bodyText: minecraftserver.RawMessage | string): MessageFormData"
    },
    {
      "id": "@minecraft/server-ui.MessageFormResponse",
      "name": "MessageFormResponse",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Returns data about the player results from a modal message\r form.\r ```typescript\r  function showBasicMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title(\"Message Form Example\")\r     .body(\"This shows a simple example using §o§7MessageFormData§r.\")\r     .button1(\"Button 1\")\r     .button2(\"Button 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Button 1\" : \"Button 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r ```typescript\r  function showTranslatedMessageForm(\r   log: (message: string, status?: number) => void,\r   targetLocation: DimensionLocation\r ) {\r   const players = world.getPlayers();\r    const messageForm = new MessageFormData()\r     .title({ translate: \"permissions.removeplayer\" })\r     .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })\r     .button1(\"Player 1\")\r     .button2(\"Player 2\");\r    messageForm\r     .show(players[0])\r     .then((formData: MessageFormResponse) => {\r       // player canceled the form, or another dialog was up and open.\r       if (formData.canceled || formData.selection === undefined) {\r         return;\r       }\r        log(`You selected ${formData.selection === 0 ? \"Player 1\" : \"Player 2\"}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "messageformresponse",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-ui.ModalFormData",
      "name": "ModalFormData",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Used to create a fully customizable pop-up form for a\r player.\r ```typescript\r  function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r    modalForm.toggle(\"Toggle w/o default\");\r   modalForm.toggle(\"Toggle w/ default\", true);\r    modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r    modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r    modalForm.textField(\"Input w/o default\", \"type text here\");\r   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r    modalForm\r     .show(players[0])\r     .then((formData) => {\r       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdata",
        "class"
      ],
      "signature": "divider(): ModalFormData"
    },
    {
      "id": "@minecraft/server-ui.ModalFormResponse",
      "name": "ModalFormResponse",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "Returns data about player responses to a modal form.\r ```typescript\r  function showBasicModalForm(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\r   const players = world.getPlayers();\r    const modalForm = new ModalFormData().title(\"Example Modal Controls for §o§7ModalFormData§r\");\r    modalForm.toggle(\"Toggle w/o default\");\r   modalForm.toggle(\"Toggle w/ default\", true);\r    modalForm.slider(\"Slider w/o default\", 0, 50, 5);\r   modalForm.slider(\"Slider w/ default\", 0, 50, 5, 30);\r    modalForm.dropdown(\"Dropdown w/o default\", [\"option 1\", \"option 2\", \"option 3\"]);\r   modalForm.dropdown(\"Dropdown w/ default\", [\"option 1\", \"option 2\", \"option 3\"], 2);\r    modalForm.textField(\"Input w/o default\", \"type text here\");\r   modalForm.textField(\"Input w/ default\", \"type text here\", \"this is default\");\r    modalForm\r     .show(players[0])\r     .then((formData) => {\r       players[0].sendMessage(`Modal form results: ${JSON.stringify(formData.formValues, undefined, 2)}`);\r     })\r     .catch((error: Error) => {\r       log(\"Failed to show form: \" + error);\r       return -1;\r     });\r }\r ```\r /",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformresponse",
        "class"
      ]
    },
    {
      "id": "@minecraft/server-ui.UIManager",
      "name": "UIManager",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "An ordered set of values based on the order of controls\r specified by ModalFormData.",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "uimanager",
        "class"
      ],
      "signature": "closeAllForms(player: minecraftserver.Player): void"
    },
    {
      "id": "@minecraft/server-ui.ModalFormDataDropdownOptions",
      "name": "ModalFormDataDropdownOptions",
      "type": "interface",
      "module": "@minecraft/server-ui",
      "description": "additional options for the dropdown creation.\r /",
      "categories": [
        "Interfaces",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdatadropdownoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server-ui.ModalFormDataSliderOptions",
      "name": "ModalFormDataSliderOptions",
      "type": "interface",
      "module": "@minecraft/server-ui",
      "description": "additional options for the slider creation.\r /",
      "categories": [
        "Interfaces",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdataslideroptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server-ui.ModalFormDataTextFieldOptions",
      "name": "ModalFormDataTextFieldOptions",
      "type": "interface",
      "module": "@minecraft/server-ui",
      "description": "additional options for the textfield creation.\r /",
      "categories": [
        "Interfaces",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdatatextfieldoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server-ui.ModalFormDataToggleOptions",
      "name": "ModalFormDataToggleOptions",
      "type": "interface",
      "module": "@minecraft/server-ui",
      "description": "additional options for the toggle creation.\r /",
      "categories": [
        "Interfaces",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "modalformdatatoggleoptions",
        "interface"
      ]
    },
    {
      "id": "@minecraft/server-ui.FormRejectError",
      "name": "FormRejectError",
      "type": "class",
      "module": "@minecraft/server-ui",
      "description": "It will show an exclamation icon that will display a tooltip\r if it is hovered.",
      "categories": [
        "Classes",
        "UI"
      ],
      "tags": [],
      "keywords": [
        "formrejecterror",
        "class"
      ]
    }
  ],
  "categories": {
    "Enums": 56,
    "Server": 438,
    "Types": 3,
    "Classes": 340,
    "Interfaces": 77,
    "Admin": 9,
    "Networking": 14,
    "UI": 15
  },
  "tags": {
    "readonly-restricted": 2,
    "beta": 2
  },
  "modules": {
    "@minecraft/server": 438,
    "@minecraft/server-admin": 9,
    "@minecraft/server-net": 14,
    "@minecraft/server-ui": 15
  },
  "types": {
    "enum": 56,
    "type": 3,
    "class": 340,
    "interface": 77
  }
}