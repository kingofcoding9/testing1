{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Minecraft Bedrock Addon Creator\n\n## Overview\n\nThe Minecraft Bedrock Addon Creator is a comprehensive web-based development platform for creating custom Minecraft: Bedrock Edition addons. The application provides an intuitive interface for building entities, blocks, items, recipes, and other game content without requiring extensive JSON knowledge. It features visual builders, documentation, tutorials, and tools for packaging complete addon projects.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Query for server state and local state with custom hooks\n- **UI Components**: Radix UI primitives with shadcn/ui design system for consistent, accessible components\n- **Styling**: Tailwind CSS with custom CSS variables for theming and dark mode support\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Component Structure\n- **Builders**: Interactive form-based builders for entities, blocks, items, recipes, loot tables, biomes, spawn rules, and client entities\n- **Tools**: Advanced utilities including texture creator with canvas manipulation, script studio for JavaScript development, addon packager for export, and JSON validator\n- **Documentation**: Comprehensive guides covering core concepts, entity systems, block creation, item development, and scripting APIs\n- **Tutorial System**: Interactive learning modules with step-by-step guidance and progress tracking\n\n### Backend Architecture\n- **Framework**: Express.js server with TypeScript\n- **API Design**: RESTful endpoints for health checks, addon validation, and project management\n- **Development Setup**: Vite middleware integration for hot module replacement during development\n- **Error Handling**: Centralized error middleware with structured error responses\n\n### Data Storage\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema**: User management system with unique usernames and secure password storage\n- **Local Storage**: Browser localStorage for persisting user preferences and work-in-progress addon data\n- **Memory Storage**: In-memory storage implementation for development and testing scenarios\n\n### Validation System\n- **JSON Validation**: Comprehensive validation for all Minecraft addon file formats\n- **Type Safety**: Zod schemas for runtime type checking and validation\n- **Error Reporting**: Detailed validation feedback with specific error messages and suggestions\n\n### Canvas and Graphics\n- **Texture Creation**: Custom canvas-based image editor with layers, brushes, and drawing tools\n- **Image Processing**: Client-side image manipulation and export capabilities\n- **Grid System**: Pixel-perfect editing with customizable grid overlays\n\n### Export and Packaging\n- **Addon Structure**: Automatic generation of proper Minecraft addon folder structures\n- **Manifest Generation**: Dynamic creation of behavior pack and resource pack manifests\n- **File Bundling**: Complete addon packaging with proper file organization and compression\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting with connection pooling\n- **Database URL**: Environment-based configuration for database connections\n\n### Development Tools\n- **Drizzle Kit**: Database migrations and schema management\n- **ESBuild**: Fast JavaScript bundling for production builds\n- **TypeScript**: Static type checking and compilation\n\n### UI Libraries\n- **Radix UI**: Unstyled, accessible component primitives for complex UI patterns\n- **Lucide React**: Icon library providing consistent iconography\n- **React Query**: Data fetching and caching library for server state management\n\n### Styling and Theming\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **Class Variance Authority**: Utility for creating variant-based component APIs\n- **CLSX**: Conditional className utility for dynamic styling\n\n### Canvas and Graphics\n- **HTML5 Canvas**: Native browser canvas API for texture creation and editing\n- **Custom Canvas Hooks**: React hooks for canvas state management and drawing operations\n\n### Build and Development\n- **Vite**: Fast build tool with hot module replacement and plugin ecosystem\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer plugins\n- **TSX**: TypeScript execution for development server\n\n### Minecraft Integration\n- **Minecraft Documentation**: Integration with official Minecraft: Bedrock Edition documentation\n- **JSON Templates**: Pre-built templates for common addon patterns and structures\n- **Validation Rules**: Minecraft-specific validation for addon file formats","size_bytes":4847},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\", transform: \"translateY(10px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        fadeIn: \"fadeIn 0.3s ease-in-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2963},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProjectSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Addon validation endpoint\n  app.post(\"/api/validate\", (req, res) => {\n    try {\n      const { content, type } = req.body;\n      \n      if (!content || !type) {\n        return res.status(400).json({ \n          error: \"Missing content or type parameter\" \n        });\n      }\n\n      // Basic JSON validation\n      let parsedContent;\n      try {\n        parsedContent = typeof content === 'string' ? JSON.parse(content) : content;\n      } catch (parseError) {\n        return res.status(400).json({\n          error: \"Invalid JSON format\",\n          details: parseError instanceof Error ? parseError.message : \"Unknown parsing error\"\n        });\n      }\n\n      // Basic validation - return success for now\n      const validationResult = {\n        isValid: true,\n        errors: [],\n        message: \"Content validation passed\"\n      };\n      \n      res.json(validationResult);\n    } catch (error) {\n      console.error('Validation error:', error);\n      res.status(500).json({ \n        error: \"Internal validation error\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Save addon project endpoint\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      // Validate request body using Zod schema\n      const validationResult = insertProjectSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid project data\",\n          details: validationResult.error.issues\n        });\n      }\n\n      const project = await storage.createProject(validationResult.data);\n      \n      res.json({\n        success: true,\n        project,\n        message: \"Project saved successfully\"\n      });\n    } catch (error) {\n      console.error('Save project error:', error);\n      res.status(500).json({ \n        error: \"Failed to save project\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Get projects (list) endpoint - needs to come before the /:id route\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const { type } = req.query;\n      \n      let projects;\n      if (type && typeof type === 'string') {\n        projects = await storage.getProjectsByType(type);\n      } else {\n        projects = await storage.getAllProjects();\n      }\n      \n      res.json({\n        success: true,\n        projects\n      });\n    } catch (error) {\n      console.error('List projects error:', error);\n      res.status(500).json({ \n        error: \"Failed to load projects\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Load addon project by ID endpoint\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const projectId = parseInt(id);\n      \n      if (isNaN(projectId)) {\n        return res.status(400).json({ \n          error: \"Invalid project ID\" \n        });\n      }\n      \n      const project = await storage.getProject(projectId);\n      \n      if (!project) {\n        return res.status(404).json({ \n          error: \"Project not found\" \n        });\n      }\n      \n      res.json(project);\n    } catch (error) {\n      console.error('Load project error:', error);\n      res.status(500).json({ \n        error: \"Failed to load project\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Update project endpoint\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const projectId = parseInt(id);\n      \n      if (isNaN(projectId)) {\n        return res.status(400).json({ \n          error: \"Invalid project ID\" \n        });\n      }\n      \n      const { name, description, data, type } = req.body;\n      const updateData: any = {};\n      \n      if (name !== undefined) updateData.name = name;\n      if (description !== undefined) updateData.description = description;\n      if (data !== undefined) updateData.data = data;\n      if (type !== undefined) updateData.type = type;\n      \n      const project = await storage.updateProject(projectId, updateData);\n      \n      if (!project) {\n        return res.status(404).json({ \n          error: \"Project not found\" \n        });\n      }\n      \n      res.json({\n        success: true,\n        project,\n        message: \"Project updated successfully\"\n      });\n    } catch (error) {\n      console.error('Update project error:', error);\n      res.status(500).json({ \n        error: \"Failed to update project\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Delete project endpoint\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const projectId = parseInt(id);\n      \n      if (isNaN(projectId)) {\n        return res.status(400).json({ \n          error: \"Invalid project ID\" \n        });\n      }\n      \n      const deleted = await storage.deleteProject(projectId);\n      \n      if (!deleted) {\n        return res.status(404).json({ \n          error: \"Project not found\" \n        });\n      }\n      \n      res.json({\n        success: true,\n        message: \"Project deleted successfully\"\n      });\n    } catch (error) {\n      console.error('Delete project error:', error);\n      res.status(500).json({ \n        error: \"Failed to delete project\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Minecraft API documentation endpoint\n  app.get(\"/api/docs/minecraft\", (req, res) => {\n    try {\n      const { category, search } = req.query;\n      \n      // Return sample documentation data\n      const docs = {\n        entities: [\n          {\n            name: \"minecraft:health\",\n            category: \"Attributes\",\n            description: \"Defines the health of the entity\",\n            version: \"1.8.0\"\n          },\n          {\n            name: \"minecraft:movement\", \n            category: \"Movement\",\n            description: \"Defines movement speed\",\n            version: \"1.8.0\"\n          }\n        ],\n        api: [\n          {\n            name: \"world.sendMessage\",\n            module: \"@minecraft/server\",\n            description: \"Sends a message to all players\",\n            version: \"1.21.0\"\n          }\n        ]\n      };\n\n      res.json(docs);\n    } catch (error) {\n      console.error('Documentation error:', error);\n      res.status(500).json({ \n        error: \"Failed to load documentation\" \n      });\n    }\n  });\n\n  // Script generation endpoint\n  app.post(\"/api/generate-script\", (req, res) => {\n    try {\n      const { method, parameters, template } = req.body;\n      \n      if (!method) {\n        return res.status(400).json({ \n          error: \"Missing method parameter\" \n        });\n      }\n\n      // Generate script based on method and parameters\n      let generatedScript = '';\n      \n      switch (method) {\n        case 'world.sendMessage':\n          const message = parameters?.message || 'Hello, Minecraft!';\n          generatedScript = `import { world } from '@minecraft/server';\\n\\n// Send a message to all players\\nworld.sendMessage(\"${message}\");`;\n          break;\n          \n        case 'world.spawnEntity':\n          const entityType = parameters?.entityType || 'minecraft:pig';\n          const location = parameters?.location || '{ x: 0, y: 64, z: 0 }';\n          generatedScript = `import { world } from '@minecraft/server';\\n\\n// Spawn an entity\\nconst entity = world.spawnEntity(\"${entityType}\", ${location});`;\n          break;\n          \n        default:\n          generatedScript = `// Method ${method} not implemented yet\\n// Add your implementation here`;\n      }\n      \n      res.json({\n        success: true,\n        script: generatedScript\n      });\n    } catch (error) {\n      console.error('Script generation error:', error);\n      res.status(500).json({ \n        error: \"Failed to generate script\" \n      });\n    }\n  });\n\n  // Texture upload endpoint for texture creator\n  app.post(\"/api/textures/upload\", (req, res) => {\n    try {\n      // In a real implementation, this would handle file uploads\n      res.json({\n        success: true,\n        textureId: `texture_${Date.now()}`,\n        message: \"Texture uploaded successfully\"\n      });\n    } catch (error) {\n      console.error('Texture upload error:', error);\n      res.status(500).json({ \n        error: \"Failed to upload texture\" \n      });\n    }\n  });\n\n  // Export addon endpoint\n  app.post(\"/api/export\", async (req, res) => {\n    try {\n      const { format, config } = req.body;\n      \n      if (!format || !config) {\n        return res.status(400).json({ \n          error: \"Missing format or config parameter\" \n        });\n      }\n\n      // Validate export config\n      if (!config.name || !config.files) {\n        return res.status(400).json({ \n          error: \"Missing required config fields: name and files\" \n        });\n      }\n\n      // For now, generate a unique identifier for the export\n      const exportId = `addon_${Date.now()}`;\n      const downloadUrl = `/api/downloads/${exportId}.${format}`;\n      \n      // In a real implementation, you would:\n      // 1. Generate the addon file using the AddonExporter\n      // 2. Store it temporarily on the server\n      // 3. Provide a download endpoint\n      \n      res.json({\n        success: true,\n        downloadUrl,\n        exportId,\n        message: \"Addon export prepared successfully\",\n        config: {\n          name: config.name,\n          fileCount: config.files?.length || 0,\n          format\n        }\n      });\n    } catch (error) {\n      console.error('Export error:', error);\n      res.status(500).json({ \n        error: \"Failed to export addon\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Download endpoint for exported addons\n  app.get(\"/api/downloads/:filename\", (req, res) => {\n    try {\n      const { filename } = req.params;\n      \n      // In a real implementation, this would serve the actual addon file\n      // For now, return an appropriate response\n      res.status(404).json({\n        error: \"Download not found\",\n        message: \"Addon file generation is in progress\"\n      });\n    } catch (error) {\n      console.error('Download error:', error);\n      res.status(500).json({ \n        error: \"Download failed\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function for addon content validation\nfunction validateAddonContent(content: any, type: string) {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  switch (type) {\n    case 'entity':\n      if (!content['minecraft:entity']) {\n        errors.push('Missing minecraft:entity object');\n      }\n      if (!content.format_version) {\n        errors.push('Missing format_version');\n      }\n      if (content['minecraft:entity']?.description?.identifier && \n          !content['minecraft:entity'].description.identifier.includes(':')) {\n        warnings.push('Consider using namespaced identifier (e.g., \"my_addon:entity_name\")');\n      }\n      break;\n\n    case 'block':\n      if (!content['minecraft:block']) {\n        errors.push('Missing minecraft:block object');\n      }\n      if (!content.format_version) {\n        errors.push('Missing format_version');\n      }\n      break;\n\n    case 'item':\n      if (!content['minecraft:item']) {\n        errors.push('Missing minecraft:item object');\n      }\n      if (!content.format_version) {\n        errors.push('Missing format_version');\n      }\n      break;\n\n    case 'recipe':\n      const hasShapedRecipe = content['minecraft:recipe_shaped'];\n      const hasShapelessRecipe = content['minecraft:recipe_shapeless'];\n      if (!hasShapedRecipe && !hasShapelessRecipe) {\n        errors.push('Missing recipe type (minecraft:recipe_shaped or minecraft:recipe_shapeless)');\n      }\n      break;\n\n    case 'loot_table':\n      if (!content.pools || !Array.isArray(content.pools)) {\n        errors.push('Missing or invalid pools array');\n      }\n      break;\n\n    default:\n      warnings.push('Unknown content type - limited validation available');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n","size_bytes":12790},"server/storage.ts":{"content":"import { type User, type InsertUser, type InsertProject, type SelectProject } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Project management methods\n  getProject(id: number): Promise<SelectProject | undefined>;\n  getProjectsByType(type: string): Promise<SelectProject[]>;\n  getAllProjects(): Promise<SelectProject[]>;\n  createProject(project: InsertProject): Promise<SelectProject>;\n  updateProject(id: number, project: Partial<InsertProject>): Promise<SelectProject | undefined>;\n  deleteProject(id: number): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private projects: Map<number, SelectProject>;\n  private projectIdCounter: number;\n\n  constructor() {\n    this.users = new Map();\n    this.projects = new Map();\n    this.projectIdCounter = 1;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getProject(id: number): Promise<SelectProject | undefined> {\n    return this.projects.get(id);\n  }\n\n  async getProjectsByType(type: string): Promise<SelectProject[]> {\n    return Array.from(this.projects.values()).filter(\n      (project) => project.type === type,\n    );\n  }\n\n  async getAllProjects(): Promise<SelectProject[]> {\n    return Array.from(this.projects.values());\n  }\n\n  async createProject(insertProject: InsertProject): Promise<SelectProject> {\n    const id = this.projectIdCounter++;\n    const now = new Date();\n    const project: SelectProject = {\n      ...insertProject,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: number, updateData: Partial<InsertProject>): Promise<SelectProject | undefined> {\n    const existingProject = this.projects.get(id);\n    if (!existingProject) {\n      return undefined;\n    }\n    \n    const updatedProject: SelectProject = {\n      ...existingProject,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  async deleteProject(id: number): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2831},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, serial, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Projects table for storing user projects\nexport const projects = pgTable(\"projects\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\", { length: 50 }).notNull(), // entity, block, item, recipe, etc.\n  data: jsonb(\"data\").notNull(), // The project configuration data\n  userId: text(\"user_id\"), // Optional user ID for future auth\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type SelectProject = typeof projects.$inferSelect;\n","size_bytes":1396},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark min-h-screen\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":762},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 90%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 90%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 90%);\n  --primary: hsl(162, 88%, 40%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(214, 32%, 20%);\n  --secondary-foreground: hsl(210, 40%, 90%);\n  --muted: hsl(217, 32%, 15%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(214, 82%, 60%);\n  --accent-foreground: hsl(210, 40%, 95%);\n  --destructive: hsl(0, 62%, 60%);\n  --destructive-foreground: hsl(210, 40%, 95%);\n  --border: hsl(217, 32%, 20%);\n  --input: hsl(217, 32%, 20%);\n  --ring: hsl(162, 88%, 40%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', sans-serif;\n  --font-mono: 'Fira Code', monospace;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 90%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 90%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 90%);\n  --primary: hsl(162, 88%, 40%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(214, 32%, 20%);\n  --secondary-foreground: hsl(210, 40%, 90%);\n  --muted: hsl(217, 32%, 15%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(214, 82%, 60%);\n  --accent-foreground: hsl(210, 40%, 95%);\n  --destructive: hsl(0, 62%, 60%);\n  --destructive-foreground: hsl(210, 40%, 95%);\n  --border: hsl(217, 32%, 20%);\n  --input: hsl(217, 32%, 20%);\n  --ring: hsl(162, 88%, 40%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  .code-editor {\n    font-family: var(--font-mono);\n    background-color: hsl(var(--muted));\n    color: hsl(var(--foreground));\n    border: 1px solid hsl(var(--border));\n  }\n\n  .nav-item {\n    transition: all 0.2s ease;\n  }\n\n  .nav-item:hover {\n    background-color: hsl(var(--secondary));\n  }\n\n  .nav-item.active {\n    background-color: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n  }\n\n  .sidebar-collapsed {\n    width: 4rem;\n  }\n\n  .sidebar-collapsed .nav-text {\n    display: none;\n  }\n\n  /* Mobile sidebar styles */\n  @media (max-width: 767px) {\n    .sidebar-mobile {\n      position: fixed;\n      top: 0;\n      left: 0;\n      height: 100vh;\n      width: 280px;\n      z-index: 50;\n      transform: translateX(-100%);\n      transition: transform 0.3s ease-in-out;\n    }\n\n    .sidebar-mobile.open {\n      transform: translateX(0);\n    }\n\n    .sidebar-overlay {\n      position: fixed;\n      inset: 0;\n      background-color: rgba(0, 0, 0, 0.5);\n      z-index: 40;\n      opacity: 0;\n      visibility: hidden;\n      transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;\n    }\n\n    .sidebar-overlay.open {\n      opacity: 1;\n      visibility: visible;\n    }\n  }\n\n  /* Ensure proper touch targets on mobile */\n  @media (max-width: 767px) {\n    .nav-item, button {\n      min-height: 44px;\n      min-width: 44px;\n    }\n\n    /* Mobile text sizing */\n    .mobile-text-sm {\n      font-size: 0.875rem;\n      line-height: 1.5;\n    }\n\n    .mobile-text-xs {\n      font-size: 0.75rem;\n      line-height: 1.4;\n    }\n  }\n\n  .builder-form {\n    background-color: hsl(var(--card));\n    border: 1px solid hsl(var(--border));\n  }\n\n  .form-input {\n    background-color: hsl(var(--input));\n    border: 1px solid hsl(var(--border));\n    color: hsl(var(--foreground));\n    transition: all 0.2s ease;\n  }\n\n  .form-input:focus {\n    border-color: hsl(var(--ring));\n    outline: none;\n    box-shadow: 0 0 0 2px hsla(var(--ring), 0.3);\n  }\n\n  .btn-primary {\n    background-color: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n  }\n\n  .btn-primary:hover {\n    background-color: hsl(162, 88%, 35%);\n  }\n\n  .btn-secondary {\n    background-color: hsl(var(--secondary));\n    color: hsl(var(--secondary-foreground));\n  }\n\n  .btn-secondary:hover {\n    background-color: hsl(214, 32%, 25%);\n  }\n\n  .texture-canvas-container {\n    background-image: \n      linear-gradient(45deg, hsl(var(--muted)) 25%, transparent 25%), \n      linear-gradient(-45deg, hsl(var(--muted)) 25%, transparent 25%),\n      linear-gradient(45deg, transparent 75%, hsl(var(--muted)) 75%),\n      linear-gradient(-45deg, transparent 75%, hsl(var(--muted)) 75%);\n    background-size: 20px 20px;\n    background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n  }\n\n  .tab-button {\n    transition: all 0.2s ease;\n  }\n\n  .tab-button.active {\n    background-color: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n  }\n\n  .tutorial-step {\n    background-color: hsl(var(--card));\n    border-left: 4px solid hsl(var(--primary));\n  }\n\n  .validation-error {\n    border-color: hsl(var(--destructive));\n    background-color: hsla(var(--destructive), 0.1);\n  }\n\n  .validation-success {\n    border-color: hsl(var(--primary));\n    background-color: hsla(var(--primary), 0.1);\n  }\n\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--border));\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--ring));\n  }\n\n  .modal-overlay {\n    background-color: hsla(var(--background), 0.8);\n    backdrop-filter: blur(4px);\n  }\n\n  .syntax-highlight {\n    font-family: var(--font-mono);\n    background-color: hsl(var(--muted));\n    border: 1px solid hsl(var(--border));\n  }\n\n  .progress-bar {\n    background-color: hsl(var(--muted));\n  }\n\n  .progress-fill {\n    background-color: hsl(var(--primary));\n    transition: width 0.3s ease;\n  }\n\n  .fadeIn {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  /* Collapsible animations */\n  @keyframes collapsible-down {\n    from { height: 0; }\n    to { height: var(--radix-collapsible-content-height); }\n  }\n\n  @keyframes collapsible-up {\n    from { height: var(--radix-collapsible-content-height); }\n    to { height: 0; }\n  }\n\n  [data-state=\"open\"][data-orientation=\"vertical\"] {\n    animation: collapsible-down 200ms ease-out;\n  }\n\n  [data-state=\"closed\"][data-orientation=\"vertical\"] {\n    animation: collapsible-up 200ms ease-out;\n  }\n\n  .animate-collapsible-down {\n    animation: collapsible-down var(--collapsible-animation-duration, 200ms) ease-out;\n  }\n\n  .animate-collapsible-up {\n    animation: collapsible-up var(--collapsible-animation-duration, 200ms) ease-out;\n  }\n\n  /* Fix layout height calculations */\n  .main-layout {\n    height: 100vh;\n    overflow: hidden;\n  }\n\n  .content-area {\n    min-height: 0;\n    flex: 1;\n  }\n\n  /* Ensure iframe containers fill available space */\n  .iframe-container {\n    height: 100%;\n    min-height: 400px;\n    display: flex;\n    flex-direction: column;\n  }\n\n  @media (min-width: 768px) {\n    .iframe-container {\n      min-height: 500px;\n    }\n  }\n\n  @media (min-width: 1024px) {\n    .iframe-container {\n      min-height: 600px;\n    }\n  }\n\n  /* Ensure external tools containers properly size */\n  .external-tools-content {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n\n  /* Fix card content heights */\n  .card-full-height {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .card-full-height .card-content {\n    flex: 1;\n    min-height: 0;\n    display: flex;\n    flex-direction: column;\n  }\n}\n","size_bytes":7650},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useCanvas.ts":{"content":"import { useState, useCallback, useRef } from 'react';\nimport { CanvasTool, BrushSettings } from '@/lib/canvas/tools';\n\ninterface CanvasData {\n  width: number;\n  height: number;\n  pixels: Uint8ClampedArray;\n}\n\nexport function useCanvas(width: number, height: number) {\n  const [canvasData, setCanvasData] = useState<CanvasData>({\n    width,\n    height,\n    pixels: new Uint8ClampedArray(width * height * 4)\n  });\n  \n  const [history, setHistory] = useState<CanvasData[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  const initializeCanvas = useCallback((canvas: HTMLCanvasElement) => {\n    canvasRef.current = canvas;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Fill with transparent white\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    const imageData = ctx.getImageData(0, 0, width, height);\n    const newCanvasData = {\n      width,\n      height,\n      pixels: new Uint8ClampedArray(imageData.data)\n    };\n    \n    setCanvasData(newCanvasData);\n    addToHistory(newCanvasData);\n  }, [width, height]);\n\n  const addToHistory = useCallback((data: CanvasData) => {\n    setHistory(prev => {\n      const newHistory = prev.slice(0, historyIndex + 1);\n      newHistory.push({ ...data, pixels: new Uint8ClampedArray(data.pixels) });\n      return newHistory.slice(-50); // Keep last 50 states\n    });\n    setHistoryIndex(prev => Math.min(prev + 1, 49));\n  }, [historyIndex]);\n\n  const drawOnCanvas = useCallback((x: number, y: number, tool: CanvasTool, settings: BrushSettings) => {\n    if (!canvasRef.current) return;\n    \n    const ctx = canvasRef.current.getContext('2d');\n    if (!ctx) return;\n\n    const scale = canvasRef.current.width / width;\n    const canvasX = x * scale;\n    const canvasY = y * scale;\n\n    ctx.save();\n\n    switch (tool) {\n      case 'brush':\n      case 'pencil':\n        ctx.globalAlpha = settings.opacity;\n        ctx.fillStyle = settings.color;\n        ctx.beginPath();\n        ctx.arc(canvasX, canvasY, (settings.size * scale) / 2, 0, Math.PI * 2);\n        ctx.fill();\n        break;\n\n      case 'eraser':\n        ctx.globalCompositeOperation = 'destination-out';\n        ctx.beginPath();\n        ctx.arc(canvasX, canvasY, (settings.size * scale) / 2, 0, Math.PI * 2);\n        ctx.fill();\n        break;\n\n      case 'fill':\n        // Simple flood fill implementation\n        ctx.fillStyle = settings.color;\n        ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n        break;\n\n      case 'rectangle':\n        ctx.strokeStyle = settings.color;\n        ctx.lineWidth = 2;\n        ctx.strokeRect(canvasX - 10, canvasY - 10, 20, 20);\n        break;\n\n      case 'circle':\n        ctx.strokeStyle = settings.color;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.arc(canvasX, canvasY, 10, 0, Math.PI * 2);\n        ctx.stroke();\n        break;\n    }\n\n    ctx.restore();\n\n    // Update canvas data - capture at logical texture dimensions\n    const imageData = ctx.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);\n    \n    // Create a temporary canvas at the logical texture size to scale down the data\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = width;\n    tempCanvas.height = height;\n    const tempCtx = tempCanvas.getContext('2d');\n    if (tempCtx) {\n      tempCtx.drawImage(canvasRef.current, 0, 0, width, height);\n      const scaledImageData = tempCtx.getImageData(0, 0, width, height);\n      \n      const newCanvasData = {\n        width,\n        height,\n        pixels: new Uint8ClampedArray(scaledImageData.data)\n      };\n      \n      setCanvasData(newCanvasData);\n      addToHistory(newCanvasData);\n    }\n  }, [width, height, addToHistory]);\n\n  const undo = useCallback(() => {\n    if (historyIndex > 0) {\n      const newIndex = historyIndex - 1;\n      const previousState = history[newIndex];\n      setCanvasData(previousState);\n      setHistoryIndex(newIndex);\n      \n      if (canvasRef.current) {\n        const ctx = canvasRef.current.getContext('2d');\n        if (ctx) {\n          // Create temporary canvas at logical size and restore the data\n          const tempCanvas = document.createElement('canvas');\n          tempCanvas.width = width;\n          tempCanvas.height = height;\n          const tempCtx = tempCanvas.getContext('2d');\n          \n          if (tempCtx) {\n            const imageData = new ImageData(previousState.pixels, width, height);\n            tempCtx.putImageData(imageData, 0, 0);\n            \n            // Scale up to display canvas\n            ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n            ctx.drawImage(tempCanvas, 0, 0, canvasRef.current.width, canvasRef.current.height);\n          }\n        }\n      }\n    }\n  }, [history, historyIndex, width, height]);\n\n  const redo = useCallback(() => {\n    if (historyIndex < history.length - 1) {\n      const newIndex = historyIndex + 1;\n      const nextState = history[newIndex];\n      setCanvasData(nextState);\n      setHistoryIndex(newIndex);\n      \n      if (canvasRef.current) {\n        const ctx = canvasRef.current.getContext('2d');\n        if (ctx) {\n          // Create temporary canvas at logical size and restore the data\n          const tempCanvas = document.createElement('canvas');\n          tempCanvas.width = width;\n          tempCanvas.height = height;\n          const tempCtx = tempCanvas.getContext('2d');\n          \n          if (tempCtx) {\n            const imageData = new ImageData(nextState.pixels, width, height);\n            tempCtx.putImageData(imageData, 0, 0);\n            \n            // Scale up to display canvas\n            ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n            ctx.drawImage(tempCanvas, 0, 0, canvasRef.current.width, canvasRef.current.height);\n          }\n        }\n      }\n    }\n  }, [history, historyIndex, width, height]);\n\n  const clearCanvas = useCallback(() => {\n    if (!canvasRef.current) return;\n    \n    const ctx = canvasRef.current.getContext('2d');\n    if (!ctx) return;\n\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    \n    // Create a temporary canvas at the logical texture size to capture data properly\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = width;\n    tempCanvas.height = height;\n    const tempCtx = tempCanvas.getContext('2d');\n    if (tempCtx) {\n      tempCtx.fillStyle = '#FFFFFF';\n      tempCtx.fillRect(0, 0, width, height);\n      const scaledImageData = tempCtx.getImageData(0, 0, width, height);\n      \n      const newCanvasData = {\n        width,\n        height,\n        pixels: new Uint8ClampedArray(scaledImageData.data)\n      };\n      \n      setCanvasData(newCanvasData);\n      addToHistory(newCanvasData);\n    }\n  }, [width, height, addToHistory]);\n\n  const exportCanvas = useCallback(async (format: 'png' | 'jpg' = 'png'): Promise<Blob | null> => {\n    if (!canvasRef.current) return null;\n    \n    // Create a temporary canvas at the logical texture size for export\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = width;\n    tempCanvas.height = height;\n    const tempCtx = tempCanvas.getContext('2d');\n    \n    if (!tempCtx) return null;\n    \n    // Draw the display canvas onto the temp canvas at logical dimensions\n    tempCtx.drawImage(canvasRef.current, 0, 0, width, height);\n    \n    return new Promise((resolve) => {\n      tempCanvas.toBlob((blob) => {\n        resolve(blob);\n      }, `image/${format}`);\n    });\n  }, [width, height]);\n\n  return {\n    canvasData,\n    history,\n    historyIndex,\n    initializeCanvas,\n    drawOnCanvas,\n    undo,\n    redo,\n    clearCanvas,\n    exportCanvas\n  };\n}\n","size_bytes":7836},"client/src/hooks/useLocalStorage.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  // Get from local storage then parse stored json or return initialValue\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      if (typeof window === 'undefined') {\n        return initialValue;\n      }\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      \n      if (typeof window !== 'undefined') {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","size_bytes":1216},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport EntityBuilder from \"@/components/Builders/EntityBuilder\";\nimport BlockBuilder from \"@/components/Builders/BlockBuilder\";\nimport ItemBuilder from \"@/components/Builders/ItemBuilder\";\nimport RecipeBuilder from \"@/components/Builders/RecipeBuilder\";\nimport LootTableBuilder from \"@/components/Builders/LootTableBuilder\";\nimport BiomeBuilder from \"@/components/Builders/BiomeBuilder\";\nimport SpawnRuleBuilder from \"@/components/Builders/SpawnRuleBuilder\";\nimport ClientEntityBuilder from \"@/components/Builders/ClientEntityBuilder\";\nimport TextureCreator from \"@/components/Tools/TextureCreator\";\nimport ScriptStudio from \"@/components/Tools/ScriptStudio\";\nimport AddonPackager from \"@/components/Tools/AddonPackager\";\nimport JSONValidator from \"@/components/Tools/JSONValidator\";\nimport ExternalTools from \"@/components/Tools/ExternalTools\";\nimport Documentation from \"@/components/Documentation/Documentation\";\nimport InteractiveTutorial from \"@/components/Tutorial/InteractiveTutorial\";\nimport QuickStart from \"@/components/Tutorial/QuickStart\";\nimport WelcomeSection from \"@/components/Welcome/WelcomeSection\";\nimport CommunitySection from \"@/components/Community/CommunitySection\";\n\ntype Section = \n  | 'welcome'\n  | 'tutorial'\n  | 'quick-start'\n  | 'documentation'\n  | 'docs-concepts'\n  | 'docs-entities'\n  | 'docs-blocks'\n  | 'docs-items'\n  | 'docs-scripting'\n  | 'builder-entity'\n  | 'builder-client-entity'\n  | 'builder-block'\n  | 'builder-item'\n  | 'builder-recipe'\n  | 'builder-loot'\n  | 'builder-biome'\n  | 'builder-spawn'\n  | 'script-studio'\n  | 'addon-packager'\n  | 'validator'\n  | 'external-tools'\n  | 'community'\n  | 'omni-science';\n\nexport default function Home() {\n  const [currentSection, setCurrentSection] = useState<Section>('welcome');\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const isMobile = useIsMobile();\n\n  // Auto-collapse sidebar on mobile\n  useEffect(() => {\n    if (isMobile && !sidebarCollapsed) {\n      setSidebarCollapsed(true);\n    }\n  }, [isMobile]);\n\n  const handleNavigate = (section: string) => {\n    setCurrentSection(section as Section);\n  };\n\n  const handleMenuToggle = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  const renderSection = () => {\n    switch (currentSection) {\n      case 'welcome':\n        return <WelcomeSection onNavigate={handleNavigate} />;\n      case 'tutorial':\n        return <InteractiveTutorial onNavigate={handleNavigate} />;\n      case 'quick-start':\n        return <QuickStart onNavigate={handleNavigate} />;\n      case 'documentation':\n        return <Documentation onNavigate={handleNavigate} />;\n      \n      // Documentation-specific routing - map sidebar IDs to documentation tabs\n      case 'docs-concepts':\n        return <Documentation onNavigate={handleNavigate} initialTab=\"getting-started\" />;\n      case 'docs-entities':\n        return <Documentation onNavigate={handleNavigate} initialTab=\"entity-development\" />;\n      case 'docs-blocks':\n        return <Documentation onNavigate={handleNavigate} initialTab=\"block-development\" />;\n      case 'docs-items':\n        return <Documentation onNavigate={handleNavigate} initialTab=\"item-development\" />;\n      case 'docs-scripting':\n        return <Documentation onNavigate={handleNavigate} initialTab=\"scripting-apis\" />;\n      \n      case 'builder-entity':\n        return <EntityBuilder />;\n      case 'builder-client-entity':\n        return <ClientEntityBuilder />;\n      case 'builder-block':\n        return <BlockBuilder />;\n      case 'builder-item':\n        return <ItemBuilder />;\n      case 'builder-recipe':\n        return <RecipeBuilder />;\n      case 'builder-loot':\n        return <LootTableBuilder />;\n      case 'builder-biome':\n        return <BiomeBuilder />;\n      case 'builder-spawn':\n        return <SpawnRuleBuilder />;\n      case 'script-studio':\n        return <ScriptStudio />;\n      case 'addon-packager':\n        return <AddonPackager />;\n      case 'validator':\n        return <JSONValidator />;\n      case 'external-tools':\n        return <ExternalTools />;\n      case 'community':\n        return <CommunitySection />;\n      case 'omni-science':\n        return <CommunitySection />;\n      default:\n        return <WelcomeSection onNavigate={handleNavigate} />;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background text-foreground overflow-hidden\">\n      <Sidebar \n        currentSection={currentSection}\n        onSectionChange={handleNavigate}\n        collapsed={sidebarCollapsed}\n        onToggleCollapse={handleMenuToggle}\n      />\n      <main className=\"flex-1 flex flex-col min-w-0 h-full\">\n        <Header \n          currentSection={currentSection} \n          onMenuToggle={isMobile ? handleMenuToggle : undefined}\n          isSidebarOpen={!sidebarCollapsed}\n        />\n        <div className=\"flex-1 overflow-y-auto min-h-0\">\n          <div className=\"fadeIn p-3 sm:p-4 md:p-6 min-h-full\">\n            {renderSection()}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":5208},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/Builders/BiomeBuilder.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Mountain, Download, Copy, Save, RotateCcw, Info, Settings, AlertCircle, FileText, Plus, Layers } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport ValidationStatus from \"@/components/Common/ValidationStatus\";\nimport ComponentSelector, { ComponentItem } from \"@/components/Common/ComponentSelector\";\nimport ComponentForm, { ComponentDefinition } from \"@/components/Common/ComponentForm\";\n\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection, CollapsibleGroup } from \"@/components/ui/collapsible-section\";\nimport { validateBiomeJSON } from \"@/lib/minecraft/validation\";\nimport { \n  ComponentInstance, \n  generateComponentsJSON, \n  applyPreset, \n  getRecommendedComponents,\n  checkComponentCompatibility,\n  validateComponentProperties \n} from \"@/lib/minecraft/componentUtils\";\n\n// Import the comprehensive biome and spawn rule registries\nimport { biomeComponents, spawnRuleComponents, generateBiomeJSON, generateSpawnRulesJSON } from \"@shared/gameplayRegistry\";\n\ninterface SpawnEntity {\n  type: string;\n  weight: number;\n  minGroupSize: number;\n  maxGroupSize: number;\n  components: ComponentInstance[];\n}\n\nexport default function BiomeBuilder() {\n  const { toast } = useToast();\n\n  // Basic biome properties\n  const [identifier, setIdentifier] = useLocalStorage('biome-identifier-v2', '');\n  const [displayName, setDisplayName] = useLocalStorage('biome-display-name-v2', '');\n  const [description, setDescription] = useLocalStorage('biome-description-v2', '');\n\n  // Component management for biome\n  const [biomeComponentInstances, setBiomeComponentInstances] = useLocalStorage<ComponentInstance[]>('biome-components-v2', [\n    {\n      name: 'minecraft:climate',\n      enabled: true,\n      properties: { temperature: 0.8, downfall: 0.4 },\n      metadata: { addedAt: Date.now(), category: 'Climate', difficulty: 'intermediate' }\n    },\n    {\n      name: 'minecraft:surface_parameters',\n      enabled: true,\n      properties: { \n        top_material: 'minecraft:grass',\n        mid_material: 'minecraft:dirt'\n      },\n      metadata: { addedAt: Date.now(), category: 'Surface', difficulty: 'advanced' }\n    }\n  ]);\n\n  // Spawn entity management\n  const [spawnEntities, setSpawnEntities] = useLocalStorage<SpawnEntity[]>('biome-spawn-entities-v2', [\n    {\n      type: 'minecraft:cow',\n      weight: 10,\n      minGroupSize: 4,\n      maxGroupSize: 4,\n      components: [\n        {\n          name: 'minecraft:spawns_on_surface',\n          enabled: true,\n          properties: {},\n          metadata: { addedAt: Date.now(), category: 'Surface', difficulty: 'intermediate' }\n        },\n        {\n          name: 'minecraft:weight',\n          enabled: true,\n          properties: { default: 10 },\n          metadata: { addedAt: Date.now(), category: 'Probability', difficulty: 'beginner' }\n        }\n      ]\n    }\n  ]);\n\n  // UI state\n  const [activeTab, setActiveTab] = useState('basic');\n  const [selectedComponent, setSelectedComponent] = useState<string | null>(null);\n  const [showComponentSelector, setShowComponentSelector] = useState(false);\n  const [showComponentForm, setShowComponentForm] = useState(false);\n  const [editingComponent, setEditingComponent] = useState<ComponentInstance | null>(null);\n  const [componentTargetType, setComponentTargetType] = useState<'biome' | 'spawn'>('biome');\n  const [selectedEntityIndex, setSelectedEntityIndex] = useState<number>(0);\n\n  // Convert registry components to ComponentItem format\n  const availableBiomeComponents: ComponentItem[] = useMemo(() => {\n    return biomeComponents.map(comp => ({\n      name: comp.name,\n      description: comp.description,\n      category: comp.category,\n      subcategory: comp.subcategory,\n      version: comp.version,\n      difficulty: comp.difficulty,\n      properties: comp.properties,\n      example: comp.example,\n      keywords: comp.keywords,\n      stability: comp.stability,\n      dependencies: comp.dependencies,\n      conflicts: comp.conflicts\n    }));\n  }, []);\n\n  const availableSpawnComponents: ComponentItem[] = useMemo(() => {\n    return spawnRuleComponents.map(comp => ({\n      name: comp.name,\n      description: comp.description,\n      category: comp.category,\n      subcategory: comp.subcategory,\n      version: comp.version,\n      difficulty: comp.difficulty,\n      properties: comp.properties,\n      example: comp.example,\n      keywords: comp.keywords,\n      stability: comp.stability,\n      dependencies: comp.dependencies,\n      conflicts: comp.conflicts\n    }));\n  }, []);\n\n  // Get selected component names\n  const selectedBiomeComponentNames = biomeComponentInstances.map(c => c.name);\n\n  // Generate JSON for biome\n  const biomeJSON = useMemo(() => {\n    const componentsJSON = generateComponentsJSON(biomeComponentInstances);\n    \n    return {\n      format_version: \"1.21.0\",\n      \"minecraft:biome\": {\n        description: {\n          identifier: identifier || \"my_addon:custom_biome\"\n        },\n        components: componentsJSON\n      }\n    };\n  }, [identifier, biomeComponentInstances]);\n\n  // Generate JSON for spawn rules\n  const spawnRulesJSON = useMemo(() => {\n    if (spawnEntities.length === 0) return null;\n\n    const spawnRules = spawnEntities.map(entity => {\n      const entityComponents = generateComponentsJSON(entity.components);\n      \n      return {\n        description: {\n          identifier: `${identifier || \"my_addon:custom_biome\"}_${entity.type.replace('minecraft:', '')}_spawn`\n        },\n        conditions: [\n          {\n            ...entityComponents,\n            \"minecraft:permute_type\": [\n              {\n                entity_type: entity.type,\n                weight: entity.weight,\n                min_count: entity.minGroupSize,\n                max_count: entity.maxGroupSize\n              }\n            ]\n          }\n        ]\n      };\n    });\n\n    return {\n      format_version: \"1.21.0\",\n      \"minecraft:spawn_rules\": spawnRules\n    };\n  }, [identifier, spawnEntities]);\n\n  const biomeValidation = validateBiomeJSON(biomeJSON);\n  const spawnValidation = spawnRulesJSON ? validateBiomeJSON(spawnRulesJSON) : { isValid: true, errors: [] };\n\n  const recommendedBiomeComponents = getRecommendedComponents(biomeComponentInstances, availableBiomeComponents, 3);\n\n  // Component management functions\n  const addBiomeComponent = (componentName: string) => {\n    const componentDef = availableBiomeComponents.find(c => c.name === componentName);\n    if (!componentDef) return;\n\n    // Check compatibility\n    const compatibility = checkComponentCompatibility(componentDef, biomeComponentInstances, availableBiomeComponents);\n    if (!compatibility.compatible) {\n      toast({\n        title: \"Cannot add component\",\n        description: compatibility.issues.join(', '),\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Generate default properties\n    const defaultProperties: Record<string, any> = {};\n    componentDef.properties.forEach(prop => {\n      if (prop.default !== undefined) {\n        defaultProperties[prop.name] = prop.default;\n      } else {\n        switch (prop.type) {\n          case 'number':\n            defaultProperties[prop.name] = prop.min ?? prop.example ?? 0;\n            break;\n          case 'boolean':\n            defaultProperties[prop.name] = prop.example ?? false;\n            break;\n          case 'string':\n            defaultProperties[prop.name] = prop.options?.[0] ?? prop.example ?? '';\n            break;\n          case 'range':\n            defaultProperties[prop.name] = prop.example ?? { min: 0, max: 1 };\n            break;\n          case 'vector3':\n            defaultProperties[prop.name] = prop.example ?? { x: 0, y: 0, z: 0 };\n            break;\n          case 'array':\n            defaultProperties[prop.name] = prop.example ?? [];\n            break;\n          case 'object':\n            defaultProperties[prop.name] = prop.example ?? {};\n            break;\n        }\n      }\n    });\n\n    const newComponent: ComponentInstance = {\n      name: componentName,\n      enabled: true,\n      properties: defaultProperties,\n      metadata: {\n        addedAt: Date.now(),\n        category: componentDef.category,\n        difficulty: componentDef.difficulty\n      }\n    };\n\n    setBiomeComponentInstances([...biomeComponentInstances, newComponent]);\n    setShowComponentSelector(false);\n\n    toast({\n      title: \"Component added\",\n      description: `${componentName} has been added to the biome.`\n    });\n  };\n\n  const removeBiomeComponent = (componentName: string) => {\n    setBiomeComponentInstances(biomeComponentInstances.filter(c => c.name !== componentName));\n  };\n\n  const updateBiomeComponent = (componentName: string, newProperties: Record<string, any>) => {\n    setBiomeComponentInstances(biomeComponentInstances.map(comp => \n      comp.name === componentName \n        ? { ...comp, properties: newProperties }\n        : comp\n    ));\n  };\n\n  const toggleBiomeComponent = (componentName: string) => {\n    setBiomeComponentInstances(biomeComponentInstances.map(comp =>\n      comp.name === componentName \n        ? { ...comp, enabled: !comp.enabled }\n        : comp\n    ));\n  };\n\n  // Spawn entity management\n  const addSpawnEntity = () => {\n    const newEntity: SpawnEntity = {\n      type: 'minecraft:cow',\n      weight: 10,\n      minGroupSize: 1,\n      maxGroupSize: 4,\n      components: [\n        {\n          name: 'minecraft:spawns_on_surface',\n          enabled: true,\n          properties: {},\n          metadata: { addedAt: Date.now(), category: 'Surface', difficulty: 'intermediate' }\n        }\n      ]\n    };\n    setSpawnEntities([...spawnEntities, newEntity]);\n  };\n\n  const removeSpawnEntity = (index: number) => {\n    setSpawnEntities(spawnEntities.filter((_, i) => i !== index));\n    if (selectedEntityIndex >= spawnEntities.length - 1) {\n      setSelectedEntityIndex(Math.max(0, index - 1));\n    }\n  };\n\n  const updateSpawnEntity = (index: number, updates: Partial<SpawnEntity>) => {\n    setSpawnEntities(spawnEntities.map((entity, i) => \n      i === index ? { ...entity, ...updates } : entity\n    ));\n  };\n\n  const openComponentForm = (component: ComponentInstance) => {\n    setEditingComponent(component);\n    setShowComponentForm(true);\n  };\n\n  const handleComponentFormSubmit = (values: Record<string, any>) => {\n    if (editingComponent) {\n      if (componentTargetType === 'biome') {\n        updateBiomeComponent(editingComponent.name, values);\n      } else {\n        // Update spawn component for selected entity\n        const entity = spawnEntities[selectedEntityIndex];\n        const updatedComponents = entity.components.map(comp =>\n          comp.name === editingComponent.name ? { ...comp, properties: values } : comp\n        );\n        updateSpawnEntity(selectedEntityIndex, { components: updatedComponents });\n      }\n      \n      setShowComponentForm(false);\n      setEditingComponent(null);\n      \n      toast({\n        title: \"Component updated\",\n        description: `${editingComponent.name} has been updated successfully.`\n      });\n    }\n  };\n\n  const resetBiome = () => {\n    setBiomeComponentInstances([\n      {\n        name: 'minecraft:climate',\n        enabled: true,\n        properties: { temperature: 0.8, downfall: 0.4 },\n        metadata: { addedAt: Date.now(), category: 'Climate', difficulty: 'intermediate' }\n      }\n    ]);\n    setSpawnEntities([]);\n    setIdentifier('');\n    setDisplayName('');\n    setDescription('');\n    \n    toast({\n      title: \"Biome reset\",\n      description: \"Biome has been reset to default state.\"\n    });\n  };\n\n  const exportToClipboard = (content: any, type: string) => {\n    navigator.clipboard.writeText(JSON.stringify(content, null, 2));\n    toast({\n      title: \"Copied to clipboard\",\n      description: `${type} JSON has been copied to your clipboard.`\n    });\n  };\n\n  const biomeComponentsByCategory = useMemo(() => {\n    const grouped: Record<string, ComponentInstance[]> = {};\n    biomeComponentInstances.forEach(comp => {\n      const category = comp.metadata?.category || 'Other';\n      if (!grouped[category]) grouped[category] = [];\n      grouped[category].push(comp);\n    });\n    return grouped;\n  }, [biomeComponentInstances]);\n\n  const getComponentDefinition = (componentName: string, isSpawnComponent: boolean = false): ComponentDefinition | null => {\n    const components = isSpawnComponent ? availableSpawnComponents : availableBiomeComponents;\n    const def = components.find(c => c.name === componentName);\n    if (!def) return null;\n    \n    return {\n      name: def.name,\n      description: def.description,\n      category: def.category,\n      subcategory: def.subcategory,\n      version: def.version,\n      difficulty: def.difficulty,\n      properties: def.properties,\n      example: def.example,\n      keywords: def.keywords,\n      stability: def.stability,\n      dependencies: def.dependencies,\n      conflicts: def.conflicts\n    };\n  };\n\n  return (\n    <TooltipProvider>\n      <section className=\"p-6\" data-testid=\"biome-builder\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* Builder Form */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Mountain className=\"w-5 h-5\" />\n                    Biome Configuration\n                  </CardTitle>\n                  <CardDescription>\n                    Create comprehensive Minecraft Bedrock biomes with spawn rules\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Tabs value={activeTab} onValueChange={setActiveTab}>\n                    <TabsList className=\"grid w-full grid-cols-4\">\n                      <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic</TabsTrigger>\n                      <TabsTrigger value=\"components\" data-testid=\"tab-components\">\n                        Components ({biomeComponentInstances.length})\n                      </TabsTrigger>\n                      <TabsTrigger value=\"spawning\" data-testid=\"tab-spawning\">\n                        Spawning ({spawnEntities.length})\n                      </TabsTrigger>\n                      <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"basic\" className=\"space-y-4\">\n                      <div className=\"grid gap-4\">\n                        <div>\n                          <Label htmlFor=\"biome-identifier\">Biome Identifier *</Label>\n                          <Input\n                            id=\"biome-identifier\"\n                            value={identifier}\n                            onChange={(e) => setIdentifier(e.target.value)}\n                            placeholder=\"my_addon:custom_biome\"\n                            data-testid=\"input-identifier\"\n                          />\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Must include namespace (e.g., my_addon:biome_name)\n                          </p>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"biome-display-name\">Display Name</Label>\n                          <Input\n                            id=\"biome-display-name\"\n                            value={displayName}\n                            onChange={(e) => setDisplayName(e.target.value)}\n                            placeholder=\"Custom Biome\"\n                            data-testid=\"input-display-name\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"biome-description\">Description</Label>\n                          <Input\n                            id=\"biome-description\"\n                            value={description}\n                            onChange={(e) => setDescription(e.target.value)}\n                            placeholder=\"A custom biome for my addon\"\n                            data-testid=\"input-description\"\n                          />\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"components\" className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">Biome Components</h4>\n                        <Button \n                          onClick={() => {\n                            setComponentTargetType('biome');\n                            setShowComponentSelector(true);\n                          }}\n                          data-testid=\"button-add-component\"\n                        >\n                          Add Component\n                        </Button>\n                      </div>\n\n                      {recommendedBiomeComponents.length > 0 && (\n                        <Alert>\n                          <Info className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            <div className=\"space-y-2\">\n                              <p className=\"font-medium\">Recommended components:</p>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {recommendedBiomeComponents.map(comp => (\n                                  <Button\n                                    key={comp.name}\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => addBiomeComponent(comp.name)}\n                                    data-testid={`button-add-recommended-${comp.name}`}\n                                  >\n                                    {comp.name}\n                                  </Button>\n                                ))}\n                              </div>\n                            </div>\n                          </AlertDescription>\n                        </Alert>\n                      )}\n\n                      <ScrollArea className=\"h-[400px]\">\n                        <Accordion type=\"single\" collapsible className=\"space-y-2\">\n                          {Object.entries(biomeComponentsByCategory).map(([category, categoryComponents]) => (\n                            <AccordionItem key={category} value={category}>\n                              <AccordionTrigger className=\"text-sm\" data-testid={`accordion-${category}`}>\n                                {category} ({categoryComponents.length})\n                              </AccordionTrigger>\n                              <AccordionContent>\n                                <div className=\"space-y-2\">\n                                  {categoryComponents.map((component) => {\n                                    const def = getComponentDefinition(component.name);\n                                    return (\n                                      <Card key={component.name} className=\"p-3\">\n                                        <div className=\"flex items-start justify-between gap-2\">\n                                          <div className=\"flex-1 min-w-0\">\n                                            <div className=\"flex items-center gap-2 mb-1\">\n                                              <Switch\n                                                checked={component.enabled}\n                                                onCheckedChange={() => toggleBiomeComponent(component.name)}\n                                                data-testid={`switch-${component.name}`}\n                                              />\n                                              <span className=\"font-medium text-sm truncate\">\n                                                {component.name}\n                                              </span>\n                                              {def && (\n                                                <Badge \n                                                  variant=\"outline\" \n                                                  className={`text-xs ${\n                                                    def.difficulty === 'beginner' ? 'border-green-500' :\n                                                    def.difficulty === 'intermediate' ? 'border-yellow-500' :\n                                                    'border-red-500'\n                                                  }`}\n                                                >\n                                                  {def.difficulty}\n                                                </Badge>\n                                              )}\n                                            </div>\n                                            {def && (\n                                              <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                                                {def.description}\n                                              </p>\n                                            )}\n                                          </div>\n                                          <div className=\"flex gap-1\">\n                                            <Tooltip>\n                                              <TooltipTrigger asChild>\n                                                <Button\n                                                  variant=\"ghost\"\n                                                  size=\"sm\"\n                                                  onClick={() => {\n                                                    setComponentTargetType('biome');\n                                                    openComponentForm(component);\n                                                  }}\n                                                  disabled={!component.enabled}\n                                                  data-testid={`button-configure-${component.name}`}\n                                                >\n                                                  <Settings className=\"w-3 h-3\" />\n                                                </Button>\n                                              </TooltipTrigger>\n                                              <TooltipContent>Configure properties</TooltipContent>\n                                            </Tooltip>\n                                            <Tooltip>\n                                              <TooltipTrigger asChild>\n                                                <Button\n                                                  variant=\"ghost\"\n                                                  size=\"sm\"\n                                                  onClick={() => removeBiomeComponent(component.name)}\n                                                  data-testid={`button-remove-${component.name}`}\n                                                >\n                                                  <AlertCircle className=\"w-3 h-3\" />\n                                                </Button>\n                                              </TooltipTrigger>\n                                              <TooltipContent>Remove component</TooltipContent>\n                                            </Tooltip>\n                                          </div>\n                                        </div>\n                                      </Card>\n                                    );\n                                  })}\n                                </div>\n                              </AccordionContent>\n                            </AccordionItem>\n                          ))}\n                        </Accordion>\n                      </ScrollArea>\n                    </TabsContent>\n\n                    <TabsContent value=\"spawning\" className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">Spawn Entities</h4>\n                        <Button onClick={addSpawnEntity} data-testid=\"button-add-spawn-entity\">\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Entity\n                        </Button>\n                      </div>\n\n                      <ScrollArea className=\"h-[400px]\">\n                        {spawnEntities.map((entity, index) => (\n                          <Card key={index} className=\"p-4 mb-4\">\n                            <div className=\"space-y-4\">\n                              <div className=\"flex items-center justify-between\">\n                                <h5 className=\"font-medium\">Entity {index + 1}</h5>\n                                <Button\n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  onClick={() => removeSpawnEntity(index)}\n                                  data-testid={`button-remove-entity-${index}`}\n                                >\n                                  <AlertCircle className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n\n                              <div className=\"grid grid-cols-2 gap-2\">\n                                <div>\n                                  <Label className=\"text-xs\">Entity Type</Label>\n                                  <Input\n                                    value={entity.type}\n                                    onChange={(e) => updateSpawnEntity(index, { type: e.target.value })}\n                                    placeholder=\"minecraft:cow\"\n                                    data-testid={`input-entity-type-${index}`}\n                                  />\n                                </div>\n                                <div>\n                                  <Label className=\"text-xs\">Weight</Label>\n                                  <Input\n                                    type=\"number\"\n                                    value={entity.weight}\n                                    onChange={(e) => updateSpawnEntity(index, { weight: parseInt(e.target.value) || 10 })}\n                                    data-testid={`input-entity-weight-${index}`}\n                                  />\n                                </div>\n                                <div>\n                                  <Label className=\"text-xs\">Min Group Size</Label>\n                                  <Input\n                                    type=\"number\"\n                                    value={entity.minGroupSize}\n                                    onChange={(e) => updateSpawnEntity(index, { minGroupSize: parseInt(e.target.value) || 1 })}\n                                    data-testid={`input-entity-min-group-${index}`}\n                                  />\n                                </div>\n                                <div>\n                                  <Label className=\"text-xs\">Max Group Size</Label>\n                                  <Input\n                                    type=\"number\"\n                                    value={entity.maxGroupSize}\n                                    onChange={(e) => updateSpawnEntity(index, { maxGroupSize: parseInt(e.target.value) || 4 })}\n                                    data-testid={`input-entity-max-group-${index}`}\n                                  />\n                                </div>\n                              </div>\n\n                              <div>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <Label className=\"text-xs\">Spawn Components ({entity.components.length})</Label>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => {\n                                      setSelectedEntityIndex(index);\n                                      setComponentTargetType('spawn');\n                                      setShowComponentSelector(true);\n                                    }}\n                                    data-testid={`button-add-spawn-component-${index}`}\n                                  >\n                                    <Plus className=\"w-3 h-3 mr-1\" />\n                                    Add Component\n                                  </Button>\n                                </div>\n                                {entity.components.map((component, compIndex) => (\n                                  <div key={compIndex} className=\"flex items-center gap-2 p-2 bg-muted rounded text-xs mb-1\">\n                                    <Switch\n                                      checked={component.enabled}\n                                      onCheckedChange={(enabled) => {\n                                        const newComponents = [...entity.components];\n                                        newComponents[compIndex] = { ...component, enabled };\n                                        updateSpawnEntity(index, { components: newComponents });\n                                      }}\n                                    />\n                                    <span className=\"flex-1 font-mono\">{component.name}</span>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => {\n                                        setSelectedEntityIndex(index);\n                                        setComponentTargetType('spawn');\n                                        openComponentForm(component);\n                                      }}\n                                      data-testid={`button-configure-spawn-component-${index}-${compIndex}`}\n                                    >\n                                      <Settings className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          </Card>\n                        ))}\n                      </ScrollArea>\n                    </TabsContent>\n\n                    <TabsContent value=\"advanced\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-medium mb-2\">Actions</h4>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              onClick={resetBiome}\n                              data-testid=\"button-reset\"\n                            >\n                              <RotateCcw className=\"w-4 h-4 mr-2\" />\n                              Reset\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => exportToClipboard(biomeJSON, 'Biome')}\n                              data-testid=\"button-export-biome\"\n                            >\n                              <Copy className=\"w-4 h-4 mr-2\" />\n                              Copy Biome JSON\n                            </Button>\n                            {spawnRulesJSON && (\n                              <Button\n                                variant=\"outline\"\n                                onClick={() => exportToClipboard(spawnRulesJSON, 'Spawn Rules')}\n                                data-testid=\"button-export-spawn\"\n                              >\n                                <FileText className=\"w-4 h-4 mr-2\" />\n                                Copy Spawn Rules JSON\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-3\">\n                          <h4 className=\"font-medium\">Biome Statistics</h4>\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div className=\"bg-muted p-3 rounded\">\n                              <div className=\"font-medium\">Biome Components</div>\n                              <div className=\"text-2xl font-bold\">{biomeComponentInstances.length}</div>\n                            </div>\n                            <div className=\"bg-muted p-3 rounded\">\n                              <div className=\"font-medium\">Spawn Entities</div>\n                              <div className=\"text-2xl font-bold\">{spawnEntities.length}</div>\n                            </div>\n                            <div className=\"bg-muted p-3 rounded\">\n                              <div className=\"font-medium\">Enabled Components</div>\n                              <div className=\"text-2xl font-bold\">{biomeComponentInstances.filter(c => c.enabled).length}</div>\n                            </div>\n                            <div className=\"bg-muted p-3 rounded\">\n                              <div className=\"font-medium\">Total Spawn Weight</div>\n                              <div className=\"text-2xl font-bold\">{spawnEntities.reduce((sum, entity) => sum + entity.weight, 0)}</div>\n                            </div>\n                          </div>\n                        </div>\n\n                        <ValidationStatus validation={biomeValidation} />\n                        {spawnRulesJSON && (\n                          <div>\n                            <h5 className=\"font-medium mb-2\">Spawn Rules Validation</h5>\n                            <ValidationStatus validation={spawnValidation} />\n                          </div>\n                        )}\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* JSON Preview */}\n            <div className=\"space-y-6\">\n              <CodePreview \n                code={JSON.stringify(biomeJSON, null, 2)}\n                language=\"json\"\n                title=\"Biome JSON\"\n                validation={biomeValidation}\n              />\n              \n              {spawnRulesJSON && (\n                <CodePreview \n                  code={JSON.stringify(spawnRulesJSON, null, 2)}\n                  language=\"json\"\n                  title=\"Spawn Rules JSON\"\n                  validation={spawnValidation}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Component Selector Modal */}\n        {showComponentSelector && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-background rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n              <ComponentSelector\n                components={componentTargetType === 'biome' ? availableBiomeComponents : availableSpawnComponents}\n                selectedComponents={componentTargetType === 'biome' ? selectedBiomeComponentNames : []}\n                onAddComponent={componentTargetType === 'biome' ? addBiomeComponent : (componentName) => {\n                  // Add spawn component to selected entity\n                  const entity = spawnEntities[selectedEntityIndex];\n                  const componentDef = availableSpawnComponents.find(c => c.name === componentName);\n                  if (componentDef) {\n                    const newComponent: ComponentInstance = {\n                      name: componentName,\n                      enabled: true,\n                      properties: {},\n                      metadata: {\n                        addedAt: Date.now(),\n                        category: componentDef.category,\n                        difficulty: componentDef.difficulty\n                      }\n                    };\n                    updateSpawnEntity(selectedEntityIndex, {\n                      components: [...entity.components, newComponent]\n                    });\n                    setShowComponentSelector(false);\n                  }\n                }}\n                onRemoveComponent={() => {}}\n                title={`Add ${componentTargetType === 'biome' ? 'Biome' : 'Spawn Rule'} Components`}\n                description={`Choose from official Minecraft Bedrock ${componentTargetType} components`}\n                showCategories={true}\n                showCompatibility={true}\n              />\n              <div className=\"p-4 border-t flex justify-end\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowComponentSelector(false)}\n                  data-testid=\"button-close-selector\"\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Component Form Modal */}\n        {showComponentForm && editingComponent && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-background rounded-lg shadow-lg max-w-2xl w-full max-h-[90vh] overflow-hidden\">\n              {(() => {\n                const def = getComponentDefinition(editingComponent.name, componentTargetType === 'spawn');\n                return def ? (\n                  <ComponentForm\n                    component={def}\n                    initialValues={editingComponent.properties}\n                    onSubmit={handleComponentFormSubmit}\n                    onCancel={() => {\n                      setShowComponentForm(false);\n                      setEditingComponent(null);\n                    }}\n                    isEditing={true}\n                    showExample={true}\n                  />\n                ) : null;\n              })()}\n            </div>\n          </div>\n        )}\n      </section>\n    </TooltipProvider>\n  );\n}","size_bytes":38896},"client/src/components/Builders/BlockBuilder.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Package, Download, Copy, Save, RotateCcw, Info, Zap, AlertCircle, Settings, FileText, Layers, Box } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport ValidationStatus from \"@/components/Common/ValidationStatus\";\nimport ComponentSelector, { ComponentItem } from \"@/components/Common/ComponentSelector\";\nimport ComponentForm, { ComponentDefinition } from \"@/components/Common/ComponentForm\";\n\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { validateBlockJSON } from \"@/lib/minecraft/validation\";\nimport { \n  ComponentInstance, \n  generateComponentsJSON, \n  applyPreset, \n  getRecommendedComponents,\n  checkComponentCompatibility,\n  validateComponentProperties,\n  BLOCK_PRESETS \n} from \"@/lib/minecraft/componentUtils\";\n\n// Import the comprehensive block registry\nimport { blockComponents } from \"@shared/blockRegistry\";\n\nexport default function BlockBuilder() {\n  const { toast } = useToast();\n\n  // Basic block properties\n  const [identifier, setIdentifier] = useLocalStorage('block-identifier', '');\n  const [displayName, setDisplayName] = useLocalStorage('block-display-name', '');\n  const [description, setDescription] = useLocalStorage('block-description', '');\n  const [registerToCreative, setRegisterToCreative] = useLocalStorage('block-creative', true);\n  const [creativeCategory, setCreativeCategory] = useLocalStorage('block-category', 'construction');\n\n  // Component management\n  const [components, setComponents] = useLocalStorage<ComponentInstance[]>('block-components-v2', [\n    {\n      name: 'minecraft:destructible_by_mining',\n      enabled: true,\n      properties: { seconds_to_destroy: 1.5 },\n      metadata: { addedAt: Date.now(), category: 'Core', difficulty: 'beginner' }\n    },\n    {\n      name: 'minecraft:destructible_by_explosion',\n      enabled: true,\n      properties: { explosion_resistance: 6.0 },\n      metadata: { addedAt: Date.now(), category: 'Core', difficulty: 'beginner' }\n    },\n    {\n      name: 'minecraft:material_instances',\n      enabled: true,\n      properties: {\n        \"*\": {\n          texture: \"custom_block\",\n          render_method: \"opaque\"\n        }\n      },\n      metadata: { addedAt: Date.now(), category: 'Visual', difficulty: 'beginner' }\n    }\n  ]);\n\n  // UI state\n  const [activeTab, setActiveTab] = useState('basic');\n  const [selectedComponent, setSelectedComponent] = useState<string | null>(null);\n  const [showComponentSelector, setShowComponentSelector] = useState(false);\n  const [showComponentForm, setShowComponentForm] = useState(false);\n  const [editingComponent, setEditingComponent] = useState<ComponentInstance | null>(null);\n\n  // Convert registry components to ComponentItem format\n  const availableComponents: ComponentItem[] = useMemo(() => {\n    return blockComponents.map(comp => ({\n      name: comp.name,\n      description: comp.description,\n      category: comp.category,\n      subcategory: comp.subcategory,\n      version: comp.version,\n      difficulty: comp.difficulty,\n      properties: comp.properties,\n      example: comp.example,\n      keywords: comp.keywords,\n      stability: comp.stability,\n      dependencies: comp.dependencies,\n      conflicts: comp.conflicts\n    }));\n  }, []);\n\n  // Get selected component names for ComponentSelector\n  const selectedComponentNames = components.map(c => c.name);\n\n  // Generate JSON\n  const blockJSON = useMemo(() => {\n    const componentsJSON = generateComponentsJSON(components);\n    \n    return {\n      format_version: \"1.21.0\",\n      \"minecraft:block\": {\n        description: {\n          identifier: identifier || \"my_addon:custom_block\",\n          register_to_creative_menu: registerToCreative,\n          ...(registerToCreative && {\n            menu_category: {\n              category: creativeCategory\n            }\n          })\n        },\n        components: componentsJSON\n      }\n    };\n  }, [identifier, registerToCreative, creativeCategory, components]);\n\n  const validation = validateBlockJSON(blockJSON);\n  const recommendedComponents = getRecommendedComponents(components, availableComponents, 3);\n\n  // Creative menu categories\n  const creativeCategories = [\n    { value: 'construction', label: 'Construction' },\n    { value: 'nature', label: 'Nature' },\n    { value: 'equipment', label: 'Equipment' },\n    { value: 'items', label: 'Items' }\n  ];\n\n  // Component management functions\n  const addComponent = (componentName: string) => {\n    const componentDef = availableComponents.find(c => c.name === componentName);\n    if (!componentDef) return;\n\n    // Check compatibility\n    const compatibility = checkComponentCompatibility(componentDef, components, availableComponents);\n    if (!compatibility.compatible) {\n      toast({\n        title: \"Cannot add component\",\n        description: compatibility.issues.join(', '),\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Generate default properties\n    const defaultProperties: Record<string, any> = {};\n    componentDef.properties.forEach(prop => {\n      if (prop.default !== undefined) {\n        defaultProperties[prop.name] = prop.default;\n      } else {\n        switch (prop.type) {\n          case 'number':\n            defaultProperties[prop.name] = prop.min ?? prop.example ?? 0;\n            break;\n          case 'boolean':\n            defaultProperties[prop.name] = prop.example ?? false;\n            break;\n          case 'string':\n            defaultProperties[prop.name] = prop.options?.[0] ?? prop.example ?? '';\n            break;\n          case 'range':\n            defaultProperties[prop.name] = prop.example ?? { min: 0, max: 1 };\n            break;\n          case 'vector3':\n            defaultProperties[prop.name] = prop.example ?? { x: 0, y: 0, z: 0 };\n            break;\n          case 'array':\n            defaultProperties[prop.name] = prop.example ?? [];\n            break;\n          case 'object':\n            defaultProperties[prop.name] = prop.example ?? {};\n            break;\n        }\n      }\n    });\n\n    const newComponent: ComponentInstance = {\n      name: componentName,\n      enabled: true,\n      properties: defaultProperties,\n      metadata: {\n        addedAt: Date.now(),\n        category: componentDef.category,\n        difficulty: componentDef.difficulty\n      }\n    };\n\n    setComponents([...components, newComponent]);\n    setShowComponentSelector(false);\n\n    // Show warnings if any\n    if (compatibility.warnings.length > 0) {\n      toast({\n        title: \"Component added with warnings\",\n        description: compatibility.warnings.join(', '),\n        variant: \"default\"\n      });\n    }\n  };\n\n  const removeComponent = (componentName: string) => {\n    setComponents(components.filter(c => c.name !== componentName));\n    if (selectedComponent === componentName) {\n      setSelectedComponent(null);\n    }\n  };\n\n  const updateComponent = (componentName: string, newProperties: Record<string, any>) => {\n    setComponents(components.map(comp => \n      comp.name === componentName \n        ? { ...comp, properties: newProperties }\n        : comp\n    ));\n  };\n\n  const toggleComponent = (componentName: string) => {\n    setComponents(components.map(comp =>\n      comp.name === componentName \n        ? { ...comp, enabled: !comp.enabled }\n        : comp\n    ));\n  };\n\n  const openComponentForm = (component: ComponentInstance) => {\n    setEditingComponent(component);\n    setShowComponentForm(true);\n  };\n\n  const handleComponentFormSubmit = (values: Record<string, any>) => {\n    if (editingComponent) {\n      updateComponent(editingComponent.name, values);\n      setShowComponentForm(false);\n      setEditingComponent(null);\n      \n      toast({\n        title: \"Component updated\",\n        description: `${editingComponent.name} has been updated successfully.`\n      });\n    }\n  };\n\n  const applyBlockPreset = (presetName: string) => {\n    const presetComponents = applyPreset(presetName, 'block', availableComponents);\n    setComponents(presetComponents);\n    \n    toast({\n      title: \"Preset applied\",\n      description: `Applied ${presetName} preset with ${presetComponents.length} components.`\n    });\n  };\n\n  const resetBlock = () => {\n    setComponents([\n      {\n        name: 'minecraft:destructible_by_mining',\n        enabled: true,\n        properties: { seconds_to_destroy: 1.5 },\n        metadata: { addedAt: Date.now(), category: 'Core', difficulty: 'beginner' }\n      }\n    ]);\n    setIdentifier('');\n    setDisplayName('');\n    setDescription('');\n    \n    toast({\n      title: \"Block reset\",\n      description: \"Block has been reset to default state.\"\n    });\n  };\n\n  const exportToClipboard = () => {\n    navigator.clipboard.writeText(JSON.stringify(blockJSON, null, 2));\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Block JSON has been copied to your clipboard.\"\n    });\n  };\n\n  // Components display in categories\n  const renderComponentsByCategory = () => (\n    <div className=\"space-y-3\">\n      {Object.entries(componentsByCategory).map(([category, categoryComponents]) => (\n        <Accordion key={category} type=\"single\" collapsible>\n          <AccordionItem value={category}>\n            <AccordionTrigger className=\"text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <Layers className=\"w-4 h-4\" />\n                {category}\n                <Badge variant=\"outline\">{categoryComponents.length}</Badge>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent>\n              <div className=\"space-y-2 pt-2\">\n                {categoryComponents.map((component) => {\n                  const def = getComponentDefinition(component.name);\n                  return (\n                    <Card key={component.name} className=\"p-3\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <Switch\n                              checked={component.enabled}\n                              onCheckedChange={() => toggleComponent(component.name)}\n                              data-testid={`switch-${component.name}`}\n                            />\n                            <span className=\"font-medium text-sm truncate\">\n                              {component.name}\n                            </span>\n                            {def && (\n                              <Badge \n                                variant=\"outline\" \n                                className={`text-xs ${\n                                  def.difficulty === 'beginner' ? 'border-green-500' :\n                                  def.difficulty === 'intermediate' ? 'border-yellow-500' :\n                                  'border-red-500'\n                                }`}\n                              >\n                                {def.difficulty}\n                              </Badge>\n                            )}\n                          </div>\n                          {def && (\n                            <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                              {def.description}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-1\">\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => openComponentForm(component)}\n                                disabled={!component.enabled}\n                                data-testid={`button-configure-${component.name}`}\n                              >\n                                <Zap className=\"w-3 h-3\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>Configure properties</TooltipContent>\n                          </Tooltip>\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeComponent(component.name)}\n                                data-testid={`button-remove-${component.name}`}\n                              >\n                                <AlertCircle className=\"w-3 h-3\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>Remove component</TooltipContent>\n                          </Tooltip>\n                        </div>\n                      </div>\n                    </Card>\n                  );\n                })}\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      ))}\n    </div>\n  );\n\n  // Render tab badge counts\n  const getComponentsTabLabel = () => `Components${components.length > 0 ? ` (${components.length})` : ''}`;\n  const getAdvancedTabLabel = () => {\n    const errorCount = validation.errors?.length || 0;\n    return errorCount > 0 ? `Advanced (${errorCount})` : 'Advanced';\n  };\n\n  const componentsByCategory = useMemo(() => {\n    const grouped: Record<string, ComponentInstance[]> = {};\n    components.forEach(comp => {\n      const category = comp.metadata?.category || 'Other';\n      if (!grouped[category]) grouped[category] = [];\n      grouped[category].push(comp);\n    });\n    return grouped;\n  }, [components]);\n\n  const getComponentDefinition = (componentName: string): ComponentDefinition | null => {\n    const def = availableComponents.find(c => c.name === componentName);\n    if (!def) return null;\n    \n    return {\n      name: def.name,\n      description: def.description,\n      category: def.category,\n      subcategory: def.subcategory,\n      version: def.version,\n      difficulty: def.difficulty,\n      properties: def.properties,\n      example: def.example,\n      keywords: def.keywords,\n      stability: def.stability,\n      dependencies: def.dependencies,\n      conflicts: def.conflicts\n    };\n  };\n\n  return (\n    <TooltipProvider>\n      <section className=\"p-6\" data-testid=\"block-builder\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* Builder Form */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"w-5 h-5\" />\n                    Block Configuration\n                  </CardTitle>\n                  <CardDescription>\n                    Create comprehensive Minecraft Bedrock blocks with all official components\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Tabs value={activeTab} onValueChange={setActiveTab}>\n                    <TabsList className=\"grid w-full grid-cols-4\">\n                      <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic</TabsTrigger>\n                      <TabsTrigger value=\"components\" data-testid=\"tab-components\">\n                        {getComponentsTabLabel()}\n                      </TabsTrigger>\n                      <TabsTrigger value=\"presets\" data-testid=\"tab-presets\">Presets</TabsTrigger>\n                      <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">\n                        {getAdvancedTabLabel()}\n                      </TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"basic\" className=\"space-y-4\">\n                      <div className=\"grid gap-4\">\n                        <div>\n                          <Label htmlFor=\"block-identifier\">Block Identifier *</Label>\n                          <Input\n                            id=\"block-identifier\"\n                            value={identifier}\n                            onChange={(e) => setIdentifier(e.target.value)}\n                            placeholder=\"my_addon:custom_block\"\n                            data-testid=\"input-identifier\"\n                          />\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Must include namespace (e.g., my_addon:block_name)\n                          </p>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"block-display-name\">Display Name</Label>\n                          <Input\n                            id=\"block-display-name\"\n                            value={displayName}\n                            onChange={(e) => setDisplayName(e.target.value)}\n                            placeholder=\"Custom Block\"\n                            data-testid=\"input-display-name\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"block-description\">Description</Label>\n                          <Input\n                            id=\"block-description\"\n                            value={description}\n                            onChange={(e) => setDescription(e.target.value)}\n                            placeholder=\"A custom block for my addon\"\n                            data-testid=\"input-description\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch\n                              id=\"register-creative\"\n                              checked={registerToCreative}\n                              onCheckedChange={setRegisterToCreative}\n                              data-testid=\"switch-creative\"\n                            />\n                            <Label htmlFor=\"register-creative\">Register to Creative Menu</Label>\n                          </div>\n\n                          {registerToCreative && (\n                            <div>\n                              <Label htmlFor=\"creative-category\">Creative Category</Label>\n                              <Select value={creativeCategory} onValueChange={setCreativeCategory}>\n                                <SelectTrigger data-testid=\"select-creative-category\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {creativeCategories.map(category => (\n                                    <SelectItem key={category.value} value={category.value}>\n                                      {category.label}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"components\" className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">Block Components</h4>\n                        <Button \n                          onClick={() => setShowComponentSelector(true)}\n                          data-testid=\"button-add-component\"\n                        >\n                          Add Component\n                        </Button>\n                      </div>\n\n                      {recommendedComponents.length > 0 && (\n                        <Alert>\n                          <Info className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            <div className=\"space-y-2\">\n                              <p className=\"font-medium\">Recommended components:</p>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {recommendedComponents.slice(0, 3).map(comp => (\n                                  <Button\n                                    key={comp.name}\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => addComponent(comp.name)}\n                                    data-testid={`button-add-recommended-${comp.name}`}\n                                  >\n                                    {comp.name}\n                                  </Button>\n                                ))}\n                              </div>\n                            </div>\n                          </AlertDescription>\n                        </Alert>\n                      )}\n\n                      <ScrollArea className=\"h-[400px]\">\n                        {renderComponentsByCategory()}\n                      </ScrollArea>\n                    </TabsContent>\n\n                    <TabsContent value=\"presets\" className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-medium mb-3\">Block Presets</h4>\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          Quick start with common block configurations\n                        </p>\n                        <div className=\"grid gap-3\">\n                          {Object.entries(BLOCK_PRESETS).map(([presetName, componentList]) => (\n                            <Card key={presetName} className=\"p-4 cursor-pointer hover:bg-muted/50\">\n                              <div className=\"flex items-center justify-between\">\n                                <div>\n                                  <h5 className=\"font-medium capitalize\">\n                                    {presetName.replace(/_/g, ' ')}\n                                  </h5>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    {componentList.length} components\n                                  </p>\n                                </div>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => applyBlockPreset(presetName)}\n                                  data-testid={`button-preset-${presetName}`}\n                                >\n                                  Apply\n                                </Button>\n                              </div>\n                            </Card>\n                          ))}\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"advanced\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-medium mb-3\">Block Actions</h4>\n                          <div className=\"flex gap-2 mb-3\">\n                            <Button\n                              variant=\"outline\"\n                              onClick={resetBlock}\n                              data-testid=\"button-reset\"\n                            >\n                              <RotateCcw className=\"w-4 h-4 mr-2\" />\n                              Reset Block\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={exportToClipboard}\n                              data-testid=\"button-export\"\n                            >\n                              <Copy className=\"w-4 h-4 mr-2\" />\n                              Copy JSON\n                            </Button>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Reset will clear all components and properties. Copy JSON exports the current block configuration.\n                          </p>\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-medium mb-3\">Validation Status</h4>\n                          <ValidationStatus validation={validation} />\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-medium mb-3\">Export Options</h4>\n                          <div className=\"grid grid-cols-2 gap-2 mb-3\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Download className=\"w-3 h-3 mr-2\" />\n                              Download .json\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Save className=\"w-3 h-3 mr-2\" />\n                              Save Template\n                            </Button>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Export your block as a .json file or save as a reusable template.\n                          </p>\n                        </div>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* JSON Preview */}\n            <div className=\"space-y-6\">\n              <CodePreview \n                code={JSON.stringify(blockJSON, null, 2)}\n                language=\"json\"\n                title=\"Block JSON\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Component Selector Modal */}\n        {showComponentSelector && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-background rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n              <ComponentSelector\n                components={availableComponents}\n                selectedComponents={selectedComponentNames}\n                onAddComponent={addComponent}\n                onRemoveComponent={removeComponent}\n                title=\"Add Block Components\"\n                description=\"Choose from 25+ official Minecraft Bedrock block components\"\n                showCategories={true}\n                showCompatibility={true}\n              />\n              <div className=\"p-4 border-t flex justify-end\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowComponentSelector(false)}\n                  data-testid=\"button-close-selector\"\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Component Form Modal */}\n        {showComponentForm && editingComponent && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-background rounded-lg shadow-lg max-w-2xl w-full max-h-[90vh] overflow-hidden\">\n              {(() => {\n                const def = getComponentDefinition(editingComponent.name);\n                return def ? (\n                  <ComponentForm\n                    component={def}\n                    initialValues={editingComponent.properties}\n                    onSubmit={handleComponentFormSubmit}\n                    onCancel={() => {\n                      setShowComponentForm(false);\n                      setEditingComponent(null);\n                    }}\n                    isEditing={true}\n                    showExample={true}\n                  />\n                ) : null;\n              })()}\n            </div>\n          </div>\n        )}\n      </section>\n    </TooltipProvider>\n  );\n}","size_bytes":28739},"client/src/components/Builders/ClientEntityBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { Copy, Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport ValidationStatus from \"@/components/Common/ValidationStatus\";\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\n\nexport default function ClientEntityBuilder() {\n  const [identifier, setIdentifier] = useLocalStorage('client-entity-identifier', '');\n  const [geometryModel, setGeometryModel] = useLocalStorage('client-entity-geometry', '');\n  const [textureDefault, setTextureDefault] = useLocalStorage('client-entity-texture-default', '');\n  const [renderDistance, setRenderDistance] = useLocalStorage('client-entity-render-distance', '50');\n  const [enableOutline, setEnableOutline] = useLocalStorage('client-entity-outline', false);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  const clientEntityConfig = {\n    identifier,\n    geometryModel,\n    textureDefault,\n    renderDistance: parseInt(renderDistance) || 50,\n    enableOutline\n  };\n\n  const clientEntityJSON = {\n    \"format_version\": \"1.21.0\",\n    \"minecraft:client_entity\": {\n      \"description\": {\n        \"identifier\": clientEntityConfig.identifier || \"my_addon:custom_entity\",\n        \"materials\": {\n          \"default\": \"entity_alphatest\"\n        },\n        \"textures\": {\n          \"default\": clientEntityConfig.textureDefault || \"textures/entity/custom_entity\"\n        },\n        \"geometry\": {\n          \"default\": clientEntityConfig.geometryModel || \"geometry.custom_entity\"\n        },\n        \"render_controllers\": [\n          \"controller.render.default\"\n        ]\n      }\n    }\n  };\n\n  const validation = { isValid: true, errors: [] };\n\n  return (\n    <section className=\"p-6\" data-testid=\"client-entity-builder\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Builder Form */}\n          <div className=\"builder-form rounded-lg p-6\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-4\">Client Entity Configuration</h3>\n            \n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-4\">\n              <TabsList className=\"bg-muted rounded-lg p-1\">\n                <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic</TabsTrigger>\n                <TabsTrigger value=\"rendering\" data-testid=\"tab-rendering\">Rendering</TabsTrigger>\n                <TabsTrigger value=\"animations\" data-testid=\"tab-animations\">Animations</TabsTrigger>\n                <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"basic\" className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"client-entity-identifier\">Entity Identifier</Label>\n                  <Input\n                    id=\"client-entity-identifier\"\n                    value={identifier}\n                    onChange={(e) => setIdentifier(e.target.value)}\n                    placeholder=\"my_addon:custom_entity\"\n                    data-testid=\"input-identifier\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Must match the behavior pack entity identifier\n                  </p>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"geometry-model\">Geometry Model</Label>\n                  <Input\n                    id=\"geometry-model\"\n                    value={geometryModel}\n                    onChange={(e) => setGeometryModel(e.target.value)}\n                    placeholder=\"geometry.custom_entity\"\n                    data-testid=\"input-geometry-model\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Reference to the 3D model geometry\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"texture-default\">Default Texture Path</Label>\n                  <Input\n                    id=\"texture-default\"\n                    value={textureDefault}\n                    onChange={(e) => setTextureDefault(e.target.value)}\n                    placeholder=\"textures/entity/custom_entity\"\n                    data-testid=\"input-texture-default\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Path to the entity texture file\n                  </p>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"rendering\" className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"render-distance\">Render Distance</Label>\n                  <Input\n                    id=\"render-distance\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"256\"\n                    value={renderDistance}\n                    onChange={(e) => setRenderDistance(e.target.value)}\n                    data-testid=\"input-render-distance\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Maximum distance at which entity is rendered (in blocks)\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Enable Outline</h4>\n                    <p className=\"text-xs text-muted-foreground\">Show selection outline when targeted</p>\n                  </div>\n                  <Switch\n                    checked={enableOutline}\n                    onCheckedChange={setEnableOutline}\n                    data-testid=\"switch-enable-outline\"\n                  />\n                </div>\n\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-foreground mb-2\">Material Types</h4>\n                  <div className=\"space-y-2 text-sm text-muted-foreground\">\n                    <p><strong>entity_alphatest:</strong> Standard entity rendering with transparency</p>\n                    <p><strong>entity_static:</strong> Static entities without animations</p>\n                    <p><strong>entity_emissive:</strong> Entities that emit light</p>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"animations\" className=\"space-y-4\">\n                <div className=\"text-center text-muted-foreground py-8\">\n                  <p>Animation configuration will be available soon</p>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"advanced\" className=\"space-y-4\">\n                <div className=\"text-center text-muted-foreground py-8\">\n                  <p>Advanced rendering properties will be available soon</p>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* JSON Output */}\n          <div className=\"builder-form rounded-lg p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold text-foreground\">Generated JSON</h3>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  data-testid=\"button-copy-json\"\n                >\n                  <Copy className=\"mr-2\" size={16} />\n                  Copy\n                </Button>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  data-testid=\"button-export-json\"\n                >\n                  <Download className=\"mr-2\" size={16} />\n                  Export\n                </Button>\n              </div>\n            </div>\n            \n            <CodePreview code={JSON.stringify(clientEntityJSON, null, 2)} language=\"json\" />\n\n            <div className=\"mt-4\">\n              <ValidationStatus validation={validation} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8328},"client/src/components/Builders/EntityBuilder.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { Sparkles, Download, Copy, Save, RotateCcw, Info, Zap, AlertCircle, X, Settings, FileText, Layers } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport ValidationStatus from \"@/components/Common/ValidationStatus\";\nimport ComponentSelector, { ComponentItem } from \"@/components/Common/ComponentSelector\";\nimport ComponentForm, { ComponentDefinition } from \"@/components/Common/ComponentForm\";\n\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { validateEntityJSON } from \"@/lib/minecraft/validation\";\nimport { \n  ComponentInstance, \n  generateComponentsJSON, \n  applyPreset, \n  getRecommendedComponents,\n  checkComponentCompatibility,\n  validateComponentProperties,\n  ENTITY_PRESETS \n} from \"@/lib/minecraft/componentUtils\";\n\n// Import the comprehensive entity registry\nimport { entityComponents } from \"@shared/entityRegistry\";\nimport ComponentIndex from \"@shared/componentIndex\";\n\nexport default function EntityBuilder() {\n  const { toast } = useToast();\n\n  // Basic entity properties\n  const [identifier, setIdentifier] = useLocalStorage('entity-identifier', '');\n  const [displayName, setDisplayName] = useLocalStorage('entity-display-name', '');\n  const [description, setDescription] = useLocalStorage('entity-description', '');\n  const [isSpawnable, setIsSpawnable] = useLocalStorage('entity-spawnable', true);\n  const [isSummonable, setIsSummonable] = useLocalStorage('entity-summonable', true);\n  const [isExperimental, setIsExperimental] = useLocalStorage('entity-experimental', false);\n\n  // Component management\n  const [components, setComponents] = useLocalStorage<ComponentInstance[]>('entity-components-v2', [\n    {\n      name: 'minecraft:health',\n      enabled: true,\n      properties: { value: 20, max: 20 },\n      metadata: { addedAt: Date.now(), category: 'Core', difficulty: 'beginner' }\n    },\n    {\n      name: 'minecraft:physics',\n      enabled: true,\n      properties: {},\n      metadata: { addedAt: Date.now(), category: 'Core', difficulty: 'beginner' }\n    }\n  ]);\n\n  // UI state\n  const [activeTab, setActiveTab] = useState('basic');\n  const [selectedComponent, setSelectedComponent] = useState<string | null>(null);\n  const [showComponentSelector, setShowComponentSelector] = useState(false);\n  const [showComponentForm, setShowComponentForm] = useState(false);\n  const [editingComponent, setEditingComponent] = useState<ComponentInstance | null>(null);\n  \n  // Group current components by category\n  const componentsByCategory = useMemo(() => {\n    const grouped: Record<string, ComponentInstance[]> = {};\n    components.forEach(comp => {\n      const category = comp.metadata?.category || 'Other';\n      if (!grouped[category]) grouped[category] = [];\n      grouped[category].push(comp);\n    });\n    return grouped;\n  }, [components]);\n\n  // Convert registry components to ComponentItem format\n  const availableComponents: ComponentItem[] = useMemo(() => {\n    return entityComponents.map(comp => ({\n      name: comp.name,\n      description: comp.description,\n      category: comp.category,\n      subcategory: comp.subcategory,\n      version: comp.version,\n      difficulty: comp.difficulty,\n      properties: comp.properties,\n      example: comp.example,\n      keywords: comp.keywords,\n      stability: comp.stability,\n      dependencies: comp.dependencies,\n      conflicts: comp.conflicts\n    }));\n  }, []);\n\n\n  // Get selected component names for ComponentSelector\n  const selectedComponentNames = components.map(c => c.name);\n\n  // Generate JSON\n  const entityJSON = useMemo(() => {\n    const componentsJSON = generateComponentsJSON(components);\n    \n    return {\n      format_version: \"1.21.0\",\n      \"minecraft:entity\": {\n        description: {\n          identifier: identifier || \"my_addon:custom_entity\",\n          is_spawnable: isSpawnable,\n          is_summonable: isSummonable,\n          is_experimental: isExperimental\n        },\n        component_groups: {},\n        components: {\n          \"minecraft:type_family\": {\n            family: [\"custom\", \"mob\"]\n          },\n          \"minecraft:collision_box\": {\n            width: 0.6,\n            height: 1.8\n          },\n          ...componentsJSON\n        },\n        events: {}\n      }\n    };\n  }, [identifier, isSpawnable, isSummonable, isExperimental, components]);\n\n  const validation = validateEntityJSON(entityJSON);\n  const recommendedComponents = getRecommendedComponents(components, availableComponents);\n\n  // Component management functions\n  const addComponent = (componentName: string) => {\n    const componentDef = availableComponents.find(c => c.name === componentName);\n    if (!componentDef) return;\n\n    // Check compatibility\n    const compatibility = checkComponentCompatibility(componentDef, components, availableComponents);\n    if (!compatibility.compatible) {\n      toast({\n        title: \"Cannot add component\",\n        description: compatibility.issues.join(', '),\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Generate default properties\n    const defaultProperties: Record<string, any> = {};\n    componentDef.properties.forEach(prop => {\n      if (prop.default !== undefined) {\n        defaultProperties[prop.name] = prop.default;\n      } else {\n        switch (prop.type) {\n          case 'number':\n            defaultProperties[prop.name] = prop.min ?? prop.example ?? 0;\n            break;\n          case 'boolean':\n            defaultProperties[prop.name] = prop.example ?? false;\n            break;\n          case 'string':\n            defaultProperties[prop.name] = prop.options?.[0] ?? prop.example ?? '';\n            break;\n          case 'range':\n            defaultProperties[prop.name] = prop.example ?? { min: 0, max: 1 };\n            break;\n          case 'vector3':\n            defaultProperties[prop.name] = prop.example ?? { x: 0, y: 0, z: 0 };\n            break;\n          case 'array':\n            defaultProperties[prop.name] = prop.example ?? [];\n            break;\n          case 'object':\n            defaultProperties[prop.name] = prop.example ?? {};\n            break;\n        }\n      }\n    });\n\n    const newComponent: ComponentInstance = {\n      name: componentName,\n      enabled: true,\n      properties: defaultProperties,\n      metadata: {\n        addedAt: Date.now(),\n        category: componentDef.category,\n        difficulty: componentDef.difficulty\n      }\n    };\n\n    setComponents([...components, newComponent]);\n    setShowComponentSelector(false);\n\n    // Show warnings if any\n    if (compatibility.warnings.length > 0) {\n      toast({\n        title: \"Component added with warnings\",\n        description: compatibility.warnings.join(', '),\n        variant: \"default\"\n      });\n    }\n  };\n\n  const removeComponent = (componentName: string) => {\n    setComponents(components.filter(c => c.name !== componentName));\n    if (selectedComponent === componentName) {\n      setSelectedComponent(null);\n    }\n  };\n\n  const updateComponent = (componentName: string, newProperties: Record<string, any>) => {\n    setComponents(components.map(comp => \n      comp.name === componentName \n        ? { ...comp, properties: newProperties }\n        : comp\n    ));\n  };\n\n  const toggleComponent = (componentName: string) => {\n    setComponents(components.map(comp =>\n      comp.name === componentName \n        ? { ...comp, enabled: !comp.enabled }\n        : comp\n    ));\n  };\n\n  const openComponentForm = (component: ComponentInstance) => {\n    setEditingComponent(component);\n    setShowComponentForm(true);\n  };\n\n  const handleComponentFormSubmit = (values: Record<string, any>) => {\n    if (editingComponent) {\n      updateComponent(editingComponent.name, values);\n      setShowComponentForm(false);\n      setEditingComponent(null);\n      \n      toast({\n        title: \"Component updated\",\n        description: `${editingComponent.name} has been updated successfully.`\n      });\n    }\n  };\n\n  const applyEntityPreset = (presetName: string) => {\n    const presetComponents = applyPreset(presetName, 'entity', availableComponents);\n    setComponents(presetComponents);\n    \n    toast({\n      title: \"Preset applied\",\n      description: `Applied ${presetName} preset with ${presetComponents.length} components.`\n    });\n  };\n\n  const resetEntity = () => {\n    setComponents([\n      {\n        name: 'minecraft:health',\n        enabled: true,\n        properties: { value: 20, max: 20 },\n        metadata: { addedAt: Date.now(), category: 'Core', difficulty: 'beginner' }\n      }\n    ]);\n    setIdentifier('');\n    setDisplayName('');\n    setDescription('');\n    \n    toast({\n      title: \"Entity reset\",\n      description: \"Entity has been reset to default state.\"\n    });\n  };\n\n  const exportToClipboard = () => {\n    navigator.clipboard.writeText(JSON.stringify(entityJSON, null, 2));\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Entity JSON has been copied to your clipboard.\"\n    });\n  };\n\n\n  const getComponentDefinition = (componentName: string): ComponentDefinition | null => {\n    const def = availableComponents.find(c => c.name === componentName);\n    if (!def) return null;\n    \n    return {\n      name: def.name,\n      description: def.description,\n      category: def.category,\n      subcategory: def.subcategory,\n      version: def.version,\n      difficulty: def.difficulty,\n      properties: def.properties,\n      example: def.example,\n      keywords: def.keywords,\n      stability: def.stability,\n      dependencies: def.dependencies,\n      conflicts: def.conflicts\n    };\n  };\n\n  // Tab label functions\n  const getComponentsTabLabel = () => {\n    const enabledCount = components.filter(c => c.enabled).length;\n    return `Components (${enabledCount})`;\n  };\n\n  const getAdvancedTabLabel = () => \"Advanced\";\n\n  // Components display in categories\n  const renderComponentsByCategory = () => (\n    <div className=\"space-y-3\">\n      {Object.entries(componentsByCategory).map(([category, categoryComponents]) => (\n        <Accordion key={category} type=\"single\" collapsible>\n          <AccordionItem value={category}>\n            <AccordionTrigger className=\"text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <Layers className=\"w-4 h-4\" />\n                {category}\n                <Badge variant=\"outline\">{categoryComponents.length}</Badge>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent>\n              <div className=\"space-y-2 pt-2\">\n                {categoryComponents.map((component) => {\n                  const def = getComponentDefinition(component.name);\n                  return (\n                    <Card key={component.name} className=\"p-3\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <Switch\n                              checked={component.enabled}\n                              onCheckedChange={() => toggleComponent(component.name)}\n                              data-testid={`switch-${component.name}`}\n                            />\n                            <span className=\"font-medium text-sm truncate\">\n                              {component.name}\n                            </span>\n                            {def && (\n                              <Badge \n                                variant=\"outline\" \n                                className={`text-xs ${\n                                  def.difficulty === 'beginner' ? 'border-green-500' :\n                                  def.difficulty === 'intermediate' ? 'border-yellow-500' :\n                                  'border-red-500'\n                                }`}\n                              >\n                                {def.difficulty}\n                              </Badge>\n                            )}\n                          </div>\n                          {def && (\n                            <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                              {def.description}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-1\">\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => openComponentForm(component)}\n                                disabled={!component.enabled}\n                                data-testid={`button-configure-${component.name}`}\n                              >\n                                <Zap className=\"w-3 h-3\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>Configure properties</TooltipContent>\n                          </Tooltip>\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeComponent(component.name)}\n                                data-testid={`button-remove-${component.name}`}\n                              >\n                                <AlertCircle className=\"w-3 h-3\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>Remove component</TooltipContent>\n                          </Tooltip>\n                        </div>\n                      </div>\n                    </Card>\n                  );\n                })}\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      ))}\n    </div>\n  );\n\n\n  return (\n    <TooltipProvider>\n      <section className=\"p-6\" data-testid=\"entity-builder\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* Builder Form */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Sparkles className=\"w-5 h-5\" />\n                    Entity Configuration\n                  </CardTitle>\n                  <CardDescription>\n                    Create comprehensive Minecraft Bedrock entities with all official components\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Tabs value={activeTab} onValueChange={setActiveTab}>\n                    <TabsList className=\"grid w-full grid-cols-4\">\n                      <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic</TabsTrigger>\n                      <TabsTrigger value=\"components\" data-testid=\"tab-components\">\n                        {getComponentsTabLabel()}\n                      </TabsTrigger>\n                      <TabsTrigger value=\"presets\" data-testid=\"tab-presets\">Presets</TabsTrigger>\n                      <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">\n                        {getAdvancedTabLabel()}\n                      </TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"basic\" className=\"space-y-4\">\n                      <div className=\"grid gap-4\">\n                        <div>\n                          <Label htmlFor=\"entity-identifier\">Entity Identifier *</Label>\n                          <Input\n                            id=\"entity-identifier\"\n                            value={identifier}\n                            onChange={(e) => setIdentifier(e.target.value)}\n                            placeholder=\"my_addon:custom_entity\"\n                            data-testid=\"input-identifier\"\n                          />\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Must include namespace (e.g., my_addon:entity_name)\n                          </p>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"entity-display-name\">Display Name</Label>\n                          <Input\n                            id=\"entity-display-name\"\n                            value={displayName}\n                            onChange={(e) => setDisplayName(e.target.value)}\n                            placeholder=\"Custom Entity\"\n                            data-testid=\"input-display-name\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"entity-description\">Description</Label>\n                          <Input\n                            id=\"entity-description\"\n                            value={description}\n                            onChange={(e) => setDescription(e.target.value)}\n                            placeholder=\"A custom entity for my addon\"\n                            data-testid=\"input-description\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch\n                              id=\"is-spawnable\"\n                              checked={isSpawnable}\n                              onCheckedChange={setIsSpawnable}\n                              data-testid=\"switch-spawnable\"\n                            />\n                            <Label htmlFor=\"is-spawnable\">Spawnable</Label>\n                          </div>\n\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch\n                              id=\"is-summonable\"\n                              checked={isSummonable}\n                              onCheckedChange={setIsSummonable}\n                              data-testid=\"switch-summonable\"\n                            />\n                            <Label htmlFor=\"is-summonable\">Summonable</Label>\n                          </div>\n\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch\n                              id=\"is-experimental\"\n                              checked={isExperimental}\n                              onCheckedChange={setIsExperimental}\n                              data-testid=\"switch-experimental\"\n                            />\n                            <Label htmlFor=\"is-experimental\">Experimental</Label>\n                          </div>\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"components\" className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">Entity Components</h4>\n                        <Button \n                          onClick={() => setShowComponentSelector(true)}\n                          data-testid=\"button-add-component\"\n                        >\n                          Add Component\n                        </Button>\n                      </div>\n\n                      {recommendedComponents.length > 0 && (\n                        <Alert>\n                          <Info className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            <div className=\"space-y-2\">\n                              <p className=\"font-medium\">Recommended components:</p>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {recommendedComponents.slice(0, 3).map(comp => (\n                                  <Button\n                                    key={comp.name}\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => addComponent(comp.name)}\n                                    data-testid={`button-add-recommended-${comp.name}`}\n                                  >\n                                    {comp.name}\n                                  </Button>\n                                ))}\n                              </div>\n                            </div>\n                          </AlertDescription>\n                        </Alert>\n                      )}\n\n                      <ScrollArea className=\"h-[400px]\">\n                        {renderComponentsByCategory()}\n                      </ScrollArea>\n                    </TabsContent>\n\n                    <TabsContent value=\"presets\" className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-medium mb-3\">Entity Presets</h4>\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          Quick start with common entity configurations\n                        </p>\n                        <div className=\"grid gap-3\">\n                          {Object.entries(ENTITY_PRESETS).map(([presetName, componentList]) => (\n                            <Card key={presetName} className=\"p-4 cursor-pointer hover:bg-muted/50\">\n                              <div className=\"flex items-center justify-between\">\n                                <div>\n                                  <h5 className=\"font-medium capitalize\">\n                                    {presetName.replace(/_/g, ' ')}\n                                  </h5>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    {componentList.length} components\n                                  </p>\n                                </div>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => applyEntityPreset(presetName)}\n                                  data-testid={`button-preset-${presetName}`}\n                                >\n                                  Apply\n                                </Button>\n                              </div>\n                            </Card>\n                          ))}\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"advanced\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-medium mb-3\">Entity Actions</h4>\n                          <div className=\"flex gap-2 mb-3\">\n                            <Button\n                              variant=\"outline\"\n                              onClick={resetEntity}\n                              data-testid=\"button-reset\"\n                            >\n                              <RotateCcw className=\"w-4 h-4 mr-2\" />\n                              Reset Entity\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={exportToClipboard}\n                              data-testid=\"button-export\"\n                            >\n                              <Copy className=\"w-4 h-4 mr-2\" />\n                              Copy JSON\n                            </Button>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Reset will clear all components and properties. Copy JSON exports the current entity configuration.\n                          </p>\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-medium mb-3\">Validation Status</h4>\n                          <ValidationStatus validation={validation} />\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-medium mb-3\">Export Options</h4>\n                          <div className=\"grid grid-cols-2 gap-2 mb-3\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Download className=\"w-3 h-3 mr-2\" />\n                              Download .json\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Save className=\"w-3 h-3 mr-2\" />\n                              Save Template\n                            </Button>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Export your entity as a .json file or save as a reusable template.\n                          </p>\n                        </div>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* JSON Preview */}\n            <div className=\"space-y-6\">\n              <CodePreview \n                code={JSON.stringify(entityJSON, null, 2)}\n                language=\"json\"\n                title=\"Entity JSON\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Component Selector Modal */}\n        <Dialog open={showComponentSelector} onOpenChange={setShowComponentSelector}>\n          <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-hidden\" data-testid=\"component-selector-modal\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                Add Entity Components\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => setShowComponentSelector(false)}\n                  data-testid=\"button-close-selector-x\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </DialogTitle>\n              <DialogDescription>\n                Choose from 50+ official Minecraft Bedrock entity components\n              </DialogDescription>\n            </DialogHeader>\n            <ScrollArea className=\"max-h-[70vh]\">\n              <ComponentSelector\n                components={availableComponents}\n                selectedComponents={selectedComponentNames}\n                onAddComponent={addComponent}\n                onRemoveComponent={removeComponent}\n                title=\"Add Entity Components\"\n                description=\"Choose from 50+ official Minecraft Bedrock entity components\"\n                showCategories={true}\n                showCompatibility={true}\n              />\n            </ScrollArea>\n            <div className=\"flex justify-end gap-2 pt-4 border-t\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowComponentSelector(false)}\n                data-testid=\"button-close-selector\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Component Form Modal */}\n        <Dialog open={showComponentForm && !!editingComponent} onOpenChange={(open) => {\n          if (!open) {\n            setShowComponentForm(false);\n            setEditingComponent(null);\n          }\n        }}>\n          <DialogContent className=\"max-w-4xl max-h-[95vh] overflow-hidden\" data-testid=\"component-form-modal\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                Configure Component: {editingComponent?.name}\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => {\n                    setShowComponentForm(false);\n                    setEditingComponent(null);\n                  }}\n                  data-testid=\"button-close-form-x\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </DialogTitle>\n              <DialogDescription>\n                Configure the properties for this component\n              </DialogDescription>\n            </DialogHeader>\n            <ScrollArea className=\"max-h-[75vh] pr-4\">\n              {(() => {\n                if (!editingComponent) return null;\n                const def = getComponentDefinition(editingComponent.name);\n                return def ? (\n                  <ComponentForm\n                    component={def}\n                    initialValues={editingComponent.properties}\n                    onSubmit={handleComponentFormSubmit}\n                    onCancel={() => {\n                      setShowComponentForm(false);\n                      setEditingComponent(null);\n                    }}\n                    isEditing={true}\n                    showExample={true}\n                  />\n                ) : null;\n              })()}\n            </ScrollArea>\n          </DialogContent>\n        </Dialog>\n      </section>\n    </TooltipProvider>\n  );\n}","size_bytes":30125},"client/src/components/Builders/ItemBuilder.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Package, Download, Copy, Save, RotateCcw, Info, Zap, AlertCircle, Settings, FileText, Layers, Box, Cog } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport ValidationStatus from \"@/components/Common/ValidationStatus\";\nimport ComponentSelector, { ComponentItem } from \"@/components/Common/ComponentSelector\";\nimport ComponentForm, { ComponentDefinition } from \"@/components/Common/ComponentForm\";\n\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { validateItemJSON } from \"@/lib/minecraft/validation\";\nimport { \n  ComponentInstance, \n  generateComponentsJSON, \n  applyPreset, \n  getRecommendedComponents,\n  checkComponentCompatibility,\n  validateComponentProperties,\n  ITEM_PRESETS \n} from \"@/lib/minecraft/componentUtils\";\n\n// Import the comprehensive item registry\nimport { itemComponents } from \"@shared/itemRegistry\";\n\nexport default function ItemBuilder() {\n  const { toast } = useToast();\n\n  // Basic item properties\n  const [identifier, setIdentifier] = useLocalStorage('item-identifier', '');\n  const [displayName, setDisplayName] = useLocalStorage('item-display-name', '');\n  const [description, setDescription] = useLocalStorage('item-description', '');\n  const [menuCategory, setMenuCategory] = useLocalStorage('item-menu-category', 'items');\n\n  // Component management\n  const [components, setComponents] = useLocalStorage<ComponentInstance[]>('item-components-v2', [\n    {\n      name: 'minecraft:max_stack_size',\n      enabled: true,\n      properties: { value: 64 },\n      metadata: { addedAt: Date.now(), category: 'Core', difficulty: 'beginner' }\n    },\n    {\n      name: 'minecraft:icon',\n      enabled: true,\n      properties: { texture: \"custom_item\" },\n      metadata: { addedAt: Date.now(), category: 'Visual', difficulty: 'beginner' }\n    }\n  ]);\n\n  // UI state\n  const [activeTab, setActiveTab] = useState('basic');\n  const [selectedComponent, setSelectedComponent] = useState<string | null>(null);\n  const [showComponentSelector, setShowComponentSelector] = useState(false);\n  const [showComponentForm, setShowComponentForm] = useState(false);\n  const [editingComponent, setEditingComponent] = useState<ComponentInstance | null>(null);\n\n  // Convert registry components to ComponentItem format\n  const availableComponents: ComponentItem[] = useMemo(() => {\n    return itemComponents.map(comp => ({\n      name: comp.name,\n      description: comp.description,\n      category: comp.category,\n      subcategory: comp.subcategory,\n      version: comp.version,\n      difficulty: comp.difficulty,\n      properties: comp.properties,\n      example: comp.example,\n      keywords: comp.keywords,\n      stability: comp.stability,\n      dependencies: comp.dependencies,\n      conflicts: comp.conflicts\n    }));\n  }, []);\n\n  // Get selected component names for ComponentSelector\n  const selectedComponentNames = components.map(c => c.name);\n\n  // Generate JSON\n  const itemJSON = useMemo(() => {\n    const componentsJSON = generateComponentsJSON(components);\n    \n    return {\n      format_version: \"1.21.0\",\n      \"minecraft:item\": {\n        description: {\n          identifier: identifier || \"my_addon:custom_item\",\n          menu_category: {\n            category: menuCategory\n          }\n        },\n        components: componentsJSON\n      }\n    };\n  }, [identifier, menuCategory, components]);\n\n  const validation = validateItemJSON(itemJSON);\n  const recommendedComponents = getRecommendedComponents(components, availableComponents, 3);\n\n  // Menu categories\n  const menuCategories = [\n    { value: 'items', label: 'Items' },\n    { value: 'equipment', label: 'Equipment' },\n    { value: 'construction', label: 'Construction' },\n    { value: 'nature', label: 'Nature' }\n  ];\n\n  // Component management functions\n  const addComponent = (componentName: string) => {\n    const componentDef = availableComponents.find(c => c.name === componentName);\n    if (!componentDef) return;\n\n    // Check compatibility\n    const compatibility = checkComponentCompatibility(componentDef, components, availableComponents);\n    if (!compatibility.compatible) {\n      toast({\n        title: \"Cannot add component\",\n        description: compatibility.issues.join(', '),\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Generate default properties\n    const defaultProperties: Record<string, any> = {};\n    componentDef.properties.forEach(prop => {\n      if (prop.default !== undefined) {\n        defaultProperties[prop.name] = prop.default;\n      } else {\n        switch (prop.type) {\n          case 'number':\n            defaultProperties[prop.name] = prop.min ?? prop.example ?? 0;\n            break;\n          case 'boolean':\n            defaultProperties[prop.name] = prop.example ?? false;\n            break;\n          case 'string':\n            defaultProperties[prop.name] = prop.options?.[0] ?? prop.example ?? '';\n            break;\n          case 'range':\n            defaultProperties[prop.name] = prop.example ?? { min: 0, max: 1 };\n            break;\n          case 'vector3':\n            defaultProperties[prop.name] = prop.example ?? { x: 0, y: 0, z: 0 };\n            break;\n          case 'array':\n            defaultProperties[prop.name] = prop.example ?? [];\n            break;\n          case 'object':\n            defaultProperties[prop.name] = prop.example ?? {};\n            break;\n        }\n      }\n    });\n\n    const newComponent: ComponentInstance = {\n      name: componentName,\n      enabled: true,\n      properties: defaultProperties,\n      metadata: {\n        addedAt: Date.now(),\n        category: componentDef.category,\n        difficulty: componentDef.difficulty\n      }\n    };\n\n    setComponents([...components, newComponent]);\n    setShowComponentSelector(false);\n\n    // Show warnings if any\n    if (compatibility.warnings.length > 0) {\n      toast({\n        title: \"Component added with warnings\",\n        description: compatibility.warnings.join(', '),\n        variant: \"default\"\n      });\n    }\n  };\n\n  const removeComponent = (componentName: string) => {\n    setComponents(components.filter(c => c.name !== componentName));\n    if (selectedComponent === componentName) {\n      setSelectedComponent(null);\n    }\n  };\n\n  const updateComponent = (componentName: string, newProperties: Record<string, any>) => {\n    setComponents(components.map(comp => \n      comp.name === componentName \n        ? { ...comp, properties: newProperties }\n        : comp\n    ));\n  };\n\n  const toggleComponent = (componentName: string) => {\n    setComponents(components.map(comp =>\n      comp.name === componentName \n        ? { ...comp, enabled: !comp.enabled }\n        : comp\n    ));\n  };\n\n  const openComponentForm = (component: ComponentInstance) => {\n    setEditingComponent(component);\n    setShowComponentForm(true);\n  };\n\n  const handleComponentFormSubmit = (values: Record<string, any>) => {\n    if (editingComponent) {\n      updateComponent(editingComponent.name, values);\n      setShowComponentForm(false);\n      setEditingComponent(null);\n      \n      toast({\n        title: \"Component updated\",\n        description: `${editingComponent.name} has been updated successfully.`\n      });\n    }\n  };\n\n  const applyItemPreset = (presetName: string) => {\n    const presetComponents = applyPreset(presetName, 'item', availableComponents);\n    setComponents(presetComponents);\n    \n    toast({\n      title: \"Preset applied\",\n      description: `Applied ${presetName} preset with ${presetComponents.length} components.`\n    });\n  };\n\n  const resetItem = () => {\n    setComponents([\n      {\n        name: 'minecraft:max_stack_size',\n        enabled: true,\n        properties: { value: 64 },\n        metadata: { addedAt: Date.now(), category: 'Core', difficulty: 'beginner' }\n      }\n    ]);\n    setIdentifier('');\n    setDisplayName('');\n    setDescription('');\n    \n    toast({\n      title: \"Item reset\",\n      description: \"Item has been reset to default state.\"\n    });\n  };\n\n  const exportToClipboard = () => {\n    navigator.clipboard.writeText(JSON.stringify(itemJSON, null, 2));\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Item JSON has been copied to your clipboard.\"\n    });\n  };\n\n  const componentsByCategory = useMemo(() => {\n    const grouped: Record<string, ComponentInstance[]> = {};\n    components.forEach(comp => {\n      const category = comp.metadata?.category || 'Other';\n      if (!grouped[category]) grouped[category] = [];\n      grouped[category].push(comp);\n    });\n    return grouped;\n  }, [components]);\n\n  const getComponentDefinition = (componentName: string): ComponentDefinition | null => {\n    const def = availableComponents.find(c => c.name === componentName);\n    if (!def) return null;\n    \n    return {\n      name: def.name,\n      description: def.description,\n      category: def.category,\n      subcategory: def.subcategory,\n      version: def.version,\n      difficulty: def.difficulty,\n      properties: def.properties,\n      example: def.example,\n      keywords: def.keywords,\n      stability: def.stability,\n      dependencies: def.dependencies,\n      conflicts: def.conflicts\n    };\n  };\n\n  // Tabs configuration\n  const getComponentsTabLabel = () => {\n    const enabledCount = components.filter(c => c.enabled).length;\n    return `Components (${enabledCount})`;\n  };\n\n  const getAdvancedTabLabel = () => \"Advanced\";\n\n  const tabsConfig = [\n    {\n      id: 'basic',\n      title: 'Basic',\n      icon: <Settings className=\"w-4 h-4\" />,\n      description: 'Item identifier and basic settings',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div>\n              <Label htmlFor=\"item-identifier\">Item Identifier *</Label>\n              <Input\n                id=\"item-identifier\"\n                value={identifier}\n                onChange={(e) => setIdentifier(e.target.value)}\n                placeholder=\"my_addon:custom_item\"\n                data-testid=\"input-identifier\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Must include namespace (e.g., my_addon:item_name)\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"item-display-name\">Display Name</Label>\n              <Input\n                id=\"item-display-name\"\n                value={displayName}\n                onChange={(e) => setDisplayName(e.target.value)}\n                placeholder=\"Custom Item\"\n                data-testid=\"input-display-name\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"item-description\">Description</Label>\n              <Input\n                id=\"item-description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                placeholder=\"A custom item for my addon\"\n                data-testid=\"input-description\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"menu-category\">Menu Category</Label>\n              <Select value={menuCategory} onValueChange={setMenuCategory}>\n                <SelectTrigger data-testid=\"select-menu-category\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {menuCategories.map(cat => (\n                    <SelectItem key={cat.value} value={cat.value}>\n                      {cat.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      id: 'components',\n      title: 'Components',\n      badge: components.length,\n      icon: <Layers className=\"w-4 h-4\" />,\n      description: 'Manage item components and their properties',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"font-medium\">Item Components</h4>\n            <Button \n              onClick={() => setShowComponentSelector(true)}\n              data-testid=\"button-add-component\"\n            >\n              Add Component\n            </Button>\n          </div>\n\n          {recommendedComponents.length > 0 && (\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"space-y-2\">\n                  <p className=\"font-medium\">Recommended components:</p>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {recommendedComponents.map(comp => (\n                      <Button\n                        key={comp.name}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => addComponent(comp.name)}\n                        data-testid={`button-add-recommended-${comp.name}`}\n                      >\n                        {comp.name}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <ScrollArea className=\"h-[400px]\">\n            <Accordion type=\"single\" collapsible className=\"space-y-2\">\n              {Object.entries(componentsByCategory).map(([category, categoryComponents]) => (\n                <AccordionItem key={category} value={category}>\n                  <AccordionTrigger className=\"text-sm\" data-testid={`accordion-${category}`}>\n                    {category} ({categoryComponents.length})\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    <div className=\"space-y-2\">\n                      {categoryComponents.map((component) => {\n                        const def = getComponentDefinition(component.name);\n                        return (\n                          <Card key={component.name} className=\"p-3\">\n                            <div className=\"flex items-start justify-between gap-2\">\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center gap-2 mb-1\">\n                                  <Switch\n                                    checked={component.enabled}\n                                    onCheckedChange={() => toggleComponent(component.name)}\n                                    data-testid={`switch-${component.name}`}\n                                  />\n                                  <span className=\"font-medium text-sm truncate\">\n                                    {component.name}\n                                  </span>\n                                  {def && (\n                                    <Badge \n                                      variant=\"outline\" \n                                      className={`text-xs ${\n                                        def.difficulty === 'beginner' ? 'border-green-500' :\n                                        def.difficulty === 'intermediate' ? 'border-yellow-500' :\n                                        'border-red-500'\n                                      }`}\n                                    >\n                                      {def.difficulty}\n                                    </Badge>\n                                  )}\n                                </div>\n                                {def && (\n                                  <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                                    {def.description}\n                                  </p>\n                                )}\n                              </div>\n                              <div className=\"flex gap-1\">\n                                <Tooltip>\n                                  <TooltipTrigger asChild>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => openComponentForm(component)}\n                                      disabled={!component.enabled}\n                                      data-testid={`button-configure-${component.name}`}\n                                    >\n                                      <Settings className=\"w-3 h-3\" />\n                                    </Button>\n                                  </TooltipTrigger>\n                                  <TooltipContent>Configure properties</TooltipContent>\n                                </Tooltip>\n                                <Tooltip>\n                                  <TooltipTrigger asChild>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => removeComponent(component.name)}\n                                      data-testid={`button-remove-${component.name}`}\n                                    >\n                                      <AlertCircle className=\"w-3 h-3\" />\n                                    </Button>\n                                  </TooltipTrigger>\n                                  <TooltipContent>Remove component</TooltipContent>\n                                </Tooltip>\n                              </div>\n                            </div>\n                          </Card>\n                        );\n                      })}\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n          </ScrollArea>\n        </div>\n      ),\n    },\n    {\n      id: 'presets',\n      title: 'Presets',\n      icon: <Zap className=\"w-4 h-4\" />,\n      description: 'Quick start with common item configurations',\n      content: (\n        <div className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-medium mb-3\">Item Presets</h4>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Quick start with common item configurations\n            </p>\n            <div className=\"grid gap-3\">\n              {Object.entries(ITEM_PRESETS).map(([presetName, componentList]) => (\n                <Card key={presetName} className=\"p-4 cursor-pointer hover:bg-muted/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h5 className=\"font-medium capitalize\">\n                        {presetName.replace(/_/g, ' ')}\n                      </h5>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {componentList.length} components\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {presetName === 'basic_item' && 'Simple stackable item'}\n                        {presetName === 'food_item' && 'Consumable food with nutrition'}\n                        {presetName === 'tool_item' && 'Durable tool with mining capability'}\n                        {presetName === 'weapon_item' && 'Combat weapon with damage'}\n                        {presetName === 'armor_item' && 'Wearable protection gear'}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => applyItemPreset(presetName)}\n                      data-testid={`button-preset-${presetName}`}\n                    >\n                      Apply\n                    </Button>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      id: 'advanced',\n      title: 'Advanced',\n      icon: <FileText className=\"w-4 h-4\" />,\n      description: 'Advanced configuration and statistics',\n      content: (\n        <div className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-medium mb-2\">Actions</h4>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={resetItem}\n                data-testid=\"button-reset\"\n              >\n                <RotateCcw className=\"w-4 h-4 mr-2\" />\n                Reset\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={exportToClipboard}\n                data-testid=\"button-export\"\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Copy JSON\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium\">Component Statistics</h4>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"bg-muted p-3 rounded\">\n                <div className=\"font-medium\">Total Components</div>\n                <div className=\"text-2xl font-bold\">{components.length}</div>\n              </div>\n              <div className=\"bg-muted p-3 rounded\">\n                <div className=\"font-medium\">Enabled Components</div>\n                <div className=\"text-2xl font-bold\">{components.filter(c => c.enabled).length}</div>\n              </div>\n            </div>\n          </div>\n\n          <ValidationStatus validation={validation} />\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <TooltipProvider>\n      <section className=\"p-6\" data-testid=\"item-builder\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* Builder Form */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"w-5 h-5\" />\n                    Item Configuration\n                  </CardTitle>\n                  <CardDescription>\n                    Create comprehensive Minecraft Bedrock items with all official components\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Tabs defaultValue=\"basic\" className=\"space-y-4\" data-testid=\"item-builder-tabs\">\n                    <TabsList className=\"grid w-full grid-cols-3\">\n                      <TabsTrigger value=\"basic\" className=\"flex items-center gap-2\">\n                        <Settings className=\"w-4 h-4\" />\n                        Basic\n                      </TabsTrigger>\n                      <TabsTrigger value=\"components\" className=\"flex items-center gap-2\">\n                        <Box className=\"w-4 h-4\" />\n                        {getComponentsTabLabel()}\n                      </TabsTrigger>\n                      <TabsTrigger value=\"advanced\" className=\"flex items-center gap-2\">\n                        <Cog className=\"w-4 h-4\" />\n                        {getAdvancedTabLabel()}\n                      </TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"basic\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"item-identifier\">Item Identifier *</Label>\n                          <Input\n                            id=\"item-identifier\"\n                            value={identifier}\n                            onChange={(e) => setIdentifier(e.target.value)}\n                            placeholder=\"my_addon:custom_item\"\n                            data-testid=\"input-identifier\"\n                          />\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"components\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium\">Item Components</h4>\n                          <Button \n                            onClick={() => setShowComponentSelector(true)}\n                            data-testid=\"button-add-component\"\n                          >\n                            Add Component\n                          </Button>\n                        </div>\n\n                        {recommendedComponents.length > 0 && (\n                          <Alert>\n                            <Info className=\"h-4 w-4\" />\n                            <AlertDescription>\n                              <div className=\"space-y-2\">\n                                <p className=\"font-medium\">Recommended components:</p>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {recommendedComponents.map(comp => (\n                                    <Button\n                                      key={comp.name}\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => addComponent(comp.name)}\n                                      data-testid={`button-add-recommended-${comp.name}`}\n                                    >\n                                      {comp.name}\n                                    </Button>\n                                  ))}\n                                </div>\n                              </div>\n                            </AlertDescription>\n                          </Alert>\n                        )}\n\n                        <ScrollArea className=\"h-[400px]\">\n                          <Accordion type=\"single\" collapsible className=\"space-y-2\">\n                            {Object.entries(componentsByCategory).map(([category, categoryComponents]) => (\n                              <AccordionItem key={category} value={category}>\n                                <AccordionTrigger className=\"text-sm\" data-testid={`accordion-${category}`}>\n                                  {category} ({categoryComponents.length})\n                                </AccordionTrigger>\n                                <AccordionContent>\n                                  <div className=\"space-y-2\">\n                                    {categoryComponents.map((component) => {\n                                      const def = getComponentDefinition(component.name);\n                                      return (\n                                        <Card key={component.name} className=\"p-3\">\n                                          <div className=\"flex items-start justify-between gap-2\">\n                                            <div className=\"flex-1 min-w-0\">\n                                              <div className=\"flex items-center gap-2 mb-1\">\n                                                <Switch\n                                                  checked={component.enabled}\n                                                  onCheckedChange={() => toggleComponent(component.name)}\n                                                  data-testid={`switch-${component.name}`}\n                                                />\n                                                <span className=\"font-medium text-sm truncate\">\n                                                  {component.name}\n                                                </span>\n                                                {def && (\n                                                  <Badge \n                                                    variant=\"outline\" \n                                                    className={`text-xs ${\n                                                      def.difficulty === 'beginner' ? 'border-green-500' :\n                                                      def.difficulty === 'intermediate' ? 'border-yellow-500' :\n                                                      'border-red-500'\n                                                    }`}\n                                                  >\n                                                    {def.difficulty}\n                                                  </Badge>\n                                                )}\n                                              </div>\n                                              {def && (\n                                                <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                                                  {def.description}\n                                                </p>\n                                              )}\n                                            </div>\n                                            <div className=\"flex gap-1\">\n                                              <Tooltip>\n                                                <TooltipTrigger asChild>\n                                                  <Button\n                                                    variant=\"ghost\"\n                                                    size=\"sm\"\n                                                    onClick={() => openComponentForm(component)}\n                                                    disabled={!component.enabled}\n                                                    data-testid={`button-configure-${component.name}`}\n                                                  >\n                                                    <Settings className=\"w-3 h-3\" />\n                                                  </Button>\n                                                </TooltipTrigger>\n                                                <TooltipContent>Configure properties</TooltipContent>\n                                              </Tooltip>\n                                              <Tooltip>\n                                                <TooltipTrigger asChild>\n                                                  <Button\n                                                    variant=\"ghost\"\n                                                    size=\"sm\"\n                                                    onClick={() => removeComponent(component.name)}\n                                                    data-testid={`button-remove-${component.name}`}\n                                                  >\n                                                    <AlertCircle className=\"w-3 h-3\" />\n                                                  </Button>\n                                                </TooltipTrigger>\n                                                <TooltipContent>Remove component</TooltipContent>\n                                              </Tooltip>\n                                            </div>\n                                          </div>\n                                        </Card>\n                                      );\n                                    })}\n                                  </div>\n                                </AccordionContent>\n                              </AccordionItem>\n                            ))}\n                          </Accordion>\n                        </ScrollArea>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"advanced\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <ValidationStatus validation={validation} />\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* JSON Preview */}\n            <div className=\"space-y-6\">\n              <CodePreview \n                code={JSON.stringify(itemJSON, null, 2)}\n                language=\"json\"\n                title=\"Item JSON\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Component Selector Modal */}\n        {showComponentSelector && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-background rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n              <ComponentSelector\n                components={availableComponents}\n                selectedComponents={selectedComponentNames}\n                onAddComponent={addComponent}\n                onRemoveComponent={removeComponent}\n                title=\"Add Item Components\"\n                description=\"Choose from 25+ official Minecraft Bedrock item components\"\n                showCategories={true}\n                showCompatibility={true}\n              />\n              <div className=\"p-4 border-t flex justify-end\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowComponentSelector(false)}\n                  data-testid=\"button-close-selector\"\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Component Form Modal */}\n        {showComponentForm && editingComponent && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-background rounded-lg shadow-lg max-w-2xl w-full max-h-[90vh] overflow-hidden\">\n              {(() => {\n                const def = getComponentDefinition(editingComponent.name);\n                return def ? (\n                  <ComponentForm\n                    component={def}\n                    initialValues={editingComponent.properties}\n                    onSubmit={handleComponentFormSubmit}\n                    onCancel={() => {\n                      setShowComponentForm(false);\n                      setEditingComponent(null);\n                    }}\n                    isEditing={true}\n                    showExample={true}\n                  />\n                ) : null;\n              })()}\n            </div>\n          </div>\n        )}\n      </section>\n    </TooltipProvider>\n  );\n}","size_bytes":34790},"client/src/components/Builders/LootTableBuilder.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Gift, Download, Copy, Save, RotateCcw, Info, Plus, Trash2, Settings, Dices, FileText, Layers } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport ValidationStatus from \"@/components/Common/ValidationStatus\";\n\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection, CollapsibleGroup } from \"@/components/ui/collapsible-section\";\nimport { validateLootTableJSON } from \"@/lib/minecraft/validation\";\n\n// Import the comprehensive loot functions registry\nimport { lootFunctions, generateLootTableJSON } from \"@shared/gameplayRegistry\";\n\ninterface LootFunction {\n  name: string;\n  properties: Record<string, any>;\n  enabled: boolean;\n}\n\ninterface LootCondition {\n  condition: string;\n  properties: Record<string, any>;\n  enabled: boolean;\n}\n\ninterface LootEntry {\n  type: string;\n  name: string;\n  weight: number;\n  quality?: number;\n  count?: { min: number; max: number };\n  functions: LootFunction[];\n  conditions: LootCondition[];\n}\n\ninterface LootPool {\n  rolls: { min: number; max: number };\n  bonus_rolls?: { min: number; max: number };\n  entries: LootEntry[];\n  conditions: LootCondition[];\n  functions: LootFunction[];\n}\n\nexport default function LootTableBuilder() {\n  const { toast } = useToast();\n\n  // Basic loot table properties\n  const [identifier, setIdentifier] = useLocalStorage('loot-identifier-v2', '');\n  const [lootType, setLootType] = useLocalStorage('loot-type-v2', 'entity');\n  const [description, setDescription] = useLocalStorage('loot-description-v2', '');\n\n  // Pool management\n  const [pools, setPools] = useLocalStorage<LootPool[]>('loot-pools-v2', [\n    {\n      rolls: { min: 1, max: 1 },\n      entries: [\n        {\n          type: 'item',\n          name: 'minecraft:iron_ingot',\n          weight: 1,\n          functions: [],\n          conditions: []\n        }\n      ],\n      conditions: [],\n      functions: []\n    }\n  ]);\n\n  // UI state\n  const [activeTab, setActiveTab] = useState('basic');\n  const [selectedPool, setSelectedPool] = useState<number>(0);\n  const [selectedEntry, setSelectedEntry] = useState<number>(0);\n  const [showFunctionSelector, setShowFunctionSelector] = useState(false);\n  const [editingTarget, setEditingTarget] = useState<{ type: 'pool' | 'entry'; poolIndex: number; entryIndex?: number } | null>(null);\n\n  // Available loot functions grouped by category\n  const lootFunctionsByCategory = useMemo(() => {\n    const grouped: Record<string, typeof lootFunctions> = {};\n    lootFunctions.forEach(func => {\n      const category = func.subcategory || func.category;\n      if (!grouped[category]) grouped[category] = [];\n      grouped[category].push(func);\n    });\n    return grouped;\n  }, []);\n\n  // Generate JSON\n  const lootTableJSON = useMemo(() => {\n    const processedPools = pools.map(pool => ({\n      rolls: pool.rolls,\n      ...(pool.bonus_rolls && { bonus_rolls: pool.bonus_rolls }),\n      entries: pool.entries.map(entry => ({\n        type: entry.type,\n        name: entry.name,\n        weight: entry.weight,\n        ...(entry.quality && { quality: entry.quality }),\n        ...(entry.count && { count: entry.count }),\n        ...(entry.functions.length > 0 && {\n          functions: entry.functions.filter(f => f.enabled).map(f => ({\n            function: f.name,\n            ...f.properties\n          }))\n        }),\n        ...(entry.conditions.length > 0 && {\n          conditions: entry.conditions.filter(c => c.enabled).map(c => ({\n            condition: c.condition,\n            ...c.properties\n          }))\n        })\n      })),\n      ...(pool.functions.length > 0 && {\n        functions: pool.functions.filter(f => f.enabled).map(f => ({\n          function: f.name,\n          ...f.properties\n        }))\n      }),\n      ...(pool.conditions.length > 0 && {\n        conditions: pool.conditions.filter(c => c.enabled).map(c => ({\n          condition: c.condition,\n          ...c.properties\n        }))\n      })\n    }));\n\n    return {\n      format_version: \"1.21.0\",\n      pools: processedPools\n    };\n  }, [pools]);\n\n  const validation = validateLootTableJSON(lootTableJSON);\n\n  // Loot types\n  const lootTypes = [\n    { value: 'entity', label: 'Entity Drops', description: 'Loot from mob kills' },\n    { value: 'blocks', label: 'Block Drops', description: 'Loot from block breaking' },\n    { value: 'chests', label: 'Chest Loot', description: 'Loot in generated chests' },\n    { value: 'fishing', label: 'Fishing Loot', description: 'Loot from fishing' },\n    { value: 'archaeology', label: 'Archaeology Loot', description: 'Loot from brushing' },\n    { value: 'gameplay', label: 'Gameplay Loot', description: 'Custom gameplay loot' }\n  ];\n\n  // Entry types\n  const entryTypes = [\n    { value: 'item', label: 'Item', description: 'Single item drop' },\n    { value: 'loot_table', label: 'Loot Table', description: 'Reference to another loot table' },\n    { value: 'empty', label: 'Empty', description: 'No drop (for weight balancing)' },\n    { value: 'group', label: 'Group', description: 'Group of entries' }\n  ];\n\n  // Pool management functions\n  const addPool = () => {\n    setPools([...pools, {\n      rolls: { min: 1, max: 1 },\n      entries: [{ type: 'item', name: '', weight: 1, functions: [], conditions: [] }],\n      conditions: [],\n      functions: []\n    }]);\n  };\n\n  const removePool = (poolIndex: number) => {\n    setPools(pools.filter((_, i) => i !== poolIndex));\n    if (selectedPool >= pools.length - 1) {\n      setSelectedPool(Math.max(0, poolIndex - 1));\n    }\n  };\n\n  const updatePool = (poolIndex: number, updates: Partial<LootPool>) => {\n    setPools(pools.map((pool, i) => \n      i === poolIndex ? { ...pool, ...updates } : pool\n    ));\n  };\n\n  // Entry management functions\n  const addEntry = (poolIndex: number) => {\n    const newEntry: LootEntry = {\n      type: 'item',\n      name: '',\n      weight: 1,\n      functions: [],\n      conditions: []\n    };\n    \n    updatePool(poolIndex, {\n      entries: [...pools[poolIndex].entries, newEntry]\n    });\n  };\n\n  const removeEntry = (poolIndex: number, entryIndex: number) => {\n    updatePool(poolIndex, {\n      entries: pools[poolIndex].entries.filter((_, i) => i !== entryIndex)\n    });\n  };\n\n  const updateEntry = (poolIndex: number, entryIndex: number, updates: Partial<LootEntry>) => {\n    updatePool(poolIndex, {\n      entries: pools[poolIndex].entries.map((entry, i) =>\n        i === entryIndex ? { ...entry, ...updates } : entry\n      )\n    });\n  };\n\n  // Function management\n  const addFunctionToTarget = (functionName: string) => {\n    const funcDef = lootFunctions.find(f => f.name === functionName);\n    if (!funcDef || !editingTarget) return;\n\n    // Generate default properties\n    const defaultProperties: Record<string, any> = {};\n    funcDef.properties.forEach(prop => {\n      if (prop.default !== undefined) {\n        defaultProperties[prop.name] = prop.default;\n      } else {\n        switch (prop.type) {\n          case 'number':\n            defaultProperties[prop.name] = prop.min ?? prop.example ?? 0;\n            break;\n          case 'boolean':\n            defaultProperties[prop.name] = prop.example ?? false;\n            break;\n          case 'string':\n            defaultProperties[prop.name] = prop.options?.[0] ?? prop.example ?? '';\n            break;\n          case 'range':\n            defaultProperties[prop.name] = prop.example ?? { min: 1, max: 3 };\n            break;\n          case 'array':\n            defaultProperties[prop.name] = prop.example ?? [];\n            break;\n          case 'object':\n            defaultProperties[prop.name] = prop.example ?? {};\n            break;\n        }\n      }\n    });\n\n    const newFunction: LootFunction = {\n      name: functionName,\n      properties: defaultProperties,\n      enabled: true\n    };\n\n    if (editingTarget.type === 'pool') {\n      const pool = pools[editingTarget.poolIndex];\n      updatePool(editingTarget.poolIndex, {\n        functions: [...pool.functions, newFunction]\n      });\n    } else if (editingTarget.type === 'entry' && editingTarget.entryIndex !== undefined) {\n      const entry = pools[editingTarget.poolIndex].entries[editingTarget.entryIndex];\n      updateEntry(editingTarget.poolIndex, editingTarget.entryIndex, {\n        functions: [...entry.functions, newFunction]\n      });\n    }\n\n    setShowFunctionSelector(false);\n    setEditingTarget(null);\n\n    toast({\n      title: \"Function added\",\n      description: `${functionName} has been added successfully.`\n    });\n  };\n\n  const removeFunctionFromTarget = (functionIndex: number) => {\n    if (!editingTarget) return;\n\n    if (editingTarget.type === 'pool') {\n      const pool = pools[editingTarget.poolIndex];\n      updatePool(editingTarget.poolIndex, {\n        functions: pool.functions.filter((_, i) => i !== functionIndex)\n      });\n    } else if (editingTarget.type === 'entry' && editingTarget.entryIndex !== undefined) {\n      const entry = pools[editingTarget.poolIndex].entries[editingTarget.entryIndex];\n      updateEntry(editingTarget.poolIndex, editingTarget.entryIndex, {\n        functions: entry.functions.filter((_, i) => i !== functionIndex)\n      });\n    }\n  };\n\n  const resetLootTable = () => {\n    setIdentifier('');\n    setDescription('');\n    setPools([{\n      rolls: { min: 1, max: 1 },\n      entries: [{ type: 'item', name: '', weight: 1, functions: [], conditions: [] }],\n      conditions: [],\n      functions: []\n    }]);\n    \n    toast({\n      title: \"Loot table reset\",\n      description: \"Loot table has been reset to default state.\"\n    });\n  };\n\n  const exportToClipboard = () => {\n    navigator.clipboard.writeText(JSON.stringify(lootTableJSON, null, 2));\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Loot table JSON has been copied to your clipboard.\"\n    });\n  };\n\n  const calculateTotalWeight = (poolIndex: number): number => {\n    return pools[poolIndex]?.entries.reduce((sum, entry) => sum + entry.weight, 0) || 0;\n  };\n\n  const calculateDropProbability = (poolIndex: number, entryIndex: number): number => {\n    const totalWeight = calculateTotalWeight(poolIndex);\n    const entryWeight = pools[poolIndex]?.entries[entryIndex]?.weight || 0;\n    return totalWeight > 0 ? (entryWeight / totalWeight) * 100 : 0;\n  };\n\n  return (\n    <TooltipProvider>\n      <section className=\"p-6\" data-testid=\"loot-table-builder\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* Builder Form */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Gift className=\"w-5 h-5\" />\n                    Loot Table Configuration\n                  </CardTitle>\n                  <CardDescription>\n                    Create comprehensive Minecraft Bedrock loot tables with all official functions\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Tabs value={activeTab} onValueChange={setActiveTab}>\n                    <TabsList className=\"grid w-full grid-cols-4\">\n                      <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic</TabsTrigger>\n                      <TabsTrigger value=\"pools\" data-testid=\"tab-pools\">\n                        Pools ({pools.length})\n                      </TabsTrigger>\n                      <TabsTrigger value=\"functions\" data-testid=\"tab-functions\">Functions</TabsTrigger>\n                      <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"basic\" className=\"space-y-4\">\n                      <div className=\"grid gap-4\">\n                        <div>\n                          <Label htmlFor=\"loot-identifier\">Loot Table Identifier *</Label>\n                          <Input\n                            id=\"loot-identifier\"\n                            value={identifier}\n                            onChange={(e) => setIdentifier(e.target.value)}\n                            placeholder=\"my_addon:custom_loot\"\n                            data-testid=\"input-identifier\"\n                          />\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Must include namespace (e.g., my_addon:loot_name)\n                          </p>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"loot-description\">Description</Label>\n                          <Input\n                            id=\"loot-description\"\n                            value={description}\n                            onChange={(e) => setDescription(e.target.value)}\n                            placeholder=\"A custom loot table for my addon\"\n                            data-testid=\"input-description\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"loot-type\">Loot Type</Label>\n                          <Select value={lootType} onValueChange={setLootType}>\n                            <SelectTrigger data-testid=\"select-loot-type\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {lootTypes.map(type => (\n                                <SelectItem key={type.value} value={type.value}>\n                                  <div>\n                                    <div className=\"font-medium\">{type.label}</div>\n                                    <div className=\"text-xs text-muted-foreground\">{type.description}</div>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"pools\" className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">Loot Pools</h4>\n                        <Button onClick={addPool} data-testid=\"button-add-pool\">\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Pool\n                        </Button>\n                      </div>\n\n                      <ScrollArea className=\"h-[500px]\">\n                        <Accordion type=\"single\" value={`pool-${selectedPool}`} onValueChange={(value) => {\n                          const poolIndex = parseInt(value?.replace('pool-', '') || '0');\n                          setSelectedPool(poolIndex);\n                        }}>\n                          {pools.map((pool, poolIndex) => (\n                            <AccordionItem key={poolIndex} value={`pool-${poolIndex}`}>\n                              <AccordionTrigger className=\"text-sm\" data-testid={`accordion-pool-${poolIndex}`}>\n                                Pool {poolIndex + 1} ({pool.entries.length} entries, weight: {calculateTotalWeight(poolIndex)})\n                              </AccordionTrigger>\n                              <AccordionContent>\n                                <div className=\"space-y-4 p-2\">\n                                  {/* Pool Configuration */}\n                                  <div className=\"grid grid-cols-2 gap-2\">\n                                    <div>\n                                      <Label className=\"text-xs\">Min Rolls</Label>\n                                      <Input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        value={pool.rolls.min}\n                                        onChange={(e) => updatePool(poolIndex, {\n                                          rolls: { ...pool.rolls, min: parseInt(e.target.value) || 0 }\n                                        })}\n                                        data-testid={`input-pool-min-${poolIndex}`}\n                                      />\n                                    </div>\n                                    <div>\n                                      <Label className=\"text-xs\">Max Rolls</Label>\n                                      <Input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        value={pool.rolls.max}\n                                        onChange={(e) => updatePool(poolIndex, {\n                                          rolls: { ...pool.rolls, max: parseInt(e.target.value) || 0 }\n                                        })}\n                                        data-testid={`input-pool-max-${poolIndex}`}\n                                      />\n                                    </div>\n                                  </div>\n\n                                  {/* Pool Functions */}\n                                  <div>\n                                    <div className=\"flex items-center justify-between mb-2\">\n                                      <Label className=\"text-xs\">Pool Functions ({pool.functions.length})</Label>\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => {\n                                          setEditingTarget({ type: 'pool', poolIndex });\n                                          setShowFunctionSelector(true);\n                                        }}\n                                        data-testid={`button-add-pool-function-${poolIndex}`}\n                                      >\n                                        <Plus className=\"w-3 h-3 mr-1\" />\n                                        Add Function\n                                      </Button>\n                                    </div>\n                                    {pool.functions.map((func, funcIndex) => (\n                                      <div key={funcIndex} className=\"flex items-center gap-2 p-2 bg-muted rounded text-xs\">\n                                        <Switch\n                                          checked={func.enabled}\n                                          onCheckedChange={(enabled) => {\n                                            const newFunctions = [...pool.functions];\n                                            newFunctions[funcIndex] = { ...func, enabled };\n                                            updatePool(poolIndex, { functions: newFunctions });\n                                          }}\n                                        />\n                                        <span className=\"flex-1 font-mono\">{func.name}</span>\n                                        <Button\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          onClick={() => removeFunctionFromTarget(funcIndex)}\n                                          data-testid={`button-remove-pool-function-${poolIndex}-${funcIndex}`}\n                                        >\n                                          <Trash2 className=\"w-3 h-3\" />\n                                        </Button>\n                                      </div>\n                                    ))}\n                                  </div>\n\n                                  {/* Entries */}\n                                  <div>\n                                    <div className=\"flex items-center justify-between mb-2\">\n                                      <Label className=\"text-xs\">Entries</Label>\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => addEntry(poolIndex)}\n                                        data-testid={`button-add-entry-${poolIndex}`}\n                                      >\n                                        <Plus className=\"w-3 h-3 mr-1\" />\n                                        Add Entry\n                                      </Button>\n                                    </div>\n                                    {pool.entries.map((entry, entryIndex) => (\n                                      <Card key={entryIndex} className=\"p-3 mb-2\">\n                                        <div className=\"grid gap-2\">\n                                          <div className=\"flex items-center gap-2\">\n                                            <Select\n                                              value={entry.type}\n                                              onValueChange={(type) => updateEntry(poolIndex, entryIndex, { type })}\n                                            >\n                                              <SelectTrigger className=\"w-24\">\n                                                <SelectValue />\n                                              </SelectTrigger>\n                                              <SelectContent>\n                                                {entryTypes.map(type => (\n                                                  <SelectItem key={type.value} value={type.value}>\n                                                    {type.label}\n                                                  </SelectItem>\n                                                ))}\n                                              </SelectContent>\n                                            </Select>\n                                            <Input\n                                              placeholder=\"Item/Table name\"\n                                              value={entry.name}\n                                              onChange={(e) => updateEntry(poolIndex, entryIndex, { name: e.target.value })}\n                                              className=\"flex-1\"\n                                              data-testid={`input-entry-name-${poolIndex}-${entryIndex}`}\n                                            />\n                                            <Tooltip>\n                                              <TooltipTrigger asChild>\n                                                <Button\n                                                  variant=\"ghost\"\n                                                  size=\"sm\"\n                                                  onClick={() => removeEntry(poolIndex, entryIndex)}\n                                                  disabled={pool.entries.length === 1}\n                                                  data-testid={`button-remove-entry-${poolIndex}-${entryIndex}`}\n                                                >\n                                                  <Trash2 className=\"w-3 h-3\" />\n                                                </Button>\n                                              </TooltipTrigger>\n                                              <TooltipContent>Remove entry</TooltipContent>\n                                            </Tooltip>\n                                          </div>\n\n                                          <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                                            <div>\n                                              <Label>Weight</Label>\n                                              <Input\n                                                type=\"number\"\n                                                min=\"1\"\n                                                value={entry.weight}\n                                                onChange={(e) => updateEntry(poolIndex, entryIndex, { weight: parseInt(e.target.value) || 1 })}\n                                                data-testid={`input-entry-weight-${poolIndex}-${entryIndex}`}\n                                              />\n                                            </div>\n                                            <div>\n                                              <Label>Quality</Label>\n                                              <Input\n                                                type=\"number\"\n                                                value={entry.quality || ''}\n                                                onChange={(e) => updateEntry(poolIndex, entryIndex, { quality: e.target.value ? parseInt(e.target.value) : undefined })}\n                                                placeholder=\"Optional\"\n                                                data-testid={`input-entry-quality-${poolIndex}-${entryIndex}`}\n                                              />\n                                            </div>\n                                            <div className=\"text-xs text-muted-foreground flex items-end\">\n                                              {calculateDropProbability(poolIndex, entryIndex).toFixed(1)}% chance\n                                            </div>\n                                          </div>\n\n                                          <div>\n                                            <div className=\"flex items-center justify-between mb-1\">\n                                              <Label className=\"text-xs\">Entry Functions ({entry.functions.length})</Label>\n                                              <Button\n                                                variant=\"outline\"\n                                                size=\"sm\"\n                                                onClick={() => {\n                                                  setEditingTarget({ type: 'entry', poolIndex, entryIndex });\n                                                  setShowFunctionSelector(true);\n                                                }}\n                                                data-testid={`button-add-entry-function-${poolIndex}-${entryIndex}`}\n                                              >\n                                                <Settings className=\"w-3 h-3\" />\n                                              </Button>\n                                            </div>\n                                            {entry.functions.map((func, funcIndex) => (\n                                              <div key={funcIndex} className=\"flex items-center gap-2 p-1 bg-muted rounded text-xs\">\n                                                <Switch\n                                                  checked={func.enabled}\n                                                  onCheckedChange={(enabled) => {\n                                                    const newFunctions = [...entry.functions];\n                                                    newFunctions[funcIndex] = { ...func, enabled };\n                                                    updateEntry(poolIndex, entryIndex, { functions: newFunctions });\n                                                  }}\n                                                />\n                                                <span className=\"flex-1 font-mono\">{func.name}</span>\n                                              </div>\n                                            ))}\n                                          </div>\n                                        </div>\n                                      </Card>\n                                    ))}\n                                  </div>\n\n                                  <div className=\"flex justify-end\">\n                                    <Button\n                                      variant=\"destructive\"\n                                      size=\"sm\"\n                                      onClick={() => removePool(poolIndex)}\n                                      disabled={pools.length === 1}\n                                      data-testid={`button-remove-pool-${poolIndex}`}\n                                    >\n                                      <Trash2 className=\"w-3 h-3 mr-1\" />\n                                      Remove Pool\n                                    </Button>\n                                  </div>\n                                </div>\n                              </AccordionContent>\n                            </AccordionItem>\n                          ))}\n                        </Accordion>\n                      </ScrollArea>\n                    </TabsContent>\n\n                    <TabsContent value=\"functions\" className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-medium mb-3\">Available Loot Functions</h4>\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          Functions modify how loot is generated and distributed\n                        </p>\n                        <ScrollArea className=\"h-[400px]\">\n                          <Accordion type=\"single\" collapsible>\n                            {Object.entries(lootFunctionsByCategory).map(([category, categoryFunctions]) => (\n                              <AccordionItem key={category} value={category}>\n                                <AccordionTrigger className=\"text-sm\" data-testid={`accordion-function-${category}`}>\n                                  {category} ({categoryFunctions.length} functions)\n                                </AccordionTrigger>\n                                <AccordionContent>\n                                  <div className=\"grid gap-2\">\n                                    {categoryFunctions.map((func) => (\n                                      <Card key={func.name} className=\"p-3\">\n                                        <div className=\"flex items-start justify-between gap-2\">\n                                          <div className=\"flex-1\">\n                                            <div className=\"flex items-center gap-2 mb-1\">\n                                              <span className=\"font-medium text-sm font-mono\">{func.name}</span>\n                                              <Badge \n                                                variant=\"outline\" \n                                                className={`text-xs ${\n                                                  func.difficulty === 'beginner' ? 'border-green-500' :\n                                                  func.difficulty === 'intermediate' ? 'border-yellow-500' :\n                                                  'border-red-500'\n                                                }`}\n                                              >\n                                                {func.difficulty}\n                                              </Badge>\n                                            </div>\n                                            <p className=\"text-xs text-muted-foreground\">{func.description}</p>\n                                          </div>\n                                        </div>\n                                      </Card>\n                                    ))}\n                                  </div>\n                                </AccordionContent>\n                              </AccordionItem>\n                            ))}\n                          </Accordion>\n                        </ScrollArea>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"advanced\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-medium mb-2\">Actions</h4>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              onClick={resetLootTable}\n                              data-testid=\"button-reset\"\n                            >\n                              <RotateCcw className=\"w-4 h-4 mr-2\" />\n                              Reset\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={exportToClipboard}\n                              data-testid=\"button-export\"\n                            >\n                              <Copy className=\"w-4 h-4 mr-2\" />\n                              Copy JSON\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-3\">\n                          <h4 className=\"font-medium\">Loot Table Statistics</h4>\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div className=\"bg-muted p-3 rounded\">\n                              <div className=\"font-medium\">Total Pools</div>\n                              <div className=\"text-2xl font-bold\">{pools.length}</div>\n                            </div>\n                            <div className=\"bg-muted p-3 rounded\">\n                              <div className=\"font-medium\">Total Entries</div>\n                              <div className=\"text-2xl font-bold\">{pools.reduce((sum, pool) => sum + pool.entries.length, 0)}</div>\n                            </div>\n                            <div className=\"bg-muted p-3 rounded\">\n                              <div className=\"font-medium\">Active Functions</div>\n                              <div className=\"text-2xl font-bold\">\n                                {pools.reduce((sum, pool) => \n                                  sum + pool.functions.filter(f => f.enabled).length + \n                                  pool.entries.reduce((entrySum, entry) => \n                                    entrySum + entry.functions.filter(f => f.enabled).length, 0\n                                  ), 0\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"bg-muted p-3 rounded\">\n                              <div className=\"font-medium\">Average Weight</div>\n                              <div className=\"text-2xl font-bold\">\n                                {pools.length > 0 ? \n                                  (pools.reduce((sum, pool) => sum + calculateTotalWeight(pools.indexOf(pool)), 0) / pools.length).toFixed(1) : \n                                  '0'\n                                }\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n\n                        <ValidationStatus validation={validation} />\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* JSON Preview */}\n            <div className=\"space-y-6\">\n              <CodePreview \n                code={JSON.stringify(lootTableJSON, null, 2)}\n                language=\"json\"\n                title=\"Loot Table JSON\"\n                validation={validation}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Function Selector Modal */}\n        {showFunctionSelector && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-background rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n              <div className=\"p-4 border-b\">\n                <h3 className=\"text-lg font-semibold\">Add Loot Function</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Choose a function to modify loot generation\n                </p>\n              </div>\n              <ScrollArea className=\"max-h-[60vh] p-4\">\n                <Accordion type=\"single\" collapsible>\n                  {Object.entries(lootFunctionsByCategory).map(([category, categoryFunctions]) => (\n                    <AccordionItem key={category} value={category}>\n                      <AccordionTrigger>{category} ({categoryFunctions.length})</AccordionTrigger>\n                      <AccordionContent>\n                        <div className=\"grid gap-2\">\n                          {categoryFunctions.map((func) => (\n                            <Card \n                              key={func.name} \n                              className=\"p-3 cursor-pointer hover:bg-muted/50\"\n                              onClick={() => addFunctionToTarget(func.name)}\n                              data-testid={`card-function-${func.name}`}\n                            >\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"flex-1\">\n                                  <div className=\"font-medium text-sm font-mono\">{func.name}</div>\n                                  <p className=\"text-xs text-muted-foreground\">{func.description}</p>\n                                </div>\n                                <Badge \n                                  variant=\"outline\" \n                                  className={`text-xs ${\n                                    func.difficulty === 'beginner' ? 'border-green-500' :\n                                    func.difficulty === 'intermediate' ? 'border-yellow-500' :\n                                    'border-red-500'\n                                  }`}\n                                >\n                                  {func.difficulty}\n                                </Badge>\n                              </div>\n                            </Card>\n                          ))}\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              </ScrollArea>\n              <div className=\"p-4 border-t flex justify-end gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowFunctionSelector(false);\n                    setEditingTarget(null);\n                  }}\n                  data-testid=\"button-close-function-selector\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </section>\n    </TooltipProvider>\n  );\n}","size_bytes":39420},"client/src/components/Builders/RecipeBuilder.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { ChefHat, Download, Copy, Save, RotateCcw, Info, Plus, Trash2, Grid3X3, Shuffle, Flame, Beaker, Hammer, Settings, FileText, Layers } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport ValidationStatus from \"@/components/Common/ValidationStatus\";\n\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection, CollapsibleGroup } from \"@/components/ui/collapsible-section\";\nimport { validateRecipeJSON } from \"@/lib/minecraft/validation\";\n\n// Import the comprehensive recipe registry\nimport { recipeTypes, generateRecipeJSON } from \"@shared/gameplayRegistry\";\n\ninterface RecipeIngredient {\n  item: string;\n  count?: number;\n  data?: number;\n  tag?: string;\n}\n\ninterface ShapedRecipeKey {\n  [key: string]: RecipeIngredient;\n}\n\ninterface RecipeResult {\n  item: string;\n  count: number;\n  data?: number;\n}\n\nexport default function RecipeBuilder() {\n  const { toast } = useToast();\n\n  // Basic recipe properties\n  const [identifier, setIdentifier] = useLocalStorage('recipe-identifier-v2', '');\n  const [selectedRecipeType, setSelectedRecipeType] = useLocalStorage('recipe-selected-type-v2', 'minecraft:recipe_shaped');\n  const [description, setDescription] = useLocalStorage('recipe-description-v2', '');\n  const [tags, setTags] = useLocalStorage('recipe-tags-v2', 'crafting_table');\n  const [group, setGroup] = useLocalStorage('recipe-group-v2', '');\n\n  // Recipe-specific properties\n  const [shapedPattern, setShapedPattern] = useLocalStorage<string[]>('recipe-shaped-pattern-v2', ['AAA', 'A A', 'AAA']);\n  const [shapedKeys, setShapedKeys] = useLocalStorage<ShapedRecipeKey>('recipe-shaped-keys-v2', { 'A': { item: 'minecraft:planks' } });\n  const [shapelessIngredients, setShapelessIngredients] = useLocalStorage<RecipeIngredient[]>('recipe-shapeless-ingredients-v2', [{ item: 'minecraft:planks' }]);\n  const [furnaceInput, setFurnaceInput] = useLocalStorage<RecipeIngredient>('recipe-furnace-input-v2', { item: 'minecraft:raw_iron' });\n  const [brewingInput, setBrewingInput] = useLocalStorage<RecipeIngredient>('recipe-brewing-input-v2', { item: 'minecraft:potion', tag: 'minecraft:awkward_potion' });\n  const [brewingReagent, setBrewingReagent] = useLocalStorage<RecipeIngredient>('recipe-brewing-reagent-v2', { item: 'minecraft:spider_eye' });\n  const [smithingTemplate, setSmithingTemplate] = useLocalStorage<RecipeIngredient>('recipe-smithing-template-v2', { item: 'minecraft:netherite_upgrade_smithing_template' });\n  const [smithingBase, setSmithingBase] = useLocalStorage<RecipeIngredient>('recipe-smithing-base-v2', { item: 'minecraft:diamond_sword' });\n  const [smithingAddition, setSmithingAddition] = useLocalStorage<RecipeIngredient>('recipe-smithing-addition-v2', { item: 'minecraft:netherite_ingot' });\n\n  // Result configuration\n  const [result, setResult] = useLocalStorage<RecipeResult>('recipe-result-v2', { item: 'minecraft:chest', count: 1 });\n\n  // UI state\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Get current recipe type definition\n  const currentRecipeTypeDef = recipeTypes.find(r => r.name === selectedRecipeType);\n\n  // Generate JSON based on recipe type\n  const recipeJSON = useMemo(() => {\n    const baseDescription = {\n      identifier: identifier || \"my_addon:custom_recipe\"\n    };\n\n    let recipeProperties: Record<string, any> = {};\n\n    switch (selectedRecipeType) {\n      case 'minecraft:recipe_shaped':\n        recipeProperties = {\n          tags: tags.split(',').map(t => t.trim()).filter(t => t),\n          pattern: shapedPattern,\n          key: shapedKeys,\n          result: result,\n          ...(group && { group })\n        };\n        break;\n\n      case 'minecraft:recipe_shapeless':\n        recipeProperties = {\n          tags: tags.split(',').map(t => t.trim()).filter(t => t),\n          ingredients: shapelessIngredients,\n          result: result,\n          ...(group && { group })\n        };\n        break;\n\n      case 'minecraft:recipe_furnace':\n        recipeProperties = {\n          tags: tags.split(',').map(t => t.trim()).filter(t => t),\n          input: furnaceInput,\n          output: result.item,\n          ...(group && { group })\n        };\n        break;\n\n      case 'minecraft:recipe_brewing_mix':\n        recipeProperties = {\n          tags: tags.split(',').map(t => t.trim()).filter(t => t),\n          input: brewingInput,\n          reagent: brewingReagent,\n          output: result.item,\n          ...(group && { group })\n        };\n        break;\n\n      case 'minecraft:recipe_brewing_container':\n        recipeProperties = {\n          tags: tags.split(',').map(t => t.trim()).filter(t => t),\n          input: brewingInput,\n          reagent: brewingReagent,\n          output: result.item,\n          ...(group && { group })\n        };\n        break;\n\n      case 'minecraft:recipe_smithing_transform':\n        recipeProperties = {\n          tags: tags.split(',').map(t => t.trim()).filter(t => t),\n          template: smithingTemplate,\n          base: smithingBase,\n          addition: smithingAddition,\n          result: result,\n          ...(group && { group })\n        };\n        break;\n\n      case 'minecraft:recipe_smithing_trim':\n        recipeProperties = {\n          tags: tags.split(',').map(t => t.trim()).filter(t => t),\n          template: smithingTemplate,\n          base: smithingBase,\n          addition: smithingAddition,\n          ...(group && { group })\n        };\n        break;\n\n      default:\n        recipeProperties = {\n          tags: tags.split(',').map(t => t.trim()).filter(t => t),\n          result: result\n        };\n    }\n\n    return {\n      format_version: \"1.21.0\",\n      [selectedRecipeType]: {\n        description: baseDescription,\n        ...recipeProperties\n      }\n    };\n  }, [\n    identifier, selectedRecipeType, tags, group, shapedPattern, shapedKeys, \n    shapelessIngredients, furnaceInput, brewingInput, brewingReagent, \n    smithingTemplate, smithingBase, smithingAddition, result\n  ]);\n\n  const validation = validateRecipeJSON(recipeJSON);\n\n  // Recipe type categories\n  const recipeTypesByCategory = useMemo(() => {\n    const grouped: Record<string, typeof recipeTypes> = {};\n    recipeTypes.forEach(recipe => {\n      if (!grouped[recipe.category]) grouped[recipe.category] = [];\n      grouped[recipe.category].push(recipe);\n    });\n    return grouped;\n  }, []);\n\n  // Recipe management functions\n  const resetRecipe = () => {\n    setIdentifier('');\n    setDescription('');\n    setTags('crafting_table');\n    setGroup('');\n    setShapedPattern(['AAA', 'A A', 'AAA']);\n    setShapedKeys({ 'A': { item: 'minecraft:planks' } });\n    setShapelessIngredients([{ item: 'minecraft:planks' }]);\n    setResult({ item: 'minecraft:chest', count: 1 });\n    \n    toast({\n      title: \"Recipe reset\",\n      description: \"Recipe has been reset to default state.\"\n    });\n  };\n\n  const exportToClipboard = () => {\n    navigator.clipboard.writeText(JSON.stringify(recipeJSON, null, 2));\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Recipe JSON has been copied to your clipboard.\"\n    });\n  };\n\n  const addShapedKey = () => {\n    const availableKeys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').filter(k => !shapedKeys[k]);\n    if (availableKeys.length > 0) {\n      setShapedKeys({ ...shapedKeys, [availableKeys[0]]: { item: 'minecraft:stone' } });\n    }\n  };\n\n  const removeShapedKey = (key: string) => {\n    const newKeys = { ...shapedKeys };\n    delete newKeys[key];\n    setShapedKeys(newKeys);\n  };\n\n  const updateShapedKey = (key: string, ingredient: RecipeIngredient) => {\n    setShapedKeys({ ...shapedKeys, [key]: ingredient });\n  };\n\n  const addShapelessIngredient = () => {\n    setShapelessIngredients([...shapelessIngredients, { item: 'minecraft:stone' }]);\n  };\n\n  const removeShapelessIngredient = (index: number) => {\n    setShapelessIngredients(shapelessIngredients.filter((_, i) => i !== index));\n  };\n\n  const updateShapelessIngredient = (index: number, ingredient: RecipeIngredient) => {\n    setShapelessIngredients(shapelessIngredients.map((ing, i) => i === index ? ingredient : ing));\n  };\n\n  const getRecipeTypeIcon = (recipeType: string) => {\n    switch (recipeType) {\n      case 'minecraft:recipe_shaped': return <Grid3X3 className=\"w-4 h-4\" />;\n      case 'minecraft:recipe_shapeless': return <Shuffle className=\"w-4 h-4\" />;\n      case 'minecraft:recipe_furnace': return <Flame className=\"w-4 h-4\" />;\n      case 'minecraft:recipe_brewing_mix':\n      case 'minecraft:recipe_brewing_container': return <Beaker className=\"w-4 h-4\" />;\n      case 'minecraft:recipe_smithing_transform':\n      case 'minecraft:recipe_smithing_trim': return <Hammer className=\"w-4 h-4\" />;\n      default: return <ChefHat className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <TooltipProvider>\n      <section className=\"p-6\" data-testid=\"recipe-builder\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* Builder Form */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <ChefHat className=\"w-5 h-5\" />\n                    Recipe Configuration\n                  </CardTitle>\n                  <CardDescription>\n                    Create comprehensive Minecraft Bedrock recipes with all official recipe types\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Tabs value={activeTab} onValueChange={setActiveTab}>\n                    <TabsList className=\"grid w-full grid-cols-4\">\n                      <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic</TabsTrigger>\n                      <TabsTrigger value=\"type\" data-testid=\"tab-type\">Type & Config</TabsTrigger>\n                      <TabsTrigger value=\"result\" data-testid=\"tab-result\">Result</TabsTrigger>\n                      <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"basic\" className=\"space-y-4\">\n                      <div className=\"grid gap-4\">\n                        <div>\n                          <Label htmlFor=\"recipe-identifier\">Recipe Identifier *</Label>\n                          <Input\n                            id=\"recipe-identifier\"\n                            value={identifier}\n                            onChange={(e) => setIdentifier(e.target.value)}\n                            placeholder=\"my_addon:custom_recipe\"\n                            data-testid=\"input-identifier\"\n                          />\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Must include namespace (e.g., my_addon:recipe_name)\n                          </p>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"recipe-description\">Description</Label>\n                          <Input\n                            id=\"recipe-description\"\n                            value={description}\n                            onChange={(e) => setDescription(e.target.value)}\n                            placeholder=\"A custom recipe for my addon\"\n                            data-testid=\"input-description\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"recipe-tags\">Recipe Tags</Label>\n                          <Input\n                            id=\"recipe-tags\"\n                            value={tags}\n                            onChange={(e) => setTags(e.target.value)}\n                            placeholder=\"crafting_table, furnace\"\n                            data-testid=\"input-tags\"\n                          />\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Comma-separated list (e.g., crafting_table, stonecutter)\n                          </p>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"recipe-group\">Recipe Group (optional)</Label>\n                          <Input\n                            id=\"recipe-group\"\n                            value={group}\n                            onChange={(e) => setGroup(e.target.value)}\n                            placeholder=\"wooden_tools\"\n                            data-testid=\"input-group\"\n                          />\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Groups recipes together in the recipe book\n                          </p>\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"type\" className=\"space-y-4\">\n                      <div>\n                        <Label>Recipe Type</Label>\n                        <div className=\"grid gap-3 mt-2\">\n                          {Object.entries(recipeTypesByCategory).map(([category, categoryRecipes]) => (\n                            <div key={category}>\n                              <h4 className=\"font-medium text-sm mb-2\">{category}</h4>\n                              <div className=\"grid gap-2\">\n                                {categoryRecipes.map((recipeType) => (\n                                  <Card \n                                    key={recipeType.name}\n                                    className={`p-3 cursor-pointer transition-colors ${\n                                      selectedRecipeType === recipeType.name \n                                        ? 'ring-2 ring-primary bg-primary/5' \n                                        : 'hover:bg-muted/50'\n                                    }`}\n                                    onClick={() => setSelectedRecipeType(recipeType.name)}\n                                    data-testid={`card-recipe-type-${recipeType.name}`}\n                                  >\n                                    <div className=\"flex items-center gap-3\">\n                                      {getRecipeTypeIcon(recipeType.name)}\n                                      <div className=\"flex-1\">\n                                        <div className=\"flex items-center gap-2\">\n                                          <span className=\"font-medium text-sm\">\n                                            {recipeType.name.replace('minecraft:recipe_', '').replace('_', ' ')}\n                                          </span>\n                                          <Badge \n                                            variant=\"outline\" \n                                            className={`text-xs ${\n                                              recipeType.difficulty === 'beginner' ? 'border-green-500' :\n                                              recipeType.difficulty === 'intermediate' ? 'border-yellow-500' :\n                                              'border-red-500'\n                                            }`}\n                                          >\n                                            {recipeType.difficulty}\n                                          </Badge>\n                                        </div>\n                                        <p className=\"text-xs text-muted-foreground\">\n                                          {recipeType.description}\n                                        </p>\n                                      </div>\n                                    </div>\n                                  </Card>\n                                ))}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Recipe Type Specific Configuration */}\n                      {currentRecipeTypeDef && (\n                        <Card className=\"mt-4\">\n                          <CardHeader>\n                            <CardTitle className=\"text-base flex items-center gap-2\">\n                              {getRecipeTypeIcon(selectedRecipeType)}\n                              Configure {selectedRecipeType.replace('minecraft:recipe_', '').replace('_', ' ')}\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            {selectedRecipeType === 'minecraft:recipe_shaped' && (\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label>Crafting Pattern</Label>\n                                  <div className=\"grid gap-2 mt-2\">\n                                    {shapedPattern.map((row, index) => (\n                                      <Input\n                                        key={index}\n                                        value={row}\n                                        onChange={(e) => {\n                                          const newPattern = [...shapedPattern];\n                                          newPattern[index] = e.target.value;\n                                          setShapedPattern(newPattern);\n                                        }}\n                                        placeholder=\"AAA\"\n                                        className=\"font-mono text-center\"\n                                        maxLength={3}\n                                        data-testid={`input-pattern-${index}`}\n                                      />\n                                    ))}\n                                  </div>\n                                </div>\n                                <div>\n                                  <div className=\"flex items-center justify-between mb-2\">\n                                    <Label>Key Mappings</Label>\n                                    <Button variant=\"outline\" size=\"sm\" onClick={addShapedKey}>\n                                      <Plus className=\"w-3 h-3 mr-1\" />\n                                      Add Key\n                                    </Button>\n                                  </div>\n                                  {Object.entries(shapedKeys).map(([key, ingredient]) => (\n                                    <div key={key} className=\"flex items-center gap-2 mb-2\">\n                                      <div className=\"w-8 text-center font-mono font-bold\">{key}</div>\n                                      <Input\n                                        value={ingredient.item}\n                                        onChange={(e) => updateShapedKey(key, { ...ingredient, item: e.target.value })}\n                                        placeholder=\"minecraft:planks\"\n                                        className=\"flex-1\"\n                                        data-testid={`input-key-${key}`}\n                                      />\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => removeShapedKey(key)}\n                                        data-testid={`button-remove-key-${key}`}\n                                      >\n                                        <Trash2 className=\"w-3 h-3\" />\n                                      </Button>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {selectedRecipeType === 'minecraft:recipe_shapeless' && (\n                              <div>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <Label>Ingredients</Label>\n                                  <Button variant=\"outline\" size=\"sm\" onClick={addShapelessIngredient}>\n                                    <Plus className=\"w-3 h-3 mr-1\" />\n                                    Add Ingredient\n                                  </Button>\n                                </div>\n                                {shapelessIngredients.map((ingredient, index) => (\n                                  <div key={index} className=\"flex items-center gap-2 mb-2\">\n                                    <Input\n                                      value={ingredient.item}\n                                      onChange={(e) => updateShapelessIngredient(index, { ...ingredient, item: e.target.value })}\n                                      placeholder=\"minecraft:planks\"\n                                      className=\"flex-1\"\n                                      data-testid={`input-shapeless-${index}`}\n                                    />\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => removeShapelessIngredient(index)}\n                                      disabled={shapelessIngredients.length === 1}\n                                      data-testid={`button-remove-shapeless-${index}`}\n                                    >\n                                      <Trash2 className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n\n                            {selectedRecipeType === 'minecraft:recipe_furnace' && (\n                              <div>\n                                <Label>Input Item</Label>\n                                <Input\n                                  value={furnaceInput.item}\n                                  onChange={(e) => setFurnaceInput({ ...furnaceInput, item: e.target.value })}\n                                  placeholder=\"minecraft:raw_iron\"\n                                  data-testid=\"input-furnace-input\"\n                                />\n                              </div>\n                            )}\n\n                            {(selectedRecipeType === 'minecraft:recipe_brewing_mix' || selectedRecipeType === 'minecraft:recipe_brewing_container') && (\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label>Input (Base Potion)</Label>\n                                  <Input\n                                    value={brewingInput.item}\n                                    onChange={(e) => setBrewingInput({ ...brewingInput, item: e.target.value })}\n                                    placeholder=\"minecraft:potion\"\n                                    data-testid=\"input-brewing-input\"\n                                  />\n                                </div>\n                                <div>\n                                  <Label>Reagent (Brewing Ingredient)</Label>\n                                  <Input\n                                    value={brewingReagent.item}\n                                    onChange={(e) => setBrewingReagent({ ...brewingReagent, item: e.target.value })}\n                                    placeholder=\"minecraft:spider_eye\"\n                                    data-testid=\"input-brewing-reagent\"\n                                  />\n                                </div>\n                              </div>\n                            )}\n\n                            {(selectedRecipeType === 'minecraft:recipe_smithing_transform' || selectedRecipeType === 'minecraft:recipe_smithing_trim') && (\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label>Template</Label>\n                                  <Input\n                                    value={smithingTemplate.item}\n                                    onChange={(e) => setSmithingTemplate({ ...smithingTemplate, item: e.target.value })}\n                                    placeholder=\"minecraft:netherite_upgrade_smithing_template\"\n                                    data-testid=\"input-smithing-template\"\n                                  />\n                                </div>\n                                <div>\n                                  <Label>Base Item</Label>\n                                  <Input\n                                    value={smithingBase.item}\n                                    onChange={(e) => setSmithingBase({ ...smithingBase, item: e.target.value })}\n                                    placeholder=\"minecraft:diamond_sword\"\n                                    data-testid=\"input-smithing-base\"\n                                  />\n                                </div>\n                                <div>\n                                  <Label>Addition Material</Label>\n                                  <Input\n                                    value={smithingAddition.item}\n                                    onChange={(e) => setSmithingAddition({ ...smithingAddition, item: e.target.value })}\n                                    placeholder=\"minecraft:netherite_ingot\"\n                                    data-testid=\"input-smithing-addition\"\n                                  />\n                                </div>\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      )}\n                    </TabsContent>\n\n                    <TabsContent value=\"result\" className=\"space-y-4\">\n                      <div className=\"grid gap-4\">\n                        <div>\n                          <Label htmlFor=\"result-item\">Result Item *</Label>\n                          <Input\n                            id=\"result-item\"\n                            value={result.item}\n                            onChange={(e) => setResult({ ...result, item: e.target.value })}\n                            placeholder=\"my_addon:custom_item\"\n                            data-testid=\"input-result-item\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"result-count\">Result Count</Label>\n                          <Input\n                            id=\"result-count\"\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"64\"\n                            value={result.count}\n                            onChange={(e) => setResult({ ...result, count: parseInt(e.target.value) || 1 })}\n                            data-testid=\"input-result-count\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"result-data\">Result Data Value (optional)</Label>\n                          <Input\n                            id=\"result-data\"\n                            type=\"number\"\n                            min=\"0\"\n                            value={result.data || ''}\n                            onChange={(e) => setResult({ \n                              ...result, \n                              data: e.target.value ? parseInt(e.target.value) : undefined \n                            })}\n                            placeholder=\"0\"\n                            data-testid=\"input-result-data\"\n                          />\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"advanced\" className=\"space-y-4\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-medium mb-2\">Actions</h4>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              onClick={resetRecipe}\n                              data-testid=\"button-reset\"\n                            >\n                              <RotateCcw className=\"w-4 h-4 mr-2\" />\n                              Reset\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={exportToClipboard}\n                              data-testid=\"button-export\"\n                            >\n                              <Copy className=\"w-4 h-4 mr-2\" />\n                              Copy JSON\n                            </Button>\n                          </div>\n                        </div>\n\n                        {currentRecipeTypeDef && (\n                          <div className=\"space-y-3\">\n                            <h4 className=\"font-medium\">Recipe Type Information</h4>\n                            <div className=\"bg-muted p-4 rounded\">\n                              <div className=\"text-sm space-y-2\">\n                                <div><strong>Type:</strong> {currentRecipeTypeDef.name}</div>\n                                <div><strong>Category:</strong> {currentRecipeTypeDef.category}</div>\n                                <div><strong>Difficulty:</strong> {currentRecipeTypeDef.difficulty}</div>\n                                <div><strong>Version:</strong> {currentRecipeTypeDef.version}</div>\n                                <div><strong>Stability:</strong> {currentRecipeTypeDef.stability}</div>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n\n                        <ValidationStatus validation={validation} />\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* JSON Preview */}\n            <div className=\"space-y-6\">\n              <CodePreview \n                code={JSON.stringify(recipeJSON, null, 2)}\n                language=\"json\"\n                title=\"Recipe JSON\"\n                validation={validation}\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n    </TooltipProvider>\n  );\n}","size_bytes":31236},"client/src/components/Builders/SpawnRuleBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { Copy, Download, Plus, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport ValidationStatus from \"@/components/Common/ValidationStatus\";\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\n\ninterface SpawnCondition {\n  type: string;\n  value: string;\n}\n\nexport default function SpawnRuleBuilder() {\n  const [identifier, setIdentifier] = useLocalStorage('spawn-identifier', '');\n  const [entityType, setEntityType] = useLocalStorage('spawn-entity-type', '');\n  const [spawnWeight, setSpawnWeight] = useLocalStorage('spawn-weight', '100');\n  const [minGroupSize, setMinGroupSize] = useLocalStorage('spawn-min-group', '1');\n  const [maxGroupSize, setMaxGroupSize] = useLocalStorage('spawn-max-group', '4');\n  const [populationControl, setPopulationControl] = useLocalStorage('spawn-population-control', true);\n  const [conditions, setConditions] = useLocalStorage<SpawnCondition[]>('spawn-conditions', [\n    { type: 'minecraft:biome_filter', value: 'plains' }\n  ]);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  const spawnConfig = {\n    identifier,\n    entityType,\n    weight: parseInt(spawnWeight) || 100,\n    minGroupSize: parseInt(minGroupSize) || 1,\n    maxGroupSize: parseInt(maxGroupSize) || 4,\n    populationControl,\n    conditions\n  };\n\n  const spawnJSON = {\n    \"format_version\": \"1.21.0\",\n    \"minecraft:spawn_rules\": {\n      \"description\": {\n        \"identifier\": spawnConfig.identifier || \"my_addon:custom_spawn_rule\",\n        \"population_control\": spawnConfig.populationControl\n      },\n      \"conditions\": spawnConfig.conditions.map(condition => ({\n        [condition.type]: condition.value\n      })),\n      \"herd\": {\n        \"min_size\": spawnConfig.minGroupSize,\n        \"max_size\": spawnConfig.maxGroupSize\n      }\n    }\n  };\n\n  const validation = { isValid: true, errors: [] };\n\n  const conditionTypes = [\n    { value: 'minecraft:biome_filter', label: 'Biome Filter' },\n    { value: 'minecraft:brightness_filter', label: 'Brightness Filter' },\n    { value: 'minecraft:height_filter', label: 'Height Filter' },\n    { value: 'minecraft:herd', label: 'Herd Size' },\n    { value: 'minecraft:permute_type', label: 'Permute Type' },\n  ];\n\n  const addCondition = () => {\n    setConditions([...conditions, { type: 'minecraft:biome_filter', value: '' }]);\n  };\n\n  const removeCondition = (index: number) => {\n    setConditions(conditions.filter((_, i) => i !== index));\n  };\n\n  const updateCondition = (index: number, field: keyof SpawnCondition, value: string) => {\n    setConditions(conditions.map((condition, i) => \n      i === index ? { ...condition, [field]: value } : condition\n    ));\n  };\n\n  return (\n    <section className=\"p-6\" data-testid=\"spawn-rule-builder\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Builder Form */}\n          <div className=\"builder-form rounded-lg p-6\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-4\">Spawn Rule Configuration</h3>\n            \n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-4\">\n              <TabsList className=\"bg-muted rounded-lg p-1\">\n                <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic</TabsTrigger>\n                <TabsTrigger value=\"conditions\" data-testid=\"tab-conditions\">Conditions</TabsTrigger>\n                <TabsTrigger value=\"population\" data-testid=\"tab-population\">Population</TabsTrigger>\n                <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"basic\" className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"spawn-identifier\">Spawn Rule Identifier</Label>\n                  <Input\n                    id=\"spawn-identifier\"\n                    value={identifier}\n                    onChange={(e) => setIdentifier(e.target.value)}\n                    placeholder=\"my_addon:custom_spawn_rule\"\n                    data-testid=\"input-identifier\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"spawn-entity-type\">Entity Type</Label>\n                  <Input\n                    id=\"spawn-entity-type\"\n                    value={entityType}\n                    onChange={(e) => setEntityType(e.target.value)}\n                    placeholder=\"my_addon:custom_entity\"\n                    data-testid=\"input-entity-type\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"spawn-weight\">Spawn Weight</Label>\n                  <Input\n                    id=\"spawn-weight\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"1000\"\n                    value={spawnWeight}\n                    onChange={(e) => setSpawnWeight(e.target.value)}\n                    data-testid=\"input-spawn-weight\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Higher values increase spawn chance relative to other entities\n                  </p>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"conditions\" className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  {conditions.map((condition, index) => (\n                    <div key={index} className=\"flex items-center gap-2 p-3 bg-muted rounded-lg\">\n                      <Select \n                        value={condition.type} \n                        onValueChange={(value) => updateCondition(index, 'type', value)}\n                      >\n                        <SelectTrigger className=\"w-48\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {conditionTypes.map((type) => (\n                            <SelectItem key={type.value} value={type.value}>\n                              {type.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      \n                      <Input\n                        placeholder=\"Condition value\"\n                        value={condition.value}\n                        onChange={(e) => updateCondition(index, 'value', e.target.value)}\n                        className=\"flex-1\"\n                        data-testid={`input-condition-value-${index}`}\n                      />\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeCondition(index)}\n                        disabled={conditions.length === 1}\n                        data-testid={`button-remove-condition-${index}`}\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n\n                <Button \n                  variant=\"outline\" \n                  onClick={addCondition}\n                  data-testid=\"button-add-condition\"\n                >\n                  <Plus className=\"mr-2\" size={16} />\n                  Add Condition\n                </Button>\n              </TabsContent>\n\n              <TabsContent value=\"population\" className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Population Control</h4>\n                    <p className=\"text-xs text-muted-foreground\">Limit entity spawning based on existing population</p>\n                  </div>\n                  <Switch\n                    checked={populationControl}\n                    onCheckedChange={setPopulationControl}\n                    data-testid=\"switch-population-control\"\n                  />\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"min-group-size\">Min Group Size</Label>\n                    <Input\n                      id=\"min-group-size\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"20\"\n                      value={minGroupSize}\n                      onChange={(e) => setMinGroupSize(e.target.value)}\n                      data-testid=\"input-min-group-size\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"max-group-size\">Max Group Size</Label>\n                    <Input\n                      id=\"max-group-size\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"20\"\n                      value={maxGroupSize}\n                      onChange={(e) => setMaxGroupSize(e.target.value)}\n                      data-testid=\"input-max-group-size\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"advanced\" className=\"space-y-4\">\n                <div className=\"text-center text-muted-foreground py-8\">\n                  <p>Advanced spawn properties will be available soon</p>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* JSON Output */}\n          <div className=\"builder-form rounded-lg p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold text-foreground\">Generated JSON</h3>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  data-testid=\"button-copy-json\"\n                >\n                  <Copy className=\"mr-2\" size={16} />\n                  Copy\n                </Button>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  data-testid=\"button-export-json\"\n                >\n                  <Download className=\"mr-2\" size={16} />\n                  Export\n                </Button>\n              </div>\n            </div>\n            \n            <CodePreview code={JSON.stringify(spawnJSON, null, 2)} language=\"json\" />\n\n            <div className=\"mt-4\">\n              <ValidationStatus validation={validation} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10955},"client/src/components/Common/CodePreview.tsx":{"content":"import { useState } from \"react\";\nimport { Copy, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface CodePreviewProps {\n  code: string;\n  language: string;\n  className?: string;\n  title?: string;\n}\n\nexport default function CodePreview({ code, language, className = \"\", title }: CodePreviewProps) {\n  const [copied, setCopied] = useState(false);\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const highlightSyntax = (code: string, lang: string) => {\n    // Simple syntax highlighting for JSON\n    if (lang === 'json') {\n      return code\n        .replace(/\"([^\"]+)\":/g, '<span class=\"text-blue-400\">\"$1\":</span>')\n        .replace(/: \"([^\"]+)\"/g, ': <span class=\"text-green-400\">\"$1\"</span>')\n        .replace(/: (\\d+\\.?\\d*)/g, ': <span class=\"text-yellow-400\">$1</span>')\n        .replace(/: (true|false|null)/g, ': <span class=\"text-purple-400\">$1</span>');\n    }\n    \n    // Simple syntax highlighting for JavaScript\n    if (lang === 'javascript') {\n      return code\n        .replace(/\\b(import|export|from|const|let|var|function|class|if|else|for|while|return|try|catch|throw)\\b/g, '<span class=\"text-purple-400\">$1</span>')\n        .replace(/'([^']+)'/g, '<span class=\"text-green-400\">\\'$1\\'</span>')\n        .replace(/\"([^\"]+)\"/g, '<span class=\"text-green-400\">\"$1\"</span>')\n        .replace(/\\/\\/.*$/gm, '<span class=\"text-gray-500\">$&</span>')\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '<span class=\"text-gray-500\">$&</span>');\n    }\n\n    return code;\n  };\n\n  return (\n    <div className={`relative syntax-highlight rounded-lg ${className}`} data-testid=\"code-preview\">\n      <div className=\"flex items-center justify-between p-3 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          {title && (\n            <span className=\"text-xs font-medium text-foreground mr-2\">\n              {title}\n            </span>\n          )}\n          <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n            {language}\n          </span>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={copyToClipboard}\n          className=\"h-6 px-2\"\n          data-testid=\"button-copy-code\"\n        >\n          {copied ? (\n            <Check size={14} className=\"text-green-500\" />\n          ) : (\n            <Copy size={14} />\n          )}\n        </Button>\n      </div>\n      <div className=\"p-4 overflow-x-auto\">\n        <pre className=\"text-sm font-mono leading-relaxed\">\n          <code \n            dangerouslySetInnerHTML={{ \n              __html: highlightSyntax(code, language) \n            }}\n          />\n        </pre>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2902},"client/src/components/Common/ComponentModal.tsx":{"content":"import { useState } from \"react\";\nimport { X, Search, Parentheses, Cog, Zap, Target } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface ComponentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAddComponent: (componentType: string) => void;\n  componentType: 'entity' | 'block' | 'item';\n}\n\nexport default function ComponentModal({ isOpen, onClose, onAddComponent, componentType }: ComponentModalProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n\n  const componentCategories = {\n    entity: {\n      movement: {\n        icon: Target,\n        components: [\n          {\n            name: 'minecraft:movement',\n            description: 'Basic movement speed',\n            category: 'movement'\n          },\n          {\n            name: 'minecraft:navigation.walk',\n            description: 'Ground navigation',\n            category: 'movement'\n          },\n          {\n            name: 'minecraft:jump.static',\n            description: 'Jumping ability',\n            category: 'movement'\n          },\n          {\n            name: 'minecraft:movement.basic',\n            description: 'Basic movement mechanics',\n            category: 'movement'\n          }\n        ]\n      },\n      behavior: {\n        icon: Parentheses,\n        components: [\n          {\n            name: 'minecraft:behavior.random_stroll',\n            description: 'Random walking behavior',\n            category: 'behavior'\n          },\n          {\n            name: 'minecraft:behavior.look_at_player',\n            description: 'Look at nearby players',\n            category: 'behavior'\n          },\n          {\n            name: 'minecraft:behavior.panic',\n            description: 'Flee when attacked',\n            category: 'behavior'\n          },\n          {\n            name: 'minecraft:behavior.float',\n            description: 'Float in water',\n            category: 'behavior'\n          }\n        ]\n      },\n      attributes: {\n        icon: Cog,\n        components: [\n          {\n            name: 'minecraft:health',\n            description: 'Entity health points',\n            category: 'attributes'\n          },\n          {\n            name: 'minecraft:attack',\n            description: 'Attack damage',\n            category: 'attributes'\n          },\n          {\n            name: 'minecraft:scale',\n            description: 'Entity size multiplier',\n            category: 'attributes'\n          }\n        ]\n      },\n      physics: {\n        icon: Zap,\n        components: [\n          {\n            name: 'minecraft:physics',\n            description: 'Physics simulation',\n            category: 'physics'\n          },\n          {\n            name: 'minecraft:collision_box',\n            description: 'Collision boundaries',\n            category: 'physics'\n          },\n          {\n            name: 'minecraft:pushable',\n            description: 'Can be pushed by entities',\n            category: 'physics'\n          }\n        ]\n      }\n    },\n    block: {\n      basic: {\n        icon: Cog,\n        components: [\n          {\n            name: 'minecraft:destructible_by_mining',\n            description: 'Mining properties',\n            category: 'basic'\n          },\n          {\n            name: 'minecraft:destructible_by_explosion',\n            description: 'Explosion resistance',\n            category: 'basic'\n          },\n          {\n            name: 'minecraft:friction',\n            description: 'Surface friction',\n            category: 'basic'\n          }\n        ]\n      },\n      visual: {\n        icon: Target,\n        components: [\n          {\n            name: 'minecraft:geometry',\n            description: 'Custom 3D model',\n            category: 'visual'\n          },\n          {\n            name: 'minecraft:material_instances',\n            description: 'Texture and rendering',\n            category: 'visual'\n          },\n          {\n            name: 'minecraft:map_color',\n            description: 'Color on maps',\n            category: 'visual'\n          }\n        ]\n      }\n    },\n    item: {\n      basic: {\n        icon: Cog,\n        components: [\n          {\n            name: 'minecraft:max_stack_size',\n            description: 'Stack size limit',\n            category: 'basic'\n          },\n          {\n            name: 'minecraft:icon',\n            description: 'Item texture',\n            category: 'basic'\n          },\n          {\n            name: 'minecraft:display_name',\n            description: 'Item display name',\n            category: 'basic'\n          }\n        ]\n      },\n      functionality: {\n        icon: Parentheses,\n        components: [\n          {\n            name: 'minecraft:food',\n            description: 'Consumable food item',\n            category: 'functionality'\n          },\n          {\n            name: 'minecraft:durability',\n            description: 'Tool durability',\n            category: 'functionality'\n          },\n          {\n            name: 'minecraft:weapon',\n            description: 'Weapon properties',\n            category: 'functionality'\n          }\n        ]\n      }\n    }\n  };\n\n  const currentComponents = componentCategories[componentType] || {};\n  \n  const allComponents = Object.values(currentComponents).flatMap(category => category.components);\n  \n  const filteredComponents = allComponents.filter(component => {\n    const matchesSearch = component.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         component.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || component.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = Object.keys(currentComponents);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-hidden\" data-testid=\"component-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Add Component\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-modal\">\n              <X size={16} />\n            </Button>\n          </DialogTitle>\n          <DialogDescription>\n            Choose a component to add to your {componentType}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex space-x-4 h-96\">\n          {/* Search and Filters */}\n          <div className=\"w-1/3 space-y-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={16} />\n              <Input\n                placeholder=\"Search components...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-component-search\"\n              />\n            </div>\n\n            <Tabs value={selectedCategory} onValueChange={setSelectedCategory}>\n              <TabsList className=\"grid w-full grid-cols-1 h-auto\">\n                <TabsTrigger value=\"all\" className=\"justify-start\" data-testid=\"filter-all\">\n                  All Categories\n                </TabsTrigger>\n                {categories.map((category) => {\n                  const CategoryIcon = currentComponents[category].icon;\n                  return (\n                    <TabsTrigger \n                      key={category} \n                      value={category} \n                      className=\"justify-start\"\n                      data-testid={`filter-${category}`}\n                    >\n                      <CategoryIcon className=\"mr-2\" size={16} />\n                      {category.charAt(0).toUpperCase() + category.slice(1)}\n                    </TabsTrigger>\n                  );\n                })}\n              </TabsList>\n            </Tabs>\n          </div>\n\n          {/* Component List */}\n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"grid gap-3\">\n              {filteredComponents.length > 0 ? (\n                filteredComponents.map((component) => (\n                  <div\n                    key={component.name}\n                    className=\"p-4 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                    onClick={() => {\n                      onAddComponent(component.name);\n                      onClose();\n                    }}\n                    data-testid={`component-${component.name.replace('minecraft:', '').replace(':', '-')}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-mono text-sm font-medium text-primary mb-1\">\n                          {component.name}\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          {component.description}\n                        </p>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {component.category}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No components found matching your search.</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n            Cancel\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10107},"client/src/components/Common/ValidationStatus.tsx":{"content":"import { CheckCircle, AlertCircle, AlertTriangle } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ValidationResult {\n  isValid: boolean;\n  errors?: string[];\n  warnings?: string[];\n}\n\ninterface ValidationStatusProps {\n  validation: ValidationResult;\n  className?: string;\n}\n\nexport default function ValidationStatus({ validation, className = \"\" }: ValidationStatusProps) {\n  const { isValid, errors = [], warnings = [] } = validation;\n\n  if (isValid && warnings.length === 0) {\n    return (\n      <div className={`p-3 bg-green-500/10 border border-green-500 rounded-lg ${className}`} data-testid=\"validation-success\">\n        <div className=\"flex items-center text-green-600\">\n          <CheckCircle className=\"mr-2\" size={16} />\n          <span className=\"text-sm font-medium\">Valid JSON</span>\n        </div>\n        <p className=\"text-sm text-green-600 mt-1\">Ready to export and use in Minecraft</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-3 ${className}`} data-testid=\"validation-status\">\n      {/* Status Badge */}\n      <div className=\"flex items-center space-x-2\">\n        <Badge variant={isValid ? \"default\" : \"destructive\"} className=\"flex items-center\">\n          {isValid ? (\n            <CheckCircle className=\"mr-1\" size={14} />\n          ) : (\n            <AlertCircle className=\"mr-1\" size={14} />\n          )}\n          {isValid ? 'Valid' : 'Invalid'}\n        </Badge>\n        \n        {warnings.length > 0 && (\n          <Badge variant=\"secondary\" className=\"flex items-center\">\n            <AlertTriangle className=\"mr-1\" size={14} />\n            {warnings.length} Warning{warnings.length !== 1 ? 's' : ''}\n          </Badge>\n        )}\n      </div>\n\n      {/* Errors */}\n      {errors.length > 0 && (\n        <div className=\"p-3 bg-destructive/10 border border-destructive rounded-lg\">\n          <h4 className=\"font-medium text-destructive mb-2 flex items-center\">\n            <AlertCircle className=\"mr-2\" size={16} />\n            {errors.length} Error{errors.length !== 1 ? 's' : ''} Found\n          </h4>\n          <ul className=\"space-y-1\">\n            {errors.map((error, index) => (\n              <li key={index} className=\"text-sm text-destructive flex items-start\">\n                <span className=\"mr-2\">•</span>\n                <span>{error}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Warnings */}\n      {warnings.length > 0 && (\n        <div className=\"p-3 bg-yellow-500/10 border border-yellow-500 rounded-lg\">\n          <h4 className=\"font-medium text-yellow-600 mb-2 flex items-center\">\n            <AlertTriangle className=\"mr-2\" size={16} />\n            {warnings.length} Warning{warnings.length !== 1 ? 's' : ''}\n          </h4>\n          <ul className=\"space-y-1\">\n            {warnings.map((warning, index) => (\n              <li key={index} className=\"text-sm text-yellow-600 flex items-start\">\n                <span className=\"mr-2\">•</span>\n                <span>{warning}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Success with warnings */}\n      {isValid && warnings.length > 0 && (\n        <div className=\"p-3 bg-blue-500/10 border border-blue-500 rounded-lg\">\n          <div className=\"flex items-center text-blue-600\">\n            <CheckCircle className=\"mr-2\" size={16} />\n            <span className=\"text-sm font-medium\">Valid with warnings</span>\n          </div>\n          <p className=\"text-sm text-blue-600 mt-1\">\n            Your JSON is valid but consider addressing the warnings above\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3661},"client/src/components/Documentation/BlockDocs.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Box, Copy, ExternalLink, Filter, BookOpen, Layers, \n  Settings, Shield, Zap, Eye, Hammer, Pickaxe, Mountain,\n  Grid3X3, Palette, Cog, Target, ChevronRight,\n  CheckCircle, AlertTriangle, Info, Lightbulb, Play,\n  Clock, Activity, BarChart3, Wrench, Building2\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport { blockComponents, BlockComponent } from \"../../../../shared/blockRegistry\";\n\ninterface BlockDocsProps {\n  onNavigate?: (section: string) => void;\n}\n\nexport default function BlockDocs({ onNavigate }: BlockDocsProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedComponent, setSelectedComponent] = useState<BlockComponent | null>(null);\n  const [difficultyFilter, setDifficultyFilter] = useState<'all' | 'beginner' | 'intermediate' | 'advanced'>('all');\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\n  const [stabilityFilter, setStabilityFilter] = useState<'all' | 'stable' | 'experimental' | 'beta'>('all');\n  const [selectedTutorial, setSelectedTutorial] = useState<string>('basic-block');\n  const { toast } = useToast();\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  // Filter components based on search and filters\n  const filteredComponents = blockComponents.filter(component => {\n    const matchesSearch = searchTerm === '' || \n      component.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      component.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      component.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesDifficulty = difficultyFilter === 'all' || component.difficulty === difficultyFilter;\n    const matchesCategory = categoryFilter === 'all' || component.category === categoryFilter;\n    const matchesStability = stabilityFilter === 'all' || component.stability === stabilityFilter;\n    \n    return matchesSearch && matchesDifficulty && matchesCategory && matchesStability;\n  });\n\n  // Group components by category\n  const componentsByCategory = filteredComponents.reduce((acc, component) => {\n    const category = component.category;\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(component);\n    return acc;\n  }, {} as Record<string, BlockComponent[]>);\n\n  // Get unique categories for filter\n  const categories = [...new Set(blockComponents.map(c => c.category))];\n  \n  // Category icons mapping\n  const categoryIcons: Record<string, React.ComponentType<{ size?: number; className?: string }>> = {\n    'Core': Box,\n    'Physics': Zap,\n    'Rendering': Eye,\n    'Mining': Pickaxe,\n    'Collision': Shield,\n    'Material': Palette,\n    'Geometry': Grid3X3,\n    'State': Settings,\n    'Interaction': Target,\n    'Redstone': Activity,\n    'Utility': Wrench\n  };\n\n  // Tutorial examples\n  const tutorials = {\n    'basic-block': {\n      title: 'Basic Custom Block',\n      description: 'Create a simple block with custom properties',\n      difficulty: 'beginner' as const,\n      estimatedTime: '5 minutes',\n      components: ['minecraft:destructible_by_mining', 'minecraft:destructible_by_explosion', 'minecraft:friction'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_stone\",\n      \"menu_category\": {\n        \"category\": \"construction\"\n      }\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 2.5\n      },\n      \"minecraft:destructible_by_explosion\": {\n        \"explosion_resistance\": 6.0\n      },\n      \"minecraft:friction\": 0.6,\n      \"minecraft:map_color\": \"#7F7F7F\",\n      \"minecraft:material_instances\": {\n        \"*\": {\n          \"texture\": \"custom_stone\",\n          \"render_method\": \"opaque\"\n        }\n      }\n    }\n  }\n}`\n    },\n    'custom-geometry': {\n      title: 'Custom Shape Block',\n      description: 'Create a block with custom 3D geometry and collision',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '15 minutes',\n      components: ['minecraft:geometry', 'minecraft:collision_box', 'minecraft:selection_box'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_pillar\",\n      \"menu_category\": {\n        \"category\": \"construction\"\n      }\n    },\n    \"components\": {\n      \"minecraft:geometry\": \"minecraft:geometry.custom_pillar\",\n      \"minecraft:material_instances\": {\n        \"*\": {\n          \"texture\": \"custom_pillar\",\n          \"render_method\": \"opaque\"\n        },\n        \"up\": {\n          \"texture\": \"custom_pillar_top\",\n          \"render_method\": \"opaque\"\n        },\n        \"down\": {\n          \"texture\": \"custom_pillar_top\",\n          \"render_method\": \"opaque\"\n        }\n      },\n      \"minecraft:collision_box\": {\n        \"origin\": [-4, 0, -4],\n        \"size\": [8, 16, 8]\n      },\n      \"minecraft:selection_box\": {\n        \"origin\": [-4, 0, -4],\n        \"size\": [8, 16, 8]\n      },\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 3.0\n      },\n      \"minecraft:destructible_by_explosion\": {\n        \"explosion_resistance\": 8.0\n      }\n    }\n  }\n}`\n    },\n    'interactive-block': {\n      title: 'Interactive Block with States',\n      description: 'Create a block that changes state when interacted with',\n      difficulty: 'advanced' as const,\n      estimatedTime: '30 minutes',\n      components: ['minecraft:on_interact', 'minecraft:block_light_emission', 'minecraft:permutations'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:magic_lamp\",\n      \"menu_category\": {\n        \"category\": \"items\"\n      },\n      \"states\": {\n        \"my_addon:lit\": [false, true]\n      }\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 1.0\n      },\n      \"minecraft:geometry\": \"minecraft:geometry.lamp\",\n      \"minecraft:material_instances\": {\n        \"*\": {\n          \"texture\": \"magic_lamp_off\",\n          \"render_method\": \"alpha_test\"\n        }\n      },\n      \"minecraft:on_interact\": {\n        \"event\": \"my_addon:toggle_light\"\n      }\n    },\n    \"permutations\": [\n      {\n        \"condition\": \"q.block_state('my_addon:lit') == true\",\n        \"components\": {\n          \"minecraft:block_light_emission\": 15,\n          \"minecraft:material_instances\": {\n            \"*\": {\n              \"texture\": \"magic_lamp_on\",\n              \"render_method\": \"alpha_test\"\n            }\n          }\n        }\n      }\n    ],\n    \"events\": {\n      \"my_addon:toggle_light\": {\n        \"set_block_state\": {\n          \"my_addon:lit\": \"!q.block_state('my_addon:lit')\"\n        }\n      }\n    }\n  }\n}`\n    },\n    'multiface-block': {\n      title: 'Multi-Face Block',\n      description: 'Create a block with different textures on each face',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '20 minutes',\n      components: ['minecraft:material_instances', 'minecraft:unit_cube'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:crate\",\n      \"menu_category\": {\n        \"category\": \"construction\"\n      }\n    },\n    \"components\": {\n      \"minecraft:unit_cube\": {},\n      \"minecraft:material_instances\": {\n        \"*\": {\n          \"texture\": \"crate_side\",\n          \"render_method\": \"opaque\"\n        },\n        \"up\": {\n          \"texture\": \"crate_top\",\n          \"render_method\": \"opaque\"\n        },\n        \"down\": {\n          \"texture\": \"crate_bottom\",\n          \"render_method\": \"opaque\"\n        },\n        \"north\": {\n          \"texture\": \"crate_front\",\n          \"render_method\": \"opaque\"\n        }\n      },\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 2.0\n      },\n      \"minecraft:destructible_by_explosion\": {\n        \"explosion_resistance\": 4.0\n      },\n      \"minecraft:flammable\": {\n        \"catch_chance_modifier\": 5,\n        \"destroy_chance_modifier\": 20\n      }\n    }\n  }\n}`\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'text-green-600 dark:text-green-400';\n      case 'intermediate': return 'text-yellow-600 dark:text-yellow-400';\n      case 'advanced': return 'text-red-600 dark:text-red-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const getStabilityColor = (stability: string) => {\n    switch (stability) {\n      case 'stable': return 'text-green-600 dark:text-green-400';\n      case 'experimental': return 'text-orange-600 dark:text-orange-400';\n      case 'beta': return 'text-blue-600 dark:text-blue-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const blockPatterns = [\n    {\n      title: 'Decorative Blocks',\n      description: 'Blocks primarily for visual appeal and building',\n      icon: Palette,\n      components: ['minecraft:material_instances', 'minecraft:geometry', 'minecraft:map_color'],\n      usage: 'Perfect for architectural details and themed builds'\n    },\n    {\n      title: 'Functional Blocks',\n      description: 'Blocks that serve specific gameplay purposes',\n      icon: Cog,\n      components: ['minecraft:on_interact', 'minecraft:inventory', 'minecraft:redstone'],\n      usage: 'Crafting stations, storage, or utility blocks'\n    },\n    {\n      title: 'Natural Blocks',\n      description: 'Blocks that fit into world generation',\n      icon: Mountain,\n      components: ['minecraft:destructible_by_mining', 'minecraft:loot', 'minecraft:placement_filter'],\n      usage: 'Ores, stones, and environmental blocks'\n    },\n    {\n      title: 'Technical Blocks',\n      description: 'Blocks for redstone and automation',\n      icon: Activity,\n      components: ['minecraft:redstone', 'minecraft:block_light_emission', 'minecraft:ticking'],\n      usage: 'Redstone components and automation systems'\n    }\n  ];\n\n  return (\n    <section className=\"p-6 max-w-7xl mx-auto\" data-testid=\"block-docs\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold text-foreground mb-4\">Block Documentation</h1>\n        <p className=\"text-xl text-muted-foreground mb-6\">\n          Complete guide to creating custom blocks in Minecraft: Bedrock Edition\n        </p>\n        \n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Components</p>\n                <p className=\"text-2xl font-bold\">{blockComponents.length}</p>\n              </div>\n              <Box className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Categories</p>\n                <p className=\"text-2xl font-bold\">{categories.length}</p>\n              </div>\n              <BookOpen className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Stable</p>\n                <p className=\"text-2xl font-bold\">\n                  {blockComponents.filter(c => c.stability === 'stable').length}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Experimental</p>\n                <p className=\"text-2xl font-bold\">\n                  {blockComponents.filter(c => c.stability === 'experimental').length}\n                </p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"components\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"components\">Components</TabsTrigger>\n          <TabsTrigger value=\"tutorials\">Tutorials</TabsTrigger>\n          <TabsTrigger value=\"patterns\">Block Patterns</TabsTrigger>\n          <TabsTrigger value=\"best-practices\">Best Practices</TabsTrigger>\n        </TabsList>\n\n        {/* Components Tab */}\n        <TabsContent value=\"components\" className=\"space-y-6\">\n          {/* Search and Filters */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n                <div className=\"lg:col-span-2\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n                    <Input\n                      placeholder=\"Search components, keywords, or descriptions...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-component-search\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={difficultyFilter} onValueChange={(value: any) => setDifficultyFilter(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Difficulty\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Difficulties</SelectItem>\n                    <SelectItem value=\"beginner\">Beginner</SelectItem>\n                    <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                    <SelectItem value=\"advanced\">Advanced</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {categories.map(category => (\n                      <SelectItem key={category} value={category}>{category}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={stabilityFilter} onValueChange={(value: any) => setStabilityFilter(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Stability\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Stability</SelectItem>\n                    <SelectItem value=\"stable\">Stable</SelectItem>\n                    <SelectItem value=\"experimental\">Experimental</SelectItem>\n                    <SelectItem value=\"beta\">Beta</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {(searchTerm || difficultyFilter !== 'all' || categoryFilter !== 'all' || stabilityFilter !== 'all') && (\n                <div className=\"mt-4 flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Showing {filteredComponents.length} of {blockComponents.length} components\n                  </span>\n                  {filteredComponents.length < blockComponents.length && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSearchTerm('');\n                        setDifficultyFilter('all');\n                        setCategoryFilter('all');\n                        setStabilityFilter('all');\n                      }}\n                    >\n                      Clear Filters\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {/* Component Browser */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Block Components</CardTitle>\n                  <CardDescription>\n                    Browse through all available block components and their properties\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Accordion type=\"multiple\" className=\"space-y-2\">\n                    {Object.entries(componentsByCategory).map(([category, components]) => {\n                      const IconComponent = categoryIcons[category] || Box;\n                      return (\n                        <AccordionItem key={category} value={category} className=\"border rounded-lg\">\n                          <AccordionTrigger className=\"px-4 hover:bg-muted\">\n                            <div className=\"flex items-center justify-between w-full\">\n                              <div className=\"flex items-center gap-2\">\n                                <IconComponent size={16} />\n                                <span className=\"font-medium\">{category}</span>\n                              </div>\n                              <Badge variant=\"secondary\">{components.length}</Badge>\n                            </div>\n                          </AccordionTrigger>\n                          <AccordionContent className=\"px-4 pb-4\">\n                            <div className=\"space-y-2\">\n                              {components.map((component) => (\n                                <div\n                                  key={component.name}\n                                  className=\"p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                                  onClick={() => setSelectedComponent(component)}\n                                  data-testid={`component-${component.name.replace('minecraft:', '').replace(':', '-')}`}\n                                >\n                                  <div className=\"flex items-start justify-between\">\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center gap-2 mb-1\">\n                                        <h4 className=\"font-mono text-sm text-primary\">{component.name}</h4>\n                                        <Badge \n                                          variant={component.difficulty === 'beginner' ? 'secondary' : \n                                                  component.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                                          className=\"text-xs\"\n                                        >\n                                          {component.difficulty}\n                                        </Badge>\n                                        <Badge \n                                          variant=\"outline\" \n                                          className={`text-xs ${getStabilityColor(component.stability)}`}\n                                        >\n                                          {component.stability}\n                                        </Badge>\n                                      </div>\n                                      <p className=\"text-sm text-muted-foreground\">{component.description}</p>\n                                      {component.version && (\n                                        <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                                          Since {component.version}\n                                        </Badge>\n                                      )}\n                                      {component.keywords.length > 0 && (\n                                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                                          {component.keywords.slice(0, 3).map(keyword => (\n                                            <Badge key={keyword} variant=\"outline\" className=\"text-xs\">\n                                              {keyword}\n                                            </Badge>\n                                          ))}\n                                        </div>\n                                      )}\n                                    </div>\n                                    <ChevronRight size={16} className=\"text-muted-foreground\" />\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </AccordionContent>\n                        </AccordionItem>\n                      );\n                    })}\n                  </Accordion>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Component Details */}\n            <div className=\"space-y-6\">\n              {selectedComponent ? (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"font-mono text-lg break-all\">{selectedComponent.name}</CardTitle>\n                    <CardDescription>{selectedComponent.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge variant=\"secondary\">{selectedComponent.category}</Badge>\n                      <Badge \n                        variant={selectedComponent.difficulty === 'beginner' ? 'secondary' : \n                                selectedComponent.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                      >\n                        {selectedComponent.difficulty}\n                      </Badge>\n                      <Badge \n                        variant=\"outline\" \n                        className={getStabilityColor(selectedComponent.stability)}\n                      >\n                        {selectedComponent.stability}\n                      </Badge>\n                      {selectedComponent.version && (\n                        <Badge variant=\"outline\">\n                          Since {selectedComponent.version}\n                        </Badge>\n                      )}\n                    </div>\n\n                    <Tabs defaultValue=\"properties\">\n                      <TabsList className=\"grid grid-cols-3 w-full\">\n                        <TabsTrigger value=\"properties\">Properties</TabsTrigger>\n                        <TabsTrigger value=\"example\">Example</TabsTrigger>\n                        <TabsTrigger value=\"details\">Details</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"properties\" className=\"space-y-3\">\n                        {selectedComponent.properties && selectedComponent.properties.length > 0 ? (\n                          <div className=\"space-y-3\">\n                            {selectedComponent.properties.map((prop) => (\n                              <div key={prop.name} className=\"p-3 bg-muted rounded-lg\">\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1\">\n                                    <h5 className=\"font-mono text-sm font-medium\">{prop.name}</h5>\n                                    <p className=\"text-xs text-muted-foreground mt-1\">{prop.description}</p>\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      {prop.type}\n                                    </Badge>\n                                    {prop.required && (\n                                      <Badge variant=\"destructive\" className=\"ml-1 text-xs\">\n                                        Required\n                                      </Badge>\n                                    )}\n                                  </div>\n                                </div>\n                                {prop.default !== undefined && (\n                                  <p className=\"text-xs text-muted-foreground mt-2\">\n                                    Default: <code className=\"bg-background px-1 rounded\">{JSON.stringify(prop.default)}</code>\n                                  </p>\n                                )}\n                                {(prop.min !== undefined || prop.max !== undefined) && (\n                                  <p className=\"text-xs text-muted-foreground mt-1\">\n                                    Range: {prop.min ?? '∞'} to {prop.max ?? '∞'}\n                                  </p>\n                                )}\n                                {prop.options && (\n                                  <div className=\"mt-2\">\n                                    <p className=\"text-xs text-muted-foreground mb-1\">Options:</p>\n                                    <div className=\"flex flex-wrap gap-1\">\n                                      {prop.options.map(option => (\n                                        <Badge key={option} variant=\"outline\" className=\"text-xs\">\n                                          {option}\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground\">No configurable properties</p>\n                        )}\n                      </TabsContent>\n\n                      <TabsContent value=\"example\" className=\"space-y-3\">\n                        {selectedComponent.example ? (\n                          <div>\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h5 className=\"font-medium\">Usage Example</h5>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => copyToClipboard(selectedComponent.example!, `${selectedComponent.name} example`)}\n                                data-testid=\"button-copy-example\"\n                              >\n                                <Copy size={14} className=\"mr-1\" />\n                                Copy\n                              </Button>\n                            </div>\n                            <CodePreview code={selectedComponent.example} language=\"json\" />\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground\">No example available</p>\n                        )}\n                      </TabsContent>\n\n                      <TabsContent value=\"details\" className=\"space-y-3\">\n                        <div className=\"space-y-3\">\n                          {selectedComponent.dependencies && selectedComponent.dependencies.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Dependencies</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.dependencies.map(dep => (\n                                  <Badge key={dep} variant=\"outline\" className=\"text-xs\">\n                                    {dep}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {selectedComponent.conflicts && selectedComponent.conflicts.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Conflicts With</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.conflicts.map(conflict => (\n                                  <Badge key={conflict} variant=\"destructive\" className=\"text-xs\">\n                                    {conflict}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {selectedComponent.keywords.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Keywords</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.keywords.map(keyword => (\n                                  <Badge key={keyword} variant=\"secondary\" className=\"text-xs\">\n                                    {keyword}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {selectedComponent.documentation && (\n                      <div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n                          <a \n                            href={selectedComponent.documentation} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            data-testid=\"button-view-docs\"\n                          >\n                            <ExternalLink size={14} className=\"mr-2\" />\n                            View Official Documentation\n                          </a>\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card>\n                  <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n                    <Search size={48} className=\"text-muted-foreground mb-4\" />\n                    <h3 className=\"font-medium text-foreground mb-2\">Select a Component</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Choose a component from the list to view its documentation and examples\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Quick Reference */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Quick Reference</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3 text-sm\">\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Essential Components</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• minecraft:unit_cube - Standard cube shape</li>\n                      <li>• minecraft:material_instances - Textures</li>\n                      <li>• minecraft:destructible_by_mining - Mining</li>\n                      <li>• minecraft:map_color - Color on maps</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Advanced Features</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• minecraft:geometry - Custom shapes</li>\n                      <li>• minecraft:block_light_emission - Light source</li>\n                      <li>• minecraft:on_interact - Player interaction</li>\n                      <li>• minecraft:ticking - Active behavior</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Development Tips</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• Start with unit_cube for simple blocks</li>\n                      <li>• Test collision boxes thoroughly</li>\n                      <li>• Use appropriate render methods</li>\n                      <li>• Consider performance for complex geometry</li>\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Tutorials Tab */}\n        <TabsContent value=\"tutorials\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Choose a Tutorial</h3>\n              {Object.entries(tutorials).map(([key, tutorial]) => (\n                <Card\n                  key={key}\n                  className={`cursor-pointer transition-colors ${selectedTutorial === key ? 'border-primary' : ''}`}\n                  onClick={() => setSelectedTutorial(key)}\n                  data-testid={`tutorial-${key}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">{tutorial.title}</h4>\n                      <Badge \n                        variant={tutorial.difficulty === 'beginner' ? 'secondary' : \n                                tutorial.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                        className=\"text-xs\"\n                      >\n                        {tutorial.difficulty}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{tutorial.description}</p>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <Clock size={12} />\n                      <span>{tutorial.estimatedTime}</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <div className=\"lg:col-span-2\">\n              {tutorials[selectedTutorial as keyof typeof tutorials] && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span>{tutorials[selectedTutorial as keyof typeof tutorials].title}</span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(\n                          tutorials[selectedTutorial as keyof typeof tutorials].code,\n                          tutorials[selectedTutorial as keyof typeof tutorials].title\n                        )}\n                        data-testid=\"button-copy-tutorial\"\n                      >\n                        <Copy size={14} className=\"mr-1\" />\n                        Copy\n                      </Button>\n                    </CardTitle>\n                    <CardDescription>\n                      {tutorials[selectedTutorial as keyof typeof tutorials].description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge \n                        variant={tutorials[selectedTutorial as keyof typeof tutorials].difficulty === 'beginner' ? 'secondary' : \n                                tutorials[selectedTutorial as keyof typeof tutorials].difficulty === 'intermediate' ? 'default' : 'destructive'}\n                      >\n                        {tutorials[selectedTutorial as keyof typeof tutorials].difficulty}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                        <Clock size={12} />\n                        {tutorials[selectedTutorial as keyof typeof tutorials].estimatedTime}\n                      </Badge>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Components Used</h5>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {tutorials[selectedTutorial as keyof typeof tutorials].components.map(component => (\n                          <Badge key={component} variant=\"outline\" className=\"text-xs\">\n                            {component}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Complete Block Definition</h5>\n                      <CodePreview \n                        code={tutorials[selectedTutorial as keyof typeof tutorials].code} \n                        language=\"json\" \n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Block Patterns Tab */}\n        <TabsContent value=\"patterns\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {blockPatterns.map((pattern, index) => {\n              const IconComponent = pattern.icon;\n              return (\n                <Card key={index}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <IconComponent className=\"mr-2\" size={20} />\n                      {pattern.title}\n                    </CardTitle>\n                    <CardDescription>{pattern.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <p className=\"text-sm text-muted-foreground\">{pattern.usage}</p>\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Key Components:</h5>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {pattern.components.map(component => (\n                          <Badge key={component} variant=\"outline\" className=\"text-xs\">\n                            {component}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Best Practices Tab */}\n        <TabsContent value=\"best-practices\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-green-600 dark:text-green-400\">✅ Best Practices</CardTitle>\n                <CardDescription>Follow these guidelines for optimal block design</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <ul className=\"text-sm space-y-2\">\n                  <li>• Use descriptive and unique identifiers</li>\n                  <li>• Set appropriate mining times for game balance</li>\n                  <li>• Include proper explosion resistance values</li>\n                  <li>• Use consistent texture naming conventions</li>\n                  <li>• Test collision boxes with player movement</li>\n                  <li>• Consider performance impact of custom geometry</li>\n                  <li>• Include map_color for minimap appearance</li>\n                  <li>• Use proper render methods for transparency</li>\n                  <li>• Test with different resource packs</li>\n                  <li>• Document block states and interactions</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-red-600 dark:text-red-400\">❌ Common Mistakes</CardTitle>\n                <CardDescription>Avoid these common pitfalls in block development</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <ul className=\"text-sm space-y-2\">\n                  <li>• Forgetting to set mining properties</li>\n                  <li>• Using generic identifiers that conflict</li>\n                  <li>• Oversized collision boxes affecting gameplay</li>\n                  <li>• Missing texture references causing errors</li>\n                  <li>• Inappropriate light emission values</li>\n                  <li>• Complex geometry without performance testing</li>\n                  <li>• Not considering block placement rules</li>\n                  <li>• Inconsistent block state management</li>\n                  <li>• Overusing experimental features</li>\n                  <li>• Skipping compatibility testing</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Lightbulb className=\"mr-2\" size={20} />\n                Performance Optimization\n              </CardTitle>\n              <CardDescription>Guidelines for maintaining good performance</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div>\n                  <h5 className=\"font-medium text-blue-600 dark:text-blue-400 mb-3\">Geometry</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Keep polygon count reasonable</li>\n                    <li>• Use unit_cube when possible</li>\n                    <li>• Optimize complex models</li>\n                    <li>• Consider LOD for distant blocks</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium text-green-600 dark:text-green-400 mb-3\">Textures</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Use appropriate resolutions</li>\n                    <li>• Minimize unique textures</li>\n                    <li>• Optimize file sizes</li>\n                    <li>• Reuse existing textures</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium text-purple-600 dark:text-purple-400 mb-3\">Behavior</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Minimize ticking blocks</li>\n                    <li>• Optimize event handling</li>\n                    <li>• Use efficient state changes</li>\n                    <li>• Avoid unnecessary calculations</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </section>\n  );\n}","size_bytes":44225},"client/src/components/Documentation/CoreConcepts.tsx":{"content":"import { useState } from \"react\";\nimport { \n  ChevronRight, BookOpen, FileText, Code, Layers, ArrowRight, Copy, Search, \n  Package, FolderTree, Settings, Play, CheckCircle, AlertCircle, \n  Download, Upload, Zap, BookmarkPlus, Eye, Lightbulb\n} from \"lucide-react\";\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection, CollapsibleGroup } from \"@/components/ui/collapsible-section\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\ninterface CoreConceptsProps {\n  onNavigate: (section: string) => void;\n}\n\nexport default function CoreConcepts({ onNavigate }: CoreConceptsProps) {\n  const [readingProgress, setReadingProgress] = useState(0);\n  const [expandedSections, setExpandedSections] = useState<string[]>(['getting-started']);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDifficulty, setSelectedDifficulty] = useState<'beginner' | 'intermediate' | 'advanced'>('beginner');\n  const { toast } = useToast();\n  \n  // Table of contents - moved before useCollapsible to avoid hoisting issues\n  const tableOfContents = [\n    { \n      id: 'getting-started', \n      title: '1. Getting Started', \n      difficulty: 'beginner' as const,\n      icon: Play,\n      completed: false,\n      description: 'Introduction to Minecraft Bedrock addon development'\n    },\n    { \n      id: 'addon-structure', \n      title: '2. Addon Architecture', \n      difficulty: 'beginner' as const,\n      icon: FolderTree,\n      completed: false,\n      description: 'Understanding the file structure and organization'\n    },\n    { \n      id: 'behavior-vs-resource', \n      title: '3. Behavior vs Resource Packs', \n      difficulty: 'beginner' as const,\n      icon: Package,\n      completed: false,\n      description: 'Key differences and when to use each pack type'\n    },\n    { \n      id: 'manifests', \n      title: '4. Manifest Files', \n      difficulty: 'beginner' as const,\n      icon: FileText,\n      completed: false,\n      description: 'Configuration and metadata for your addons'\n    },\n    { \n      id: 'identifiers', \n      title: '5. Identifiers & Namespaces', \n      difficulty: 'intermediate' as const,\n      icon: Code,\n      completed: false,\n      description: 'Proper naming conventions and conflict prevention'\n    },\n    { \n      id: 'components-system', \n      title: '6. Component System', \n      difficulty: 'intermediate' as const,\n      icon: Layers,\n      completed: false,\n      description: 'How components work across entities, blocks, and items'\n    },\n    { \n      id: 'events-scripting', \n      title: '7. Events & Scripting', \n      difficulty: 'intermediate' as const,\n      icon: Zap,\n      completed: false,\n      description: 'Event handling and script integration'\n    },\n    { \n      id: 'development-workflow', \n      title: '8. Development Workflow', \n      difficulty: 'intermediate' as const,\n      icon: Settings,\n      completed: false,\n      description: 'Testing, debugging, and deployment strategies'\n    },\n    { \n      id: 'version-compatibility', \n      title: '9. Version Management', \n      difficulty: 'advanced' as const,\n      icon: BookmarkPlus,\n      completed: false,\n      description: 'Format versions and backward compatibility'\n    },\n    { \n      id: 'best-practices', \n      title: '10. Best Practices', \n      difficulty: 'advanced' as const,\n      icon: Lightbulb,\n      completed: false,\n      description: 'Performance optimization and advanced techniques'\n    },\n  ];\n\n  // Enhanced collapsible functionality\n  const collapsibleSections = useCollapsible({\n    storageKey: 'core-concepts',\n    defaultCollapsed: false,\n    initialSections: tableOfContents.map(item => item.id)\n  });\n\n  const toggleSection = (sectionId: string) => {\n    setExpandedSections(prev => \n      prev.includes(sectionId) \n        ? prev.filter(id => id !== sectionId)\n        : [...prev, sectionId]\n    );\n  };\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const filteredContents = tableOfContents.filter(item => {\n    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDifficulty = selectedDifficulty === 'beginner' ? true : \n                             selectedDifficulty === 'intermediate' ? item.difficulty !== 'beginner' :\n                             item.difficulty === 'advanced';\n    return matchesSearch && matchesDifficulty;\n  });\n\n  const quickStartExamples = {\n    manifestBehavior: `{\n  \"format_version\": 2,\n  \"header\": {\n    \"description\": \"My First Addon - Behavior Pack\",\n    \"name\": \"My First Addon BP\",\n    \"uuid\": \"12345678-1234-5678-9012-123456789012\",\n    \"version\": [1, 0, 0],\n    \"min_engine_version\": [1, 21, 0]\n  },\n  \"modules\": [\n    {\n      \"description\": \"Behavior Pack Module\",\n      \"type\": \"data\",\n      \"uuid\": \"87654321-4321-8765-2109-876543210987\",\n      \"version\": [1, 0, 0]\n    }\n  ],\n  \"dependencies\": [\n    {\n      \"description\": \"My First Addon Resource Pack\",\n      \"uuid\": \"abcdefab-abcd-efab-cdef-abcdefabcdef\",\n      \"version\": [1, 0, 0]\n    }\n  ]\n}`,\n    manifestResource: `{\n  \"format_version\": 2,\n  \"header\": {\n    \"description\": \"My First Addon - Resource Pack\",\n    \"name\": \"My First Addon RP\",\n    \"uuid\": \"abcdefab-abcd-efab-cdef-abcdefabcdef\",\n    \"version\": [1, 0, 0],\n    \"min_engine_version\": [1, 21, 0]\n  },\n  \"modules\": [\n    {\n      \"description\": \"Resource Pack Module\",\n      \"type\": \"resources\",\n      \"uuid\": \"fedcbaef-dcba-fead-bcef-fedcbafedcba\",\n      \"version\": [1, 0, 0]\n    }\n  ]\n}`,\n    simpleEntity: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:friendly_robot\",\n      \"is_spawnable\": true,\n      \"is_summonable\": true,\n      \"is_experimental\": false\n    },\n    \"components\": {\n      \"minecraft:health\": {\n        \"value\": 20,\n        \"max\": 20\n      },\n      \"minecraft:collision_box\": {\n        \"width\": 0.6,\n        \"height\": 1.8\n      },\n      \"minecraft:movement\": {\n        \"value\": 0.25\n      },\n      \"minecraft:navigation.walk\": {\n        \"can_path_over_water\": false,\n        \"avoid_water\": true\n      },\n      \"minecraft:movement.basic\": {},\n      \"minecraft:jump.static\": {\n        \"jump_power\": 0.42\n      },\n      \"minecraft:physics\": {},\n      \"minecraft:pushable\": {\n        \"is_pushable\": true,\n        \"is_pushable_by_piston\": true\n      }\n    },\n    \"component_groups\": {\n      \"my_addon:friendly_mode\": {\n        \"minecraft:behavior.look_at_player\": {\n          \"priority\": 7,\n          \"look_distance\": 6.0\n        },\n        \"minecraft:behavior.random_stroll\": {\n          \"priority\": 6,\n          \"speed_multiplier\": 1.0\n        }\n      }\n    },\n    \"events\": {\n      \"minecraft:entity_spawned\": {\n        \"add\": {\n          \"component_groups\": [\"my_addon:friendly_mode\"]\n        }\n      }\n    }\n  }\n}`,\n    simpleBlock: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_ore\",\n      \"menu_category\": {\n        \"category\": \"nature\"\n      }\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 3.0\n      },\n      \"minecraft:destructible_by_explosion\": {\n        \"explosion_resistance\": 6.0\n      },\n      \"minecraft:friction\": 0.6,\n      \"minecraft:map_color\": \"#4A4A4A\",\n      \"minecraft:material_instances\": {\n        \"*\": {\n          \"texture\": \"custom_ore\",\n          \"render_method\": \"opaque\"\n        }\n      },\n      \"minecraft:geometry\": \"minecraft:geometry.full_block\"\n    }\n  }\n}`,\n    simpleItem: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:energy_crystal\",\n      \"menu_category\": {\n        \"category\": \"items\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 64,\n      \"minecraft:icon\": {\n        \"texture\": \"energy_crystal\"\n      },\n      \"minecraft:display_name\": {\n        \"value\": \"Energy Crystal\"\n      },\n      \"minecraft:use_animation\": \"bow\",\n      \"minecraft:use_duration\": 32,\n      \"minecraft:food\": {\n        \"nutrition\": 0,\n        \"saturation_modifier\": 0,\n        \"can_always_eat\": true,\n        \"effects\": [\n          {\n            \"name\": \"speed\",\n            \"chance\": 1.0,\n            \"duration\": 300,\n            \"amplifier\": 1\n          }\n        ]\n      }\n    }\n  }\n}`\n  };\n\n  return (\n    <section className=\"p-6 max-w-7xl mx-auto\" data-testid=\"core-concepts\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold text-foreground mb-4\">Core Concepts</h1>\n        <p className=\"text-xl text-muted-foreground mb-6\">\n          Master the fundamentals of Minecraft: Bedrock Edition addon development\n        </p>\n        \n        {/* Search and Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n              <Input\n                placeholder=\"Search concepts and topics...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-concept-search\"\n              />\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant={selectedDifficulty === 'beginner' ? 'default' : 'outline'}\n              onClick={() => setSelectedDifficulty('beginner')}\n              size=\"sm\"\n              data-testid=\"button-difficulty-beginner\"\n            >\n              Beginner\n            </Button>\n            <Button\n              variant={selectedDifficulty === 'intermediate' ? 'default' : 'outline'}\n              onClick={() => setSelectedDifficulty('intermediate')}\n              size=\"sm\"\n              data-testid=\"button-difficulty-intermediate\"\n            >\n              Intermediate\n            </Button>\n            <Button\n              variant={selectedDifficulty === 'advanced' ? 'default' : 'outline'}\n              onClick={() => setSelectedDifficulty('advanced')}\n              size=\"sm\"\n              data-testid=\"button-difficulty-advanced\"\n            >\n              Advanced\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-4 gap-8\">\n        {/* Table of Contents Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"sticky top-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <BookOpen className=\"mr-2\" size={20} />\n                Table of Contents\n              </CardTitle>\n              <CardDescription>\n                Navigate through core concepts\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              {filteredContents.map((item) => {\n                const IconComponent = item.icon;\n                return (\n                  <button\n                    key={item.id}\n                    onClick={() => toggleSection(item.id)}\n                    className={`w-full text-left p-3 rounded-lg border transition-all hover:bg-muted ${\n                      expandedSections.includes(item.id) ? 'bg-muted border-primary' : 'border-border'\n                    }`}\n                    data-testid={`button-section-${item.id}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <IconComponent className=\"mt-0.5 flex-shrink-0\" size={16} />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium text-sm\">{item.title}</span>\n                          <Badge \n                            variant={item.difficulty === 'beginner' ? 'secondary' : \n                                    item.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                            className=\"text-xs\"\n                          >\n                            {item.difficulty}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {item.description}\n                        </p>\n                      </div>\n                      {item.completed && <CheckCircle className=\"text-green-500 flex-shrink-0\" size={16} />}\n                    </div>\n                  </button>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-3 space-y-8\">\n          {/* Getting Started Section */}\n          {expandedSections.includes('getting-started') && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Play className=\"mr-2\" size={20} />\n                  Getting Started with Bedrock Addons\n                </CardTitle>\n                <CardDescription>\n                  Your journey into Minecraft Bedrock addon development begins here\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"prose max-w-none\">\n                  <h3 className=\"text-xl font-semibold mb-4\">What are Minecraft Bedrock Addons?</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Minecraft Bedrock addons are powerful modification packages that allow you to customize \n                    and extend the game experience. Unlike Java Edition mods, Bedrock addons work across \n                    all platforms including mobile, console, and Windows 10.\n                  </p>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-4 my-6\">\n                    <Card className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2 flex items-center\">\n                        <Package className=\"mr-2\" size={16} />\n                        What You Can Create\n                      </h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        <li>• Custom entities with unique behaviors</li>\n                        <li>• New blocks with special properties</li>\n                        <li>• Custom items, tools, and weapons</li>\n                        <li>• Interactive gameplay mechanics</li>\n                        <li>• Custom textures and models</li>\n                        <li>• Scripted behaviors and events</li>\n                      </ul>\n                    </Card>\n                    \n                    <Card className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2 flex items-center\">\n                        <Settings className=\"mr-2\" size={16} />\n                        Development Tools\n                      </h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        <li>• Visual Studio Code (recommended)</li>\n                        <li>• Blockbench for 3D models</li>\n                        <li>• Bridge. addon editor</li>\n                        <li>• Minecraft Education Edition</li>\n                        <li>• Bedrock Dedicated Server</li>\n                        <li>• This Creator Suite!</li>\n                      </ul>\n                    </Card>\n                  </div>\n\n                  <h3 className=\"text-xl font-semibold mb-4\">Quick Start: Your First 5 Minutes</h3>\n                  <div className=\"bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-4\">\n                    <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">Prerequisites</h4>\n                    <ul className=\"text-blue-800 dark:text-blue-200 text-sm space-y-1\">\n                      <li>• Minecraft Bedrock Edition (any platform)</li>\n                      <li>• Basic understanding of JSON format</li>\n                      <li>• Text editor (VS Code recommended)</li>\n                      <li>• Willingness to experiment and learn!</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Addon Structure Section */}\n          {expandedSections.includes('addon-structure') && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FolderTree className=\"mr-2\" size={20} />\n                  Addon Architecture & File Structure\n                </CardTitle>\n                <CardDescription>\n                  Understanding how addons are organized and structured\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <Tabs defaultValue=\"overview\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-3\">\n                    <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                    <TabsTrigger value=\"behavior-pack\">Behavior Pack</TabsTrigger>\n                    <TabsTrigger value=\"resource-pack\">Resource Pack</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"overview\" className=\"space-y-4\">\n                    <h3 className=\"text-xl font-semibold\">Complete Addon Structure</h3>\n                    <div className=\"bg-slate-50 dark:bg-slate-900/50 p-4 rounded-lg font-mono text-sm\">\n                      <div className=\"space-y-1\">\n                        <div>📁 My_Awesome_Addon/</div>\n                        <div className=\"ml-4\">📁 behavior_packs/</div>\n                        <div className=\"ml-8\">📁 My_Awesome_Addon_BP/</div>\n                        <div className=\"ml-12\">📄 manifest.json</div>\n                        <div className=\"ml-12\">📁 entities/</div>\n                        <div className=\"ml-16\">📄 custom_mob.json</div>\n                        <div className=\"ml-12\">📁 blocks/</div>\n                        <div className=\"ml-16\">📄 custom_block.json</div>\n                        <div className=\"ml-12\">📁 items/</div>\n                        <div className=\"ml-16\">📄 custom_item.json</div>\n                        <div className=\"ml-12\">📁 scripts/</div>\n                        <div className=\"ml-16\">📄 main.js</div>\n                        <div className=\"ml-12\">📁 spawn_rules/</div>\n                        <div className=\"ml-12\">📁 loot_tables/</div>\n                        <div className=\"ml-12\">📁 recipes/</div>\n                        <div className=\"ml-4\">📁 resource_packs/</div>\n                        <div className=\"ml-8\">📁 My_Awesome_Addon_RP/</div>\n                        <div className=\"ml-12\">📄 manifest.json</div>\n                        <div className=\"ml-12\">📁 textures/</div>\n                        <div className=\"ml-16\">📁 entity/</div>\n                        <div className=\"ml-16\">📁 blocks/</div>\n                        <div className=\"ml-16\">📁 items/</div>\n                        <div className=\"ml-12\">📁 models/</div>\n                        <div className=\"ml-16\">📁 entity/</div>\n                        <div className=\"ml-12\">📁 sounds/</div>\n                        <div className=\"ml-12\">📁 animations/</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <Card className=\"p-4\">\n                        <h4 className=\"font-semibold mb-2 text-blue-600 dark:text-blue-400\">Behavior Pack (BP)</h4>\n                        <p className=\"text-sm text-muted-foreground mb-3\">Defines HOW things work</p>\n                        <ul className=\"text-sm space-y-1\">\n                          <li>• Entity behaviors and AI</li>\n                          <li>• Block functionality</li>\n                          <li>• Item mechanics</li>\n                          <li>• Game logic and scripts</li>\n                          <li>• Spawn rules and loot tables</li>\n                        </ul>\n                      </Card>\n                      \n                      <Card className=\"p-4\">\n                        <h4 className=\"font-semibold mb-2 text-green-600 dark:text-green-400\">Resource Pack (RP)</h4>\n                        <p className=\"text-sm text-muted-foreground mb-3\">Defines HOW things look and sound</p>\n                        <ul className=\"text-sm space-y-1\">\n                          <li>• Textures and materials</li>\n                          <li>• 3D models and animations</li>\n                          <li>• Sounds and music</li>\n                          <li>• UI elements</li>\n                          <li>• Visual effects</li>\n                        </ul>\n                      </Card>\n                    </div>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"behavior-pack\" className=\"space-y-4\">\n                    <h3 className=\"text-xl font-semibold\">Behavior Pack Deep Dive</h3>\n                    <p className=\"text-muted-foreground\">\n                      The behavior pack controls all the functional aspects of your addon - the game logic, \n                      mechanics, and how entities, blocks, and items behave.\n                    </p>\n                    \n                    <Accordion type=\"multiple\" className=\"w-full\">\n                      <AccordionItem value=\"entities\">\n                        <AccordionTrigger>entities/ - Custom Mob Definitions</AccordionTrigger>\n                        <AccordionContent>\n                          <p className=\"mb-3\">Define custom entities with components, behaviors, and events.</p>\n                          <div className=\"bg-slate-50 dark:bg-slate-900/50 p-3 rounded text-sm\">\n                            <strong>Example files:</strong><br/>\n                            • friendly_robot.json - Custom friendly NPC<br/>\n                            • fire_dragon.json - Boss mob with special abilities<br/>\n                            • magic_sheep.json - Modified vanilla mob\n                          </div>\n                        </AccordionContent>\n                      </AccordionItem>\n                      \n                      <AccordionItem value=\"blocks\">\n                        <AccordionTrigger>blocks/ - Custom Block Behaviors</AccordionTrigger>\n                        <AccordionContent>\n                          <p className=\"mb-3\">Define how custom blocks function, their properties, and interactions.</p>\n                          <div className=\"bg-slate-50 dark:bg-slate-900/50 p-3 rounded text-sm\">\n                            <strong>Key features:</strong><br/>\n                            • Destructibility and hardness<br/>\n                            • Material properties<br/>\n                            • Custom geometry and collision<br/>\n                            • Block states and transitions\n                          </div>\n                        </AccordionContent>\n                      </AccordionItem>\n                      \n                      <AccordionItem value=\"scripts\">\n                        <AccordionTrigger>scripts/ - TypeScript/JavaScript Logic</AccordionTrigger>\n                        <AccordionContent>\n                          <p className=\"mb-3\">Advanced scripting for complex behaviors and game mechanics.</p>\n                          <div className=\"bg-slate-50 dark:bg-slate-900/50 p-3 rounded text-sm\">\n                            <strong>Script capabilities:</strong><br/>\n                            • Event handling and custom events<br/>\n                            • Player interaction systems<br/>\n                            • World manipulation<br/>\n                            • UI creation and management<br/>\n                            • Complex game mechanics\n                          </div>\n                        </AccordionContent>\n                      </AccordionItem>\n                    </Accordion>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"resource-pack\" className=\"space-y-4\">\n                    <h3 className=\"text-xl font-semibold\">Resource Pack Deep Dive</h3>\n                    <p className=\"text-muted-foreground\">\n                      The resource pack provides all visual and audio assets that make your addon come to life.\n                    </p>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <Card className=\"p-4\">\n                        <h4 className=\"font-semibold mb-2\">Visual Assets</h4>\n                        <ul className=\"text-sm space-y-1\">\n                          <li>• <strong>textures/</strong> - PNG images for entities, blocks, items</li>\n                          <li>• <strong>models/</strong> - 3D geometry files (.geo.json)</li>\n                          <li>• <strong>animations/</strong> - Movement and state animations</li>\n                          <li>• <strong>ui/</strong> - Interface elements and HUD</li>\n                        </ul>\n                      </Card>\n                      \n                      <Card className=\"p-4\">\n                        <h4 className=\"font-semibold mb-2\">Audio Assets</h4>\n                        <ul className=\"text-sm space-y-1\">\n                          <li>• <strong>sounds/</strong> - WAV/OGG sound effects</li>\n                          <li>• <strong>music/</strong> - Background music tracks</li>\n                          <li>• <strong>sound_definitions.json</strong> - Audio mapping</li>\n                        </ul>\n                      </Card>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Behavior vs Resource Packs */}\n          {expandedSections.includes('behavior-vs-resource') && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"mr-2\" size={20} />\n                  Behavior vs Resource Packs\n                </CardTitle>\n                <CardDescription>\n                  Understanding the key differences and when to use each type\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <Card className=\"border-blue-200 dark:border-blue-800\">\n                    <CardHeader className=\"bg-blue-50 dark:bg-blue-950/30\">\n                      <CardTitle className=\"text-blue-900 dark:text-blue-100 flex items-center\">\n                        <Code className=\"mr-2\" size={20} />\n                        Behavior Pack\n                      </CardTitle>\n                      <CardDescription className=\"text-blue-700 dark:text-blue-300\">\n                        The \"brain\" of your addon - defines functionality\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"pt-4\">\n                      <h4 className=\"font-semibold mb-3\">What it contains:</h4>\n                      <ul className=\"space-y-2 text-sm\">\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Entity behaviors and AI</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Block functionality</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Item mechanics</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Scripting logic</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Loot tables & recipes</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Spawn rules</li>\n                      </ul>\n                      \n                      <h4 className=\"font-semibold mt-4 mb-2\">File extensions:</h4>\n                      <div className=\"bg-slate-100 dark:bg-slate-800 p-2 rounded text-xs font-mono\">\n                        .json (entities, blocks, items)<br/>\n                        .js/.ts (scripts)<br/>\n                        .mcfunction (functions)\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"border-green-200 dark:border-green-800\">\n                    <CardHeader className=\"bg-green-50 dark:bg-green-950/30\">\n                      <CardTitle className=\"text-green-900 dark:text-green-100 flex items-center\">\n                        <Eye className=\"mr-2\" size={20} />\n                        Resource Pack\n                      </CardTitle>\n                      <CardDescription className=\"text-green-700 dark:text-green-300\">\n                        The \"appearance\" of your addon - defines visuals and audio\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"pt-4\">\n                      <h4 className=\"font-semibold mb-3\">What it contains:</h4>\n                      <ul className=\"space-y-2 text-sm\">\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Textures (PNG images)</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> 3D models and geometry</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Animations</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Sound effects</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> UI elements</li>\n                        <li className=\"flex items-center\"><CheckCircle className=\"mr-2 text-green-500\" size={16} /> Particle effects</li>\n                      </ul>\n                      \n                      <h4 className=\"font-semibold mt-4 mb-2\">File extensions:</h4>\n                      <div className=\"bg-slate-100 dark:bg-slate-800 p-2 rounded text-xs font-mono\">\n                        .png (textures)<br/>\n                        .geo.json (models)<br/>\n                        .animation.json (animations)<br/>\n                        .wav/.ogg (sounds)\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n                \n                <div className=\"bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-800 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-amber-900 dark:text-amber-100 mb-2 flex items-center\">\n                    <Lightbulb className=\"mr-2\" size={16} />\n                    Pro Tip: Pack Dependencies\n                  </h4>\n                  <p className=\"text-amber-800 dark:text-amber-200 text-sm\">\n                    Most addons use BOTH pack types. The behavior pack references resources from the resource pack, \n                    and they're linked together through the manifest dependencies. You can distribute them separately \n                    or bundle them together.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Manifest Files */}\n          {expandedSections.includes('manifests') && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"mr-2\" size={20} />\n                  Manifest Files\n                </CardTitle>\n                <CardDescription>\n                  Configuration and metadata that define your addon\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"prose max-w-none\">\n                  <p className=\"text-muted-foreground\">\n                    The manifest.json file is the heart of every addon pack. It tells Minecraft what your \n                    addon is, what it does, and how it should be loaded.\n                  </p>\n                </div>\n                \n                <Tabs defaultValue=\"behavior\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-3\">\n                    <TabsTrigger value=\"behavior\">Behavior Pack</TabsTrigger>\n                    <TabsTrigger value=\"resource\">Resource Pack</TabsTrigger>\n                    <TabsTrigger value=\"explained\">Field Explanations</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"behavior\" className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold\">Behavior Pack Manifest</h3>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(quickStartExamples.manifestBehavior, \"Behavior Pack Manifest\")}\n                        data-testid=\"button-copy-manifest-behavior\"\n                      >\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy\n                      </Button>\n                    </div>\n                    <CodePreview\n                      code={quickStartExamples.manifestBehavior}\n                      language=\"json\"\n                      title=\"manifest.json (Behavior Pack)\"\n                    />\n                  </TabsContent>\n                  \n                  <TabsContent value=\"resource\" className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold\">Resource Pack Manifest</h3>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(quickStartExamples.manifestResource, \"Resource Pack Manifest\")}\n                        data-testid=\"button-copy-manifest-resource\"\n                      >\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy\n                      </Button>\n                    </div>\n                    <CodePreview\n                      code={quickStartExamples.manifestResource}\n                      language=\"json\"\n                      title=\"manifest.json (Resource Pack)\"\n                    />\n                  </TabsContent>\n                  \n                  <TabsContent value=\"explained\" className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Manifest Field Explanations</h3>\n                    \n                    <Accordion type=\"multiple\" className=\"w-full\">\n                      <AccordionItem value=\"format-version\">\n                        <AccordionTrigger>format_version</AccordionTrigger>\n                        <AccordionContent>\n                          <p className=\"mb-2\">Specifies the manifest format version. Always use <code>2</code> for modern addons.</p>\n                          <div className=\"bg-slate-50 dark:bg-slate-900/50 p-3 rounded text-sm\">\n                            <strong>Current version:</strong> 2<br/>\n                            <strong>Legacy version:</strong> 1 (deprecated)\n                          </div>\n                        </AccordionContent>\n                      </AccordionItem>\n                      \n                      <AccordionItem value=\"header\">\n                        <AccordionTrigger>header</AccordionTrigger>\n                        <AccordionContent>\n                          <div className=\"space-y-3\">\n                            <p>Contains basic information about your addon:</p>\n                            <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                              <li><strong>name:</strong> Display name (shown in-game)</li>\n                              <li><strong>description:</strong> Brief description of the addon</li>\n                              <li><strong>uuid:</strong> Unique identifier (generate with online tools)</li>\n                              <li><strong>version:</strong> Version array [major, minor, patch]</li>\n                              <li><strong>min_engine_version:</strong> Minimum Minecraft version required</li>\n                            </ul>\n                          </div>\n                        </AccordionContent>\n                      </AccordionItem>\n                      \n                      <AccordionItem value=\"modules\">\n                        <AccordionTrigger>modules</AccordionTrigger>\n                        <AccordionContent>\n                          <p className=\"mb-3\">Defines what type of content this pack contains:</p>\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div className=\"bg-blue-50 dark:bg-blue-950/30 p-3 rounded\">\n                              <strong className=\"text-blue-900 dark:text-blue-100\">data</strong><br/>\n                              <span className=\"text-blue-700 dark:text-blue-300\">Behavior pack content</span>\n                            </div>\n                            <div className=\"bg-green-50 dark:bg-green-950/30 p-3 rounded\">\n                              <strong className=\"text-green-900 dark:text-green-100\">resources</strong><br/>\n                              <span className=\"text-green-700 dark:text-green-300\">Resource pack content</span>\n                            </div>\n                          </div>\n                        </AccordionContent>\n                      </AccordionItem>\n                      \n                      <AccordionItem value=\"dependencies\">\n                        <AccordionTrigger>dependencies (optional)</AccordionTrigger>\n                        <AccordionContent>\n                          <p className=\"mb-2\">Links this pack to other required packs. Commonly used to link behavior and resource packs together.</p>\n                          <div className=\"bg-slate-50 dark:bg-slate-900/50 p-3 rounded text-sm\">\n                            Each dependency needs:<br/>\n                            • uuid of the required pack<br/>\n                            • version of the required pack\n                          </div>\n                        </AccordionContent>\n                      </AccordionItem>\n                    </Accordion>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Quick Start Examples */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Zap className=\"mr-2\" size={20} />\n                Quick Start Examples\n              </CardTitle>\n              <CardDescription>\n                Ready-to-use examples to get you started immediately\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"entity\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"entity\">Simple Entity</TabsTrigger>\n                  <TabsTrigger value=\"block\">Custom Block</TabsTrigger>\n                  <TabsTrigger value=\"item\">Magic Item</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"entity\" className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">Friendly Robot Entity</h3>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(quickStartExamples.simpleEntity, \"Friendly Robot Entity\")}\n                      data-testid=\"button-copy-entity\"\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy\n                    </Button>\n                  </div>\n                  <p className=\"text-muted-foreground text-sm\">\n                    A simple friendly entity that walks around and looks at players. Save as \n                    <code>behavior_packs/YourAddon/entities/friendly_robot.json</code>\n                  </p>\n                  <CodePreview\n                    code={quickStartExamples.simpleEntity}\n                    language=\"json\"\n                    title=\"entities/friendly_robot.json\"\n                  />\n                </TabsContent>\n                \n                <TabsContent value=\"block\" className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">Custom Ore Block</h3>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(quickStartExamples.simpleBlock, \"Custom Ore Block\")}\n                      data-testid=\"button-copy-block\"\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy\n                    </Button>\n                  </div>\n                  <p className=\"text-muted-foreground text-sm\">\n                    A basic custom block with mining properties. Save as \n                    <code>behavior_packs/YourAddon/blocks/custom_ore.json</code>\n                  </p>\n                  <CodePreview\n                    code={quickStartExamples.simpleBlock}\n                    language=\"json\"\n                    title=\"blocks/custom_ore.json\"\n                  />\n                </TabsContent>\n                \n                <TabsContent value=\"item\" className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">Energy Crystal Item</h3>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(quickStartExamples.simpleItem, \"Energy Crystal Item\")}\n                      data-testid=\"button-copy-item\"\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy\n                    </Button>\n                  </div>\n                  <p className=\"text-muted-foreground text-sm\">\n                    A consumable item that gives speed effect. Save as \n                    <code>behavior_packs/YourAddon/items/energy_crystal.json</code>\n                  </p>\n                  <CodePreview\n                    code={quickStartExamples.simpleItem}\n                    language=\"json\"\n                    title=\"items/energy_crystal.json\"\n                  />\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n\n          {/* Next Steps */}\n          <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/30 dark:to-purple-950/30 border-blue-200 dark:border-blue-800\">\n            <CardContent className=\"pt-6\">\n              <h3 className=\"text-xl font-semibold mb-4 text-blue-900 dark:text-blue-100\">Ready for the Next Step?</h3>\n              <p className=\"text-blue-800 dark:text-blue-200 mb-4\">\n                Now that you understand the core concepts, dive deeper into specific areas:\n              </p>\n              \n              <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex-col items-start text-left\"\n                  onClick={() => onNavigate('entities')}\n                  data-testid=\"button-navigate-entities\"\n                >\n                  <Layers className=\"mb-2\" size={20} />\n                  <div>\n                    <div className=\"font-semibold\">Entities</div>\n                    <div className=\"text-xs text-muted-foreground\">50+ components</div>\n                  </div>\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex-col items-start text-left\"\n                  onClick={() => onNavigate('blocks')}\n                  data-testid=\"button-navigate-blocks\"\n                >\n                  <Package className=\"mb-2\" size={20} />\n                  <div>\n                    <div className=\"font-semibold\">Blocks</div>\n                    <div className=\"text-xs text-muted-foreground\">25+ components</div>\n                  </div>\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex-col items-start text-left\"\n                  onClick={() => onNavigate('items')}\n                  data-testid=\"button-navigate-items\"\n                >\n                  <Package className=\"mb-2\" size={20} />\n                  <div>\n                    <div className=\"font-semibold\">Items</div>\n                    <div className=\"text-xs text-muted-foreground\">25+ components</div>\n                  </div>\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex-col items-start text-left\"\n                  onClick={() => onNavigate('scripting')}\n                  data-testid=\"button-navigate-scripting\"\n                >\n                  <Code className=\"mb-2\" size={20} />\n                  <div>\n                    <div className=\"font-semibold\">Scripting</div>\n                    <div className=\"text-xs text-muted-foreground\">476+ APIs</div>\n                  </div>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":47366},"client/src/components/Documentation/EntityDocs.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, ChevronRight, Copy, ExternalLink, Filter, BookOpen, Zap, \n  Info, Eye, Brain, Settings, Layers, Target, Shield, Heart, \n  Activity, MapPin, Users, Clock, AlertTriangle, CheckCircle, \n  Play, Pause, SkipForward, HelpCircle, Github, FileText, TrendingUp\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport { entityComponents, EntityComponent } from \"../../../../shared/entityRegistry\";\n\ninterface EntityDocsProps {\n  onNavigate?: (section: string) => void;\n}\n\nexport default function EntityDocs({ onNavigate }: EntityDocsProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedComponent, setSelectedComponent] = useState<EntityComponent | null>(null);\n  const [difficultyFilter, setDifficultyFilter] = useState<'all' | 'beginner' | 'intermediate' | 'advanced'>('all');\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\n  const [stabilityFilter, setStabilityFilter] = useState<'all' | 'stable' | 'experimental' | 'beta'>('all');\n  const [selectedTutorial, setSelectedTutorial] = useState<string>('basic-entity');\n  const { toast } = useToast();\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  // Filter components based on search and filters\n  const filteredComponents = entityComponents.filter(component => {\n    const matchesSearch = searchTerm === '' || \n      component.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      component.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      component.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesDifficulty = difficultyFilter === 'all' || component.difficulty === difficultyFilter;\n    const matchesCategory = categoryFilter === 'all' || component.category === categoryFilter;\n    const matchesStability = stabilityFilter === 'all' || component.stability === stabilityFilter;\n    \n    return matchesSearch && matchesDifficulty && matchesCategory && matchesStability;\n  });\n\n  // Group components by category\n  const componentsByCategory = filteredComponents.reduce((acc, component) => {\n    const category = component.category;\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(component);\n    return acc;\n  }, {} as Record<string, EntityComponent[]>);\n\n  // Get unique categories for filter\n  const categories = [...new Set(entityComponents.map(c => c.category))];\n  \n  // Category icons mapping\n  const categoryIcons: Record<string, React.ComponentType<{ size?: number; className?: string }>> = {\n    'Core': Heart,\n    'Combat': Shield,\n    'Movement': Activity,\n    'Behavior': Brain,\n    'Physics': Zap,\n    'Environment': MapPin,\n    'Visual': Eye,\n    'Utility': Settings,\n    'Interaction': Users,\n    'AI': Target,\n    'Health': Heart,\n    'Attributes': TrendingUp\n  };\n\n  // Tutorial examples\n  const tutorials = {\n    'basic-entity': {\n      title: 'Basic Friendly NPC',\n      description: 'Create a simple entity that walks around and looks at players',\n      difficulty: 'beginner' as const,\n      estimatedTime: '10 minutes',\n      components: ['minecraft:health', 'minecraft:movement', 'minecraft:behavior.look_at_player', 'minecraft:behavior.random_stroll'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:friendly_villager\",\n      \"is_spawnable\": true,\n      \"is_summonable\": true,\n      \"is_experimental\": false\n    },\n    \"components\": {\n      \"minecraft:health\": {\n        \"value\": 20,\n        \"max\": 20\n      },\n      \"minecraft:collision_box\": {\n        \"width\": 0.6,\n        \"height\": 1.9\n      },\n      \"minecraft:movement\": {\n        \"value\": 0.25\n      },\n      \"minecraft:navigation.walk\": {\n        \"can_path_over_water\": false,\n        \"avoid_water\": true,\n        \"can_break_doors\": false\n      },\n      \"minecraft:movement.basic\": {},\n      \"minecraft:jump.static\": {\n        \"jump_power\": 0.42\n      },\n      \"minecraft:physics\": {},\n      \"minecraft:pushable\": {\n        \"is_pushable\": true,\n        \"is_pushable_by_piston\": true\n      },\n      \"minecraft:behavior.float\": {\n        \"priority\": 0\n      },\n      \"minecraft:behavior.look_at_player\": {\n        \"priority\": 7,\n        \"look_distance\": 6.0,\n        \"probability\": 0.02\n      },\n      \"minecraft:behavior.random_stroll\": {\n        \"priority\": 6,\n        \"speed_multiplier\": 1.0\n      }\n    }\n  }\n}`\n    },\n    'combat-entity': {\n      title: 'Combat Entity with AI',\n      description: 'Create an entity that attacks hostile mobs and defends players',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '25 minutes',\n      components: ['minecraft:health', 'minecraft:attack', 'minecraft:behavior.melee_attack', 'minecraft:behavior.nearest_attackable_target'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:guardian_robot\",\n      \"is_spawnable\": true,\n      \"is_summonable\": true\n    },\n    \"components\": {\n      \"minecraft:health\": {\n        \"value\": 40,\n        \"max\": 40\n      },\n      \"minecraft:attack\": {\n        \"damage\": 6\n      },\n      \"minecraft:collision_box\": {\n        \"width\": 0.8,\n        \"height\": 2.0\n      },\n      \"minecraft:movement\": {\n        \"value\": 0.3\n      },\n      \"minecraft:navigation.walk\": {\n        \"can_path_over_water\": false,\n        \"avoid_water\": true\n      },\n      \"minecraft:movement.basic\": {},\n      \"minecraft:jump.static\": {\n        \"jump_power\": 0.42\n      },\n      \"minecraft:physics\": {},\n      \"minecraft:behavior.float\": {\n        \"priority\": 0\n      },\n      \"minecraft:behavior.melee_attack\": {\n        \"priority\": 2,\n        \"speed_multiplier\": 1.25,\n        \"track_target\": true\n      },\n      \"minecraft:behavior.nearest_attackable_target\": {\n        \"priority\": 1,\n        \"must_see\": true,\n        \"reselect_targets\": true,\n        \"entity_types\": [\n          {\n            \"filters\": {\n              \"any_of\": [\n                { \"test\": \"is_family\", \"subject\": \"other\", \"value\": \"monster\" },\n                { \"test\": \"is_family\", \"subject\": \"other\", \"value\": \"zombie\" }\n              ]\n            },\n            \"max_dist\": 16\n          }\n        ]\n      },\n      \"minecraft:behavior.follow_owner\": {\n        \"priority\": 6,\n        \"speed_multiplier\": 1.0,\n        \"start_distance\": 10,\n        \"stop_distance\": 2\n      }\n    }\n  }\n}`\n    },\n    'advanced-entity': {\n      title: 'Advanced Entity with States',\n      description: 'Create a complex entity with multiple states and behaviors',\n      difficulty: 'advanced' as const,\n      estimatedTime: '45 minutes',\n      components: ['minecraft:health', 'minecraft:variant', 'component_groups', 'events'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:elemental_spirit\",\n      \"is_spawnable\": true,\n      \"is_summonable\": true\n    },\n    \"components\": {\n      \"minecraft:health\": {\n        \"value\": 30,\n        \"max\": 30\n      },\n      \"minecraft:variant\": {\n        \"value\": 0\n      },\n      \"minecraft:collision_box\": {\n        \"width\": 0.6,\n        \"height\": 1.8\n      },\n      \"minecraft:movement\": {\n        \"value\": 0.25\n      },\n      \"minecraft:navigation.fly\": {\n        \"can_path_over_water\": true,\n        \"can_path_from_air\": true\n      },\n      \"minecraft:movement.fly\": {},\n      \"minecraft:physics\": {\n        \"has_gravity\": false\n      },\n      \"minecraft:fire_immune\": {},\n      \"minecraft:behavior.float\": {\n        \"priority\": 0\n      }\n    },\n    \"component_groups\": {\n      \"my_addon:fire_form\": {\n        \"minecraft:variant\": {\n          \"value\": 0\n        },\n        \"minecraft:on_fire\": {\n          \"fire_ticks\": 100\n        },\n        \"minecraft:attack\": {\n          \"damage\": 4,\n          \"effect_name\": \"fire_resistance\",\n          \"effect_duration\": 10\n        },\n        \"minecraft:behavior.melee_attack\": {\n          \"priority\": 2\n        }\n      },\n      \"my_addon:water_form\": {\n        \"minecraft:variant\": {\n          \"value\": 1\n        },\n        \"minecraft:attack\": {\n          \"damage\": 3,\n          \"effect_name\": \"slowness\",\n          \"effect_duration\": 5\n        },\n        \"minecraft:behavior.melee_attack\": {\n          \"priority\": 2\n        }\n      },\n      \"my_addon:earth_form\": {\n        \"minecraft:variant\": {\n          \"value\": 2\n        },\n        \"minecraft:health\": {\n          \"value\": 50,\n          \"max\": 50\n        },\n        \"minecraft:attack\": {\n          \"damage\": 7\n        },\n        \"minecraft:behavior.melee_attack\": {\n          \"priority\": 2\n        }\n      }\n    },\n    \"events\": {\n      \"minecraft:entity_spawned\": {\n        \"randomize\": [\n          {\n            \"weight\": 33,\n            \"add\": {\n              \"component_groups\": [\"my_addon:fire_form\"]\n            }\n          },\n          {\n            \"weight\": 33,\n            \"add\": {\n              \"component_groups\": [\"my_addon:water_form\"]\n            }\n          },\n          {\n            \"weight\": 34,\n            \"add\": {\n              \"component_groups\": [\"my_addon:earth_form\"]\n            }\n          }\n        ]\n      },\n      \"my_addon:transform_fire\": {\n        \"remove\": {\n          \"component_groups\": [\"my_addon:water_form\", \"my_addon:earth_form\"]\n        },\n        \"add\": {\n          \"component_groups\": [\"my_addon:fire_form\"]\n        }\n      },\n      \"my_addon:transform_water\": {\n        \"remove\": {\n          \"component_groups\": [\"my_addon:fire_form\", \"my_addon:earth_form\"]\n        },\n        \"add\": {\n          \"component_groups\": [\"my_addon:water_form\"]\n        }\n      },\n      \"my_addon:transform_earth\": {\n        \"remove\": {\n          \"component_groups\": [\"my_addon:fire_form\", \"my_addon:water_form\"]\n        },\n        \"add\": {\n          \"component_groups\": [\"my_addon:earth_form\"]\n        }\n      }\n    }\n  }\n}`\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'text-green-600 dark:text-green-400';\n      case 'intermediate': return 'text-yellow-600 dark:text-yellow-400';\n      case 'advanced': return 'text-red-600 dark:text-red-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const getStabilityColor = (stability: string) => {\n    switch (stability) {\n      case 'stable': return 'text-green-600 dark:text-green-400';\n      case 'experimental': return 'text-orange-600 dark:text-orange-400';\n      case 'beta': return 'text-blue-600 dark:text-blue-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  return (\n    <section className=\"p-6 max-w-7xl mx-auto\" data-testid=\"entity-docs\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold text-foreground mb-4\">Entity Documentation</h1>\n        <p className=\"text-xl text-muted-foreground mb-6\">\n          Complete reference for creating and customizing entities in Minecraft: Bedrock Edition\n        </p>\n        \n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Components</p>\n                <p className=\"text-2xl font-bold\">{entityComponents.length}</p>\n              </div>\n              <Layers className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Categories</p>\n                <p className=\"text-2xl font-bold\">{categories.length}</p>\n              </div>\n              <BookOpen className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Stable</p>\n                <p className=\"text-2xl font-bold\">\n                  {entityComponents.filter(c => c.stability === 'stable').length}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Experimental</p>\n                <p className=\"text-2xl font-bold\">\n                  {entityComponents.filter(c => c.stability === 'experimental').length}\n                </p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"components\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"components\">Components</TabsTrigger>\n          <TabsTrigger value=\"tutorials\">Tutorials</TabsTrigger>\n          <TabsTrigger value=\"patterns\">Common Patterns</TabsTrigger>\n          <TabsTrigger value=\"ai-behaviors\">AI & Behaviors</TabsTrigger>\n        </TabsList>\n\n        {/* Components Tab */}\n        <TabsContent value=\"components\" className=\"space-y-6\">\n          {/* Search and Filters */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n                <div className=\"lg:col-span-2\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n                    <Input\n                      placeholder=\"Search components, keywords, or descriptions...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-component-search\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={difficultyFilter} onValueChange={(value: any) => setDifficultyFilter(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Difficulty\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Difficulties</SelectItem>\n                    <SelectItem value=\"beginner\">Beginner</SelectItem>\n                    <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                    <SelectItem value=\"advanced\">Advanced</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {categories.map(category => (\n                      <SelectItem key={category} value={category}>{category}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={stabilityFilter} onValueChange={(value: any) => setStabilityFilter(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Stability\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Stability</SelectItem>\n                    <SelectItem value=\"stable\">Stable</SelectItem>\n                    <SelectItem value=\"experimental\">Experimental</SelectItem>\n                    <SelectItem value=\"beta\">Beta</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {(searchTerm || difficultyFilter !== 'all' || categoryFilter !== 'all' || stabilityFilter !== 'all') && (\n                <div className=\"mt-4 flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Showing {filteredComponents.length} of {entityComponents.length} components\n                  </span>\n                  {filteredComponents.length < entityComponents.length && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSearchTerm('');\n                        setDifficultyFilter('all');\n                        setCategoryFilter('all');\n                        setStabilityFilter('all');\n                      }}\n                    >\n                      Clear Filters\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {/* Component Browser */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Entity Components</CardTitle>\n                  <CardDescription>\n                    Browse through all available entity components and their properties\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Accordion type=\"multiple\" className=\"space-y-2\">\n                    {Object.entries(componentsByCategory).map(([category, components]) => {\n                      const IconComponent = categoryIcons[category] || Layers;\n                      return (\n                        <AccordionItem key={category} value={category} className=\"border rounded-lg\">\n                          <AccordionTrigger className=\"px-4 hover:bg-muted\">\n                            <div className=\"flex items-center justify-between w-full\">\n                              <div className=\"flex items-center gap-2\">\n                                <IconComponent size={16} />\n                                <span className=\"font-medium\">{category}</span>\n                              </div>\n                              <Badge variant=\"secondary\">{components.length}</Badge>\n                            </div>\n                          </AccordionTrigger>\n                          <AccordionContent className=\"px-4 pb-4\">\n                            <div className=\"space-y-2\">\n                              {components.map((component) => (\n                                <div\n                                  key={component.name}\n                                  className=\"p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                                  onClick={() => setSelectedComponent(component)}\n                                  data-testid={`component-${component.name.replace('minecraft:', '').replace(':', '-')}`}\n                                >\n                                  <div className=\"flex items-start justify-between\">\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center gap-2 mb-1\">\n                                        <h4 className=\"font-mono text-sm text-primary\">{component.name}</h4>\n                                        <Badge \n                                          variant={component.difficulty === 'beginner' ? 'secondary' : \n                                                  component.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                                          className=\"text-xs\"\n                                        >\n                                          {component.difficulty}\n                                        </Badge>\n                                        <Badge \n                                          variant=\"outline\" \n                                          className={`text-xs ${getStabilityColor(component.stability)}`}\n                                        >\n                                          {component.stability}\n                                        </Badge>\n                                      </div>\n                                      <p className=\"text-sm text-muted-foreground\">{component.description}</p>\n                                      {component.version && (\n                                        <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                                          Since {component.version}\n                                        </Badge>\n                                      )}\n                                      {component.keywords.length > 0 && (\n                                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                                          {component.keywords.slice(0, 3).map(keyword => (\n                                            <Badge key={keyword} variant=\"outline\" className=\"text-xs\">\n                                              {keyword}\n                                            </Badge>\n                                          ))}\n                                        </div>\n                                      )}\n                                    </div>\n                                    <ChevronRight size={16} className=\"text-muted-foreground\" />\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </AccordionContent>\n                        </AccordionItem>\n                      );\n                    })}\n                  </Accordion>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Component Details */}\n            <div className=\"space-y-6\">\n              {selectedComponent ? (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"font-mono text-lg break-all\">{selectedComponent.name}</CardTitle>\n                    <CardDescription>{selectedComponent.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge variant=\"secondary\">{selectedComponent.category}</Badge>\n                      <Badge \n                        variant={selectedComponent.difficulty === 'beginner' ? 'secondary' : \n                                selectedComponent.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                      >\n                        {selectedComponent.difficulty}\n                      </Badge>\n                      <Badge \n                        variant=\"outline\" \n                        className={getStabilityColor(selectedComponent.stability)}\n                      >\n                        {selectedComponent.stability}\n                      </Badge>\n                      {selectedComponent.version && (\n                        <Badge variant=\"outline\">\n                          Since {selectedComponent.version}\n                        </Badge>\n                      )}\n                    </div>\n\n                    <Tabs defaultValue=\"properties\">\n                      <TabsList className=\"grid grid-cols-3 w-full\">\n                        <TabsTrigger value=\"properties\">Properties</TabsTrigger>\n                        <TabsTrigger value=\"example\">Example</TabsTrigger>\n                        <TabsTrigger value=\"details\">Details</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"properties\" className=\"space-y-3\">\n                        {selectedComponent.properties && selectedComponent.properties.length > 0 ? (\n                          <div className=\"space-y-3\">\n                            {selectedComponent.properties.map((prop) => (\n                              <div key={prop.name} className=\"p-3 bg-muted rounded-lg\">\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1\">\n                                    <h5 className=\"font-mono text-sm font-medium\">{prop.name}</h5>\n                                    <p className=\"text-xs text-muted-foreground mt-1\">{prop.description}</p>\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      {prop.type}\n                                    </Badge>\n                                    {prop.required && (\n                                      <Badge variant=\"destructive\" className=\"ml-1 text-xs\">\n                                        Required\n                                      </Badge>\n                                    )}\n                                  </div>\n                                </div>\n                                {prop.default !== undefined && (\n                                  <p className=\"text-xs text-muted-foreground mt-2\">\n                                    Default: <code className=\"bg-background px-1 rounded\">{JSON.stringify(prop.default)}</code>\n                                  </p>\n                                )}\n                                {(prop.min !== undefined || prop.max !== undefined) && (\n                                  <p className=\"text-xs text-muted-foreground mt-1\">\n                                    Range: {prop.min ?? '∞'} to {prop.max ?? '∞'}\n                                  </p>\n                                )}\n                                {prop.options && (\n                                  <div className=\"mt-2\">\n                                    <p className=\"text-xs text-muted-foreground mb-1\">Options:</p>\n                                    <div className=\"flex flex-wrap gap-1\">\n                                      {prop.options.map(option => (\n                                        <Badge key={option} variant=\"outline\" className=\"text-xs\">\n                                          {option}\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground\">No configurable properties</p>\n                        )}\n                      </TabsContent>\n\n                      <TabsContent value=\"example\" className=\"space-y-3\">\n                        {selectedComponent.example ? (\n                          <div>\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h5 className=\"font-medium\">Usage Example</h5>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => copyToClipboard(selectedComponent.example!, `${selectedComponent.name} example`)}\n                                data-testid=\"button-copy-example\"\n                              >\n                                <Copy size={14} className=\"mr-1\" />\n                                Copy\n                              </Button>\n                            </div>\n                            <CodePreview code={selectedComponent.example} language=\"json\" />\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground\">No example available</p>\n                        )}\n                      </TabsContent>\n\n                      <TabsContent value=\"details\" className=\"space-y-3\">\n                        <div className=\"space-y-3\">\n                          {selectedComponent.dependencies && selectedComponent.dependencies.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Dependencies</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.dependencies.map(dep => (\n                                  <Badge key={dep} variant=\"outline\" className=\"text-xs\">\n                                    {dep}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {selectedComponent.conflicts && selectedComponent.conflicts.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Conflicts With</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.conflicts.map(conflict => (\n                                  <Badge key={conflict} variant=\"destructive\" className=\"text-xs\">\n                                    {conflict}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {selectedComponent.keywords.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Keywords</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.keywords.map(keyword => (\n                                  <Badge key={keyword} variant=\"secondary\" className=\"text-xs\">\n                                    {keyword}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {selectedComponent.documentation && (\n                      <div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n                          <a \n                            href={selectedComponent.documentation} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            data-testid=\"button-view-docs\"\n                          >\n                            <ExternalLink size={14} className=\"mr-2\" />\n                            View Official Documentation\n                          </a>\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card>\n                  <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n                    <Search size={48} className=\"text-muted-foreground mb-4\" />\n                    <h3 className=\"font-medium text-foreground mb-2\">Select a Component</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Choose a component from the list to view its documentation and examples\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Quick Reference */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Quick Reference</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3 text-sm\">\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Essential Components</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• minecraft:health - Entity health system</li>\n                      <li>• minecraft:movement - Basic movement speed</li>\n                      <li>• minecraft:physics - Physics simulation</li>\n                      <li>• minecraft:collision_box - Collision boundaries</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Behavior Components</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• minecraft:behavior.float - Water floating</li>\n                      <li>• minecraft:behavior.look_at_player - Look at players</li>\n                      <li>• minecraft:behavior.random_stroll - Random movement</li>\n                      <li>• minecraft:behavior.panic - Flee when hurt</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Development Tips</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• Start with core components first</li>\n                      <li>• Test thoroughly in creative mode</li>\n                      <li>• Use component groups for variants</li>\n                      <li>• Check stability before production use</li>\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Tutorials Tab */}\n        <TabsContent value=\"tutorials\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Choose a Tutorial</h3>\n              {Object.entries(tutorials).map(([key, tutorial]) => (\n                <Card\n                  key={key}\n                  className={`cursor-pointer transition-colors ${selectedTutorial === key ? 'border-primary' : ''}`}\n                  onClick={() => setSelectedTutorial(key)}\n                  data-testid={`tutorial-${key}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">{tutorial.title}</h4>\n                      <Badge \n                        variant={tutorial.difficulty === 'beginner' ? 'secondary' : \n                                tutorial.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                        className=\"text-xs\"\n                      >\n                        {tutorial.difficulty}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{tutorial.description}</p>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <Clock size={12} />\n                      <span>{tutorial.estimatedTime}</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <div className=\"lg:col-span-2\">\n              {tutorials[selectedTutorial as keyof typeof tutorials] && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span>{tutorials[selectedTutorial as keyof typeof tutorials].title}</span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(\n                          tutorials[selectedTutorial as keyof typeof tutorials].code,\n                          tutorials[selectedTutorial as keyof typeof tutorials].title\n                        )}\n                        data-testid=\"button-copy-tutorial\"\n                      >\n                        <Copy size={14} className=\"mr-1\" />\n                        Copy\n                      </Button>\n                    </CardTitle>\n                    <CardDescription>\n                      {tutorials[selectedTutorial as keyof typeof tutorials].description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge \n                        variant={tutorials[selectedTutorial as keyof typeof tutorials].difficulty === 'beginner' ? 'secondary' : \n                                tutorials[selectedTutorial as keyof typeof tutorials].difficulty === 'intermediate' ? 'default' : 'destructive'}\n                      >\n                        {tutorials[selectedTutorial as keyof typeof tutorials].difficulty}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                        <Clock size={12} />\n                        {tutorials[selectedTutorial as keyof typeof tutorials].estimatedTime}\n                      </Badge>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Components Used</h5>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {tutorials[selectedTutorial as keyof typeof tutorials].components.map(component => (\n                          <Badge key={component} variant=\"outline\" className=\"text-xs\">\n                            {component}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Complete Entity Definition</h5>\n                      <CodePreview \n                        code={tutorials[selectedTutorial as keyof typeof tutorials].code} \n                        language=\"json\" \n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Common Patterns Tab */}\n        <TabsContent value=\"patterns\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Heart className=\"mr-2\" size={20} />\n                  Passive Entities\n                </CardTitle>\n                <CardDescription>Non-aggressive entities like animals and NPCs</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Common pattern for peaceful entities that interact with players but don't attack.\n                </p>\n                <div>\n                  <h5 className=\"font-medium mb-2\">Essential Components:</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• minecraft:health</li>\n                    <li>• minecraft:movement</li>\n                    <li>• minecraft:behavior.float</li>\n                    <li>• minecraft:behavior.look_at_player</li>\n                    <li>• minecraft:behavior.random_stroll</li>\n                    <li>• minecraft:behavior.panic</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"mr-2\" size={20} />\n                  Combat Entities\n                </CardTitle>\n                <CardDescription>Aggressive entities that fight players or other mobs</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Pattern for hostile entities with combat AI and targeting systems.\n                </p>\n                <div>\n                  <h5 className=\"font-medium mb-2\">Essential Components:</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• minecraft:health</li>\n                    <li>• minecraft:attack</li>\n                    <li>• minecraft:behavior.melee_attack</li>\n                    <li>• minecraft:behavior.nearest_attackable_target</li>\n                    <li>• minecraft:behavior.hurt_by_target</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"mr-2\" size={20} />\n                  Social Entities\n                </CardTitle>\n                <CardDescription>Entities that interact with each other and form groups</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Pattern for entities that exhibit social behaviors and group dynamics.\n                </p>\n                <div>\n                  <h5 className=\"font-medium mb-2\">Essential Components:</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• minecraft:behavior.follow_mob</li>\n                    <li>• minecraft:behavior.find_herd</li>\n                    <li>• minecraft:behavior.avoid_mob_type</li>\n                    <li>• minecraft:behavior.share_items</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Target className=\"mr-2\" size={20} />\n                  Utility Entities\n                </CardTitle>\n                <CardDescription>Functional entities that provide services or mechanics</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Pattern for entities that serve specific gameplay functions or provide utilities.\n                </p>\n                <div>\n                  <h5 className=\"font-medium mb-2\">Essential Components:</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• minecraft:interact</li>\n                    <li>• minecraft:trade_table</li>\n                    <li>• minecraft:persistent</li>\n                    <li>• minecraft:behavior.stay_while_sitting</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* AI & Behaviors Tab */}\n        <TabsContent value=\"ai-behaviors\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Brain className=\"mr-2\" size={20} />\n                  Understanding AI Priorities\n                </CardTitle>\n                <CardDescription>How entity AI system works and priority management</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Entity behaviors use a priority system where lower numbers have higher priority. \n                  The AI system will always choose the highest priority behavior that can currently execute.\n                </p>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <h5 className=\"font-medium text-red-600 dark:text-red-400\">Priority 0-2: Critical Behaviors</h5>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• minecraft:behavior.float (priority: 0)</li>\n                      <li>• minecraft:behavior.panic (priority: 1)</li>\n                      <li>• minecraft:behavior.melee_attack (priority: 2)</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h5 className=\"font-medium text-yellow-600 dark:text-yellow-400\">Priority 3-5: Important Behaviors</h5>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• minecraft:behavior.nearest_attackable_target (priority: 3)</li>\n                      <li>• minecraft:behavior.follow_owner (priority: 4)</li>\n                      <li>• minecraft:behavior.breed (priority: 5)</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h5 className=\"font-medium text-green-600 dark:text-green-400\">Priority 6-10: Normal Behaviors</h5>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• minecraft:behavior.random_stroll (priority: 6)</li>\n                      <li>• minecraft:behavior.look_at_player (priority: 7)</li>\n                      <li>• minecraft:behavior.random_look_around (priority: 8)</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Zap className=\"mr-2\" size={20} />\n                  Common Behavior Combinations\n                </CardTitle>\n                <CardDescription>Proven behavior patterns that work well together</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium\">Friendly NPC</h5>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <div>minecraft:behavior.float (0)</div>\n                      <div>minecraft:behavior.panic (1)</div>\n                      <div>minecraft:behavior.random_stroll (6)</div>\n                      <div>minecraft:behavior.look_at_player (7)</div>\n                      <div>minecraft:behavior.random_look_around (8)</div>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div>\n                    <h5 className=\"font-medium\">Guard Entity</h5>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <div>minecraft:behavior.float (0)</div>\n                      <div>minecraft:behavior.hurt_by_target (1)</div>\n                      <div>minecraft:behavior.melee_attack (2)</div>\n                      <div>minecraft:behavior.nearest_attackable_target (3)</div>\n                      <div>minecraft:behavior.patrol (6)</div>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div>\n                    <h5 className=\"font-medium\">Pet Entity</h5>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <div>minecraft:behavior.float (0)</div>\n                      <div>minecraft:behavior.panic (1)</div>\n                      <div>minecraft:behavior.follow_owner (4)</div>\n                      <div>minecraft:behavior.sit (5)</div>\n                      <div>minecraft:behavior.random_stroll (6)</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>AI Behavior Best Practices</CardTitle>\n              <CardDescription>Guidelines for creating effective entity AI</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h5 className=\"font-medium text-green-600 dark:text-green-400 mb-3\">✅ Do</h5>\n                  <ul className=\"text-sm space-y-2\">\n                    <li>• Always include minecraft:behavior.float as priority 0</li>\n                    <li>• Use priority gaps to allow inserting behaviors later</li>\n                    <li>• Test behavior conflicts thoroughly</li>\n                    <li>• Group related behaviors with similar priorities</li>\n                    <li>• Use component groups for different AI states</li>\n                    <li>• Include panic behavior for non-combat entities</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium text-red-600 dark:text-red-400 mb-3\">❌ Don't</h5>\n                  <ul className=\"text-sm space-y-2\">\n                    <li>• Skip the float behavior (entities will drown)</li>\n                    <li>• Use the same priority for multiple behaviors</li>\n                    <li>• Create circular behavior dependencies</li>\n                    <li>• Overcomplicate simple entities</li>\n                    <li>• Forget to test edge cases</li>\n                    <li>• Ignore performance implications of complex AI</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </section>\n  );\n}","size_bytes":50582},"client/src/components/Documentation/ItemDocs.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Gem, Copy, ExternalLink, Filter, BookOpen, Package, \n  Utensils, Sword, Shield, Sparkles, Zap, Eye, Clock, Target,\n  ChevronRight, CheckCircle, AlertTriangle, Info, Lightbulb, \n  Hammer, Pickaxe, Apple, Crown, Shirt, Wrench, Activity,\n  ArrowUpDown, BarChart3, Settings\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport { itemComponents, ItemComponent } from \"../../../../shared/itemRegistry\";\n\ninterface ItemDocsProps {\n  onNavigate?: (section: string) => void;\n}\n\nexport default function ItemDocs({ onNavigate }: ItemDocsProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedComponent, setSelectedComponent] = useState<ItemComponent | null>(null);\n  const [difficultyFilter, setDifficultyFilter] = useState<'all' | 'beginner' | 'intermediate' | 'advanced'>('all');\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\n  const [stabilityFilter, setStabilityFilter] = useState<'all' | 'stable' | 'experimental' | 'beta'>('all');\n  const [selectedTutorial, setSelectedTutorial] = useState<string>('basic-item');\n  const { toast } = useToast();\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  // Filter components based on search and filters\n  const filteredComponents = itemComponents.filter(component => {\n    const matchesSearch = searchTerm === '' || \n      component.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      component.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      component.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesDifficulty = difficultyFilter === 'all' || component.difficulty === difficultyFilter;\n    const matchesCategory = categoryFilter === 'all' || component.category === categoryFilter;\n    const matchesStability = stabilityFilter === 'all' || component.stability === stabilityFilter;\n    \n    return matchesSearch && matchesDifficulty && matchesCategory && matchesStability;\n  });\n\n  // Group components by category\n  const componentsByCategory = filteredComponents.reduce((acc, component) => {\n    const category = component.category;\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(component);\n    return acc;\n  }, {} as Record<string, ItemComponent[]>);\n\n  // Get unique categories for filter\n  const categories = [...new Set(itemComponents.map(c => c.category))];\n  \n  // Category icons mapping\n  const categoryIcons: Record<string, React.ComponentType<{ size?: number; className?: string }>> = {\n    'Core': Package,\n    'Display': Eye,\n    'Food': Utensils,\n    'Tools': Hammer,\n    'Weapons': Sword,\n    'Armor': Shield,\n    'Durability': Activity,\n    'Enchanting': Sparkles,\n    'Interaction': Target,\n    'Animation': Zap,\n    'Effects': Lightbulb,\n    'Utility': Wrench,\n    'Trading': ArrowUpDown\n  };\n\n  // Tutorial examples\n  const tutorials = {\n    'basic-item': {\n      title: 'Basic Custom Item',\n      description: 'Create a simple collectible item',\n      difficulty: 'beginner' as const,\n      estimatedTime: '5 minutes',\n      components: ['minecraft:max_stack_size', 'minecraft:icon', 'minecraft:display_name'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:magic_crystal\",\n      \"menu_category\": {\n        \"category\": \"items\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 64,\n      \"minecraft:icon\": {\n        \"texture\": \"magic_crystal\"\n      },\n      \"minecraft:display_name\": {\n        \"value\": \"Magic Crystal\"\n      },\n      \"minecraft:rarity\": \"epic\",\n      \"minecraft:foil\": true,\n      \"minecraft:hand_equipped\": false\n    }\n  }\n}`\n    },\n    'food-item': {\n      title: 'Custom Food Item',\n      description: 'Create a food item with special effects',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '10 minutes',\n      components: ['minecraft:food', 'minecraft:use_animation', 'minecraft:cooldown'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:energy_bar\",\n      \"menu_category\": {\n        \"category\": \"nature\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 16,\n      \"minecraft:icon\": {\n        \"texture\": \"energy_bar\"\n      },\n      \"minecraft:display_name\": {\n        \"value\": \"Energy Bar\"\n      },\n      \"minecraft:food\": {\n        \"nutrition\": 6,\n        \"saturation_modifier\": 0.8,\n        \"can_always_eat\": false,\n        \"effects\": [\n          {\n            \"name\": \"speed\",\n            \"chance\": 1.0,\n            \"duration\": 300,\n            \"amplifier\": 1\n          },\n          {\n            \"name\": \"regeneration\",\n            \"chance\": 1.0,\n            \"duration\": 100,\n            \"amplifier\": 0\n          }\n        ]\n      },\n      \"minecraft:use_animation\": \"eat\",\n      \"minecraft:use_duration\": 32,\n      \"minecraft:cooldown\": {\n        \"category\": \"energy_foods\",\n        \"duration\": 5.0\n      }\n    }\n  }\n}`\n    },\n    'tool-item': {\n      title: 'Custom Tool with Durability',\n      description: 'Create a tool that breaks blocks efficiently',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '15 minutes',\n      components: ['minecraft:durability', 'minecraft:digger', 'minecraft:repairable'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:crystal_pickaxe\",\n      \"menu_category\": {\n        \"category\": \"equipment\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 1,\n      \"minecraft:icon\": {\n        \"texture\": \"crystal_pickaxe\"\n      },\n      \"minecraft:display_name\": {\n        \"value\": \"Crystal Pickaxe\"\n      },\n      \"minecraft:durability\": {\n        \"max_durability\": 500,\n        \"damage_chance\": {\n          \"min\": 1,\n          \"max\": 1\n        }\n      },\n      \"minecraft:digger\": {\n        \"use_efficiency\": true,\n        \"destroy_speeds\": [\n          {\n            \"block\": {\n              \"tags\": \"q.any_tag('stone', 'metal')\"\n            },\n            \"speed\": 12\n          },\n          {\n            \"block\": \"minecraft:obsidian\",\n            \"speed\": 15\n          }\n        ]\n      },\n      \"minecraft:repairable\": {\n        \"repair_items\": [\n          {\n            \"items\": [\"my_addon:magic_crystal\"],\n            \"repair_amount\": 100\n          }\n        ]\n      },\n      \"minecraft:enchantable\": {\n        \"value\": 15,\n        \"slot\": \"pickaxe\"\n      },\n      \"minecraft:hand_equipped\": true\n    }\n  }\n}`\n    },\n    'weapon-item': {\n      title: 'Custom Weapon with Effects',\n      description: 'Create a weapon with special combat properties',\n      difficulty: 'advanced' as const,\n      estimatedTime: '20 minutes',\n      components: ['minecraft:weapon', 'minecraft:durability', 'minecraft:enchantable'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:flame_sword\",\n      \"menu_category\": {\n        \"category\": \"equipment\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 1,\n      \"minecraft:icon\": {\n        \"texture\": \"flame_sword\"\n      },\n      \"minecraft:display_name\": {\n        \"value\": \"Flame Sword\"\n      },\n      \"minecraft:durability\": {\n        \"max_durability\": 750,\n        \"damage_chance\": {\n          \"min\": 1,\n          \"max\": 1\n        }\n      },\n      \"minecraft:weapon\": {\n        \"on_hurt_entity\": {\n          \"event\": \"my_addon:flame_damage\",\n          \"target\": \"other\"\n        }\n      },\n      \"minecraft:damage\": {\n        \"value\": 8\n      },\n      \"minecraft:enchantable\": {\n        \"value\": 10,\n        \"slot\": \"sword\"\n      },\n      \"minecraft:repairable\": {\n        \"repair_items\": [\n          {\n            \"items\": [\"minecraft:blaze_rod\"],\n            \"repair_amount\": 150\n          }\n        ]\n      },\n      \"minecraft:hand_equipped\": true,\n      \"minecraft:foil\": true\n    },\n    \"events\": {\n      \"my_addon:flame_damage\": {\n        \"damage\": {\n          \"type\": \"fire\",\n          \"amount\": 2\n        },\n        \"run_command\": {\n          \"command\": [\"effect @s fire_resistance 3 0\"]\n        }\n      }\n    }\n  }\n}`\n    },\n    'armor-item': {\n      title: 'Custom Armor Piece',\n      description: 'Create armor with protection and special properties',\n      difficulty: 'advanced' as const,\n      estimatedTime: '25 minutes',\n      components: ['minecraft:wearable', 'minecraft:armor', 'minecraft:durability'],\n      code: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:crystal_helmet\",\n      \"menu_category\": {\n        \"category\": \"equipment\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 1,\n      \"minecraft:icon\": {\n        \"texture\": \"crystal_helmet\"\n      },\n      \"minecraft:display_name\": {\n        \"value\": \"Crystal Helmet\"\n      },\n      \"minecraft:durability\": {\n        \"max_durability\": 300,\n        \"damage_chance\": {\n          \"min\": 1,\n          \"max\": 1\n        }\n      },\n      \"minecraft:wearable\": {\n        \"slot\": \"slot.armor.head\"\n      },\n      \"minecraft:armor\": {\n        \"protection\": 3\n      },\n      \"minecraft:enchantable\": {\n        \"value\": 12,\n        \"slot\": \"armor_head\"\n      },\n      \"minecraft:repairable\": {\n        \"repair_items\": [\n          {\n            \"items\": [\"my_addon:magic_crystal\"],\n            \"repair_amount\": 75\n          }\n        ]\n      },\n      \"minecraft:hand_equipped\": false\n    }\n  }\n}`\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'text-green-600 dark:text-green-400';\n      case 'intermediate': return 'text-yellow-600 dark:text-yellow-400';\n      case 'advanced': return 'text-red-600 dark:text-red-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const getStabilityColor = (stability: string) => {\n    switch (stability) {\n      case 'stable': return 'text-green-600 dark:text-green-400';\n      case 'experimental': return 'text-orange-600 dark:text-orange-400';\n      case 'beta': return 'text-blue-600 dark:text-blue-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const itemPatterns = [\n    {\n      title: 'Collectible Items',\n      description: 'Items primarily for collection and trading',\n      icon: Gem,\n      components: ['minecraft:max_stack_size', 'minecraft:icon', 'minecraft:rarity'],\n      usage: 'Currencies, collectibles, and rare materials'\n    },\n    {\n      title: 'Consumable Items',\n      description: 'Items that provide temporary effects when used',\n      icon: Apple,\n      components: ['minecraft:food', 'minecraft:use_animation', 'minecraft:cooldown'],\n      usage: 'Food, potions, and buff items'\n    },\n    {\n      title: 'Equipment Items',\n      description: 'Tools, weapons, and armor for gameplay',\n      icon: Sword,\n      components: ['minecraft:durability', 'minecraft:enchantable', 'minecraft:repairable'],\n      usage: 'Combat gear, mining tools, and protective equipment'\n    },\n    {\n      title: 'Functional Items',\n      description: 'Items that serve specific mechanical purposes',\n      icon: Wrench,\n      components: ['minecraft:block_placer', 'minecraft:entity_placer', 'minecraft:throwable'],\n      usage: 'Keys, spawn eggs, and utility items'\n    }\n  ];\n\n  return (\n    <section className=\"p-6 max-w-7xl mx-auto\" data-testid=\"item-docs\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold text-foreground mb-4\">Item Documentation</h1>\n        <p className=\"text-xl text-muted-foreground mb-6\">\n          Complete guide to creating custom items in Minecraft: Bedrock Edition\n        </p>\n        \n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Components</p>\n                <p className=\"text-2xl font-bold\">{itemComponents.length}</p>\n              </div>\n              <Package className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Categories</p>\n                <p className=\"text-2xl font-bold\">{categories.length}</p>\n              </div>\n              <BookOpen className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Stable</p>\n                <p className=\"text-2xl font-bold\">\n                  {itemComponents.filter(c => c.stability === 'stable').length}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Experimental</p>\n                <p className=\"text-2xl font-bold\">\n                  {itemComponents.filter(c => c.stability === 'experimental').length}\n                </p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"components\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"components\">Components</TabsTrigger>\n          <TabsTrigger value=\"tutorials\">Tutorials</TabsTrigger>\n          <TabsTrigger value=\"patterns\">Item Patterns</TabsTrigger>\n          <TabsTrigger value=\"crafting\">Crafting & Recipes</TabsTrigger>\n        </TabsList>\n\n        {/* Components Tab */}\n        <TabsContent value=\"components\" className=\"space-y-6\">\n          {/* Search and Filters */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n                <div className=\"lg:col-span-2\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n                    <Input\n                      placeholder=\"Search components, keywords, or descriptions...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-component-search\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={difficultyFilter} onValueChange={(value: any) => setDifficultyFilter(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Difficulty\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Difficulties</SelectItem>\n                    <SelectItem value=\"beginner\">Beginner</SelectItem>\n                    <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                    <SelectItem value=\"advanced\">Advanced</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {categories.map(category => (\n                      <SelectItem key={category} value={category}>{category}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={stabilityFilter} onValueChange={(value: any) => setStabilityFilter(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Stability\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Stability</SelectItem>\n                    <SelectItem value=\"stable\">Stable</SelectItem>\n                    <SelectItem value=\"experimental\">Experimental</SelectItem>\n                    <SelectItem value=\"beta\">Beta</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {(searchTerm || difficultyFilter !== 'all' || categoryFilter !== 'all' || stabilityFilter !== 'all') && (\n                <div className=\"mt-4 flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Showing {filteredComponents.length} of {itemComponents.length} components\n                  </span>\n                  {filteredComponents.length < itemComponents.length && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSearchTerm('');\n                        setDifficultyFilter('all');\n                        setCategoryFilter('all');\n                        setStabilityFilter('all');\n                      }}\n                    >\n                      Clear Filters\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {/* Component Browser */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Item Components</CardTitle>\n                  <CardDescription>\n                    Browse through all available item components and their properties\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Accordion type=\"multiple\" className=\"space-y-2\">\n                    {Object.entries(componentsByCategory).map(([category, components]) => {\n                      const IconComponent = categoryIcons[category] || Package;\n                      return (\n                        <AccordionItem key={category} value={category} className=\"border rounded-lg\">\n                          <AccordionTrigger className=\"px-4 hover:bg-muted\">\n                            <div className=\"flex items-center justify-between w-full\">\n                              <div className=\"flex items-center gap-2\">\n                                <IconComponent size={16} />\n                                <span className=\"font-medium\">{category}</span>\n                              </div>\n                              <Badge variant=\"secondary\">{components.length}</Badge>\n                            </div>\n                          </AccordionTrigger>\n                          <AccordionContent className=\"px-4 pb-4\">\n                            <div className=\"space-y-2\">\n                              {components.map((component) => (\n                                <div\n                                  key={component.name}\n                                  className=\"p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                                  onClick={() => setSelectedComponent(component)}\n                                  data-testid={`component-${component.name.replace('minecraft:', '').replace(':', '-')}`}\n                                >\n                                  <div className=\"flex items-start justify-between\">\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center gap-2 mb-1\">\n                                        <h4 className=\"font-mono text-sm text-primary\">{component.name}</h4>\n                                        <Badge \n                                          variant={component.difficulty === 'beginner' ? 'secondary' : \n                                                  component.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                                          className=\"text-xs\"\n                                        >\n                                          {component.difficulty}\n                                        </Badge>\n                                        <Badge \n                                          variant=\"outline\" \n                                          className={`text-xs ${getStabilityColor(component.stability)}`}\n                                        >\n                                          {component.stability}\n                                        </Badge>\n                                      </div>\n                                      <p className=\"text-sm text-muted-foreground\">{component.description}</p>\n                                      {component.version && (\n                                        <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                                          Since {component.version}\n                                        </Badge>\n                                      )}\n                                      {component.keywords.length > 0 && (\n                                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                                          {component.keywords.slice(0, 3).map(keyword => (\n                                            <Badge key={keyword} variant=\"outline\" className=\"text-xs\">\n                                              {keyword}\n                                            </Badge>\n                                          ))}\n                                        </div>\n                                      )}\n                                    </div>\n                                    <ChevronRight size={16} className=\"text-muted-foreground\" />\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </AccordionContent>\n                        </AccordionItem>\n                      );\n                    })}\n                  </Accordion>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Component Details */}\n            <div className=\"space-y-6\">\n              {selectedComponent ? (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"font-mono text-lg break-all\">{selectedComponent.name}</CardTitle>\n                    <CardDescription>{selectedComponent.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge variant=\"secondary\">{selectedComponent.category}</Badge>\n                      <Badge \n                        variant={selectedComponent.difficulty === 'beginner' ? 'secondary' : \n                                selectedComponent.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                      >\n                        {selectedComponent.difficulty}\n                      </Badge>\n                      <Badge \n                        variant=\"outline\" \n                        className={getStabilityColor(selectedComponent.stability)}\n                      >\n                        {selectedComponent.stability}\n                      </Badge>\n                      {selectedComponent.version && (\n                        <Badge variant=\"outline\">\n                          Since {selectedComponent.version}\n                        </Badge>\n                      )}\n                    </div>\n\n                    <Tabs defaultValue=\"properties\">\n                      <TabsList className=\"grid grid-cols-3 w-full\">\n                        <TabsTrigger value=\"properties\">Properties</TabsTrigger>\n                        <TabsTrigger value=\"example\">Example</TabsTrigger>\n                        <TabsTrigger value=\"details\">Details</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"properties\" className=\"space-y-3\">\n                        {selectedComponent.properties && selectedComponent.properties.length > 0 ? (\n                          <div className=\"space-y-3\">\n                            {selectedComponent.properties.map((prop) => (\n                              <div key={prop.name} className=\"p-3 bg-muted rounded-lg\">\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1\">\n                                    <h5 className=\"font-mono text-sm font-medium\">{prop.name}</h5>\n                                    <p className=\"text-xs text-muted-foreground mt-1\">{prop.description}</p>\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      {prop.type}\n                                    </Badge>\n                                    {prop.required && (\n                                      <Badge variant=\"destructive\" className=\"ml-1 text-xs\">\n                                        Required\n                                      </Badge>\n                                    )}\n                                  </div>\n                                </div>\n                                {prop.default !== undefined && (\n                                  <p className=\"text-xs text-muted-foreground mt-2\">\n                                    Default: <code className=\"bg-background px-1 rounded\">{JSON.stringify(prop.default)}</code>\n                                  </p>\n                                )}\n                                {(prop.min !== undefined || prop.max !== undefined) && (\n                                  <p className=\"text-xs text-muted-foreground mt-1\">\n                                    Range: {prop.min ?? '∞'} to {prop.max ?? '∞'}\n                                  </p>\n                                )}\n                                {prop.options && (\n                                  <div className=\"mt-2\">\n                                    <p className=\"text-xs text-muted-foreground mb-1\">Options:</p>\n                                    <div className=\"flex flex-wrap gap-1\">\n                                      {prop.options.map(option => (\n                                        <Badge key={option} variant=\"outline\" className=\"text-xs\">\n                                          {option}\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground\">No configurable properties</p>\n                        )}\n                      </TabsContent>\n\n                      <TabsContent value=\"example\" className=\"space-y-3\">\n                        {selectedComponent.example ? (\n                          <div>\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h5 className=\"font-medium\">Usage Example</h5>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => copyToClipboard(selectedComponent.example!, `${selectedComponent.name} example`)}\n                                data-testid=\"button-copy-example\"\n                              >\n                                <Copy size={14} className=\"mr-1\" />\n                                Copy\n                              </Button>\n                            </div>\n                            <CodePreview code={selectedComponent.example} language=\"json\" />\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground\">No example available</p>\n                        )}\n                      </TabsContent>\n\n                      <TabsContent value=\"details\" className=\"space-y-3\">\n                        <div className=\"space-y-3\">\n                          {selectedComponent.dependencies && selectedComponent.dependencies.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Dependencies</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.dependencies.map(dep => (\n                                  <Badge key={dep} variant=\"outline\" className=\"text-xs\">\n                                    {dep}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {selectedComponent.conflicts && selectedComponent.conflicts.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Conflicts With</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.conflicts.map(conflict => (\n                                  <Badge key={conflict} variant=\"destructive\" className=\"text-xs\">\n                                    {conflict}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {selectedComponent.keywords.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Keywords</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedComponent.keywords.map(keyword => (\n                                  <Badge key={keyword} variant=\"secondary\" className=\"text-xs\">\n                                    {keyword}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {selectedComponent.documentation && (\n                      <div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n                          <a \n                            href={selectedComponent.documentation} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            data-testid=\"button-view-docs\"\n                          >\n                            <ExternalLink size={14} className=\"mr-2\" />\n                            View Official Documentation\n                          </a>\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card>\n                  <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n                    <Search size={48} className=\"text-muted-foreground mb-4\" />\n                    <h3 className=\"font-medium text-foreground mb-2\">Select a Component</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Choose a component from the list to view its documentation and examples\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Quick Reference */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Quick Reference</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3 text-sm\">\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Essential Components</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• minecraft:max_stack_size - Stack limits</li>\n                      <li>• minecraft:icon - Item texture</li>\n                      <li>• minecraft:display_name - Custom name</li>\n                      <li>• minecraft:durability - Tool/weapon lifespan</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Special Features</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• minecraft:food - Consumable nutrition</li>\n                      <li>• minecraft:enchantable - Enchantment support</li>\n                      <li>• minecraft:armor - Protection values</li>\n                      <li>• minecraft:weapon - Combat properties</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Development Tips</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• Use max_stack_size: 1 for tools</li>\n                      <li>• Include repair items for durability</li>\n                      <li>• Test enchantment compatibility</li>\n                      <li>• Balance nutrition values carefully</li>\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Tutorials Tab */}\n        <TabsContent value=\"tutorials\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Choose a Tutorial</h3>\n              {Object.entries(tutorials).map(([key, tutorial]) => (\n                <Card\n                  key={key}\n                  className={`cursor-pointer transition-colors ${selectedTutorial === key ? 'border-primary' : ''}`}\n                  onClick={() => setSelectedTutorial(key)}\n                  data-testid={`tutorial-${key}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">{tutorial.title}</h4>\n                      <Badge \n                        variant={tutorial.difficulty === 'beginner' ? 'secondary' : \n                                tutorial.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                        className=\"text-xs\"\n                      >\n                        {tutorial.difficulty}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{tutorial.description}</p>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <Clock size={12} />\n                      <span>{tutorial.estimatedTime}</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <div className=\"lg:col-span-2\">\n              {tutorials[selectedTutorial as keyof typeof tutorials] && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span>{tutorials[selectedTutorial as keyof typeof tutorials].title}</span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(\n                          tutorials[selectedTutorial as keyof typeof tutorials].code,\n                          tutorials[selectedTutorial as keyof typeof tutorials].title\n                        )}\n                        data-testid=\"button-copy-tutorial\"\n                      >\n                        <Copy size={14} className=\"mr-1\" />\n                        Copy\n                      </Button>\n                    </CardTitle>\n                    <CardDescription>\n                      {tutorials[selectedTutorial as keyof typeof tutorials].description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge \n                        variant={tutorials[selectedTutorial as keyof typeof tutorials].difficulty === 'beginner' ? 'secondary' : \n                                tutorials[selectedTutorial as keyof typeof tutorials].difficulty === 'intermediate' ? 'default' : 'destructive'}\n                      >\n                        {tutorials[selectedTutorial as keyof typeof tutorials].difficulty}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                        <Clock size={12} />\n                        {tutorials[selectedTutorial as keyof typeof tutorials].estimatedTime}\n                      </Badge>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Components Used</h5>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {tutorials[selectedTutorial as keyof typeof tutorials].components.map(component => (\n                          <Badge key={component} variant=\"outline\" className=\"text-xs\">\n                            {component}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Complete Item Definition</h5>\n                      <CodePreview \n                        code={tutorials[selectedTutorial as keyof typeof tutorials].code} \n                        language=\"json\" \n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Item Patterns Tab */}\n        <TabsContent value=\"patterns\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {itemPatterns.map((pattern, index) => {\n              const IconComponent = pattern.icon;\n              return (\n                <Card key={index}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <IconComponent className=\"mr-2\" size={20} />\n                      {pattern.title}\n                    </CardTitle>\n                    <CardDescription>{pattern.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <p className=\"text-sm text-muted-foreground\">{pattern.usage}</p>\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Key Components:</h5>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {pattern.components.map(component => (\n                          <Badge key={component} variant=\"outline\" className=\"text-xs\">\n                            {component}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"mr-2\" size={20} />\n                Item Balance Guidelines\n              </CardTitle>\n              <CardDescription>Recommendations for balanced item design</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div>\n                  <h5 className=\"font-medium text-blue-600 dark:text-blue-400 mb-3\">Food Items</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Nutrition: 1-8 for snacks, 8-20 for meals</li>\n                    <li>• Saturation: 0.3-0.8 typical range</li>\n                    <li>• Effects: Max 2-3 per food item</li>\n                    <li>• Duration: 30-300 seconds for effects</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium text-green-600 dark:text-green-400 mb-3\">Tools</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Durability: 100-1500 typical range</li>\n                    <li>• Speed: 1-15 for destroy_speeds</li>\n                    <li>• Efficiency: Enable for faster mining</li>\n                    <li>• Repair: Use thematic materials</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium text-purple-600 dark:text-purple-400 mb-3\">Weapons</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Damage: 1-12 typical range</li>\n                    <li>• Durability: 200-2000 for weapons</li>\n                    <li>• Enchantability: 5-15 for weapons</li>\n                    <li>• Effects: Balanced with cooldowns</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Crafting & Recipes Tab */}\n        <TabsContent value=\"crafting\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Settings className=\"mr-2\" size={20} />\n                  Recipe Integration\n                </CardTitle>\n                <CardDescription>How to integrate your items with crafting recipes</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Custom items can be used in crafting recipes and as crafting results. This allows for complex progression systems.\n                </p>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <h5 className=\"font-medium\">Recipe Files Location</h5>\n                    <p className=\"text-sm text-muted-foreground\">\n                      behavior_packs/your_pack/recipes/item_name.json\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h5 className=\"font-medium\">Recipe Types</h5>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• Shaped recipes (grid patterns)</li>\n                      <li>• Shapeless recipes (any arrangement)</li>\n                      <li>• Furnace recipes (smelting)</li>\n                      <li>• Brewing recipes (potions)</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Lightbulb className=\"mr-2\" size={20} />\n                  Best Practices\n                </CardTitle>\n                <CardDescription>Guidelines for effective item and recipe design</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div>\n                    <h5 className=\"font-medium text-green-600 dark:text-green-400\">✅ Do</h5>\n                    <ul className=\"text-sm space-y-1\">\n                      <li>• Use descriptive item identifiers</li>\n                      <li>• Balance durability with power</li>\n                      <li>• Include repair recipes for tools</li>\n                      <li>• Test recipe conflicts</li>\n                      <li>• Consider progression curves</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h5 className=\"font-medium text-red-600 dark:text-red-400\">❌ Don't</h5>\n                    <ul className=\"text-sm space-y-1\">\n                      <li>• Override vanilla recipes carelessly</li>\n                      <li>• Create overpowered food items</li>\n                      <li>• Forget stack size considerations</li>\n                      <li>• Skip enchantment compatibility</li>\n                      <li>• Ignore creative menu categories</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Example Recipe Integration</CardTitle>\n              <CardDescription>How to create recipes that use your custom items</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <h5 className=\"font-medium mb-2\">Shaped Recipe Example</h5>\n                  <CodePreview \n                    language=\"json\" \n                    code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_shaped\": {\n    \"description\": {\n      \"identifier\": \"my_addon:crystal_pickaxe_recipe\"\n    },\n    \"tags\": [\"crafting_table\"],\n    \"pattern\": [\n      \"CCC\",\n      \" S \",\n      \" S \"\n    ],\n    \"key\": {\n      \"C\": {\n        \"item\": \"my_addon:magic_crystal\"\n      },\n      \"S\": {\n        \"item\": \"minecraft:stick\"\n      }\n    },\n    \"result\": {\n      \"item\": \"my_addon:crystal_pickaxe\"\n    }\n  }\n}`}\n                  />\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium mb-2\">Smelting Recipe Example</h5>\n                  <CodePreview \n                    language=\"json\" \n                    code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_furnace\": {\n    \"description\": {\n      \"identifier\": \"my_addon:crystal_ingot_smelting\"\n    },\n    \"tags\": [\"furnace\", \"blast_furnace\"],\n    \"input\": {\n      \"item\": \"my_addon:raw_crystal\",\n      \"data\": 0,\n      \"count\": 1\n    },\n    \"output\": \"my_addon:crystal_ingot\"\n  }\n}`}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </section>\n  );\n}","size_bytes":48273},"client/src/components/Documentation/ScriptingDocs.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Code, Copy, ExternalLink, Server, Terminal, Zap, \n  BookOpen, Database, Users, Globe, Gamepad2, MessageSquare,\n  ChevronRight, CheckCircle, AlertTriangle, Info, Lightbulb,\n  Play, Clock, Activity, BarChart3, Settings, Target, Layers,\n  FileCode, Package, Shield, Eye, Wrench, Cpu\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport { minecraftRegistry } from \"../../../../shared/minecraftRegistry\";\nimport type { ApiElement } from \"../../../../shared/scriptRegistry\";\n\ninterface ScriptingDocsProps {\n  onNavigate?: (section: string) => void;\n}\n\n// Create a flat array of API elements from the registry for filtering\nconst scriptRegistry: ApiElement[] = Object.values(minecraftRegistry.modules)\n  .flatMap(module => module.elements);\n\nexport default function ScriptingDocs({ onNavigate }: ScriptingDocsProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedAPI, setSelectedAPI] = useState<ApiElement | null>(null);\n  const [moduleFilter, setModuleFilter] = useState<string>('all');\n  const [typeFilter, setTypeFilter] = useState<'all' | 'class' | 'interface' | 'enum' | 'function' | 'constant'>('all');\n  const [stabilityFilter, setStabilityFilter] = useState<'all' | 'stable' | 'experimental' | 'beta'>('all');\n  const [selectedTutorial, setSelectedTutorial] = useState<string>('getting-started');\n  const { toast } = useToast();\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  // Filter APIs based on search and filters\n  const filteredAPIs = scriptRegistry.filter(api => {\n    const matchesSearch = searchTerm === '' || \n      api.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      api.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      api.module.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      api.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesModule = moduleFilter === 'all' || api.module === moduleFilter;\n    const matchesType = typeFilter === 'all' || api.type === typeFilter;\n    const matchesStability = stabilityFilter === 'all' || api.stability === stabilityFilter;\n    \n    return matchesSearch && matchesModule && matchesType && matchesStability;\n  });\n\n  // Group APIs by module\n  const apisByModule = filteredAPIs.reduce((acc, api) => {\n    const module = api.module;\n    if (!acc[module]) {\n      acc[module] = [];\n    }\n    acc[module].push(api);\n    return acc;\n  }, {} as Record<string, ApiElement[]>);\n\n  // Get unique modules for filter\n  const modules = Array.from(new Set(scriptRegistry.map((api: ApiElement) => api.module)));\n  \n  // Module icons mapping\n  const moduleIcons: Record<string, any> = {\n    '@minecraft/server': Server,\n    '@minecraft/server-ui': MessageSquare,\n    '@minecraft/server-admin': Shield,\n    '@minecraft/server-gametest': Target,\n    '@minecraft/server-net': Globe,\n    '@minecraft/vanilla-data': Database,\n    'system': Cpu,\n    'common': Package\n  };\n\n  // Tutorial examples\n  const tutorials = {\n    'getting-started': {\n      title: 'Getting Started with Scripting',\n      description: 'Your first script and basic setup',\n      difficulty: 'beginner' as const,\n      estimatedTime: '15 minutes',\n      sections: [\n        {\n          title: 'Setup Your Script',\n          content: 'Create a new script file in your behavior pack',\n          code: `// scripts/main.js\nimport { world, system } from '@minecraft/server';\n\n// This is your main script file\nconsole.log('Script loaded successfully!');\n\n// Basic world interaction\nworld.sendMessage('§aHello from scripts!');`\n        },\n        {\n          title: 'Event Handling',\n          content: 'Listen for game events',\n          code: `import { world } from '@minecraft/server';\n\n// Listen for player spawn\nworld.afterEvents.playerSpawn.subscribe((event) => {\n  const player = event.player;\n  player.sendMessage(\\`Welcome \\${player.name}!\\`);\n  \n  // Give starter items\n  const inventory = player.getComponent('inventory');\n  if (inventory) {\n    inventory.container?.addItem(\n      new ItemStack('minecraft:apple', 5)\n    );\n  }\n});`\n        }\n      ]\n    },\n    'event-systems': {\n      title: 'Advanced Event Systems',\n      description: 'Master the event system for complex behaviors',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '30 minutes',\n      sections: [\n        {\n          title: 'Before vs After Events',\n          content: 'Understanding event timing and cancellation',\n          code: `import { world } from '@minecraft/server';\n\n// Before events can be cancelled\nworld.beforeEvents.itemUse.subscribe((event) => {\n  const { source, itemStack } = event;\n  \n  if (itemStack.typeId === 'minecraft:ender_pearl') {\n    // Cancel the event to prevent teleportation\n    event.cancel = true;\n    source.sendMessage('§cEnder pearls are disabled!');\n  }\n});\n\n// After events provide information after action\nworld.afterEvents.itemUse.subscribe((event) => {\n  const { source, itemStack } = event;\n  \n  // Log item usage for analytics\n  console.log(\\`\\${source.name} used \\${itemStack.typeId}\\`);\n});`\n        },\n        {\n          title: 'Custom Event Handling',\n          content: 'Create custom event systems',\n          code: `import { world, system } from '@minecraft/server';\n\nclass CustomEventManager {\n  private listeners = new Map<string, Function[]>();\n  \n  on(eventName: string, callback: Function) {\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, []);\n    }\n    this.listeners.get(eventName)!.push(callback);\n  }\n  \n  emit(eventName: string, data: any) {\n    const callbacks = this.listeners.get(eventName) || [];\n    callbacks.forEach(callback => callback(data));\n  }\n}\n\nconst eventManager = new CustomEventManager();\n\n// Register custom event\neventManager.on('playerLevelUp', (data) => {\n  const { player, newLevel } = data;\n  world.sendMessage(\\`\\${player.name} reached level \\${newLevel}!\\`);\n});\n\n// Trigger custom event\neventManager.emit('playerLevelUp', { \n  player: somePlayer, \n  newLevel: 10 \n});`\n        }\n      ]\n    },\n    'ui-systems': {\n      title: 'User Interface Development',\n      description: 'Create interactive UIs and forms',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '25 minutes',\n      sections: [\n        {\n          title: 'Action Forms',\n          content: 'Simple button-based menus',\n          code: `import { ActionFormData } from '@minecraft/server-ui';\nimport { world } from '@minecraft/server';\n\nclass MenuSystem {\n  static async showMainMenu(player) {\n    const form = new ActionFormData()\n      .title('§6Server Menu')\n      .body('Choose an option:')\n      .button('§aTeleport Hub', 'textures/ui/world_glyph_color')\n      .button('§bPlayer Stats', 'textures/ui/icon_steve')\n      .button('§eShop', 'textures/ui/coin')\n      .button('§cClose');\n    \n    const response = await form.show(player);\n    \n    if (response.canceled) return;\n    \n    switch (response.selection) {\n      case 0:\n        player.teleport({ x: 0, y: 64, z: 0 });\n        break;\n      case 1:\n        this.showPlayerStats(player);\n        break;\n      case 2:\n        this.showShop(player);\n        break;\n    }\n  }\n}`\n        },\n        {\n          title: 'Modal Forms',\n          content: 'Forms with input fields and controls',\n          code: `import { ModalFormData } from '@minecraft/server-ui';\n\nclass PlayerSettings {\n  static async showSettingsForm(player) {\n    const form = new ModalFormData()\n      .title('§6Player Settings')\n      .textField('Display Name:', 'Enter your display name', player.name)\n      .slider('FOV:', 60, 120, 5, 90)\n      .dropdown('Preferred Language:', [\n        'English', 'Spanish', 'French', 'German'\n      ], 0)\n      .toggle('Enable Notifications', true)\n      .toggle('Auto-Save Progress', true);\n    \n    const response = await form.show(player);\n    \n    if (response.canceled) return;\n    \n    const [displayName, fov, language, notifications, autoSave] = response.formValues;\n    \n    // Save player settings\n    player.setDynamicProperty('settings', JSON.stringify({\n      displayName,\n      fov,\n      language,\n      notifications,\n      autoSave\n    }));\n    \n    player.sendMessage('§aSettings saved successfully!');\n  }\n}`\n        }\n      ]\n    },\n    'world-manipulation': {\n      title: 'World Manipulation & Generation',\n      description: 'Modify and generate world content dynamically',\n      difficulty: 'advanced' as const,\n      estimatedTime: '40 minutes',\n      sections: [\n        {\n          title: 'Block Manipulation',\n          content: 'Advanced block placement and modification',\n          code: `import { world, BlockPermutation, ItemStack } from '@minecraft/server';\n\nclass WorldBuilder {\n  static buildStructure(dimension, startPos, structure) {\n    for (let x = 0; x < structure.length; x++) {\n      for (let y = 0; y < structure[x].length; y++) {\n        for (let z = 0; z < structure[x][y].length; z++) {\n          const blockType = structure[x][y][z];\n          \n          if (blockType !== 'air') {\n            const position = {\n              x: startPos.x + x,\n              y: startPos.y + y,\n              z: startPos.z + z\n            };\n            \n            const block = dimension.getBlock(position);\n            if (block) {\n              block.setPermutation(\n                BlockPermutation.resolve(blockType)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  static createTower(dimension, center, height, material) {\n    for (let y = 0; y < height; y++) {\n      const block = dimension.getBlock({\n        x: center.x,\n        y: center.y + y,\n        z: center.z\n      });\n      \n      if (block) {\n        block.setPermutation(\n          BlockPermutation.resolve(material)\n        );\n      }\n    }\n  }\n}`\n        },\n        {\n          title: 'Entity Management',\n          content: 'Spawn and control entities dynamically',\n          code: `import { world, EntityComponentTypes } from '@minecraft/server';\n\nclass EntityManager {\n  static spawnGuardian(dimension, position, playerToProtect) {\n    const guardian = dimension.spawnEntity('minecraft:iron_golem', position);\n    \n    // Set custom properties\n    guardian.setDynamicProperty('isGuardian', true);\n    guardian.setDynamicProperty('protectedPlayer', playerToProtect.id);\n    \n    // Add custom behavior\n    guardian.addTag('custom_guardian');\n    \n    // Customize appearance\n    const nameComponent = guardian.getComponent(EntityComponentTypes.Nameable);\n    if (nameComponent) {\n      nameComponent.nameTag = \\`\\${playerToProtect.name}'s Guardian\\`;\n    }\n    \n    return guardian;\n  }\n  \n  static teleportAllEntitiesOfType(dimension, entityType, destination) {\n    const entities = dimension.getEntities({\n      type: entityType\n    });\n    \n    entities.forEach(entity => {\n      entity.teleport(destination);\n    });\n    \n    return entities.length;\n  }\n}`\n        }\n      ]\n    },\n    'performance-optimization': {\n      title: 'Performance Optimization',\n      description: 'Write efficient scripts that scale well',\n      difficulty: 'advanced' as const,\n      estimatedTime: '35 minutes',\n      sections: [\n        {\n          title: 'Efficient Event Handling',\n          content: 'Optimize event listeners and processing',\n          code: `import { world, system } from '@minecraft/server';\n\nclass PerformantEventHandler {\n  private static eventQueue = [];\n  private static processing = false;\n  \n  static init() {\n    // Batch process events to reduce lag\n    system.runInterval(() => {\n      this.processEventQueue();\n    }, 1); // Process every tick\n    \n    // Optimized player tracking\n    world.afterEvents.playerSpawn.subscribe((event) => {\n      this.queueEvent('playerSpawn', event);\n    });\n    \n    world.afterEvents.playerLeave.subscribe((event) => {\n      this.queueEvent('playerLeave', event);\n    });\n  }\n  \n  private static queueEvent(type: string, data: any) {\n    this.eventQueue.push({ type, data, timestamp: Date.now() });\n    \n    // Prevent queue from growing too large\n    if (this.eventQueue.length > 1000) {\n      this.eventQueue.shift();\n    }\n  }\n  \n  private static processEventQueue() {\n    if (this.processing || this.eventQueue.length === 0) return;\n    \n    this.processing = true;\n    const batchSize = Math.min(10, this.eventQueue.length);\n    \n    for (let i = 0; i < batchSize; i++) {\n      const event = this.eventQueue.shift();\n      if (event) {\n        this.handleEvent(event);\n      }\n    }\n    \n    this.processing = false;\n  }\n}`\n        },\n        {\n          title: 'Memory Management',\n          content: 'Manage memory and prevent leaks',\n          code: `import { world, system } from '@minecraft/server';\n\nclass MemoryManager {\n  private static intervals = new Map<string, number>();\n  private static timeouts = new Map<string, number>();\n  \n  static setInterval(id: string, callback: () => void, ticks: number) {\n    // Clean up existing interval if exists\n    this.clearInterval(id);\n    \n    const intervalId = system.runInterval(callback, ticks);\n    this.intervals.set(id, intervalId);\n    \n    return intervalId;\n  }\n  \n  static clearInterval(id: string) {\n    const intervalId = this.intervals.get(id);\n    if (intervalId !== undefined) {\n      system.clearRun(intervalId);\n      this.intervals.delete(id);\n    }\n  }\n  \n  static setTimeout(id: string, callback: () => void, ticks: number) {\n    this.clearTimeout(id);\n    \n    const timeoutId = system.runTimeout(callback, ticks);\n    this.timeouts.set(id, timeoutId);\n    \n    return timeoutId;\n  }\n  \n  static clearTimeout(id: string) {\n    const timeoutId = this.timeouts.get(id);\n    if (timeoutId !== undefined) {\n      system.clearRun(timeoutId);\n      this.timeouts.delete(id);\n    }\n  }\n  \n  static cleanup() {\n    // Clear all managed intervals and timeouts\n    this.intervals.forEach(id => system.clearRun(id));\n    this.timeouts.forEach(id => system.clearRun(id));\n    this.intervals.clear();\n    this.timeouts.clear();\n  }\n}`\n        }\n      ]\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'text-green-600 dark:text-green-400';\n      case 'intermediate': return 'text-yellow-600 dark:text-yellow-400';\n      case 'advanced': return 'text-red-600 dark:text-red-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const getStabilityColor = (stability: string) => {\n    switch (stability) {\n      case 'stable': return 'text-green-600 dark:text-green-400';\n      case 'experimental': return 'text-orange-600 dark:text-orange-400';\n      case 'beta': return 'text-blue-600 dark:text-blue-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'class': return Code;\n      case 'interface': return Layers;\n      case 'enum': return Settings;\n      case 'function': return Zap;\n      case 'constant': return Database;\n      default: return Package;\n    }\n  };\n\n  return (\n    <section className=\"p-6 max-w-7xl mx-auto\" data-testid=\"scripting-docs\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold text-foreground mb-4\">Scripting API Documentation</h1>\n        <p className=\"text-xl text-muted-foreground mb-6\">\n          Complete reference for Minecraft: Bedrock Edition scripting APIs and JavaScript integration\n        </p>\n        \n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">APIs</p>\n                <p className=\"text-2xl font-bold\">{scriptRegistry.length}</p>\n              </div>\n              <Code className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Modules</p>\n                <p className=\"text-2xl font-bold\">{modules.length}</p>\n              </div>\n              <Package className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Stable</p>\n                <p className=\"text-2xl font-bold\">\n                  {scriptRegistry.filter(api => api.stability === 'stable').length}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Experimental</p>\n                <p className=\"text-2xl font-bold\">\n                  {scriptRegistry.filter(api => api.stability === 'experimental').length}\n                </p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"api-reference\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"api-reference\">API Reference</TabsTrigger>\n          <TabsTrigger value=\"tutorials\">Tutorials</TabsTrigger>\n          <TabsTrigger value=\"examples\">Code Examples</TabsTrigger>\n          <TabsTrigger value=\"best-practices\">Best Practices</TabsTrigger>\n        </TabsList>\n\n        {/* API Reference Tab */}\n        <TabsContent value=\"api-reference\" className=\"space-y-6\">\n          {/* Search and Filters */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n                <div className=\"lg:col-span-2\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n                    <Input\n                      placeholder=\"Search APIs, modules, or descriptions...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-api-search\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={moduleFilter} onValueChange={setModuleFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Module\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Modules</SelectItem>\n                    {modules.map(module => (\n                      <SelectItem key={module} value={module}>{module}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={typeFilter} onValueChange={(value: any) => setTypeFilter(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"class\">Classes</SelectItem>\n                    <SelectItem value=\"interface\">Interfaces</SelectItem>\n                    <SelectItem value=\"enum\">Enums</SelectItem>\n                    <SelectItem value=\"function\">Functions</SelectItem>\n                    <SelectItem value=\"constant\">Constants</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={stabilityFilter} onValueChange={(value: any) => setStabilityFilter(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Stability\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Stability</SelectItem>\n                    <SelectItem value=\"stable\">Stable</SelectItem>\n                    <SelectItem value=\"experimental\">Experimental</SelectItem>\n                    <SelectItem value=\"beta\">Beta</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {(searchTerm || moduleFilter !== 'all' || typeFilter !== 'all' || stabilityFilter !== 'all') && (\n                <div className=\"mt-4 flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Showing {filteredAPIs.length} of {scriptRegistry.length} APIs\n                  </span>\n                  {filteredAPIs.length < scriptRegistry.length && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSearchTerm('');\n                        setModuleFilter('all');\n                        setTypeFilter('all');\n                        setStabilityFilter('all');\n                      }}\n                    >\n                      Clear Filters\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {/* API Browser */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Scripting APIs</CardTitle>\n                  <CardDescription>\n                    Browse through all available scripting APIs and their methods\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Accordion type=\"multiple\" className=\"space-y-2\">\n                    {Object.entries(apisByModule).map(([module, apis]) => {\n                      const IconComponent = moduleIcons[module] || Package;\n                      return (\n                        <AccordionItem key={module} value={module} className=\"border rounded-lg\">\n                          <AccordionTrigger className=\"px-4 hover:bg-muted\">\n                            <div className=\"flex items-center justify-between w-full\">\n                              <div className=\"flex items-center gap-2\">\n                                <IconComponent size={16} />\n                                <span className=\"font-mono text-sm\">{module}</span>\n                              </div>\n                              <Badge variant=\"secondary\">{apis.length}</Badge>\n                            </div>\n                          </AccordionTrigger>\n                          <AccordionContent className=\"px-4 pb-4\">\n                            <div className=\"space-y-2\">\n                              {apis.map((api) => {\n                                const TypeIcon = getTypeIcon(api.type);\n                                return (\n                                  <div\n                                    key={api.name}\n                                    className=\"p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors\"\n                                    onClick={() => setSelectedAPI(api)}\n                                    data-testid={`api-${api.name.replace(/[^a-zA-Z0-9]/g, '-')}`}\n                                  >\n                                    <div className=\"flex items-start justify-between\">\n                                      <div className=\"flex-1\">\n                                        <div className=\"flex items-center gap-2 mb-1\">\n                                          <TypeIcon size={14} />\n                                          <h4 className=\"font-mono text-sm text-primary\">{api.name}</h4>\n                                          <Badge variant=\"outline\" className=\"text-xs\">\n                                            {api.type}\n                                          </Badge>\n                                          <Badge \n                                            variant=\"outline\" \n                                            className={`text-xs ${getStabilityColor(api.stability || 'stable')}`}\n                                          >\n                                            {api.stability}\n                                          </Badge>\n                                        </div>\n                                        <p className=\"text-sm text-muted-foreground\">{api.description}</p>\n                                        {api.since && (\n                                          <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                                            Since {api.since}\n                                          </Badge>\n                                        )}\n                                        {api.keywords.length > 0 && (\n                                          <div className=\"flex flex-wrap gap-1 mt-2\">\n                                            {api.keywords.slice(0, 3).map((keyword: string) => (\n                                              <Badge key={keyword} variant=\"outline\" className=\"text-xs\">\n                                                {keyword}\n                                              </Badge>\n                                            ))}\n                                          </div>\n                                        )}\n                                      </div>\n                                      <ChevronRight size={16} className=\"text-muted-foreground\" />\n                                    </div>\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          </AccordionContent>\n                        </AccordionItem>\n                      );\n                    })}\n                  </Accordion>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* API Details */}\n            <div className=\"space-y-6\">\n              {selectedAPI ? (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"font-mono text-lg break-all\">{selectedAPI.name}</CardTitle>\n                    <CardDescription>{selectedAPI.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge variant=\"secondary\">{selectedAPI.module}</Badge>\n                      <Badge variant=\"outline\">{selectedAPI.type}</Badge>\n                      <Badge \n                        variant=\"outline\" \n                        className={getStabilityColor(selectedAPI.stability || 'stable')}\n                      >\n                        {selectedAPI.stability}\n                      </Badge>\n                      {selectedAPI.since && (\n                        <Badge variant=\"outline\">\n                          Since {selectedAPI.since}\n                        </Badge>\n                      )}\n                    </div>\n\n                    <Tabs defaultValue=\"overview\">\n                      <TabsList className=\"grid grid-cols-3 w-full\">\n                        <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                        <TabsTrigger value=\"example\">Example</TabsTrigger>\n                        <TabsTrigger value=\"details\">Details</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"overview\" className=\"space-y-3\">\n                        <div className=\"space-y-3\">\n                          <div>\n                            <h5 className=\"font-medium mb-2\">Purpose</h5>\n                            <p className=\"text-sm text-muted-foreground\">{selectedAPI.description}</p>\n                          </div>\n                          \n                          {selectedAPI.parameters && selectedAPI.parameters.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Parameters</h5>\n                              <div className=\"space-y-2\">\n                                {selectedAPI.parameters.map((param, index) => (\n                                  <div key={index} className=\"p-2 bg-muted rounded-lg\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <span className=\"font-mono text-sm\">{param.name}</span>\n                                      <Badge variant=\"outline\" className=\"text-xs\">{param.type}</Badge>\n                                    </div>\n                                    <p className=\"text-xs text-muted-foreground mt-1\">{param.description}</p>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {selectedAPI.returnType && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Returns</h5>\n                              <Badge variant=\"outline\">{selectedAPI.returnType}</Badge>\n                            </div>\n                          )}\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"example\" className=\"space-y-3\">\n                        {selectedAPI.examples && selectedAPI.examples.length > 0 ? (\n                          <div>\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h5 className=\"font-medium\">Code Example</h5>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => copyToClipboard(selectedAPI.examples![0].code, `${selectedAPI.name} example`)}\n                                data-testid=\"button-copy-example\"\n                              >\n                                <Copy size={14} className=\"mr-1\" />\n                                Copy\n                              </Button>\n                            </div>\n                            <CodePreview code={selectedAPI.examples[0].code} language=\"javascript\" />\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground\">No example available</p>\n                        )}\n                      </TabsContent>\n\n                      <TabsContent value=\"details\" className=\"space-y-3\">\n                        <div className=\"space-y-3\">\n                          {selectedAPI.keywords.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">Keywords</h5>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedAPI.keywords.map((keyword: string) => (\n                                  <Badge key={keyword} variant=\"secondary\" className=\"text-xs\">\n                                    {keyword}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {selectedAPI.relatedElements && selectedAPI.relatedElements.length > 0 && (\n                            <div>\n                              <h5 className=\"font-medium mb-2\">See Also</h5>\n                              <div className=\"space-y-1\">\n                                {selectedAPI.relatedElements.map((ref: string, index: number) => (\n                                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                    {ref}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card>\n                  <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n                    <Search size={48} className=\"text-muted-foreground mb-4\" />\n                    <h3 className=\"font-medium text-foreground mb-2\">Select an API</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Choose an API from the list to view its documentation and examples\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Quick Reference */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Quick Reference</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3 text-sm\">\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Core Modules</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• @minecraft/server - World interaction</li>\n                      <li>• @minecraft/server-ui - User interfaces</li>\n                      <li>• system - Timing and scheduling</li>\n                      <li>• @minecraft/server-admin - Admin functions</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Common Patterns</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• Event subscription for reactivity</li>\n                      <li>• Component-based entity manipulation</li>\n                      <li>• Form-based user interaction</li>\n                      <li>• Dynamic property storage</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium mb-1\">Performance Tips</h5>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• Batch operations when possible</li>\n                      <li>• Use system.runInterval wisely</li>\n                      <li>• Clean up event listeners</li>\n                      <li>• Cache frequent calculations</li>\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Tutorials Tab */}\n        <TabsContent value=\"tutorials\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Choose a Tutorial</h3>\n              {Object.entries(tutorials).map(([key, tutorial]) => (\n                <Card\n                  key={key}\n                  className={`cursor-pointer transition-colors ${selectedTutorial === key ? 'border-primary' : ''}`}\n                  onClick={() => setSelectedTutorial(key)}\n                  data-testid={`tutorial-${key}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">{tutorial.title}</h4>\n                      <Badge \n                        variant={tutorial.difficulty === 'beginner' ? 'secondary' : \n                                tutorial.difficulty === 'intermediate' ? 'default' : 'destructive'}\n                        className=\"text-xs\"\n                      >\n                        {tutorial.difficulty}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{tutorial.description}</p>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <Clock size={12} />\n                      <span>{tutorial.estimatedTime}</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <div className=\"lg:col-span-2\">\n              {tutorials[selectedTutorial as keyof typeof tutorials] && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>{tutorials[selectedTutorial as keyof typeof tutorials].title}</CardTitle>\n                    <CardDescription>\n                      {tutorials[selectedTutorial as keyof typeof tutorials].description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge \n                        variant={tutorials[selectedTutorial as keyof typeof tutorials].difficulty === 'beginner' ? 'secondary' : \n                                tutorials[selectedTutorial as keyof typeof tutorials].difficulty === 'intermediate' ? 'default' : 'destructive'}\n                      >\n                        {tutorials[selectedTutorial as keyof typeof tutorials].difficulty}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                        <Clock size={12} />\n                        {tutorials[selectedTutorial as keyof typeof tutorials].estimatedTime}\n                      </Badge>\n                    </div>\n\n                    {tutorials[selectedTutorial as keyof typeof tutorials].sections.map((section, index) => (\n                      <div key={index} className=\"space-y-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground text-sm font-medium\">\n                            {index + 1}\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium\">{section.title}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{section.content}</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"ml-11\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h5 className=\"font-medium text-sm\">Code Example</h5>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(section.code, section.title)}\n                              data-testid={`button-copy-section-${index}`}\n                            >\n                              <Copy size={14} className=\"mr-1\" />\n                              Copy\n                            </Button>\n                          </div>\n                          <CodePreview code={section.code} language=\"javascript\" />\n                        </div>\n                        \n                        {index < tutorials[selectedTutorial as keyof typeof tutorials].sections.length - 1 && (\n                          <Separator className=\"my-6\" />\n                        )}\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Code Examples Tab */}\n        <TabsContent value=\"examples\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Terminal className=\"mr-2\" size={20} />\n                  Event System Examples\n                </CardTitle>\n                <CardDescription>Common event handling patterns</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <CodePreview \n                  language=\"javascript\" \n                  code={`import { world } from '@minecraft/server';\n\n// Player join/leave tracking\nconst players = new Set();\n\nworld.afterEvents.playerSpawn.subscribe((event) => {\n  players.add(event.player.id);\n  world.sendMessage(\\`Welcome \\${event.player.name}!\\`);\n});\n\nworld.afterEvents.playerLeave.subscribe((event) => {\n  players.delete(event.playerId);\n  world.sendMessage(\\`\\${event.playerName} left the game\\`);\n});\n\n// Block interaction logging\nworld.afterEvents.playerInteractWithBlock.subscribe((event) => {\n  const { player, block } = event;\n  console.log(\\`\\${player.name} interacted with \\${block.typeId}\\`);\n});`}\n                />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MessageSquare className=\"mr-2\" size={20} />\n                  UI Form Examples\n                </CardTitle>\n                <CardDescription>Interactive user interface creation</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <CodePreview \n                  language=\"javascript\" \n                  code={`import { ActionFormData, ModalFormData } from '@minecraft/server-ui';\n\n// Simple action form\nasync function showMainMenu(player) {\n  const form = new ActionFormData()\n    .title('Server Menu')\n    .body('Choose an option:')\n    .button('Teleport Home')\n    .button('Player Stats')\n    .button('Settings');\n  \n  const response = await form.show(player);\n  \n  if (!response.canceled) {\n    switch (response.selection) {\n      case 0: \n        player.teleport({ x: 0, y: 64, z: 0 });\n        break;\n      case 1:\n        showPlayerStats(player);\n        break;\n      case 2:\n        showSettings(player);\n        break;\n    }\n  }\n}`}\n                />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Globe className=\"mr-2\" size={20} />\n                  World Manipulation\n                </CardTitle>\n                <CardDescription>Modify blocks and spawn entities</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <CodePreview \n                  language=\"javascript\" \n                  code={`import { world, BlockPermutation } from '@minecraft/server';\n\n// Build a simple structure\nfunction buildHouse(dimension, center) {\n  // Foundation\n  for (let x = -2; x <= 2; x++) {\n    for (let z = -2; z <= 2; z++) {\n      const block = dimension.getBlock({\n        x: center.x + x,\n        y: center.y,\n        z: center.z + z\n      });\n      block?.setPermutation(\n        BlockPermutation.resolve('minecraft:stone')\n      );\n    }\n  }\n  \n  // Walls\n  for (let y = 1; y <= 3; y++) {\n    // Front and back walls\n    for (let x = -2; x <= 2; x++) {\n      [center.z - 2, center.z + 2].forEach(z => {\n        const block = dimension.getBlock({\n          x: center.x + x,\n          y: center.y + y,\n          z: z\n        });\n        block?.setPermutation(\n          BlockPermutation.resolve('minecraft:oak_planks')\n        );\n      });\n    }\n  }\n}`}\n                />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"mr-2\" size={20} />\n                  Timing & Scheduling\n                </CardTitle>\n                <CardDescription>System timing and interval management</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <CodePreview \n                  language=\"javascript\" \n                  code={`import { system, world } from '@minecraft/server';\n\n// Run code on next tick\nsystem.run(() => {\n  console.log('This runs next tick');\n});\n\n// Repeating timer\nconst timerId = system.runInterval(() => {\n  world.getAllPlayers().forEach(player => {\n    player.sendMessage('§6Timer tick!');\n  });\n}, 100); // Every 5 seconds (100 ticks)\n\n// Delayed execution\nsystem.runTimeout(() => {\n  system.clearRun(timerId);\n  world.sendMessage('§aTimer stopped!');\n}, 600); // After 30 seconds\n\n// Conditional interval\nlet counter = 0;\nconst conditionalTimer = system.runInterval(() => {\n  counter++;\n  if (counter >= 10) {\n    system.clearRun(conditionalTimer);\n    world.sendMessage('§cConditional timer finished!');\n  }\n}, 20);`}\n                />\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Best Practices Tab */}\n        <TabsContent value=\"best-practices\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-green-600 dark:text-green-400\">✅ Best Practices</CardTitle>\n                <CardDescription>Follow these guidelines for optimal script performance</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <ul className=\"text-sm space-y-2\">\n                  <li>• Always handle promise rejections and errors</li>\n                  <li>• Use system.run for heavy computations</li>\n                  <li>• Clean up intervals and timeouts properly</li>\n                  <li>• Validate user input in forms and commands</li>\n                  <li>• Use dynamic properties for persistent data</li>\n                  <li>• Batch multiple operations together</li>\n                  <li>• Test scripts in different game scenarios</li>\n                  <li>• Use meaningful variable and function names</li>\n                  <li>• Comment complex logic thoroughly</li>\n                  <li>• Keep scripts modular and reusable</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-red-600 dark:text-red-400\">❌ Common Mistakes</CardTitle>\n                <CardDescription>Avoid these common pitfalls in script development</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <ul className=\"text-sm space-y-2\">\n                  <li>• Not checking if entities/blocks exist before use</li>\n                  <li>• Creating memory leaks with uncleaned intervals</li>\n                  <li>• Ignoring experimental API warnings</li>\n                  <li>• Not handling form cancellation properly</li>\n                  <li>• Overusing system.runInterval for simple tasks</li>\n                  <li>• Hardcoding player names or IDs</li>\n                  <li>• Not testing with multiple players</li>\n                  <li>• Forgetting to import required modules</li>\n                  <li>• Using synchronous operations in async contexts</li>\n                  <li>• Not considering edge cases and error states</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"mr-2\" size={20} />\n                Performance Optimization Guidelines\n              </CardTitle>\n              <CardDescription>Techniques for writing efficient scripts</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div>\n                  <h5 className=\"font-medium text-blue-600 dark:text-blue-400 mb-3\">Event Handling</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Use specific event filters when available</li>\n                    <li>• Unsubscribe from unused events</li>\n                    <li>• Batch event processing when possible</li>\n                    <li>• Avoid heavy computation in event handlers</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium text-green-600 dark:text-green-400 mb-3\">Data Management</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Use dynamic properties for persistence</li>\n                    <li>• Cache frequently accessed data</li>\n                    <li>• Minimize JSON parsing/stringifying</li>\n                    <li>• Clean up unused dynamic properties</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium text-purple-600 dark:text-purple-400 mb-3\">System Resources</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Use appropriate interval durations</li>\n                    <li>• Limit concurrent async operations</li>\n                    <li>• Monitor script execution time</li>\n                    <li>• Optimize entity/block queries</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Lightbulb className=\"mr-2\" size={20} />\n                Advanced Techniques\n              </CardTitle>\n              <CardDescription>Professional patterns for complex addons</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <h5 className=\"font-medium mb-2\">Modular Architecture</h5>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Organize your scripts into modules for better maintainability and reusability.\n                  </p>\n                  <CodePreview \n                    language=\"javascript\" \n                    code={`// utils/playerManager.js\nexport class PlayerManager {\n  static getPlayerStats(player) {\n    return {\n      health: player.getComponent('health'),\n      inventory: player.getComponent('inventory'),\n      location: player.location\n    };\n  }\n}\n\n// main.js\nimport { PlayerManager } from './utils/playerManager.js';\n\nworld.afterEvents.playerSpawn.subscribe((event) => {\n  const stats = PlayerManager.getPlayerStats(event.player);\n  console.log('Player stats:', stats);\n});`}\n                  />\n                </div>\n                \n                <div>\n                  <h5 className=\"font-medium mb-2\">Error Handling</h5>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Implement robust error handling to prevent script crashes.\n                  </p>\n                  <CodePreview \n                    language=\"javascript\" \n                    code={`import { world } from '@minecraft/server';\n\nfunction safeExecute(fn, errorMessage = 'An error occurred') {\n  try {\n    return fn();\n  } catch (error) {\n    console.error(\\`\\${errorMessage}:\\`, error);\n    world.sendMessage(\\`§c\\${errorMessage}\\`);\n    return null;\n  }\n}\n\n// Usage\nconst result = safeExecute(() => {\n  // Potentially dangerous operation\n  return player.getComponent('inventory').container.getItem(0);\n}, 'Failed to get player inventory item');`}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </section>\n  );\n}","size_bytes":52779},"client/src/components/Layout/Header.tsx":{"content":"import { Download, Save, Home, Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport omniScienceLogo from \"@assets/omni-science_1758171429429.png\";\n\ninterface HeaderProps {\n  currentSection: string;\n  onMenuToggle?: () => void;\n  isSidebarOpen?: boolean;\n}\n\nconst sectionTitles: Record<string, { title: string; subtitle: string }> = {\n  'welcome': {\n    title: 'Welcome',\n    subtitle: 'Get started with Minecraft Bedrock Edition addon development'\n  },\n  'tutorial': {\n    title: 'Interactive Tutorial',\n    subtitle: 'Learn by doing - create your first addon step by step'\n  },\n  'quick-start': {\n    title: 'Quick Start Guide',\n    subtitle: 'Fast track to creating your first addon'\n  },\n  'docs-concepts': {\n    title: 'Core Concepts',\n    subtitle: 'Understanding the fundamentals of addon development'\n  },\n  'docs-entities': {\n    title: 'Entity Documentation',\n    subtitle: 'Complete guide to creating custom entities'\n  },\n  'docs-blocks': {\n    title: 'Block Documentation',\n    subtitle: 'Learn how to create custom blocks'\n  },\n  'docs-items': {\n    title: 'Item Documentation',\n    subtitle: 'Guide to creating custom items'\n  },\n  'docs-scripting': {\n    title: 'Scripting APIs',\n    subtitle: 'JavaScript APIs for dynamic content'\n  },\n  'builder-entity': {\n    title: 'Entity Builder',\n    subtitle: 'Create custom mobs and NPCs with interactive components'\n  },\n  'builder-client-entity': {\n    title: 'Client Entity Builder',\n    subtitle: 'Define visual and audio properties for entities'\n  },\n  'builder-block': {\n    title: 'Block Builder',\n    subtitle: 'Design custom blocks with unique properties'\n  },\n  'builder-item': {\n    title: 'Item Builder',\n    subtitle: 'Create custom items and tools'\n  },\n  'builder-recipe': {\n    title: 'Recipe Builder',\n    subtitle: 'Design crafting and cooking recipes'\n  },\n  'builder-loot': {\n    title: 'Loot Table Builder',\n    subtitle: 'Configure drops and rewards'\n  },\n  'builder-biome': {\n    title: 'Biome Builder',\n    subtitle: 'Create custom world biomes'\n  },\n  'builder-spawn': {\n    title: 'Spawn Rule Builder',\n    subtitle: 'Control where and when entities spawn'\n  },\n  'texture-creator': {\n    title: 'Texture Creator',\n    subtitle: 'Advanced 2D texture editor with layers and custom brushes'\n  },\n  'script-studio': {\n    title: 'Script Studio',\n    subtitle: 'Interactive script builder with API explorer'\n  },\n  'addon-packager': {\n    title: 'Addon Packager',\n    subtitle: 'Export complete addon packs'\n  },\n  'validator': {\n    title: 'JSON Validator',\n    subtitle: 'Validate and debug your addon files'\n  },\n  'external-tools': {\n    title: 'External Tools',\n    subtitle: 'Professional integrated tools for complete Minecraft development workflow'\n  },\n  'community': {\n    title: 'Community Hub',\n    subtitle: 'Connect with the Omni-Science Game Studio community and access professional resources'\n  },\n  'omni-science': {\n    title: 'Omni-Science Game Studio',\n    subtitle: 'Explore our game studio, team, and mission (supporting The Helping Guild)'\n  }\n};\n\nexport default function Header({ currentSection, onMenuToggle, isSidebarOpen }: HeaderProps) {\n  const isMobile = useIsMobile();\n  const sectionInfo = sectionTitles[currentSection] || sectionTitles.welcome;\n  const [, setLocation] = useLocation();\n\n  const handleLogoClick = () => {\n    setLocation('/');\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border\" data-testid=\"header\">\n      {/* Top row with logo and main title */}\n      <div className=\"flex items-center justify-between p-3 sm:p-4 pb-2\">\n        <div className=\"flex items-center space-x-2 sm:space-x-4 flex-1 min-w-0\">\n          {/* Mobile hamburger menu */}\n          {isMobile && onMenuToggle && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onMenuToggle}\n              className=\"p-2 min-h-[44px] min-w-[44px] flex items-center justify-center mr-2\"\n              data-testid=\"mobile-menu-button\"\n              aria-label={isSidebarOpen ? \"Close menu\" : \"Open menu\"}\n            >\n              <Menu size={20} />\n            </Button>\n          )}\n          \n          <button \n            onClick={handleLogoClick}\n            className=\"flex items-center space-x-2 sm:space-x-3 hover:opacity-80 transition-opacity cursor-pointer group flex-1 min-w-0\"\n            data-testid=\"logo-home-button\"\n            aria-label=\"Go to home page\"\n          >\n            <img \n              src={omniScienceLogo} \n              alt=\"Omni-Science Logo\" \n              className=\"h-10 w-auto sm:h-12 md:h-14 lg:h-16 transition-transform group-hover:scale-105 flex-shrink-0\"\n              data-testid=\"omni-science-logo\"\n            />\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"text-lg sm:text-xl md:text-2xl font-bold text-foreground leading-tight truncate\">\n                Omni-Science Game Studio\n              </h1>\n              <p className=\"text-xs sm:text-sm text-muted-foreground -mt-1 truncate\">\n                Professional Game Development Tools\n              </p>\n            </div>\n          </button>\n        </div>\n        \n        {/* Action buttons */}\n        <div className=\"flex items-center space-x-2 sm:space-x-3 flex-shrink-0\">\n          <Button \n            variant=\"secondary\" \n            size=\"sm\"\n            data-testid=\"button-export\"\n            className=\"hidden lg:flex min-h-[44px]\"\n          >\n            <Download className=\"mr-2\" size={16} />\n            Export Project\n          </Button>\n          <Button \n            variant=\"secondary\" \n            size=\"sm\"\n            data-testid=\"button-export-mobile\"\n            className=\"lg:hidden min-h-[44px] min-w-[44px] p-2\"\n            title=\"Export Project\"\n          >\n            <Download size={16} />\n          </Button>\n          <Button \n            size=\"sm\"\n            data-testid=\"button-save\"\n            className=\"min-h-[44px]\"\n          >\n            <Save className=\"mr-1 sm:mr-2\" size={16} />\n            <span className=\"hidden md:inline\">Save Progress</span>\n            <span className=\"hidden sm:inline md:hidden\">Save</span>\n            <span className=\"sm:hidden sr-only\">Save</span>\n          </Button>\n        </div>\n      </div>\n      \n      {/* Bottom row with current section info and credits */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between px-3 sm:px-4 pb-3 pt-1 space-y-2 sm:space-y-0\">\n        <div className=\"flex-1 min-w-0\">\n          <h2 className=\"text-base sm:text-lg font-semibold text-foreground truncate\" data-testid=\"page-title\">\n            {sectionInfo.title}\n          </h2>\n          <p className=\"text-xs sm:text-sm text-muted-foreground line-clamp-2 sm:line-clamp-1\" data-testid=\"page-subtitle\">\n            {sectionInfo.subtitle}\n          </p>\n        </div>\n        \n        {/* Credits - responsive layout */}\n        <div className=\"hidden xl:flex flex-col text-right text-xs text-muted-foreground flex-shrink-0\">\n          <span data-testid=\"creator-credit\">Created by king_of_coding</span>\n          <span data-testid=\"ownership-credit\" className=\"font-medium\">Owned by Omni-Science Game Studio</span>\n        </div>\n        \n        {/* Credits - compact for smaller screens */}\n        <div className=\"xl:hidden flex justify-center sm:justify-end\">\n          <div className=\"text-xs text-muted-foreground text-center sm:text-right\">\n            <div className=\"flex flex-wrap justify-center sm:justify-end items-center gap-1\">\n              <span data-testid=\"creator-credit-compact\">Created by king_of_coding</span>\n              <span className=\"hidden sm:inline\">•</span>\n              <span data-testid=\"ownership-credit-compact\" className=\"font-medium\">Owned by Omni-Science Game Studio</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":7999},"client/src/components/Layout/Sidebar.tsx":{"content":"import { ChevronDown, ChevronRight, Minimize2, Maximize2, Box, Home } from \"lucide-react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useEffect } from \"react\";\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection } from \"@/components/ui/collapsible-section\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { getEmojiWithFallback, type EmojiName } from \"@/assets/emoji-mapping\";\n\ninterface SidebarProps {\n  currentSection: string;\n  onSectionChange: (section: string) => void;\n  collapsed: boolean;\n  onToggleCollapse: () => void;\n}\n\nexport default function Sidebar({ currentSection, onSectionChange, collapsed, onToggleCollapse }: SidebarProps) {\n  const isMobile = useIsMobile();\n\n  // Auto-collapse sidebar on mobile mount\n  useEffect(() => {\n    if (isMobile && !collapsed) {\n      onToggleCollapse();\n    }\n  }, [isMobile]);\n\n  // Collapsible state for navigation sections\n  const sectionNames = ['getting-started', 'documentation', 'builders', 'tools', 'community'];\n  const navCollapsible = useCollapsible({\n    storageKey: 'sidebar-sections',\n    defaultCollapsed: false,\n    initialSections: sectionNames\n  });\n\n  const handleSectionChange = (section: string) => {\n    onSectionChange(section);\n    // Auto-close sidebar on mobile after navigation\n    if (isMobile && !collapsed) {\n      onToggleCollapse();\n    }\n  };\n  const navSections = [\n    {\n      title: \"Getting Started\",\n      items: [\n        { id: 'welcome', icon: 'omniScience', label: 'Welcome' },\n        { id: 'tutorial', icon: 'documentation', label: 'Interactive Tutorial' },\n        { id: 'quick-start', icon: 'documentation', label: 'Quick Start Guide' },\n      ]\n    },\n    {\n      title: \"Documentation\", \n      items: [\n        { id: 'docs-concepts', icon: 'coreConcepts', label: 'Core Concepts' },\n        { id: 'docs-entities', icon: 'entityBuilder', label: 'Entities' },\n        { id: 'docs-blocks', icon: 'blockBuilder', label: 'Blocks' },\n        { id: 'docs-items', icon: 'itemBuilder', label: 'Items' },\n        { id: 'docs-scripting', icon: 'scriptStudio', label: 'Scripting APIs' },\n      ]\n    },\n    {\n      title: \"Builders\",\n      items: [\n        { id: 'builder-entity', icon: 'entityBuilder', label: 'Entity Builder' },\n        { id: 'builder-client-entity', icon: 'entityBuilder', label: 'Client Entity' },\n        { id: 'builder-block', icon: 'blockBuilder', label: 'Block Builder' },\n        { id: 'builder-item', icon: 'itemBuilder', label: 'Item Builder' },\n        { id: 'builder-recipe', icon: 'recipeBuilder', label: 'Recipe Builder' },\n        { id: 'builder-loot', icon: 'lootBuilder', label: 'Loot Tables' },\n        { id: 'builder-biome', icon: 'biomeBuilder', label: 'Biome Builder' },\n        { id: 'builder-spawn', icon: 'spawnBuilder', label: 'Spawn Rules' },\n      ]\n    },\n    {\n      title: \"Tools\",\n      items: [\n        { id: 'script-studio', icon: 'scriptStudio', label: 'Script Studio' },\n        { id: 'addon-packager', icon: 'addonPackager', label: 'Addon Packager' },\n        { id: 'validator', icon: 'validator', label: 'JSON Validator' },\n        { id: 'external-tools', icon: 'externalTools', label: 'External Tools' },\n      ]\n    },\n    {\n      title: \"Community\",\n      items: [\n        { id: 'community', icon: 'community', label: 'Community Hub' },\n        { id: 'omni-science', icon: 'omniScience', label: 'Omni-Science' },\n      ]\n    }\n  ];\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isMobile && !collapsed && (\n        <div \n          className=\"sidebar-overlay open\"\n          onClick={onToggleCollapse}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n      \n      <aside \n        className={`bg-card border-r border-border flex-shrink-0 transition-all duration-300 h-screen flex flex-col ${\n          isMobile \n            ? `sidebar-mobile ${!collapsed ? 'open' : ''}` \n            : collapsed \n            ? 'sidebar-collapsed' \n            : 'w-64'\n        }`}\n        data-testid=\"sidebar\"\n      >\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <span className=\"text-lg text-primary-foreground\">\n                {getEmojiWithFallback('omniScience')}\n              </span>\n            </div>\n            {(!collapsed || isMobile) && (\n              <div className=\"nav-text\">\n                <h1 className=\"text-base sm:text-lg font-bold text-foreground\">Creator Suite</h1>\n                <p className=\"text-xs text-muted-foreground\">Minecraft Bedrock</p>\n              </div>\n            )}\n          </div>\n          {!isMobile && (\n            <button \n              onClick={onToggleCollapse}\n              className=\"p-2 hover:bg-secondary rounded-md transition-colors min-h-[44px] min-w-[44px] flex items-center justify-center\"\n              data-testid=\"sidebar-toggle\"\n              aria-label=\"Toggle sidebar\"\n            >\n              <svg className=\"w-4 h-4 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n              </svg>\n            </button>\n          )}\n        </div>\n      </div>\n\n      <nav className=\"p-2 flex-1 overflow-y-auto\">\n        <TooltipProvider>\n          {/* Global collapse/expand controls */}\n          {(!collapsed || isMobile) && (\n            <div className=\"flex items-center justify-between mb-4 px-2\">\n              <span className=\"text-xs text-muted-foreground\">\n                Navigation Sections\n              </span>\n              <div className=\"flex gap-1\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={navCollapsible.expandAll}\n                      disabled={navCollapsible.getCollapsedCount() === 0}\n                      className=\"h-6 w-6 p-0\"\n                      data-testid=\"sidebar-expand-all\"\n                    >\n                      <Maximize2 className=\"w-3 h-3\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Expand all sections</TooltipContent>\n                </Tooltip>\n                \n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={navCollapsible.collapseAll}\n                      disabled={navCollapsible.getExpandedCount() === 0}\n                      className=\"h-6 w-6 p-0\"\n                      data-testid=\"sidebar-collapse-all\"\n                    >\n                      <Minimize2 className=\"w-3 h-3\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Collapse all sections</TooltipContent>\n                </Tooltip>\n              </div>\n            </div>\n          )}\n\n          {navSections.map((section, index) => {\n            const sectionId = sectionNames[index];\n            const isCollapsed = navCollapsible.isCollapsed(sectionId);\n            \n            return (\n              <div key={section.title} className=\"mb-2\">\n                <CollapsibleSection\n                  id={sectionId}\n                  title={section.title}\n                  badge={section.items.length}\n                  collapsed={isCollapsed}\n                  onToggle={(collapsed) => navCollapsible.setSection(sectionId, collapsed)}\n                  className=\"rounded-md border border-transparent hover:border-border/50 transition-colors\"\n                  triggerClassName={`hover:bg-muted/50 ${(!collapsed || isMobile) ? \"block\" : \"hidden\"}`}\n                  showChevron={!collapsed || isMobile}\n                  data-testid={`nav-section-${sectionId}`}\n                >\n                  <ul className=\"space-y-1\">\n                    {section.items.map((item) => {\n                      return (\n                        <li key={item.id}>\n                          <button\n                            className={`nav-item w-full flex items-center space-x-3 px-3 py-3 sm:py-2 rounded-md text-left min-h-[44px] text-sm sm:text-base ${\n                              currentSection === item.id ? 'active' : ''\n                            }`}\n                            onClick={() => handleSectionChange(item.id)}\n                            data-testid={`nav-${item.id}`}\n                          >\n                            <span className=\"w-5 flex-shrink-0 text-base flex items-center justify-center\">\n                              {getEmojiWithFallback(item.icon as EmojiName)}\n                            </span>\n                            {(!collapsed || isMobile) && <span className=\"nav-text\">{item.label}</span>}\n                          </button>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </CollapsibleSection>\n              </div>\n            );\n          })}\n        </TooltipProvider>\n      </nav>\n    </aside>\n    </>\n  );\n}\n","size_bytes":9443},"client/src/components/Tools/AddonPackager.tsx":{"content":"import { useState } from \"react\";\nimport { Download, Package, File, Folder, Check, AlertCircle, Settings, FileText, Layers } from \"lucide-react\";\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection, CollapsibleGroup } from \"@/components/ui/collapsible-section\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocalStorage } from \"@/hooks/useLocalStorage\";\nimport { exportAddonPack } from \"@/lib/export/addon\";\n\ninterface AddonFile {\n  path: string;\n  type: 'behavior' | 'resource';\n  content: string;\n  size: number;\n}\n\nexport default function AddonPackager() {\n  const [addonName, setAddonName] = useLocalStorage('addon-name', '');\n  const [addonDescription, setAddonDescription] = useLocalStorage('addon-description', '');\n  const [authorName, setAuthorName] = useLocalStorage('addon-author', '');\n  const [version, setVersion] = useLocalStorage('addon-version', '1.0.0');\n  const [minEngineVersion, setMinEngineVersion] = useLocalStorage('addon-min-engine', '1.21.0');\n  const [includeBehaviorPack, setIncludeBehaviorPack] = useLocalStorage('addon-include-bp', true);\n  const [includeResourcePack, setIncludeResourcePack] = useLocalStorage('addon-include-rp', true);\n  const [exportProgress, setExportProgress] = useState(0);\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportStatus, setExportStatus] = useState<'idle' | 'success' | 'error'>('idle');\n\n  const [files] = useState<AddonFile[]>([\n    {\n      path: 'entities/custom_entity.json',\n      type: 'behavior',\n      content: '{\"format_version\": \"1.21.0\"}',\n      size: 1024\n    },\n    {\n      path: 'blocks/custom_block.json',\n      type: 'behavior',\n      content: '{\"format_version\": \"1.21.0\"}',\n      size: 2048\n    },\n    {\n      path: 'textures/entity/custom_entity.png',\n      type: 'resource',\n      content: 'binary',\n      size: 4096\n    }\n  ]);\n\n  const behaviorFiles = files.filter(f => f.type === 'behavior');\n  const resourceFiles = files.filter(f => f.type === 'resource');\n\n  const packConfig = {\n    name: addonName,\n    description: addonDescription,\n    author: authorName,\n    version,\n    minEngineVersion,\n    includeBehaviorPack,\n    includeResourcePack,\n    files\n  };\n\n  const validateConfig = () => {\n    const errors = [];\n    if (!addonName.trim()) errors.push('Addon name is required');\n    if (!authorName.trim()) errors.push('Author name is required');\n    if (!version.trim()) errors.push('Version is required');\n    if (!includeBehaviorPack && !includeResourcePack) {\n      errors.push('At least one pack type must be included');\n    }\n    return errors;\n  };\n\n  const validationErrors = validateConfig();\n  const isValid = validationErrors.length === 0;\n\n  const handleExport = async () => {\n    if (!isValid) return;\n\n    setIsExporting(true);\n    setExportProgress(0);\n    setExportStatus('idle');\n\n    try {\n      // Simulate export progress\n      const steps = [\n        'Generating manifests...',\n        'Collecting behavior pack files...',\n        'Collecting resource pack files...',\n        'Creating archive structure...',\n        'Compressing files...',\n        'Finalizing export...'\n      ];\n\n      for (let i = 0; i < steps.length; i++) {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setExportProgress((i + 1) / steps.length * 100);\n      }\n\n      const blob = await exportAddonPack(packConfig);\n      \n      // Download the file\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${addonName.replace(/[^a-zA-Z0-9]/g, '_')}.mcaddon`;\n      a.click();\n      URL.revokeObjectURL(url);\n\n      setExportStatus('success');\n    } catch (error) {\n      console.error('Export failed:', error);\n      setExportStatus('error');\n    } finally {\n      setIsExporting(false);\n      setTimeout(() => {\n        setExportProgress(0);\n        setExportStatus('idle');\n      }, 3000);\n    }\n  };\n\n  const getTotalSize = (fileList: AddonFile[]) => {\n    const totalBytes = fileList.reduce((sum, file) => sum + file.size, 0);\n    return totalBytes < 1024 ? `${totalBytes} B` : `${(totalBytes / 1024).toFixed(1)} KB`;\n  };\n\n  return (\n    <section className=\"p-6\" data-testid=\"addon-packager\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Configuration */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <div className=\"builder-form rounded-lg p-6\">\n              <h3 className=\"text-xl font-semibold text-foreground mb-4\">Addon Configuration</h3>\n              \n              <Tabs defaultValue=\"basic\" className=\"space-y-4\">\n                <TabsList>\n                  <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic Info</TabsTrigger>\n                  <TabsTrigger value=\"packs\" data-testid=\"tab-packs\">Pack Settings</TabsTrigger>\n                  <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"basic\" className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"addon-name\">Addon Name</Label>\n                      <Input\n                        id=\"addon-name\"\n                        value={addonName}\n                        onChange={(e) => setAddonName(e.target.value)}\n                        placeholder=\"My Custom Addon\"\n                        data-testid=\"input-addon-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"author-name\">Author</Label>\n                      <Input\n                        id=\"author-name\"\n                        value={authorName}\n                        onChange={(e) => setAuthorName(e.target.value)}\n                        placeholder=\"Your Name\"\n                        data-testid=\"input-author-name\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"addon-description\">Description</Label>\n                    <Textarea\n                      id=\"addon-description\"\n                      value={addonDescription}\n                      onChange={(e) => setAddonDescription(e.target.value)}\n                      placeholder=\"Describe your addon...\"\n                      rows={3}\n                      data-testid=\"textarea-addon-description\"\n                    />\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"version\">Version</Label>\n                      <Input\n                        id=\"version\"\n                        value={version}\n                        onChange={(e) => setVersion(e.target.value)}\n                        placeholder=\"1.0.0\"\n                        data-testid=\"input-version\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"min-engine-version\">Min Engine Version</Label>\n                      <Input\n                        id=\"min-engine-version\"\n                        value={minEngineVersion}\n                        onChange={(e) => setMinEngineVersion(e.target.value)}\n                        placeholder=\"1.21.0\"\n                        data-testid=\"input-min-engine-version\"\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"packs\" className=\"space-y-4\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">Include Behavior Pack</h4>\n                        <p className=\"text-sm text-muted-foreground\">Contains game logic, entities, and blocks</p>\n                      </div>\n                      <Switch\n                        checked={includeBehaviorPack}\n                        onCheckedChange={setIncludeBehaviorPack}\n                        data-testid=\"switch-include-behavior-pack\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">Include Resource Pack</h4>\n                        <p className=\"text-sm text-muted-foreground\">Contains textures, models, and sounds</p>\n                      </div>\n                      <Switch\n                        checked={includeResourcePack}\n                        onCheckedChange={setIncludeResourcePack}\n                        data-testid=\"switch-include-resource-pack\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* File Preview */}\n                  <div className=\"space-y-4\">\n                    {includeBehaviorPack && (\n                      <div>\n                        <h4 className=\"font-medium text-foreground mb-2\">\n                          Behavior Pack Files ({behaviorFiles.length})\n                        </h4>\n                        <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                          {behaviorFiles.map((file, index) => (\n                            <div key={index} className=\"flex items-center p-2 bg-muted rounded text-sm\">\n                              <File className=\"mr-2\" size={16} />\n                              <span className=\"flex-1\">{file.path}</span>\n                              <span className=\"text-muted-foreground\">{(file.size / 1024).toFixed(1)} KB</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {includeResourcePack && (\n                      <div>\n                        <h4 className=\"font-medium text-foreground mb-2\">\n                          Resource Pack Files ({resourceFiles.length})\n                        </h4>\n                        <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                          {resourceFiles.map((file, index) => (\n                            <div key={index} className=\"flex items-center p-2 bg-muted rounded text-sm\">\n                              <File className=\"mr-2\" size={16} />\n                              <span className=\"flex-1\">{file.path}</span>\n                              <span className=\"text-muted-foreground\">{(file.size / 1024).toFixed(1)} KB</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"advanced\" className=\"space-y-4\">\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    <p>Advanced packaging options will be available soon</p>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n\n          {/* Export Panel */}\n          <div className=\"space-y-6\">\n            {/* Pack Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"mr-2\" size={20} />\n                  Pack Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Files:</span>\n                  <span className=\"font-medium\">{files.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Size:</span>\n                  <span className=\"font-medium\">{getTotalSize(files)}</span>\n                </div>\n                {includeBehaviorPack && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Behavior Pack:</span>\n                    <span className=\"font-medium\">{getTotalSize(behaviorFiles)}</span>\n                  </div>\n                )}\n                {includeResourcePack && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Resource Pack:</span>\n                    <span className=\"font-medium\">{getTotalSize(resourceFiles)}</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Validation */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  {isValid ? (\n                    <Check className=\"mr-2 text-green-500\" size={20} />\n                  ) : (\n                    <AlertCircle className=\"mr-2 text-destructive\" size={20} />\n                  )}\n                  Validation\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isValid ? (\n                  <p className=\"text-green-600 text-sm\">All configurations are valid and ready for export.</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {validationErrors.map((error, index) => (\n                      <p key={index} className=\"text-destructive text-sm flex items-center\">\n                        <AlertCircle className=\"mr-2\" size={16} />\n                        {error}\n                      </p>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Export */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Export Addon</CardTitle>\n                <CardDescription>\n                  Generate a .mcaddon file ready for installation in Minecraft\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {isExporting && (\n                  <div>\n                    <Progress value={exportProgress} className=\"mb-2\" />\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      Exporting... {Math.round(exportProgress)}%\n                    </p>\n                  </div>\n                )}\n\n                {exportStatus === 'success' && (\n                  <div className=\"p-3 bg-green-500/10 border border-green-500 rounded-lg\">\n                    <div className=\"flex items-center text-green-600\">\n                      <Check className=\"mr-2\" size={16} />\n                      <span className=\"text-sm\">Export completed successfully!</span>\n                    </div>\n                  </div>\n                )}\n\n                {exportStatus === 'error' && (\n                  <div className=\"p-3 bg-destructive/10 border border-destructive rounded-lg\">\n                    <div className=\"flex items-center text-destructive\">\n                      <AlertCircle className=\"mr-2\" size={16} />\n                      <span className=\"text-sm\">Export failed. Please try again.</span>\n                    </div>\n                  </div>\n                )}\n\n                <Button\n                  className=\"w-full\"\n                  onClick={handleExport}\n                  disabled={!isValid || isExporting}\n                  data-testid=\"button-export-addon\"\n                >\n                  <Download className=\"mr-2\" size={16} />\n                  {isExporting ? 'Exporting...' : 'Export Addon'}\n                </Button>\n\n                <div className=\"text-xs text-muted-foreground\">\n                  <p>The exported .mcaddon file can be imported directly into Minecraft: Bedrock Edition.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":16506},"client/src/components/Tools/JSONValidator.tsx":{"content":"import { useState } from \"react\";\nimport { Check, AlertCircle, Copy, Upload, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport { validateJSON, ValidationResult } from \"@/lib/minecraft/validation\";\n\ntype FileType = 'entity' | 'block' | 'item' | 'recipe' | 'loot_table' | 'biome' | 'client_entity' | 'spawn_rule' | 'auto';\n\nexport default function JSONValidator() {\n  const [jsonInput, setJsonInput] = useState('');\n  const [fileType, setFileType] = useState<FileType>('auto');\n  const [validation, setValidation] = useState<ValidationResult | null>(null);\n  const [isValidating, setIsValidating] = useState(false);\n\n  const validateInput = async () => {\n    if (!jsonInput.trim()) {\n      setValidation({ isValid: false, errors: ['JSON input cannot be empty'] });\n      return;\n    }\n\n    setIsValidating(true);\n    \n    try {\n      const result = validateJSON(jsonInput, fileType);\n      setValidation(result);\n    } catch (error) {\n      setValidation({\n        isValid: false,\n        errors: [`Invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`]\n      });\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  const formatJSON = () => {\n    try {\n      const parsed = JSON.parse(jsonInput);\n      const formatted = JSON.stringify(parsed, null, 2);\n      setJsonInput(formatted);\n    } catch (error) {\n      setValidation({\n        isValid: false,\n        errors: [`Invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`]\n      });\n    }\n  };\n\n  const copyJSON = async () => {\n    try {\n      await navigator.clipboard.writeText(jsonInput);\n    } catch (err) {\n      console.error('Failed to copy JSON:', err);\n    }\n  };\n\n  const loadSampleJSON = (sampleType: FileType) => {\n    const samples = {\n      entity: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_entity\",\n      \"is_spawnable\": true,\n      \"is_summonable\": true\n    },\n    \"components\": {\n      \"minecraft:health\": {\n        \"value\": 20,\n        \"max\": 20\n      },\n      \"minecraft:movement\": {\n        \"value\": 0.25\n      }\n    }\n  }\n}`,\n      block: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_block\",\n      \"register_to_creative_menu\": true\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 1.5\n      },\n      \"minecraft:map_color\": \"#7F7F7F\"\n    }\n  }\n}`,\n      item: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_item\",\n      \"menu_category\": {\n        \"category\": \"items\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 64,\n      \"minecraft:icon\": {\n        \"texture\": \"custom_item\"\n      }\n    }\n  }\n}`,\n      recipe: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_shaped\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_recipe\"\n    },\n    \"tags\": [\"crafting_table\"],\n    \"pattern\": [\n      \"###\",\n      \"# #\",\n      \"###\"\n    ],\n    \"key\": {\n      \"#\": {\n        \"item\": \"minecraft:stick\"\n      }\n    },\n    \"result\": {\n      \"item\": \"my_addon:custom_item\"\n    }\n  }\n}`,\n      loot_table: `{\n  \"format_version\": \"1.21.0\",\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"item\",\n          \"name\": \"minecraft:diamond\",\n          \"weight\": 1\n        }\n      ]\n    }\n  ]\n}`,\n      biome: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:biome\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_biome\"\n    },\n    \"components\": {\n      \"minecraft:climate\": {\n        \"temperature\": 0.8,\n        \"downfall\": 0.4\n      }\n    }\n  }\n}`,\n      client_entity: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:client_entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_entity\",\n      \"materials\": { \"default\": \"entity_alphatest\" },\n      \"textures\": { \"default\": \"textures/entity/custom_entity\" },\n      \"geometry\": { \"default\": \"geometry.custom_entity\" }\n    }\n  }\n}`,\n      spawn_rule: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:spawn_rules\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_entity\",\n      \"population_control\": \"animal\"\n    },\n    \"conditions\": [\n      {\n        \"minecraft:spawns_on_surface\": {},\n        \"minecraft:brightness_filter\": {\n          \"min\": 7,\n          \"max\": 15\n        }\n      }\n    ]\n  }\n}`,\n      auto: ''\n    };\n\n    if (samples[sampleType]) {\n      setJsonInput(samples[sampleType]);\n      setFileType(sampleType);\n    }\n  };\n\n  const fileTypes = [\n    { value: 'auto' as FileType, label: 'Auto-detect' },\n    { value: 'entity' as FileType, label: 'Entity' },\n    { value: 'block' as FileType, label: 'Block' },\n    { value: 'item' as FileType, label: 'Item' },\n    { value: 'recipe' as FileType, label: 'Recipe' },\n    { value: 'loot_table' as FileType, label: 'Loot Table' },\n    { value: 'biome' as FileType, label: 'Biome' },\n    { value: 'client_entity' as FileType, label: 'Client Entity' },\n    { value: 'spawn_rule' as FileType, label: 'Spawn Rule' },\n  ];\n\n  return (\n    <section className=\"p-6\" data-testid=\"json-validator\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Input Panel */}\n          <div className=\"builder-form rounded-lg p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold text-foreground\">JSON Input</h3>\n              <div className=\"flex space-x-2\">\n                <Select value={fileType} onValueChange={(value: FileType) => setFileType(value)}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-file-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {fileTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <Textarea\n              value={jsonInput}\n              onChange={(e) => setJsonInput(e.target.value)}\n              placeholder=\"Paste your JSON here...\"\n              className=\"font-mono text-sm h-96 resize-none\"\n              data-testid=\"textarea-json-input\"\n            />\n\n            <div className=\"flex items-center justify-between mt-4\">\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={formatJSON}\n                  data-testid=\"button-format-json\"\n                >\n                  <FileText className=\"mr-2\" size={16} />\n                  Format\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={copyJSON}\n                  data-testid=\"button-copy-json\"\n                >\n                  <Copy className=\"mr-2\" size={16} />\n                  Copy\n                </Button>\n              </div>\n              <Button\n                onClick={validateInput}\n                disabled={isValidating}\n                data-testid=\"button-validate\"\n              >\n                {isValidating ? 'Validating...' : 'Validate JSON'}\n              </Button>\n            </div>\n          </div>\n\n          {/* Results Panel */}\n          <div className=\"space-y-6\">\n            {/* Validation Results */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  {validation?.isValid ? (\n                    <Check className=\"mr-2 text-green-500\" size={20} />\n                  ) : validation?.isValid === false ? (\n                    <AlertCircle className=\"mr-2 text-destructive\" size={20} />\n                  ) : (\n                    <FileText className=\"mr-2\" size={20} />\n                  )}\n                  Validation Results\n                </CardTitle>\n                <CardDescription>\n                  {validation \n                    ? validation.isValid \n                      ? 'Your JSON is valid and ready to use!'\n                      : 'Found issues that need to be fixed'\n                    : 'Click \"Validate JSON\" to check your code'\n                  }\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {validation ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center\">\n                      <Badge variant={validation.isValid ? \"default\" : \"destructive\"}>\n                        {validation.isValid ? 'Valid' : 'Invalid'}\n                      </Badge>\n                      {validation.warnings && validation.warnings.length > 0 && (\n                        <Badge variant=\"secondary\" className=\"ml-2\">\n                          {validation.warnings.length} Warning{validation.warnings.length !== 1 ? 's' : ''}\n                        </Badge>\n                      )}\n                    </div>\n\n                    {validation.errors && validation.errors.length > 0 && (\n                      <div>\n                        <h4 className=\"font-medium text-destructive mb-2\">Errors:</h4>\n                        <ul className=\"space-y-1\">\n                          {validation.errors.map((error, index) => (\n                            <li key={index} className=\"text-sm text-destructive flex items-start\">\n                              <AlertCircle className=\"mr-2 mt-0.5 flex-shrink-0\" size={16} />\n                              {error}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n\n                    {validation.warnings && validation.warnings.length > 0 && (\n                      <div>\n                        <h4 className=\"font-medium text-yellow-600 mb-2\">Warnings:</h4>\n                        <ul className=\"space-y-1\">\n                          {validation.warnings.map((warning, index) => (\n                            <li key={index} className=\"text-sm text-yellow-600 flex items-start\">\n                              <AlertCircle className=\"mr-2 mt-0.5 flex-shrink-0\" size={16} />\n                              {warning}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground\">No validation performed yet.</p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Sample JSON */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Sample JSON</CardTitle>\n                <CardDescription>\n                  Load sample JSON files to test the validator\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"entity\">\n                  <TabsList className=\"grid grid-cols-3 gap-1\">\n                    <TabsTrigger value=\"entity\" onClick={() => loadSampleJSON('entity')}>\n                      Entity\n                    </TabsTrigger>\n                    <TabsTrigger value=\"block\" onClick={() => loadSampleJSON('block')}>\n                      Block\n                    </TabsTrigger>\n                    <TabsTrigger value=\"item\" onClick={() => loadSampleJSON('item')}>\n                      Item\n                    </TabsTrigger>\n                  </TabsList>\n                  \n                  <div className=\"mt-4\">\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => loadSampleJSON('recipe')}\n                        data-testid=\"button-load-recipe-sample\"\n                      >\n                        Recipe\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => loadSampleJSON('loot_table')}\n                        data-testid=\"button-load-loot-table-sample\"\n                      >\n                        Loot Table\n                      </Button>\n                    </div>\n                  </div>\n                </Tabs>\n              </CardContent>\n            </Card>\n\n            {/* Help */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Validation Help</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>• The validator checks for proper JSON syntax and Minecraft-specific structure</p>\n                <p>• Use \"Auto-detect\" to automatically identify the file type</p>\n                <p>• Format your JSON for better readability before validation</p>\n                <p>• Common errors include missing commas, brackets, and required properties</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":13770},"client/src/components/Tools/ScriptStudio.tsx":{"content":"import { useState, useMemo, useCallback, useRef, useEffect } from \"react\";\nimport { \n  Copy, \n  Download, \n  Play, \n  Search, \n  ChevronRight, \n  ChevronDown, \n  ChevronLeft, \n  Book, \n  Code2, \n  Zap, \n  FileCode, \n  Settings,\n  Package,\n  FunctionSquare,\n  Layers,\n  X,\n  Plus,\n  Filter,\n  Star,\n  Box,\n  Target,\n  Cpu,\n  Maximize2,\n  Minimize2,\n  Save,\n  RotateCcw,\n  Terminal,\n  Lightbulb\n} from \"lucide-react\";\nimport Editor from '@monaco-editor/react';\nimport type * as Monaco from 'monaco-editor';\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection, CollapsibleGroup } from \"@/components/ui/collapsible-section\";\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from \"@/components/ui/resizable\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport CodePreview from \"@/components/Common/CodePreview\";\nimport { minecraftRegistry } from \"@shared/minecraftRegistry\";\nimport { cn } from \"@/lib/utils\";\n\n// Types for the enhanced Script Studio\ninterface ScriptTab {\n  id: string;\n  name: string;\n  content: string;\n  language: 'javascript' | 'typescript';\n}\n\ninterface SelectedElement {\n  id: string;\n  name: string;\n  type: string;\n  module: string;\n  element: any;\n}\n\ninterface ParameterValues {\n  [paramName: string]: string;\n}\n\ninterface FilterState {\n  modules: string[];\n  types: string[];\n  complexity: 'all' | 'beginner' | 'intermediate' | 'advanced';\n  favorites: boolean;\n}\n\ninterface AutocompleteItem {\n  label: string;\n  kind: Monaco.languages.CompletionItemKind;\n  detail?: string;\n  documentation?: string;\n  insertText: string;\n  range: Monaco.IRange;\n}\n\ninterface MonacoEditorRef {\n  editor: Monaco.editor.IStandaloneCodeEditor | null;\n  monaco: typeof Monaco | null;\n}\n\nexport default function ScriptStudio() {\n  // Core state\n  const [scripts, setScripts] = useState<ScriptTab[]>([\n    { \n      id: \"1\", \n      name: \"Main Script\", \n      content: `// Welcome to the enhanced Script Studio!\n// Professional Monaco Editor with intelligent autocomplete\n\nimport { world } from '@minecraft/server';\n\n// Start typing to see VS Code-style suggestions\n// Try typing \"world.\" to see available methods\nworld.sendMessage(\"Hello from Script Studio!\");\n\n// The editor now features:\n// ✓ Syntax highlighting\n// ✓ Intelligent autocomplete with 476+ API elements  \n// ✓ Parameter hints and type information\n// ✓ JSDoc documentation in suggestions\n// ✓ Error detection and warnings\n// ✓ Bracket matching and auto-closing\n\n`, \n      language: \"typescript\" \n    }\n  ]);\n  const [activeScriptId, setActiveScriptId] = useState(\"1\");\n  const [editorExpanded, setEditorExpanded] = useState(false);\n  const editorRef = useRef<MonacoEditorRef>({ editor: null, monaco: null });\n  \n  // Browser state\n  const [selectedElement, setSelectedElement] = useState<SelectedElement | null>(null);\n  const [expandedModules, setExpandedModules] = useState<Set<string>>(new Set([\"@minecraft/server\"]));\n  const [expandedElements, setExpandedElements] = useState<Set<string>>(new Set());\n  \n  // Search and filter state\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showAdvancedSearch, setShowAdvancedSearch] = useState(false);\n  const [filters, setFilters] = useState<FilterState>({\n    modules: [],\n    types: [],\n    complexity: 'all',\n    favorites: false\n  });\n  \n  // Parameter state\n  const [parameterValues, setParameterValues] = useState<ParameterValues>({});\n  const [showParameterHelper, setShowParameterHelper] = useState(true);\n  \n  // UI state\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [documentationOpen, setDocumentationOpen] = useState(true);\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\n\n  // Process registry data\n  const registryData = useMemo(() => {\n    const modules = Object.keys(minecraftRegistry.modules);\n    const elements = Object.values(minecraftRegistry.modules).flatMap(module => module.elements || []);\n    \n    // Group elements by type and module\n    const elementsByModule = modules.reduce((acc, moduleName) => {\n      const moduleData = minecraftRegistry.modules[moduleName as keyof typeof minecraftRegistry.modules];\n      if (moduleData) {\n        acc[moduleName] = {\n          ...moduleData,\n          elementsByType: (moduleData.elements || []).reduce((typeAcc: any, element: any) => {\n            if (!typeAcc[element.type]) typeAcc[element.type] = [];\n            typeAcc[element.type].push(element);\n            return typeAcc;\n          }, {})\n        };\n      }\n      return acc;\n    }, {} as any);\n\n    return {\n      modules,\n      elements,\n      elementsByModule,\n      totalElements: elements.length\n    };\n  }, []);\n\n  // Monaco Editor setup and autocomplete provider\n  const setupMonacoEditor = useCallback((editor: Monaco.editor.IStandaloneCodeEditor, monaco: typeof Monaco) => {\n    editorRef.current = { editor, monaco };\n\n    // Configure language-specific settings first\n    const updateLanguageSettings = (language: 'javascript' | 'typescript') => {\n      if (language === 'javascript') {\n        // JavaScript mode - more permissive, allow ES6 imports without strict checking\n        monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n          target: monaco.languages.typescript.ScriptTarget.ES2020,\n          allowNonTsExtensions: true,\n          moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n          module: monaco.languages.typescript.ModuleKind.ESNext,\n          noEmit: true,\n          esModuleInterop: true,\n          allowSyntheticDefaultImports: true,\n          allowJs: true,\n          checkJs: false,  // KEY: Don't check JS files strictly\n          strict: false,   // Disable strict type checking for JS\n          noImplicitAny: false,\n          noImplicitReturns: false,\n          noImplicitThis: false,\n          strictNullChecks: false,\n        });\n        \n        // Set diagnostic options for JavaScript - less strict\n        monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n          noSemanticValidation: true,  // Disable semantic validation for JS\n          noSyntaxValidation: false,   // Keep syntax validation\n          noSuggestionDiagnostics: true,\n        });\n      } else {\n        // TypeScript mode - strict checking with proper type validation\n        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n          target: monaco.languages.typescript.ScriptTarget.ES2020,\n          allowNonTsExtensions: true,\n          moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n          module: monaco.languages.typescript.ModuleKind.ESNext,\n          noEmit: true,\n          esModuleInterop: true,\n          allowSyntheticDefaultImports: true,\n          strict: true,    // Enable strict checking for TypeScript\n          noImplicitAny: true,\n          strictNullChecks: true,\n        });\n        \n        // Set diagnostic options for TypeScript - full validation\n        monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n          noSemanticValidation: false,  // Enable semantic validation for TS\n          noSyntaxValidation: false,    // Enable syntax validation\n          noSuggestionDiagnostics: false,\n        });\n      }\n    };\n    \n    // Store the update function on the editor reference for external access\n    (editorRef.current as any).updateLanguageSettings = updateLanguageSettings;\n    \n    // Add comprehensive TypeScript definitions for Minecraft Bedrock APIs\n    const minecraftServerTypes = `\n// Minecraft Server API Type Definitions\ndeclare module \"@minecraft/server\" {\n  /**\n   * Represents the world and its properties.\n   */\n  export class World {\n    /**\n     * Sends a message to all players in the world.\n     * @param message - The message to send\n     */\n    sendMessage(message: string): void;\n    \n    /**\n     * Gets all players currently in the world.\n     */\n    getAllPlayers(): Player[];\n    \n    /**\n     * Gets a player by name.\n     * @param name - Player name\n     */\n    getPlayers(options?: { name?: string }): Player[];\n    \n    /**\n     * Gets the default spawn location for the world.\n     */\n    getDefaultSpawnLocation(): Vector3;\n    \n    /**\n     * Gets all entities in the world.\n     */\n    getEntities(options?: EntityQueryOptions): Entity[];\n    \n    /**\n     * Gets the current time of day.\n     */\n    getTimeOfDay(): number;\n    \n    /**\n     * Sets the time of day.\n     */\n    setTimeOfDay(timeOfDay: number): void;\n    \n    /**\n     * Event system for world events.\n     */\n    afterEvents: WorldAfterEvents;\n    beforeEvents: WorldBeforeEvents;\n  }\n  \n  /**\n   * Represents a player in the game.\n   */\n  export class Player extends Entity {\n    /**\n     * The player's name.\n     */\n    readonly name: string;\n    \n    /**\n     * Whether the player is an operator.\n     */\n    readonly isOp: boolean;\n    \n    /**\n     * Sends a message to this player.\n     */\n    sendMessage(message: string): void;\n    \n    /**\n     * Kicks the player from the server.\n     */\n    kick(reason?: string): void;\n    \n    /**\n     * Teleports the player to a location.\n     */\n    teleport(location: Vector3, teleportOptions?: TeleportOptions): void;\n    \n    /**\n     * Runs a command as this player.\n     */\n    runCommand(commandString: string): CommandResult;\n  }\n  \n  /**\n   * Base class for all entities.\n   */\n  export class Entity {\n    /**\n     * Unique identifier for the entity.\n     */\n    readonly id: string;\n    \n    /**\n     * Current location of the entity.\n     */\n    readonly location: Vector3;\n    \n    /**\n     * Current velocity of the entity.\n     */\n    readonly velocity: Vector3;\n    \n    /**\n     * The entity's rotation.\n     */\n    readonly rotation: Vector2;\n    \n    /**\n     * Whether the entity is valid and exists.\n     */\n    readonly isValid: boolean;\n    \n    /**\n     * The entity's dimension.\n     */\n    readonly dimension: Dimension;\n    \n    /**\n     * Teleports the entity to a location.\n     */\n    teleport(location: Vector3, teleportOptions?: TeleportOptions): void;\n    \n    /**\n     * Removes the entity from the world.\n     */\n    remove(): void;\n    \n    /**\n     * Runs a command as this entity.\n     */\n    runCommand(commandString: string): CommandResult;\n    \n    /**\n     * Gets a component from the entity.\n     */\n    getComponent<T extends keyof EntityComponentMap>(componentId: T): EntityComponentMap[T] | undefined;\n    \n    /**\n     * Checks if entity has a component.\n     */\n    hasComponent<T extends keyof EntityComponentMap>(componentId: T): boolean;\n  }\n  \n  /**\n   * Represents a dimension (Overworld, Nether, End).\n   */\n  export class Dimension {\n    /**\n     * Identifier for this dimension.\n     */\n    readonly id: string;\n    \n    /**\n     * Gets a block at the specified location.\n     */\n    getBlock(location: Vector3): Block | undefined;\n    \n    /**\n     * Sets a block at the specified location.\n     */\n    setBlockType(location: Vector3, blockType: BlockType): void;\n    \n    /**\n     * Gets all entities in this dimension.\n     */\n    getEntities(options?: EntityQueryOptions): Entity[];\n    \n    /**\n     * Spawns an entity at the specified location.\n     */\n    spawnEntity(identifier: string, location: Vector3): Entity;\n  }\n  \n  /**\n   * Represents a block in the world.\n   */\n  export class Block {\n    /**\n     * Location of this block.\n     */\n    readonly location: Vector3;\n    \n    /**\n     * The block type.\n     */\n    readonly type: BlockType;\n    \n    /**\n     * The dimension this block is in.\n     */\n    readonly dimension: Dimension;\n    \n    /**\n     * Whether this block is valid.\n     */\n    readonly isValid: boolean;\n  }\n  \n  /**\n   * Represents a block type.\n   */\n  export class BlockType {\n    /**\n     * Identifier for this block type.\n     */\n    readonly id: string;\n  }\n  \n  // Common interfaces and types\n  export interface Vector3 {\n    x: number;\n    y: number;\n    z: number;\n  }\n  \n  export interface Vector2 {\n    x: number;\n    y: number;\n  }\n  \n  export interface EntityQueryOptions {\n    type?: string;\n    name?: string;\n    location?: Vector3;\n    maxDistance?: number;\n    minDistance?: number;\n  }\n  \n  export interface TeleportOptions {\n    dimension?: Dimension;\n    rotation?: Vector2;\n    facingLocation?: Vector3;\n    checkForBlocks?: boolean;\n    keepVelocity?: boolean;\n  }\n  \n  export interface CommandResult {\n    successCount: number;\n  }\n  \n  export interface EntityComponentMap {\n    \"minecraft:health\": HealthComponent;\n    \"minecraft:inventory\": InventoryComponent;\n    \"minecraft:movement\": MovementComponent;\n  }\n  \n  export class HealthComponent {\n    readonly currentValue: number;\n    readonly defaultValue: number;\n    readonly effectiveMax: number;\n    readonly effectiveMin: number;\n    resetToDefaultValue(): void;\n    resetToMaxValue(): void;\n    resetToMinValue(): void;\n    setCurrentValue(value: number): void;\n  }\n  \n  export class InventoryComponent {\n    readonly additionalSlotsPerStrength: number;\n    readonly canBeSiphonedFrom: boolean;\n    readonly container: Container;\n    readonly containerType: string;\n    readonly inventorySize: number;\n    readonly private: boolean;\n    readonly restrictToOwner: boolean;\n  }\n  \n  export class MovementComponent {\n    readonly maxTurn: number;\n    readonly value: number;\n    setCurrent(value: number): void;\n  }\n  \n  export class Container {\n    readonly emptySlotsCount: number;\n    readonly size: number;\n    addItem(itemStack: ItemStack): ItemStack | undefined;\n    getItem(slot: number): ItemStack | undefined;\n    setItem(slot: number, itemStack?: ItemStack): void;\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): void;\n    transferItem(fromSlot: number, toSlot: number, toContainer: Container): ItemStack | undefined;\n  }\n  \n  export class ItemStack {\n    readonly amount: number;\n    readonly isStackable: boolean;\n    readonly keepOnDeath: boolean;\n    readonly lockMode: ItemLockMode;\n    readonly maxAmount: number;\n    readonly nameTag?: string;\n    readonly type: ItemType;\n    readonly typeId: string;\n  }\n  \n  export class ItemType {\n    readonly id: string;\n  }\n  \n  export enum ItemLockMode {\n    inventory = \"inventory\",\n    none = \"none\",\n    slot = \"slot\"\n  }\n  \n  // Event system interfaces\n  export interface WorldAfterEvents {\n    playerJoin: PlayerJoinAfterEventSignal;\n    playerLeave: PlayerLeaveAfterEventSignal;\n    entitySpawn: EntitySpawnAfterEventSignal;\n    blockBreak: BlockBreakAfterEventSignal;\n    blockPlace: BlockPlaceAfterEventSignal;\n    itemUse: ItemUseAfterEventSignal;\n    buttonPush: ButtonPushAfterEventSignal;\n    leverAction: LeverActionAfterEventSignal;\n  }\n  \n  export interface WorldBeforeEvents {\n    playerJoin: PlayerJoinBeforeEventSignal;\n    playerLeave: PlayerLeaveBeforeEventSignal;\n    entitySpawn: EntitySpawnBeforeEventSignal;\n    blockBreak: BlockBreakBeforeEventSignal;\n    blockPlace: BlockPlaceBeforeEventSignal;\n    itemUse: ItemUseBeforeEventSignal;\n  }\n  \n  export interface PlayerJoinAfterEventSignal {\n    subscribe(callback: (event: PlayerJoinAfterEvent) => void): (event: PlayerJoinAfterEvent) => void;\n    unsubscribe(callback: (event: PlayerJoinAfterEvent) => void): void;\n  }\n  \n  export interface PlayerJoinAfterEvent {\n    readonly player: Player;\n    readonly playerId: string;\n    readonly playerName: string;\n  }\n  \n  export interface PlayerLeaveAfterEventSignal {\n    subscribe(callback: (event: PlayerLeaveAfterEvent) => void): (event: PlayerLeaveAfterEvent) => void;\n    unsubscribe(callback: (event: PlayerLeaveAfterEvent) => void): void;\n  }\n  \n  export interface PlayerLeaveAfterEvent {\n    readonly playerId: string;\n    readonly playerName: string;\n  }\n  \n  export interface EntitySpawnAfterEventSignal {\n    subscribe(callback: (event: EntitySpawnAfterEvent) => void): (event: EntitySpawnAfterEvent) => void;\n    unsubscribe(callback: (event: EntitySpawnAfterEvent) => void): void;\n  }\n  \n  export interface EntitySpawnAfterEvent {\n    readonly entity: Entity;\n    readonly cause: EntityInitializationCause;\n  }\n  \n  export enum EntityInitializationCause {\n    Born = \"Born\",\n    Event = \"Event\",\n    Loaded = \"Loaded\",\n    Spawned = \"Spawned\",\n    Transformed = \"Transformed\"\n  }\n  \n  export interface BlockBreakAfterEventSignal {\n    subscribe(callback: (event: BlockBreakAfterEvent) => void): (event: BlockBreakAfterEvent) => void;\n    unsubscribe(callback: (event: BlockBreakAfterEvent) => void): void;\n  }\n  \n  export interface BlockBreakAfterEvent {\n    readonly block: Block;\n    readonly brokenBlockPermutation: BlockPermutation;\n    readonly dimension: Dimension;\n    readonly player?: Player;\n  }\n  \n  export interface BlockPlaceAfterEventSignal {\n    subscribe(callback: (event: BlockPlaceAfterEvent) => void): (event: BlockPlaceAfterEvent) => void;\n    unsubscribe(callback: (event: BlockPlaceAfterEvent) => void): void;\n  }\n  \n  export interface BlockPlaceAfterEvent {\n    readonly block: Block;\n    readonly dimension: Dimension;\n    readonly player?: Player;\n  }\n  \n  export interface ItemUseAfterEventSignal {\n    subscribe(callback: (event: ItemUseAfterEvent) => void): (event: ItemUseAfterEvent) => void;\n    unsubscribe(callback: (event: ItemUseAfterEvent) => void): void;\n  }\n  \n  export interface ItemUseAfterEvent {\n    readonly itemStack: ItemStack;\n    readonly player: Player;\n    readonly source: Entity;\n  }\n  \n  export interface ButtonPushAfterEventSignal {\n    subscribe(callback: (event: ButtonPushAfterEvent) => void): (event: ButtonPushAfterEvent) => void;\n    unsubscribe(callback: (event: ButtonPushAfterEvent) => void): void;\n  }\n  \n  export interface ButtonPushAfterEvent {\n    readonly block: Block;\n    readonly dimension: Dimension;\n    readonly source: Entity;\n  }\n  \n  export interface LeverActionAfterEventSignal {\n    subscribe(callback: (event: LeverActionAfterEvent) => void): (event: LeverActionAfterEvent) => void;\n    unsubscribe(callback: (event: LeverActionAfterEvent) => void): void;\n  }\n  \n  export interface LeverActionAfterEvent {\n    readonly block: Block;\n    readonly dimension: Dimension;\n    readonly isPowered: boolean;\n    readonly player: Player;\n  }\n  \n  // Before event signal interfaces (similar structure)\n  export interface PlayerJoinBeforeEventSignal {\n    subscribe(callback: (event: PlayerJoinBeforeEvent) => void): (event: PlayerJoinBeforeEvent) => void;\n    unsubscribe(callback: (event: PlayerJoinBeforeEvent) => void): void;\n  }\n  \n  export interface PlayerJoinBeforeEvent {\n    readonly player: Player;\n    readonly playerId: string;\n    readonly playerName: string;\n    cancel: boolean;\n  }\n  \n  export interface PlayerLeaveBeforeEventSignal {\n    subscribe(callback: (event: PlayerLeaveBeforeEvent) => void): (event: PlayerLeaveBeforeEvent) => void;\n    unsubscribe(callback: (event: PlayerLeaveBeforeEvent) => void): void;\n  }\n  \n  export interface PlayerLeaveBeforeEvent {\n    readonly player: Player;\n    readonly playerId: string;\n    readonly playerName: string;\n    cancel: boolean;\n  }\n  \n  export interface EntitySpawnBeforeEventSignal {\n    subscribe(callback: (event: EntitySpawnBeforeEvent) => void): (event: EntitySpawnBeforeEvent) => void;\n    unsubscribe(callback: (event: EntitySpawnBeforeEvent) => void): void;\n  }\n  \n  export interface EntitySpawnBeforeEvent {\n    readonly entity: Entity;\n    readonly cause: EntityInitializationCause;\n    cancel: boolean;\n  }\n  \n  export interface BlockBreakBeforeEventSignal {\n    subscribe(callback: (event: BlockBreakBeforeEvent) => void): (event: BlockBreakBeforeEvent) => void;\n    unsubscribe(callback: (event: BlockBreakBeforeEvent) => void): void;\n  }\n  \n  export interface BlockBreakBeforeEvent {\n    readonly block: Block;\n    readonly dimension: Dimension;\n    readonly itemStack?: ItemStack;\n    readonly player?: Player;\n    cancel: boolean;\n  }\n  \n  export interface BlockPlaceBeforeEventSignal {\n    subscribe(callback: (event: BlockPlaceBeforeEvent) => void): (event: BlockPlaceBeforeEvent) => void;\n    unsubscribe(callback: (event: BlockPlaceBeforeEvent) => void): void;\n  }\n  \n  export interface BlockPlaceBeforeEvent {\n    readonly block: Block;\n    readonly dimension: Dimension;\n    readonly face: Direction;\n    readonly faceLocation: Vector3;\n    readonly itemStack: ItemStack;\n    readonly player?: Player;\n    cancel: boolean;\n  }\n  \n  export interface ItemUseBeforeEventSignal {\n    subscribe(callback: (event: ItemUseBeforeEvent) => void): (event: ItemUseBeforeEvent) => void;\n    unsubscribe(callback: (event: ItemUseBeforeEvent) => void): void;\n  }\n  \n  export interface ItemUseBeforeEvent {\n    readonly itemStack: ItemStack;\n    readonly player: Player;\n    readonly source: Entity;\n    cancel: boolean;\n  }\n  \n  export class BlockPermutation {\n    readonly type: BlockType;\n    getAllStates(): Record<string, string | number | boolean>;\n    getState(stateName: string): string | number | boolean | undefined;\n    getTags(): string[];\n    hasTag(tag: string): boolean;\n    matches(blockName: string, states?: Record<string, string | number | boolean>): boolean;\n    withState(name: string, value: string | number | boolean): BlockPermutation;\n  }\n  \n  export enum Direction {\n    Down = 0,\n    Up = 1,\n    North = 2,\n    South = 3,\n    West = 4,\n    East = 5\n  }\n  \n  // Global world instance\n  export const world: World;\n  \n  // System utilities\n  export namespace system {\n    /**\n     * Runs a function after a specified number of ticks.\n     */\n    export function runTimeout(callback: () => void, tickDelay?: number): number;\n    \n    /**\n     * Runs a function at a specified interval.\n     */\n    export function runInterval(callback: () => void, tickInterval?: number): number;\n    \n    /**\n     * Clears a timeout or interval.\n     */\n    export function clearRun(runId: number): void;\n    \n    /**\n     * Gets the current tick.\n     */\n    export function currentTick: number;\n  }\n}\n`;\n\n    const minecraftServerUITypes = `\n// Minecraft Server UI API Type Definitions\ndeclare module \"@minecraft/server-ui\" {\n  /**\n   * Base class for all forms.\n   */\n  export abstract class FormData {\n    /**\n     * Whether the form was canceled.\n     */\n    readonly canceled: boolean;\n  }\n  \n  /**\n   * Represents a simple action form with buttons.\n   */\n  export class ActionFormData {\n    /**\n     * Creates a new ActionFormData.\n     */\n    constructor();\n    \n    /**\n     * Adds a button to the form.\n     */\n    button(text: string, iconPath?: string): ActionFormData;\n    \n    /**\n     * Sets the body text of the form.\n     */\n    body(bodyText: string): ActionFormData;\n    \n    /**\n     * Sets the title of the form.\n     */\n    title(titleText: string): ActionFormData;\n    \n    /**\n     * Shows the form to a player.\n     */\n    show(player: Player): Promise<ActionFormResponse>;\n  }\n  \n  /**\n   * Response from an action form.\n   */\n  export interface ActionFormResponse extends FormData {\n    /**\n     * Index of the selected button, or undefined if canceled.\n     */\n    readonly selection?: number;\n  }\n  \n  /**\n   * Represents a modal form with text fields and toggles.\n   */\n  export class ModalFormData {\n    /**\n     * Creates a new ModalFormData.\n     */\n    constructor();\n    \n    /**\n     * Adds a dropdown field to the form.\n     */\n    dropdown(label: string, options: string[], defaultValueIndex?: number): ModalFormData;\n    \n    /**\n     * Adds a slider field to the form.\n     */\n    slider(label: string, minimumValue: number, maximumValue: number, valueStep: number, defaultValue?: number): ModalFormData;\n    \n    /**\n     * Adds a text field to the form.\n     */\n    textField(label: string, placeholderText?: string, defaultValue?: string): ModalFormData;\n    \n    /**\n     * Sets the title of the form.\n     */\n    title(titleText: string): ModalFormData;\n    \n    /**\n     * Adds a toggle field to the form.\n     */\n    toggle(label: string, defaultValue?: boolean): ModalFormData;\n    \n    /**\n     * Shows the form to a player.\n     */\n    show(player: Player): Promise<ModalFormResponse>;\n  }\n  \n  /**\n   * Response from a modal form.\n   */\n  export interface ModalFormResponse extends FormData {\n    /**\n     * Values from the form fields.\n     */\n    readonly formValues?: (boolean | number | string)[];\n  }\n  \n  /**\n   * Represents a message form with up to two buttons.\n   */\n  export class MessageFormData {\n    /**\n     * Creates a new MessageFormData.\n     */\n    constructor();\n    \n    /**\n     * Sets the body text of the form.\n     */\n    body(bodyText: string): MessageFormData;\n    \n    /**\n     * Sets the text for button 1.\n     */\n    button1(text: string): MessageFormData;\n    \n    /**\n     * Sets the text for button 2.\n     */\n    button2(text: string): MessageFormData;\n    \n    /**\n     * Sets the title of the form.\n     */\n    title(titleText: string): MessageFormData;\n    \n    /**\n     * Shows the form to a player.\n     */\n    show(player: Player): Promise<MessageFormResponse>;\n  }\n  \n  /**\n   * Response from a message form.\n   */\n  export interface MessageFormResponse extends FormData {\n    /**\n     * Index of the selected button (0 or 1), or undefined if canceled.\n     */\n    readonly selection?: number;\n  }\n  \n  // Import Player from server module\n  import { Player } from \"@minecraft/server\";\n}\n`;\n\n    const minecraftServerGameTestTypes = `\n// Minecraft Server GameTest API Type Definitions\ndeclare module \"@minecraft/server-gametest\" {\n  import { BlockLocation, BlockType, Dimension, Entity, EntityType, ItemStack, Player } from \"@minecraft/server\";\n  \n  /**\n   * Main GameTest class for creating tests.\n   */\n  export class Test {\n    /**\n     * Asserts that a block at the specified location is of the expected type.\n     */\n    assertBlockTypePresent(blockType: BlockType, blockLocation: BlockLocation, isPresent?: boolean): void;\n    \n    /**\n     * Asserts that a container at the specified location contains the specified item.\n     */\n    assertContainerContains(itemStack: ItemStack, blockLocation: BlockLocation): void;\n    \n    /**\n     * Asserts that a container at the specified location is empty.\n     */\n    assertContainerEmpty(blockLocation: BlockLocation): void;\n    \n    /**\n     * Asserts that an entity is present at the specified location.\n     */\n    assertEntityPresent(entityType: EntityType, blockLocation: BlockLocation, isPresent?: boolean): void;\n    \n    /**\n     * Asserts that an entity has the specified component.\n     */\n    assertEntityHasComponent(entityType: EntityType, componentIdentifier: string, blockLocation: BlockLocation, hasComponent?: boolean): void;\n    \n    /**\n     * Fails the test with the specified error message.\n     */\n    fail(errorMessage: string): void;\n    \n    /**\n     * Gets a block at the specified location.\n     */\n    getBlock(blockLocation: BlockLocation): Block;\n    \n    /**\n     * Gets the dimension for this test.\n     */\n    getDimension(): Dimension;\n    \n    /**\n     * Gets fence block locations around the test area.\n     */\n    getFenceBlocks(): BlockLocation[];\n    \n    /**\n     * Kills all entities of the specified type in the test area.\n     */\n    killAllEntities(): void;\n    \n    /**\n     * Presses a button at the specified location.\n     */\n    pressButton(blockLocation: BlockLocation): void;\n    \n    /**\n     * Pulls a lever at the specified location.\n     */\n    pullLever(blockLocation: BlockLocation): void;\n    \n    /**\n     * Pulses a redstone block at the specified location.\n     */\n    pulseRedstone(blockLocation: BlockLocation, duration: number): void;\n    \n    /**\n     * Spawns an entity at the specified location.\n     */\n    spawn(entityType: EntityType, blockLocation: BlockLocation): Entity;\n    \n    /**\n     * Spawns an entity with data at the specified location.\n     */\n    spawnWithoutBehaviors(entityType: EntityType, blockLocation: BlockLocation): Entity;\n    \n    /**\n     * Spawns a simulated player at the specified location.\n     */\n    spawnSimulatedPlayer(blockLocation: BlockLocation, name?: string): SimulatedPlayer;\n    \n    /**\n     * Succeeds the test if it reaches this point.\n     */\n    succeed(): void;\n    \n    /**\n     * Succeeds the test when the specified condition is true.\n     */\n    succeedWhen(callback: () => void): void;\n    \n    /**\n     * Succeeds the test if it doesn't fail within the specified number of ticks.\n     */\n    succeedOnTick(tick: number): void;\n    \n    /**\n     * Succeeds the test if it doesn't fail within the specified number of ticks, then runs a callback.\n     */\n    succeedOnTickWhen(tick: number, callback: () => void): void;\n    \n    /**\n     * Sets a block at the specified location.\n     */\n    setBlockType(blockType: BlockType, blockLocation: BlockLocation): void;\n    \n    /**\n     * Sets a block permutation at the specified location.\n     */\n    setBlockPermutation(blockPermutation: BlockPermutation, blockLocation: BlockLocation): void;\n    \n    /**\n     * Sets the time of day.\n     */\n    setTntFuse(entity: Entity, fuseLength: number): void;\n    \n    /**\n     * Runs a function after the specified number of ticks.\n     */\n    runAfterDelay(delayTicks: number, callback: () => void): void;\n    \n    /**\n     * Runs a function at the specified tick.\n     */\n    runAtTickTime(tick: number, callback: () => void): void;\n  }\n  \n  /**\n   * Represents a simulated player for testing.\n   */\n  export class SimulatedPlayer extends Player {\n    /**\n     * Simulates the player looking in a specific direction.\n     */\n    lookAtBlock(blockLocation: BlockLocation): void;\n    \n    /**\n     * Simulates the player looking at an entity.\n     */\n    lookAtEntity(entity: Entity): void;\n    \n    /**\n     * Simulates the player looking at a specific location.\n     */\n    lookAtLocation(location: Vector3): void;\n    \n    /**\n     * Simulates the player moving in a specific direction.\n     */\n    move(westEast: number, northSouth: number, speed?: number): void;\n    \n    /**\n     * Simulates the player moving to a specific location.\n     */\n    moveToLocation(location: Vector3, speed?: number): void;\n    \n    /**\n     * Simulates the player navigating to a specific block.\n     */\n    navigateToBlock(blockLocation: BlockLocation, speed?: number): void;\n    \n    /**\n     * Simulates the player navigating to a specific entity.\n     */\n    navigateToEntity(entity: Entity, speed?: number): void;\n    \n    /**\n     * Simulates the player navigating to a specific location.\n     */\n    navigateToLocation(location: Vector3, speed?: number): void;\n    \n    /**\n     * Simulates the player stopping movement.\n     */\n    stopMoving(): void;\n    \n    /**\n     * Simulates the player jumping.\n     */\n    jump(): void;\n    \n    /**\n     * Simulates the player interacting with a block.\n     */\n    interactWithBlock(blockLocation: BlockLocation): void;\n    \n    /**\n     * Simulates the player interacting with an entity.\n     */\n    interactWithEntity(entity: Entity): void;\n    \n    /**\n     * Simulates the player attacking an entity.\n     */\n    attack(entity: Entity): void;\n    \n    /**\n     * Simulates the player attacking a location.\n     */\n    attackBlock(blockLocation: BlockLocation, direction?: Direction): void;\n    \n    /**\n     * Simulates the player breaking a block.\n     */\n    breakBlock(blockLocation: BlockLocation, direction?: Direction): void;\n    \n    /**\n     * Simulates the player using an item.\n     */\n    useItem(itemStack: ItemStack): void;\n    \n    /**\n     * Simulates the player using an item on a block.\n     */\n    useItemOnBlock(itemStack: ItemStack, blockLocation: BlockLocation, direction?: Direction): void;\n    \n    /**\n     * Simulates the player using an item in a specific direction.\n     */\n    useItemInSlot(slot: number): void;\n    \n    /**\n     * Simulates the player using an item in a slot on a block.\n     */\n    useItemInSlotOnBlock(slot: number, blockLocation: BlockLocation, direction?: Direction): void;\n    \n    /**\n     * Gives an item to the simulated player.\n     */\n    giveItem(itemStack: ItemStack, selectSlot?: boolean): void;\n    \n    /**\n     * Sets the item in the simulated player's inventory.\n     */\n    setItem(itemStack: ItemStack, slot: number, selectSlot?: boolean): void;\n  }\n  \n  /**\n   * Tags for registering GameTests.\n   */\n  export interface GameTestSequence {\n    thenExecute(callback: () => void): GameTestSequence;\n    thenExecuteAfter(delayTicks: number, callback: () => void): GameTestSequence;\n    thenExecuteFor(tickCount: number, callback: () => void): GameTestSequence;\n    thenFail(errorMessage: string): void;\n    thenIdle(delayTicks: number): GameTestSequence;\n    thenSucceed(): void;\n    thenWait(callback: () => void): GameTestSequence;\n    thenWaitAfter(delayTicks: number, callback: () => void): GameTestSequence;\n  }\n  \n  /**\n   * Register a GameTest function.\n   */\n  export function register(testClassName: string, testName: string, testFunction: (test: Test) => void): void;\n  \n  /**\n   * Register a GameTest with additional configuration.\n   */\n  export function registerAsync(testClassName: string, testName: string, testFunction: (test: Test) => Promise<void>): void;\n  \n  // Common interfaces and imports\n  import { BlockLocation, Vector3, Direction, BlockPermutation, Block } from \"@minecraft/server\";\n}\n`;\n\n    // Create JavaScript-compatible JSDoc type definitions\n    const minecraftServerJSTypes = `\n// Minecraft Server API JavaScript Type Definitions with JSDoc\n/**\n * @namespace MinecraftServer\n */\n\n/**\n * Represents the world and its properties.\n * @class\n */\nclass World {\n  /**\n   * Sends a message to all players in the world.\n   * @param {string} message - The message to send\n   * @returns {void}\n   */\n  sendMessage(message) {}\n  \n  /**\n   * Gets all players currently in the world.\n   * @returns {Player[]} Array of all players\n   */\n  getAllPlayers() {}\n  \n  /**\n   * Gets players by name or other criteria.\n   * @param {Object} [options] - Filter options\n   * @param {string} [options.name] - Player name to filter by\n   * @returns {Player[]} Array of matching players\n   */\n  getPlayers(options) {}\n  \n  /**\n   * Gets the default spawn location for the world.\n   * @returns {Vector3} The spawn location\n   */\n  getDefaultSpawnLocation() {}\n  \n  /**\n   * Gets all entities in the world.\n   * @param {EntityQueryOptions} [options] - Filter options\n   * @returns {Entity[]} Array of entities\n   */\n  getEntities(options) {}\n  \n  /**\n   * Gets the current time of day.\n   * @returns {number} Current time of day\n   */\n  getTimeOfDay() {}\n  \n  /**\n   * Sets the time of day.\n   * @param {number} timeOfDay - Time to set\n   * @returns {void}\n   */\n  setTimeOfDay(timeOfDay) {}\n  \n  /**\n   * Event system for world events.\n   * @type {WorldAfterEvents}\n   */\n  afterEvents;\n  \n  /**\n   * Event system for world events (before they happen).\n   * @type {WorldBeforeEvents}\n   */\n  beforeEvents;\n}\n\n/**\n * Represents a player in the game.\n * @class\n * @extends Entity\n */\nclass Player extends Entity {\n  /**\n   * The player's name.\n   * @type {string}\n   * @readonly\n   */\n  name;\n  \n  /**\n   * Whether the player is an operator.\n   * @type {boolean}\n   * @readonly\n   */\n  isOp;\n  \n  /**\n   * Sends a message to this player.\n   * @param {string} message - Message to send\n   * @returns {void}\n   */\n  sendMessage(message) {}\n  \n  /**\n   * Kicks the player from the server.\n   * @param {string} [reason] - Reason for kick\n   * @returns {void}\n   */\n  kick(reason) {}\n  \n  /**\n   * Teleports the player to a location.\n   * @param {Vector3} location - Target location\n   * @param {TeleportOptions} [teleportOptions] - Teleport options\n   * @returns {void}\n   */\n  teleport(location, teleportOptions) {}\n  \n  /**\n   * Runs a command as this player.\n   * @param {string} commandString - Command to run\n   * @returns {CommandResult} Command result\n   */\n  runCommand(commandString) {}\n}\n\n/**\n * Base class for all entities.\n * @class\n */\nclass Entity {\n  /**\n   * Unique identifier for the entity.\n   * @type {string}\n   * @readonly\n   */\n  id;\n  \n  /**\n   * Current location of the entity.\n   * @type {Vector3}\n   * @readonly\n   */\n  location;\n  \n  /**\n   * Current velocity of the entity.\n   * @type {Vector3}\n   * @readonly\n   */\n  velocity;\n  \n  /**\n   * The entity's rotation.\n   * @type {Vector2}\n   * @readonly\n   */\n  rotation;\n  \n  /**\n   * Whether the entity is valid and exists.\n   * @type {boolean}\n   * @readonly\n   */\n  isValid;\n  \n  /**\n   * The entity's dimension.\n   * @type {Dimension}\n   * @readonly\n   */\n  dimension;\n  \n  /**\n   * Teleports the entity to a location.\n   * @param {Vector3} location - Target location\n   * @param {TeleportOptions} [teleportOptions] - Teleport options\n   * @returns {void}\n   */\n  teleport(location, teleportOptions) {}\n  \n  /**\n   * Removes the entity from the world.\n   * @returns {void}\n   */\n  remove() {}\n  \n  /**\n   * Runs a command as this entity.\n   * @param {string} commandString - Command to run\n   * @returns {CommandResult} Command result\n   */\n  runCommand(commandString) {}\n  \n  /**\n   * Gets a component from the entity.\n   * @param {string} componentId - Component identifier\n   * @returns {*} Component or undefined\n   */\n  getComponent(componentId) {}\n  \n  /**\n   * Checks if entity has a component.\n   * @param {string} componentId - Component identifier\n   * @returns {boolean} True if component exists\n   */\n  hasComponent(componentId) {}\n}\n\n/**\n * Represents a dimension (Overworld, Nether, End).\n * @class\n */\nclass Dimension {\n  /**\n   * Identifier for this dimension.\n   * @type {string}\n   * @readonly\n   */\n  id;\n  \n  /**\n   * Gets a block at the specified location.\n   * @param {Vector3} location - Block location\n   * @returns {Block|undefined} Block or undefined\n   */\n  getBlock(location) {}\n  \n  /**\n   * Sets a block at the specified location.\n   * @param {Vector3} location - Block location\n   * @param {BlockType} blockType - Block type to set\n   * @returns {void}\n   */\n  setBlockType(location, blockType) {}\n  \n  /**\n   * Gets all entities in this dimension.\n   * @param {EntityQueryOptions} [options] - Filter options\n   * @returns {Entity[]} Array of entities\n   */\n  getEntities(options) {}\n  \n  /**\n   * Spawns an entity at the specified location.\n   * @param {string} identifier - Entity identifier\n   * @param {Vector3} location - Spawn location\n   * @returns {Entity} Spawned entity\n   */\n  spawnEntity(identifier, location) {}\n}\n\n/**\n * Represents a block in the world.\n * @class\n */\nclass Block {\n  /**\n   * Location of this block.\n   * @type {Vector3}\n   * @readonly\n   */\n  location;\n  \n  /**\n   * The block type.\n   * @type {BlockType}\n   * @readonly\n   */\n  type;\n  \n  /**\n   * The dimension this block is in.\n   * @type {Dimension}\n   * @readonly\n   */\n  dimension;\n  \n  /**\n   * Whether this block is valid.\n   * @type {boolean}\n   * @readonly\n   */\n  isValid;\n}\n\n/**\n * Represents a block type.\n * @class\n */\nclass BlockType {\n  /**\n   * Identifier for this block type.\n   * @type {string}\n   * @readonly\n   */\n  id;\n}\n\n/**\n * @typedef {Object} Vector3\n * @property {number} x - X coordinate\n * @property {number} y - Y coordinate\n * @property {number} z - Z coordinate\n */\n\n/**\n * @typedef {Object} Vector2\n * @property {number} x - X coordinate\n * @property {number} y - Y coordinate\n */\n\n/**\n * @typedef {Object} EntityQueryOptions\n * @property {string} [type] - Entity type filter\n * @property {string} [name] - Entity name filter\n * @property {Vector3} [location] - Location filter\n * @property {number} [maxDistance] - Maximum distance\n * @property {number} [minDistance] - Minimum distance\n */\n\n/**\n * @typedef {Object} TeleportOptions\n * @property {Dimension} [dimension] - Target dimension\n * @property {Vector2} [rotation] - Target rotation\n * @property {Vector3} [facingLocation] - Location to face\n * @property {boolean} [checkForBlocks] - Check for blocks\n * @property {boolean} [keepVelocity] - Keep velocity\n */\n\n/**\n * @typedef {Object} CommandResult\n * @property {number} successCount - Number of successful commands\n */\n\n/**\n * Global world instance\n * @type {World}\n */\nconst world = new World();\n\n/**\n * System utilities for timing and scheduling\n * @namespace\n */\nconst system = {\n  /**\n   * Runs a function after a specified number of ticks.\n   * @param {Function} callback - Function to run\n   * @param {number} [tickDelay] - Delay in ticks\n   * @returns {number} Run ID\n   */\n  runTimeout: function(callback, tickDelay) {},\n  \n  /**\n   * Runs a function at a specified interval.\n   * @param {Function} callback - Function to run\n   * @param {number} [tickInterval] - Interval in ticks\n   * @returns {number} Run ID\n   */\n  runInterval: function(callback, tickInterval) {},\n  \n  /**\n   * Clears a timeout or interval.\n   * @param {number} runId - Run ID to clear\n   * @returns {void}\n   */\n  clearRun: function(runId) {},\n  \n  /**\n   * Gets the current tick.\n   * @type {number}\n   */\n  currentTick: 0\n};\n`;\n\n    const minecraftServerUIJSTypes = `\n// Minecraft Server UI API JavaScript Type Definitions with JSDoc\n\n/**\n * Represents a simple action form with buttons.\n * @class\n */\nclass ActionFormData {\n  /**\n   * Creates a new ActionFormData.\n   * @constructor\n   */\n  constructor() {}\n  \n  /**\n   * Adds a button to the form.\n   * @param {string} text - Button text\n   * @param {string} [iconPath] - Optional icon path\n   * @returns {ActionFormData} This form for chaining\n   */\n  button(text, iconPath) {}\n  \n  /**\n   * Sets the body text of the form.\n   * @param {string} bodyText - Body text\n   * @returns {ActionFormData} This form for chaining\n   */\n  body(bodyText) {}\n  \n  /**\n   * Sets the title of the form.\n   * @param {string} titleText - Title text\n   * @returns {ActionFormData} This form for chaining\n   */\n  title(titleText) {}\n  \n  /**\n   * Shows the form to a player.\n   * @param {Player} player - Player to show form to\n   * @returns {Promise<ActionFormResponse>} Form response\n   */\n  show(player) {}\n}\n\n/**\n * Represents a modal form with text fields and toggles.\n * @class\n */\nclass ModalFormData {\n  /**\n   * Creates a new ModalFormData.\n   * @constructor\n   */\n  constructor() {}\n  \n  /**\n   * Adds a dropdown field to the form.\n   * @param {string} label - Field label\n   * @param {string[]} options - Dropdown options\n   * @param {number} [defaultValueIndex] - Default selected index\n   * @returns {ModalFormData} This form for chaining\n   */\n  dropdown(label, options, defaultValueIndex) {}\n  \n  /**\n   * Adds a slider field to the form.\n   * @param {string} label - Field label\n   * @param {number} minimumValue - Minimum value\n   * @param {number} maximumValue - Maximum value\n   * @param {number} valueStep - Step size\n   * @param {number} [defaultValue] - Default value\n   * @returns {ModalFormData} This form for chaining\n   */\n  slider(label, minimumValue, maximumValue, valueStep, defaultValue) {}\n  \n  /**\n   * Adds a text field to the form.\n   * @param {string} label - Field label\n   * @param {string} [placeholderText] - Placeholder text\n   * @param {string} [defaultValue] - Default value\n   * @returns {ModalFormData} This form for chaining\n   */\n  textField(label, placeholderText, defaultValue) {}\n  \n  /**\n   * Sets the title of the form.\n   * @param {string} titleText - Title text\n   * @returns {ModalFormData} This form for chaining\n   */\n  title(titleText) {}\n  \n  /**\n   * Adds a toggle field to the form.\n   * @param {string} label - Field label\n   * @param {boolean} [defaultValue] - Default value\n   * @returns {ModalFormData} This form for chaining\n   */\n  toggle(label, defaultValue) {}\n  \n  /**\n   * Shows the form to a player.\n   * @param {Player} player - Player to show form to\n   * @returns {Promise<ModalFormResponse>} Form response\n   */\n  show(player) {}\n}\n\n/**\n * Represents a message form with up to two buttons.\n * @class\n */\nclass MessageFormData {\n  /**\n   * Creates a new MessageFormData.\n   * @constructor\n   */\n  constructor() {}\n  \n  /**\n   * Sets the body text of the form.\n   * @param {string} bodyText - Body text\n   * @returns {MessageFormData} This form for chaining\n   */\n  body(bodyText) {}\n  \n  /**\n   * Sets the text for button 1.\n   * @param {string} text - Button text\n   * @returns {MessageFormData} This form for chaining\n   */\n  button1(text) {}\n  \n  /**\n   * Sets the text for button 2.\n   * @param {string} text - Button text\n   * @returns {MessageFormData} This form for chaining\n   */\n  button2(text) {}\n  \n  /**\n   * Sets the title of the form.\n   * @param {string} titleText - Title text\n   * @returns {MessageFormData} This form for chaining\n   */\n  title(titleText) {}\n  \n  /**\n   * Shows the form to a player.\n   * @param {Player} player - Player to show form to\n   * @returns {Promise<MessageFormResponse>} Form response\n   */\n  show(player) {}\n}\n\n/**\n * @typedef {Object} ActionFormResponse\n * @property {boolean} canceled - Whether the form was canceled\n * @property {number} [selection] - Index of selected button\n */\n\n/**\n * @typedef {Object} ModalFormResponse\n * @property {boolean} canceled - Whether the form was canceled\n * @property {Array<boolean|number|string>} [formValues] - Form field values\n */\n\n/**\n * @typedef {Object} MessageFormResponse\n * @property {boolean} canceled - Whether the form was canceled\n * @property {number} [selection] - Index of selected button (0 or 1)\n */\n`;\n\n    // Add the TypeScript definitions to Monaco's TypeScript service\n    monaco.languages.typescript.typescriptDefaults.addExtraLib(minecraftServerTypes, 'minecraft-server.d.ts');\n    monaco.languages.typescript.typescriptDefaults.addExtraLib(minecraftServerUITypes, 'minecraft-server-ui.d.ts');\n    monaco.languages.typescript.typescriptDefaults.addExtraLib(minecraftServerGameTestTypes, 'minecraft-server-gametest.d.ts');\n    \n    // Add the JavaScript definitions to Monaco's JavaScript service\n    monaco.languages.typescript.javascriptDefaults.addExtraLib(minecraftServerJSTypes, 'minecraft-server-js.js');\n    monaco.languages.typescript.javascriptDefaults.addExtraLib(minecraftServerUIJSTypes, 'minecraft-server-ui-js.js');\n    \n    // Configure TypeScript compiler options for better IntelliSense\n    monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n      target: monaco.languages.typescript.ScriptTarget.ES2020,\n      allowNonTsExtensions: true,\n      moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n      module: monaco.languages.typescript.ModuleKind.CommonJS,\n      noEmit: true,\n      esModuleInterop: true,\n      allowSyntheticDefaultImports: true,\n      allowJs: true,\n      typeRoots: [\"node_modules/@types\"]\n    });\n    \n    // Configure JavaScript compiler options for better IntelliSense\n    monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n      target: monaco.languages.typescript.ScriptTarget.ES2020,\n      allowNonTsExtensions: true,\n      moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n      module: monaco.languages.typescript.ModuleKind.CommonJS,\n      noEmit: true,\n      esModuleInterop: true,\n      allowSyntheticDefaultImports: true,\n      allowJs: true,\n      checkJs: true, // Enable type checking for JavaScript\n      typeRoots: [\"node_modules/@types\"]\n    });\n    \n    // Set stricter diagnostics options for better error detection\n    monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n      noSemanticValidation: false,\n      noSyntaxValidation: false,\n      diagnosticCodesToIgnore: [1108] // Ignore missing return type warnings for now\n    });\n    \n    // Set JavaScript diagnostics options\n    monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n      noSemanticValidation: false,\n      noSyntaxValidation: false,\n      diagnosticCodesToIgnore: [1108, 7016] // Ignore missing return type warnings and implicit any\n    });\n\n    // Register completion provider for TypeScript\n    monaco.languages.registerCompletionItemProvider('typescript', {\n      provideCompletionItems: (model, position) => {\n        const suggestions: Monaco.languages.CompletionItem[] = [];\n        const word = model.getWordUntilPosition(position);\n        const range = {\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        };\n\n        // Get line content to analyze context\n        const lineContent = model.getLineContent(position.lineNumber);\n        const beforeCursor = lineContent.substring(0, position.column - 1);\n        \n        // Check if we're after a dot (for method completion)\n        const dotMatch = beforeCursor.match(/(\\\\w+)\\\\.$/) || beforeCursor.match(/(\\\\w+\\\\.\\\\w+)\\\\.$/) ;\n        \n        if (dotMatch) {\n          // Provide method/property completions for specific objects\n          const objectName = dotMatch[1];\n          \n          // Find elements that could be methods/properties of this object\n          registryData.elements.forEach((element: any) => {\n            if (element.type === 'class' && element.name.toLowerCase().includes(objectName.toLowerCase())) {\n              // Add methods if available\n              if (element.methods) {\n                element.methods.forEach((method: any) => {\n                  const params = method.parameters \n                    ? method.parameters.map((p: any) => `${p.name}: ${p.type}`).join(', ')\n                    : '';\n                  \n                  suggestions.push({\n                    label: method.name,\n                    kind: monaco.languages.CompletionItemKind.Method,\n                    detail: `${method.name}(${params}): ${method.returnType || 'void'}`,\n                    documentation: method.description || `Method from ${element.name}`,\n                    insertText: method.parameters \n                      ? `${method.name}(\\\\${1})`\n                      : `${method.name}()`,\n                    insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n                    range,\n                  });\n                });\n              }\n              \n              // Add properties if available\n              if (element.properties) {\n                element.properties.forEach((prop: any) => {\n                  suggestions.push({\n                    label: prop.name,\n                    kind: monaco.languages.CompletionItemKind.Property,\n                    detail: `${prop.name}: ${prop.type}`,\n                    documentation: prop.description || `Property from ${element.name}`,\n                    insertText: prop.name,\n                    range,\n                  });\n                });\n              }\n            }\n          });\n        } else {\n          // General completions - classes, functions, enums\n          registryData.elements.forEach((element: any) => {\n            const shouldInclude = !word.word || element.name.toLowerCase().includes(word.word.toLowerCase());\n            \n            if (shouldInclude) {\n              let kind: Monaco.languages.CompletionItemKind;\n              let detail = '';\n              let insertText = element.name;\n              \n              switch (element.type) {\n                case 'class':\n                  kind = monaco.languages.CompletionItemKind.Class;\n                  detail = `class ${element.name}`;\n                  break;\n                case 'interface':\n                  kind = monaco.languages.CompletionItemKind.Interface;\n                  detail = `interface ${element.name}`;\n                  break;\n                case 'enum':\n                  kind = monaco.languages.CompletionItemKind.Enum;\n                  detail = `enum ${element.name}`;\n                  break;\n                case 'function':\n                  kind = monaco.languages.CompletionItemKind.Function;\n                  const params = element.parameters \n                    ? element.parameters.map((p: any) => `${p.name}: ${p.type}`).join(', ')\n                    : '';\n                  detail = `function ${element.name}(${params})`;\n                  insertText = element.parameters ? `${element.name}(\\\\${1})` : `${element.name}()`;\n                  break;\n                default:\n                  kind = monaco.languages.CompletionItemKind.Variable;\n                  detail = `${element.type} ${element.name}`;\n              }\n              \n              suggestions.push({\n                label: element.name,\n                kind,\n                detail: `${detail} - ${element.module}`,\n                documentation: element.description || `${element.type} from ${element.module}`,\n                insertText,\n                insertTextRules: insertText.includes('${') \n                  ? monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet \n                  : undefined,\n                range,\n              });\n            }\n          });\n          \n          // Add common imports\n          if (beforeCursor.includes('import')) {\n            registryData.modules.forEach(moduleName => {\n              suggestions.push({\n                label: moduleName,\n                kind: monaco.languages.CompletionItemKind.Module,\n                detail: `Import from ${moduleName}`,\n                documentation: `Minecraft module: ${moduleName}`,\n                insertText: moduleName,\n                range,\n              });\n            });\n          }\n        }\n\n        return { suggestions };\n      },\n    });\n\n    // Create a shared completion provider function for both TypeScript and JavaScript\n    const createCompletionProvider = () => ({\n      provideCompletionItems: (model: Monaco.editor.ITextModel, position: Monaco.Position) => {\n        const suggestions: Monaco.languages.CompletionItem[] = [];\n        const word = model.getWordUntilPosition(position);\n        const range = {\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        };\n\n        // Get line content to analyze context\n        const lineContent = model.getLineContent(position.lineNumber);\n        const beforeCursor = lineContent.substring(0, position.column - 1);\n        \n        // Check if we're after a dot (for method completion)\n        const dotMatch = beforeCursor.match(/(\\\\w+)\\\\.$/) || beforeCursor.match(/(\\\\w+\\\\.\\\\w+)\\\\.$/) ;\n        \n        if (dotMatch) {\n          // Provide method/property completions for specific objects\n          const objectName = dotMatch[1];\n          \n          // Find elements that could be methods/properties of this object\n          registryData.elements.forEach((element: any) => {\n            if (element.type === 'class' && element.name.toLowerCase().includes(objectName.toLowerCase())) {\n              // Add methods if available\n              if (element.methods) {\n                element.methods.forEach((method: any) => {\n                  const params = method.parameters \n                    ? method.parameters.map((p: any) => `${p.name}: ${p.type}`).join(', ')\n                    : '';\n                  \n                  suggestions.push({\n                    label: method.name,\n                    kind: monaco.languages.CompletionItemKind.Method,\n                    detail: `${method.name}(${params}): ${method.returnType || 'void'}`,\n                    documentation: method.description || `Method from ${element.name}`,\n                    insertText: method.parameters \n                      ? `${method.name}(\\\\${1})`\n                      : `${method.name}()`,\n                    insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n                    range,\n                  });\n                });\n              }\n              \n              // Add properties if available\n              if (element.properties) {\n                element.properties.forEach((prop: any) => {\n                  suggestions.push({\n                    label: prop.name,\n                    kind: monaco.languages.CompletionItemKind.Property,\n                    detail: `${prop.name}: ${prop.type}`,\n                    documentation: prop.description || `Property from ${element.name}`,\n                    insertText: prop.name,\n                    range,\n                  });\n                });\n              }\n            }\n          });\n        } else {\n          // General completions - classes, functions, enums\n          registryData.elements.forEach((element: any) => {\n            const shouldInclude = !word.word || element.name.toLowerCase().includes(word.word.toLowerCase());\n            \n            if (shouldInclude) {\n              let kind: Monaco.languages.CompletionItemKind;\n              let detail = '';\n              let insertText = element.name;\n              \n              switch (element.type) {\n                case 'class':\n                  kind = monaco.languages.CompletionItemKind.Class;\n                  detail = `class ${element.name}`;\n                  break;\n                case 'interface':\n                  kind = monaco.languages.CompletionItemKind.Interface;\n                  detail = `interface ${element.name}`;\n                  break;\n                case 'enum':\n                  kind = monaco.languages.CompletionItemKind.Enum;\n                  detail = `enum ${element.name}`;\n                  break;\n                case 'function':\n                  kind = monaco.languages.CompletionItemKind.Function;\n                  const params = element.parameters \n                    ? element.parameters.map((p: any) => `${p.name}: ${p.type}`).join(', ')\n                    : '';\n                  detail = `function ${element.name}(${params})`;\n                  insertText = element.parameters ? `${element.name}(\\\\${1})` : `${element.name}()`;\n                  break;\n                default:\n                  kind = monaco.languages.CompletionItemKind.Variable;\n                  detail = `${element.type} ${element.name}`;\n              }\n              \n              suggestions.push({\n                label: element.name,\n                kind,\n                detail: `${detail} - ${element.module}`,\n                documentation: element.description || `${element.type} from ${element.module}`,\n                insertText,\n                insertTextRules: insertText.includes('${') \n                  ? monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet \n                  : undefined,\n                range,\n              });\n            }\n          });\n          \n          // Add common imports\n          if (beforeCursor.includes('import')) {\n            registryData.modules.forEach(moduleName => {\n              suggestions.push({\n                label: moduleName,\n                kind: monaco.languages.CompletionItemKind.Module,\n                detail: `Import from ${moduleName}`,\n                documentation: `Minecraft module: ${moduleName}`,\n                insertText: moduleName,\n                range,\n              });\n            });\n          }\n        }\n\n        return { suggestions };\n      },\n    });\n\n    // Register the comprehensive completion provider for both TypeScript and JavaScript\n    monaco.languages.registerCompletionItemProvider('typescript', createCompletionProvider());\n    monaco.languages.registerCompletionItemProvider('javascript', createCompletionProvider());\n\n    // Configure additional editor features - main scrolling config is in Editor component options\n    // Only set features that aren't configured in the main options\n    editor.updateOptions({\n      suggest: {\n        showIcons: true,\n        showSnippets: true,\n        showWords: true,\n        showTypeParameters: true,\n      },\n      quickSuggestions: {\n        other: true,\n        comments: true,\n        strings: true,\n      },\n      quickSuggestionsDelay: 100,\n      suggestOnTriggerCharacters: true,\n      acceptSuggestionOnEnter: 'on',\n      tabCompletion: 'on',\n      wordBasedSuggestions: 'allDocuments',\n      parameterHints: {\n        enabled: true,\n        cycle: true,\n      },\n    });\n  }, [registryData]);\n\n  // Get active script before using it in effects\n  const activeScript = scripts.find(s => s.id === activeScriptId) || scripts[0];\n  \n  // Add useEffect to handle language changes dynamically\n  useEffect(() => {\n    if (editorRef.current.monaco && (editorRef.current as any).updateLanguageSettings) {\n      // Apply language settings when language changes\n      (editorRef.current as any).updateLanguageSettings(activeScript.language);\n    }\n  }, [activeScript.language]);\n\n  // Apply initial language configuration on mount or registry change\n  useEffect(() => {\n    if (editorRef.current.monaco && (editorRef.current as any).updateLanguageSettings) {\n      (editorRef.current as any).updateLanguageSettings(activeScript.language);\n    }\n  }, [registryData, activeScript.language]);\n\n  // Search and filter logic\n  const filteredElements = useMemo(() => {\n    let filtered = registryData.elements;\n\n    // Text search\n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase();\n      filtered = filtered.filter((element: any) => \n        element.name.toLowerCase().includes(searchLower) ||\n        element.description?.toLowerCase().includes(searchLower) ||\n        element.module.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // Module filter\n    if (filters.modules.length > 0) {\n      filtered = filtered.filter((element: any) => filters.modules.includes(element.module));\n    }\n\n    // Type filter\n    if (filters.types.length > 0) {\n      filtered = filtered.filter((element: any) => filters.types.includes(element.type));\n    }\n\n    // Favorites filter\n    if (filters.favorites) {\n      filtered = filtered.filter((element: any) => favorites.has(element.id));\n    }\n\n    return filtered;\n  }, [registryData.elements, searchTerm, filters, favorites]);\n\n  // Helper functions\n  const getElementIcon = (type: string) => {\n    switch (type) {\n      case 'class': return <Box className=\"w-4 h-4 text-blue-500\" />;\n      case 'interface': return <Layers className=\"w-4 h-4 text-green-500\" />;\n      case 'enum': return <Target className=\"w-4 h-4 text-yellow-500\" />;\n      case 'function': return <FunctionSquare className=\"w-4 h-4 text-purple-500\" />;\n      case 'type': return <Code2 className=\"w-4 h-4 text-cyan-500\" />;\n      default: return <Cpu className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  // Script management\n  const addScript = () => {\n    const newId = Date.now().toString();\n    const newScript: ScriptTab = {\n      id: newId,\n      name: `Script ${scripts.length + 1}`,\n      content: \"// New Minecraft script\\\\nimport { world } from '@minecraft/server';\\\\n\\\\n\",\n      language: \"typescript\"\n    };\n    setScripts(prev => [...prev, newScript]);\n    setActiveScriptId(newId);\n  };\n\n  const removeScript = (scriptId: string) => {\n    if (scripts.length <= 1) return;\n    setScripts(prev => prev.filter(s => s.id !== scriptId));\n    if (activeScriptId === scriptId) {\n      setActiveScriptId(scripts.find(s => s.id !== scriptId)?.id || scripts[0].id);\n    }\n  };\n\n  const updateScript = (scriptId: string, updates: Partial<ScriptTab>) => {\n    setScripts(prev => prev.map(script => \n      script.id === scriptId ? { ...script, ...updates } : script\n    ));\n  };\n\n  // Element selection\n  const selectElement = useCallback((element: any) => {\n    setSelectedElement({\n      id: element.id,\n      name: element.name,\n      type: element.type,\n      module: element.module,\n      element\n    });\n    setParameterValues({});\n  }, []);\n\n  // Toggle functions\n  const toggleFavorite = useCallback((elementId: string) => {\n    setFavorites(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(elementId)) {\n        newSet.delete(elementId);\n      } else {\n        newSet.add(elementId);\n      }\n      return newSet;\n    });\n  }, []);\n\n  // Export functionality\n  const exportScript = (scriptId: string) => {\n    const script = scripts.find(s => s.id === scriptId);\n    if (!script) return;\n\n    const blob = new Blob([script.content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${script.name.replace(/\\\\s+/g, '_')}.${script.language === 'typescript' ? 'ts' : 'js'}`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const copyScript = async (scriptId: string) => {\n    const script = scripts.find(s => s.id === scriptId);\n    if (!script) return;\n\n    try {\n      await navigator.clipboard.writeText(script.content);\n    } catch (err) {\n      console.error('Failed to copy script:', err);\n    }\n  };\n\n  const insertCode = (code: string) => {\n    if (editorRef.current.editor) {\n      const editor = editorRef.current.editor;\n      const selection = editor.getSelection();\n      const range = selection || editor.getModel()?.getFullModelRange();\n      \n      if (range) {\n        editor.executeEdits('insert-code', [{\n          range,\n          text: code,\n          forceMoveMarkers: true,\n        }]);\n        editor.focus();\n      }\n    }\n  };\n\n  return (\n    <section className=\"h-full flex flex-col\" data-testid=\"script-studio\">\n      {/* Header - Compact */}\n      <div className=\"p-3 border-b bg-background\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-lg font-bold text-foreground\">Script Studio</h2>\n            <p className=\"text-xs text-muted-foreground\">\n              Professional Monaco Editor • {registryData.totalElements} API elements • VS Code-style autocomplete\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n              data-testid=\"button-toggle-sidebar\"\n            >\n              {sidebarCollapsed ? <ChevronRight className=\"w-4 h-4\" /> : <ChevronLeft className=\"w-4 h-4\" />}\n              <span className=\"ml-1 hidden sm:inline\">API</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setEditorExpanded(!editorExpanded)}\n              data-testid=\"button-toggle-fullscreen\"\n            >\n              {editorExpanded ? <Minimize2 className=\"w-4 h-4\" /> : <Maximize2 className=\"w-4 h-4\" />}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content - Editor Prominent Layout */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        <ResizablePanelGroup direction=\"horizontal\" className=\"h-full\">\n          {/* Left Sidebar - API Browser (Collapsible) */}\n          {!sidebarCollapsed && (\n            <>\n              <ResizablePanel defaultSize={25} minSize={15} maxSize={40}>\n                <div className=\"h-full flex flex-col border-r bg-muted/20\">\n                  <div className=\"p-3 border-b\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-semibold text-sm\">API Browser</h3>\n                      <div className=\"flex items-center gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setShowAdvancedSearch(!showAdvancedSearch)}\n                          data-testid=\"button-toggle-advanced-search\"\n                        >\n                          <Filter className=\"w-3 h-3\" />\n                        </Button>\n                        <Badge variant=\"secondary\" className=\"text-xs\">{filteredElements.length}</Badge>\n                      </div>\n                    </div>\n\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 w-3 h-3 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search APIs...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-7 h-8 text-sm\"\n                        data-testid=\"input-api-search\"\n                      />\n                    </div>\n\n                    {showAdvancedSearch && (\n                      <div className=\"mt-2 p-2 bg-muted rounded space-y-2\">\n                        <div>\n                          <Label className=\"text-xs font-medium\">Modules</Label>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {registryData.modules.map(module => (\n                              <Badge\n                                key={module}\n                                variant={filters.modules.includes(module) ? \"default\" : \"outline\"}\n                                className=\"cursor-pointer text-xs h-5\"\n                                onClick={() => {\n                                  setFilters(prev => ({\n                                    ...prev,\n                                    modules: prev.modules.includes(module)\n                                      ? prev.modules.filter(m => m !== module)\n                                      : [...prev.modules, module]\n                                  }));\n                                }}\n                              >\n                                {module.replace('@minecraft/', '')}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  <ScrollArea className=\"flex-1\">\n                    <div className=\"p-2 space-y-1\">\n                      {filteredElements.map((element: any) => (\n                        <div\n                          key={element.id}\n                          className={cn(\n                            \"p-2 rounded cursor-pointer transition-colors hover:bg-muted\",\n                            selectedElement?.id === element.id ? \"bg-accent\" : \"\"\n                          )}\n                          onClick={() => selectElement(element)}\n                          data-testid={`element-${element.name}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2 min-w-0\">\n                              {getElementIcon(element.type)}\n                              <span className=\"font-medium text-sm truncate\">{element.name}</span>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {element.type}\n                              </Badge>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"w-5 h-5 p-0\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  toggleFavorite(element.id);\n                                }}\n                              >\n                                <Star\n                                  className={cn(\n                                    \"w-3 h-3\",\n                                    favorites.has(element.id) ? \"fill-yellow-400 text-yellow-400\" : \"text-muted-foreground\"\n                                  )}\n                                />\n                              </Button>\n                            </div>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground mt-1 truncate\">\n                            {element.module} • {element.description?.slice(0, 40)}...\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </div>\n              </ResizablePanel>\n              <ResizableHandle withHandle />\n            </>\n          )}\n\n          {/* Main Panel - Editor Focused */}\n          <ResizablePanel defaultSize={sidebarCollapsed ? 100 : 75}>\n            <div className=\"h-full flex flex-col\">\n              {/* Script Tabs - Compact */}\n              <div className=\"flex items-center justify-between p-2 border-b bg-muted/10\">\n                <div className=\"flex items-center gap-1\">\n                  {scripts.map(script => (\n                    <div key={script.id} className=\"flex items-center\">\n                      <Button\n                        variant={script.id === activeScriptId ? \"secondary\" : \"ghost\"}\n                        size=\"sm\"\n                        onClick={() => setActiveScriptId(script.id)}\n                        className=\"rounded-r-none h-8 text-xs\"\n                      >\n                        {script.name}\n                      </Button>\n                      {scripts.length > 1 && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeScript(script.id)}\n                          className=\"rounded-l-none border-l-0 px-1 h-8\"\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                  <Button variant=\"ghost\" size=\"sm\" onClick={addScript} className=\"h-8\">\n                    <Plus className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center gap-1\">\n                  <Select\n                    value={activeScript.language}\n                    onValueChange={(value: 'javascript' | 'typescript') => \n                      updateScript(activeScriptId, { language: value })\n                    }\n                  >\n                    <SelectTrigger className=\"w-20 h-8 text-xs\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"typescript\">TS</SelectItem>\n                      <SelectItem value=\"javascript\">JS</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyScript(activeScriptId)}\n                    data-testid=\"button-copy-script\"\n                    className=\"h-8\"\n                  >\n                    <Copy className=\"w-3 h-3\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => exportScript(activeScriptId)}\n                    data-testid=\"button-export-script\"\n                    className=\"h-8\"\n                  >\n                    <Download className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Monaco Editor - PROMINENT POSITION */}\n              <div className=\"flex-1 flex flex-col bg-editor\">\n                <div className=\"flex-1\">\n                  <Editor\n                    height=\"100%\"\n                    defaultLanguage={activeScript.language}\n                    language={activeScript.language}\n                    value={activeScript.content}\n                    onChange={(value) => updateScript(activeScriptId, { content: value || '' })}\n                    onMount={setupMonacoEditor}\n                    theme=\"vs-dark\"\n                    beforeMount={(monaco) => {\n                      // Ensure dark theme is applied before mounting to prevent white flash\n                      monaco.editor.setTheme('vs-dark');\n                    }}\n                    options={{\n                      // Basic editor appearance - OPTIMIZED FOR CURSOR POSITIONING\n                      fontSize: 14,\n                      lineHeight: 21,  // Optimal ratio (1.5x) for precise cursor positioning\n                      fontFamily: 'Consolas, Monaco, \"Courier New\", monospace',  // More reliable font stack\n                      fontLigatures: false,  // Disable ligatures to prevent positioning issues\n                      fontWeight: '400',  // Consistent font weight\n                      letterSpacing: 0,  // No extra letter spacing\n                      minimap: { enabled: false },\n                      roundedSelection: false,\n                      padding: { top: 8, bottom: 8, left: 0, right: 0 },  // Minimal padding\n                      automaticLayout: true,\n                      \n                      // CURSOR AND MOUSE POSITIONING - CRITICAL FIXES\n                      mouseStyle: 'text',  // Ensure text cursor on hover\n                      multiCursorModifier: 'ctrlCmd',  // Standard multi-cursor behavior\n                      multiCursorMergeOverlapping: true,  // Merge overlapping cursors\n                      multiCursorPaste: 'spread',  // Handle multi-cursor paste properly\n                      disableMonospaceOptimizations: false,  // Keep monospace optimizations\n                      \n                      // PRECISE CHARACTER POSITIONING\n                      renderWhitespace: 'none',  // Don't render whitespace that affects positioning\n                      renderControlCharacters: false,  // Don't render control chars\n                      renderIndentGuides: false,  // Disable indent guides that might interfere\n                      \n                      // CONTAINER AND LAYOUT FIXES\n                      dimension: undefined,  // Let Monaco handle dimensions\n                      overviewRulerLanes: 0,  // Disable overview ruler to save space\n                      hideCursorInOverviewRuler: true,  // Hide cursor in overview\n                      overviewRulerBorder: false,  // No overview border\n                      \n                      // SCROLLING CONFIGURATION - FIXED FOR PROPER SCROLLING\n                      scrollBeyondLastLine: true,  // Allow scrolling beyond last line\n                      scrollbar: {\n                        vertical: 'auto',           // Auto show/hide vertical scrollbar\n                        horizontal: 'auto',         // Auto show/hide horizontal scrollbar\n                        verticalScrollbarSize: 14,  // Larger scrollbars for easier interaction\n                        horizontalScrollbarSize: 14,\n                        handleMouseWheel: true,     // Ensure mouse wheel events are handled\n                        alwaysConsumeMouseWheel: false,  // KEY FIX: Allow scroll chaining to parent\n                        useShadows: false,          // Disable shadows for performance\n                      },\n                      mouseWheelScrollSensitivity: 1,     // Normal mouse wheel sensitivity\n                      fastScrollSensitivity: 5,           // Fast scroll sensitivity\n                      scrollPredominantAxis: true,        // Better multi-directional scrolling\n                      smoothScrolling: true,              // Smooth scroll animation\n                      disableLayerHinting: false,         // Keep layer hinting for performance\n                      \n                      // CURSOR CONFIGURATION - ENHANCED FOR PRECISION\n                      cursorStyle: 'line',  // Line cursor for precision\n                      cursorWidth: 2,  // Standard width\n                      cursorBlinking: 'blink',  // Visible blinking\n                      cursorSmoothCaretAnimation: true,  // Smooth cursor movement\n                      renderLineHighlight: 'line',  // Highlight current line\n                      renderLineHighlightOnlyWhenFocus: false,  // Always show line highlight\n                      selectOnLineNumbers: true,  // Allow line number selection\n                      selectionHighlight: true,  // Highlight selections\n                      occurrencesHighlight: true,  // Highlight word occurrences\n                      \n                      // MOUSE INTERACTION FIXES\n                      mouseWheelZoom: false,  // Disable zoom to prevent positioning issues\n                      links: false,  // Disable automatic link detection\n                      find: {\n                        seedSearchStringFromSelection: 'selection',  // Use selection for search\n                        autoFindInSelection: 'multiline'  // Auto-find in multiline selections\n                      },\n                      \n                      // LINE NUMBERS AND MARGINS - OPTIMIZED\n                      lineNumbers: 'on',  // Always show line numbers\n                      lineNumbersMinChars: 4,  // Minimum width for line numbers\n                      glyphMargin: false,  // No glyph margin to save space\n                      lineDecorationsWidth: 0,  // No decoration width\n                      folding: true,  // Enable code folding\n                      foldingMaximumRegions: 5000,  // Allow many folding regions\n                      foldingStrategy: 'indentation',  // Use indentation for folding\n                      \n                      showFoldingControls: 'mouseover',  // Show folding on hover\n                      \n                      // WORD WRAPPING - CURSOR-FRIENDLY\n                      wordWrap: 'off',  // No wrapping to maintain cursor accuracy\n                      wordWrapColumn: 120,  // Wider wrap column if enabled\n                      wrappingIndent: 'indent',  // Proper indentation for wrapped lines\n                      wrappingStrategy: 'advanced',  // Better wrapping algorithm\n                      \n                      // PERFORMANCE OPTIMIZATIONS FOR CURSOR TRACKING\n                      suggest: {\n                        insertMode: 'replace',  // Replace mode for suggestions\n                        filterGraceful: true,  // Graceful filtering\n                        showIcons: true,  // Show suggestion icons\n                        showSnippets: true,  // Show snippets\n                        showWords: false,  // Don't show word suggestions (reduces interference)\n                        localityBonus: true  // Boost local suggestions\n                      },\n                      \n                      // EDITOR BEHAVIOR FOR ACCURATE POSITIONING\n                      stickyTabStops: false,  // Don't use sticky tab stops\n                      tabCompletion: 'on',  // Enable tab completion\n                      useTabStops: true,  // Use tab stops for indentation\n                      detectIndentation: true,  // Auto-detect indentation\n                      insertSpaces: true,  // Use spaces instead of tabs\n                      tabSize: 2,  // 2-space tabs\n                      trimAutoWhitespace: true,  // Trim auto whitespace\n                      \n                      // ACCESSIBILITY AND FOCUS\n                      ariaLabel: 'Script Studio Code Editor',\n                      readOnly: false,\n                      domReadOnly: false,\n                      accessibilitySupport: 'auto'\n                    }}\n                    data-testid=\"monaco-editor\"\n                  />\n                </div>\n              </div>\n\n              {/* Bottom Panel - Documentation & Tools (Collapsible) */}\n              {documentationOpen && (\n                <>\n                  <ResizableHandle withHandle />\n                  <div className=\"h-48 border-t bg-muted/10\">\n                    <Tabs defaultValue=\"docs\" className=\"h-full flex flex-col\">\n                      <TabsList className=\"grid w-full grid-cols-3 h-8\">\n                        <TabsTrigger value=\"docs\" className=\"text-xs\">\n                          <Book className=\"w-3 h-3 mr-1\" />\n                          Docs\n                        </TabsTrigger>\n                        <TabsTrigger value=\"tools\" className=\"text-xs\">\n                          <Zap className=\"w-3 h-3 mr-1\" />\n                          Tools\n                        </TabsTrigger>\n                        <TabsTrigger value=\"templates\" className=\"text-xs\">\n                          <Settings className=\"w-3 h-3 mr-1\" />\n                          Templates\n                        </TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"docs\" className=\"flex-1 p-3 overflow-auto\">\n                        {selectedElement ? (\n                          <div>\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <div className=\"flex items-center gap-2\">\n                                {getElementIcon(selectedElement.type)}\n                                <div>\n                                  <h4 className=\"font-semibold text-sm\">{selectedElement.name}</h4>\n                                  <p className=\"text-xs text-muted-foreground\">{selectedElement.module}</p>\n                                </div>\n                              </div>\n                              <Button\n                                size=\"sm\"\n                                onClick={() => insertCode(`${selectedElement.name}`)}\n                                data-testid=\"button-insert-code\"\n                              >\n                                <Plus className=\"w-3 h-3 mr-1\" />\n                                Insert\n                              </Button>\n                            </div>\n                            <p className=\"text-sm\">{selectedElement.element.description}</p>\n                          </div>\n                        ) : (\n                          <div className=\"text-center py-8\">\n                            <Book className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                            <p className=\"text-sm text-muted-foreground\">Select an API element to view documentation</p>\n                          </div>\n                        )}\n                      </TabsContent>\n\n                      <TabsContent value=\"tools\" className=\"flex-1 p-3\">\n                        <div className=\"text-center py-8\">\n                          <Terminal className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                          <p className=\"text-sm text-muted-foreground\">Code tools and utilities</p>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"templates\" className=\"flex-1 p-3 overflow-auto\">\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {[\n                            {\n                              name: \"Hello World\",\n                              code: `import { world } from '@minecraft/server';\\\\nworld.sendMessage(\"Hello!\");`\n                            },\n                            {\n                              name: \"Player Events\",\n                              code: `import { world } from '@minecraft/server';\\\\nworld.afterEvents.playerJoin.subscribe((event) => {\\\\n  world.sendMessage(\\`Welcome \\${event.player.name}!\\`);\\\\n});`\n                            }\n                          ].map((template, idx) => (\n                            <Card key={idx} className=\"cursor-pointer hover:bg-muted/50\" onClick={() => insertCode(template.code)}>\n                              <CardHeader className=\"p-2\">\n                                <CardTitle className=\"text-xs\">{template.name}</CardTitle>\n                              </CardHeader>\n                            </Card>\n                          ))}\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n                  </div>\n                </>\n              )}\n\n              {/* Toggle Documentation Panel */}\n              <div className=\"absolute bottom-2 right-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setDocumentationOpen(!documentationOpen)}\n                  className=\"h-8\"\n                >\n                  {documentationOpen ? <ChevronDown className=\"w-3 h-3\" /> : <ChevronRight className=\"w-3 h-3\" />}\n                </Button>\n              </div>\n            </div>\n          </ResizablePanel>\n        </ResizablePanelGroup>\n      </div>\n    </section>\n  );\n}","size_bytes":89350},"client/src/components/Tools/TextureCreator.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Undo, Redo, Download, Plus, Trash2, Eye, EyeOff, Grid, Save, Upload, Move, ChevronUp, ChevronDown, Settings, Palette } from \"lucide-react\";\nimport { getEmojiWithFallback, type EmojiName } from \"@/assets/emoji-mapping\";\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection, CollapsibleGroup } from \"@/components/ui/collapsible-section\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useLayeredCanvas } from \"@/hooks/useLayeredCanvas\";\nimport { CanvasTool, BrushSettings, Point } from \"@/lib/canvas/tools\";\nimport { LayerData } from \"@/lib/canvas/layers\";\n\nexport default function TextureCreator() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const overlayRef = useRef<HTMLCanvasElement>(null);\n  const cursorRef = useRef<HTMLCanvasElement>(null);\n  const [selectedTool, setSelectedTool] = useState<CanvasTool>('pencil');\n  const [brushSize, setBrushSize] = useState([4]);\n  const [brushOpacity, setBrushOpacity] = useState([100]);\n  const [brushHardness, setBrushHardness] = useState([100]);\n  const [selectedColor, setSelectedColor] = useState('#8b4513');\n  const [showGrid, setShowGrid] = useState(true);\n  const [fillShapes, setFillShapes] = useState(true);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [dragStart, setDragStart] = useState<Point | null>(null);\n\n  // Use the new layered canvas system\n  const {\n    initializeCanvas,\n    initializeCursorCanvas,\n    updateDisplay,\n    startDrawing,\n    continueDrawing,\n    endDrawing,\n    drawShape,\n    layerManager,\n    textureWidth,\n    textureHeight,\n    displayScale,\n    canUndo,\n    canRedo,\n    undo,\n    redo,\n    displayToTexture,\n    resizeCanvas,\n    exportTexture,\n    updateCursorPosition,\n    showCursor,\n    hideCursor\n  } = useLayeredCanvas(16, 16);\n\n  // Get current layers from LayerManager\n  const layers = layerManager?.getLayers() || [];\n  const activeLayer = layerManager?.getActiveLayer();\n\n  // Initialize canvas when component mounts\n  useEffect(() => {\n    if (canvasRef.current) {\n      initializeCanvas(canvasRef.current);\n      drawGrid();\n    }\n    if (cursorRef.current) {\n      initializeCursorCanvas(cursorRef.current);\n    }\n  }, [initializeCanvas, initializeCursorCanvas]);\n\n  // Update grid when showGrid or canvas size changes\n  useEffect(() => {\n    drawGrid();\n  }, [showGrid, textureWidth, textureHeight, displayScale]);\n\n  // Update display when layer manager changes\n  useEffect(() => {\n    updateDisplay();\n  }, [layerManager, updateDisplay]);\n\n  const drawGrid = () => {\n    if (!overlayRef.current) return;\n    \n    const ctx = overlayRef.current.getContext('2d');\n    if (!ctx) return;\n\n    const displayWidth = textureWidth * displayScale;\n    const displayHeight = textureHeight * displayScale;\n    \n    overlayRef.current.width = displayWidth;\n    overlayRef.current.height = displayHeight;\n    \n    ctx.clearRect(0, 0, displayWidth, displayHeight);\n    \n    if (showGrid) {\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n      ctx.lineWidth = 1;\n\n      // Draw vertical lines\n      for (let x = 0; x <= textureWidth; x++) {\n        const xPos = x * displayScale;\n        ctx.beginPath();\n        ctx.moveTo(xPos, 0);\n        ctx.lineTo(xPos, displayHeight);\n        ctx.stroke();\n      }\n\n      // Draw horizontal lines\n      for (let y = 0; y <= textureHeight; y++) {\n        const yPos = y * displayScale;\n        ctx.beginPath();\n        ctx.moveTo(0, yPos);\n        ctx.lineTo(displayWidth, yPos);\n        ctx.stroke();\n      }\n    }\n  };\n\n  // Mouse event handlers for proper drawing\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!canvasRef.current) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const displayPoint: Point = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n\n    const brushSettings: BrushSettings = {\n      size: brushSize[0],\n      opacity: brushOpacity[0] / 100,\n      hardness: brushHardness[0] / 100,\n      color: selectedColor\n    };\n\n    if (selectedTool === 'rectangle' || selectedTool === 'circle' || selectedTool === 'line') {\n      // For shape tools, start drag operation\n      setIsDrawing(true);\n      setDragStart(displayPoint);\n    } else {\n      // For drawing tools, start immediate drawing\n      setIsDrawing(true);\n      startDrawing(displayPoint, selectedTool, brushSettings);\n    }\n  };\n\n  const handleMouseMoveEvent = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!canvasRef.current) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const displayPoint: Point = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n\n    const brushSettings: BrushSettings = {\n      size: brushSize[0],\n      opacity: brushOpacity[0] / 100,\n      hardness: brushHardness[0] / 100,\n      color: selectedColor\n    };\n\n    // Always update cursor outline on mouse move\n    updateCursorPosition(displayPoint, selectedTool, brushSettings);\n\n    // Handle drawing if mouse is down\n    if (isDrawing) {\n      if (selectedTool === 'rectangle' || selectedTool === 'circle' || selectedTool === 'line') {\n        // For shape tools, show preview (we'll implement this later)\n        // For now, just store the current position\n      } else {\n        // For drawing tools, continue drawing\n        continueDrawing(displayPoint, selectedTool, brushSettings);\n      }\n    }\n  };\n\n  const handleMouseUp = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || !canvasRef.current) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const displayPoint: Point = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n\n    const brushSettings: BrushSettings = {\n      size: brushSize[0],\n      opacity: brushOpacity[0] / 100,\n      hardness: brushHardness[0] / 100,\n      color: selectedColor\n    };\n\n    if ((selectedTool === 'rectangle' || selectedTool === 'circle' || selectedTool === 'line') && dragStart) {\n      // For shape tools, complete the shape\n      const startTexture = displayToTexture(dragStart.x, dragStart.y);\n      const endTexture = displayToTexture(displayPoint.x, displayPoint.y);\n      drawShape(startTexture, endTexture, selectedTool, brushSettings, fillShapes);\n      setDragStart(null);\n    }\n\n    setIsDrawing(false);\n    endDrawing();\n  };\n\n  const tools = [\n    { id: 'brush' as CanvasTool, iconName: 'brush', name: 'Brush' },\n    { id: 'pencil' as CanvasTool, iconName: 'pencil', name: 'Pencil' },\n    { id: 'eraser' as CanvasTool, iconName: 'eraser', name: 'Eraser' },\n    { id: 'fill' as CanvasTool, iconName: 'fill', name: 'Fill' },\n    { id: 'rectangle' as CanvasTool, iconName: 'rectangle', name: 'Rectangle' },\n    { id: 'circle' as CanvasTool, iconName: 'circle', name: 'Circle' },\n    { id: 'line' as CanvasTool, iconName: 'line', name: 'Line' },\n    { id: 'select' as CanvasTool, iconName: 'select', name: 'Select' },\n  ];\n\n  const minecraftPalette = [\n    '#000000', '#1a1a1a', '#333333', '#4a4a4a',\n    '#8b4513', '#cd853f', '#daa520', '#ffd700',\n    '#228b22', '#32cd32', '#90ee90', '#98fb98',\n    '#0000cd', '#1e90ff', '#87ceeb', '#b0e0e6',\n    '#8b0000', '#dc143c', '#ff6347', '#ff7f50',\n    '#800080', '#9370db', '#dda0dd', '#ffffff'\n  ];\n\n  // Layer management functions\n  const addLayer = () => {\n    if (!layerManager) return;\n    const layerId = layerManager.addLayer(`Layer ${layers.length + 1}`, true);\n    // LayerManager will automatically trigger display update via callbacks\n  };\n\n  const removeLayer = (layerId: string) => {\n    if (!layerManager || layers.length <= 1) return;\n    layerManager.removeLayer(layerId);\n    // LayerManager will automatically trigger display update via callbacks\n  };\n\n  const setActiveLayer = (layerId: string) => {\n    if (!layerManager) return;\n    layerManager.setActiveLayer(layerId);\n    // No need for display update, just changing active layer doesn't affect visual\n  };\n\n  const toggleLayerVisibility = (layerId: string) => {\n    if (!layerManager) return;\n    layerManager.toggleLayerVisibility(layerId);\n    // LayerManager will automatically trigger display update via callbacks\n  };\n\n  const updateLayerOpacity = (layerId: string, opacity: number) => {\n    if (!layerManager) return;\n    layerManager.setLayerOpacity(layerId, opacity);\n    // LayerManager will automatically trigger display update via callbacks\n  };\n\n  const moveLayer = (layerId: string, direction: 'up' | 'down') => {\n    if (!layerManager) return;\n    layerManager.moveLayer(layerId, direction);\n    // LayerManager will automatically trigger display update via callbacks\n  };\n\n  const duplicateLayer = (layerId: string) => {\n    if (!layerManager) return;\n    layerManager.duplicateLayer(layerId);\n    // LayerManager will automatically trigger display update via callbacks\n  };\n\n  const handleExportTexture = async (format: 'png' | 'resource-pack') => {\n    if (format === 'png') {\n      const blob = await exportTexture();\n      if (blob) {\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `texture_${textureWidth}x${textureHeight}.png`;\n        a.style.display = 'none';\n        \n        document.body.appendChild(a);\n        a.click();\n        \n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }\n    } else {\n      // Resource pack export implementation can be added later\n      console.log('Resource pack export will be implemented');\n    }\n  };\n\n  const handleResizeCanvas = (value: string) => {\n    const [width, height] = value.split('x').map(Number);\n    resizeCanvas(width, height);\n  };\n\n  return (\n    <section className=\"p-6\" data-testid=\"texture-creator\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid lg:grid-cols-4 gap-6\">\n          {/* Tools Panel */}\n          <div className=\"builder-form rounded-lg p-4\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">Tools</h3>\n            \n            {/* Drawing Tools */}\n            <div className=\"space-y-3 mb-6\">\n              <h4 className=\"text-sm font-medium text-muted-foreground uppercase tracking-wider\">Drawing</h4>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {tools.slice(0, 4).map((tool) => (\n                  <button\n                    key={tool.id}\n                    className={`flex flex-col items-center p-3 rounded-lg transition-colors ${\n                      selectedTool === tool.id \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted hover:bg-secondary'\n                    }`}\n                    onClick={() => setSelectedTool(tool.id)}\n                    data-testid={`tool-${tool.id}`}\n                  >\n                    <span className=\"text-base mb-1\">\n                      {getEmojiWithFallback(tool.iconName as EmojiName)}\n                    </span>\n                    <span className=\"text-xs\">{tool.name}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Shape Tools */}\n            <div className=\"space-y-3 mb-6\">\n              <h4 className=\"text-sm font-medium text-muted-foreground uppercase tracking-wider\">Shapes</h4>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {tools.slice(4).map((tool) => (\n                  <button\n                    key={tool.id}\n                    className={`flex flex-col items-center p-3 rounded-lg transition-colors ${\n                      selectedTool === tool.id \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted hover:bg-secondary'\n                    }`}\n                    onClick={() => setSelectedTool(tool.id)}\n                    data-testid={`tool-${tool.id}`}\n                  >\n                    <span className=\"text-base mb-1\">\n                      {getEmojiWithFallback(tool.iconName as EmojiName)}\n                    </span>\n                    <span className=\"text-xs\">{tool.name}</span>\n                  </button>\n                ))}\n              </div>\n              \n              {/* Fill/Stroke toggle for shapes */}\n              {(selectedTool === 'rectangle' || selectedTool === 'circle') && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Fill Shapes</span>\n                  <Switch\n                    checked={fillShapes}\n                    onCheckedChange={setFillShapes}\n                    data-testid=\"switch-fill-shapes\"\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Brush Settings */}\n            <div className=\"space-y-3\">\n              <h4 className=\"text-sm font-medium text-muted-foreground uppercase tracking-wider\">Brush Settings</h4>\n              <div>\n                <Label>Size: {brushSize[0]}</Label>\n                <Slider\n                  value={brushSize}\n                  onValueChange={setBrushSize}\n                  min={1}\n                  max={20}\n                  step={1}\n                  data-testid=\"slider-brush-size\"\n                />\n              </div>\n              <div>\n                <Label>Opacity: {brushOpacity[0]}%</Label>\n                <Slider\n                  value={brushOpacity}\n                  onValueChange={setBrushOpacity}\n                  min={1}\n                  max={100}\n                  step={1}\n                  data-testid=\"slider-brush-opacity\"\n                />\n              </div>\n              {selectedTool === 'brush' && (\n                <div>\n                  <Label>Hardness: {brushHardness[0]}%</Label>\n                  <Slider\n                    value={brushHardness}\n                    onValueChange={setBrushHardness}\n                    min={0}\n                    max={100}\n                    step={1}\n                    data-testid=\"slider-brush-hardness\"\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Canvas Area */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"builder-form rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Canvas</h3>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    {textureWidth}x{textureHeight}\n                  </span>\n                  <Select\n                    value={`${textureWidth}x${textureHeight}`}\n                    onValueChange={handleResizeCanvas}\n                  >\n                    <SelectTrigger className=\"w-24\" data-testid=\"select-canvas-size\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"16x16\">16x16</SelectItem>\n                      <SelectItem value=\"32x32\">32x32</SelectItem>\n                      <SelectItem value=\"64x64\">64x64</SelectItem>\n                      <SelectItem value=\"128x128\">128x128</SelectItem>\n                      <SelectItem value=\"256x256\">256x256</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"texture-canvas-container rounded-lg p-4 flex items-center justify-center min-h-[400px] bg-gray-100 dark:bg-gray-800\">\n                <div className=\"relative\">\n                  <canvas\n                    ref={canvasRef}\n                    className=\"border border-border rounded cursor-crosshair bg-white\"\n                    style={{ imageRendering: 'pixelated' }}\n                    onMouseDown={handleMouseDown}\n                    onMouseMove={handleMouseMoveEvent}\n                    onMouseUp={handleMouseUp}\n                    onMouseEnter={() => {\n                      const brushSettings: BrushSettings = {\n                        size: brushSize[0],\n                        opacity: brushOpacity[0] / 100,\n                        hardness: brushHardness[0] / 100,\n                        color: selectedColor\n                      };\n                      showCursor(selectedTool, brushSettings);\n                    }}\n                    onMouseLeave={() => {\n                      if (isDrawing) {\n                        setIsDrawing(false);\n                        endDrawing();\n                      }\n                      hideCursor();\n                    }}\n                    data-testid=\"texture-canvas\"\n                  />\n                  <canvas\n                    ref={overlayRef}\n                    className=\"absolute top-0 left-0 pointer-events-none rounded\"\n                    data-testid=\"grid-overlay\"\n                  />\n                  <canvas\n                    ref={cursorRef}\n                    className=\"absolute top-0 left-0 pointer-events-none rounded\"\n                    data-testid=\"cursor-overlay\"\n                  />\n                </div>\n              </div>\n\n              {/* Canvas Controls */}\n              <div className=\"flex items-center justify-between mt-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={undo}\n                    disabled={!canUndo}\n                    data-testid=\"button-undo\"\n                  >\n                    <Undo className=\"mr-2\" size={16} />\n                    Undo\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={redo}\n                    disabled={!canRedo}\n                    data-testid=\"button-redo\"\n                  >\n                    <Redo className=\"mr-2\" size={16} />\n                    Redo\n                  </Button>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center\">\n                    <Switch\n                      checked={showGrid}\n                      onCheckedChange={setShowGrid}\n                      data-testid=\"switch-show-grid\"\n                    />\n                    <span className=\"text-sm ml-2\">Show Grid</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Layers & Colors Panel */}\n          <div className=\"space-y-6\">\n            {/* Color Palette */}\n            <div className=\"builder-form rounded-lg p-4\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Colors</h3>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div \n                    className=\"w-8 h-8 border border-border rounded cursor-pointer\"\n                    style={{ backgroundColor: selectedColor }}\n                    data-testid=\"current-color\"\n                  />\n                  <input\n                    type=\"color\"\n                    value={selectedColor}\n                    onChange={(e) => setSelectedColor(e.target.value)}\n                    className=\"w-8 h-8 border-none rounded cursor-pointer bg-transparent\"\n                    data-testid=\"color-picker\"\n                  />\n                  <span className=\"text-sm font-mono\">{selectedColor.toUpperCase()}</span>\n                </div>\n                \n                {/* Palette Grid */}\n                <div className=\"grid grid-cols-6 gap-1\">\n                  {minecraftPalette.map((color, index) => (\n                    <div\n                      key={index}\n                      className={`w-8 h-8 border rounded cursor-pointer hover:scale-110 transition-transform ${\n                        selectedColor === color ? 'border-primary border-2' : 'border-border'\n                      }`}\n                      style={{ backgroundColor: color }}\n                      onClick={() => setSelectedColor(color)}\n                      data-testid={`palette-color-${index}`}\n                      title={color.toUpperCase()}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Layers Panel */}\n            <div className=\"builder-form rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Layers</h3>\n                <Button\n                  size=\"sm\"\n                  onClick={addLayer}\n                  data-testid=\"button-add-layer\"\n                >\n                  <Plus size={16} />\n                </Button>\n              </div>\n              \n              <div className=\"space-y-2\">\n                {layers.slice().reverse().map((layer, index) => (\n                  <div\n                    key={layer.id}\n                    className={`p-3 rounded-lg border transition-colors ${\n                      activeLayer?.id === layer.id \n                        ? 'bg-primary/10 border-primary' \n                        : 'bg-muted border-border hover:bg-muted/80'\n                    }`}\n                    onClick={() => setActiveLayer(layer.id)}\n                    data-testid={`layer-${layer.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center\">\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            toggleLayerVisibility(layer.id);\n                          }}\n                          className=\"mr-2 hover:text-primary\"\n                          data-testid={`button-toggle-layer-${layer.id}`}\n                        >\n                          {layer.visible ? <Eye size={16} /> : <EyeOff size={16} />}\n                        </button>\n                        <Input\n                          value={layer.name}\n                          onChange={(e) => {\n                            if (layerManager) {\n                              layerManager.updateLayerProperty(layer.id, 'name', e.target.value);\n                              // No display update needed for name change\n                            }\n                          }}\n                          className=\"text-sm border-none p-0 h-auto bg-transparent\"\n                          data-testid={`input-layer-name-${layer.id}`}\n                        />\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            moveLayer(layer.id, 'up');\n                          }}\n                          className=\"hover:text-primary\"\n                          disabled={index === 0}\n                          data-testid={`button-move-layer-up-${layer.id}`}\n                        >\n                          <ChevronUp size={14} />\n                        </button>\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            moveLayer(layer.id, 'down');\n                          }}\n                          className=\"hover:text-primary\"\n                          disabled={index === layers.length - 1}\n                          data-testid={`button-move-layer-down-${layer.id}`}\n                        >\n                          <ChevronDown size={14} />\n                        </button>\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            removeLayer(layer.id);\n                          }}\n                          className=\"hover:text-destructive\"\n                          disabled={layers.length === 1}\n                          data-testid={`button-remove-layer-${layer.id}`}\n                        >\n                          <Trash2 size={14} />\n                        </button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-muted-foreground\">Opacity</span>\n                        <span className=\"text-xs\">{layer.opacity}%</span>\n                      </div>\n                      <Slider\n                        value={[layer.opacity]}\n                        onValueChange={(value) => updateLayerOpacity(layer.id, value[0])}\n                        min={0}\n                        max={100}\n                        step={1}\n                        className=\"w-full\"\n                        data-testid={`slider-layer-opacity-${layer.id}`}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Export Options */}\n            <div className=\"builder-form rounded-lg p-4\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Export</h3>\n              <div className=\"space-y-3\">\n                <Button\n                  className=\"w-full\"\n                  onClick={() => handleExportTexture('png')}\n                  data-testid=\"button-export-png\"\n                >\n                  <Download className=\"mr-2\" size={16} />\n                  Export PNG\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  className=\"w-full\"\n                  onClick={() => handleExportTexture('resource-pack')}\n                  data-testid=\"button-export-resource-pack\"\n                >\n                  <Save className=\"mr-2\" size={16} />\n                  Save to Resource Pack\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":26557},"client/src/components/Tutorial/InteractiveTutorial.tsx":{"content":"import { useState } from \"react\";\nimport { Play, CheckCircle, ArrowRight, ArrowLeft, Target, Code, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface InteractiveTutorialProps {\n  onNavigate: (section: string) => void;\n}\n\ninterface TutorialStep {\n  id: string;\n  title: string;\n  description: string;\n  icon: any;\n  task: string;\n  completed: boolean;\n  targetSection?: string;\n  validation?: string;\n}\n\nexport default function InteractiveTutorial({ onNavigate }: InteractiveTutorialProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<string[]>([]);\n\n  const tutorialSteps: TutorialStep[] = [\n    {\n      id: 'create-entity',\n      title: 'Create Your First Entity',\n      description: 'Learn entity basics and components by creating a simple custom mob',\n      icon: Target,\n      task: 'Create an entity called \"tutorial:friendly_cow\" with 20 health points',\n      completed: completedSteps.includes('create-entity'),\n      targetSection: 'builder-entity',\n      validation: 'Entity with correct identifier and health component'\n    },\n    {\n      id: 'add-behaviors',\n      title: 'Add Entity Behaviors',\n      description: 'Make your entity move and interact with the world',\n      icon: Code,\n      task: 'Add movement, navigation, and random stroll behaviors to your entity',\n      completed: completedSteps.includes('add-behaviors'),\n      targetSection: 'builder-entity',\n      validation: 'Entity with movement and behavior components'\n    },\n    {\n      id: 'create-texture',\n      title: 'Create Custom Textures',\n      description: 'Design the visual appearance of your entity',\n      icon: FileText,\n      task: 'Create a 16x16 texture for your custom entity using the texture creator',\n      completed: completedSteps.includes('create-texture'),\n      targetSection: 'texture-creator',\n      validation: 'Texture file exported as PNG'\n    },\n    {\n      id: 'create-client-entity',\n      title: 'Setup Client Entity',\n      description: 'Define how your entity looks and animates in the game',\n      icon: Target,\n      task: 'Create a client entity file that references your custom texture',\n      completed: completedSteps.includes('create-client-entity'),\n      targetSection: 'builder-client-entity',\n      validation: 'Client entity with texture reference'\n    },\n    {\n      id: 'create-spawn-rule',\n      title: 'Add Spawn Rules',\n      description: 'Control where and when your entity appears in the world',\n      icon: Code,\n      task: 'Create spawn rules for your entity to appear in plains biomes',\n      completed: completedSteps.includes('create-spawn-rule'),\n      targetSection: 'builder-spawn',\n      validation: 'Spawn rule with biome filter'\n    },\n    {\n      id: 'test-addon',\n      title: 'Test Your Addon',\n      description: 'Package and test your complete custom entity addon',\n      icon: FileText,\n      task: 'Export your addon as a .mcaddon file and test in Minecraft',\n      completed: completedSteps.includes('test-addon'),\n      targetSection: 'addon-packager',\n      validation: 'Successfully exported addon package'\n    },\n    {\n      id: 'add-loot-table',\n      title: 'Create Loot Tables',\n      description: 'Define what items your entity drops when defeated',\n      icon: Target,\n      task: 'Create a loot table that drops leather and experience',\n      completed: completedSteps.includes('add-loot-table'),\n      targetSection: 'builder-loot',\n      validation: 'Loot table with item drops'\n    },\n    {\n      id: 'add-scripting',\n      title: 'Add Script Behaviors',\n      description: 'Use JavaScript to add advanced functionality',\n      icon: Code,\n      task: 'Create a script that makes your entity say hello when players approach',\n      completed: completedSteps.includes('add-scripting'),\n      targetSection: 'script-studio',\n      validation: 'Working script with event handling'\n    }\n  ];\n\n  const progressPercentage = (completedSteps.length / tutorialSteps.length) * 100;\n  const step = tutorialSteps[currentStep];\n\n  const markStepCompleted = (stepId: string) => {\n    if (!completedSteps.includes(stepId)) {\n      setCompletedSteps([...completedSteps, stepId]);\n    }\n  };\n\n  const goToNextStep = () => {\n    if (currentStep < tutorialSteps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const goToPreviousStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const startTutorialStep = () => {\n    if (step.targetSection) {\n      onNavigate(step.targetSection);\n    }\n  };\n\n  return (\n    <section className=\"p-6\" data-testid=\"interactive-tutorial\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-4\">Interactive Tutorial</h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Learn by doing - create your first addon step by step\n          </p>\n        </div>\n\n        {/* Tutorial Progress */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Your Progress</span>\n              <span className=\"text-sm text-muted-foreground\">\n                Step {currentStep + 1} of {tutorialSteps.length}\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Progress value={progressPercentage} className=\"mb-4\" />\n            <div className=\"grid grid-cols-8 gap-2\">\n              {tutorialSteps.map((s, index) => (\n                <div\n                  key={s.id}\n                  className={`h-2 rounded-full ${\n                    completedSteps.includes(s.id)\n                      ? 'bg-primary'\n                      : index === currentStep\n                      ? 'bg-accent'\n                      : 'bg-muted'\n                  }`}\n                  data-testid={`progress-step-${index}`}\n                />\n              ))}\n            </div>\n            <div className=\"flex justify-between mt-2 text-xs text-muted-foreground\">\n              <span>{completedSteps.length} completed</span>\n              <span>{tutorialSteps.length - completedSteps.length} remaining</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Current Step */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start\">\n              <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4 flex-shrink-0\">\n                <span className=\"text-xl font-bold text-primary-foreground\">{currentStep + 1}</span>\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"flex items-center mb-2\">\n                  <h3 className=\"text-xl font-semibold text-foreground mr-3\">{step.title}</h3>\n                  {step.completed && (\n                    <Badge variant=\"default\" className=\"flex items-center\">\n                      <CheckCircle className=\"mr-1\" size={14} />\n                      Completed\n                    </Badge>\n                  )}\n                </div>\n                <p className=\"text-muted-foreground mb-4\">{step.description}</p>\n                \n                <div className=\"bg-muted rounded-lg p-4 mb-4\">\n                  <h4 className=\"font-medium text-foreground mb-2\">🎯 Your Task</h4>\n                  <p className=\"text-muted-foreground text-sm mb-3\">{step.task}</p>\n                  \n                  {step.validation && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      <strong>Success criteria:</strong> {step.validation}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <Button \n                    onClick={startTutorialStep}\n                    disabled={!step.targetSection}\n                    data-testid={`button-start-step-${currentStep}`}\n                  >\n                    <Play className=\"mr-2\" size={16} />\n                    {step.targetSection ? 'Start Task' : 'Coming Soon'}\n                  </Button>\n                  \n                  {!step.completed && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => markStepCompleted(step.id)}\n                      data-testid={`button-complete-step-${currentStep}`}\n                    >\n                      <CheckCircle className=\"mr-2\" size={16} />\n                      Mark Complete\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tutorial Steps Overview */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Tutorial Overview</CardTitle>\n            <CardDescription>\n              All steps in this comprehensive addon creation tutorial\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {tutorialSteps.map((tutStep, index) => {\n                const StepIcon = tutStep.icon;\n                return (\n                  <div\n                    key={tutStep.id}\n                    className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${\n                      index === currentStep\n                        ? 'border-primary bg-primary/10'\n                        : tutStep.completed\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-border hover:bg-muted'\n                    }`}\n                    onClick={() => setCurrentStep(index)}\n                    data-testid={`step-overview-${index}`}\n                  >\n                    <div className={`w-6 h-6 rounded-full flex items-center justify-center mr-3 ${\n                      tutStep.completed \n                        ? 'bg-green-500' \n                        : index === currentStep \n                        ? 'bg-primary' \n                        : 'bg-muted-foreground'\n                    }`}>\n                      {tutStep.completed ? (\n                        <CheckCircle className=\"text-white\" size={14} />\n                      ) : (\n                        <span className=\"text-xs font-bold text-white\">{index + 1}</span>\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-foreground\">{tutStep.title}</div>\n                      <div className=\"text-sm text-muted-foreground\">{tutStep.description}</div>\n                    </div>\n                    <StepIcon size={20} className=\"text-muted-foreground\" />\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center\">\n          <Button \n            variant=\"secondary\" \n            onClick={goToPreviousStep}\n            disabled={currentStep === 0}\n            data-testid=\"button-previous-step\"\n          >\n            <ArrowLeft className=\"mr-2\" size={16} />\n            Previous Step\n          </Button>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Need help? Check the <button \n              className=\"text-primary hover:underline\" \n              onClick={() => onNavigate('docs-concepts')}\n            >\n              documentation\n            </button>\n          </div>\n          \n          <Button \n            onClick={goToNextStep}\n            disabled={currentStep === tutorialSteps.length - 1}\n            data-testid=\"button-next-step\"\n          >\n            Next Step <ArrowRight className=\"ml-2\" size={16} />\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":12162},"client/src/components/Tutorial/QuickStart.tsx":{"content":"import { useState } from \"react\";\nimport { Rocket, CheckCircle, ExternalLink, Download, Play } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\ninterface QuickStartProps {\n  onNavigate: (section: string) => void;\n}\n\nexport default function QuickStart({ onNavigate }: QuickStartProps) {\n  const [activeTrack, setActiveTrack] = useState('beginner');\n\n  const quickStartTracks = {\n    beginner: {\n      title: 'Beginner Track',\n      description: 'Perfect for first-time addon creators',\n      estimatedTime: '30 minutes',\n      steps: [\n        {\n          title: 'Setup Development Environment',\n          description: 'Install required tools and setup workspace',\n          time: '5 min',\n          action: 'Download Tools',\n          actionType: 'download'\n        },\n        {\n          title: 'Create Your First Block',\n          description: 'Build a simple custom block with unique properties',\n          time: '10 min',\n          action: 'Open Block Builder',\n          actionType: 'navigate',\n          section: 'builder-block'\n        },\n        {\n          title: 'Add Custom Texture',\n          description: 'Design a texture for your block using the texture creator',\n          time: '10 min',\n          action: 'Open Texture Creator',\n          actionType: 'navigate',\n          section: 'texture-creator'\n        },\n        {\n          title: 'Package & Test',\n          description: 'Export your addon and test it in Minecraft',\n          time: '5 min',\n          action: 'Open Packager',\n          actionType: 'navigate',\n          section: 'addon-packager'\n        }\n      ]\n    },\n    intermediate: {\n      title: 'Intermediate Track',\n      description: 'For users with basic addon experience',\n      estimatedTime: '45 minutes',\n      steps: [\n        {\n          title: 'Create Custom Entity',\n          description: 'Build a mob with AI behaviors and custom properties',\n          time: '15 min',\n          action: 'Open Entity Builder',\n          actionType: 'navigate',\n          section: 'builder-entity'\n        },\n        {\n          title: 'Add Scripted Behaviors',\n          description: 'Use JavaScript to add advanced functionality',\n          time: '20 min',\n          action: 'Open Script Studio',\n          actionType: 'navigate',\n          section: 'script-studio'\n        },\n        {\n          title: 'Create Loot Tables',\n          description: 'Define what your entity drops when defeated',\n          time: '10 min',\n          action: 'Open Loot Builder',\n          actionType: 'navigate',\n          section: 'builder-loot'\n        }\n      ]\n    },\n    advanced: {\n      title: 'Advanced Track',\n      description: 'Complex addon development techniques',\n      estimatedTime: '60 minutes',\n      steps: [\n        {\n          title: 'Custom Biome Creation',\n          description: 'Design entirely new world generation',\n          time: '20 min',\n          action: 'Open Biome Builder',\n          actionType: 'navigate',\n          section: 'builder-biome'\n        },\n        {\n          title: 'Advanced Scripting',\n          description: 'Complex event handling and API integration',\n          time: '25 min',\n          action: 'View Script Docs',\n          actionType: 'navigate',\n          section: 'docs-scripting'\n        },\n        {\n          title: 'Performance Optimization',\n          description: 'Optimize your addon for better performance',\n          time: '15 min',\n          action: 'View Best Practices',\n          actionType: 'docs'\n        }\n      ]\n    }\n  };\n\n  const sampleManifest = `{\n  \"format_version\": 2,\n  \"header\": {\n    \"name\": \"My First Addon\",\n    \"description\": \"A simple custom block addon\",\n    \"uuid\": \"12345678-1234-1234-1234-123456789012\",\n    \"version\": [1, 0, 0],\n    \"min_engine_version\": [1, 21, 0]\n  },\n  \"modules\": [\n    {\n      \"type\": \"data\",\n      \"uuid\": \"87654321-4321-4321-4321-210987654321\",\n      \"version\": [1, 0, 0]\n    }\n  ]\n}`;\n\n  const sampleBlock = `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_stone\"\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 2.0\n      },\n      \"minecraft:map_color\": \"#7F7F7F\"\n    }\n  }\n}`;\n\n  const handleAction = (step: any) => {\n    if (step.actionType === 'navigate' && step.section) {\n      onNavigate(step.section);\n    } else if (step.actionType === 'download') {\n      // Handle download action\n      window.open('https://code.visualstudio.com/', '_blank');\n    }\n  };\n\n  const currentTrack = quickStartTracks[activeTrack as keyof typeof quickStartTracks];\n\n  return (\n    <section className=\"p-6\" data-testid=\"quick-start\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-4\">Quick Start Guide</h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Fast track to creating your first addon - choose your experience level\n          </p>\n        </div>\n\n        {/* Track Selection */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          {Object.entries(quickStartTracks).map(([key, track]) => (\n            <Card\n              key={key}\n              className={`cursor-pointer transition-colors ${\n                activeTrack === key ? 'border-primary bg-primary/5' : 'hover:border-primary/50'\n              }`}\n              onClick={() => setActiveTrack(key)}\n              data-testid={`track-${key}`}\n            >\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>{track.title}</span>\n                  {activeTrack === key && <CheckCircle className=\"text-primary\" size={20} />}\n                </CardTitle>\n                <CardDescription>{track.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Badge variant=\"outline\">{track.estimatedTime}</Badge>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Steps List */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Rocket className=\"mr-2\" size={20} />\n                  {currentTrack.title} Steps\n                </CardTitle>\n                <CardDescription>\n                  Follow these steps to complete your first addon in {currentTrack.estimatedTime}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {currentTrack.steps.map((step, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-start p-4 border rounded-lg hover:bg-muted transition-colors\"\n                      data-testid={`step-${index}`}\n                    >\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center mr-4 flex-shrink-0\">\n                        <span className=\"text-sm font-bold text-primary-foreground\">{index + 1}</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium text-foreground\">{step.title}</h4>\n                          <Badge variant=\"secondary\" className=\"text-xs\">{step.time}</Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-3\">{step.description}</p>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleAction(step)}\n                          data-testid={`action-${index}`}\n                        >\n                          {step.actionType === 'navigate' ? (\n                            <Play className=\"mr-2\" size={14} />\n                          ) : step.actionType === 'download' ? (\n                            <Download className=\"mr-2\" size={14} />\n                          ) : (\n                            <ExternalLink className=\"mr-2\" size={14} />\n                          )}\n                          {step.action}\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Resources & Code Samples */}\n          <div className=\"space-y-6\">\n            {/* Quick Reference */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Quick Reference</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Tabs defaultValue=\"manifest\">\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"manifest\">Manifest</TabsTrigger>\n                    <TabsTrigger value=\"block\">Block</TabsTrigger>\n                  </TabsList>\n                  <TabsContent value=\"manifest\" className=\"mt-4\">\n                    <div className=\"text-xs\">\n                      <CodePreview code={sampleManifest} language=\"json\" />\n                    </div>\n                  </TabsContent>\n                  <TabsContent value=\"block\" className=\"mt-4\">\n                    <div className=\"text-xs\">\n                      <CodePreview code={sampleBlock} language=\"json\" />\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n\n            {/* Essential Tools */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Essential Tools</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Visual Studio Code</span>\n                  <Button variant=\"outline\" size=\"sm\" asChild>\n                    <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                      <Download size={14} />\n                    </a>\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Blockbench (Models)</span>\n                  <Button variant=\"outline\" size=\"sm\" asChild>\n                    <a href=\"https://blockbench.net/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                      <ExternalLink size={14} />\n                    </a>\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Bridge. (IDE)</span>\n                  <Button variant=\"outline\" size=\"sm\" asChild>\n                    <a href=\"https://bridge-core.app/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                      <ExternalLink size={14} />\n                    </a>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tips */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Pro Tips</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>• Always backup your worlds before testing</p>\n                <p>• Use descriptive identifiers for your content</p>\n                <p>• Test in creative mode first</p>\n                <p>• Check the console for error messages</p>\n                <p>• Join the Minecraft Bedrock community for help</p>\n              </CardContent>\n            </Card>\n\n            {/* Next Steps */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">After Quick Start</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\" \n                  onClick={() => onNavigate('tutorial')}\n                  data-testid=\"button-full-tutorial\"\n                >\n                  Take Full Tutorial\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\" \n                  onClick={() => onNavigate('docs-concepts')}\n                  data-testid=\"button-read-docs\"\n                >\n                  Read Documentation\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":13100},"client/src/components/Welcome/WelcomeSection.tsx":{"content":"import { Play, BookOpen, ArrowRight, MessageCircle, Globe, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { getEmojiWithFallback, type EmojiName } from \"@/assets/emoji-mapping\";\n\ninterface WelcomeSectionProps {\n  onNavigate: (section: string) => void;\n}\n\nexport default function WelcomeSection({ onNavigate }: WelcomeSectionProps) {\n  const features = [\n    {\n      icon: \"entityBuilder\",\n      title: \"Entity Builder\",\n      description: \"Create custom mobs and NPCs with behaviors, animations, and AI components.\",\n      section: \"builder-entity\",\n      bgColor: \"bg-primary\"\n    },\n    {\n      icon: \"blockBuilder\",\n      title: \"Block Builder\", \n      description: \"Design custom blocks with unique properties, textures, and behaviors.\",\n      section: \"builder-block\",\n      bgColor: \"bg-accent\"\n    },\n    {\n      icon: \"textureCreator\",\n      title: \"Pixel Art Creator\",\n      description: \"Professional pixel art editor for creating custom textures and sprites (Pixilart).\",\n      section: \"pixilart-external\",\n      bgColor: \"bg-primary\"\n    },\n    {\n      icon: \"scriptStudio\",\n      title: \"Script Studio\",\n      description: \"Interactive script builder with full Minecraft API explorer and code generation.\",\n      section: \"script-studio\",\n      bgColor: \"bg-accent\"\n    },\n    {\n      icon: \"documentation\",\n      title: \"Documentation\",\n      description: \"Comprehensive guides and references validated against official Minecraft docs.\",\n      section: \"docs-concepts\",\n      bgColor: \"bg-primary\"\n    },\n    {\n      icon: \"addonPackager\",\n      title: \"Addon Packager\",\n      description: \"Export complete addon packs with proper folder structure and manifests.\",\n      section: \"addon-packager\",\n      bgColor: \"bg-accent\"\n    }\n  ];\n\n  return (\n    <section className=\"p-6\" data-testid=\"welcome-section\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            Minecraft Bedrock Creator Suite\n          </h1>\n          <p className=\"text-lg text-muted-foreground mb-6\">\n            The complete toolkit for creating custom content in Minecraft: Bedrock Edition\n          </p>\n          <div className=\"flex justify-center space-x-4\">\n            <Button \n              className=\"btn-primary px-6 py-3 rounded-lg font-medium\"\n              onClick={() => onNavigate('tutorial')}\n              data-testid=\"button-start-tutorial\"\n            >\n              <Play className=\"mr-2\" size={20} />\n              Start Interactive Tutorial\n            </Button>\n            <Button \n              variant=\"secondary\"\n              className=\"px-6 py-3 rounded-lg font-medium\"\n              onClick={() => onNavigate('docs-concepts')}\n              data-testid=\"button-browse-docs\"\n            >\n              <BookOpen className=\"mr-2\" size={20} />\n              Browse Documentation\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          {features.map((feature, index) => (\n            <Card \n              key={index}\n              className=\"bg-card border border-border hover:border-primary transition-colors cursor-pointer\"\n              onClick={() => {\n                if (feature.section === 'pixilart-external') {\n                  window.open('https://www.pixilart.com/draw?ref=home-page', '_blank', 'noopener,noreferrer');\n                } else {\n                  onNavigate(feature.section);\n                }\n              }}\n              data-testid={`feature-card-${feature.section}`}\n            >\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className={`w-10 h-10 ${feature.bgColor} rounded-lg flex items-center justify-center mr-3`}>\n                    <span className=\"text-2xl text-primary-foreground\">\n                      {getEmojiWithFallback(feature.icon as EmojiName)}\n                    </span>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground\">{feature.title}</h3>\n                </div>\n                <p className=\"text-muted-foreground text-sm mb-4\">\n                  {feature.description}\n                </p>\n                <button \n                  className=\"text-primary text-sm font-medium hover:underline flex items-center\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (feature.section === 'pixilart-external') {\n                      window.open('https://www.pixilart.com/draw?ref=home-page', '_blank', 'noopener,noreferrer');\n                    } else {\n                      onNavigate(feature.section);\n                    }\n                  }}\n                >\n                  Get Started <ArrowRight className=\"ml-1\" size={14} />\n                </button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Community Section */}\n        <div className=\"mb-8\">\n          <h3 className=\"text-2xl font-bold text-foreground mb-4 text-center\">Join Our Community</h3>\n          <div className=\"grid md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n            {/* Discord Card */}\n            <Card className=\"bg-card border border-border hover:border-[#5865F2] transition-colors cursor-pointer group\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-[#5865F2] rounded-lg flex items-center justify-center mr-4\">\n                    <MessageCircle className=\"text-white\" size={24} />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground\">Discord Community</h3>\n                </div>\n                <p className=\"text-muted-foreground text-sm mb-4\">\n                  Connect with other creators, get help with projects, and stay updated with the latest news from Omni-Science Game Studio.\n                </p>\n                <button \n                  className=\"w-full bg-[#5865F2] hover:bg-[#4752C4] text-white px-4 py-2 rounded-md font-medium transition-colors flex items-center justify-center\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    window.open('https://discord.gg/xMy34mQCJ3', '_blank', 'noopener,noreferrer');\n                  }}\n                  data-testid=\"button-discord-external\"\n                >\n                  <MessageCircle className=\"mr-2\" size={18} />\n                  Join Discord\n                  <ExternalLink className=\"ml-2\" size={16} />\n                </button>\n              </CardContent>\n            </Card>\n\n            {/* Omni-Science Card */}\n            <Card className=\"bg-card border border-border hover:border-primary transition-colors cursor-pointer group\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4\">\n                    <Globe className=\"text-primary-foreground\" size={24} />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground\">Omni-Science Game Studio</h3>\n                </div>\n                <p className=\"text-muted-foreground text-sm mb-4\">\n                  Professional game design studio with 6 years of industry experience. Our team of 7 skilled developers creates innovative games and supports The Helping Guild charity.\n                </p>\n                <button \n                  className=\"w-full bg-secondary hover:bg-secondary/80 text-secondary-foreground px-4 py-2 rounded-md font-medium transition-colors flex items-center justify-center\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    window.open('https://sites.google.com/view/omni-science-/home?authuser=0', '_blank', 'noopener,noreferrer');\n                  }}\n                  data-testid=\"button-omniscience-external\"\n                >\n                  <Globe className=\"mr-2\" size={18} />\n                  Visit Omni-Science\n                  <ExternalLink className=\"ml-2\" size={16} />\n                </button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"bg-muted rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">What's Included</h3>\n          <div className=\"grid md:grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">12+</div>\n              <div className=\"text-sm text-muted-foreground\">Interactive Builders</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">100+</div>\n              <div className=\"text-sm text-muted-foreground\">Components Covered</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">50+</div>\n              <div className=\"text-sm text-muted-foreground\">API Methods</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">Real-time</div>\n              <div className=\"text-sm text-muted-foreground\">JSON Validation</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9541},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/canvas/layers.ts":{"content":"/**\n * Layer management system for the texture creator\n */\n\nexport interface LayerData {\n  id: string;\n  name: string;\n  visible: boolean;\n  opacity: number;\n  blendMode?: BlendMode;\n  locked?: boolean;\n  canvas?: HTMLCanvasElement;\n}\n\nexport type BlendMode = \n  | 'normal'\n  | 'multiply'\n  | 'screen'\n  | 'overlay'\n  | 'soft-light'\n  | 'hard-light'\n  | 'color-dodge'\n  | 'color-burn'\n  | 'darken'\n  | 'lighten'\n  | 'difference'\n  | 'exclusion';\n\nexport class LayerManager {\n  private layers: LayerData[] = [];\n  private activeLayerId: string | null = null;\n  private compositeCanvas: HTMLCanvasElement;\n  private compositeCtx: CanvasRenderingContext2D;\n  private updateScheduled = false;\n  private compositeUpdateCallbacks: (() => void)[] = [];\n\n  constructor(width: number, height: number) {\n    this.compositeCanvas = document.createElement('canvas');\n    this.compositeCanvas.width = width;\n    this.compositeCanvas.height = height;\n    this.compositeCtx = this.compositeCanvas.getContext('2d')!;\n\n    // Create default background layer\n    this.addLayer('Background', true);\n  }\n\n  addLayer(name: string, setAsActive = false): string {\n    const id = `layer-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Create canvas for this layer\n    const canvas = document.createElement('canvas');\n    canvas.width = this.compositeCanvas.width;\n    canvas.height = this.compositeCanvas.height;\n    \n    // Fill with transparent pixels\n    const ctx = canvas.getContext('2d')!;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const layer: LayerData = {\n      id,\n      name,\n      visible: true,\n      opacity: 100,\n      blendMode: 'normal',\n      locked: false,\n      canvas\n    };\n\n    this.layers.push(layer);\n    \n    if (setAsActive || this.activeLayerId === null) {\n      this.activeLayerId = id;\n    }\n\n    this.scheduleCompositeUpdate();\n    return id;\n  }\n\n  removeLayer(layerId: string): boolean {\n    if (this.layers.length <= 1) {\n      return false; // Can't remove the last layer\n    }\n\n    const index = this.layers.findIndex(layer => layer.id === layerId);\n    if (index === -1) {\n      return false;\n    }\n\n    this.layers.splice(index, 1);\n\n    // Update active layer if needed\n    if (this.activeLayerId === layerId) {\n      this.activeLayerId = this.layers.length > 0 ? this.layers[Math.max(0, index - 1)].id : null;\n    }\n\n    this.scheduleCompositeUpdate();\n    return true;\n  }\n\n  duplicateLayer(layerId: string): string | null {\n    const layer = this.getLayer(layerId);\n    if (!layer) return null;\n\n    const newId = this.addLayer(`${layer.name} Copy`);\n    const newLayer = this.getLayer(newId);\n    \n    if (newLayer && newLayer.canvas && layer.canvas) {\n      // Copy canvas content\n      const newCtx = newLayer.canvas.getContext('2d')!;\n      newCtx.drawImage(layer.canvas, 0, 0);\n      \n      // Copy other properties\n      newLayer.opacity = layer.opacity;\n      newLayer.blendMode = layer.blendMode;\n      newLayer.visible = layer.visible;\n    }\n\n    this.scheduleCompositeUpdate();\n    return newId;\n  }\n\n  moveLayer(layerId: string, direction: 'up' | 'down'): boolean {\n    const index = this.layers.findIndex(layer => layer.id === layerId);\n    if (index === -1) return false;\n\n    const newIndex = direction === 'up' ? index + 1 : index - 1;\n    if (newIndex < 0 || newIndex >= this.layers.length) return false;\n\n    // Swap layers\n    [this.layers[index], this.layers[newIndex]] = [this.layers[newIndex], this.layers[index]];\n    \n    this.scheduleCompositeUpdate();\n    return true;\n  }\n\n  getLayer(layerId: string): LayerData | null {\n    return this.layers.find(layer => layer.id === layerId) || null;\n  }\n\n  getLayers(): LayerData[] {\n    return [...this.layers];\n  }\n\n  getActiveLayer(): LayerData | null {\n    return this.activeLayerId ? this.getLayer(this.activeLayerId) : null;\n  }\n\n  setActiveLayer(layerId: string): boolean {\n    const layer = this.getLayer(layerId);\n    if (!layer) return false;\n\n    this.activeLayerId = layerId;\n    return true;\n  }\n\n  updateLayerProperty(layerId: string, property: keyof LayerData, value: any): boolean {\n    const layer = this.getLayer(layerId);\n    if (!layer) return false;\n\n    (layer as any)[property] = value;\n    this.scheduleCompositeUpdate();\n    return true;\n  }\n\n  toggleLayerVisibility(layerId: string): boolean {\n    const layer = this.getLayer(layerId);\n    if (!layer) return false;\n\n    layer.visible = !layer.visible;\n    this.scheduleCompositeUpdate();\n    return true;\n  }\n\n  setLayerOpacity(layerId: string, opacity: number): boolean {\n    const layer = this.getLayer(layerId);\n    if (!layer) return false;\n\n    layer.opacity = Math.max(0, Math.min(100, opacity));\n    this.scheduleCompositeUpdate();\n    return true;\n  }\n\n  setLayerBlendMode(layerId: string, blendMode: BlendMode): boolean {\n    const layer = this.getLayer(layerId);\n    if (!layer) return false;\n\n    layer.blendMode = blendMode;\n    this.scheduleCompositeUpdate();\n    return true;\n  }\n\n  mergeDown(layerId: string): boolean {\n    const layerIndex = this.layers.findIndex(layer => layer.id === layerId);\n    if (layerIndex <= 0) return false; // Can't merge bottom layer or layer not found\n\n    const currentLayer = this.layers[layerIndex];\n    const belowLayer = this.layers[layerIndex - 1];\n\n    if (!currentLayer.canvas || !belowLayer.canvas) return false;\n\n    // Merge current layer into the layer below\n    const belowCtx = belowLayer.canvas.getContext('2d')!;\n    belowCtx.save();\n    belowCtx.globalAlpha = currentLayer.opacity / 100;\n    belowCtx.globalCompositeOperation = this.getCanvasBlendMode(currentLayer.blendMode || 'normal');\n    belowCtx.drawImage(currentLayer.canvas, 0, 0);\n    belowCtx.restore();\n\n    // Remove the merged layer\n    this.removeLayer(layerId);\n    return true;\n  }\n\n  flattenImage(): HTMLCanvasElement {\n    const flattened = document.createElement('canvas');\n    flattened.width = this.compositeCanvas.width;\n    flattened.height = this.compositeCanvas.height;\n    const ctx = flattened.getContext('2d')!;\n\n    // Draw white background\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillRect(0, 0, flattened.width, flattened.height);\n\n    // Draw all visible layers\n    this.layers.forEach(layer => {\n      if (layer.visible && layer.canvas) {\n        ctx.save();\n        ctx.globalAlpha = layer.opacity / 100;\n        ctx.globalCompositeOperation = this.getCanvasBlendMode(layer.blendMode || 'normal');\n        ctx.drawImage(layer.canvas, 0, 0);\n        ctx.restore();\n      }\n    });\n\n    return flattened;\n  }\n\n  private updateComposite(): void {\n    // Clear composite\n    this.compositeCtx.clearRect(0, 0, this.compositeCanvas.width, this.compositeCanvas.height);\n    \n    // Draw white background\n    this.compositeCtx.fillStyle = '#FFFFFF';\n    this.compositeCtx.fillRect(0, 0, this.compositeCanvas.width, this.compositeCanvas.height);\n\n    // Render all visible layers in order\n    this.layers.forEach(layer => {\n      if (layer.visible && layer.canvas) {\n        this.compositeCtx.save();\n        this.compositeCtx.globalAlpha = layer.opacity / 100;\n        this.compositeCtx.globalCompositeOperation = this.getCanvasBlendMode(layer.blendMode || 'normal');\n        this.compositeCtx.drawImage(layer.canvas, 0, 0);\n        this.compositeCtx.restore();\n      }\n    });\n    \n    // Notify callbacks\n    this.compositeUpdateCallbacks.forEach(callback => callback());\n  }\n  \n  private scheduleCompositeUpdate(): void {\n    if (this.updateScheduled) return;\n    \n    this.updateScheduled = true;\n    requestAnimationFrame(() => {\n      this.updateComposite();\n      this.updateScheduled = false;\n    });\n  }\n\n  private getCanvasBlendMode(blendMode: BlendMode): GlobalCompositeOperation {\n    const blendModeMap: Record<BlendMode, GlobalCompositeOperation> = {\n      'normal': 'source-over',\n      'multiply': 'multiply',\n      'screen': 'screen',\n      'overlay': 'overlay',\n      'soft-light': 'soft-light',\n      'hard-light': 'hard-light',\n      'color-dodge': 'color-dodge',\n      'color-burn': 'color-burn',\n      'darken': 'darken',\n      'lighten': 'lighten',\n      'difference': 'difference',\n      'exclusion': 'exclusion'\n    };\n\n    return blendModeMap[blendMode] || 'source-over';\n  }\n\n  getCompositeCanvas(): HTMLCanvasElement {\n    return this.compositeCanvas;\n  }\n  \n  // Subscribe to composite updates for external components\n  onCompositeUpdate(callback: () => void): () => void {\n    this.compositeUpdateCallbacks.push(callback);\n    return () => {\n      const index = this.compositeUpdateCallbacks.indexOf(callback);\n      if (index > -1) {\n        this.compositeUpdateCallbacks.splice(index, 1);\n      }\n    };\n  }\n  \n  // Force immediate update for cases where we need synchronous rendering\n  forceCompositeUpdate(): void {\n    this.updateComposite();\n  }\n\n  // Export/Import functionality\n  exportLayers(): any {\n    return this.layers.map(layer => ({\n      id: layer.id,\n      name: layer.name,\n      visible: layer.visible,\n      opacity: layer.opacity,\n      blendMode: layer.blendMode,\n      locked: layer.locked,\n      imageData: layer.canvas ? layer.canvas.toDataURL() : null\n    }));\n  }\n\n  importLayers(layersData: any[]): void {\n    this.layers = [];\n    this.activeLayerId = null;\n\n    layersData.forEach((layerData, index) => {\n      const canvas = document.createElement('canvas');\n      canvas.width = this.compositeCanvas.width;\n      canvas.height = this.compositeCanvas.height;\n      \n      if (layerData.imageData) {\n        const img = new Image();\n        img.onload = () => {\n          const ctx = canvas.getContext('2d')!;\n          ctx.drawImage(img, 0, 0);\n          this.updateComposite();\n        };\n        img.src = layerData.imageData;\n      }\n\n      const layer: LayerData = {\n        id: layerData.id,\n        name: layerData.name,\n        visible: layerData.visible,\n        opacity: layerData.opacity,\n        blendMode: layerData.blendMode || 'normal',\n        locked: layerData.locked || false,\n        canvas\n      };\n\n      this.layers.push(layer);\n      \n      if (index === 0) {\n        this.activeLayerId = layer.id;\n      }\n    });\n\n    this.updateComposite();\n  }\n\n  // Utility methods\n  clear(layerId?: string): void {\n    if (layerId) {\n      const layer = this.getLayer(layerId);\n      if (layer && layer.canvas) {\n        const ctx = layer.canvas.getContext('2d')!;\n        ctx.clearRect(0, 0, layer.canvas.width, layer.canvas.height);\n        this.updateComposite();\n      }\n    } else {\n      // Clear active layer\n      const activeLayer = this.getActiveLayer();\n      if (activeLayer && activeLayer.canvas) {\n        const ctx = activeLayer.canvas.getContext('2d')!;\n        ctx.clearRect(0, 0, activeLayer.canvas.width, activeLayer.canvas.height);\n        this.updateComposite();\n      }\n    }\n  }\n\n  fill(color: string, layerId?: string): void {\n    const layer = layerId ? this.getLayer(layerId) : this.getActiveLayer();\n    if (layer && layer.canvas) {\n      const ctx = layer.canvas.getContext('2d')!;\n      ctx.fillStyle = color;\n      ctx.fillRect(0, 0, layer.canvas.width, layer.canvas.height);\n      this.updateComposite();\n    }\n  }\n\n  resize(width: number, height: number): void {\n    const oldLayers = this.exportLayers();\n    \n    this.compositeCanvas.width = width;\n    this.compositeCanvas.height = height;\n    \n    // Resize all layer canvases\n    this.layers.forEach(layer => {\n      if (layer.canvas) {\n        const oldImageData = layer.canvas.toDataURL();\n        layer.canvas.width = width;\n        layer.canvas.height = height;\n        \n        const img = new Image();\n        img.onload = () => {\n          const ctx = layer.canvas!.getContext('2d')!;\n          ctx.drawImage(img, 0, 0);\n          this.updateComposite();\n        };\n        img.src = oldImageData;\n      }\n    });\n  }\n}\n\n// Layer effects and filters\nexport class LayerEffects {\n  static applyGaussianBlur(canvas: HTMLCanvasElement, radius: number): void {\n    const ctx = canvas.getContext('2d')!;\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const blurredData = this.gaussianBlur(imageData, radius);\n    ctx.putImageData(blurredData, 0, 0);\n  }\n\n  static adjustBrightness(canvas: HTMLCanvasElement, brightness: number): void {\n    const ctx = canvas.getContext('2d')!;\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = Math.max(0, Math.min(255, data[i] + brightness));     // R\n      data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + brightness)); // G\n      data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + brightness)); // B\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  static adjustContrast(canvas: HTMLCanvasElement, contrast: number): void {\n    const ctx = canvas.getContext('2d')!;\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    const factor = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = Math.max(0, Math.min(255, factor * (data[i] - 128) + 128));     // R\n      data[i + 1] = Math.max(0, Math.min(255, factor * (data[i + 1] - 128) + 128)); // G\n      data[i + 2] = Math.max(0, Math.min(255, factor * (data[i + 2] - 128) + 128)); // B\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  private static gaussianBlur(imageData: ImageData, radius: number): ImageData {\n    const data = new Uint8ClampedArray(imageData.data);\n    const width = imageData.width;\n    const height = imageData.height;\n    \n    // Simple box blur approximation\n    const kernel = this.createGaussianKernel(radius);\n    const kernelSize = kernel.length;\n    const halfKernel = Math.floor(kernelSize / 2);\n    \n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        let r = 0, g = 0, b = 0, a = 0;\n        let weightSum = 0;\n        \n        for (let ky = -halfKernel; ky <= halfKernel; ky++) {\n          for (let kx = -halfKernel; kx <= halfKernel; kx++) {\n            const py = Math.max(0, Math.min(height - 1, y + ky));\n            const px = Math.max(0, Math.min(width - 1, x + kx));\n            const pi = (py * width + px) * 4;\n            const weight = kernel[ky + halfKernel] * kernel[kx + halfKernel];\n            \n            r += imageData.data[pi] * weight;\n            g += imageData.data[pi + 1] * weight;\n            b += imageData.data[pi + 2] * weight;\n            a += imageData.data[pi + 3] * weight;\n            weightSum += weight;\n          }\n        }\n        \n        const i = (y * width + x) * 4;\n        data[i] = r / weightSum;\n        data[i + 1] = g / weightSum;\n        data[i + 2] = b / weightSum;\n        data[i + 3] = a / weightSum;\n      }\n    }\n    \n    return new ImageData(data, width, height);\n  }\n\n  private static createGaussianKernel(radius: number): number[] {\n    const size = Math.ceil(radius) * 2 + 1;\n    const kernel = new Array(size);\n    const sigma = radius / 3;\n    const twoSigmaSquared = 2 * sigma * sigma;\n    const center = Math.floor(size / 2);\n    let sum = 0;\n    \n    for (let i = 0; i < size; i++) {\n      const distance = i - center;\n      kernel[i] = Math.exp(-(distance * distance) / twoSigmaSquared);\n      sum += kernel[i];\n    }\n    \n    // Normalize\n    for (let i = 0; i < size; i++) {\n      kernel[i] /= sum;\n    }\n    \n    return kernel;\n  }\n}\n","size_bytes":15446},"client/src/lib/canvas/tools.ts":{"content":"/**\n * Canvas drawing tools and utilities for the texture creator\n */\n\nexport type CanvasTool = 'brush' | 'pencil' | 'eraser' | 'fill' | 'rectangle' | 'circle' | 'line' | 'select';\n\nexport interface BrushSettings {\n  size: number;\n  opacity: number;\n  hardness: number;\n  color: string;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport class CanvasDrawingTool {\n  private canvas: HTMLCanvasElement | null = null;\n  private ctx: CanvasRenderingContext2D | null = null;\n  private isDrawing = false;\n  private lastPoint: Point | null = null;\n\n  setCanvas(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n  }\n\n  startDrawing(point: Point, tool: CanvasTool, settings: BrushSettings) {\n    if (!this.ctx) return;\n    \n    this.isDrawing = true;\n    this.lastPoint = point;\n    \n    switch (tool) {\n      case 'brush':\n      case 'pencil':\n        this.drawBrush(point, settings, tool === 'pencil');\n        break;\n      case 'eraser':\n        this.drawEraser(point, settings);\n        break;\n      case 'fill':\n        this.floodFill(point, settings.color);\n        break;\n    }\n  }\n\n  continuDrawing(point: Point, tool: CanvasTool, settings: BrushSettings) {\n    if (!this.ctx || !this.isDrawing || !this.lastPoint) return;\n    \n    switch (tool) {\n      case 'brush':\n      case 'pencil':\n        this.drawLine(this.lastPoint, point, settings, tool === 'pencil');\n        break;\n      case 'eraser':\n        this.drawEraserLine(this.lastPoint, point, settings);\n        break;\n    }\n    \n    this.lastPoint = point;\n  }\n\n  endDrawing() {\n    this.isDrawing = false;\n    this.lastPoint = null;\n  }\n\n  private drawBrush(point: Point, settings: BrushSettings, isPencil = false) {\n    if (!this.ctx) return;\n    \n    this.ctx.save();\n    this.ctx.globalAlpha = settings.opacity;\n    this.ctx.fillStyle = settings.color;\n    \n    if (isPencil || settings.hardness >= 0.9) {\n      // Hard brush\n      this.ctx.fillRect(point.x - settings.size / 2, point.y - settings.size / 2, settings.size, settings.size);\n    } else {\n      // Soft brush with gradient\n      const gradient = this.ctx.createRadialGradient(\n        point.x, point.y, 0,\n        point.x, point.y, settings.size / 2\n      );\n      gradient.addColorStop(0, settings.color);\n      gradient.addColorStop(settings.hardness, settings.color);\n      gradient.addColorStop(1, 'transparent');\n      \n      this.ctx.fillStyle = gradient;\n      this.ctx.beginPath();\n      this.ctx.arc(point.x, point.y, settings.size / 2, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n    \n    this.ctx.restore();\n  }\n\n  private drawEraser(point: Point, settings: BrushSettings) {\n    if (!this.ctx) return;\n    \n    this.ctx.save();\n    this.ctx.globalCompositeOperation = 'destination-out';\n    this.ctx.beginPath();\n    this.ctx.arc(point.x, point.y, settings.size / 2, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  private drawLine(from: Point, to: Point, settings: BrushSettings, isPencil = false) {\n    if (!this.ctx) return;\n    \n    // Calculate distance and steps\n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const steps = Math.ceil(distance / (settings.size * 0.1));\n    \n    for (let i = 0; i <= steps; i++) {\n      const t = i / steps;\n      const point = {\n        x: from.x + dx * t,\n        y: from.y + dy * t\n      };\n      this.drawBrush(point, settings, isPencil);\n    }\n  }\n\n  private drawEraserLine(from: Point, to: Point, settings: BrushSettings) {\n    if (!this.ctx) return;\n    \n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const steps = Math.ceil(distance / (settings.size * 0.1));\n    \n    for (let i = 0; i <= steps; i++) {\n      const t = i / steps;\n      const point = {\n        x: from.x + dx * t,\n        y: from.y + dy * t\n      };\n      this.drawEraser(point, settings);\n    }\n  }\n\n  private floodFill(startPoint: Point, fillColor: string) {\n    if (!this.ctx || !this.canvas) return;\n    \n    const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n    const data = imageData.data;\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    \n    const startIndex = (Math.floor(startPoint.y) * width + Math.floor(startPoint.x)) * 4;\n    const startR = data[startIndex];\n    const startG = data[startIndex + 1];\n    const startB = data[startIndex + 2];\n    const startA = data[startIndex + 3];\n    \n    // Convert fill color to RGB\n    const fillRGB = this.hexToRgb(fillColor);\n    if (!fillRGB) return;\n    \n    // Check if we're trying to fill with the same color\n    if (startR === fillRGB.r && startG === fillRGB.g && startB === fillRGB.b) {\n      return;\n    }\n    \n    const pixelStack = [Math.floor(startPoint.x), Math.floor(startPoint.y)];\n    const visitedPixels = new Set<string>();\n    \n    while (pixelStack.length > 0) {\n      const y = pixelStack.pop()!;\n      const x = pixelStack.pop()!;\n      \n      if (x < 0 || x >= width || y < 0 || y >= height) continue;\n      \n      const pixelKey = `${x},${y}`;\n      if (visitedPixels.has(pixelKey)) continue;\n      visitedPixels.add(pixelKey);\n      \n      const index = (y * width + x) * 4;\n      \n      if (data[index] === startR && data[index + 1] === startG && \n          data[index + 2] === startB && data[index + 3] === startA) {\n        \n        // Fill this pixel\n        data[index] = fillRGB.r;\n        data[index + 1] = fillRGB.g;\n        data[index + 2] = fillRGB.b;\n        data[index + 3] = 255;\n        \n        // Add neighboring pixels to stack\n        pixelStack.push(x + 1, y);\n        pixelStack.push(x - 1, y);\n        pixelStack.push(x, y + 1);\n        pixelStack.push(x, y - 1);\n      }\n    }\n    \n    this.ctx.putImageData(imageData, 0, 0);\n  }\n\n  drawRectangle(start: Point, end: Point, settings: BrushSettings, filled = false) {\n    if (!this.ctx) return;\n    \n    this.ctx.save();\n    this.ctx.strokeStyle = settings.color;\n    this.ctx.lineWidth = settings.size;\n    this.ctx.globalAlpha = settings.opacity;\n    \n    const width = end.x - start.x;\n    const height = end.y - start.y;\n    \n    if (filled) {\n      this.ctx.fillStyle = settings.color;\n      this.ctx.fillRect(start.x, start.y, width, height);\n    } else {\n      this.ctx.strokeRect(start.x, start.y, width, height);\n    }\n    \n    this.ctx.restore();\n  }\n\n  drawCircle(center: Point, radius: number, settings: BrushSettings, filled = false) {\n    if (!this.ctx) return;\n    \n    this.ctx.save();\n    this.ctx.strokeStyle = settings.color;\n    this.ctx.lineWidth = settings.size;\n    this.ctx.globalAlpha = settings.opacity;\n    \n    this.ctx.beginPath();\n    this.ctx.arc(center.x, center.y, radius, 0, Math.PI * 2);\n    \n    if (filled) {\n      this.ctx.fillStyle = settings.color;\n      this.ctx.fill();\n    } else {\n      this.ctx.stroke();\n    }\n    \n    this.ctx.restore();\n  }\n\n  drawStraightLine(start: Point, end: Point, settings: BrushSettings) {\n    if (!this.ctx) return;\n    \n    this.ctx.save();\n    this.ctx.strokeStyle = settings.color;\n    this.ctx.lineWidth = settings.size;\n    this.ctx.globalAlpha = settings.opacity;\n    this.ctx.lineCap = 'round';\n    \n    this.ctx.beginPath();\n    this.ctx.moveTo(start.x, start.y);\n    this.ctx.lineTo(end.x, end.y);\n    this.ctx.stroke();\n    \n    this.ctx.restore();\n  }\n\n  private hexToRgb(hex: string): { r: number; g: number; b: number } | null {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  // Utility methods for pixel manipulation\n  getPixelColor(point: Point): string | null {\n    if (!this.ctx || !this.canvas) return null;\n    \n    const imageData = this.ctx.getImageData(point.x, point.y, 1, 1);\n    const data = imageData.data;\n    \n    return `rgb(${data[0]}, ${data[1]}, ${data[2]})`;\n  }\n\n  clearCanvas() {\n    if (!this.ctx || !this.canvas) return;\n    \n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // Advanced brush patterns\n  createCustomBrush(pattern: 'square' | 'circle' | 'diamond' | 'star'): ImageData | null {\n    if (!this.ctx) return null;\n    \n    const size = 20;\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = size;\n    tempCanvas.height = size;\n    const tempCtx = tempCanvas.getContext('2d');\n    \n    if (!tempCtx) return null;\n    \n    tempCtx.fillStyle = '#000000';\n    \n    switch (pattern) {\n      case 'square':\n        tempCtx.fillRect(0, 0, size, size);\n        break;\n      case 'circle':\n        tempCtx.beginPath();\n        tempCtx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);\n        tempCtx.fill();\n        break;\n      case 'diamond':\n        tempCtx.beginPath();\n        tempCtx.moveTo(size / 2, 0);\n        tempCtx.lineTo(size, size / 2);\n        tempCtx.lineTo(size / 2, size);\n        tempCtx.lineTo(0, size / 2);\n        tempCtx.closePath();\n        tempCtx.fill();\n        break;\n      case 'star':\n        this.drawStar(tempCtx, size / 2, size / 2, 5, size / 2, size / 4);\n        tempCtx.fill();\n        break;\n    }\n    \n    return tempCtx.getImageData(0, 0, size, size);\n  }\n\n  private drawStar(ctx: CanvasRenderingContext2D, cx: number, cy: number, spikes: number, outerRadius: number, innerRadius: number) {\n    let rot = Math.PI / 2 * 3;\n    let x = cx;\n    let y = cy;\n    const step = Math.PI / spikes;\n\n    ctx.beginPath();\n    ctx.moveTo(cx, cy - outerRadius);\n\n    for (let i = 0; i < spikes; i++) {\n      x = cx + Math.cos(rot) * outerRadius;\n      y = cy + Math.sin(rot) * outerRadius;\n      ctx.lineTo(x, y);\n      rot += step;\n\n      x = cx + Math.cos(rot) * innerRadius;\n      y = cy + Math.sin(rot) * innerRadius;\n      ctx.lineTo(x, y);\n      rot += step;\n    }\n\n    ctx.lineTo(cx, cy - outerRadius);\n    ctx.closePath();\n  }\n}\n\n// Color utilities\nexport class ColorUtils {\n  static hexToHsl(hex: string): { h: number; s: number; l: number } {\n    const r = parseInt(hex.slice(1, 3), 16) / 255;\n    const g = parseInt(hex.slice(3, 5), 16) / 255;\n    const b = parseInt(hex.slice(5, 7), 16) / 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const diff = max - min;\n    const sum = max + min;\n    const l = sum / 2;\n\n    let h: number;\n    let s: number;\n\n    if (diff === 0) {\n      h = s = 0;\n    } else {\n      s = l < 0.5 ? diff / sum : diff / (2 - sum);\n\n      switch (max) {\n        case r:\n          h = (g - b) / diff + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / diff + 2;\n          break;\n        case b:\n          h = (r - g) / diff + 4;\n          break;\n        default:\n          h = 0;\n      }\n      h /= 6;\n    }\n\n    return { h: h * 360, s: s * 100, l: l * 100 };\n  }\n\n  static hslToHex(h: number, s: number, l: number): string {\n    h /= 360;\n    s /= 100;\n    l /= 100;\n\n    const hue2rgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1/6) return p + (q - p) * 6 * t;\n      if (t < 1/2) return q;\n      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n      return p;\n    };\n\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1/3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1/3);\n    }\n\n    const toHex = (c: number) => {\n      const hex = Math.round(c * 255).toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n  }\n\n  static generatePalette(baseColor: string, count: number): string[] {\n    const hsl = this.hexToHsl(baseColor);\n    const palette: string[] = [];\n\n    for (let i = 0; i < count; i++) {\n      const variation = {\n        h: (hsl.h + (i * 360 / count)) % 360,\n        s: Math.max(20, hsl.s - (i * 10)),\n        l: Math.max(20, Math.min(80, hsl.l + (i % 2 === 0 ? 10 : -10)))\n      };\n      palette.push(this.hslToHex(variation.h, variation.s, variation.l));\n    }\n\n    return palette;\n  }\n}\n","size_bytes":12251},"client/src/lib/export/addon.ts":{"content":"/**\n * Addon export and packaging system\n */\n\nexport interface AddonConfig {\n  name: string;\n  description: string;\n  author: string;\n  version: string;\n  minEngineVersion: string;\n  includeBehaviorPack: boolean;\n  includeResourcePack: boolean;\n  files: Array<{\n    path: string;\n    type: 'behavior' | 'resource';\n    content: string;\n    size: number;\n  }>;\n}\n\nexport interface ManifestConfig {\n  name: string;\n  description: string;\n  uuid: string;\n  version: number[];\n  minEngineVersion: number[];\n  packType: 'data' | 'resources';\n}\n\nexport class AddonExporter {\n  private static generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  private static parseVersion(version: string): number[] {\n    return version.split('.').map(v => parseInt(v) || 0);\n  }\n\n  private static createManifest(config: ManifestConfig): string {\n    const manifest = {\n      format_version: 2,\n      header: {\n        name: config.name,\n        description: config.description,\n        uuid: config.uuid,\n        version: config.version,\n        min_engine_version: config.minEngineVersion\n      },\n      modules: [\n        {\n          description: `${config.packType === 'data' ? 'Behavior' : 'Resource'} Pack Module`,\n          type: config.packType,\n          uuid: this.generateUUID(),\n          version: config.version\n        }\n      ]\n    };\n\n    return JSON.stringify(manifest, null, 2);\n  }\n\n  static async exportAsZip(config: AddonConfig): Promise<Blob> {\n    // Dynamic import for JSZip to avoid bundle size issues\n    const JSZip = (await import('jszip')).default;\n    const zip = new JSZip();\n\n    const version = this.parseVersion(config.version);\n    const minEngineVersion = this.parseVersion(config.minEngineVersion);\n\n    // Create behavior pack if included\n    if (config.includeBehaviorPack) {\n      const behaviorPack = zip.folder('behavior_pack');\n      \n      // Create manifest\n      const behaviorManifest = this.createManifest({\n        name: `${config.name} Behavior Pack`,\n        description: config.description,\n        uuid: this.generateUUID(),\n        version,\n        minEngineVersion,\n        packType: 'data'\n      });\n      \n      behaviorPack?.file('manifest.json', behaviorManifest);\n\n      // Add behavior pack files\n      const behaviorFiles = config.files.filter(file => file.type === 'behavior');\n      behaviorFiles.forEach(file => {\n        behaviorPack?.file(file.path, file.content);\n      });\n\n      // Add pack icon if available\n      behaviorPack?.file('pack_icon.png', this.generatePackIcon(config.name, 'behavior'));\n    }\n\n    // Create resource pack if included\n    if (config.includeResourcePack) {\n      const resourcePack = zip.folder('resource_pack');\n      \n      // Create manifest\n      const resourceManifest = this.createManifest({\n        name: `${config.name} Resource Pack`,\n        description: config.description,\n        uuid: this.generateUUID(),\n        version,\n        minEngineVersion,\n        packType: 'resources'\n      });\n      \n      resourcePack?.file('manifest.json', resourceManifest);\n\n      // Add resource pack files\n      const resourceFiles = config.files.filter(file => file.type === 'resource');\n      resourceFiles.forEach(file => {\n        resourcePack?.file(file.path, file.content);\n      });\n\n      // Add pack icon\n      resourcePack?.file('pack_icon.png', this.generatePackIcon(config.name, 'resource'));\n    }\n\n    // Generate the zip file\n    const blob = await zip.generateAsync({\n      type: 'blob',\n      compression: 'DEFLATE',\n      compressionOptions: { level: 6 }\n    });\n\n    return blob;\n  }\n\n  static async exportAsMcaddon(config: AddonConfig): Promise<Blob> {\n    // For .mcaddon files, we create a different structure\n    const JSZip = (await import('jszip')).default;\n    const zip = new JSZip();\n\n    const version = this.parseVersion(config.version);\n    const minEngineVersion = this.parseVersion(config.minEngineVersion);\n\n    // Create behavior pack folder\n    if (config.includeBehaviorPack) {\n      const behaviorManifest = this.createManifest({\n        name: `${config.name}`,\n        description: config.description,\n        uuid: this.generateUUID(),\n        version,\n        minEngineVersion,\n        packType: 'data'\n      });\n      \n      zip.file('manifest.json', behaviorManifest);\n\n      // Add behavior pack files to root\n      const behaviorFiles = config.files.filter(file => file.type === 'behavior');\n      behaviorFiles.forEach(file => {\n        zip.file(file.path, file.content);\n      });\n    }\n\n    // Add resource pack files if included\n    if (config.includeResourcePack) {\n      const resourceFiles = config.files.filter(file => file.type === 'resource');\n      resourceFiles.forEach(file => {\n        zip.file(file.path, file.content);\n      });\n    }\n\n    // Add pack icon\n    zip.file('pack_icon.png', this.generatePackIcon(config.name));\n\n    return await zip.generateAsync({\n      type: 'blob',\n      compression: 'DEFLATE',\n      compressionOptions: { level: 6 }\n    });\n  }\n\n  private static generatePackIcon(name: string, type?: string): string {\n    // Generate a simple SVG icon and convert to base64 PNG\n    const svg = `\n      <svg width=\"64\" height=\"64\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect width=\"64\" height=\"64\" fill=\"${type === 'behavior' ? '#4F46E5' : '#059669'}\"/>\n        <text x=\"32\" y=\"32\" font-family=\"Arial, sans-serif\" font-size=\"10\" \n              fill=\"white\" text-anchor=\"middle\" dominant-baseline=\"central\">\n          ${name.substring(0, 3).toUpperCase()}\n        </text>\n      </svg>\n    `;\n\n    // Convert SVG to data URL (simplified for demo)\n    return `data:image/svg+xml;base64,${btoa(svg)}`;\n  }\n\n  static validateAddonStructure(config: AddonConfig): {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate basic config\n    if (!config.name?.trim()) {\n      errors.push('Addon name is required');\n    }\n\n    if (!config.author?.trim()) {\n      errors.push('Author name is required');\n    }\n\n    if (!config.version?.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n      errors.push('Version must be in format X.Y.Z (e.g., 1.0.0)');\n    }\n\n    if (!config.includeBehaviorPack && !config.includeResourcePack) {\n      errors.push('At least one pack type must be included');\n    }\n\n    // Validate files\n    if (config.files.length === 0) {\n      warnings.push('No files found to include in addon');\n    }\n\n    // Check for required files\n    const behaviorFiles = config.files.filter(f => f.type === 'behavior');\n    const resourceFiles = config.files.filter(f => f.type === 'resource');\n\n    if (config.includeBehaviorPack && behaviorFiles.length === 0) {\n      warnings.push('Behavior pack is enabled but no behavior files found');\n    }\n\n    if (config.includeResourcePack && resourceFiles.length === 0) {\n      warnings.push('Resource pack is enabled but no resource files found');\n    }\n\n    // Check file sizes\n    const totalSize = config.files.reduce((sum, file) => sum + file.size, 0);\n    if (totalSize > 50 * 1024 * 1024) { // 50MB limit\n      warnings.push('Addon size is quite large and may cause performance issues');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  static generateFileStructure(config: AddonConfig): {\n    behaviorPack: string[];\n    resourcePack: string[];\n  } {\n    const behaviorFiles: string[] = [];\n    const resourceFiles: string[] = [];\n\n    if (config.includeBehaviorPack) {\n      behaviorFiles.push('manifest.json');\n      behaviorFiles.push('pack_icon.png');\n      \n      config.files\n        .filter(file => file.type === 'behavior')\n        .forEach(file => behaviorFiles.push(file.path));\n    }\n\n    if (config.includeResourcePack) {\n      resourceFiles.push('manifest.json');\n      resourceFiles.push('pack_icon.png');\n      \n      config.files\n        .filter(file => file.type === 'resource')\n        .forEach(file => resourceFiles.push(file.path));\n    }\n\n    return {\n      behaviorPack: behaviorFiles,\n      resourcePack: resourceFiles\n    };\n  }\n\n  static createSampleFiles(): AddonConfig['files'] {\n    return [\n      {\n        path: 'entities/custom_entity.json',\n        type: 'behavior',\n        content: JSON.stringify({\n          format_version: '1.21.0',\n          'minecraft:entity': {\n            description: {\n              identifier: 'sample:custom_entity',\n              is_spawnable: true,\n              is_summonable: true\n            },\n            components: {\n              'minecraft:health': { value: 20, max: 20 },\n              'minecraft:movement': { value: 0.25 }\n            }\n          }\n        }, null, 2),\n        size: 512\n      },\n      {\n        path: 'textures/entity/custom_entity.png',\n        type: 'resource',\n        content: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==',\n        size: 68\n      }\n    ];\n  }\n\n  // Template generators\n  static generateEntityTemplate(identifier: string, displayName: string): string {\n    return JSON.stringify({\n      format_version: '1.21.0',\n      'minecraft:entity': {\n        description: {\n          identifier,\n          is_spawnable: true,\n          is_summonable: true\n        },\n        component_groups: {},\n        components: {\n          'minecraft:health': { value: 20, max: 20 },\n          'minecraft:movement': { value: 0.25 },\n          'minecraft:navigation.walk': {\n            can_path_over_water: false,\n            avoid_water: true\n          },\n          'minecraft:movement.basic': {},\n          'minecraft:jump.static': {},\n          'minecraft:can_climb': {},\n          'minecraft:collision_box': {\n            width: 0.6,\n            height: 1.8\n          },\n          'minecraft:physics': {}\n        },\n        events: {}\n      }\n    }, null, 2);\n  }\n\n  static generateBlockTemplate(identifier: string, displayName: string): string {\n    return JSON.stringify({\n      format_version: '1.21.0',\n      'minecraft:block': {\n        description: {\n          identifier,\n          register_to_creative_menu: true\n        },\n        components: {\n          'minecraft:destructible_by_mining': {\n            seconds_to_destroy: 1.5\n          },\n          'minecraft:destructible_by_explosion': {\n            explosion_resistance: 6.0\n          },\n          'minecraft:friction': 0.6,\n          'minecraft:map_color': '#7F7F7F'\n        }\n      }\n    }, null, 2);\n  }\n\n  static generateItemTemplate(identifier: string, displayName: string): string {\n    return JSON.stringify({\n      format_version: '1.21.0',\n      'minecraft:item': {\n        description: {\n          identifier,\n          menu_category: {\n            category: 'items'\n          }\n        },\n        components: {\n          'minecraft:max_stack_size': 64,\n          'minecraft:icon': {\n            texture: identifier.split(':')[1] || 'custom_item'\n          },\n          'minecraft:display_name': {\n            value: displayName\n          }\n        }\n      }\n    }, null, 2);\n  }\n}\n\n// Export main function for use in components\nexport async function exportAddonPack(config: AddonConfig): Promise<Blob> {\n  return AddonExporter.exportAsMcaddon(config);\n}\n","size_bytes":11407},"client/src/lib/minecraft/components.ts":{"content":"export interface ComponentProperty {\n  name: string;\n  type: string;\n  description: string;\n  required?: boolean;\n  default?: string;\n}\n\nexport interface EntityComponent {\n  name: string;\n  description: string;\n  category: string;\n  version?: string;\n  properties?: ComponentProperty[];\n  example?: string;\n  documentation?: string;\n}\n\nexport const entityComponents: EntityComponent[] = [\n  // Health & Attributes\n  {\n    name: 'minecraft:health',\n    description: 'Defines the entity\\'s health points',\n    category: 'Attributes',\n    version: '1.8.0',\n    properties: [\n      { name: 'value', type: 'number', description: 'Current health', required: true },\n      { name: 'max', type: 'number', description: 'Maximum health', required: true }\n    ],\n    example: `{\n  \"minecraft:health\": {\n    \"value\": 20,\n    \"max\": 20\n  }\n}`,\n    documentation: 'https://learn.microsoft.com/en-us/minecraft/creator/reference/content/entityreference/examples/entitycomponents/minecrafthealth'\n  },\n  {\n    name: 'minecraft:attack',\n    description: 'Defines the entity\\'s attack damage',\n    category: 'Combat',\n    version: '1.8.0',\n    properties: [\n      { name: 'damage', type: 'number', description: 'Attack damage amount', required: true }\n    ],\n    example: `{\n  \"minecraft:attack\": {\n    \"damage\": 3\n  }\n}`,\n  },\n  {\n    name: 'minecraft:scale',\n    description: 'Changes the visual size of the entity',\n    category: 'Visual',\n    version: '1.8.0',\n    properties: [\n      { name: 'value', type: 'number', description: 'Scale multiplier', required: true, default: '1.0' }\n    ],\n    example: `{\n  \"minecraft:scale\": {\n    \"value\": 1.5\n  }\n}`,\n  },\n\n  // Movement\n  {\n    name: 'minecraft:movement',\n    description: 'Basic movement speed for the entity',\n    category: 'Movement',\n    version: '1.8.0',\n    properties: [\n      { name: 'value', type: 'number', description: 'Movement speed', required: true, default: '0.1' }\n    ],\n    example: `{\n  \"minecraft:movement\": {\n    \"value\": 0.25\n  }\n}`,\n  },\n  {\n    name: 'minecraft:navigation.walk',\n    description: 'Allows the entity to navigate on land',\n    category: 'Movement',\n    version: '1.8.0',\n    properties: [\n      { name: 'can_path_over_water', type: 'boolean', description: 'Can walk over water', default: 'false' },\n      { name: 'avoid_water', type: 'boolean', description: 'Avoids water when pathfinding', default: 'false' }\n    ],\n    example: `{\n  \"minecraft:navigation.walk\": {\n    \"can_path_over_water\": false,\n    \"avoid_water\": true\n  }\n}`,\n  },\n  {\n    name: 'minecraft:movement.basic',\n    description: 'Basic movement mechanics',\n    category: 'Movement',\n    version: '1.8.0',\n    example: `{\n  \"minecraft:movement.basic\": {}\n}`,\n  },\n  {\n    name: 'minecraft:jump.static',\n    description: 'Allows the entity to jump',\n    category: 'Movement',\n    version: '1.8.0',\n    properties: [\n      { name: 'jump_power', type: 'number', description: 'Jump strength', default: '0.42' }\n    ],\n    example: `{\n  \"minecraft:jump.static\": {\n    \"jump_power\": 0.42\n  }\n}`,\n  },\n\n  // Physics\n  {\n    name: 'minecraft:physics',\n    description: 'Enables physics simulation for the entity',\n    category: 'Physics',\n    version: '1.8.0',\n    example: `{\n  \"minecraft:physics\": {}\n}`,\n  },\n  {\n    name: 'minecraft:collision_box',\n    description: 'Defines the entity\\'s collision boundaries',\n    category: 'Physics',\n    version: '1.8.0',\n    properties: [\n      { name: 'width', type: 'number', description: 'Collision box width', required: true },\n      { name: 'height', type: 'number', description: 'Collision box height', required: true }\n    ],\n    example: `{\n  \"minecraft:collision_box\": {\n    \"width\": 0.6,\n    \"height\": 1.8\n  }\n}`,\n  },\n  {\n    name: 'minecraft:pushable',\n    description: 'Allows the entity to be pushed by other entities',\n    category: 'Physics',\n    version: '1.8.0',\n    properties: [\n      { name: 'is_pushable', type: 'boolean', description: 'Can be pushed', default: 'true' },\n      { name: 'is_pushable_by_piston', type: 'boolean', description: 'Can be pushed by pistons', default: 'true' }\n    ],\n    example: `{\n  \"minecraft:pushable\": {\n    \"is_pushable\": true,\n    \"is_pushable_by_piston\": false\n  }\n}`,\n  },\n\n  // Behaviors\n  {\n    name: 'minecraft:behavior.random_stroll',\n    description: 'Makes the entity wander around randomly',\n    category: 'Behavior',\n    version: '1.8.0',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true },\n      { name: 'speed_multiplier', type: 'number', description: 'Movement speed multiplier', default: '1.0' }\n    ],\n    example: `{\n  \"minecraft:behavior.random_stroll\": {\n    \"priority\": 6,\n    \"speed_multiplier\": 1.0\n  }\n}`,\n  },\n  {\n    name: 'minecraft:behavior.look_at_player',\n    description: 'Makes the entity look at nearby players',\n    category: 'Behavior',\n    version: '1.8.0',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true },\n      { name: 'look_distance', type: 'number', description: 'Distance to look for players', default: '6.0' }\n    ],\n    example: `{\n  \"minecraft:behavior.look_at_player\": {\n    \"priority\": 7,\n    \"look_distance\": 6.0\n  }\n}`,\n  },\n  {\n    name: 'minecraft:behavior.panic',\n    description: 'Makes the entity run away when hurt',\n    category: 'Behavior',\n    version: '1.8.0',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true },\n      { name: 'speed_multiplier', type: 'number', description: 'Panic speed multiplier', default: '1.25' }\n    ],\n    example: `{\n  \"minecraft:behavior.panic\": {\n    \"priority\": 1,\n    \"speed_multiplier\": 1.25\n  }\n}`,\n  },\n  {\n    name: 'minecraft:behavior.float',\n    description: 'Makes the entity float in water',\n    category: 'Behavior',\n    version: '1.8.0',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true }\n    ],\n    example: `{\n  \"minecraft:behavior.float\": {\n    \"priority\": 0\n  }\n}`,\n  },\n\n  // Environment\n  {\n    name: 'minecraft:breathable',\n    description: 'Defines what the entity can breathe',\n    category: 'Environment',\n    version: '1.8.0',\n    properties: [\n      { name: 'total_supply', type: 'number', description: 'Total air supply', default: '15' },\n      { name: 'suffocate_time', type: 'number', description: 'Time before suffocation damage', default: '-1' }\n    ],\n    example: `{\n  \"minecraft:breathable\": {\n    \"total_supply\": 15,\n    \"suffocate_time\": -1,\n    \"breathes_air\": true,\n    \"breathes_water\": false\n  }\n}`,\n  },\n\n  // Utility\n  {\n    name: 'minecraft:nameable',\n    description: 'Allows the entity to be named with name tags',\n    category: 'Utility',\n    version: '1.8.0',\n    properties: [\n      { name: 'always_show', type: 'boolean', description: 'Always show name', default: 'false' },\n      { name: 'allow_name_tag_renaming', type: 'boolean', description: 'Allow renaming', default: 'true' }\n    ],\n    example: `{\n  \"minecraft:nameable\": {\n    \"always_show\": false,\n    \"allow_name_tag_renaming\": true\n  }\n}`,\n  },\n  {\n    name: 'minecraft:persistent',\n    description: 'Prevents the entity from despawning naturally',\n    category: 'Utility',\n    version: '1.8.0',\n    example: `{\n  \"minecraft:persistent\": {}\n}`,\n  }\n];\n","size_bytes":7322},"client/src/lib/minecraft/docs.ts":{"content":"/**\n * Minecraft Bedrock Documentation System\n * Validates content against official Minecraft Bedrock docs\n */\n\nexport interface MinecraftDoc {\n  id: string;\n  title: string;\n  content: string;\n  category: string;\n  version: string;\n  lastUpdated: string;\n  officialUrl?: string;\n}\n\nexport interface APIMethod {\n  name: string;\n  description: string;\n  module: string;\n  parameters: Array<{\n    name: string;\n    type: string;\n    description: string;\n    optional?: boolean;\n    defaultValue?: any;\n  }>;\n  returns: {\n    type: string;\n    description: string;\n  };\n  examples: string[];\n  version: string;\n  deprecated?: boolean;\n}\n\nexport interface ComponentSpec {\n  name: string;\n  description: string;\n  category: string;\n  properties: Array<{\n    name: string;\n    type: string;\n    description: string;\n    required?: boolean;\n    defaultValue?: any;\n    validValues?: any[];\n  }>;\n  examples: string[];\n  compatibleWith: string[];\n  version: string;\n}\n\n// Minecraft API Documentation\nexport const minecraftApi: Record<string, APIMethod[]> = {\n  '@minecraft/server': [\n    {\n      name: 'world.sendMessage',\n      description: 'Sends a message to all players in the world',\n      module: '@minecraft/server',\n      parameters: [\n        {\n          name: 'message',\n          type: 'string | RawMessage',\n          description: 'The message to send to players'\n        }\n      ],\n      returns: {\n        type: 'void',\n        description: 'No return value'\n      },\n      examples: [\n        'world.sendMessage(\"Hello, world!\");',\n        'world.sendMessage({ rawtext: [{ text: \"Hello, \" }, { text: \"world!\" }] });'\n      ],\n      version: '1.21.0'\n    },\n    {\n      name: 'world.playSound',\n      description: 'Plays a sound at a specific location in the world',\n      module: '@minecraft/server',\n      parameters: [\n        {\n          name: 'soundId',\n          type: 'string',\n          description: 'The sound identifier to play'\n        },\n        {\n          name: 'location',\n          type: 'Vector3',\n          description: 'The location where the sound should be played'\n        },\n        {\n          name: 'soundOptions',\n          type: 'WorldSoundOptions',\n          description: 'Additional sound configuration options',\n          optional: true\n        }\n      ],\n      returns: {\n        type: 'void',\n        description: 'No return value'\n      },\n      examples: [\n        'world.playSound(\"random.pop\", { x: 0, y: 64, z: 0 });',\n        'world.playSound(\"ambient.cave\", playerLocation, { pitch: 1.2, volume: 0.8 });'\n      ],\n      version: '1.21.0'\n    },\n    {\n      name: 'world.spawnEntity',\n      description: 'Spawns an entity at the specified location',\n      module: '@minecraft/server',\n      parameters: [\n        {\n          name: 'identifier',\n          type: 'string',\n          description: 'The entity type identifier'\n        },\n        {\n          name: 'location',\n          type: 'Vector3',\n          description: 'The spawn location'\n        }\n      ],\n      returns: {\n        type: 'Entity',\n        description: 'The spawned entity object'\n      },\n      examples: [\n        'const pig = world.spawnEntity(\"minecraft:pig\", { x: 0, y: 64, z: 0 });',\n        'const customEntity = world.spawnEntity(\"my_addon:custom_mob\", spawnPoint);'\n      ],\n      version: '1.21.0'\n    },\n    {\n      name: 'world.getPlayers',\n      description: 'Gets all players currently in the world',\n      module: '@minecraft/server',\n      parameters: [],\n      returns: {\n        type: 'Player[]',\n        description: 'Array of all players in the world'\n      },\n      examples: [\n        'const players = world.getPlayers();',\n        'for (const player of world.getPlayers()) { player.sendMessage(\"Hello!\"); }'\n      ],\n      version: '1.21.0'\n    }\n  ],\n  'system': [\n    {\n      name: 'system.run',\n      description: 'Schedules a function to run on the next tick',\n      module: 'system',\n      parameters: [\n        {\n          name: 'callback',\n          type: '() => void',\n          description: 'Function to execute on the next tick'\n        }\n      ],\n      returns: {\n        type: 'number',\n        description: 'The run ID for this scheduled function'\n      },\n      examples: [\n        'system.run(() => { console.log(\"Next tick!\"); });',\n        'const runId = system.run(() => { world.sendMessage(\"Delayed message\"); });'\n      ],\n      version: '1.21.0'\n    },\n    {\n      name: 'system.runInterval',\n      description: 'Schedules a function to run repeatedly at specified intervals',\n      module: 'system',\n      parameters: [\n        {\n          name: 'callback',\n          type: '() => void',\n          description: 'Function to execute repeatedly'\n        },\n        {\n          name: 'tickInterval',\n          type: 'number',\n          description: 'Number of ticks between each execution'\n        }\n      ],\n      returns: {\n        type: 'number',\n        description: 'The interval ID for this scheduled function'\n      },\n      examples: [\n        'system.runInterval(() => { world.sendMessage(\"Every second!\"); }, 20);',\n        'const intervalId = system.runInterval(updateGameState, 10);'\n      ],\n      version: '1.21.0'\n    },\n    {\n      name: 'system.runTimeout',\n      description: 'Schedules a function to run after a specified delay',\n      module: 'system',\n      parameters: [\n        {\n          name: 'callback',\n          type: '() => void',\n          description: 'Function to execute after delay'\n        },\n        {\n          name: 'tickDelay',\n          type: 'number',\n          description: 'Number of ticks to wait before execution'\n        }\n      ],\n      returns: {\n        type: 'number',\n        description: 'The timeout ID for this scheduled function'\n      },\n      examples: [\n        'system.runTimeout(() => { player.sendMessage(\"Delayed!\"); }, 100);',\n        'const timeoutId = system.runTimeout(resetGame, 1200); // 60 seconds'\n      ],\n      version: '1.21.0'\n    },\n    {\n      name: 'system.clearRun',\n      description: 'Cancels a scheduled function',\n      module: 'system',\n      parameters: [\n        {\n          name: 'runId',\n          type: 'number',\n          description: 'The run ID to cancel'\n        }\n      ],\n      returns: {\n        type: 'void',\n        description: 'No return value'\n      },\n      examples: [\n        'system.clearRun(runId);',\n        'system.clearRun(intervalId); // Cancel interval'\n      ],\n      version: '1.21.0'\n    }\n  ]\n};\n\n// Component specifications based on official docs\nexport const componentSpecs: Record<string, ComponentSpec> = {\n  'minecraft:health': {\n    name: 'minecraft:health',\n    description: 'Defines the health of the entity',\n    category: 'Attributes',\n    properties: [\n      {\n        name: 'value',\n        type: 'number',\n        description: 'Current health of the entity',\n        required: true\n      },\n      {\n        name: 'max',\n        type: 'number',\n        description: 'Maximum health of the entity',\n        required: true\n      }\n    ],\n    examples: [\n      '{ \"minecraft:health\": { \"value\": 20, \"max\": 20 } }',\n      '{ \"minecraft:health\": { \"value\": 100, \"max\": 100 } }'\n    ],\n    compatibleWith: ['minecraft:entity'],\n    version: '1.8.0'\n  },\n  'minecraft:movement': {\n    name: 'minecraft:movement',\n    description: 'Defines the movement speed of the entity',\n    category: 'Movement',\n    properties: [\n      {\n        name: 'value',\n        type: 'number',\n        description: 'Movement speed multiplier',\n        required: true,\n        defaultValue: 0.1\n      }\n    ],\n    examples: [\n      '{ \"minecraft:movement\": { \"value\": 0.25 } }',\n      '{ \"minecraft:movement\": { \"value\": 0.5 } }'\n    ],\n    compatibleWith: ['minecraft:entity'],\n    version: '1.8.0'\n  }\n};\n\n// Documentation validation functions\nexport function validateAgainstDocs(content: any, contentType: string): {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  suggestions: string[];\n} {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n\n  // Validate based on content type\n  switch (contentType) {\n    case 'entity':\n      return validateEntityAgainstDocs(content);\n    case 'block':\n      return validateBlockAgainstDocs(content);\n    case 'item':\n      return validateItemAgainstDocs(content);\n    case 'script':\n      return validateScriptAgainstDocs(content);\n    default:\n      warnings.push('Unknown content type - limited validation available');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    suggestions\n  };\n}\n\nfunction validateEntityAgainstDocs(entity: any) {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n\n  // Check format version\n  const currentVersion = '1.21.0';\n  if (!entity.format_version) {\n    errors.push('Missing format_version - required for entity files');\n  } else if (entity.format_version < currentVersion) {\n    warnings.push(`Consider updating format_version to ${currentVersion} for latest features`);\n  }\n\n  // Validate components against specs\n  if (entity['minecraft:entity']?.components) {\n    const components = entity['minecraft:entity'].components;\n    \n    Object.keys(components).forEach(componentName => {\n      const spec = componentSpecs[componentName];\n      if (spec) {\n        // Validate component properties\n        const component = components[componentName];\n        spec.properties.forEach(prop => {\n          if (prop.required && !(prop.name in component)) {\n            errors.push(`Missing required property '${prop.name}' in ${componentName}`);\n          }\n        });\n      } else {\n        warnings.push(`Unknown component '${componentName}' - verify spelling and version compatibility`);\n      }\n    });\n\n    // Suggest common missing components\n    if (!components['minecraft:health']) {\n      suggestions.push('Consider adding minecraft:health component for entity survivability');\n    }\n    if (!components['minecraft:physics']) {\n      suggestions.push('Consider adding minecraft:physics component for proper physics simulation');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    suggestions\n  };\n}\n\nfunction validateBlockAgainstDocs(block: any) {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n\n  if (!block['minecraft:block']) {\n    errors.push('Missing minecraft:block object');\n  }\n\n  if (!block.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  return { isValid: errors.length === 0, errors, warnings, suggestions };\n}\n\nfunction validateItemAgainstDocs(item: any) {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n\n  if (!item['minecraft:item']) {\n    errors.push('Missing minecraft:item object');\n  }\n\n  if (!item.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  return { isValid: errors.length === 0, errors, warnings, suggestions };\n}\n\nfunction validateScriptAgainstDocs(script: string) {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n\n  // Check for common API usage\n  const lines = script.split('\\n');\n  \n  lines.forEach((line, index) => {\n    // Check for deprecated methods\n    if (line.includes('world.say')) {\n      warnings.push(`Line ${index + 1}: 'world.say' is deprecated, use 'world.sendMessage' instead`);\n    }\n    \n    // Check for proper imports\n    if (line.includes('world.') && !script.includes('import') && !script.includes('from \"@minecraft/server\"')) {\n      suggestions.push('Consider adding proper imports for better code organization');\n    }\n  });\n\n  return { isValid: errors.length === 0, errors, warnings, suggestions };\n}\n\n// Search and reference functions\nexport function searchDocs(query: string): MinecraftDoc[] {\n  // Implementation would search through documentation\n  return [];\n}\n\nexport function getAPIReference(methodName: string): APIMethod | null {\n  for (const moduleApi of Object.values(minecraftApi)) {\n    const method = moduleApi.find(m => m.name === methodName);\n    if (method) return method;\n  }\n  return null;\n}\n\nexport function getComponentSpec(componentName: string): ComponentSpec | null {\n  return componentSpecs[componentName] || null;\n}\n","size_bytes":12309},"client/src/lib/minecraft/templates.ts":{"content":"interface EntityComponent {\n  id: string;\n  type: string;\n  enabled: boolean;\n  properties: Record<string, any>;\n}\n\nexport function generateEntityJSON(identifier: string, displayName: string, components: EntityComponent[]) {\n  const enabledComponents = components.filter(c => c.enabled);\n  const componentObj: Record<string, any> = {};\n\n  enabledComponents.forEach(component => {\n    componentObj[component.type] = component.properties;\n  });\n\n  return {\n    format_version: \"1.21.0\",\n    \"minecraft:entity\": {\n      description: {\n        identifier: identifier || \"my_addon:custom_entity\",\n        is_spawnable: true,\n        is_summonable: true,\n        is_experimental: false\n      },\n      component_groups: {},\n      components: {\n        \"minecraft:collision_box\": {\n          width: 0.6,\n          height: 1.8\n        },\n        \"minecraft:physics\": {},\n        ...componentObj\n      },\n      events: {}\n    }\n  };\n}\n\ninterface BlockConfig {\n  identifier: string;\n  displayName: string;\n  material: string;\n  hardness: number;\n  lightEmission: number;\n  isTransparent: boolean;\n}\n\nexport function generateBlockJSON(config: BlockConfig) {\n  const components: Record<string, any> = {\n    \"minecraft:destructible_by_mining\": {\n      seconds_to_destroy: config.hardness\n    },\n    \"minecraft:destructible_by_explosion\": {\n      explosion_resistance: config.hardness * 3\n    }\n  };\n\n  if (config.lightEmission > 0) {\n    components[\"minecraft:light_emission\"] = {\n      emission: config.lightEmission\n    };\n  }\n\n  if (config.material) {\n    components[\"minecraft:material_instances\"] = {\n      \"*\": {\n        texture: config.identifier.split(':')[1] || \"custom_block\",\n        render_method: config.isTransparent ? \"alpha_test\" : \"opaque\"\n      }\n    };\n  }\n\n  return {\n    format_version: \"1.21.0\",\n    \"minecraft:block\": {\n      description: {\n        identifier: config.identifier || \"my_addon:custom_block\",\n        register_to_creative_menu: true\n      },\n      components\n    }\n  };\n}\n\ninterface ItemConfig {\n  identifier: string;\n  displayName: string;\n  category: string;\n  maxStackSize: number;\n  durability?: number;\n  isFood: boolean;\n  foodValue?: number;\n}\n\nexport function generateItemJSON(config: ItemConfig) {\n  const components: Record<string, any> = {\n    \"minecraft:max_stack_size\": config.maxStackSize,\n    \"minecraft:icon\": {\n      texture: config.identifier.split(':')[1] || \"custom_item\"\n    }\n  };\n\n  if (config.displayName) {\n    components[\"minecraft:display_name\"] = {\n      value: config.displayName\n    };\n  }\n\n  if (config.durability) {\n    components[\"minecraft:durability\"] = {\n      max_durability: config.durability\n    };\n  }\n\n  if (config.isFood && config.foodValue) {\n    components[\"minecraft:food\"] = {\n      nutrition: config.foodValue,\n      saturation_modifier: 0.6\n    };\n    components[\"minecraft:use_animation\"] = \"eat\";\n  }\n\n  return {\n    format_version: \"1.21.0\",\n    \"minecraft:item\": {\n      description: {\n        identifier: config.identifier || \"my_addon:custom_item\",\n        menu_category: {\n          category: config.category || \"items\"\n        }\n      },\n      components\n    }\n  };\n}\n\ninterface RecipeIngredient {\n  item: string;\n  count: number;\n}\n\ninterface RecipeConfig {\n  identifier: string;\n  type: string;\n  result: {\n    item: string;\n    count: number;\n  };\n  ingredients: RecipeIngredient[];\n}\n\nexport function generateRecipeJSON(config: RecipeConfig) {\n  const validIngredients = config.ingredients.filter(ing => ing.item.trim() !== '');\n  \n  if (config.type === 'furnace') {\n    return {\n      format_version: \"1.21.0\",\n      \"minecraft:recipe_furnace\": {\n        description: {\n          identifier: config.identifier || \"my_addon:custom_recipe\"\n        },\n        tags: [\"furnace\"],\n        input: validIngredients[0]?.item || \"minecraft:iron_ore\",\n        output: config.result.item || \"my_addon:custom_item\"\n      }\n    };\n  }\n\n  // Default to shapeless recipe\n  return {\n    format_version: \"1.21.0\",\n    \"minecraft:recipe_shapeless\": {\n      description: {\n        identifier: config.identifier || \"my_addon:custom_recipe\"\n      },\n      tags: [\"crafting_table\"],\n      ingredients: validIngredients.map(ing => ({\n        item: ing.item,\n        count: ing.count\n      })),\n      result: {\n        item: config.result.item || \"my_addon:custom_item\",\n        count: config.result.count || 1\n      }\n    }\n  };\n}\n\ninterface LootEntry {\n  type: string;\n  name: string;\n  weight: number;\n}\n\ninterface LootPool {\n  rolls: { min: number; max: number };\n  entries: LootEntry[];\n}\n\ninterface LootConfig {\n  identifier: string;\n  type: string;\n  pools: LootPool[];\n}\n\nexport function generateLootTableJSON(config: LootConfig) {\n  const pools = config.pools.map(pool => ({\n    rolls: {\n      min: pool.rolls.min,\n      max: pool.rolls.max\n    },\n    entries: pool.entries\n      .filter(entry => entry.name.trim() !== '')\n      .map(entry => ({\n        type: entry.type,\n        name: entry.name,\n        weight: entry.weight\n      }))\n  })).filter(pool => pool.entries.length > 0);\n\n  return {\n    format_version: \"1.21.0\",\n    pools\n  };\n}\n\nexport function generateManifestJSON(config: {\n  name: string;\n  description: string;\n  author: string;\n  version: string;\n  minEngineVersion: string;\n  packType: 'behavior' | 'resource';\n}) {\n  const [major, minor, patch] = config.version.split('.').map(v => parseInt(v) || 0);\n  const [engineMajor, engineMinor, enginePatch] = config.minEngineVersion.split('.').map(v => parseInt(v) || 1);\n\n  return {\n    format_version: 2,\n    header: {\n      name: config.name,\n      description: config.description,\n      uuid: generateUUID(),\n      version: [major, minor, patch],\n      min_engine_version: [engineMajor, engineMinor, enginePatch]\n    },\n    modules: [\n      {\n        description: `${config.packType === 'behavior' ? 'Behavior' : 'Resource'} Pack Module`,\n        type: config.packType === 'behavior' ? 'data' : 'resources',\n        uuid: generateUUID(),\n        version: [major, minor, patch]\n      }\n    ]\n  };\n}\n\nfunction generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n","size_bytes":6269},"client/src/lib/minecraft/validation.ts":{"content":"export interface ValidationResult {\n  isValid: boolean;\n  errors?: string[];\n  warnings?: string[];\n}\n\nexport function validateJSON(jsonString: string, fileType: string = 'auto'): ValidationResult {\n  try {\n    const data = JSON.parse(jsonString);\n    \n    // Auto-detect file type if not specified\n    if (fileType === 'auto') {\n      fileType = detectFileType(data);\n    }\n\n    // Validate based on file type\n    switch (fileType) {\n      case 'entity':\n        return validateEntityJSON(data);\n      case 'block':\n        return validateBlockJSON(data);\n      case 'item':\n        return validateItemJSON(data);\n      case 'recipe':\n        return validateRecipeJSON(data);\n      case 'loot_table':\n        return validateLootTableJSON(data);\n      case 'client_entity':\n        return validateClientEntityJSON(data);\n      case 'spawn_rule':\n        return validateSpawnRuleJSON(data);\n      case 'biome':\n        return validateBiomeJSON(data);\n      default:\n        return validateGenericJSON(data);\n    }\n  } catch (error) {\n    return {\n      isValid: false,\n      errors: [`Invalid JSON syntax: ${error instanceof Error ? error.message : 'Unknown error'}`]\n    };\n  }\n}\n\nfunction detectFileType(data: any): string {\n  if (data['minecraft:entity']) return 'entity';\n  if (data['minecraft:client_entity']) return 'client_entity';\n  if (data['minecraft:block']) return 'block';\n  if (data['minecraft:item']) return 'item';\n  if (data['minecraft:recipe_shaped'] || data['minecraft:recipe_shapeless']) return 'recipe';\n  if (data['minecraft:spawn_rules']) return 'spawn_rule';\n  if (data['minecraft:biome']) return 'biome';\n  if (data['pools']) return 'loot_table';\n  return 'unknown';\n}\n\nexport function validateEntityJSON(data: any): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Check format version\n  if (!data.format_version) {\n    errors.push('Missing format_version');\n  } else if (typeof data.format_version !== 'string') {\n    errors.push('format_version must be a string');\n  }\n\n  // Check minecraft:entity\n  if (!data['minecraft:entity']) {\n    errors.push('Missing minecraft:entity object');\n    return { isValid: false, errors };\n  }\n\n  const entity = data['minecraft:entity'];\n\n  // Check description\n  if (!entity.description) {\n    errors.push('Missing entity description');\n  } else {\n    if (!entity.description.identifier) {\n      errors.push('Missing entity identifier');\n    } else if (typeof entity.description.identifier !== 'string') {\n      errors.push('Entity identifier must be a string');\n    } else if (!entity.description.identifier.includes(':')) {\n      warnings.push('Entity identifier should include namespace (e.g., \"my_addon:entity_name\")');\n    }\n  }\n\n  // Check components\n  if (!entity.components) {\n    warnings.push('Entity has no components - it may not function properly');\n  } else {\n    // Check for common required components\n    if (!entity.components['minecraft:health']) {\n      warnings.push('Consider adding minecraft:health component');\n    }\n    if (!entity.components['minecraft:physics']) {\n      warnings.push('Consider adding minecraft:physics component for proper physics simulation');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n\nexport function validateBlockJSON(data: any): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!data.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  if (!data['minecraft:block']) {\n    errors.push('Missing minecraft:block object');\n    return { isValid: false, errors };\n  }\n\n  const block = data['minecraft:block'];\n\n  if (!block.description?.identifier) {\n    errors.push('Missing block identifier');\n  } else if (!block.description.identifier.includes(':')) {\n    warnings.push('Block identifier should include namespace');\n  }\n\n  if (!block.components) {\n    warnings.push('Block has no components');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n\nexport function validateItemJSON(data: any): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!data.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  if (!data['minecraft:item']) {\n    errors.push('Missing minecraft:item object');\n    return { isValid: false, errors };\n  }\n\n  const item = data['minecraft:item'];\n\n  if (!item.description?.identifier) {\n    errors.push('Missing item identifier');\n  } else if (!item.description.identifier.includes(':')) {\n    warnings.push('Item identifier should include namespace');\n  }\n\n  if (!item.components) {\n    warnings.push('Item has no components');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n\nexport function validateRecipeJSON(data: any): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!data.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  const isShapedRecipe = data['minecraft:recipe_shaped'];\n  const isShapelessRecipe = data['minecraft:recipe_shapeless'];\n\n  if (!isShapedRecipe && !isShapelessRecipe) {\n    errors.push('Missing recipe type (minecraft:recipe_shaped or minecraft:recipe_shapeless)');\n    return { isValid: false, errors };\n  }\n\n  const recipe = isShapedRecipe || isShapelessRecipe;\n\n  if (!recipe.description?.identifier) {\n    errors.push('Missing recipe identifier');\n  }\n\n  if (isShapedRecipe) {\n    if (!recipe.pattern) {\n      errors.push('Shaped recipe missing pattern');\n    }\n    if (!recipe.key) {\n      errors.push('Shaped recipe missing key');\n    }\n  }\n\n  if (!recipe.result) {\n    errors.push('Recipe missing result');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n\nexport function validateLootTableJSON(data: any): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!data.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  if (!data.pools || !Array.isArray(data.pools)) {\n    errors.push('Missing or invalid pools array');\n    return { isValid: false, errors };\n  }\n\n  data.pools.forEach((pool: any, index: number) => {\n    if (!pool.rolls) {\n      errors.push(`Pool ${index + 1} missing rolls`);\n    }\n    if (!pool.entries || !Array.isArray(pool.entries)) {\n      errors.push(`Pool ${index + 1} missing or invalid entries`);\n    }\n  });\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n\nexport function validateClientEntityJSON(data: any): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!data.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  if (!data['minecraft:client_entity']) {\n    errors.push('Missing minecraft:client_entity object');\n    return { isValid: false, errors };\n  }\n\n  const clientEntity = data['minecraft:client_entity'];\n\n  if (!clientEntity.description?.identifier) {\n    errors.push('Missing client entity identifier');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n\nexport function validateSpawnRuleJSON(data: any): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!data.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  if (!data['minecraft:spawn_rules']) {\n    errors.push('Missing minecraft:spawn_rules object');\n    return { isValid: false, errors };\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n\nexport function validateBiomeJSON(data: any): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!data.format_version) {\n    errors.push('Missing format_version');\n  }\n\n  if (!data['minecraft:biome']) {\n    errors.push('Missing minecraft:biome object');\n    return { isValid: false, errors };\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n\nfunction validateGenericJSON(data: any): ValidationResult {\n  const warnings: string[] = [];\n  \n  if (!data.format_version) {\n    warnings.push('Consider adding format_version for better compatibility');\n  }\n\n  return {\n    isValid: true,\n    warnings: warnings.length > 0 ? warnings : undefined\n  };\n}\n","size_bytes":8904},"scripts/generate-registry.ts":{"content":"#!/usr/bin/env tsx\n\n/**\n * Script to generate Minecraft API registry from the definitions file\n */\n\nimport { parseMinecraftApi } from '../server/parse-minecraft-api.js';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nasync function main() {\n  console.log('🚀 Starting Minecraft API registry generation...');\n  \n  const sourceFile = path.join(__dirname, '../attached_assets/all minecraft script info_1758169723748.txt');\n  \n  if (!fs.existsSync(sourceFile)) {\n    console.error(`❌ Source file not found: ${sourceFile}`);\n    process.exit(1);\n  }\n\n  console.log(`📄 Processing source file: ${sourceFile}`);\n  console.log(`📊 File size: ${fs.statSync(sourceFile).size} bytes`);\n\n  try {\n    // Parse the API definitions\n    console.log('⚙️  Parsing API definitions...');\n    const { registry, searchIndex } = await parseMinecraftApi(sourceFile);\n    \n    console.log('📈 Parse Results:');\n    console.log(`  - Total elements: ${registry.metadata.totalElements}`);\n    console.log(`  - Modules: ${registry.metadata.modules.join(', ')}`);\n    \n    // Log counts by type\n    const typeCounts: Record<string, number> = {};\n    Object.values(registry.index).forEach(element => {\n      typeCounts[element.type] = (typeCounts[element.type] || 0) + 1;\n    });\n    \n    console.log('  - Element counts by type:');\n    Object.entries(typeCounts).forEach(([type, count]) => {\n      console.log(`    ${type}: ${count}`);\n    });\n\n    // Generate registry data file\n    console.log('💾 Generating registry data...');\n    const registryContent = `/**\n * Generated Minecraft Script API Registry\n * Generated on: ${new Date().toISOString()}\n * Source: all minecraft script info_1758169723748.txt\n * Total Elements: ${registry.metadata.totalElements}\n */\n\nimport { ScriptRegistry } from './scriptRegistry';\n\nexport const minecraftRegistry: ScriptRegistry = ${JSON.stringify(registry, null, 2)};\n\nexport default minecraftRegistry;\n`;\n\n    const registryPath = path.join(__dirname, '../shared/minecraftRegistry.ts');\n    fs.writeFileSync(registryPath, registryContent);\n    console.log(`✅ Registry data saved to: ${registryPath}`);\n\n    // Generate searchable index JSON\n    console.log('🔍 Generating search index...');\n    const indexPath = path.join(__dirname, '../shared/scriptIndex.json');\n    fs.writeFileSync(indexPath, JSON.stringify(searchIndex, null, 2));\n    console.log(`✅ Search index saved to: ${indexPath}`);\n\n    // Generate summary report\n    console.log('📋 Generating summary report...');\n    const summary = {\n      generatedAt: new Date().toISOString(),\n      sourceFile: 'all minecraft script info_1758169723748.txt',\n      totalElements: registry.metadata.totalElements,\n      modules: registry.metadata.modules.map(module => ({\n        name: module,\n        elementCount: Object.values(registry.index).filter(el => el.module === module).length,\n        types: Object.entries(typeCounts).map(([type, count]) => ({\n          type,\n          count: Object.values(registry.index).filter(el => el.module === module && el.type === type).length\n        })).filter(item => item.count > 0)\n      })),\n      elementsByType: Object.entries(typeCounts).map(([type, count]) => ({ type, count })),\n      categories: Object.entries(registry.categories).map(([category, ids]) => ({\n        category,\n        count: ids.length\n      })),\n      tags: Object.entries(registry.tags).map(([tag, ids]) => ({\n        tag,\n        count: ids.length\n      }))\n    };\n\n    const summaryPath = path.join(__dirname, '../shared/registrySummary.json');\n    fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2));\n    console.log(`✅ Summary report saved to: ${summaryPath}`);\n\n    console.log('🎉 Registry generation completed successfully!');\n    console.log('\\nGenerated files:');\n    console.log(`  - ${registryPath}`);\n    console.log(`  - ${indexPath}`);  \n    console.log(`  - ${summaryPath}`);\n    \n    // Validate completeness\n    console.log('\\n🔍 Validating completeness...');\n    const sourceContent = fs.readFileSync(sourceFile, 'utf-8');\n    const sourceLines = sourceContent.split('\\n').length;\n    \n    console.log(`Source file lines: ${sourceLines}`);\n    console.log(`Parsed elements: ${registry.metadata.totalElements}`);\n    \n    // Quick validation checks\n    const enumCount = sourceContent.match(/^export enum /gm)?.length || 0;\n    const classCount = sourceContent.match(/^export class /gm)?.length || 0;\n    const interfaceCount = sourceContent.match(/^export interface /gm)?.length || 0;\n    const functionCount = sourceContent.match(/^export function /gm)?.length || 0;\n    \n    console.log('Expected vs Parsed:');\n    console.log(`  - Enums: ${enumCount} expected, ${typeCounts.enum || 0} parsed`);\n    console.log(`  - Classes: ${classCount} expected, ${typeCounts.class || 0} parsed`);\n    console.log(`  - Interfaces: ${interfaceCount} expected, ${typeCounts.interface || 0} parsed`);\n    console.log(`  - Functions: ${functionCount} expected, ${typeCounts.function || 0} parsed`);\n\n    const coverage = Math.round(((typeCounts.enum || 0) + (typeCounts.class || 0) + (typeCounts.interface || 0) + (typeCounts.function || 0)) / (enumCount + classCount + interfaceCount + functionCount) * 100);\n    console.log(`\\n📊 Estimated coverage: ${coverage}%`);\n\n  } catch (error) {\n    console.error('❌ Error generating registry:', error);\n    process.exit(1);\n  }\n}\n\nmain().catch(console.error);","size_bytes":5573},"server/parse-minecraft-api.ts":{"content":"/**\n * Comprehensive Minecraft API Parser\n * Parses TypeScript definitions and generates registry data\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { \n  ApiElement, \n  ApiElementType, \n  MinecraftModule, \n  ScriptRegistry, \n  ModuleRegistry,\n  ApiMethod,\n  ApiParameter,\n  ApiProperty,\n  ApiEnumValue,\n  CodeExample,\n  SearchIndex,\n  SearchableElement\n} from '../shared/scriptRegistry';\n\ninterface ParseContext {\n  module: MinecraftModule;\n  currentClass?: string;\n  currentInterface?: string;\n  currentEnum?: string;\n  inComment: boolean;\n  commentBuffer: string[];\n  lineNumber: number;\n}\n\nexport class MinecraftApiParser {\n  private elements: ApiElement[] = [];\n  private modules: Set<MinecraftModule> = new Set();\n  private context: ParseContext = {\n    module: '@minecraft/server',\n    inComment: false,\n    commentBuffer: [],\n    lineNumber: 0\n  };\n\n  async parseFile(filePath: string): Promise<ScriptRegistry> {\n    const content = fs.readFileSync(filePath, 'utf-8');\n    const lines = content.split('\\n');\n    \n    console.log(`Parsing ${lines.length} lines from ${filePath}`);\n    \n    // Reset parser state\n    this.elements = [];\n    this.modules = new Set();\n    this.context = {\n      module: '@minecraft/server',\n      inComment: false,\n      commentBuffer: [],\n      lineNumber: 0\n    };\n\n    // Parse line by line\n    for (let i = 0; i < lines.length; i++) {\n      this.context.lineNumber = i + 1;\n      await this.parseLine(lines[i], lines, i);\n    }\n\n    console.log(`Parsed ${this.elements.length} API elements from ${this.modules.size} modules`);\n\n    // Generate registry\n    return this.generateRegistry();\n  }\n\n  private async parseLine(line: string, allLines: string[], index: number): Promise<void> {\n    const trimmed = line.trim();\n\n    // Handle module detection\n    this.detectModule(trimmed);\n\n    // Handle JSDoc comments\n    if (this.handleComments(trimmed)) {\n      return;\n    }\n\n    // Parse different types of exports\n    if (trimmed.startsWith('export enum ')) {\n      await this.parseEnum(trimmed, allLines, index);\n    } else if (trimmed.startsWith('export class ')) {\n      await this.parseClass(trimmed, allLines, index);\n    } else if (trimmed.startsWith('export interface ')) {\n      await this.parseInterface(trimmed, allLines, index);\n    } else if (trimmed.startsWith('export function ')) {\n      await this.parseFunction(trimmed, allLines, index);\n    } else if (trimmed.startsWith('export type ')) {\n      await this.parseType(trimmed, allLines, index);\n    } else if (trimmed.startsWith('export declare ')) {\n      await this.parseDeclaration(trimmed, allLines, index);\n    }\n  }\n\n  private detectModule(line: string): void {\n    if (line.includes('\"module_name\": \"@minecraft/server\"')) {\n      this.context.module = '@minecraft/server';\n    } else if (line.includes('\"module_name\": \"@minecraft/server-admin\"')) {\n      this.context.module = '@minecraft/server-admin';\n    } else if (line.includes('\"module_name\": \"@minecraft/server-net\"')) {\n      this.context.module = '@minecraft/server-net';\n    } else if (line.includes('\"module_name\": \"@minecraft/server-ui\"')) {\n      this.context.module = '@minecraft/server-ui';\n    }\n    \n    this.modules.add(this.context.module);\n  }\n\n  private handleComments(line: string): boolean {\n    if (line.startsWith('/**')) {\n      this.context.inComment = true;\n      this.context.commentBuffer = [line];\n      return true;\n    } else if (line.startsWith('*') && this.context.inComment) {\n      this.context.commentBuffer.push(line);\n      return true;\n    } else if (line.startsWith('*/') && this.context.inComment) {\n      this.context.commentBuffer.push(line);\n      this.context.inComment = false;\n      return true;\n    }\n    \n    if (!this.context.inComment && this.context.commentBuffer.length > 0) {\n      // Comment block ended, keep buffer for next element\n      return false;\n    }\n    \n    return this.context.inComment;\n  }\n\n  private async parseEnum(line: string, allLines: string[], startIndex: number): Promise<void> {\n    const enumMatch = line.match(/export enum (\\w+)/);\n    if (!enumMatch) return;\n\n    const enumName = enumMatch[1];\n    let i = startIndex + 1;\n    const enumValues: ApiEnumValue[] = [];\n    let definition = line;\n\n    // Parse enum body\n    while (i < allLines.length) {\n      const currentLine = allLines[i].trim();\n      definition += '\\n' + allLines[i];\n\n      if (currentLine === '}') {\n        break;\n      }\n\n      // Parse enum values\n      const valueMatch = currentLine.match(/(\\w+)\\s*=\\s*([^,]+),?/);\n      if (valueMatch) {\n        const [, name, value] = valueMatch;\n        const description = this.extractEnumValueDescription(allLines, i);\n        \n        enumValues.push({\n          name,\n          value: this.cleanValue(value),\n          description\n        });\n      }\n\n      i++;\n    }\n\n    const element: ApiElement = {\n      id: `${this.context.module}.${enumName}`,\n      name: enumName,\n      type: 'enum',\n      module: this.context.module,\n      description: this.extractDescription(),\n      definition,\n      jsdoc: this.getJSDocString(),\n      enumValues,\n      categories: ['Enums', this.getCategoryFromModule()],\n      tags: this.extractTags(),\n      keywords: [enumName.toLowerCase(), 'enum'],\n      stability: this.extractStability()\n    };\n\n    this.elements.push(element);\n    this.clearCommentBuffer();\n  }\n\n  private async parseClass(line: string, allLines: string[], startIndex: number): Promise<void> {\n    const classMatch = line.match(/export class (\\w+)(?:\\s+extends\\s+(\\w+))?(?:\\s+implements\\s+([^{]+))?/);\n    if (!classMatch) return;\n\n    const [, className, extendsClass, implementsInterfaces] = classMatch;\n    let i = startIndex + 1;\n    let braceCount = 1; // Start with 1 for opening brace\n    const properties: ApiProperty[] = [];\n    const methods: ApiMethod[] = [];\n    let definition = line;\n\n    while (i < allLines.length && braceCount > 0) {\n      const currentLine = allLines[i];\n      definition += '\\n' + currentLine;\n      \n      // Track braces\n      braceCount += (currentLine.match(/\\{/g) || []).length;\n      braceCount -= (currentLine.match(/\\}/g) || []).length;\n\n      const trimmed = currentLine.trim();\n\n      // Parse properties and methods\n      if (trimmed.includes('readonly ') || trimmed.includes(': ') || trimmed.includes('?:')) {\n        const property = this.parseProperty(currentLine, allLines, i);\n        if (property) properties.push(property);\n      } else if (trimmed.includes('(') && (trimmed.includes('):') || trimmed.includes('): '))) {\n        const method = await this.parseMethod(currentLine, allLines, i);\n        if (method) methods.push(method);\n      }\n\n      i++;\n    }\n\n    const element: ApiElement = {\n      id: `${this.context.module}.${className}`,\n      name: className,\n      type: 'class',\n      module: this.context.module,\n      description: this.extractDescription(),\n      definition,\n      jsdoc: this.getJSDocString(),\n      properties,\n      methods,\n      extends: extendsClass,\n      implements: implementsInterfaces?.split(',').map(s => s.trim()),\n      categories: ['Classes', this.getCategoryFromModule()],\n      tags: this.extractTags(),\n      keywords: [className.toLowerCase(), 'class'],\n      examples: this.extractExamples(),\n      stability: this.extractStability()\n    };\n\n    this.elements.push(element);\n    this.clearCommentBuffer();\n  }\n\n  private async parseInterface(line: string, allLines: string[], startIndex: number): Promise<void> {\n    const interfaceMatch = line.match(/export interface (\\w+)(?:\\s+extends\\s+([^{]+))?/);\n    if (!interfaceMatch) return;\n\n    const [, interfaceName, extendsInterfaces] = interfaceMatch;\n    let i = startIndex + 1;\n    let braceCount = 1;\n    const properties: ApiProperty[] = [];\n    let definition = line;\n\n    while (i < allLines.length && braceCount > 0) {\n      const currentLine = allLines[i];\n      definition += '\\n' + currentLine;\n      \n      braceCount += (currentLine.match(/\\{/g) || []).length;\n      braceCount -= (currentLine.match(/\\}/g) || []).length;\n\n      const property = this.parseProperty(currentLine, allLines, i);\n      if (property) properties.push(property);\n\n      i++;\n    }\n\n    const element: ApiElement = {\n      id: `${this.context.module}.${interfaceName}`,\n      name: interfaceName,\n      type: 'interface',\n      module: this.context.module,\n      description: this.extractDescription(),\n      definition,\n      jsdoc: this.getJSDocString(),\n      properties,\n      extends: extendsInterfaces,\n      categories: ['Interfaces', this.getCategoryFromModule()],\n      tags: this.extractTags(),\n      keywords: [interfaceName.toLowerCase(), 'interface'],\n      stability: this.extractStability()\n    };\n\n    this.elements.push(element);\n    this.clearCommentBuffer();\n  }\n\n  private async parseFunction(line: string, allLines: string[], startIndex: number): Promise<void> {\n    const functionMatch = line.match(/export function (\\w+)\\s*\\([^)]*\\):\\s*([^;{]+)/);\n    if (!functionMatch) return;\n\n    const [, functionName, returnType] = functionMatch;\n    const parameters = this.parseParameters(line);\n    \n    const element: ApiElement = {\n      id: `${this.context.module}.${functionName}`,\n      name: functionName,\n      type: 'function',\n      module: this.context.module,\n      description: this.extractDescription(),\n      definition: line,\n      jsdoc: this.getJSDocString(),\n      parameters,\n      returnType: returnType.trim(),\n      categories: ['Functions', this.getCategoryFromModule()],\n      tags: this.extractTags(),\n      keywords: [functionName.toLowerCase(), 'function'],\n      stability: this.extractStability()\n    };\n\n    this.elements.push(element);\n    this.clearCommentBuffer();\n  }\n\n  private async parseType(line: string, allLines: string[], startIndex: number): Promise<void> {\n    const typeMatch = line.match(/export type (\\w+)\\s*=\\s*(.+);?/);\n    if (!typeMatch) return;\n\n    const [, typeName, typeDefinition] = typeMatch;\n    \n    const element: ApiElement = {\n      id: `${this.context.module}.${typeName}`,\n      name: typeName,\n      type: 'type',\n      module: this.context.module,\n      description: this.extractDescription(),\n      definition: line,\n      jsdoc: this.getJSDocString(),\n      typeDefinition: typeDefinition.trim(),\n      categories: ['Types', this.getCategoryFromModule()],\n      tags: this.extractTags(),\n      keywords: [typeName.toLowerCase(), 'type'],\n      stability: this.extractStability()\n    };\n\n    this.elements.push(element);\n    this.clearCommentBuffer();\n  }\n\n  private async parseDeclaration(line: string, allLines: string[], startIndex: number): Promise<void> {\n    // Handle declare statements\n    const constMatch = line.match(/export declare const (\\w+):\\s*(.+);/);\n    if (constMatch) {\n      const [, constName, constType] = constMatch;\n      \n      const element: ApiElement = {\n        id: `${this.context.module}.${constName}`,\n        name: constName,\n        type: 'constant',\n        module: this.context.module,\n        description: this.extractDescription(),\n        definition: line,\n        jsdoc: this.getJSDocString(),\n        typeDefinition: constType.trim(),\n        categories: ['Constants', this.getCategoryFromModule()],\n        tags: this.extractTags(),\n        keywords: [constName.toLowerCase(), 'constant'],\n        stability: this.extractStability()\n      };\n\n      this.elements.push(element);\n      this.clearCommentBuffer();\n    }\n  }\n\n  private parseProperty(line: string, allLines: string[], index: number): ApiProperty | null {\n    const trimmed = line.trim();\n    \n    // Skip comments, method signatures, and braces\n    if (trimmed.startsWith('//') || trimmed.startsWith('*') || \n        trimmed.includes('(') || trimmed === '{' || trimmed === '}' ||\n        trimmed.startsWith('private') || trimmed.startsWith('protected')) {\n      return null;\n    }\n\n    const propertyMatch = trimmed.match(/(readonly\\s+)?(static\\s+)?(\\w+)(\\?)?:\\s*([^;]+);?/);\n    if (!propertyMatch) return null;\n\n    const [, readonly, isStatic, name, optional, type] = propertyMatch;\n    \n    // Look for property description in preceding comments\n    let description = '';\n    for (let i = index - 1; i >= 0; i--) {\n      const prevLine = allLines[i].trim();\n      if (prevLine.startsWith('* @remarks')) {\n        // Found remarks, collect description\n        let j = i + 1;\n        const descParts = [];\n        while (j < allLines.length) {\n          const descLine = allLines[j].trim();\n          if (descLine.startsWith('*') && !descLine.startsWith('* @')) {\n            descParts.push(descLine.replace(/^\\*\\s?/, ''));\n          } else {\n            break;\n          }\n          j++;\n        }\n        description = descParts.join(' ').trim();\n        break;\n      }\n      if (!prevLine.startsWith('*') && !prevLine.startsWith('/**')) {\n        break;\n      }\n    }\n\n    return {\n      name,\n      type: type.trim(),\n      description: description || undefined,\n      readonly: !!readonly,\n      optional: !!optional,\n      isStatic: !!isStatic,\n      accessibility: 'public'\n    };\n  }\n\n  private async parseMethod(line: string, allLines: string[], index: number): Promise<ApiMethod | null> {\n    const trimmed = line.trim();\n    \n    // Skip constructors and special methods\n    if (trimmed.includes('constructor') || trimmed.startsWith('private') || \n        trimmed.startsWith('[Symbol.') || trimmed === '{' || trimmed === '}') {\n      return null;\n    }\n\n    const methodMatch = trimmed.match(/(static\\s+)?(\\w+)\\s*\\(([^)]*)\\):\\s*([^;{]+)[;{]?/);\n    if (!methodMatch) return null;\n\n    const [, isStatic, methodName, paramStr, returnType] = methodMatch;\n    const parameters = this.parseParameters(`(${paramStr})`);\n    \n    // Look for method description in preceding comments\n    let description = '';\n    let jsdocTags: string[] = [];\n    \n    for (let i = index - 1; i >= 0; i--) {\n      const prevLine = allLines[i].trim();\n      if (prevLine.startsWith('* @remarks')) {\n        // Collect description and tags\n        let j = i + 1;\n        const descParts = [];\n        while (j < allLines.length) {\n          const descLine = allLines[j].trim();\n          if (descLine.startsWith('* @')) {\n            jsdocTags.push(descLine.replace(/^\\*\\s?/, ''));\n          } else if (descLine.startsWith('*') && !descLine.startsWith('* @')) {\n            descParts.push(descLine.replace(/^\\*\\s?/, ''));\n          } else {\n            break;\n          }\n          j++;\n        }\n        description = descParts.join(' ').trim();\n        break;\n      }\n      if (!prevLine.startsWith('*') && !prevLine.startsWith('/**')) {\n        break;\n      }\n    }\n\n    return {\n      name: methodName,\n      description: description || undefined,\n      parameters,\n      returnType: returnType.trim(),\n      isStatic: !!isStatic,\n      accessibility: 'public',\n      signature: `${methodName}(${paramStr}): ${returnType.trim()}`,\n      tags: jsdocTags\n    };\n  }\n\n  private parseParameters(paramStr: string): ApiParameter[] {\n    const parameters: ApiParameter[] = [];\n    \n    // Extract parameter string from parentheses\n    const match = paramStr.match(/\\(([^)]*)\\)/);\n    if (!match || !match[1].trim()) return parameters;\n    \n    const paramText = match[1];\n    const params = this.splitParameters(paramText);\n    \n    for (const param of params) {\n      const paramMatch = param.trim().match(/(\\w+)(\\?)?:\\s*([^=]+)(?:\\s*=\\s*(.+))?/);\n      if (paramMatch) {\n        const [, name, optional, type, defaultValue] = paramMatch;\n        parameters.push({\n          name,\n          type: type.trim(),\n          optional: !!optional || !!defaultValue,\n          defaultValue: defaultValue?.trim()\n        });\n      }\n    }\n    \n    return parameters;\n  }\n\n  private splitParameters(paramStr: string): string[] {\n    const params: string[] = [];\n    let current = '';\n    let parenCount = 0;\n    let bracketCount = 0;\n    \n    for (const char of paramStr) {\n      if (char === '(' || char === '<') parenCount++;\n      if (char === ')' || char === '>') parenCount--;\n      if (char === '[') bracketCount++;\n      if (char === ']') bracketCount--;\n      \n      if (char === ',' && parenCount === 0 && bracketCount === 0) {\n        params.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    if (current.trim()) {\n      params.push(current.trim());\n    }\n    \n    return params;\n  }\n\n  private extractEnumValueDescription(allLines: string[], index: number): string | undefined {\n    // Look for description in preceding comment\n    for (let i = index - 1; i >= 0; i--) {\n      const prevLine = allLines[i].trim();\n      if (prevLine.startsWith('* @remarks')) {\n        let j = i + 1;\n        const descParts = [];\n        while (j < allLines.length) {\n          const descLine = allLines[j].trim();\n          if (descLine.startsWith('*') && !descLine.startsWith('* @')) {\n            descParts.push(descLine.replace(/^\\*\\s?/, ''));\n          } else {\n            break;\n          }\n          j++;\n        }\n        return descParts.join(' ').trim() || undefined;\n      }\n      if (!prevLine.startsWith('*') && !prevLine.startsWith('/**')) {\n        break;\n      }\n    }\n    return undefined;\n  }\n\n  private extractDescription(): string | undefined {\n    const jsdoc = this.context.commentBuffer.join('\\n');\n    const remarksMatch = jsdoc.match(/\\*\\s*@remarks\\s*([\\s\\S]*?)(?:\\*\\s*@|\\*\\/|$)/);\n    if (remarksMatch) {\n      return remarksMatch[1]\n        .split('\\n')\n        .map(line => line.replace(/^\\s*\\*\\s?/, ''))\n        .join(' ')\n        .trim() || undefined;\n    }\n\n    // Fallback to general description\n    const lines = this.context.commentBuffer\n      .filter(line => !line.includes('@') && line.includes('*'))\n      .map(line => line.replace(/^\\s*\\*+\\s?/, ''))\n      .filter(line => line.trim())\n      .join(' ')\n      .trim();\n\n    return lines || undefined;\n  }\n\n  private extractExamples(): CodeExample[] {\n    const examples: CodeExample[] = [];\n    const jsdoc = this.context.commentBuffer.join('\\n');\n    \n    // Look for @example tags\n    const exampleMatches = jsdoc.matchAll(/\\*\\s*@example\\s+(\\S+)\\s*\\n\\s*\\*\\s*```(\\w+)\\s*\\n([\\s\\S]*?)\\n\\s*\\*\\s*```/g);\n    \n    for (const match of exampleMatches) {\n      const [, title, language, code] = match;\n      if (language === 'typescript' || language === 'ts' || language === 'javascript' || language === 'js') {\n        examples.push({\n          title: title || 'Example',\n          code: code\n            .split('\\n')\n            .map(line => line.replace(/^\\s*\\*\\s?/, ''))\n            .join('\\n')\n            .trim(),\n          imports: this.extractImportsFromCode(code)\n        });\n      }\n    }\n    \n    return examples;\n  }\n\n  private extractImportsFromCode(code: string): string[] {\n    const imports: string[] = [];\n    const lines = code.split('\\n');\n    \n    for (const line of lines) {\n      const importMatch = line.match(/import\\s+.*from\\s+[\"']([^\"']+)[\"']/);\n      if (importMatch) {\n        imports.push(importMatch[1]);\n      }\n    }\n    \n    return imports;\n  }\n\n  private extractTags(): string[] {\n    const tags: string[] = [];\n    const jsdoc = this.context.commentBuffer.join('\\n');\n    \n    if (jsdoc.includes('@preview')) tags.push('preview');\n    if (jsdoc.includes('@deprecated')) tags.push('deprecated');\n    if (jsdoc.includes('@experimental')) tags.push('experimental');\n    if (jsdoc.includes('@beta')) tags.push('beta');\n    if (jsdoc.includes('read-only mode')) tags.push('readonly-restricted');\n    \n    return tags;\n  }\n\n  private extractStability(): 'stable' | 'experimental' | 'deprecated' {\n    const jsdoc = this.context.commentBuffer.join('\\n');\n    \n    if (jsdoc.includes('@deprecated')) return 'deprecated';\n    if (jsdoc.includes('@preview') || jsdoc.includes('@experimental') || jsdoc.includes('@beta')) {\n      return 'experimental';\n    }\n    \n    return 'stable';\n  }\n\n  private getCategoryFromModule(): string {\n    switch (this.context.module) {\n      case '@minecraft/server': return 'Server';\n      case '@minecraft/server-admin': return 'Admin';\n      case '@minecraft/server-net': return 'Networking';\n      case '@minecraft/server-ui': return 'UI';\n      default: return 'General';\n    }\n  }\n\n  private getJSDocString(): string | undefined {\n    if (this.context.commentBuffer.length === 0) return undefined;\n    return this.context.commentBuffer.join('\\n');\n  }\n\n  private cleanValue(value: string): string | number {\n    const cleaned = value.replace(/[,;]/g, '').trim();\n    \n    // Try to parse as number\n    const num = parseInt(cleaned);\n    if (!isNaN(num)) return num;\n    \n    // Return as string without quotes\n    return cleaned.replace(/^['\"]|['\"]$/g, '');\n  }\n\n  private clearCommentBuffer(): void {\n    this.context.commentBuffer = [];\n  }\n\n  private generateRegistry(): ScriptRegistry {\n    // Group elements by module\n    const moduleMap: Record<MinecraftModule, ModuleRegistry> = {} as any;\n    \n    for (const module of this.modules) {\n      const moduleElements = this.elements.filter(el => el.module === module);\n      \n      moduleMap[module] = {\n        module,\n        version: this.getModuleVersion(module),\n        description: this.getModuleDescription(module),\n        elements: moduleElements,\n        exports: {\n          enums: moduleElements.filter(el => el.type === 'enum'),\n          classes: moduleElements.filter(el => el.type === 'class'),\n          interfaces: moduleElements.filter(el => el.type === 'interface'),\n          functions: moduleElements.filter(el => el.type === 'function'),\n          types: moduleElements.filter(el => el.type === 'type'),\n          constants: moduleElements.filter(el => el.type === 'constant'),\n          events: moduleElements.filter(el => el.type === 'event')\n        }\n      };\n    }\n\n    // Create global index\n    const index: Record<string, ApiElement> = {};\n    for (const element of this.elements) {\n      index[element.id] = element;\n    }\n\n    // Create categories and tags indices\n    const categories: Record<string, string[]> = {};\n    const tags: Record<string, string[]> = {};\n    \n    for (const element of this.elements) {\n      // Categories\n      for (const category of element.categories) {\n        if (!categories[category]) categories[category] = [];\n        categories[category].push(element.id);\n      }\n      \n      // Tags  \n      for (const tag of element.tags) {\n        if (!tags[tag]) tags[tag] = [];\n        tags[tag].push(element.id);\n      }\n    }\n\n    return {\n      metadata: {\n        generatedAt: new Date().toISOString(),\n        sourceFile: 'all minecraft script info_1758169723748.txt',\n        totalElements: this.elements.length,\n        modules: Array.from(this.modules),\n        parserVersion: '1.0.0'\n      },\n      modules: moduleMap,\n      index,\n      categories,\n      tags\n    };\n  }\n\n  private getModuleVersion(module: MinecraftModule): string {\n    // These would typically be extracted from the file, using defaults for now\n    switch (module) {\n      case '@minecraft/server': return '2.2.0';\n      case '@minecraft/server-admin': return '1.0.0';\n      case '@minecraft/server-net': return '1.0.0'; \n      case '@minecraft/server-ui': return '1.2.0';\n      default: return '1.0.0';\n    }\n  }\n\n  private getModuleDescription(module: MinecraftModule): string {\n    switch (module) {\n      case '@minecraft/server': \n        return 'Contains many types related to manipulating a Minecraft world, including entities, blocks, dimensions, and more.';\n      case '@minecraft/server-admin':\n        return 'Contains types for managing server administrative functions.';\n      case '@minecraft/server-net':\n        return 'Contains types for networking functionality.';\n      case '@minecraft/server-ui':\n        return 'Contains types for creating and managing user interface forms.';\n      default: \n        return 'Minecraft scripting module.';\n    }\n  }\n\n  generateSearchIndex(registry: ScriptRegistry): SearchIndex {\n    const elements: SearchableElement[] = [];\n    const categories: Record<string, number> = {};\n    const tags: Record<string, number> = {};\n    const modules: Record<MinecraftModule, number> = {} as any;\n    const types: Record<ApiElementType, number> = {} as any;\n\n    for (const element of Object.values(registry.index)) {\n      // Add to searchable elements\n      elements.push({\n        id: element.id,\n        name: element.name,\n        type: element.type,\n        module: element.module,\n        description: element.description,\n        categories: element.categories,\n        tags: element.tags,\n        keywords: element.keywords,\n        signature: element.methods?.[0]?.signature || element.typeDefinition,\n        deprecated: element.deprecated,\n        experimental: element.experimental\n      });\n\n      // Count categories\n      for (const category of element.categories) {\n        categories[category] = (categories[category] || 0) + 1;\n      }\n\n      // Count tags\n      for (const tag of element.tags) {\n        tags[tag] = (tags[tag] || 0) + 1;\n      }\n\n      // Count modules\n      modules[element.module] = (modules[element.module] || 0) + 1;\n\n      // Count types\n      types[element.type] = (types[element.type] || 0) + 1;\n    }\n\n    return {\n      elements,\n      categories,\n      tags,\n      modules,\n      types\n    };\n  }\n}\n\n// Export for use in other files\nexport async function parseMinecraftApi(sourceFile: string): Promise<{\n  registry: ScriptRegistry;\n  searchIndex: SearchIndex;\n}> {\n  const parser = new MinecraftApiParser();\n  const registry = await parser.parseFile(sourceFile);\n  const searchIndex = parser.generateSearchIndex(registry);\n  \n  return { registry, searchIndex };\n}","size_bytes":25743},"shared/bedrockSchemas.ts":{"content":"import { z } from 'zod';\nimport { \n  EntityComponentSchema, \n  entityComponents, \n  generateEntityComponentJSON,\n  entityCategories \n} from './entityRegistry';\nimport { \n  BlockComponentSchema, \n  blockComponents, \n  generateBlockComponentJSON,\n  generateBlockJSON,\n  blockCategories \n} from './blockRegistry';\nimport { \n  ItemComponentSchema, \n  itemComponents, \n  generateItemComponentJSON,\n  generateItemJSON,\n  itemCategories \n} from './itemRegistry';\nimport { \n  RecipeType, \n  LootFunction, \n  BiomeComponent, \n  SpawnRuleComponent,\n  recipeTypes,\n  lootFunctions,\n  biomeComponents,\n  spawnRuleComponents,\n  generateRecipeJSON,\n  generateLootTableJSON,\n  generateBiomeJSON,\n  generateSpawnRulesJSON,\n  gameplayCategories\n} from './gameplayRegistry';\n\n// =============================================================================\n// UNIFIED BEDROCK COMPONENT SCHEMAS\n// =============================================================================\n\n// Base schemas for all component types\nexport const BaseComponentSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  category: z.string(),\n  subcategory: z.string().optional(),\n  version: z.string(),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']),\n  keywords: z.array(z.string()),\n  stability: z.enum(['stable', 'experimental', 'beta']),\n  dependencies: z.array(z.string()).optional(),\n  conflicts: z.array(z.string()).optional(),\n});\n\n// Complete addon manifest schema\nexport const AddonManifestSchema = z.object({\n  format_version: z.number().default(2),\n  header: z.object({\n    name: z.string(),\n    description: z.string(),\n    uuid: z.string().uuid(),\n    version: z.array(z.number()).length(3),\n    min_engine_version: z.array(z.number()).length(3)\n  }),\n  modules: z.array(z.object({\n    description: z.string(),\n    type: z.enum(['data', 'resources', 'client_data', 'javascript']),\n    uuid: z.string().uuid(),\n    version: z.array(z.number()).length(3)\n  })),\n  dependencies: z.array(z.object({\n    description: z.string().optional(),\n    uuid: z.string().uuid(),\n    version: z.array(z.number()).length(3)\n  })).optional(),\n  capabilities: z.array(z.string()).optional(),\n  metadata: z.object({\n    authors: z.array(z.string()).optional(),\n    license: z.string().optional(),\n    url: z.string().url().optional()\n  }).optional()\n});\n\n// Entity definition schema\nexport const EntityDefinitionSchema = z.object({\n  format_version: z.string().default(\"1.21.0\"),\n  \"minecraft:entity\": z.object({\n    description: z.object({\n      identifier: z.string(),\n      is_spawnable: z.boolean().default(true),\n      is_summonable: z.boolean().default(true),\n      is_experimental: z.boolean().default(false),\n      runtime_identifier: z.string().optional(),\n      scripts: z.object({\n        animate: z.array(z.string()).optional()\n      }).optional()\n    }),\n    component_groups: z.record(z.object({}).passthrough()).default({}),\n    components: z.record(z.any()),\n    events: z.record(z.object({\n      randomize: z.array(z.object({\n        weight: z.number(),\n        add: z.object({\n          component_groups: z.array(z.string())\n        }).optional(),\n        remove: z.object({\n          component_groups: z.array(z.string())\n        }).optional()\n      })).optional(),\n      sequence: z.array(z.object({\n        filters: z.any().optional(),\n        add: z.object({\n          component_groups: z.array(z.string())\n        }).optional(),\n        remove: z.object({\n          component_groups: z.array(z.string())\n        }).optional(),\n        trigger: z.string().optional()\n      })).optional(),\n      add: z.object({\n        component_groups: z.array(z.string())\n      }).optional(),\n      remove: z.object({\n        component_groups: z.array(z.string())\n      }).optional(),\n      trigger: z.string().optional()\n    }).passthrough()).default({})\n  })\n});\n\n// Block definition schema\nexport const BlockDefinitionSchema = z.object({\n  format_version: z.string().default(\"1.21.0\"),\n  \"minecraft:block\": z.object({\n    description: z.object({\n      identifier: z.string(),\n      menu_category: z.object({\n        category: z.string(),\n        group: z.string().optional(),\n        is_hidden_in_commands: z.boolean().optional()\n      }).optional(),\n      traits: z.record(z.any()).optional()\n    }),\n    components: z.record(z.any()),\n    permutations: z.array(z.object({\n      condition: z.string(),\n      components: z.record(z.any())\n    })).default([])\n  })\n});\n\n// Item definition schema\nexport const ItemDefinitionSchema = z.object({\n  format_version: z.string().default(\"1.21.0\"),\n  \"minecraft:item\": z.object({\n    description: z.object({\n      identifier: z.string(),\n      menu_category: z.object({\n        category: z.string(),\n        group: z.string().optional(),\n        is_hidden_in_commands: z.boolean().optional()\n      }).optional()\n    }),\n    components: z.record(z.any())\n  })\n});\n\n// Recipe schemas\nexport const ShapedRecipeSchema = z.object({\n  format_version: z.string().default(\"1.21.0\"),\n  \"minecraft:recipe_shaped\": z.object({\n    description: z.object({\n      identifier: z.string()\n    }),\n    tags: z.array(z.string()).default([\"crafting_table\"]),\n    pattern: z.array(z.string()).min(1).max(3),\n    key: z.record(z.object({\n      item: z.string(),\n      data: z.number().optional(),\n      count: z.number().optional()\n    })),\n    result: z.object({\n      item: z.string(),\n      count: z.number().default(1),\n      data: z.number().optional()\n    }),\n    group: z.string().optional(),\n    priority: z.number().optional()\n  })\n});\n\nexport const ShapelessRecipeSchema = z.object({\n  format_version: z.string().default(\"1.21.0\"),\n  \"minecraft:recipe_shapeless\": z.object({\n    description: z.object({\n      identifier: z.string()\n    }),\n    tags: z.array(z.string()).default([\"crafting_table\"]),\n    ingredients: z.array(z.object({\n      item: z.string(),\n      data: z.number().optional(),\n      count: z.number().optional()\n    })).min(1).max(9),\n    result: z.object({\n      item: z.string(),\n      count: z.number().default(1),\n      data: z.number().optional()\n    }),\n    group: z.string().optional(),\n    priority: z.number().optional()\n  })\n});\n\n// Loot table schema\nexport const LootTableSchema = z.object({\n  format_version: z.string().default(\"1.21.0\"),\n  pools: z.array(z.object({\n    rolls: z.union([\n      z.number(),\n      z.object({\n        min: z.number(),\n        max: z.number()\n      })\n    ]),\n    bonus_rolls: z.union([\n      z.number(),\n      z.object({\n        min: z.number(),\n        max: z.number()\n      })\n    ]).optional(),\n    conditions: z.array(z.object({\n      condition: z.string()\n    }).passthrough()).optional(),\n    entries: z.array(z.object({\n      type: z.enum(['item', 'loot_table', 'empty']),\n      name: z.string().optional(),\n      weight: z.number().default(1),\n      quality: z.number().default(0),\n      functions: z.array(z.object({\n        function: z.string()\n      }).passthrough()).optional(),\n      conditions: z.array(z.object({\n        condition: z.string()\n      }).passthrough()).optional()\n    }))\n  }))\n});\n\n// Biome definition schema\nexport const BiomeDefinitionSchema = z.object({\n  format_version: z.string().default(\"1.21.0\"),\n  \"minecraft:biome\": z.object({\n    description: z.object({\n      identifier: z.string()\n    }),\n    components: z.record(z.any())\n  })\n});\n\n// Spawn rules schema\nexport const SpawnRulesSchema = z.object({\n  format_version: z.string().default(\"1.21.0\"),\n  \"minecraft:spawn_rules\": z.object({\n    description: z.object({\n      identifier: z.string(),\n      population_control: z.string().optional()\n    }),\n    conditions: z.array(z.record(z.any()))\n  })\n});\n\n// =============================================================================\n// COMPONENT VALIDATION FUNCTIONS\n// =============================================================================\n\nexport function validateEntityComponent(componentName: string, componentData: any): { valid: boolean; errors: string[] } {\n  const component = entityComponents.find(c => c.name === componentName);\n  if (!component) {\n    return { valid: false, errors: [`Unknown entity component: ${componentName}`] };\n  }\n\n  const errors: string[] = [];\n  \n  // Validate required properties\n  const requiredProps = component.properties.filter(p => p.required);\n  for (const prop of requiredProps) {\n    if (!(prop.name in componentData)) {\n      errors.push(`Missing required property: ${prop.name}`);\n    }\n  }\n\n  // Validate property types and ranges\n  for (const [key, value] of Object.entries(componentData)) {\n    const propDef = component.properties.find(p => p.name === key);\n    if (!propDef) continue;\n\n    // Type validation\n    switch (propDef.type) {\n      case 'number':\n        if (typeof value !== 'number') {\n          errors.push(`Property ${key} must be a number`);\n        } else {\n          if (propDef.min !== undefined && value < propDef.min) {\n            errors.push(`Property ${key} must be >= ${propDef.min}`);\n          }\n          if (propDef.max !== undefined && value > propDef.max) {\n            errors.push(`Property ${key} must be <= ${propDef.max}`);\n          }\n        }\n        break;\n      case 'boolean':\n        if (typeof value !== 'boolean') {\n          errors.push(`Property ${key} must be a boolean`);\n        }\n        break;\n      case 'string':\n        if (typeof value !== 'string') {\n          errors.push(`Property ${key} must be a string`);\n        } else if (propDef.options && !propDef.options.includes(value)) {\n          errors.push(`Property ${key} must be one of: ${propDef.options.join(', ')}`);\n        }\n        break;\n    }\n  }\n\n  return { valid: errors.length === 0, errors };\n}\n\nexport function validateBlockComponent(componentName: string, componentData: any): { valid: boolean; errors: string[] } {\n  const component = blockComponents.find(c => c.name === componentName);\n  if (!component) {\n    return { valid: false, errors: [`Unknown block component: ${componentName}`] };\n  }\n\n  // Similar validation logic as entity components\n  const errors: string[] = [];\n  const requiredProps = component.properties.filter(p => p.required);\n  \n  for (const prop of requiredProps) {\n    if (!(prop.name in componentData)) {\n      errors.push(`Missing required property: ${prop.name}`);\n    }\n  }\n\n  return { valid: errors.length === 0, errors };\n}\n\nexport function validateItemComponent(componentName: string, componentData: any): { valid: boolean; errors: string[] } {\n  const component = itemComponents.find(c => c.name === componentName);\n  if (!component) {\n    return { valid: false, errors: [`Unknown item component: ${componentName}`] };\n  }\n\n  // Similar validation logic as entity components\n  const errors: string[] = [];\n  const requiredProps = component.properties.filter(p => p.required);\n  \n  for (const prop of requiredProps) {\n    if (!(prop.name in componentData)) {\n      errors.push(`Missing required property: ${prop.name}`);\n    }\n  }\n\n  return { valid: errors.length === 0, errors };\n}\n\n// =============================================================================\n// TEMPLATE GENERATORS\n// =============================================================================\n\nexport interface AddonConfig {\n  name: string;\n  description: string;\n  author: string;\n  version: string;\n  minEngineVersion: string;\n  packType: 'behavior' | 'resource';\n}\n\nexport function generateAddonManifest(config: AddonConfig): object {\n  const [major, minor, patch] = config.version.split('.').map(v => parseInt(v) || 0);\n  const [engineMajor, engineMinor, enginePatch] = config.minEngineVersion.split('.').map(v => parseInt(v) || 1);\n\n  return AddonManifestSchema.parse({\n    format_version: 2,\n    header: {\n      name: config.name,\n      description: config.description,\n      uuid: generateUUID(),\n      version: [major, minor, patch],\n      min_engine_version: [engineMajor, engineMinor, enginePatch]\n    },\n    modules: [\n      {\n        description: `${config.packType === 'behavior' ? 'Behavior' : 'Resource'} Pack Module`,\n        type: config.packType === 'behavior' ? 'data' : 'resources',\n        uuid: generateUUID(),\n        version: [major, minor, patch]\n      }\n    ]\n  });\n}\n\nexport function generateCompleteEntity(\n  identifier: string,\n  selectedComponents: Array<{ name: string; properties: Record<string, any> }>,\n  componentGroups?: Record<string, string[]>,\n  events?: Record<string, any>\n): object {\n  const componentObj: Record<string, any> = {};\n  \n  selectedComponents.forEach(component => {\n    componentObj[component.name] = component.properties;\n  });\n\n  return EntityDefinitionSchema.parse({\n    format_version: \"1.21.0\",\n    \"minecraft:entity\": {\n      description: {\n        identifier: identifier,\n        is_spawnable: true,\n        is_summonable: true,\n        is_experimental: false\n      },\n      component_groups: componentGroups || {},\n      components: componentObj,\n      events: events || {}\n    }\n  });\n}\n\nexport function generateCompleteBlock(\n  identifier: string,\n  selectedComponents: Array<{ name: string; properties: Record<string, any> }>,\n  permutations?: Array<{ condition: string; components: Record<string, any> }>\n): object {\n  const componentObj: Record<string, any> = {};\n  \n  selectedComponents.forEach(component => {\n    componentObj[component.name] = component.properties;\n  });\n\n  return BlockDefinitionSchema.parse({\n    format_version: \"1.21.0\",\n    \"minecraft:block\": {\n      description: {\n        identifier: identifier,\n        menu_category: {\n          category: \"construction\"\n        }\n      },\n      components: componentObj,\n      permutations: permutations || []\n    }\n  });\n}\n\nexport function generateCompleteItem(\n  identifier: string,\n  selectedComponents: Array<{ name: string; properties: Record<string, any> }>\n): object {\n  const componentObj: Record<string, any> = {};\n  \n  selectedComponents.forEach(component => {\n    componentObj[component.name] = component.properties;\n  });\n\n  return ItemDefinitionSchema.parse({\n    format_version: \"1.21.0\",\n    \"minecraft:item\": {\n      description: {\n        identifier: identifier,\n        menu_category: {\n          category: \"items\"\n        }\n      },\n      components: componentObj\n    }\n  });\n}\n\n// =============================================================================\n// COMPONENT COMPATIBILITY CHECKER\n// =============================================================================\n\nexport function checkComponentCompatibility(components: string[]): {\n  compatible: boolean;\n  conflicts: Array<{ component1: string; component2: string; reason: string }>;\n  warnings: string[];\n  suggestions: string[];\n} {\n  const conflicts: Array<{ component1: string; component2: string; reason: string }> = [];\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n\n  // Check for explicit conflicts\n  for (let i = 0; i < components.length; i++) {\n    for (let j = i + 1; j < components.length; j++) {\n      const comp1 = entityComponents.find(c => c.name === components[i]) ||\n                   blockComponents.find(c => c.name === components[i]) ||\n                   itemComponents.find(c => c.name === components[i]);\n      \n      if (comp1?.conflicts?.includes(components[j])) {\n        conflicts.push({\n          component1: components[i],\n          component2: components[j],\n          reason: 'Explicit conflict defined'\n        });\n      }\n    }\n  }\n\n  // Check missing dependencies\n  for (const componentName of components) {\n    const comp = entityComponents.find(c => c.name === componentName) ||\n                 blockComponents.find(c => c.name === componentName) ||\n                 itemComponents.find(c => c.name === componentName);\n    \n    if (comp?.dependencies) {\n      for (const dep of comp.dependencies) {\n        if (!components.includes(dep)) {\n          warnings.push(`Component ${componentName} requires ${dep} but it's not included`);\n          suggestions.push(`Add ${dep} component`);\n        }\n      }\n    }\n  }\n\n  // Logical compatibility checks\n  const hasMovement = components.some(c => c.includes('movement'));\n  const hasNavigation = components.some(c => c.includes('navigation'));\n  const hasPhysics = components.includes('minecraft:physics');\n\n  if (hasMovement && !hasPhysics) {\n    warnings.push('Movement components work best with minecraft:physics');\n    suggestions.push('Add minecraft:physics component');\n  }\n\n  if (hasNavigation && !hasMovement) {\n    warnings.push('Navigation components require movement components');\n    suggestions.push('Add a movement component');\n  }\n\n  return {\n    compatible: conflicts.length === 0,\n    conflicts,\n    warnings,\n    suggestions\n  };\n}\n\n// Utility functions\nfunction generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n// Export all schemas for external use\nexport const BedrockSchemas = {\n  AddonManifest: AddonManifestSchema,\n  EntityDefinition: EntityDefinitionSchema,\n  BlockDefinition: BlockDefinitionSchema,\n  ItemDefinition: ItemDefinitionSchema,\n  ShapedRecipe: ShapedRecipeSchema,\n  ShapelessRecipe: ShapelessRecipeSchema,\n  LootTable: LootTableSchema,\n  BiomeDefinition: BiomeDefinitionSchema,\n  SpawnRules: SpawnRulesSchema,\n  EntityComponent: EntityComponentSchema,\n  BlockComponent: BlockComponentSchema,\n  ItemComponent: ItemComponentSchema\n};\n\n// Export validation functions\nexport const BedrockValidators = {\n  validateEntityComponent,\n  validateBlockComponent,\n  validateItemComponent,\n  checkComponentCompatibility\n};\n\n// Export template generators\nexport const BedrockTemplates = {\n  generateAddonManifest,\n  generateCompleteEntity,\n  generateCompleteBlock,\n  generateCompleteItem,\n  generateRecipeJSON,\n  generateLootTableJSON,\n  generateBiomeJSON,\n  generateSpawnRulesJSON\n};","size_bytes":17915},"shared/blockRegistry.ts":{"content":"import { z } from 'zod';\n\n// Base component interface\nexport interface BlockComponentProperty {\n  name: string;\n  type: 'number' | 'boolean' | 'string' | 'array' | 'object' | 'range' | 'vector3' | 'material';\n  description: string;\n  required?: boolean;\n  default?: any;\n  min?: number;\n  max?: number;\n  options?: string[];\n  example?: any;\n}\n\nexport interface BlockComponent {\n  name: string;\n  description: string;\n  category: string;\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: BlockComponentProperty[];\n  example: string;\n  documentation?: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n  dependencies?: string[];\n  conflicts?: string[];\n}\n\n// Zod schemas for validation\nexport const BlockComponentPropertySchema = z.object({\n  name: z.string(),\n  type: z.enum(['number', 'boolean', 'string', 'array', 'object', 'range', 'vector3', 'material']),\n  description: z.string(),\n  required: z.boolean().optional(),\n  default: z.any().optional(),\n  min: z.number().optional(),\n  max: z.number().optional(),\n  options: z.array(z.string()).optional(),\n  example: z.any().optional(),\n});\n\nexport const BlockComponentSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  category: z.string(),\n  subcategory: z.string().optional(),\n  version: z.string(),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']),\n  properties: z.array(BlockComponentPropertySchema),\n  example: z.string(),\n  documentation: z.string().optional(),\n  keywords: z.array(z.string()),\n  stability: z.enum(['stable', 'experimental', 'beta']),\n  dependencies: z.array(z.string()).optional(),\n  conflicts: z.array(z.string()).optional(),\n});\n\n// Comprehensive Block Components Registry\nexport const blockComponents: BlockComponent[] = [\n  // =============================================================================\n  // CORE DESTRUCTIBILITY COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:destructible_by_mining',\n    description: 'Controls how the block can be destroyed by mining tools.',\n    category: 'Core',\n    subcategory: 'Destructibility',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'seconds_to_destroy', type: 'number', description: 'Time to destroy with bare hands', default: 0, min: 0, max: 3600, example: 1.5 }\n    ],\n    example: `{\n  \"minecraft:destructible_by_mining\": {\n    \"seconds_to_destroy\": 1.5\n  }\n}`,\n    keywords: ['destructible', 'mining', 'hardness', 'break', 'destroy'],\n    stability: 'stable',\n    documentation: 'https://docs.microsoft.com/en-us/minecraft/creator/reference/content/blockreference/examples/blockcomponents/minecraftdestructiblebymining'\n  },\n\n  {\n    name: 'minecraft:destructible_by_explosion',\n    description: 'Controls how the block behaves when exposed to explosions.',\n    category: 'Core',\n    subcategory: 'Destructibility',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'explosion_resistance', type: 'number', description: 'Resistance to explosions', default: 0, min: 0, max: 1200, example: 6.0 }\n    ],\n    example: `{\n  \"minecraft:destructible_by_explosion\": {\n    \"explosion_resistance\": 6.0\n  }\n}`,\n    keywords: ['destructible', 'explosion', 'resistance', 'blast', 'TNT'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // MATERIAL & VISUAL COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:material_instances',\n    description: 'Defines materials and textures for each face of the block.',\n    category: 'Visual',\n    subcategory: 'Materials',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: '*', type: 'object', description: 'Default material for all faces', example: { texture: 'stone', render_method: 'opaque' } },\n      { name: 'up', type: 'object', description: 'Material for top face', example: { texture: 'grass_top', render_method: 'opaque' } },\n      { name: 'down', type: 'object', description: 'Material for bottom face', example: { texture: 'dirt', render_method: 'opaque' } },\n      { name: 'north', type: 'object', description: 'Material for north face', example: { texture: 'log_side', render_method: 'opaque' } },\n      { name: 'south', type: 'object', description: 'Material for south face', example: { texture: 'log_side', render_method: 'opaque' } },\n      { name: 'east', type: 'object', description: 'Material for east face', example: { texture: 'log_side', render_method: 'opaque' } },\n      { name: 'west', type: 'object', description: 'Material for west face', example: { texture: 'log_side', render_method: 'opaque' } }\n    ],\n    example: `{\n  \"minecraft:material_instances\": {\n    \"*\": {\n      \"texture\": \"my_block\",\n      \"render_method\": \"opaque\"\n    },\n    \"up\": {\n      \"texture\": \"my_block_top\",\n      \"render_method\": \"opaque\"\n    },\n    \"down\": {\n      \"texture\": \"my_block_bottom\", \n      \"render_method\": \"opaque\"\n    }\n  }\n}`,\n    keywords: ['material', 'texture', 'faces', 'render', 'appearance'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:geometry',\n    description: 'Defines custom geometry for the block using a model file.',\n    category: 'Visual',\n    subcategory: 'Geometry',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'identifier', type: 'string', description: 'Geometry model identifier', required: true, example: 'geometry.my_custom_block' },\n      { name: 'bone_visibility', type: 'object', description: 'Controls bone visibility', example: {} }\n    ],\n    example: `{\n  \"minecraft:geometry\": {\n    \"identifier\": \"geometry.my_custom_block\",\n    \"bone_visibility\": {\n      \"bone_name\": \"q.block_state('my_state') == 0\"\n    }\n  }\n}`,\n    keywords: ['geometry', 'model', 'custom', 'shape', '3d'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:unit_cube',\n    description: 'Makes the block use the default unit cube shape.',\n    category: 'Visual',\n    subcategory: 'Geometry',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [],\n    example: `{\n  \"minecraft:unit_cube\": {}\n}`,\n    keywords: ['unit', 'cube', 'default', 'shape', 'standard'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:crafting_table',\n    description: 'Makes the block function as a crafting table.',\n    category: 'Visual',\n    subcategory: 'Geometry',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'custom_description', type: 'string', description: 'Custom description for the crafting interface', example: 'My Custom Workbench' },\n      { name: 'grid_size', type: 'number', description: 'Size of the crafting grid', default: 3, min: 1, max: 9, example: 3 }\n    ],\n    example: `{\n  \"minecraft:crafting_table\": {\n    \"custom_description\": \"My Custom Workbench\",\n    \"grid_size\": 3\n  }\n}`,\n    keywords: ['crafting', 'table', 'workbench', 'interface'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // COLLISION & PHYSICS COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:collision_box',\n    description: 'Defines the collision boundaries of the block.',\n    category: 'Physics',\n    subcategory: 'Collision',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'origin', type: 'vector3', description: 'Origin point of collision box', default: [-8, 0, -8], example: [-8, 0, -8] },\n      { name: 'size', type: 'vector3', description: 'Size of collision box', default: [16, 16, 16], example: [16, 14, 16] }\n    ],\n    example: `{\n  \"minecraft:collision_box\": {\n    \"origin\": [-8, 0, -8],\n    \"size\": [16, 14, 16]\n  }\n}`,\n    keywords: ['collision', 'box', 'hitbox', 'physics', 'boundaries'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:selection_box',\n    description: 'Defines the selection box for player interaction.',\n    category: 'Physics',\n    subcategory: 'Selection',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'origin', type: 'vector3', description: 'Origin point of selection box', default: [-8, 0, -8], example: [-8, 0, -8] },\n      { name: 'size', type: 'vector3', description: 'Size of selection box', default: [16, 16, 16], example: [16, 14, 16] }\n    ],\n    example: `{\n  \"minecraft:selection_box\": {\n    \"origin\": [-8, 0, -8],\n    \"size\": [16, 14, 16]\n  }\n}`,\n    keywords: ['selection', 'box', 'outline', 'highlight', 'interaction'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:friction',\n    description: 'Controls the friction coefficient of the block surface.',\n    category: 'Physics',\n    subcategory: 'Movement',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'value', type: 'number', description: 'Friction value (0=slippery, 1=normal)', default: 0.6, min: 0, max: 1, example: 0.1 }\n    ],\n    example: `{\n  \"minecraft:friction\": {\n    \"value\": 0.1\n  }\n}`,\n    keywords: ['friction', 'slippery', 'ice', 'slide', 'movement'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // LIGHTING COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:light_emission',\n    description: 'Makes the block emit light.',\n    category: 'Lighting',\n    subcategory: 'Emission',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'emission', type: 'number', description: 'Light level emitted (0-15)', required: true, min: 0, max: 15, example: 10 }\n    ],\n    example: `{\n  \"minecraft:light_emission\": {\n    \"emission\": 10\n  }\n}`,\n    keywords: ['light', 'emission', 'glow', 'brightness', 'illuminate'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:light_dampening',\n    description: 'Controls how much light the block dampens.',\n    category: 'Lighting',\n    subcategory: 'Absorption',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'lightLevel', type: 'number', description: 'Light dampening amount (0-15)', default: 15, min: 0, max: 15, example: 2 }\n    ],\n    example: `{\n  \"minecraft:light_dampening\": {\n    \"lightLevel\": 2\n  }\n}`,\n    keywords: ['light', 'dampening', 'absorption', 'shadow', 'opacity'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // ENVIRONMENTAL COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:flammable',\n    description: 'Makes the block flammable and defines fire spread behavior.',\n    category: 'Environment',\n    subcategory: 'Fire',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'catch_chance_modifier', type: 'number', description: 'Chance modifier for catching fire', default: 5, min: 0, max: 300, example: 15 },\n      { name: 'destroy_chance_modifier', type: 'number', description: 'Chance modifier for being destroyed by fire', default: 20, min: 0, max: 300, example: 60 }\n    ],\n    example: `{\n  \"minecraft:flammable\": {\n    \"catch_chance_modifier\": 15,\n    \"destroy_chance_modifier\": 60\n  }\n}`,\n    keywords: ['flammable', 'fire', 'burn', 'combustible', 'flame'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:breathability',\n    description: 'Controls how the block affects breathing and mob spawning.',\n    category: 'Environment',\n    subcategory: 'Air',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'breathability', type: 'string', description: 'Breathability type', required: true, options: ['solid', 'air'], example: 'air' }\n    ],\n    example: `{\n  \"minecraft:breathability\": {\n    \"breathability\": \"air\"\n  }\n}`,\n    keywords: ['breathability', 'air', 'spawning', 'suffocation', 'oxygen'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // INTERACTION COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:display_name',\n    description: 'Sets a custom display name for the block.',\n    category: 'Interaction',\n    subcategory: 'Identity',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'string', description: 'Display name to show', required: true, example: 'My Custom Block' }\n    ],\n    example: `{\n  \"minecraft:display_name\": {\n    \"value\": \"My Custom Block\"\n  }\n}`,\n    keywords: ['display', 'name', 'title', 'label', 'identity'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:creative_category',\n    description: 'Defines which creative inventory tab the block appears in.',\n    category: 'Interaction',\n    subcategory: 'Inventory',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'category', type: 'string', description: 'Creative category', required: true, options: ['building', 'decoration', 'redstone', 'transportation', 'miscellaneous', 'search', 'survival', 'equipment', 'items', 'nature', 'construction'], example: 'building' },\n      { name: 'group', type: 'string', description: 'Group within category', example: 'itemGroup.name.planks' }\n    ],\n    example: `{\n  \"minecraft:creative_category\": {\n    \"category\": \"building\",\n    \"group\": \"itemGroup.name.planks\"\n  }\n}`,\n    keywords: ['creative', 'category', 'inventory', 'tab', 'group'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:map_color',\n    description: 'Defines the color shown on maps.',\n    category: 'Interaction',\n    subcategory: 'Visual',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'color', type: 'string', description: 'Map color as hex code', required: true, example: '#FF0000' }\n    ],\n    example: `{\n  \"minecraft:map_color\": {\n    \"color\": \"#FF0000\"\n  }\n}`,\n    keywords: ['map', 'color', 'navigation', 'display'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // TRANSFORMATION & TICKING\n  // =============================================================================\n  {\n    name: 'minecraft:transformation',\n    description: 'Allows the block to transform under specific conditions.',\n    category: 'Transformation',\n    subcategory: 'State',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'transform', type: 'object', description: 'Transformation rules', required: true, example: { block: 'minecraft:stone', conditions: [] } }\n    ],\n    example: `{\n  \"minecraft:transformation\": {\n    \"transform\": {\n      \"block\": \"minecraft:stone\",\n      \"conditions\": [\n        {\n          \"test\": \"has_biome_tag\",\n          \"value\": \"cold\"\n        }\n      ]\n    }\n  }\n}`,\n    keywords: ['transformation', 'change', 'morph', 'convert', 'conditions'],\n    stability: 'experimental'\n  },\n\n  {\n    name: 'minecraft:queued_ticking',\n    description: 'Enables queued ticking for the block.',\n    category: 'Transformation',\n    subcategory: 'Timing',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'looping', type: 'boolean', description: 'Whether ticking loops', default: true, example: false },\n      { name: 'interval_range', type: 'range', description: 'Tick interval range in seconds', required: true, example: [10, 20] },\n      { name: 'on_tick', type: 'object', description: 'Event to trigger on tick', required: true, example: { event: 'my_block:on_tick' } }\n    ],\n    example: `{\n  \"minecraft:queued_ticking\": {\n    \"looping\": true,\n    \"interval_range\": [10, 20],\n    \"on_tick\": {\n      \"event\": \"my_block:on_tick\",\n      \"target\": \"self\"\n    }\n  }\n}`,\n    keywords: ['queued', 'ticking', 'timer', 'interval', 'schedule'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:random_ticking',\n    description: 'Enables random ticking for the block like grass or crops.',\n    category: 'Transformation',\n    subcategory: 'Timing',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'on_tick', type: 'object', description: 'Event to trigger on random tick', required: true, example: { event: 'my_block:random_tick' } }\n    ],\n    example: `{\n  \"minecraft:random_ticking\": {\n    \"on_tick\": {\n      \"event\": \"my_block:random_tick\",\n      \"target\": \"self\"\n    }\n  }\n}`,\n    keywords: ['random', 'ticking', 'growth', 'crops', 'natural'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // REDSTONE COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:redstone_conductivity',\n    description: 'Controls how the block conducts redstone signals.',\n    category: 'Redstone',\n    subcategory: 'Conductivity',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'redstone_conductor', type: 'boolean', description: 'Whether block conducts redstone', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:redstone_conductivity\": {\n    \"redstone_conductor\": true\n  }\n}`,\n    keywords: ['redstone', 'conductivity', 'signal', 'power', 'electrical'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // PLACEMENT RESTRICTIONS\n  // =============================================================================\n  {\n    name: 'minecraft:placement_filter',\n    description: 'Controls where the block can be placed.',\n    category: 'Placement',\n    subcategory: 'Restrictions',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'conditions', type: 'array', description: 'Placement conditions', required: true, example: [{ allowed_faces: ['up'], block_filter: [{ tags: '!query.any_tag(\\'stone\\')' }] }] }\n    ],\n    example: `{\n  \"minecraft:placement_filter\": {\n    \"conditions\": [\n      {\n        \"allowed_faces\": [\"up\"],\n        \"block_filter\": [\n          {\n            \"tags\": \"!query.any_tag('stone')\"\n          }\n        ]\n      }\n    ]\n  }\n}`,\n    keywords: ['placement', 'filter', 'restrictions', 'conditions', 'rules'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // LOOT COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:loot',\n    description: 'Defines what items drop when the block is destroyed.',\n    category: 'Loot',\n    subcategory: 'Drops',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'table', type: 'string', description: 'Loot table path', required: true, example: 'loot_tables/blocks/my_block.json' }\n    ],\n    example: `{\n  \"minecraft:loot\": {\n    \"table\": \"loot_tables/blocks/my_block.json\"\n  }\n}`,\n    keywords: ['loot', 'drops', 'items', 'rewards', 'harvest'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // BLOCK STATES\n  // =============================================================================\n  {\n    name: 'minecraft:block_state',\n    description: 'Defines custom block states for the block.',\n    category: 'States',\n    subcategory: 'Properties',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'states', type: 'object', description: 'Block state definitions', required: true, example: { 'my_state': [0, 1, 2], 'my_bool_state': [true, false] } }\n    ],\n    example: `{\n  \"minecraft:block_state\": {\n    \"states\": {\n      \"my_int_state\": [0, 1, 2, 3],\n      \"my_bool_state\": [true, false],\n      \"my_string_state\": [\"red\", \"green\", \"blue\"]\n    }\n  }\n}`,\n    keywords: ['block', 'state', 'properties', 'variants', 'values'],\n    stability: 'stable'\n  }\n];\n\n// Block state definitions\nexport interface BlockState {\n  name: string;\n  type: 'int' | 'bool' | 'string';\n  values: any[];\n  description: string;\n  example: any;\n}\n\nexport const commonBlockStates: BlockState[] = [\n  { name: 'age', type: 'int', values: [0, 1, 2, 3, 4, 5, 6, 7], description: 'Growth stage for crops', example: 3 },\n  { name: 'facing_direction', type: 'int', values: [0, 1, 2, 3, 4, 5], description: 'Direction block is facing', example: 2 },\n  { name: 'open_bit', type: 'bool', values: [true, false], description: 'Whether block is open (doors, gates)', example: true },\n  { name: 'powered_bit', type: 'bool', values: [true, false], description: 'Whether block is powered by redstone', example: false },\n  { name: 'color', type: 'string', values: ['white', 'orange', 'magenta', 'light_blue', 'yellow', 'lime', 'pink', 'gray', 'light_gray', 'cyan', 'purple', 'blue', 'brown', 'green', 'red', 'black'], description: 'Block color variant', example: 'red' },\n  { name: 'wood_type', type: 'string', values: ['oak', 'spruce', 'birch', 'jungle', 'acacia', 'dark_oak', 'mangrove', 'cherry'], description: 'Wood type variant', example: 'oak' },\n  { name: 'stone_type', type: 'string', values: ['stone', 'granite', 'diorite', 'andesite'], description: 'Stone type variant', example: 'granite' },\n  { name: 'moisture', type: 'int', values: [0, 1, 2, 3, 4, 5, 6, 7], description: 'Farmland moisture level', example: 4 },\n  { name: 'upper_block_bit', type: 'bool', values: [true, false], description: 'Whether this is the upper part of a double block', example: false },\n  { name: 'occupied_bit', type: 'bool', values: [true, false], description: 'Whether bed is occupied', example: false }\n];\n\n// Category definitions\nexport const blockCategories = {\n  'Core': {\n    name: 'Core Components',\n    description: 'Essential components defining basic block properties',\n    icon: 'brick.png',\n    subcategories: ['Destructibility', 'Identity']\n  },\n  'Visual': {\n    name: 'Visual & Geometry',\n    description: 'Components controlling block appearance and shape',\n    icon: 'brush.png',\n    subcategories: ['Materials', 'Geometry', 'Appearance']\n  },\n  'Physics': {\n    name: 'Physics & Collision',\n    description: 'Components controlling physical properties and collision',\n    icon: 'nether_star.png',\n    subcategories: ['Collision', 'Selection', 'Movement']\n  },\n  'Lighting': {\n    name: 'Lighting',\n    description: 'Components controlling light emission and absorption',\n    icon: 'glowstone_dust.png',\n    subcategories: ['Emission', 'Absorption']\n  },\n  'Environment': {\n    name: 'Environmental',\n    description: 'Components for environmental interactions',\n    icon: 'grass.png',\n    subcategories: ['Fire', 'Air', 'Weather']\n  },\n  'Interaction': {\n    name: 'Player Interaction',\n    description: 'Components for player interaction and UI',\n    icon: 'golden_carrot.png',\n    subcategories: ['Identity', 'Inventory', 'Visual', 'Interface']\n  },\n  'Transformation': {\n    name: 'Transformation & Timing',\n    description: 'Components for block state changes and ticking',\n    icon: 'clock_item.png',\n    subcategories: ['State', 'Timing']\n  },\n  'Redstone': {\n    name: 'Redstone',\n    description: 'Components for redstone interactions',\n    icon: 'redstone_dust.png',\n    subcategories: ['Conductivity', 'Power']\n  },\n  'Placement': {\n    name: 'Placement',\n    description: 'Components controlling block placement rules',\n    icon: 'compass_item.png',\n    subcategories: ['Restrictions', 'Conditions']\n  },\n  'Loot': {\n    name: 'Loot & Drops',\n    description: 'Components controlling item drops',\n    icon: 'diamond.png',\n    subcategories: ['Drops', 'Harvest']\n  },\n  'States': {\n    name: 'Block States',\n    description: 'Components for block state definitions',\n    icon: 'comparator.png',\n    subcategories: ['Properties', 'Variants']\n  }\n};\n\n// Material types for material_instances\nexport const materialTypes = {\n  render_methods: ['opaque', 'alpha_test', 'blend', 'double_sided'],\n  face_dimming: [true, false],\n  ambient_occlusion: [true, false]\n};\n\n// Search functionality\nexport function searchBlockComponents(query: string, filters?: {\n  category?: string;\n  difficulty?: string;\n  stability?: string;\n}): BlockComponent[] {\n  const lowercaseQuery = query.toLowerCase();\n  \n  return blockComponents.filter(component => {\n    // Text search\n    const matchesText = !query || \n      component.name.toLowerCase().includes(lowercaseQuery) ||\n      component.description.toLowerCase().includes(lowercaseQuery) ||\n      component.keywords.some(keyword => keyword.toLowerCase().includes(lowercaseQuery));\n    \n    // Filters\n    const matchesCategory = !filters?.category || component.category === filters.category;\n    const matchesDifficulty = !filters?.difficulty || component.difficulty === filters.difficulty;\n    const matchesStability = !filters?.stability || component.stability === filters.stability;\n    \n    return matchesText && matchesCategory && matchesDifficulty && matchesStability;\n  });\n}\n\n// Get component by name\nexport function getBlockComponent(name: string): BlockComponent | undefined {\n  return blockComponents.find(component => component.name === name);\n}\n\n// Get components by category\nexport function getBlockComponentsByCategory(category: string): BlockComponent[] {\n  return blockComponents.filter(component => component.category === category);\n}\n\n// Template generation helper\nexport function generateBlockComponentJSON(componentName: string, properties: Record<string, any>): object {\n  const component = getBlockComponent(componentName);\n  if (!component) {\n    throw new Error(`Component ${componentName} not found`);\n  }\n\n  return {\n    [componentName]: properties\n  };\n}\n\n// Generate complete block JSON\nexport function generateBlockJSON(identifier: string, components: Array<{ name: string; properties: Record<string, any> }>): object {\n  const componentObj: Record<string, any> = {};\n  \n  components.forEach(component => {\n    componentObj[component.name] = component.properties;\n  });\n\n  return {\n    format_version: \"1.21.0\",\n    \"minecraft:block\": {\n      description: {\n        identifier: identifier,\n        menu_category: {\n          category: \"construction\"\n        }\n      },\n      components: componentObj,\n      permutations: []\n    }\n  };\n}\n\n// Block state validation helpers\nexport function validateBlockState(stateName: string, value: any): boolean {\n  const state = commonBlockStates.find(s => s.name === stateName);\n  if (!state) return false;\n  \n  return state.values.includes(value);\n}\n\n// Export summary statistics\nexport const blockRegistryStats = {\n  totalComponents: blockComponents.length,\n  categoryCounts: Object.keys(blockCategories).reduce((acc, category) => {\n    acc[category] = getBlockComponentsByCategory(category).length;\n    return acc;\n  }, {} as Record<string, number>),\n  difficultyLevels: ['beginner', 'intermediate', 'advanced'].reduce((acc, difficulty) => {\n    acc[difficulty] = blockComponents.filter(c => c.difficulty === difficulty).length;\n    return acc;\n  }, {} as Record<string, number>),\n  stabilityLevels: ['stable', 'experimental', 'beta'].reduce((acc, stability) => {\n    acc[stability] = blockComponents.filter(c => c.stability === stability).length;\n    return acc;\n  }, {} as Record<string, number>),\n  totalBlockStates: commonBlockStates.length\n};","size_bytes":27448},"shared/componentIndex.ts":{"content":"import { \n  entityComponents, \n  entityCategories, \n  searchEntityComponents, \n  getEntityComponentsByCategory,\n  entityRegistryStats,\n  type EntityComponent \n} from './entityRegistry';\nimport { \n  blockComponents, \n  blockCategories, \n  searchBlockComponents, \n  getBlockComponentsByCategory,\n  blockRegistryStats,\n  type BlockComponent \n} from './blockRegistry';\nimport { \n  itemComponents, \n  itemCategories, \n  searchItemComponents, \n  getItemComponentsByCategory,\n  itemRegistryStats,\n  type ItemComponent \n} from './itemRegistry';\nimport { \n  recipeTypes,\n  lootFunctions,\n  biomeComponents,\n  spawnRuleComponents,\n  gameplayCategories,\n  searchGameplayElements,\n  getGameplayElementsByCategory,\n  gameplayRegistryStats,\n  type RecipeType,\n  type LootFunction,\n  type BiomeComponent,\n  type SpawnRuleComponent\n} from './gameplayRegistry';\n\n// =============================================================================\n// UNIFIED COMPONENT TYPES\n// =============================================================================\n\nexport type ComponentType = 'entity' | 'block' | 'item' | 'recipe' | 'loot' | 'biome' | 'spawn';\n\nexport interface UnifiedComponent {\n  id: string;\n  name: string;\n  description: string;\n  type: ComponentType;\n  category: string;\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  stability: 'stable' | 'experimental' | 'beta';\n  keywords: string[];\n  example: string;\n  documentation?: string;\n  dependencies?: string[];\n  conflicts?: string[];\n  properties?: any[];\n}\n\n// =============================================================================\n// UNIFIED SEARCH INTERFACE\n// =============================================================================\n\nexport interface SearchFilters {\n  type?: ComponentType | ComponentType[];\n  category?: string | string[];\n  subcategory?: string | string[];\n  difficulty?: 'beginner' | 'intermediate' | 'advanced' | ('beginner' | 'intermediate' | 'advanced')[];\n  stability?: 'stable' | 'experimental' | 'beta' | ('stable' | 'experimental' | 'beta')[];\n  version?: string;\n  hasDocumentation?: boolean;\n  hasExample?: boolean;\n}\n\nexport interface SearchResult {\n  components: UnifiedComponent[];\n  totalCount: number;\n  facets: {\n    types: Array<{ type: ComponentType; count: number }>;\n    categories: Array<{ category: string; count: number }>;\n    difficulties: Array<{ difficulty: string; count: number }>;\n    stabilities: Array<{ stability: string; count: number }>;\n  };\n  suggestions: string[];\n}\n\n// =============================================================================\n// COMPONENT INDEX CREATION\n// =============================================================================\n\nfunction createUnifiedComponent(\n  component: EntityComponent | BlockComponent | ItemComponent | RecipeType | LootFunction | BiomeComponent | SpawnRuleComponent,\n  type: ComponentType\n): UnifiedComponent {\n  return {\n    id: `${type}:${component.name}`,\n    name: component.name,\n    description: component.description,\n    type,\n    category: component.category,\n    subcategory: component.subcategory,\n    version: component.version,\n    difficulty: component.difficulty,\n    stability: component.stability,\n    keywords: component.keywords,\n    example: component.example,\n    documentation: component.documentation,\n    dependencies: component.dependencies,\n    conflicts: component.conflicts,\n    properties: 'properties' in component ? component.properties : undefined\n  };\n}\n\n// Create unified component index\nconst allUnifiedComponents: UnifiedComponent[] = [\n  ...entityComponents.map(c => createUnifiedComponent(c, 'entity')),\n  ...blockComponents.map(c => createUnifiedComponent(c, 'block')),\n  ...itemComponents.map(c => createUnifiedComponent(c, 'item')),\n  ...recipeTypes.map(c => createUnifiedComponent(c, 'recipe')),\n  ...lootFunctions.map(c => createUnifiedComponent(c, 'loot')),\n  ...biomeComponents.map(c => createUnifiedComponent(c, 'biome')),\n  ...spawnRuleComponents.map(c => createUnifiedComponent(c, 'spawn'))\n];\n\n// =============================================================================\n// UNIFIED SEARCH FUNCTIONS\n// =============================================================================\n\nexport function searchAllComponents(\n  query: string,\n  filters: SearchFilters = {},\n  limit: number = 50,\n  offset: number = 0\n): SearchResult {\n  const lowercaseQuery = query.toLowerCase();\n  \n  // Filter components based on criteria\n  let filteredComponents = allUnifiedComponents.filter(component => {\n    // Text search\n    const matchesText = !query || \n      component.name.toLowerCase().includes(lowercaseQuery) ||\n      component.description.toLowerCase().includes(lowercaseQuery) ||\n      component.keywords.some(keyword => keyword.toLowerCase().includes(lowercaseQuery));\n    \n    if (!matchesText) return false;\n\n    // Type filter\n    if (filters.type) {\n      const types = Array.isArray(filters.type) ? filters.type : [filters.type];\n      if (!types.includes(component.type)) return false;\n    }\n\n    // Category filter\n    if (filters.category) {\n      const categories = Array.isArray(filters.category) ? filters.category : [filters.category];\n      if (!categories.includes(component.category)) return false;\n    }\n\n    // Subcategory filter\n    if (filters.subcategory && component.subcategory) {\n      const subcategories = Array.isArray(filters.subcategory) ? filters.subcategory : [filters.subcategory];\n      if (!subcategories.includes(component.subcategory)) return false;\n    }\n\n    // Difficulty filter\n    if (filters.difficulty) {\n      const difficulties = Array.isArray(filters.difficulty) ? filters.difficulty : [filters.difficulty];\n      if (!difficulties.includes(component.difficulty)) return false;\n    }\n\n    // Stability filter\n    if (filters.stability) {\n      const stabilities = Array.isArray(filters.stability) ? filters.stability : [filters.stability];\n      if (!stabilities.includes(component.stability)) return false;\n    }\n\n    // Documentation filter\n    if (filters.hasDocumentation !== undefined) {\n      const hasDoc = !!component.documentation;\n      if (hasDoc !== filters.hasDocumentation) return false;\n    }\n\n    // Example filter\n    if (filters.hasExample !== undefined) {\n      const hasExample = !!component.example;\n      if (hasExample !== filters.hasExample) return false;\n    }\n\n    return true;\n  });\n\n  // Sort by relevance (exact matches first, then by name)\n  filteredComponents.sort((a, b) => {\n    const aExactMatch = a.name.toLowerCase() === lowercaseQuery;\n    const bExactMatch = b.name.toLowerCase() === lowercaseQuery;\n    \n    if (aExactMatch && !bExactMatch) return -1;\n    if (!aExactMatch && bExactMatch) return 1;\n    \n    return a.name.localeCompare(b.name);\n  });\n\n  const totalCount = filteredComponents.length;\n  const paginatedComponents = filteredComponents.slice(offset, offset + limit);\n\n  // Generate facets\n  const facets = generateFacets(filteredComponents);\n\n  // Generate search suggestions\n  const suggestions = generateSearchSuggestions(query, filteredComponents);\n\n  return {\n    components: paginatedComponents,\n    totalCount,\n    facets,\n    suggestions\n  };\n}\n\nfunction generateFacets(components: UnifiedComponent[]) {\n  const typeCounts = new Map<ComponentType, number>();\n  const categoryCounts = new Map<string, number>();\n  const difficultyCounts = new Map<string, number>();\n  const stabilityCounts = new Map<string, number>();\n\n  components.forEach(component => {\n    typeCounts.set(component.type, (typeCounts.get(component.type) || 0) + 1);\n    categoryCounts.set(component.category, (categoryCounts.get(component.category) || 0) + 1);\n    difficultyCounts.set(component.difficulty, (difficultyCounts.get(component.difficulty) || 0) + 1);\n    stabilityCounts.set(component.stability, (stabilityCounts.get(component.stability) || 0) + 1);\n  });\n\n  return {\n    types: Array.from(typeCounts.entries()).map(([type, count]) => ({ type, count })),\n    categories: Array.from(categoryCounts.entries()).map(([category, count]) => ({ category, count })),\n    difficulties: Array.from(difficultyCounts.entries()).map(([difficulty, count]) => ({ difficulty, count })),\n    stabilities: Array.from(stabilityCounts.entries()).map(([stability, count]) => ({ stability, count }))\n  };\n}\n\nfunction generateSearchSuggestions(query: string, components: UnifiedComponent[]): string[] {\n  if (!query || query.length < 2) return [];\n\n  const suggestions = new Set<string>();\n  const lowercaseQuery = query.toLowerCase();\n\n  // Add component names that partially match\n  components.forEach(component => {\n    if (component.name.toLowerCase().includes(lowercaseQuery)) {\n      suggestions.add(component.name);\n    }\n    \n    // Add keywords that match\n    component.keywords.forEach(keyword => {\n      if (keyword.toLowerCase().includes(lowercaseQuery)) {\n        suggestions.add(keyword);\n      }\n    });\n  });\n\n  // Add category suggestions\n  const allCategories = [...entityCategories, ...blockCategories, ...itemCategories, ...gameplayCategories];\n  Object.keys(allCategories).forEach(category => {\n    if (category.toLowerCase().includes(lowercaseQuery)) {\n      suggestions.add(category);\n    }\n  });\n\n  return Array.from(suggestions).slice(0, 10);\n}\n\n// =============================================================================\n// CATEGORY MANAGEMENT\n// =============================================================================\n\nexport function getAllCategories(): Record<ComponentType, any> {\n  return {\n    entity: entityCategories,\n    block: blockCategories,\n    item: itemCategories,\n    recipe: gameplayCategories,\n    loot: gameplayCategories,\n    biome: gameplayCategories,\n    spawn: gameplayCategories\n  };\n}\n\nexport function getCategoryByType(type: ComponentType): any {\n  const categories = getAllCategories();\n  return categories[type];\n}\n\nexport function getComponentsByTypeAndCategory(type: ComponentType, category: string): UnifiedComponent[] {\n  return allUnifiedComponents.filter(component => \n    component.type === type && component.category === category\n  );\n}\n\n// =============================================================================\n// COMPONENT RECOMMENDATIONS\n// =============================================================================\n\nexport interface ComponentRecommendation {\n  component: UnifiedComponent;\n  reason: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\nexport function getComponentRecommendations(\n  selectedComponents: string[],\n  targetType: ComponentType,\n  limit: number = 5\n): ComponentRecommendation[] {\n  const recommendations: ComponentRecommendation[] = [];\n  const selectedComponentObjects = selectedComponents.map(name => \n    allUnifiedComponents.find(c => c.name === name)\n  ).filter(Boolean) as UnifiedComponent[];\n\n  // Get components of target type\n  const targetComponents = allUnifiedComponents.filter(c => c.type === targetType);\n\n  for (const component of targetComponents) {\n    if (selectedComponents.includes(component.name)) continue;\n\n    // Check for dependencies\n    if (component.dependencies) {\n      const missingDeps = component.dependencies.filter(dep => !selectedComponents.includes(dep));\n      if (missingDeps.length === 0) {\n        recommendations.push({\n          component,\n          reason: 'All dependencies are satisfied',\n          priority: 'high'\n        });\n        continue;\n      }\n    }\n\n    // Check for complementary components (same category/subcategory)\n    const hasComplementary = selectedComponentObjects.some(selected => \n      selected.category === component.category || selected.subcategory === component.subcategory\n    );\n\n    if (hasComplementary) {\n      recommendations.push({\n        component,\n        reason: 'Complements selected components',\n        priority: 'medium'\n      });\n      continue;\n    }\n\n    // Check for beginner-friendly components\n    if (component.difficulty === 'beginner' && component.stability === 'stable') {\n      recommendations.push({\n        component,\n        reason: 'Beginner-friendly and stable',\n        priority: 'low'\n      });\n    }\n  }\n\n  // Sort by priority and limit results\n  const priorityOrder = { high: 0, medium: 1, low: 2 };\n  return recommendations\n    .sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority])\n    .slice(0, limit);\n}\n\n// =============================================================================\n// COMPONENT ANALYTICS\n// =============================================================================\n\nexport interface ComponentAnalytics {\n  totalComponents: number;\n  componentsByType: Record<ComponentType, number>;\n  componentsByDifficulty: Record<string, number>;\n  componentsByStability: Record<string, number>;\n  mostPopularCategories: Array<{ category: string; count: number }>;\n  recentlyAdded: UnifiedComponent[];\n  experimental: UnifiedComponent[];\n}\n\nexport function getComponentAnalytics(): ComponentAnalytics {\n  const componentsByType = allUnifiedComponents.reduce((acc, component) => {\n    acc[component.type] = (acc[component.type] || 0) + 1;\n    return acc;\n  }, {} as Record<ComponentType, number>);\n\n  const componentsByDifficulty = allUnifiedComponents.reduce((acc, component) => {\n    acc[component.difficulty] = (acc[component.difficulty] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const componentsByStability = allUnifiedComponents.reduce((acc, component) => {\n    acc[component.stability] = (acc[component.stability] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const categoryCounts = allUnifiedComponents.reduce((acc, component) => {\n    acc[component.category] = (acc[component.category] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const mostPopularCategories = Object.entries(categoryCounts)\n    .map(([category, count]) => ({ category, count }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n\n  // Filter for newer versions (1.20.0+)\n  const recentlyAdded = allUnifiedComponents\n    .filter(c => {\n      const [major, minor] = c.version.split('.').map(Number);\n      return major > 1 || (major === 1 && minor >= 20);\n    })\n    .slice(0, 10);\n\n  const experimental = allUnifiedComponents\n    .filter(c => c.stability === 'experimental')\n    .slice(0, 10);\n\n  return {\n    totalComponents: allUnifiedComponents.length,\n    componentsByType,\n    componentsByDifficulty,\n    componentsByStability,\n    mostPopularCategories,\n    recentlyAdded,\n    experimental\n  };\n}\n\n// =============================================================================\n// EXPORT UNIFIED INTERFACE\n// =============================================================================\n\nexport const ComponentIndex = {\n  // Data\n  components: allUnifiedComponents,\n  categories: getAllCategories(),\n  \n  // Search\n  search: searchAllComponents,\n  getByType: (type: ComponentType) => allUnifiedComponents.filter(c => c.type === type),\n  getByCategory: getComponentsByTypeAndCategory,\n  getById: (id: string) => allUnifiedComponents.find(c => c.id === id),\n  getByName: (name: string) => allUnifiedComponents.find(c => c.name === name),\n  \n  // Recommendations\n  getRecommendations: getComponentRecommendations,\n  \n  // Analytics\n  getAnalytics: getComponentAnalytics,\n  \n  // Statistics\n  stats: {\n    entity: entityRegistryStats,\n    block: blockRegistryStats,\n    item: itemRegistryStats,\n    gameplay: gameplayRegistryStats,\n    total: {\n      components: allUnifiedComponents.length,\n      categories: Object.keys(getAllCategories()).length\n    }\n  }\n};\n\n// Export types and main interface\nexport type { UnifiedComponent, SearchFilters, SearchResult, ComponentRecommendation, ComponentAnalytics };\nexport default ComponentIndex;","size_bytes":15772},"shared/entityRegistry.ts":{"content":"import { z } from 'zod';\n\n// Base component interface\nexport interface ComponentProperty {\n  name: string;\n  type: 'number' | 'boolean' | 'string' | 'array' | 'object' | 'range';\n  description: string;\n  required?: boolean;\n  default?: any;\n  min?: number;\n  max?: number;\n  options?: string[];\n  example?: any;\n}\n\nexport interface EntityComponent {\n  name: string;\n  description: string;\n  category: string;\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: ComponentProperty[];\n  example: string;\n  documentation?: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n  dependencies?: string[];\n  conflicts?: string[];\n}\n\n// Zod schemas for validation\nexport const ComponentPropertySchema = z.object({\n  name: z.string(),\n  type: z.enum(['number', 'boolean', 'string', 'array', 'object', 'range']),\n  description: z.string(),\n  required: z.boolean().optional(),\n  default: z.any().optional(),\n  min: z.number().optional(),\n  max: z.number().optional(),\n  options: z.array(z.string()).optional(),\n  example: z.any().optional(),\n});\n\nexport const EntityComponentSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  category: z.string(),\n  subcategory: z.string().optional(),\n  version: z.string(),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']),\n  properties: z.array(ComponentPropertySchema),\n  example: z.string(),\n  documentation: z.string().optional(),\n  keywords: z.array(z.string()),\n  stability: z.enum(['stable', 'experimental', 'beta']),\n  dependencies: z.array(z.string()).optional(),\n  conflicts: z.array(z.string()).optional(),\n});\n\n// Comprehensive Entity Components Registry\nexport const entityComponents: EntityComponent[] = [\n  // =============================================================================\n  // CORE COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:health',\n    description: 'Defines the entity\\'s health points and health-related behavior.',\n    category: 'Core',\n    subcategory: 'Attributes',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'number', description: 'Current health points', required: true, min: 0, example: 20 },\n      { name: 'max', type: 'number', description: 'Maximum health points', required: true, min: 1, max: 1024, example: 20 }\n    ],\n    example: `{\n  \"minecraft:health\": {\n    \"value\": 20,\n    \"max\": 20\n  }\n}`,\n    keywords: ['health', 'hp', 'life', 'vitality'],\n    stability: 'stable',\n    documentation: 'https://docs.microsoft.com/en-us/minecraft/creator/reference/content/entityreference/examples/entitycomponents/minecrafthealth'\n  },\n\n  {\n    name: 'minecraft:physics',\n    description: 'Enables physics simulation for the entity, allowing it to be affected by gravity and other physics forces.',\n    category: 'Core',\n    subcategory: 'Physics',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'has_gravity', type: 'boolean', description: 'Whether entity is affected by gravity', default: true, example: true },\n      { name: 'has_collision', type: 'boolean', description: 'Whether entity can collide with blocks', default: true, example: true }\n    ],\n    example: `{\n  \"minecraft:physics\": {\n    \"has_gravity\": true,\n    \"has_collision\": true\n  }\n}`,\n    keywords: ['physics', 'gravity', 'collision', 'simulation'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:collision_box',\n    description: 'Defines the entity\\'s collision boundaries for physics and interaction.',\n    category: 'Core',\n    subcategory: 'Physics',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'width', type: 'number', description: 'Collision box width in blocks', required: true, min: 0, max: 16, example: 0.6 },\n      { name: 'height', type: 'number', description: 'Collision box height in blocks', required: true, min: 0, max: 16, example: 1.8 }\n    ],\n    example: `{\n  \"minecraft:collision_box\": {\n    \"width\": 0.6,\n    \"height\": 1.8\n  }\n}`,\n    keywords: ['collision', 'hitbox', 'bounds', 'size'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:scale',\n    description: 'Changes the visual size of the entity without affecting collision.',\n    category: 'Core',\n    subcategory: 'Visual',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'number', description: 'Scale multiplier', required: true, min: 0.01, max: 10, default: 1.0, example: 1.5 }\n    ],\n    example: `{\n  \"minecraft:scale\": {\n    \"value\": 1.5\n  }\n}`,\n    keywords: ['scale', 'size', 'visual', 'resize'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:transformation',\n    description: 'Allows the entity to transform into another entity under specific conditions.',\n    category: 'Core',\n    subcategory: 'Behavior',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'into', type: 'string', description: 'Entity to transform into', required: true, example: 'minecraft:zombie' },\n      { name: 'transformation_sound', type: 'string', description: 'Sound to play during transformation', example: 'mob.zombie.remedy' },\n      { name: 'keep_level', type: 'boolean', description: 'Whether to keep experience level', default: false, example: false },\n      { name: 'keep_equipped', type: 'boolean', description: 'Whether to keep equipment', default: false, example: true },\n      { name: 'keep_owner', type: 'boolean', description: 'Whether to keep ownership', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:transformation\": {\n    \"into\": \"minecraft:zombie_villager\",\n    \"transformation_sound\": \"mob.zombie.remedy\",\n    \"keep_level\": true,\n    \"keep_equipped\": true\n  }\n}`,\n    keywords: ['transformation', 'morph', 'convert', 'change'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // MOVEMENT COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:movement',\n    description: 'Defines the entity\\'s basic movement speed.',\n    category: 'Movement',\n    subcategory: 'Basic',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'number', description: 'Movement speed in blocks per second', required: true, min: 0, max: 10, default: 0.1, example: 0.25 }\n    ],\n    example: `{\n  \"minecraft:movement\": {\n    \"value\": 0.25\n  }\n}`,\n    keywords: ['movement', 'speed', 'walk'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:movement.basic',\n    description: 'Enables basic movement mechanics for the entity.',\n    category: 'Movement',\n    subcategory: 'Basic',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [],\n    example: `{\n  \"minecraft:movement.basic\": {}\n}`,\n    keywords: ['movement', 'basic', 'mechanics'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:movement.fly',\n    description: 'Allows the entity to fly through the air.',\n    category: 'Movement',\n    subcategory: 'Advanced',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'max_turn', type: 'number', description: 'Maximum turn rate in degrees', default: 30, min: 1, max: 180, example: 45 }\n    ],\n    example: `{\n  \"minecraft:movement.fly\": {\n    \"max_turn\": 45\n  }\n}`,\n    keywords: ['movement', 'fly', 'flying', 'air'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:movement.hover',\n    description: 'Allows the entity to hover in place.',\n    category: 'Movement',\n    subcategory: 'Advanced',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [],\n    example: `{\n  \"minecraft:movement.hover\": {}\n}`,\n    keywords: ['movement', 'hover', 'float'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:movement.jump',\n    description: 'Enables jumping movement for the entity.',\n    category: 'Movement',\n    subcategory: 'Basic',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'jump_delay', type: 'range', description: 'Time delay between jumps in seconds', default: [0.8, 1.6], example: [1.0, 2.0] }\n    ],\n    example: `{\n  \"minecraft:movement.jump\": {\n    \"jump_delay\": [1.0, 2.0]\n  }\n}`,\n    keywords: ['movement', 'jump', 'hop'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:movement.skip',\n    description: 'Allows the entity to skip while moving.',\n    category: 'Movement',\n    subcategory: 'Advanced',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [],\n    example: `{\n  \"minecraft:movement.skip\": {}\n}`,\n    keywords: ['movement', 'skip', 'bounce'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:movement.sway',\n    description: 'Adds swaying motion to the entity\\'s movement.',\n    category: 'Movement',\n    subcategory: 'Advanced',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'sway_amplitude', type: 'number', description: 'Amplitude of the sway motion', default: 0.05, min: 0, max: 1, example: 0.1 },\n      { name: 'sway_frequency', type: 'number', description: 'Frequency of the sway motion', default: 0.5, min: 0.1, max: 5, example: 1.0 }\n    ],\n    example: `{\n  \"minecraft:movement.sway\": {\n    \"sway_amplitude\": 0.1,\n    \"sway_frequency\": 1.0\n  }\n}`,\n    keywords: ['movement', 'sway', 'wave', 'oscillate'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:underwater_movement',\n    description: 'Defines movement behavior while underwater.',\n    category: 'Movement',\n    subcategory: 'Environmental',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'value', type: 'number', description: 'Movement speed underwater', required: true, min: 0, max: 5, example: 0.15 }\n    ],\n    example: `{\n  \"minecraft:underwater_movement\": {\n    \"value\": 0.15\n  }\n}`,\n    keywords: ['movement', 'underwater', 'swim', 'water'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // NAVIGATION COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:navigation.walk',\n    description: 'Allows the entity to navigate on land using pathfinding.',\n    category: 'Movement',\n    subcategory: 'Navigation',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'can_path_over_water', type: 'boolean', description: 'Can pathfind over water', default: false, example: false },\n      { name: 'avoid_water', type: 'boolean', description: 'Avoids water when pathfinding', default: false, example: true },\n      { name: 'avoid_damage_blocks', type: 'boolean', description: 'Avoids damaging blocks', default: false, example: true },\n      { name: 'can_sink', type: 'boolean', description: 'Can sink in water', default: true, example: false },\n      { name: 'can_pass_doors', type: 'boolean', description: 'Can pass through doors', default: false, example: true },\n      { name: 'can_open_doors', type: 'boolean', description: 'Can open doors', default: false, example: true },\n      { name: 'avoid_sun', type: 'boolean', description: 'Avoids sunlight when pathfinding', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:navigation.walk\": {\n    \"can_path_over_water\": false,\n    \"avoid_water\": true,\n    \"avoid_damage_blocks\": true,\n    \"can_pass_doors\": true\n  }\n}`,\n    keywords: ['navigation', 'walk', 'pathfinding', 'land'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:navigation.swim',\n    description: 'Allows the entity to navigate in water.',\n    category: 'Movement',\n    subcategory: 'Navigation',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'avoid_sun', type: 'boolean', description: 'Avoids sunlight when pathfinding', default: false, example: true },\n      { name: 'can_breach', type: 'boolean', description: 'Can breach water surface', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:navigation.swim\": {\n    \"avoid_sun\": false,\n    \"can_breach\": true\n  }\n}`,\n    keywords: ['navigation', 'swim', 'water', 'aquatic'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:navigation.fly',\n    description: 'Allows the entity to navigate through the air.',\n    category: 'Movement',\n    subcategory: 'Navigation',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'can_path_over_water', type: 'boolean', description: 'Can pathfind over water', default: true, example: true },\n      { name: 'can_path_from_air', type: 'boolean', description: 'Can start pathfinding from air', default: true, example: true }\n    ],\n    example: `{\n  \"minecraft:navigation.fly\": {\n    \"can_path_over_water\": true,\n    \"can_path_from_air\": true\n  }\n}`,\n    keywords: ['navigation', 'fly', 'air', 'flying'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:navigation.hover',\n    description: 'Allows the entity to navigate while hovering.',\n    category: 'Movement',\n    subcategory: 'Navigation',\n    version: '1.8.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'can_path_over_water', type: 'boolean', description: 'Can pathfind over water', default: true, example: true },\n      { name: 'can_sink', type: 'boolean', description: 'Can sink when needed', default: false, example: false }\n    ],\n    example: `{\n  \"minecraft:navigation.hover\": {\n    \"can_path_over_water\": true,\n    \"can_sink\": false\n  }\n}`,\n    keywords: ['navigation', 'hover', 'float'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // JUMP COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:jump.static',\n    description: 'Allows the entity to jump with a fixed jump power.',\n    category: 'Movement',\n    subcategory: 'Jump',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'jump_power', type: 'number', description: 'Jump strength', default: 0.42, min: 0, max: 10, example: 0.8 }\n    ],\n    example: `{\n  \"minecraft:jump.static\": {\n    \"jump_power\": 0.8\n  }\n}`,\n    keywords: ['jump', 'static', 'power', 'leap'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:jump.dynamic',\n    description: 'Allows the entity to jump with variable power based on conditions.',\n    category: 'Movement',\n    subcategory: 'Jump',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [],\n    example: `{\n  \"minecraft:jump.dynamic\": {}\n}`,\n    keywords: ['jump', 'dynamic', 'variable'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // BEHAVIOR COMPONENTS (AI Goals)\n  // =============================================================================\n  {\n    name: 'minecraft:behavior.random_stroll',\n    description: 'Makes the entity wander around randomly.',\n    category: 'Behavior',\n    subcategory: 'Movement',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority (lower = higher priority)', required: true, min: 0, max: 100, example: 6 },\n      { name: 'speed_multiplier', type: 'number', description: 'Movement speed multiplier', default: 1.0, min: 0.1, max: 5.0, example: 1.0 },\n      { name: 'xz_dist', type: 'number', description: 'Distance to wander on X/Z axis', default: 10, min: 1, max: 64, example: 10 },\n      { name: 'y_dist', type: 'number', description: 'Distance to wander on Y axis', default: 7, min: 1, max: 64, example: 7 },\n      { name: 'interval', type: 'range', description: 'Time interval between wanders', default: [120, 120], example: [120, 240] }\n    ],\n    example: `{\n  \"minecraft:behavior.random_stroll\": {\n    \"priority\": 6,\n    \"speed_multiplier\": 1.0,\n    \"xz_dist\": 10,\n    \"y_dist\": 7,\n    \"interval\": [120, 240]\n  }\n}`,\n    keywords: ['behavior', 'random', 'stroll', 'wander', 'walk'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:behavior.look_at_player',\n    description: 'Makes the entity look at nearby players.',\n    category: 'Behavior',\n    subcategory: 'Social',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true, min: 0, max: 100, example: 7 },\n      { name: 'look_distance', type: 'number', description: 'Distance to look for players', default: 6.0, min: 1, max: 64, example: 8.0 },\n      { name: 'probability', type: 'number', description: 'Probability of looking', default: 0.02, min: 0, max: 1, example: 0.05 },\n      { name: 'angle_of_view_horizontal', type: 'number', description: 'Horizontal viewing angle', default: 360, min: 1, max: 360, example: 120 },\n      { name: 'angle_of_view_vertical', type: 'number', description: 'Vertical viewing angle', default: 360, min: 1, max: 360, example: 90 }\n    ],\n    example: `{\n  \"minecraft:behavior.look_at_player\": {\n    \"priority\": 7,\n    \"look_distance\": 8.0,\n    \"probability\": 0.05,\n    \"angle_of_view_horizontal\": 120\n  }\n}`,\n    keywords: ['behavior', 'look', 'player', 'gaze', 'attention'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:behavior.panic',\n    description: 'Makes the entity run away when hurt or threatened.',\n    category: 'Behavior',\n    subcategory: 'Defensive',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true, min: 0, max: 100, example: 1 },\n      { name: 'speed_multiplier', type: 'number', description: 'Panic speed multiplier', default: 1.25, min: 0.1, max: 5.0, example: 1.5 },\n      { name: 'panic_sound', type: 'string', description: 'Sound to play when panicking', example: 'mob.pig.say' },\n      { name: 'damage_sources', type: 'array', description: 'Damage sources that trigger panic', example: ['all'] }\n    ],\n    example: `{\n  \"minecraft:behavior.panic\": {\n    \"priority\": 1,\n    \"speed_multiplier\": 1.5,\n    \"panic_sound\": \"mob.pig.say\",\n    \"damage_sources\": [\"all\"]\n  }\n}`,\n    keywords: ['behavior', 'panic', 'flee', 'scared', 'fear'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:behavior.float',\n    description: 'Makes the entity float in water to prevent drowning.',\n    category: 'Behavior',\n    subcategory: 'Survival',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true, min: 0, max: 100, example: 0 }\n    ],\n    example: `{\n  \"minecraft:behavior.float\": {\n    \"priority\": 0\n  }\n}`,\n    keywords: ['behavior', 'float', 'water', 'swim', 'survival'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:behavior.follow_parent',\n    description: 'Makes baby entities follow their parents.',\n    category: 'Behavior',\n    subcategory: 'Family',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true, min: 0, max: 100, example: 5 },\n      { name: 'speed_multiplier', type: 'number', description: 'Follow speed multiplier', default: 1.1, min: 0.1, max: 5.0, example: 1.25 }\n    ],\n    example: `{\n  \"minecraft:behavior.follow_parent\": {\n    \"priority\": 5,\n    \"speed_multiplier\": 1.25\n  }\n}`,\n    keywords: ['behavior', 'follow', 'parent', 'baby', 'family'],\n    stability: 'stable',\n    dependencies: ['minecraft:is_baby']\n  },\n\n  {\n    name: 'minecraft:behavior.avoid_mob_type',\n    description: 'Makes the entity avoid specific types of mobs.',\n    category: 'Behavior',\n    subcategory: 'Defensive',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true, min: 0, max: 100, example: 4 },\n      { name: 'entity_types', type: 'array', description: 'Entity types to avoid', required: true, example: [{ family: 'player', max_dist: 6, walk_speed_multiplier: 1.5 }] },\n      { name: 'max_dist', type: 'number', description: 'Maximum avoidance distance', default: 16, min: 1, max: 64, example: 10 },\n      { name: 'walk_speed_multiplier', type: 'number', description: 'Walk speed when avoiding', default: 1.0, min: 0.1, max: 5.0, example: 1.5 },\n      { name: 'sprint_speed_multiplier', type: 'number', description: 'Sprint speed when avoiding', default: 1.0, min: 0.1, max: 5.0, example: 2.0 }\n    ],\n    example: `{\n  \"minecraft:behavior.avoid_mob_type\": {\n    \"priority\": 4,\n    \"entity_types\": [\n      {\n        \"filters\": {\n          \"test\": \"is_family\",\n          \"subject\": \"other\",\n          \"value\": \"player\"\n        },\n        \"max_dist\": 6,\n        \"walk_speed_multiplier\": 1.5,\n        \"sprint_speed_multiplier\": 2.0\n      }\n    ]\n  }\n}`,\n    keywords: ['behavior', 'avoid', 'mob', 'fear', 'escape'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:behavior.random_look_around',\n    description: 'Makes the entity randomly look around.',\n    category: 'Behavior',\n    subcategory: 'Idle',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'priority', type: 'number', description: 'Behavior priority', required: true, min: 0, max: 100, example: 8 },\n      { name: 'look_time', type: 'range', description: 'Time range to look in one direction', default: [40, 80], example: [20, 60] }\n    ],\n    example: `{\n  \"minecraft:behavior.random_look_around\": {\n    \"priority\": 8,\n    \"look_time\": [20, 60]\n  }\n}`,\n    keywords: ['behavior', 'look', 'random', 'idle', 'gaze'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // INTERACTION COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:tameable',\n    description: 'Allows the entity to be tamed by players.',\n    category: 'Interaction',\n    subcategory: 'Social',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'probability', type: 'number', description: 'Taming probability per attempt', default: 0.33, min: 0, max: 1, example: 0.5 },\n      { name: 'tame_items', type: 'array', description: 'Items that can tame this entity', required: true, example: ['minecraft:wheat', 'minecraft:carrot'] },\n      { name: 'tame_event', type: 'string', description: 'Event to trigger when tamed', example: 'minecraft:on_tame' }\n    ],\n    example: `{\n  \"minecraft:tameable\": {\n    \"probability\": 0.5,\n    \"tame_items\": [\n      \"minecraft:wheat\",\n      \"minecraft:carrot\"\n    ],\n    \"tame_event\": \"minecraft:on_tame\"\n  }\n}`,\n    keywords: ['tameable', 'tame', 'pet', 'domesticate'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:breedable',\n    description: 'Allows the entity to breed and produce offspring.',\n    category: 'Interaction',\n    subcategory: 'Breeding',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'require_tame', type: 'boolean', description: 'Whether entity must be tamed to breed', default: true, example: false },\n      { name: 'breeds_with', type: 'array', description: 'Entity types this can breed with', required: true, example: [{ mate_type: 'minecraft:cow', baby_type: 'minecraft:cow', breed_event: 'minecraft:entity_born' }] },\n      { name: 'breed_items', type: 'array', description: 'Items used for breeding', required: true, example: ['minecraft:wheat'] },\n      { name: 'love_filters', type: 'object', description: 'Filters for love mode', example: {} }\n    ],\n    example: `{\n  \"minecraft:breedable\": {\n    \"require_tame\": false,\n    \"breeds_with\": [\n      {\n        \"mate_type\": \"minecraft:cow\",\n        \"baby_type\": \"minecraft:cow\", \n        \"breed_event\": \"minecraft:entity_born\"\n      }\n    ],\n    \"breed_items\": [\"minecraft:wheat\"]\n  }\n}`,\n    keywords: ['breedable', 'breed', 'reproduction', 'offspring', 'baby'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:rideable',\n    description: 'Allows the entity to be ridden by other entities.',\n    category: 'Interaction',\n    subcategory: 'Transportation',\n    version: '1.8.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'seat_count', type: 'number', description: 'Number of seats available', default: 1, min: 1, max: 10, example: 2 },\n      { name: 'family_types', type: 'array', description: 'Entity families that can ride', required: true, example: ['player'] },\n      { name: 'interact_text', type: 'string', description: 'Text shown when interactable', example: 'action.interact.ride' },\n      { name: 'pull_in_entities', type: 'boolean', description: 'Whether to pull entities onto seats', default: false, example: true },\n      { name: 'rider_can_interact', type: 'boolean', description: 'Whether rider can interact', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:rideable\": {\n    \"seat_count\": 1,\n    \"family_types\": [\"player\"],\n    \"interact_text\": \"action.interact.ride\",\n    \"pull_in_entities\": true,\n    \"rider_can_interact\": true,\n    \"seats\": [\n      {\n        \"position\": [0.0, 0.9, 0.0],\n        \"min_rider_count\": 0,\n        \"max_rider_count\": 1\n      }\n    ]\n  }\n}`,\n    keywords: ['rideable', 'ride', 'mount', 'vehicle', 'transportation'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // ENVIRONMENT & SENSORS\n  // =============================================================================\n  {\n    name: 'minecraft:breathable',\n    description: 'Defines what the entity can breathe and drowning behavior.',\n    category: 'Environment',\n    subcategory: 'Survival',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'total_supply', type: 'number', description: 'Total air supply in seconds', default: 15, min: 1, max: 300, example: 20 },\n      { name: 'suffocate_time', type: 'number', description: 'Time before suffocation damage', default: -1, min: -1, max: 300, example: 2 },\n      { name: 'inhale_time', type: 'number', description: 'Time to fully inhale', default: 0, min: 0, max: 60, example: 3 },\n      { name: 'breathes_air', type: 'boolean', description: 'Can breathe air', default: true, example: true },\n      { name: 'breathes_water', type: 'boolean', description: 'Can breathe water', default: false, example: false },\n      { name: 'breathes_lava', type: 'boolean', description: 'Can breathe lava', default: false, example: false },\n      { name: 'breathes_solids', type: 'boolean', description: 'Can breathe in solid blocks', default: false, example: false },\n      { name: 'generates_bubbles', type: 'boolean', description: 'Generates bubble particles', default: true, example: false }\n    ],\n    example: `{\n  \"minecraft:breathable\": {\n    \"total_supply\": 15,\n    \"suffocate_time\": -1,\n    \"breathes_air\": true,\n    \"breathes_water\": false,\n    \"generates_bubbles\": true\n  }\n}`,\n    keywords: ['breathable', 'air', 'drowning', 'suffocation', 'oxygen'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:environment_sensor',\n    description: 'Detects environmental conditions and triggers events.',\n    category: 'Environment',\n    subcategory: 'Sensors',\n    version: '1.8.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'triggers', type: 'array', description: 'Environmental triggers', required: true, example: [{ filters: { test: 'is_daytime' }, event: 'minecraft:become_day' }] }\n    ],\n    example: `{\n  \"minecraft:environment_sensor\": {\n    \"triggers\": [\n      {\n        \"filters\": {\n          \"test\": \"is_daytime\",\n          \"value\": true\n        },\n        \"event\": \"minecraft:become_day\"\n      },\n      {\n        \"filters\": {\n          \"test\": \"is_underwater\",\n          \"subject\": \"self\",\n          \"value\": true\n        },\n        \"event\": \"minecraft:enter_water\"\n      }\n    ]\n  }\n}`,\n    keywords: ['environment', 'sensor', 'detection', 'conditions', 'triggers'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:damage_sensor',\n    description: 'Detects damage and can trigger events or modify damage.',\n    category: 'Environment',\n    subcategory: 'Sensors',\n    version: '1.8.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'triggers', type: 'array', description: 'Damage triggers', required: true, example: [{ cause: 'fire', deals_damage: false, on_damage: { event: 'minecraft:fire_immunity' } }] }\n    ],\n    example: `{\n  \"minecraft:damage_sensor\": {\n    \"triggers\": [\n      {\n        \"cause\": \"fire\",\n        \"deals_damage\": false,\n        \"on_damage\": {\n          \"event\": \"minecraft:fire_immunity\"\n        }\n      },\n      {\n        \"cause\": \"fall\",\n        \"damage_multiplier\": 0.5,\n        \"deals_damage\": true\n      }\n    ]\n  }\n}`,\n    keywords: ['damage', 'sensor', 'immunity', 'resistance', 'protection'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:timer',\n    description: 'Triggers events after specified time intervals.',\n    category: 'Environment',\n    subcategory: 'Timing',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'looping', type: 'boolean', description: 'Whether timer loops', default: true, example: false },\n      { name: 'time', type: 'range', description: 'Time range in seconds', required: true, example: [5.0, 10.0] },\n      { name: 'time_down_event', type: 'string', description: 'Event when timer expires', required: true, example: 'minecraft:timer_expired' },\n      { name: 'randomInterval', type: 'boolean', description: 'Use random interval from range', default: true, example: true }\n    ],\n    example: `{\n  \"minecraft:timer\": {\n    \"looping\": true,\n    \"time\": [5.0, 10.0],\n    \"time_down_event\": \"minecraft:timer_expired\",\n    \"randomInterval\": true\n  }\n}`,\n    keywords: ['timer', 'schedule', 'interval', 'delay', 'timing'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // VISUAL & VARIANTS\n  // =============================================================================\n  {\n    name: 'minecraft:variant',\n    description: 'Defines visual variants for the entity.',\n    category: 'Visual',\n    subcategory: 'Appearance',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'number', description: 'Variant number', required: true, min: 0, max: 2147483647, example: 2 }\n    ],\n    example: `{\n  \"minecraft:variant\": {\n    \"value\": 2\n  }\n}`,\n    keywords: ['variant', 'texture', 'appearance', 'visual'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:mark_variant',\n    description: 'Defines marking variants for the entity.',\n    category: 'Visual',\n    subcategory: 'Appearance',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'number', description: 'Mark variant number', required: true, min: 0, max: 2147483647, example: 1 }\n    ],\n    example: `{\n  \"minecraft:mark_variant\": {\n    \"value\": 1\n  }\n}`,\n    keywords: ['mark', 'variant', 'markings', 'pattern'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:skin_id',\n    description: 'Defines the skin ID for the entity.',\n    category: 'Visual',\n    subcategory: 'Appearance',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'number', description: 'Skin ID number', required: true, min: 0, max: 2147483647, example: 0 }\n    ],\n    example: `{\n  \"minecraft:skin_id\": {\n    \"value\": 0\n  }\n}`,\n    keywords: ['skin', 'texture', 'appearance', 'visual'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // UTILITY COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:nameable',\n    description: 'Allows the entity to be named with name tags.',\n    category: 'Utility',\n    subcategory: 'Identity',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'always_show', type: 'boolean', description: 'Always show name above entity', default: false, example: true },\n      { name: 'allow_name_tag_renaming', type: 'boolean', description: 'Allow renaming with name tags', default: true, example: true },\n      { name: 'default_trigger', type: 'string', description: 'Default name trigger event', example: 'minecraft:named' },\n      { name: 'name_actions', type: 'array', description: 'Actions based on specific names', example: [] }\n    ],\n    example: `{\n  \"minecraft:nameable\": {\n    \"always_show\": false,\n    \"allow_name_tag_renaming\": true,\n    \"default_trigger\": \"minecraft:named\"\n  }\n}`,\n    keywords: ['nameable', 'name', 'tag', 'identity', 'label'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:persistent',\n    description: 'Prevents the entity from despawning naturally.',\n    category: 'Utility',\n    subcategory: 'Spawning',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [],\n    example: `{\n  \"minecraft:persistent\": {}\n}`,\n    keywords: ['persistent', 'despawn', 'permanent', 'stay'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:despawn',\n    description: 'Controls when and how the entity despawns.',\n    category: 'Utility',\n    subcategory: 'Spawning',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'despawn_from_distance', type: 'object', description: 'Distance-based despawning rules', example: {} },\n      { name: 'despawn_from_chance', type: 'boolean', description: 'Allow chance-based despawning', default: true, example: false },\n      { name: 'despawn_from_inactivity', type: 'boolean', description: 'Despawn when inactive', default: true, example: false },\n      { name: 'despawn_from_simulation_edge', type: 'boolean', description: 'Despawn at simulation edge', default: true, example: false },\n      { name: 'remove_child_entities', type: 'boolean', description: 'Remove child entities when despawning', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:despawn\": {\n    \"despawn_from_distance\": {\n      \"max_distance\": 128,\n      \"min_distance\": 32\n    },\n    \"despawn_from_chance\": false,\n    \"despawn_from_inactivity\": true\n  }\n}`,\n    keywords: ['despawn', 'remove', 'cleanup', 'distance'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:is_baby',\n    description: 'Marks the entity as a baby with special properties.',\n    category: 'Utility',\n    subcategory: 'Age',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [],\n    example: `{\n  \"minecraft:is_baby\": {}\n}`,\n    keywords: ['baby', 'young', 'child', 'juvenile'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:ageable',\n    description: 'Allows the entity to age over time.',\n    category: 'Utility',\n    subcategory: 'Age',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'duration', type: 'number', description: 'Time to grow up in seconds', default: 1200, min: 1, max: 2147483647, example: 600 },\n      { name: 'feed_items', type: 'array', description: 'Items that speed up growth', example: ['minecraft:wheat'] },\n      { name: 'grow_up', type: 'object', description: 'Event when grown up', example: { event: 'minecraft:ageable_grow_up' } }\n    ],\n    example: `{\n  \"minecraft:ageable\": {\n    \"duration\": 1200,\n    \"feed_items\": [\n      \"minecraft:wheat\"\n    ],\n    \"grow_up\": {\n      \"event\": \"minecraft:ageable_grow_up\",\n      \"target\": \"self\"\n    }\n  }\n}`,\n    keywords: ['ageable', 'grow', 'mature', 'development'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:angry',\n    description: 'Controls the entity\\'s anger state and behavior.',\n    category: 'Utility',\n    subcategory: 'Emotional',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'duration', type: 'number', description: 'Anger duration in seconds', default: 25, min: 0, max: 2147483647, example: 30 },\n      { name: 'duration_delta', type: 'number', description: 'Random duration variation', default: 0, min: 0, max: 2147483647, example: 10 },\n      { name: 'broadcast_anger', type: 'boolean', description: 'Broadcast anger to nearby entities', default: false, example: true },\n      { name: 'broadcast_range', type: 'number', description: 'Range to broadcast anger', default: 20, min: 1, max: 100, example: 16 },\n      { name: 'calm_event', type: 'string', description: 'Event when calming down', example: 'minecraft:on_calm' }\n    ],\n    example: `{\n  \"minecraft:angry\": {\n    \"duration\": 25,\n    \"duration_delta\": 5,\n    \"broadcast_anger\": true,\n    \"broadcast_range\": 16,\n    \"calm_event\": \"minecraft:on_calm\"\n  }\n}`,\n    keywords: ['angry', 'rage', 'hostility', 'emotion'],\n    stability: 'stable'\n  }\n];\n\n// Category definitions\nexport const entityCategories = {\n  'Core': {\n    name: 'Core Components',\n    description: 'Essential components that define basic entity properties',\n    icon: 'anvil-hammer.png',\n    subcategories: ['Attributes', 'Physics', 'Visual', 'Behavior']\n  },\n  'Movement': {\n    name: 'Movement & Navigation',\n    description: 'Components controlling entity movement and pathfinding',\n    icon: 'leather_boots.png',\n    subcategories: ['Basic', 'Advanced', 'Navigation', 'Jump', 'Environmental']\n  },\n  'Behavior': {\n    name: 'AI Behaviors',\n    description: 'AI goals and behavioral patterns for entities',\n    icon: 'brain_coral.png',\n    subcategories: ['Movement', 'Social', 'Defensive', 'Survival', 'Idle', 'Family']\n  },\n  'Interaction': {\n    name: 'Player Interaction',\n    description: 'Components enabling player interaction with entities',\n    icon: 'golden_carrot.png',\n    subcategories: ['Social', 'Breeding', 'Transportation', 'Trading']\n  },\n  'Environment': {\n    name: 'Environment & Sensors',\n    description: 'Components for environmental awareness and adaptation',\n    icon: 'grass.png',\n    subcategories: ['Survival', 'Sensors', 'Timing']\n  },\n  'Visual': {\n    name: 'Visual & Audio',\n    description: 'Components controlling appearance and sound',\n    icon: 'brush.png',\n    subcategories: ['Appearance', 'Animation', 'Sound']\n  },\n  'Utility': {\n    name: 'Utility & Management',\n    description: 'Utility components for entity management',\n    icon: 'anvil-crossout.png',\n    subcategories: ['Identity', 'Spawning', 'Age', 'Emotional', 'Special']\n  }\n};\n\n// Search functionality\nexport function searchEntityComponents(query: string, filters?: {\n  category?: string;\n  difficulty?: string;\n  stability?: string;\n}): EntityComponent[] {\n  const lowercaseQuery = query.toLowerCase();\n  \n  return entityComponents.filter(component => {\n    // Text search\n    const matchesText = !query || \n      component.name.toLowerCase().includes(lowercaseQuery) ||\n      component.description.toLowerCase().includes(lowercaseQuery) ||\n      component.keywords.some(keyword => keyword.toLowerCase().includes(lowercaseQuery));\n    \n    // Filters\n    const matchesCategory = !filters?.category || component.category === filters.category;\n    const matchesDifficulty = !filters?.difficulty || component.difficulty === filters.difficulty;\n    const matchesStability = !filters?.stability || component.stability === filters.stability;\n    \n    return matchesText && matchesCategory && matchesDifficulty && matchesStability;\n  });\n}\n\n// Get component by name\nexport function getEntityComponent(name: string): EntityComponent | undefined {\n  return entityComponents.find(component => component.name === name);\n}\n\n// Get components by category\nexport function getEntityComponentsByCategory(category: string): EntityComponent[] {\n  return entityComponents.filter(component => component.category === category);\n}\n\n// Template generation helper\nexport function generateEntityComponentJSON(componentName: string, properties: Record<string, any>): object {\n  const component = getEntityComponent(componentName);\n  if (!component) {\n    throw new Error(`Component ${componentName} not found`);\n  }\n\n  return {\n    [componentName]: properties\n  };\n}\n\n// Export summary statistics\nexport const entityRegistryStats = {\n  totalComponents: entityComponents.length,\n  categoryCounts: Object.keys(entityCategories).reduce((acc, category) => {\n    acc[category] = getEntityComponentsByCategory(category).length;\n    return acc;\n  }, {} as Record<string, number>),\n  difficultyLevels: ['beginner', 'intermediate', 'advanced'].reduce((acc, difficulty) => {\n    acc[difficulty] = entityComponents.filter(c => c.difficulty === difficulty).length;\n    return acc;\n  }, {} as Record<string, number>),\n  stabilityLevels: ['stable', 'experimental', 'beta'].reduce((acc, stability) => {\n    acc[stability] = entityComponents.filter(c => c.stability === stability).length;\n    return acc;\n  }, {} as Record<string, number>)\n};","size_bytes":40861},"shared/gameplayRegistry.ts":{"content":"import { z } from 'zod';\n\n// Base interfaces for different gameplay elements\nexport interface RecipeType {\n  name: string;\n  description: string;\n  category: 'Crafting' | 'Smelting' | 'Brewing' | 'Smithing' | 'Special';\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: GameplayProperty[];\n  example: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n}\n\nexport interface LootFunction {\n  name: string;\n  description: string;\n  category: 'Loot' | 'Trading';\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: GameplayProperty[];\n  example: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n}\n\nexport interface BiomeComponent {\n  name: string;\n  description: string;\n  category: 'Biome';\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: GameplayProperty[];\n  example: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n}\n\nexport interface SpawnRuleComponent {\n  name: string;\n  description: string;\n  category: 'Spawning';\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: GameplayProperty[];\n  example: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n}\n\nexport interface GameplayProperty {\n  name: string;\n  type: 'number' | 'boolean' | 'string' | 'array' | 'object' | 'range' | 'filter' | 'condition';\n  description: string;\n  required?: boolean;\n  default?: any;\n  min?: number;\n  max?: number;\n  options?: string[];\n  example?: any;\n}\n\n// Zod schemas\nexport const GameplayPropertySchema = z.object({\n  name: z.string(),\n  type: z.enum(['number', 'boolean', 'string', 'array', 'object', 'range', 'filter', 'condition']),\n  description: z.string(),\n  required: z.boolean().optional(),\n  default: z.any().optional(),\n  min: z.number().optional(),\n  max: z.number().optional(),\n  options: z.array(z.string()).optional(),\n  example: z.any().optional(),\n});\n\n// =============================================================================\n// RECIPE TYPES REGISTRY\n// =============================================================================\nexport const recipeTypes: RecipeType[] = [\n  {\n    name: 'minecraft:recipe_shaped',\n    description: 'Shaped crafting recipe that requires specific pattern arrangement.',\n    category: 'Crafting',\n    subcategory: 'Shaped',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'pattern', type: 'array', description: 'Crafting pattern using keys', required: true, example: ['###', '# #', '###'] },\n      { name: 'key', type: 'object', description: 'Key mappings for pattern', required: true, example: { '#': { item: 'minecraft:planks' } } },\n      { name: 'result', type: 'object', description: 'Result item and count', required: true, example: { item: 'minecraft:chest', count: 1 } },\n      { name: 'tags', type: 'array', description: 'Recipe tags', example: ['crafting_table'] },\n      { name: 'group', type: 'string', description: 'Recipe group for organization', example: 'wooden_door' }\n    ],\n    example: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_shaped\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_chest\"\n    },\n    \"tags\": [\"crafting_table\"],\n    \"pattern\": [\n      \"###\",\n      \"# #\", \n      \"###\"\n    ],\n    \"key\": {\n      \"#\": {\n        \"item\": \"minecraft:planks\"\n      }\n    },\n    \"result\": {\n      \"item\": \"minecraft:chest\",\n      \"count\": 1\n    }\n  }\n}`,\n    keywords: ['recipe', 'shaped', 'crafting', 'pattern', 'grid'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:recipe_shapeless',\n    description: 'Shapeless crafting recipe where ingredient order doesn\\'t matter.',\n    category: 'Crafting',\n    subcategory: 'Shapeless',\n    version: '1.12.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'ingredients', type: 'array', description: 'Required ingredients list', required: true, example: [{ item: 'minecraft:planks' }, { item: 'minecraft:stick' }] },\n      { name: 'result', type: 'object', description: 'Result item and count', required: true, example: { item: 'minecraft:wooden_sword', count: 1 } },\n      { name: 'tags', type: 'array', description: 'Recipe tags', example: ['crafting_table'] },\n      { name: 'group', type: 'string', description: 'Recipe group for organization', example: 'wooden_tools' }\n    ],\n    example: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_shapeless\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_potion\"\n    },\n    \"tags\": [\"crafting_table\"],\n    \"ingredients\": [\n      {\n        \"item\": \"minecraft:glass_bottle\"\n      },\n      {\n        \"item\": \"minecraft:spider_eye\"\n      },\n      {\n        \"item\": \"minecraft:sugar\"\n      }\n    ],\n    \"result\": {\n      \"item\": \"minecraft:potion\",\n      \"count\": 1\n    }\n  }\n}`,\n    keywords: ['recipe', 'shapeless', 'crafting', 'ingredients', 'flexible'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:recipe_furnace',\n    description: 'Furnace smelting recipe for converting items with heat.',\n    category: 'Smelting',\n    subcategory: 'Furnace',\n    version: '1.12.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'input', type: 'string', description: 'Input item identifier', required: true, example: 'minecraft:iron_ore' },\n      { name: 'output', type: 'string', description: 'Output item identifier', required: true, example: 'minecraft:iron_ingot' },\n      { name: 'tags', type: 'array', description: 'Recipe tags', example: ['furnace'] }\n    ],\n    example: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_furnace\": {\n    \"description\": {\n      \"identifier\": \"my_addon:smelt_custom_ore\"\n    },\n    \"tags\": [\"furnace\"],\n    \"input\": \"my_addon:custom_ore\",\n    \"output\": \"my_addon:custom_ingot\"\n  }\n}`,\n    keywords: ['recipe', 'furnace', 'smelting', 'cooking', 'heat'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:recipe_brewing_mix',\n    description: 'Brewing stand recipe for creating potions.',\n    category: 'Brewing',\n    subcategory: 'Potions',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'input', type: 'string', description: 'Base potion input', required: true, example: 'minecraft:potion' },\n      { name: 'reagent', type: 'string', description: 'Brewing reagent', required: true, example: 'minecraft:spider_eye' },\n      { name: 'output', type: 'string', description: 'Output potion', required: true, example: 'minecraft:potion' },\n      { name: 'tags', type: 'array', description: 'Recipe tags', example: ['brewing_stand'] }\n    ],\n    example: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_brewing_mix\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_potion_brew\"\n    },\n    \"tags\": [\"brewing_stand\"],\n    \"input\": \"minecraft:potion\",\n    \"reagent\": \"minecraft:spider_eye\",\n    \"output\": \"minecraft:potion\"\n  }\n}`,\n    keywords: ['recipe', 'brewing', 'potion', 'alchemy', 'reagent'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:recipe_brewing_container',\n    description: 'Brewing recipe for converting bottle containers.',\n    category: 'Brewing',\n    subcategory: 'Containers',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'input', type: 'string', description: 'Input container', required: true, example: 'minecraft:glass_bottle' },\n      { name: 'reagent', type: 'string', description: 'Brewing reagent', required: true, example: 'minecraft:nether_wart' },\n      { name: 'output', type: 'string', description: 'Output container', required: true, example: 'minecraft:potion' },\n      { name: 'tags', type: 'array', description: 'Recipe tags', example: ['brewing_stand'] }\n    ],\n    example: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_brewing_container\": {\n    \"description\": {\n      \"identifier\": \"my_addon:water_to_awkward\"\n    },\n    \"tags\": [\"brewing_stand\"],\n    \"input\": \"minecraft:potion\",\n    \"reagent\": \"minecraft:nether_wart\",\n    \"output\": \"minecraft:potion\"\n  }\n}`,\n    keywords: ['recipe', 'brewing', 'container', 'bottle', 'base'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:recipe_smithing_transform',\n    description: 'Smithing table recipe for transforming items with templates.',\n    category: 'Smithing',\n    subcategory: 'Transform',\n    version: '1.20.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'template', type: 'string', description: 'Smithing template', required: true, example: 'minecraft:netherite_upgrade_smithing_template' },\n      { name: 'base', type: 'string', description: 'Base item to upgrade', required: true, example: 'minecraft:diamond_sword' },\n      { name: 'addition', type: 'string', description: 'Addition material', required: true, example: 'minecraft:netherite_ingot' },\n      { name: 'result', type: 'object', description: 'Result item', required: true, example: { item: 'minecraft:netherite_sword', count: 1 } },\n      { name: 'tags', type: 'array', description: 'Recipe tags', example: ['smithing_table'] }\n    ],\n    example: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_smithing_transform\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_upgrade\"\n    },\n    \"tags\": [\"smithing_table\"],\n    \"template\": \"minecraft:netherite_upgrade_smithing_template\",\n    \"base\": \"minecraft:diamond_sword\",\n    \"addition\": \"minecraft:netherite_ingot\",\n    \"result\": {\n      \"item\": \"minecraft:netherite_sword\",\n      \"count\": 1\n    }\n  }\n}`,\n    keywords: ['recipe', 'smithing', 'transform', 'upgrade', 'template'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:recipe_smithing_trim',\n    description: 'Smithing table recipe for adding armor trims.',\n    category: 'Smithing',\n    subcategory: 'Trim',\n    version: '1.20.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'template', type: 'string', description: 'Trim template', required: true, example: 'minecraft:coast_armor_trim_smithing_template' },\n      { name: 'base', type: 'string', description: 'Base armor piece', required: true, example: 'minecraft:diamond_chestplate' },\n      { name: 'addition', type: 'string', description: 'Trim material', required: true, example: 'minecraft:emerald' },\n      { name: 'tags', type: 'array', description: 'Recipe tags', example: ['smithing_table'] }\n    ],\n    example: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_smithing_trim\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_trim\"\n    },\n    \"tags\": [\"smithing_table\"],\n    \"template\": \"minecraft:coast_armor_trim_smithing_template\",\n    \"base\": \"minecraft:diamond_chestplate\",\n    \"addition\": \"minecraft:emerald\"\n  }\n}`,\n    keywords: ['recipe', 'smithing', 'trim', 'armor', 'decoration'],\n    stability: 'stable'\n  }\n];\n\n// =============================================================================\n// LOOT TABLE FUNCTIONS REGISTRY\n// =============================================================================\nexport const lootFunctions: LootFunction[] = [\n  {\n    name: 'set_count',\n    description: 'Sets the count of items in the loot drop.',\n    category: 'Loot',\n    subcategory: 'Quantity',\n    version: '1.12.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'count', type: 'range', description: 'Number of items (min, max)', required: true, example: { min: 1, max: 3 } }\n    ],\n    example: `{\n  \"function\": \"set_count\",\n  \"count\": {\n    \"min\": 1,\n    \"max\": 3\n  }\n}`,\n    keywords: ['loot', 'count', 'quantity', 'amount', 'number'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'set_damage',\n    description: 'Sets the damage/durability of items in the loot drop.',\n    category: 'Loot',\n    subcategory: 'Properties',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'damage', type: 'range', description: 'Damage value (0-1 where 1 is fully damaged)', required: true, example: { min: 0.2, max: 0.8 } }\n    ],\n    example: `{\n  \"function\": \"set_damage\",\n  \"damage\": {\n    \"min\": 0.2,\n    \"max\": 0.8\n  }\n}`,\n    keywords: ['loot', 'damage', 'durability', 'wear', 'condition'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'enchant_randomly',\n    description: 'Randomly enchants items with available enchantments.',\n    category: 'Loot',\n    subcategory: 'Enchantments',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'treasure', type: 'boolean', description: 'Include treasure enchantments', default: false, example: true }\n    ],\n    example: `{\n  \"function\": \"enchant_randomly\",\n  \"treasure\": true\n}`,\n    keywords: ['loot', 'enchant', 'random', 'magic', 'treasure'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'enchant_with_levels',\n    description: 'Enchants items as if using an enchanting table with specific levels.',\n    category: 'Loot',\n    subcategory: 'Enchantments',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'levels', type: 'range', description: 'Enchantment levels to use', required: true, example: { min: 20, max: 39 } },\n      { name: 'treasure', type: 'boolean', description: 'Include treasure enchantments', default: false, example: true }\n    ],\n    example: `{\n  \"function\": \"enchant_with_levels\",\n  \"levels\": {\n    \"min\": 20,\n    \"max\": 39\n  },\n  \"treasure\": true\n}`,\n    keywords: ['loot', 'enchant', 'levels', 'table', 'experience'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'looting_enchant',\n    description: 'Modifies loot based on the Looting enchantment level.',\n    category: 'Loot',\n    subcategory: 'Modifiers',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'count', type: 'range', description: 'Additional count per looting level', required: true, example: { min: 0, max: 1 } }\n    ],\n    example: `{\n  \"function\": \"looting_enchant\",\n  \"count\": {\n    \"min\": 0,\n    \"max\": 1\n  }\n}`,\n    keywords: ['loot', 'looting', 'enchant', 'bonus', 'modifier'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'set_data',\n    description: 'Sets the data value (block variant) for items.',\n    category: 'Loot',\n    subcategory: 'Properties',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'data', type: 'range', description: 'Data value to set', required: true, example: { min: 0, max: 15 } }\n    ],\n    example: `{\n  \"function\": \"set_data\",\n  \"data\": {\n    \"min\": 0,\n    \"max\": 15\n  }\n}`,\n    keywords: ['loot', 'data', 'variant', 'metadata', 'block'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'furnace_smelt',\n    description: 'Smelts the item as if it went through a furnace.',\n    category: 'Loot',\n    subcategory: 'Transformation',\n    version: '1.12.0',\n    difficulty: 'intermediate',\n    properties: [],\n    example: `{\n  \"function\": \"furnace_smelt\"\n}`,\n    keywords: ['loot', 'furnace', 'smelt', 'cook', 'transform'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'specific_enchants',\n    description: 'Applies specific enchantments with defined levels.',\n    category: 'Loot',\n    subcategory: 'Enchantments',\n    version: '1.12.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'enchants', type: 'array', description: 'List of specific enchantments', required: true, example: [{ id: 'sharpness', level: { min: 1, max: 5 } }] }\n    ],\n    example: `{\n  \"function\": \"specific_enchants\",\n  \"enchants\": [\n    {\n      \"id\": \"sharpness\",\n      \"level\": {\n        \"min\": 1,\n        \"max\": 5\n      }\n    },\n    {\n      \"id\": \"unbreaking\",\n      \"level\": 3\n    }\n  ]\n}`,\n    keywords: ['loot', 'enchant', 'specific', 'custom', 'defined'],\n    stability: 'stable'\n  }\n];\n\n// =============================================================================\n// BIOME COMPONENTS REGISTRY\n// =============================================================================\nexport const biomeComponents: BiomeComponent[] = [\n  {\n    name: 'minecraft:climate',\n    description: 'Defines the climate conditions of the biome.',\n    category: 'Biome',\n    subcategory: 'Climate',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'temperature', type: 'number', description: 'Temperature value (-0.5 to 2.0)', required: true, min: -0.5, max: 2.0, example: 0.8 },\n      { name: 'downfall', type: 'number', description: 'Rainfall/humidity (0.0 to 1.0)', required: true, min: 0.0, max: 1.0, example: 0.9 },\n      { name: 'snow_accumulation', type: 'range', description: 'Snow accumulation range', example: { min: 0.0, max: 0.1 } },\n      { name: 'blue_spores', type: 'number', description: 'Blue spore particle density', min: 0, max: 100, example: 0 },\n      { name: 'red_spores', type: 'number', description: 'Red spore particle density', min: 0, max: 100, example: 0 },\n      { name: 'white_ash', type: 'number', description: 'White ash particle density', min: 0, max: 100, example: 0 }\n    ],\n    example: `{\n  \"minecraft:climate\": {\n    \"temperature\": 0.8,\n    \"downfall\": 0.9,\n    \"snow_accumulation\": {\n      \"min\": 0.0,\n      \"max\": 0.1\n    }\n  }\n}`,\n    keywords: ['biome', 'climate', 'temperature', 'rainfall', 'weather'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:overworld_height',\n    description: 'Defines height generation rules for overworld biomes.',\n    category: 'Biome',\n    subcategory: 'Generation',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'noise_type', type: 'string', description: 'Type of noise generation', options: ['default', 'deep_ocean', 'default_mutated'], example: 'default' },\n      { name: 'noise_params', type: 'array', description: 'Noise generation parameters', example: [0.0, 0.0] }\n    ],\n    example: `{\n  \"minecraft:overworld_height\": {\n    \"noise_type\": \"default\",\n    \"noise_params\": [0.1, 0.3]\n  }\n}`,\n    keywords: ['biome', 'height', 'generation', 'terrain', 'noise'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:surface_parameters',\n    description: 'Defines surface block generation for the biome.',\n    category: 'Biome',\n    subcategory: 'Surface',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'top_material', type: 'string', description: 'Top surface material', required: true, example: 'minecraft:grass' },\n      { name: 'mid_material', type: 'string', description: 'Sub-surface material', required: true, example: 'minecraft:dirt' },\n      { name: 'foundation_material', type: 'string', description: 'Deep foundation material', example: 'minecraft:stone' },\n      { name: 'sea_floor_material', type: 'string', description: 'Sea floor material', example: 'minecraft:sand' },\n      { name: 'sea_floor_depth', type: 'number', description: 'Depth of sea floor layer', min: 1, max: 10, example: 3 },\n      { name: 'sea_material', type: 'string', description: 'Sea/ocean material', example: 'minecraft:water' }\n    ],\n    example: `{\n  \"minecraft:surface_parameters\": {\n    \"top_material\": \"minecraft:grass\",\n    \"mid_material\": \"minecraft:dirt\",\n    \"foundation_material\": \"minecraft:stone\",\n    \"sea_floor_material\": \"minecraft:sand\",\n    \"sea_floor_depth\": 3,\n    \"sea_material\": \"minecraft:water\"\n  }\n}`,\n    keywords: ['biome', 'surface', 'materials', 'blocks', 'generation'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:monster_spawning',\n    description: 'Controls hostile mob spawning in the biome.',\n    category: 'Biome',\n    subcategory: 'Spawning',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'monster_spawn_probability', type: 'number', description: 'Base monster spawn probability', min: 0, max: 1, example: 0.95 },\n      { name: 'monster_spawn_block_list', type: 'array', description: 'Blocks monsters can spawn on', example: ['minecraft:stone', 'minecraft:dirt'] }\n    ],\n    example: `{\n  \"minecraft:monster_spawning\": {\n    \"monster_spawn_probability\": 0.95,\n    \"monster_spawn_block_list\": [\n      {\n        \"name\": \"minecraft:stone\"\n      },\n      {\n        \"name\": \"minecraft:dirt\"\n      }\n    ]\n  }\n}`,\n    keywords: ['biome', 'monster', 'spawning', 'hostile', 'mobs'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:animal_spawning',\n    description: 'Controls passive animal spawning in the biome.',\n    category: 'Biome',\n    subcategory: 'Spawning',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'animal_spawn_probability', type: 'number', description: 'Base animal spawn probability', min: 0, max: 1, example: 0.07 },\n      { name: 'animal_spawn_block_list', type: 'array', description: 'Blocks animals can spawn on', example: ['minecraft:grass'] }\n    ],\n    example: `{\n  \"minecraft:animal_spawning\": {\n    \"animal_spawn_probability\": 0.07,\n    \"animal_spawn_block_list\": [\n      {\n        \"name\": \"minecraft:grass\"\n      }\n    ]\n  }\n}`,\n    keywords: ['biome', 'animal', 'spawning', 'passive', 'creatures'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:frozen_ocean_surface',\n    description: 'Generates frozen ice surface for ocean biomes.',\n    category: 'Biome',\n    subcategory: 'Special',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'ice_depth', type: 'number', description: 'Depth of ice layer', min: 1, max: 10, example: 1 }\n    ],\n    example: `{\n  \"minecraft:frozen_ocean_surface\": {\n    \"ice_depth\": 1\n  }\n}`,\n    keywords: ['biome', 'frozen', 'ice', 'ocean', 'surface'],\n    stability: 'stable'\n  }\n];\n\n// =============================================================================\n// SPAWN RULE COMPONENTS REGISTRY\n// =============================================================================\nexport const spawnRuleComponents: SpawnRuleComponent[] = [\n  {\n    name: 'minecraft:spawns_on_surface',\n    description: 'Allows spawning on the surface during specific conditions.',\n    category: 'Spawning',\n    subcategory: 'Surface',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [],\n    example: `{\n  \"minecraft:spawns_on_surface\": {}\n}`,\n    keywords: ['spawn', 'surface', 'ground', 'daylight'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:spawns_underground',\n    description: 'Allows spawning underground in caves and dark areas.',\n    category: 'Spawning',\n    subcategory: 'Underground',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [],\n    example: `{\n  \"minecraft:spawns_underground\": {}\n}`,\n    keywords: ['spawn', 'underground', 'caves', 'dark'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:spawns_underwater',\n    description: 'Allows spawning underwater in water bodies.',\n    category: 'Spawning',\n    subcategory: 'Aquatic',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [],\n    example: `{\n  \"minecraft:spawns_underwater\": {}\n}`,\n    keywords: ['spawn', 'underwater', 'aquatic', 'water'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:spawns_on_block_filter',\n    description: 'Specifies which blocks the entity can spawn on.',\n    category: 'Spawning',\n    subcategory: 'Blocks',\n    version: '1.8.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'allowed_blocks', type: 'array', description: 'List of allowed spawn blocks', required: true, example: ['minecraft:grass', 'minecraft:dirt'] }\n    ],\n    example: `{\n  \"minecraft:spawns_on_block_filter\": [\n    {\n      \"test\": \"has_component\",\n      \"subject\": \"block\",\n      \"operator\": \"==\",\n      \"value\": \"grass\"\n    }\n  ]\n}`,\n    keywords: ['spawn', 'block', 'filter', 'surface', 'conditions'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:spawns_above_block_filter',\n    description: 'Specifies blocks that must be below the spawn location.',\n    category: 'Spawning',\n    subcategory: 'Blocks',\n    version: '1.8.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'allowed_blocks', type: 'array', description: 'List of required blocks below', required: true, example: ['minecraft:stone', 'minecraft:dirt'] }\n    ],\n    example: `{\n  \"minecraft:spawns_above_block_filter\": [\n    {\n      \"test\": \"has_component\",\n      \"subject\": \"block\",\n      \"operator\": \"==\",\n      \"value\": \"stone\"\n    }\n  ]\n}`,\n    keywords: ['spawn', 'above', 'block', 'filter', 'requirements'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:brightness_filter',\n    description: 'Controls spawning based on light levels.',\n    category: 'Spawning',\n    subcategory: 'Light',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'min', type: 'number', description: 'Minimum light level', min: 0, max: 15, example: 0 },\n      { name: 'max', type: 'number', description: 'Maximum light level', min: 0, max: 15, example: 7 },\n      { name: 'adjust_for_weather', type: 'boolean', description: 'Adjust brightness for weather', default: true, example: false }\n    ],\n    example: `{\n  \"minecraft:brightness_filter\": {\n    \"min\": 0,\n    \"max\": 7,\n    \"adjust_for_weather\": true\n  }\n}`,\n    keywords: ['spawn', 'brightness', 'light', 'darkness', 'level'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:biome_filter',\n    description: 'Restricts spawning to specific biomes.',\n    category: 'Spawning',\n    subcategory: 'Biome',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'test', type: 'string', description: 'Test type', options: ['has_biome_tag'], example: 'has_biome_tag' },\n      { name: 'operator', type: 'string', description: 'Comparison operator', options: ['==', '!='], example: '==' },\n      { name: 'value', type: 'string', description: 'Biome tag or name', required: true, example: 'forest' }\n    ],\n    example: `{\n  \"minecraft:biome_filter\": {\n    \"test\": \"has_biome_tag\",\n    \"operator\": \"==\",\n    \"value\": \"forest\"\n  }\n}`,\n    keywords: ['spawn', 'biome', 'filter', 'environment', 'location'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:difficulty_filter',\n    description: 'Controls spawning based on world difficulty.',\n    category: 'Spawning',\n    subcategory: 'Difficulty',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'min', type: 'string', description: 'Minimum difficulty', options: ['peaceful', 'easy', 'normal', 'hard'], example: 'easy' },\n      { name: 'max', type: 'string', description: 'Maximum difficulty', options: ['peaceful', 'easy', 'normal', 'hard'], example: 'hard' }\n    ],\n    example: `{\n  \"minecraft:difficulty_filter\": {\n    \"min\": \"easy\",\n    \"max\": \"hard\"\n  }\n}`,\n    keywords: ['spawn', 'difficulty', 'challenge', 'level', 'world'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:weight',\n    description: 'Sets the spawn weight relative to other entities.',\n    category: 'Spawning',\n    subcategory: 'Probability',\n    version: '1.8.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'default', type: 'number', description: 'Default spawn weight', required: true, min: 0, max: 1000, example: 10 }\n    ],\n    example: `{\n  \"minecraft:weight\": {\n    \"default\": 10\n  }\n}`,\n    keywords: ['spawn', 'weight', 'probability', 'chance', 'frequency'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:herd',\n    description: 'Controls group spawning behavior.',\n    category: 'Spawning',\n    subcategory: 'Groups',\n    version: '1.8.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'min_size', type: 'number', description: 'Minimum herd size', required: true, min: 1, max: 32, example: 2 },\n      { name: 'max_size', type: 'number', description: 'Maximum herd size', required: true, min: 1, max: 32, example: 6 },\n      { name: 'event', type: 'string', description: 'Event to trigger for herd members', example: 'minecraft:entity_born' },\n      { name: 'event_skip_count', type: 'number', description: 'Number to skip for event', min: 0, max: 32, example: 1 }\n    ],\n    example: `{\n  \"minecraft:herd\": {\n    \"min_size\": 2,\n    \"max_size\": 6,\n    \"event\": \"minecraft:entity_born\",\n    \"event_skip_count\": 1\n  }\n}`,\n    keywords: ['spawn', 'herd', 'group', 'pack', 'together'],\n    stability: 'stable'\n  }\n];\n\n// Category definitions for all gameplay elements\nexport const gameplayCategories = {\n  'Crafting': {\n    name: 'Crafting Recipes',\n    description: 'Recipes for crafting tables and workbenches',\n    icon: '🔨',\n    subcategories: ['Shaped', 'Shapeless']\n  },\n  'Smelting': {\n    name: 'Smelting Recipes',\n    description: 'Furnace, blast furnace, and smoker recipes',\n    icon: '🔥',\n    subcategories: ['Furnace', 'BlastFurnace', 'Smoker', 'Campfire']\n  },\n  'Brewing': {\n    name: 'Brewing Recipes',\n    description: 'Potion brewing and alchemy recipes',\n    icon: '🧪',\n    subcategories: ['Potions', 'Containers']\n  },\n  'Smithing': {\n    name: 'Smithing Recipes',\n    description: 'Smithing table upgrades and modifications',\n    icon: '⚒️',\n    subcategories: ['Transform', 'Trim']\n  },\n  'Loot': {\n    name: 'Loot Tables',\n    description: 'Loot generation and modification functions',\n    icon: '💎',\n    subcategories: ['Quantity', 'Properties', 'Enchantments', 'Modifiers', 'Transformation']\n  },\n  'Trading': {\n    name: 'Trading Tables',\n    description: 'Villager and NPC trading configurations',\n    icon: '🤝',\n    subcategories: ['Villager', 'Wandering']\n  },\n  'Biome': {\n    name: 'Biome Components',\n    description: 'World generation and biome properties',\n    icon: '🌍',\n    subcategories: ['Climate', 'Generation', 'Surface', 'Spawning', 'Special']\n  },\n  'Spawning': {\n    name: 'Spawn Rules',\n    description: 'Entity spawning conditions and requirements',\n    icon: '🐛',\n    subcategories: ['Surface', 'Underground', 'Aquatic', 'Blocks', 'Light', 'Biome', 'Difficulty', 'Probability', 'Groups']\n  }\n};\n\n// Search functionality for all gameplay elements\nexport function searchGameplayElements(query: string, filters?: {\n  category?: string;\n  difficulty?: string;\n  stability?: string;\n}): (RecipeType | LootFunction | BiomeComponent | SpawnRuleComponent)[] {\n  const lowercaseQuery = query.toLowerCase();\n  \n  const allElements = [\n    ...recipeTypes,\n    ...lootFunctions,\n    ...biomeComponents,\n    ...spawnRuleComponents\n  ];\n  \n  return allElements.filter(element => {\n    // Text search\n    const matchesText = !query || \n      element.name.toLowerCase().includes(lowercaseQuery) ||\n      element.description.toLowerCase().includes(lowercaseQuery) ||\n      element.keywords.some(keyword => keyword.toLowerCase().includes(lowercaseQuery));\n    \n    // Filters\n    const matchesCategory = !filters?.category || element.category === filters.category;\n    const matchesDifficulty = !filters?.difficulty || element.difficulty === filters.difficulty;\n    const matchesStability = !filters?.stability || element.stability === filters.stability;\n    \n    return matchesText && matchesCategory && matchesDifficulty && matchesStability;\n  });\n}\n\n// Get elements by category\nexport function getGameplayElementsByCategory(category: string): (RecipeType | LootFunction | BiomeComponent | SpawnRuleComponent)[] {\n  const allElements = [\n    ...recipeTypes,\n    ...lootFunctions,\n    ...biomeComponents,\n    ...spawnRuleComponents\n  ];\n  \n  return allElements.filter(element => element.category === category);\n}\n\n// Template generation helpers\nexport function generateRecipeJSON(recipeType: string, properties: Record<string, any>): object {\n  return {\n    format_version: \"1.21.0\",\n    [recipeType]: {\n      description: {\n        identifier: properties.identifier || \"my_addon:custom_recipe\"\n      },\n      ...properties\n    }\n  };\n}\n\nexport function generateLootTableJSON(pools: Array<{ \n  rolls: { min: number; max: number }; \n  entries: Array<{ type: string; name: string; weight?: number; functions?: any[] }> \n}>): object {\n  return {\n    format_version: \"1.21.0\",\n    pools: pools.map(pool => ({\n      rolls: pool.rolls,\n      entries: pool.entries.map(entry => ({\n        type: entry.type,\n        name: entry.name,\n        weight: entry.weight || 1,\n        functions: entry.functions || []\n      }))\n    }))\n  };\n}\n\nexport function generateBiomeJSON(identifier: string, components: Array<{ name: string; properties: Record<string, any> }>): object {\n  const componentObj: Record<string, any> = {};\n  \n  components.forEach(component => {\n    componentObj[component.name] = component.properties;\n  });\n\n  return {\n    format_version: \"1.21.0\",\n    \"minecraft:biome\": {\n      description: {\n        identifier: identifier\n      },\n      components: componentObj\n    }\n  };\n}\n\nexport function generateSpawnRulesJSON(identifier: string, conditions: Array<{ name: string; properties: Record<string, any> }>): object {\n  const conditionsObj: Record<string, any> = {};\n  \n  conditions.forEach(condition => {\n    conditionsObj[condition.name] = condition.properties;\n  });\n\n  return {\n    format_version: \"1.21.0\",\n    \"minecraft:spawn_rules\": {\n      description: {\n        identifier: identifier\n      },\n      conditions: [conditionsObj]\n    }\n  };\n}\n\n// Export summary statistics\nexport const gameplayRegistryStats = {\n  totalRecipeTypes: recipeTypes.length,\n  totalLootFunctions: lootFunctions.length,\n  totalBiomeComponents: biomeComponents.length,\n  totalSpawnRuleComponents: spawnRuleComponents.length,\n  totalElements: recipeTypes.length + lootFunctions.length + biomeComponents.length + spawnRuleComponents.length,\n  categoryCounts: Object.keys(gameplayCategories).reduce((acc, category) => {\n    acc[category] = getGameplayElementsByCategory(category).length;\n    return acc;\n  }, {} as Record<string, number>)\n};","size_bytes":33592},"shared/itemRegistry.ts":{"content":"import { z } from 'zod';\n\n// Base component interface\nexport interface ItemComponentProperty {\n  name: string;\n  type: 'number' | 'boolean' | 'string' | 'array' | 'object' | 'range' | 'vector3' | 'effect';\n  description: string;\n  required?: boolean;\n  default?: any;\n  min?: number;\n  max?: number;\n  options?: string[];\n  example?: any;\n}\n\nexport interface ItemComponent {\n  name: string;\n  description: string;\n  category: string;\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: ItemComponentProperty[];\n  example: string;\n  documentation?: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n  dependencies?: string[];\n  conflicts?: string[];\n}\n\n// Zod schemas for validation\nexport const ItemComponentPropertySchema = z.object({\n  name: z.string(),\n  type: z.enum(['number', 'boolean', 'string', 'array', 'object', 'range', 'vector3', 'effect']),\n  description: z.string(),\n  required: z.boolean().optional(),\n  default: z.any().optional(),\n  min: z.number().optional(),\n  max: z.number().optional(),\n  options: z.array(z.string()).optional(),\n  example: z.any().optional(),\n});\n\nexport const ItemComponentSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  category: z.string(),\n  subcategory: z.string().optional(),\n  version: z.string(),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']),\n  properties: z.array(ItemComponentPropertySchema),\n  example: z.string(),\n  documentation: z.string().optional(),\n  keywords: z.array(z.string()),\n  stability: z.enum(['stable', 'experimental', 'beta']),\n  dependencies: z.array(z.string()).optional(),\n  conflicts: z.array(z.string()).optional(),\n});\n\n// Comprehensive Item Components Registry\nexport const itemComponents: ItemComponent[] = [\n  // =============================================================================\n  // CORE COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:icon',\n    description: 'Defines the texture/icon for the item in inventories and UI.',\n    category: 'Core',\n    subcategory: 'Visual',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'texture', type: 'string', description: 'Texture name/path for the item icon', required: true, example: 'my_custom_item' }\n    ],\n    example: `{\n  \"minecraft:icon\": {\n    \"texture\": \"my_custom_item\"\n  }\n}`,\n    keywords: ['icon', 'texture', 'visual', 'sprite', 'image'],\n    stability: 'stable',\n    documentation: 'https://docs.microsoft.com/en-us/minecraft/creator/reference/content/itemreference/examples/itemcomponents/minecrafticon'\n  },\n\n  {\n    name: 'minecraft:display_name',\n    description: 'Sets the display name shown for the item.',\n    category: 'Core',\n    subcategory: 'Identity',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'string', description: 'The display name to show', required: true, example: 'My Custom Item' }\n    ],\n    example: `{\n  \"minecraft:display_name\": {\n    \"value\": \"My Custom Item\"\n  }\n}`,\n    keywords: ['display', 'name', 'title', 'label', 'text'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:max_stack_size',\n    description: 'Defines the maximum number of items that can be stacked.',\n    category: 'Core',\n    subcategory: 'Stacking',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'number', description: 'Maximum stack size', required: true, min: 1, max: 64, default: 64, example: 16 }\n    ],\n    example: `{\n  \"minecraft:max_stack_size\": {\n    \"value\": 16\n  }\n}`,\n    keywords: ['stack', 'size', 'count', 'quantity', 'max'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:hand_equipped',\n    description: 'Determines whether the item is rendered in the player\\'s hand.',\n    category: 'Core',\n    subcategory: 'Visual',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'boolean', description: 'Whether item shows in hand', required: true, default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:hand_equipped\": {\n    \"value\": true\n  }\n}`,\n    keywords: ['hand', 'equipped', 'render', 'visual', 'hold'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:use_duration',\n    description: 'Defines how long it takes to use the item.',\n    category: 'Core',\n    subcategory: 'Usage',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'value', type: 'number', description: 'Use duration in seconds', required: true, min: 0, max: 600, example: 1.6 }\n    ],\n    example: `{\n  \"minecraft:use_duration\": {\n    \"value\": 1.6\n  }\n}`,\n    keywords: ['use', 'duration', 'time', 'consume', 'cast'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:cooldown',\n    description: 'Adds a cooldown period after using the item.',\n    category: 'Core',\n    subcategory: 'Usage',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'category', type: 'string', description: 'Cooldown category name', required: true, example: 'ender_pearl' },\n      { name: 'duration', type: 'number', description: 'Cooldown duration in seconds', required: true, min: 0, max: 3600, example: 1.0 }\n    ],\n    example: `{\n  \"minecraft:cooldown\": {\n    \"category\": \"ender_pearl\",\n    \"duration\": 1.0\n  }\n}`,\n    keywords: ['cooldown', 'delay', 'timer', 'recharge', 'wait'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // FOOD COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:food',\n    description: 'Makes the item consumable as food with nutritional properties.',\n    category: 'Food',\n    subcategory: 'Nutrition',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'nutrition', type: 'number', description: 'Hunger points restored', required: true, min: 0, max: 20, example: 4 },\n      { name: 'saturation_modifier', type: 'number', description: 'Saturation modifier', required: true, min: 0, max: 2, example: 0.6 },\n      { name: 'can_always_eat', type: 'boolean', description: 'Can eat even when full', default: false, example: true },\n      { name: 'using_converts_to', type: 'string', description: 'Item to convert to when eaten', example: 'minecraft:bowl' },\n      { name: 'effects', type: 'array', description: 'Status effects when consumed', example: [] }\n    ],\n    example: `{\n  \"minecraft:food\": {\n    \"nutrition\": 4,\n    \"saturation_modifier\": 0.6,\n    \"can_always_eat\": false,\n    \"using_converts_to\": \"minecraft:bowl\",\n    \"effects\": [\n      {\n        \"name\": \"regeneration\",\n        \"chance\": 1.0,\n        \"duration\": 5,\n        \"amplifier\": 1\n      }\n    ]\n  }\n}`,\n    keywords: ['food', 'eat', 'nutrition', 'hunger', 'saturation', 'consume'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // WEAPON COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:weapon',\n    description: 'Defines weapon properties and damage values.',\n    category: 'Combat',\n    subcategory: 'Weapons',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'on_hit_entity', type: 'object', description: 'Actions when hitting an entity', example: { event: 'my_item:on_hit', target: 'other' } },\n      { name: 'on_hurt_entity', type: 'object', description: 'Actions when hurting an entity', example: { event: 'my_item:on_hurt' } },\n      { name: 'on_not_hurt_entity', type: 'object', description: 'Actions when not hurting an entity', example: { event: 'my_item:on_miss' } }\n    ],\n    example: `{\n  \"minecraft:weapon\": {\n    \"on_hit_entity\": {\n      \"event\": \"my_item:on_hit\",\n      \"target\": \"other\"\n    },\n    \"on_hurt_entity\": {\n      \"event\": \"my_item:on_hurt\",\n      \"target\": \"self\"\n    }\n  }\n}`,\n    keywords: ['weapon', 'combat', 'damage', 'attack', 'hit'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:projectile',\n    description: 'Makes the item launchable as a projectile.',\n    category: 'Combat',\n    subcategory: 'Projectiles',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'minimum_critical_power', type: 'number', description: 'Minimum power for critical hit', default: 0.5, min: 0, max: 1, example: 0.8 },\n      { name: 'projectile_entity', type: 'string', description: 'Entity spawned as projectile', required: true, example: 'minecraft:arrow' }\n    ],\n    example: `{\n  \"minecraft:projectile\": {\n    \"minimum_critical_power\": 0.8,\n    \"projectile_entity\": \"minecraft:arrow\"\n  }\n}`,\n    keywords: ['projectile', 'launch', 'shoot', 'arrow', 'throw'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:throwable',\n    description: 'Makes the item throwable like snowballs or eggs.',\n    category: 'Combat',\n    subcategory: 'Projectiles',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'do_swing_animation', type: 'boolean', description: 'Play swing animation when throwing', default: false, example: true },\n      { name: 'launch_power_scale', type: 'number', description: 'Scale factor for launch power', default: 1.0, min: 0, max: 10, example: 1.5 },\n      { name: 'max_draw_duration', type: 'number', description: 'Maximum draw duration', default: 0, min: 0, max: 20, example: 3.0 },\n      { name: 'max_launch_power', type: 'number', description: 'Maximum launch power', default: 1.0, min: 0, max: 10, example: 2.0 },\n      { name: 'min_launch_power', type: 'number', description: 'Minimum launch power', default: 0.1, min: 0, max: 10, example: 0.5 },\n      { name: 'scale_power_by_draw_duration', type: 'boolean', description: 'Scale power by draw time', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:throwable\": {\n    \"do_swing_animation\": true,\n    \"launch_power_scale\": 1.5,\n    \"max_draw_duration\": 3.0,\n    \"max_launch_power\": 2.0,\n    \"min_launch_power\": 0.5,\n    \"scale_power_by_draw_duration\": true\n  }\n}`,\n    keywords: ['throwable', 'throw', 'launch', 'projectile', 'toss'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // ARMOR COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:armor',\n    description: 'Defines armor protection and properties.',\n    category: 'Combat',\n    subcategory: 'Armor',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'protection', type: 'number', description: 'Armor protection points', required: true, min: 0, max: 20, example: 3 }\n    ],\n    example: `{\n  \"minecraft:armor\": {\n    \"protection\": 3\n  }\n}`,\n    keywords: ['armor', 'protection', 'defense', 'damage', 'reduce'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:wearable',\n    description: 'Allows the item to be equipped in armor slots.',\n    category: 'Combat',\n    subcategory: 'Armor',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'slot', type: 'string', description: 'Equipment slot', required: true, options: ['slot.armor.head', 'slot.armor.chest', 'slot.armor.legs', 'slot.armor.feet'], example: 'slot.armor.head' },\n      { name: 'dispensable', type: 'boolean', description: 'Can be dispensed by dispensers', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:wearable\": {\n    \"slot\": \"slot.armor.head\",\n    \"dispensable\": true\n  }\n}`,\n    keywords: ['wearable', 'equip', 'armor', 'slot', 'equipment'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // TOOL COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:tool',\n    description: 'Defines tool properties and mining capabilities.',\n    category: 'Tools',\n    subcategory: 'Mining',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'damage_per_block', type: 'number', description: 'Durability damage per block mined', default: 1, min: 0, max: 1000, example: 2 },\n      { name: 'speed_multiplier', type: 'number', description: 'Mining speed multiplier', default: 1.0, min: 0, max: 100, example: 8.0 }\n    ],\n    example: `{\n  \"minecraft:tool\": {\n    \"damage_per_block\": 1,\n    \"speed_multiplier\": 8.0\n  }\n}`,\n    keywords: ['tool', 'mining', 'dig', 'harvest', 'efficiency'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:digger',\n    description: 'Defines which blocks the tool can efficiently mine.',\n    category: 'Tools',\n    subcategory: 'Mining',\n    version: '1.16.0',\n    difficulty: 'advanced',\n    properties: [\n      { name: 'use_efficiency', type: 'boolean', description: 'Whether to use efficiency enchantment', default: false, example: true },\n      { name: 'destroy_speeds', type: 'array', description: 'Block-specific destroy speeds', required: true, example: [{ block: 'minecraft:dirt', speed: 6 }] }\n    ],\n    example: `{\n  \"minecraft:digger\": {\n    \"use_efficiency\": true,\n    \"destroy_speeds\": [\n      {\n        \"block\": {\n          \"tags\": \"q.any_tag('stone', 'metal')\"\n        },\n        \"speed\": 6\n      },\n      {\n        \"block\": \"minecraft:dirt\",\n        \"speed\": 10\n      }\n    ]\n  }\n}`,\n    keywords: ['digger', 'mining', 'destroy', 'blocks', 'efficiency'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:durability',\n    description: 'Adds durability to tools, weapons, and armor.',\n    category: 'Tools',\n    subcategory: 'Durability',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'max_durability', type: 'number', description: 'Maximum durability points', required: true, min: 1, max: 32767, example: 250 },\n      { name: 'damage_chance', type: 'object', description: 'Chance for damage to occur', example: { min: 10, max: 50 } }\n    ],\n    example: `{\n  \"minecraft:durability\": {\n    \"max_durability\": 250,\n    \"damage_chance\": {\n      \"min\": 10,\n      \"max\": 50\n    }\n  }\n}`,\n    keywords: ['durability', 'damage', 'wear', 'repair', 'break'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // ENHANCEMENT COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:enchantable',\n    description: 'Allows the item to be enchanted with specific enchantments.',\n    category: 'Enhancement',\n    subcategory: 'Enchantments',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'value', type: 'number', description: 'Enchantability value', required: true, min: 0, max: 50, example: 15 },\n      { name: 'slot', type: 'string', description: 'Enchantment slot category', required: true, options: ['sword', 'bow', 'crossbow', 'trident', 'tool', 'armor_head', 'armor_torso', 'armor_feet', 'armor_legs', 'all', 'elytra', 'fishing_rod', 'flintsteel', 'hoe', 'pickaxe', 'axe', 'shovel', 'shears'], example: 'sword' }\n    ],\n    example: `{\n  \"minecraft:enchantable\": {\n    \"value\": 15,\n    \"slot\": \"sword\"\n  }\n}`,\n    keywords: ['enchantable', 'enchant', 'magic', 'enhancement', 'upgrade'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:repairable',\n    description: 'Allows the item to be repaired with specific materials.',\n    category: 'Enhancement',\n    subcategory: 'Repair',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'repair_items', type: 'array', description: 'Items that can repair this item', required: true, example: [{ items: ['minecraft:iron_ingot'], repair_amount: 25 }] }\n    ],\n    example: `{\n  \"minecraft:repairable\": {\n    \"repair_items\": [\n      {\n        \"items\": [\"minecraft:iron_ingot\"],\n        \"repair_amount\": 25\n      },\n      {\n        \"items\": [\"minecraft:iron_block\"],\n        \"repair_amount\": 100\n      }\n    ]\n  }\n}`,\n    keywords: ['repairable', 'repair', 'fix', 'restore', 'materials'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // UTILITY COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:fuel',\n    description: 'Allows the item to be used as fuel in furnaces.',\n    category: 'Utility',\n    subcategory: 'Fuel',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'duration', type: 'number', description: 'Burn time in seconds', required: true, min: 0.05, max: 32767, example: 10.0 }\n    ],\n    example: `{\n  \"minecraft:fuel\": {\n    \"duration\": 10.0\n  }\n}`,\n    keywords: ['fuel', 'burn', 'furnace', 'smelting', 'energy'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:entity_placer',\n    description: 'Allows the item to place/spawn entities when used.',\n    category: 'Utility',\n    subcategory: 'Placement',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'entity', type: 'string', description: 'Entity to spawn', required: true, example: 'minecraft:pig' },\n      { name: 'use_on', type: 'array', description: 'Block types this can be used on', example: ['minecraft:grass', 'minecraft:dirt'] },\n      { name: 'dispense_on', type: 'array', description: 'Block types this can be dispensed on', example: ['minecraft:grass'] }\n    ],\n    example: `{\n  \"minecraft:entity_placer\": {\n    \"entity\": \"minecraft:pig\",\n    \"use_on\": [\n      \"minecraft:grass\",\n      \"minecraft:dirt\"\n    ],\n    \"dispense_on\": [\n      \"minecraft:grass\"\n    ]\n  }\n}`,\n    keywords: ['entity', 'placer', 'spawn', 'summon', 'mob'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:block_placer',\n    description: 'Allows the item to place blocks when used.',\n    category: 'Utility',\n    subcategory: 'Placement',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'block', type: 'string', description: 'Block to place', required: true, example: 'minecraft:dirt' },\n      { name: 'use_block_description', type: 'boolean', description: 'Use block description as item description', default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:block_placer\": {\n    \"block\": \"minecraft:dirt\",\n    \"use_block_description\": true\n  }\n}`,\n    keywords: ['block', 'placer', 'place', 'build', 'construction'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // INTERACTIVE COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:interact_button',\n    description: 'Adds interaction text when looking at the item.',\n    category: 'Interactive',\n    subcategory: 'UI',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'button_text', type: 'string', description: 'Text shown on interaction button', required: true, example: 'action.interact.use' },\n      { name: 'new_interaction_text', type: 'string', description: 'Text for new interaction', example: 'action.interact.new' }\n    ],\n    example: `{\n  \"minecraft:interact_button\": {\n    \"button_text\": \"action.interact.use\",\n    \"new_interaction_text\": \"action.interact.new\"\n  }\n}`,\n    keywords: ['interact', 'button', 'text', 'ui', 'interface'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:use_animation',\n    description: 'Defines the animation played when using the item.',\n    category: 'Interactive',\n    subcategory: 'Animation',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'string', description: 'Animation type', required: true, options: ['eat', 'drink', 'block', 'bow', 'spear', 'crossbow', 'spyglass', 'brush', 'none'], example: 'eat' }\n    ],\n    example: `{\n  \"minecraft:use_animation\": {\n    \"value\": \"eat\"\n  }\n}`,\n    keywords: ['use', 'animation', 'action', 'visual', 'motion'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // RECORD COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:record',\n    description: 'Makes the item playable in jukeboxes as a music disc.',\n    category: 'Interactive',\n    subcategory: 'Music',\n    version: '1.16.0',\n    difficulty: 'intermediate',\n    properties: [\n      { name: 'sound_event', type: 'string', description: 'Sound event to play', required: true, example: 'record.cat' },\n      { name: 'duration', type: 'number', description: 'Duration of the track in seconds', required: true, min: 1, max: 3600, example: 185 },\n      { name: 'comparator_signal', type: 'number', description: 'Redstone comparator signal strength', default: 1, min: 1, max: 15, example: 1 }\n    ],\n    example: `{\n  \"minecraft:record\": {\n    \"sound_event\": \"record.cat\",\n    \"duration\": 185,\n    \"comparator_signal\": 1\n  }\n}`,\n    keywords: ['record', 'music', 'disc', 'jukebox', 'sound'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // TAGS & PROPERTIES\n  // =============================================================================\n  {\n    name: 'minecraft:tags',\n    description: 'Adds tags to the item for grouping and filtering.',\n    category: 'Utility',\n    subcategory: 'Organization',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'tags', type: 'array', description: 'List of tags to add', required: true, example: ['minecraft:logs', 'minecraft:planks'] }\n    ],\n    example: `{\n  \"minecraft:tags\": {\n    \"tags\": [\n      \"minecraft:logs\",\n      \"minecraft:planks\",\n      \"custom:my_group\"\n    ]\n  }\n}`,\n    keywords: ['tags', 'group', 'filter', 'category', 'organize'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:glint',\n    description: 'Adds an enchantment glint effect to the item.',\n    category: 'Visual',\n    subcategory: 'Effects',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'boolean', description: 'Whether to show glint effect', required: true, default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:glint\": {\n    \"value\": true\n  }\n}`,\n    keywords: ['glint', 'enchant', 'shine', 'effect', 'visual'],\n    stability: 'stable'\n  },\n\n  {\n    name: 'minecraft:foil',\n    description: 'Adds a foil effect similar to enchanted items.',\n    category: 'Visual',\n    subcategory: 'Effects',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'value', type: 'boolean', description: 'Whether to show foil effect', required: true, default: false, example: true }\n    ],\n    example: `{\n  \"minecraft:foil\": {\n    \"value\": true\n  }\n}`,\n    keywords: ['foil', 'shine', 'effect', 'enchant', 'glint'],\n    stability: 'stable'\n  },\n\n  // =============================================================================\n  // CREATIVE ONLY COMPONENTS\n  // =============================================================================\n  {\n    name: 'minecraft:creative_category',\n    description: 'Defines which creative inventory tab the item appears in.',\n    category: 'Utility',\n    subcategory: 'Creative',\n    version: '1.16.0',\n    difficulty: 'beginner',\n    properties: [\n      { name: 'parent', type: 'string', description: 'Parent creative category', required: true, options: ['itemGroup.name.building', 'itemGroup.name.decoration', 'itemGroup.name.redstone', 'itemGroup.name.transportation', 'itemGroup.name.miscFoodAndDrinks', 'itemGroup.name.search', 'itemGroup.name.tools', 'itemGroup.name.combat', 'itemGroup.name.brewing', 'itemGroup.name.materials', 'itemGroup.name.items'], example: 'itemGroup.name.tools' },\n      { name: 'category', type: 'string', description: 'Specific category within parent', example: 'equipment' }\n    ],\n    example: `{\n  \"minecraft:creative_category\": {\n    \"parent\": \"itemGroup.name.tools\",\n    \"category\": \"equipment\"\n  }\n}`,\n    keywords: ['creative', 'category', 'inventory', 'tab', 'group'],\n    stability: 'stable'\n  }\n];\n\n// Item category definitions\nexport const itemCategories = {\n  'Core': {\n    name: 'Core Properties',\n    description: 'Essential item properties and basic functionality',\n    icon: '⚙️',\n    subcategories: ['Visual', 'Identity', 'Stacking', 'Usage']\n  },\n  'Food': {\n    name: 'Food & Consumables',\n    description: 'Components for edible items and consumables',\n    icon: '🍎',\n    subcategories: ['Nutrition', 'Effects', 'Consumption']\n  },\n  'Combat': {\n    name: 'Combat & Defense',\n    description: 'Weapons, armor, and combat-related components',\n    icon: '⚔️',\n    subcategories: ['Weapons', 'Armor', 'Projectiles']\n  },\n  'Tools': {\n    name: 'Tools & Equipment',\n    description: 'Mining tools, equipment, and durability',\n    icon: '🔨',\n    subcategories: ['Mining', 'Durability', 'Efficiency']\n  },\n  'Enhancement': {\n    name: 'Enhancement & Upgrades',\n    description: 'Enchantments, repairs, and item improvements',\n    icon: '✨',\n    subcategories: ['Enchantments', 'Repair', 'Upgrades']\n  },\n  'Utility': {\n    name: 'Utility & Special',\n    description: 'Fuel, placement, and utility functions',\n    icon: '🔧',\n    subcategories: ['Fuel', 'Placement', 'Creative', 'Organization']\n  },\n  'Interactive': {\n    name: 'Interactive & UI',\n    description: 'User interaction and interface components',\n    icon: '🤝',\n    subcategories: ['UI', 'Animation', 'Music']\n  },\n  'Visual': {\n    name: 'Visual Effects',\n    description: 'Visual enhancements and special effects',\n    icon: '🎨',\n    subcategories: ['Effects', 'Appearance']\n  }\n};\n\n// Common item properties and presets\nexport const itemPresets = {\n  food: {\n    required: ['minecraft:food', 'minecraft:use_animation'],\n    optional: ['minecraft:use_duration', 'minecraft:display_name'],\n    defaults: {\n      'minecraft:use_animation': { value: 'eat' },\n      'minecraft:use_duration': { value: 1.6 }\n    }\n  },\n  weapon: {\n    required: ['minecraft:weapon', 'minecraft:durability'],\n    optional: ['minecraft:enchantable', 'minecraft:repairable'],\n    defaults: {\n      'minecraft:enchantable': { value: 10, slot: 'sword' }\n    }\n  },\n  tool: {\n    required: ['minecraft:tool', 'minecraft:durability', 'minecraft:digger'],\n    optional: ['minecraft:enchantable', 'minecraft:repairable'],\n    defaults: {\n      'minecraft:enchantable': { value: 14, slot: 'tool' }\n    }\n  },\n  armor: {\n    required: ['minecraft:armor', 'minecraft:wearable', 'minecraft:durability'],\n    optional: ['minecraft:enchantable', 'minecraft:repairable'],\n    defaults: {\n      'minecraft:enchantable': { value: 9, slot: 'armor_head' }\n    }\n  }\n};\n\n// Effect types for food and potions\nexport const effectTypes = [\n  'speed', 'slowness', 'haste', 'mining_fatigue', 'strength', 'instant_health',\n  'instant_damage', 'jump_boost', 'nausea', 'regeneration', 'resistance',\n  'fire_resistance', 'water_breathing', 'invisibility', 'blindness', 'night_vision',\n  'hunger', 'weakness', 'poison', 'wither', 'health_boost', 'absorption',\n  'saturation', 'levitation', 'fatal_poison', 'slow_falling'\n];\n\n// Search functionality\nexport function searchItemComponents(query: string, filters?: {\n  category?: string;\n  difficulty?: string;\n  stability?: string;\n}): ItemComponent[] {\n  const lowercaseQuery = query.toLowerCase();\n  \n  return itemComponents.filter(component => {\n    // Text search\n    const matchesText = !query || \n      component.name.toLowerCase().includes(lowercaseQuery) ||\n      component.description.toLowerCase().includes(lowercaseQuery) ||\n      component.keywords.some(keyword => keyword.toLowerCase().includes(lowercaseQuery));\n    \n    // Filters\n    const matchesCategory = !filters?.category || component.category === filters.category;\n    const matchesDifficulty = !filters?.difficulty || component.difficulty === filters.difficulty;\n    const matchesStability = !filters?.stability || component.stability === filters.stability;\n    \n    return matchesText && matchesCategory && matchesDifficulty && matchesStability;\n  });\n}\n\n// Get component by name\nexport function getItemComponent(name: string): ItemComponent | undefined {\n  return itemComponents.find(component => component.name === name);\n}\n\n// Get components by category\nexport function getItemComponentsByCategory(category: string): ItemComponent[] {\n  return itemComponents.filter(component => component.category === category);\n}\n\n// Template generation helper\nexport function generateItemComponentJSON(componentName: string, properties: Record<string, any>): object {\n  const component = getItemComponent(componentName);\n  if (!component) {\n    throw new Error(`Component ${componentName} not found`);\n  }\n\n  return {\n    [componentName]: properties\n  };\n}\n\n// Generate complete item JSON\nexport function generateItemJSON(identifier: string, components: Array<{ name: string; properties: Record<string, any> }>): object {\n  const componentObj: Record<string, any> = {};\n  \n  components.forEach(component => {\n    componentObj[component.name] = component.properties;\n  });\n\n  return {\n    format_version: \"1.21.0\",\n    \"minecraft:item\": {\n      description: {\n        identifier: identifier,\n        menu_category: {\n          category: \"items\"\n        }\n      },\n      components: componentObj\n    }\n  };\n}\n\n// Validate item preset requirements\nexport function validateItemPreset(presetName: string, components: string[]): { valid: boolean; missing: string[]; suggestions: string[] } {\n  const preset = itemPresets[presetName as keyof typeof itemPresets];\n  if (!preset) {\n    return { valid: false, missing: [], suggestions: [] };\n  }\n\n  const missing = preset.required.filter(req => !components.includes(req));\n  const suggestions = preset.optional.filter(opt => !components.includes(opt));\n\n  return {\n    valid: missing.length === 0,\n    missing,\n    suggestions\n  };\n}\n\n// Export summary statistics\nexport const itemRegistryStats = {\n  totalComponents: itemComponents.length,\n  categoryCounts: Object.keys(itemCategories).reduce((acc, category) => {\n    acc[category] = getItemComponentsByCategory(category).length;\n    return acc;\n  }, {} as Record<string, number>),\n  difficultyLevels: ['beginner', 'intermediate', 'advanced'].reduce((acc, difficulty) => {\n    acc[difficulty] = itemComponents.filter(c => c.difficulty === difficulty).length;\n    return acc;\n  }, {} as Record<string, number>),\n  stabilityLevels: ['stable', 'experimental', 'beta'].reduce((acc, stability) => {\n    acc[stability] = itemComponents.filter(c => c.stability === stability).length;\n    return acc;\n  }, {} as Record<string, number>),\n  totalPresets: Object.keys(itemPresets).length,\n  totalEffectTypes: effectTypes.length\n};","size_bytes":30921},"shared/minecraftRegistry.ts":{"content":"/**\n * Generated Minecraft Script API Registry\n * Generated on: 2025-09-18T04:47:52.701Z\n * Source: all minecraft script info_1758169723748.txt\n * Total Elements: 476\n */\n\nimport { ScriptRegistry } from './scriptRegistry';\n\nexport const minecraftRegistry: ScriptRegistry = {\n  \"metadata\": {\n    \"generatedAt\": \"2025-09-18T04:47:52.698Z\",\n    \"sourceFile\": \"all minecraft script info_1758169723748.txt\",\n    \"totalElements\": 476,\n    \"modules\": [\n      \"@minecraft/server\",\n      \"@minecraft/server-admin\",\n      \"@minecraft/server-net\",\n      \"@minecraft/server-ui\"\n    ],\n    \"parserVersion\": \"1.0.0\"\n  },\n  \"modules\": {\n    \"@minecraft/server\": {\n      \"module\": \"@minecraft/server\",\n      \"version\": \"2.2.0\",\n      \"description\": \"Contains many types related to manipulating a Minecraft world, including entities, blocks, dimensions, and more.\",\n      \"elements\": [\n        {\n          \"id\": \"@minecraft/server.BlockComponentTypes\",\n          \"name\": \"BlockComponentTypes\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The types of block components that are accessible via\\r function Block.getComponent.\\r /\",\n          \"definition\": \"export enum BlockComponentTypes {\\n    FluidContainer = 'minecraft:fluid_container',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Represents the inventory of a block in the world. Used with\\r\\n     * blocks like chests.\\r\\n     *\\r\\n     */\\r\\n    Inventory = 'minecraft:inventory',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When present, this block has piston-like behavior. Contains\\r\\n     * additional properties for discovering block piston state.\\r\\n     *\\r\\n     */\\r\\n    Piston = 'minecraft:piston',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Represents a block that can play a record.\\r\\n     *\\r\\n     */\\r\\n    RecordPlayer = 'minecraft:record_player',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Represents a block that can display text on it.\\r\\n     *\\r\\n     */\\r\\n    Sign = 'minecraft:sign',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The types of block components that are accessible via\\r\\n * function Block.getComponent.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"FluidContainer\",\n              \"value\": \"minecraft:fluid_container\"\n            },\n            {\n              \"name\": \"Inventory\",\n              \"value\": \"minecraft:inventory\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Piston\",\n              \"value\": \"minecraft:piston\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"RecordPlayer\",\n              \"value\": \"minecraft:record_player\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Sign\",\n              \"value\": \"minecraft:sign\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponenttypes\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockPistonState\",\n          \"name\": \"BlockPistonState\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"An enumeration describing the state of a block piston.\\r /\",\n          \"definition\": \"export enum BlockPistonState {\\n    /**\\r\\n     * @remarks\\r\\n     * Whether the piston is fully expanded.\\r\\n     *\\r\\n     */\\r\\n    Expanded = 'Expanded',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Whether the piston is in the process of expanding.\\r\\n     *\\r\\n     */\\r\\n    Expanding = 'Expanding',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Whether the piston is fully retracted.\\r\\n     *\\r\\n     */\\r\\n    Retracted = 'Retracted',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Whether the piston is in the process of retracting.\\r\\n     *\\r\\n     */\\r\\n    Retracting = 'Retracting',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * An enumeration describing the state of a block piston.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Expanded\",\n              \"value\": \"Expanded\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Expanding\",\n              \"value\": \"Expanding\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Retracted\",\n              \"value\": \"Retracted\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Retracting\",\n              \"value\": \"Retracting\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockpistonstate\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockVolumeIntersection\",\n          \"name\": \"BlockVolumeIntersection\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Description of the resulting intersection test on two\\r BlockVolume objects\\r /\",\n          \"definition\": \"export enum BlockVolumeIntersection {\\n    /**\\r\\n     * @remarks\\r\\n     * Volume B has no intersection points with Volume A\\r\\n     *\\r\\n     */\\r\\n    Disjoint = 0,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Volume B resides completely inside Volume A\\r\\n     *\\r\\n     */\\r\\n    Contains = 1,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Volume B partially intersects Volume A\\r\\n     *\\r\\n     */\\r\\n    Intersects = 2,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Description of the resulting intersection test on two\\r\\n * BlockVolume objects\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Disjoint\",\n              \"value\": 0,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Contains\",\n              \"value\": 1,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Intersects\",\n              \"value\": 2,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockvolumeintersection\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ButtonState\",\n          \"name\": \"ButtonState\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The state of a button on a keyboard, controller, or touch\\r interface.\\r /\",\n          \"definition\": \"export enum ButtonState {\\n    Pressed = 'Pressed',\\r\\n    Released = 'Released',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The state of a button on a keyboard, controller, or touch\\r\\n * interface.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Pressed\",\n              \"value\": \"Pressed\"\n            },\n            {\n              \"name\": \"Released\",\n              \"value\": \"Released\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"buttonstate\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CommandPermissionLevel\",\n          \"name\": \"CommandPermissionLevel\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The required permission level to execute the custom command.\\r /\",\n          \"definition\": \"export enum CommandPermissionLevel {\\n    /**\\r\\n     * @remarks\\r\\n     * Anything can run this level.\\r\\n     *\\r\\n     */\\r\\n    Any = 0,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Any operator can run this command, including command blocks.\\r\\n     *\\r\\n     */\\r\\n    GameDirectors = 1,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Any operator can run this command, but NOT command blocks.\\r\\n     *\\r\\n     */\\r\\n    Admin = 2,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Any server host can run this command.\\r\\n     *\\r\\n     */\\r\\n    Host = 3,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Only dedicated server can run this command.\\r\\n     *\\r\\n     */\\r\\n    Owner = 4,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The required permission level to execute the custom command.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Any\",\n              \"value\": 0,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"GameDirectors\",\n              \"value\": 1,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Admin\",\n              \"value\": 2,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Host\",\n              \"value\": 3,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Owner\",\n              \"value\": 4,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"commandpermissionlevel\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CustomCommandErrorReason\",\n          \"name\": \"CustomCommandErrorReason\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Reason why custom command registration failed.\\r /\",\n          \"definition\": \"export enum CustomCommandErrorReason {\\n    /**\\r\\n     * @remarks\\r\\n     * Command name already registered.\\r\\n     *\\r\\n     */\\r\\n    AlreadyRegistered = 'AlreadyRegistered',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Custom Command references an enum that has not been\\r\\n     * registered.\\r\\n     *\\r\\n     */\\r\\n    EnumDependencyMissing = 'EnumDependencyMissing',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Supplied Custom Command namespace does not match previous\\r\\n     * registrations for this add-on.\\r\\n     *\\r\\n     */\\r\\n    NamespaceMismatch = 'NamespaceMismatch',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Too many command parameters defined in CustomCommand.\\r\\n     *\\r\\n     */\\r\\n    ParameterLimit = 'ParameterLimit',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Custom command registry can not be accessed after world\\r\\n     * initialized event.\\r\\n     *\\r\\n     */\\r\\n    RegistryInvalid = 'RegistryInvalid',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Command parameters cannot be redefined during reload. Only\\r\\n     * the script closure itself can be changed.\\r\\n     *\\r\\n     */\\r\\n    RegistryReadOnly = 'RegistryReadOnly',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Reason why custom command registration failed.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"AlreadyRegistered\",\n              \"value\": \"AlreadyRegistered\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"EnumDependencyMissing\",\n              \"value\": \"EnumDependencyMissing\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NamespaceMismatch\",\n              \"value\": \"NamespaceMismatch\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ParameterLimit\",\n              \"value\": \"ParameterLimit\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"RegistryInvalid\",\n              \"value\": \"RegistryInvalid\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"RegistryReadOnly\",\n              \"value\": \"RegistryReadOnly\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"customcommanderrorreason\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CustomCommandParamType\",\n          \"name\": \"CustomCommandParamType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The types of paramaters accepted by a custom command.\\r /\",\n          \"definition\": \"export enum CustomCommandParamType {\\n    /**\\r\\n     * @remarks\\r\\n     * Block type parameter provides a {@link BlockType}.\\r\\n     *\\r\\n     */\\r\\n    BlockType = 'BlockType',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Boolean parameter.\\r\\n     *\\r\\n     */\\r\\n    Boolean = 'Boolean',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Entity selector parameter provides an {@link Entity}.\\r\\n     *\\r\\n     */\\r\\n    EntitySelector = 'EntitySelector',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Entity type parameter provides an {@link EntityType}.\\r\\n     *\\r\\n     */\\r\\n    EntityType = 'EntityType',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Command enum parameter.\\r\\n     *\\r\\n     */\\r\\n    Enum = 'Enum',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Float parameter.\\r\\n     *\\r\\n     */\\r\\n    Float = 'Float',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Integer parameter.\\r\\n     *\\r\\n     */\\r\\n    Integer = 'Integer',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Item type parameter provides an {@link ItemType}.\\r\\n     *\\r\\n     */\\r\\n    ItemType = 'ItemType',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Location parameter provides a {@link\\r\\n     * @minecraft/server.Location}.\\r\\n     *\\r\\n     */\\r\\n    Location = 'Location',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player selector parameter provides a {@link Player}.\\r\\n     *\\r\\n     */\\r\\n    PlayerSelector = 'PlayerSelector',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * String parameter.\\r\\n     *\\r\\n     */\\r\\n    String = 'String',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The types of paramaters accepted by a custom command.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"BlockType\",\n              \"value\": \"BlockType\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Boolean\",\n              \"value\": \"Boolean\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"EntitySelector\",\n              \"value\": \"EntitySelector\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"EntityType\",\n              \"value\": \"EntityType\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Enum\",\n              \"value\": \"Enum\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Float\",\n              \"value\": \"Float\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Integer\",\n              \"value\": \"Integer\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ItemType\",\n              \"value\": \"ItemType\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Location\",\n              \"value\": \"Location\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"PlayerSelector\",\n              \"value\": \"PlayerSelector\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"String\",\n              \"value\": \"String\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"customcommandparamtype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CustomCommandSource\",\n          \"name\": \"CustomCommandSource\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Who executed the command.\\r /\",\n          \"definition\": \"export enum CustomCommandSource {\\n    /**\\r\\n     * @remarks\\r\\n     * Command originated from a command block.\\r\\n     *\\r\\n     */\\r\\n    Block = 'Block',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Command originated from an entity or player.\\r\\n     *\\r\\n     */\\r\\n    Entity = 'Entity',\\r\\n    NPCDialogue = 'NPCDialogue',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Command originated from the server.\\r\\n     *\\r\\n     */\\r\\n    Server = 'Server',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Who executed the command.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Block\",\n              \"value\": \"Block\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Entity\",\n              \"value\": \"Entity\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NPCDialogue\",\n              \"value\": \"NPCDialogue\"\n            },\n            {\n              \"name\": \"Server\",\n              \"value\": \"Server\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"customcommandsource\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CustomCommandStatus\",\n          \"name\": \"CustomCommandStatus\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Command originated from the server.\",\n          \"definition\": \"export enum CustomCommandStatus {\\n    Success = 0,\\r\\n    Failure = 1,\\r\\n}\\r\",\n          \"jsdoc\": \"    /**\\r\\n     * @remarks\\r\\n     * Command originated from the server.\\r\\n     *\\r\\n     */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Success\",\n              \"value\": 0\n            },\n            {\n              \"name\": \"Failure\",\n              \"value\": 1\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"customcommandstatus\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CustomComponentNameErrorReason\",\n          \"name\": \"CustomComponentNameErrorReason\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"definition\": \"export enum CustomComponentNameErrorReason {\\n    NoNamespace = 1,\\r\\n    DisallowedNamespace = 2,\\r\\n}\\r\",\n          \"jsdoc\": \"\",\n          \"enumValues\": [\n            {\n              \"name\": \"NoNamespace\",\n              \"value\": 1\n            },\n            {\n              \"name\": \"DisallowedNamespace\",\n              \"value\": 2\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"customcomponentnameerrorreason\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.Difficulty\",\n          \"name\": \"Difficulty\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"An enumeration for the various difficulty levels of\\r Minecraft.\\r /\",\n          \"definition\": \"export enum Difficulty {\\n    /**\\r\\n     * @remarks\\r\\n     * Easy difficulty level.\\r\\n     *\\r\\n     */\\r\\n    Easy = 'Easy',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hard difficulty level.\\r\\n     *\\r\\n     */\\r\\n    Hard = 'Hard',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Normal difficulty level.\\r\\n     *\\r\\n     */\\r\\n    Normal = 'Normal',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Peaceful difficulty level.\\r\\n     *\\r\\n     */\\r\\n    Peaceful = 'Peaceful',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * An enumeration for the various difficulty levels of\\r\\n * Minecraft.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Easy\",\n              \"value\": \"Easy\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Hard\",\n              \"value\": \"Hard\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Normal\",\n              \"value\": \"Normal\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Peaceful\",\n              \"value\": \"Peaceful\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"difficulty\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.Direction\",\n          \"name\": \"Direction\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"A general purpose relative direction enumeration.\\r /\",\n          \"definition\": \"export enum Direction {\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} beneath (y - 1) of this item.\\r\\n     *\\r\\n     */\\r\\n    Down = 'Down',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} to the east (x + 1) of this item.\\r\\n     *\\r\\n     */\\r\\n    East = 'East',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} to the east (z + 1) of this item.\\r\\n     *\\r\\n     */\\r\\n    North = 'North',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} to the south (z - 1) of this item.\\r\\n     *\\r\\n     */\\r\\n    South = 'South',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} above (y + 1) of this item.\\r\\n     *\\r\\n     */\\r\\n    Up = 'Up',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} to the west (x - 1) of this item.\\r\\n     *\\r\\n     */\\r\\n    West = 'West',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * A general purpose relative direction enumeration.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Down\",\n              \"value\": \"Down\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"East\",\n              \"value\": \"East\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"North\",\n              \"value\": \"North\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"South\",\n              \"value\": \"South\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Up\",\n              \"value\": \"Up\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"West\",\n              \"value\": \"West\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"direction\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.DisplaySlotId\",\n          \"name\": \"DisplaySlotId\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Specifies a mechanism for displaying scores on a scoreboard.\\r /\",\n          \"definition\": \"export enum DisplaySlotId {\\n    /**\\r\\n     * @remarks\\r\\n     * Displays the score below the player's name.\\r\\n     *\\r\\n     */\\r\\n    BelowName = 'BelowName',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Displays the score as a list on the pause screen.\\r\\n     *\\r\\n     */\\r\\n    List = 'List',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Displays the score on the side of the player's screen.\\r\\n     *\\r\\n     */\\r\\n    Sidebar = 'Sidebar',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Specifies a mechanism for displaying scores on a scoreboard.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"BelowName\",\n              \"value\": \"BelowName\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"List\",\n              \"value\": \"List\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Sidebar\",\n              \"value\": \"Sidebar\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"displayslotid\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.DyeColor\",\n          \"name\": \"DyeColor\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Specifies different colors for use as dye.\\r /\",\n          \"definition\": \"export enum DyeColor {\\n    /**\\r\\n     * @remarks\\r\\n     * Black dye color.\\r\\n     *\\r\\n     */\\r\\n    Black = 'Black',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Blue dye color.\\r\\n     *\\r\\n     */\\r\\n    Blue = 'Blue',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Brown dye color.\\r\\n     *\\r\\n     */\\r\\n    Brown = 'Brown',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Cyan dye color.\\r\\n     *\\r\\n     */\\r\\n    Cyan = 'Cyan',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gray dye color.\\r\\n     *\\r\\n     */\\r\\n    Gray = 'Gray',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Green dye color.\\r\\n     *\\r\\n     */\\r\\n    Green = 'Green',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Light blue dye color.\\r\\n     *\\r\\n     */\\r\\n    LightBlue = 'LightBlue',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Lime dye color.\\r\\n     *\\r\\n     */\\r\\n    Lime = 'Lime',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Magenta dye color.\\r\\n     *\\r\\n     */\\r\\n    Magenta = 'Magenta',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Orange dye color.\\r\\n     *\\r\\n     */\\r\\n    Orange = 'Orange',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Pink dye color.\\r\\n     *\\r\\n     */\\r\\n    Pink = 'Pink',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Purple dye color.\\r\\n     *\\r\\n     */\\r\\n    Purple = 'Purple',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Red dye color.\\r\\n     *\\r\\n     */\\r\\n    Red = 'Red',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Silver dye color.\\r\\n     *\\r\\n     */\\r\\n    Silver = 'Silver',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * White dye color.\\r\\n     *\\r\\n     */\\r\\n    White = 'White',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Yellow dye color.\\r\\n     *\\r\\n     */\\r\\n    Yellow = 'Yellow',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Specifies different colors for use as dye.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Black\",\n              \"value\": \"Black\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Blue\",\n              \"value\": \"Blue\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Brown\",\n              \"value\": \"Brown\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Cyan\",\n              \"value\": \"Cyan\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Gray\",\n              \"value\": \"Gray\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Green\",\n              \"value\": \"Green\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"LightBlue\",\n              \"value\": \"LightBlue\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Lime\",\n              \"value\": \"Lime\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Magenta\",\n              \"value\": \"Magenta\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Orange\",\n              \"value\": \"Orange\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Pink\",\n              \"value\": \"Pink\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Purple\",\n              \"value\": \"Purple\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Red\",\n              \"value\": \"Red\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Silver\",\n              \"value\": \"Silver\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"White\",\n              \"value\": \"White\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Yellow\",\n              \"value\": \"Yellow\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"dyecolor\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.EasingType\",\n          \"name\": \"EasingType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Yellow dye color.\",\n          \"definition\": \"export enum EasingType {\\n    InBack = 'InBack',\\r\\n    InBounce = 'InBounce',\\r\\n    InCirc = 'InCirc',\\r\\n    InCubic = 'InCubic',\\r\\n    InElastic = 'InElastic',\\r\\n    InExpo = 'InExpo',\\r\\n    InOutBack = 'InOutBack',\\r\\n    InOutBounce = 'InOutBounce',\\r\\n    InOutCirc = 'InOutCirc',\\r\\n    InOutCubic = 'InOutCubic',\\r\\n    InOutElastic = 'InOutElastic',\\r\\n    InOutExpo = 'InOutExpo',\\r\\n    InOutQuad = 'InOutQuad',\\r\\n    InOutQuart = 'InOutQuart',\\r\\n    InOutQuint = 'InOutQuint',\\r\\n    InOutSine = 'InOutSine',\\r\\n    InQuad = 'InQuad',\\r\\n    InQuart = 'InQuart',\\r\\n    InQuint = 'InQuint',\\r\\n    InSine = 'InSine',\\r\\n    Linear = 'Linear',\\r\\n    OutBack = 'OutBack',\\r\\n    OutBounce = 'OutBounce',\\r\\n    OutCirc = 'OutCirc',\\r\\n    OutCubic = 'OutCubic',\\r\\n    OutElastic = 'OutElastic',\\r\\n    OutExpo = 'OutExpo',\\r\\n    OutQuad = 'OutQuad',\\r\\n    OutQuart = 'OutQuart',\\r\\n    OutQuint = 'OutQuint',\\r\\n    OutSine = 'OutSine',\\r\\n    Spring = 'Spring',\\r\\n}\\r\",\n          \"jsdoc\": \"    /**\\r\\n     * @remarks\\r\\n     * Yellow dye color.\\r\\n     *\\r\\n     */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"InBack\",\n              \"value\": \"InBack\"\n            },\n            {\n              \"name\": \"InBounce\",\n              \"value\": \"InBounce\"\n            },\n            {\n              \"name\": \"InCirc\",\n              \"value\": \"InCirc\"\n            },\n            {\n              \"name\": \"InCubic\",\n              \"value\": \"InCubic\"\n            },\n            {\n              \"name\": \"InElastic\",\n              \"value\": \"InElastic\"\n            },\n            {\n              \"name\": \"InExpo\",\n              \"value\": \"InExpo\"\n            },\n            {\n              \"name\": \"InOutBack\",\n              \"value\": \"InOutBack\"\n            },\n            {\n              \"name\": \"InOutBounce\",\n              \"value\": \"InOutBounce\"\n            },\n            {\n              \"name\": \"InOutCirc\",\n              \"value\": \"InOutCirc\"\n            },\n            {\n              \"name\": \"InOutCubic\",\n              \"value\": \"InOutCubic\"\n            },\n            {\n              \"name\": \"InOutElastic\",\n              \"value\": \"InOutElastic\"\n            },\n            {\n              \"name\": \"InOutExpo\",\n              \"value\": \"InOutExpo\"\n            },\n            {\n              \"name\": \"InOutQuad\",\n              \"value\": \"InOutQuad\"\n            },\n            {\n              \"name\": \"InOutQuart\",\n              \"value\": \"InOutQuart\"\n            },\n            {\n              \"name\": \"InOutQuint\",\n              \"value\": \"InOutQuint\"\n            },\n            {\n              \"name\": \"InOutSine\",\n              \"value\": \"InOutSine\"\n            },\n            {\n              \"name\": \"InQuad\",\n              \"value\": \"InQuad\"\n            },\n            {\n              \"name\": \"InQuart\",\n              \"value\": \"InQuart\"\n            },\n            {\n              \"name\": \"InQuint\",\n              \"value\": \"InQuint\"\n            },\n            {\n              \"name\": \"InSine\",\n              \"value\": \"InSine\"\n            },\n            {\n              \"name\": \"Linear\",\n              \"value\": \"Linear\"\n            },\n            {\n              \"name\": \"OutBack\",\n              \"value\": \"OutBack\"\n            },\n            {\n              \"name\": \"OutBounce\",\n              \"value\": \"OutBounce\"\n            },\n            {\n              \"name\": \"OutCirc\",\n              \"value\": \"OutCirc\"\n            },\n            {\n              \"name\": \"OutCubic\",\n              \"value\": \"OutCubic\"\n            },\n            {\n              \"name\": \"OutElastic\",\n              \"value\": \"OutElastic\"\n            },\n            {\n              \"name\": \"OutExpo\",\n              \"value\": \"OutExpo\"\n            },\n            {\n              \"name\": \"OutQuad\",\n              \"value\": \"OutQuad\"\n            },\n            {\n              \"name\": \"OutQuart\",\n              \"value\": \"OutQuart\"\n            },\n            {\n              \"name\": \"OutQuint\",\n              \"value\": \"OutQuint\"\n            },\n            {\n              \"name\": \"OutSine\",\n              \"value\": \"OutSine\"\n            },\n            {\n              \"name\": \"Spring\",\n              \"value\": \"Spring\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"easingtype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.EnchantmentSlot\",\n          \"name\": \"EnchantmentSlot\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"definition\": \"export enum EnchantmentSlot {\\n    ArmorFeet = 'ArmorFeet',\\r\\n    ArmorHead = 'ArmorHead',\\r\\n    ArmorLegs = 'ArmorLegs',\\r\\n    ArmorTorso = 'ArmorTorso',\\r\\n    Axe = 'Axe',\\r\\n    Bow = 'Bow',\\r\\n    CarrotStick = 'CarrotStick',\\r\\n    CosmeticHead = 'CosmeticHead',\\r\\n    Crossbow = 'Crossbow',\\r\\n    Elytra = 'Elytra',\\r\\n    FishingRod = 'FishingRod',\\r\\n    Flintsteel = 'Flintsteel',\\r\\n    Hoe = 'Hoe',\\r\\n    Pickaxe = 'Pickaxe',\\r\\n    Shears = 'Shears',\\r\\n    Shield = 'Shield',\\r\\n    Shovel = 'Shovel',\\r\\n    Spear = 'Spear',\\r\\n    Sword = 'Sword',\\r\\n}\\r\",\n          \"jsdoc\": \"\",\n          \"enumValues\": [\n            {\n              \"name\": \"ArmorFeet\",\n              \"value\": \"ArmorFeet\"\n            },\n            {\n              \"name\": \"ArmorHead\",\n              \"value\": \"ArmorHead\"\n            },\n            {\n              \"name\": \"ArmorLegs\",\n              \"value\": \"ArmorLegs\"\n            },\n            {\n              \"name\": \"ArmorTorso\",\n              \"value\": \"ArmorTorso\"\n            },\n            {\n              \"name\": \"Axe\",\n              \"value\": \"Axe\"\n            },\n            {\n              \"name\": \"Bow\",\n              \"value\": \"Bow\"\n            },\n            {\n              \"name\": \"CarrotStick\",\n              \"value\": \"CarrotStick\"\n            },\n            {\n              \"name\": \"CosmeticHead\",\n              \"value\": \"CosmeticHead\"\n            },\n            {\n              \"name\": \"Crossbow\",\n              \"value\": \"Crossbow\"\n            },\n            {\n              \"name\": \"Elytra\",\n              \"value\": \"Elytra\"\n            },\n            {\n              \"name\": \"FishingRod\",\n              \"value\": \"FishingRod\"\n            },\n            {\n              \"name\": \"Flintsteel\",\n              \"value\": \"Flintsteel\"\n            },\n            {\n              \"name\": \"Hoe\",\n              \"value\": \"Hoe\"\n            },\n            {\n              \"name\": \"Pickaxe\",\n              \"value\": \"Pickaxe\"\n            },\n            {\n              \"name\": \"Shears\",\n              \"value\": \"Shears\"\n            },\n            {\n              \"name\": \"Shield\",\n              \"value\": \"Shield\"\n            },\n            {\n              \"name\": \"Shovel\",\n              \"value\": \"Shovel\"\n            },\n            {\n              \"name\": \"Spear\",\n              \"value\": \"Spear\"\n            },\n            {\n              \"name\": \"Sword\",\n              \"value\": \"Sword\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"enchantmentslot\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.EntityComponentTypes\",\n          \"name\": \"EntityComponentTypes\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The types of entity components that are accessible via\\r function Entity.getComponent.\\r /\",\n          \"definition\": \"export enum EntityComponentTypes {\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component makes the entity spawn with a\\r\\n     * rider of the specified entityType.\\r\\n     *\\r\\n     */\\r\\n    AddRider = 'minecraft:addrider',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Adds a timer for the entity to grow up. It can be\\r\\n     * accelerated by giving the entity the items it likes as\\r\\n     * defined by feedItems.\\r\\n     *\\r\\n     */\\r\\n    Ageable = 'minecraft:ageable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines what blocks this entity can breathe in and gives\\r\\n     * them the ability to suffocate.\\r\\n     *\\r\\n     */\\r\\n    Breathable = 'minecraft:breathable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that the entity can\\r\\n     * climb up ladders.\\r\\n     *\\r\\n     */\\r\\n    CanClimb = 'minecraft:can_climb',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that the entity can\\r\\n     * fly, and the pathfinder won't be restricted to paths where a\\r\\n     * solid block is required underneath it.\\r\\n     *\\r\\n     */\\r\\n    CanFly = 'minecraft:can_fly',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that the entity can\\r\\n     * power jump like the horse does within Minecraft.\\r\\n     *\\r\\n     */\\r\\n    CanPowerJump = 'minecraft:can_power_jump',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the entity's color. Only works on certain entities\\r\\n     * that have predefined color values (e.g., sheep, llama,\\r\\n     * shulker).\\r\\n     *\\r\\n     */\\r\\n    Color = 'minecraft:color',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the entity's secondary color. Only works on certain\\r\\n     * entities that have predefined secondary color values (e.g.,\\r\\n     * tropical fish).\\r\\n     *\\r\\n     */\\r\\n    Color2 = 'minecraft:color2',\\r\\n    CursorInventory = 'minecraft:cursor_inventory',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Provides access to a mob's equipment slots. This component\\r\\n     * exists for all mob entities.\\r\\n     *\\r\\n     */\\r\\n    Equippable = 'minecraft:equippable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity\\r\\n     * doesn't take damage from fire.\\r\\n     *\\r\\n     */\\r\\n    FireImmune = 'minecraft:fire_immune',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity can\\r\\n     * float in liquid blocks.\\r\\n     *\\r\\n     */\\r\\n    FloatsInLiquid = 'minecraft:floats_in_liquid',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Represents the flying speed of an entity.\\r\\n     *\\r\\n     */\\r\\n    FlyingSpeed = 'minecraft:flying_speed',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines how much friction affects this entity.\\r\\n     *\\r\\n     */\\r\\n    FrictionModifier = 'minecraft:friction_modifier',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the interactions with this entity for healing it.\\r\\n     *\\r\\n     */\\r\\n    Healable = 'minecraft:healable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the health properties of an entity.\\r\\n     *\\r\\n     */\\r\\n    Health = 'minecraft:health',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines this entity's inventory properties.\\r\\n     *\\r\\n     */\\r\\n    Inventory = 'minecraft:inventory',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is a\\r\\n     * baby.\\r\\n     *\\r\\n     */\\r\\n    IsBaby = 'minecraft:is_baby',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is\\r\\n     * charged.\\r\\n     *\\r\\n     */\\r\\n    IsCharged = 'minecraft:is_charged',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is\\r\\n     * currently carrying a chest.\\r\\n     *\\r\\n     */\\r\\n    IsChested = 'minecraft:is_chested',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that dyes can be used\\r\\n     * on this entity to change its color.\\r\\n     *\\r\\n     */\\r\\n    IsDyeable = 'minecraft:is_dyeable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity can\\r\\n     * hide from hostile mobs while invisible.\\r\\n     *\\r\\n     */\\r\\n    IsHiddenWhenInvisible = 'minecraft:is_hidden_when_invisible',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity this\\r\\n     * currently on fire.\\r\\n     *\\r\\n     */\\r\\n    IsIgnited = 'minecraft:is_ignited',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is an\\r\\n     * illager captain.\\r\\n     *\\r\\n     */\\r\\n    IsIllagerCaptain = 'minecraft:is_illager_captain',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is\\r\\n     * currently saddled.\\r\\n     *\\r\\n     */\\r\\n    IsSaddled = 'minecraft:is_saddled',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is\\r\\n     * currently shaking.\\r\\n     *\\r\\n     */\\r\\n    IsShaking = 'minecraft:is_shaking',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is\\r\\n     * currently sheared.\\r\\n     *\\r\\n     */\\r\\n    IsSheared = 'minecraft:is_sheared',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity can be\\r\\n     * stacked.\\r\\n     *\\r\\n     */\\r\\n    IsStackable = 'minecraft:is_stackable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is\\r\\n     * currently stunned.\\r\\n     *\\r\\n     */\\r\\n    IsStunned = 'minecraft:is_stunned',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity is\\r\\n     * currently tamed.\\r\\n     *\\r\\n     */\\r\\n    IsTamed = 'minecraft:is_tamed',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * If added onto the entity, this indicates that the entity\\r\\n     * represents a free-floating item in the world. Lets you\\r\\n     * retrieve the actual item stack contents via the itemStack\\r\\n     * property.\\r\\n     *\\r\\n     */\\r\\n    Item = 'minecraft:item',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the base movement speed in lava of this entity.\\r\\n     *\\r\\n     */\\r\\n    LavaMovement = 'minecraft:lava_movement',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Allows this entity to be leashed and defines the conditions\\r\\n     * and events for this entity when is leashed.\\r\\n     *\\r\\n     */\\r\\n    Leashable = 'minecraft:leashable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity\\r\\n     * contains an additional variant value. Can be used to further\\r\\n     * differentiate variants.\\r\\n     *\\r\\n     */\\r\\n    MarkVariant = 'minecraft:mark_variant',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the general movement speed of this entity.\\r\\n     *\\r\\n     */\\r\\n    Movement = 'minecraft:movement',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this movement control allows the mob to swim in\\r\\n     * water and walk on land.\\r\\n     *\\r\\n     */\\r\\n    MovementAmphibious = 'minecraft:movement.amphibious',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component allows the movement of an entity.\\r\\n     *\\r\\n     */\\r\\n    MovementBasic = 'minecraft:movement.basic',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this move control causes the mob to fly.\\r\\n     *\\r\\n     */\\r\\n    MovementFly = 'minecraft:movement.fly',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this move control allows a mob to fly, swim,\\r\\n     * climb, etc.\\r\\n     *\\r\\n     */\\r\\n    MovementGeneric = 'minecraft:movement.generic',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this movement control allows the mob to glide.\\r\\n     *\\r\\n     */\\r\\n    MovementGlide = 'minecraft:movement.glide',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this move control causes the mob to hover.\\r\\n     *\\r\\n     */\\r\\n    MovementHover = 'minecraft:movement.hover',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Move control that causes the mob to jump as it moves with a\\r\\n     * specified delay between jumps.\\r\\n     *\\r\\n     */\\r\\n    MovementJump = 'minecraft:movement.jump',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this move control causes the mob to hop as it\\r\\n     * moves.\\r\\n     *\\r\\n     */\\r\\n    MovementSkip = 'minecraft:movement.skip',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this move control causes the mob to sway side to\\r\\n     * side giving the impression it is swimming.\\r\\n     *\\r\\n     */\\r\\n    MovementSway = 'minecraft:movement.sway',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Allows this entity to generate paths that include vertical\\r\\n     * walls (for example, like Minecraft spiders do.)\\r\\n     *\\r\\n     */\\r\\n    NavigationClimb = 'minecraft:navigation.climb',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Allows this entity to generate paths by flying around the\\r\\n     * air like the regular Ghast.\\r\\n     *\\r\\n     */\\r\\n    NavigationFloat = 'minecraft:navigation.float',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Allows this entity to generate paths in the air (for\\r\\n     * example, like Minecraft parrots do.)\\r\\n     *\\r\\n     */\\r\\n    NavigationFly = 'minecraft:navigation.fly',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Allows this entity to generate paths by walking, swimming,\\r\\n     * flying and/or climbing around and jumping up and down a\\r\\n     * block.\\r\\n     *\\r\\n     */\\r\\n    NavigationGeneric = 'minecraft:navigation.generic',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Allows this entity to generate paths in the air (for\\r\\n     * example, like the Minecraft Bees do.) Keeps them from\\r\\n     * falling out of the skies and doing predictive movement.\\r\\n     *\\r\\n     */\\r\\n    NavigationHover = 'minecraft:navigation.hover',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Allows this entity to generate paths by walking around and\\r\\n     * jumping up and down a block like regular mobs.\\r\\n     *\\r\\n     */\\r\\n    NavigationWalk = 'minecraft:navigation.walk',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When present on an entity, this entity is on fire.\\r\\n     *\\r\\n     */\\r\\n    OnFire = 'minecraft:onfire',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Use this component to read the exhaustion of a player. This\\r\\n     * is only available on players.\\r\\n     *\\r\\n     */\\r\\n    Exhaustion = 'minecraft:player.exhaustion',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Use this component to read the hunger of a player. This is\\r\\n     * only available on players.\\r\\n     *\\r\\n     */\\r\\n    Hunger = 'minecraft:player.hunger',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Use this component to read the saturation of a player. This\\r\\n     * is only available on players.\\r\\n     *\\r\\n     */\\r\\n    Saturation = 'minecraft:player.saturation',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The projectile component controls the properties of a\\r\\n     * projectile entity and allows it to be shot in a given\\r\\n     * direction. This component is present when the entity has the\\r\\n     * minecraft:projectile component.\\r\\n     *\\r\\n     */\\r\\n    Projectile = 'minecraft:projectile',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the distance through which the entity can push through.\\r\\n     *\\r\\n     */\\r\\n    PushThrough = 'minecraft:push_through',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component adds the capability that an\\r\\n     * entity can be ridden by another entity.\\r\\n     *\\r\\n     */\\r\\n    Rideable = 'minecraft:rideable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * This component is added to any entity when it is riding\\r\\n     * another entity.\\r\\n     *\\r\\n     */\\r\\n    Riding = 'minecraft:riding',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the entity's visual size.\\r\\n     *\\r\\n     */\\r\\n    Scale = 'minecraft:scale',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Skin Id value. Can be used to differentiate skins, such as\\r\\n     * base skins for villagers.\\r\\n     *\\r\\n     */\\r\\n    SkinId = 'minecraft:skin_id',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the entity's strength to carry items.\\r\\n     *\\r\\n     */\\r\\n    Strength = 'minecraft:strength',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the rules for an entity to be tamed by the player.\\r\\n     *\\r\\n     */\\r\\n    Tameable = 'minecraft:tameable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Contains options for taming a rideable entity based on the\\r\\n     * entity that mounts it.\\r\\n     *\\r\\n     */\\r\\n    TameMount = 'minecraft:tamemount',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Used to determine the type families the entity belongs to.\\r\\n     *\\r\\n     */\\r\\n    TypeFamily = 'minecraft:type_family',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Defines the general movement speed underwater of this\\r\\n     * entity.\\r\\n     *\\r\\n     */\\r\\n    UnderwaterMovement = 'minecraft:underwater_movement',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Used to differentiate the component group of a variant of an\\r\\n     * entity from others. (e.g. ocelot, villager).\\r\\n     *\\r\\n     */\\r\\n    Variant = 'minecraft:variant',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * When added, this component signifies that this entity wants\\r\\n     * to become a jockey.\\r\\n     *\\r\\n     */\\r\\n    WantsJockey = 'minecraft:wants_jockey',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The types of entity components that are accessible via\\r\\n * function Entity.getComponent.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"AddRider\",\n              \"value\": \"minecraft:addrider\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Ageable\",\n              \"value\": \"minecraft:ageable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Breathable\",\n              \"value\": \"minecraft:breathable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"CanClimb\",\n              \"value\": \"minecraft:can_climb\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"CanFly\",\n              \"value\": \"minecraft:can_fly\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"CanPowerJump\",\n              \"value\": \"minecraft:can_power_jump\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Color\",\n              \"value\": \"minecraft:color\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Color2\",\n              \"value\": \"minecraft:color2\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"CursorInventory\",\n              \"value\": \"minecraft:cursor_inventory\"\n            },\n            {\n              \"name\": \"Equippable\",\n              \"value\": \"minecraft:equippable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FireImmune\",\n              \"value\": \"minecraft:fire_immune\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FloatsInLiquid\",\n              \"value\": \"minecraft:floats_in_liquid\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FlyingSpeed\",\n              \"value\": \"minecraft:flying_speed\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FrictionModifier\",\n              \"value\": \"minecraft:friction_modifier\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Healable\",\n              \"value\": \"minecraft:healable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Health\",\n              \"value\": \"minecraft:health\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Inventory\",\n              \"value\": \"minecraft:inventory\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsBaby\",\n              \"value\": \"minecraft:is_baby\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsCharged\",\n              \"value\": \"minecraft:is_charged\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsChested\",\n              \"value\": \"minecraft:is_chested\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsDyeable\",\n              \"value\": \"minecraft:is_dyeable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsHiddenWhenInvisible\",\n              \"value\": \"minecraft:is_hidden_when_invisible\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsIgnited\",\n              \"value\": \"minecraft:is_ignited\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsIllagerCaptain\",\n              \"value\": \"minecraft:is_illager_captain\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsSaddled\",\n              \"value\": \"minecraft:is_saddled\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsShaking\",\n              \"value\": \"minecraft:is_shaking\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsSheared\",\n              \"value\": \"minecraft:is_sheared\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsStackable\",\n              \"value\": \"minecraft:is_stackable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsStunned\",\n              \"value\": \"minecraft:is_stunned\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"IsTamed\",\n              \"value\": \"minecraft:is_tamed\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Item\",\n              \"value\": \"minecraft:item\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"LavaMovement\",\n              \"value\": \"minecraft:lava_movement\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Leashable\",\n              \"value\": \"minecraft:leashable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MarkVariant\",\n              \"value\": \"minecraft:mark_variant\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Movement\",\n              \"value\": \"minecraft:movement\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementAmphibious\",\n              \"value\": \"minecraft:movement.amphibious\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementBasic\",\n              \"value\": \"minecraft:movement.basic\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementFly\",\n              \"value\": \"minecraft:movement.fly\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementGeneric\",\n              \"value\": \"minecraft:movement.generic\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementGlide\",\n              \"value\": \"minecraft:movement.glide\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementHover\",\n              \"value\": \"minecraft:movement.hover\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementJump\",\n              \"value\": \"minecraft:movement.jump\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementSkip\",\n              \"value\": \"minecraft:movement.skip\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MovementSway\",\n              \"value\": \"minecraft:movement.sway\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NavigationClimb\",\n              \"value\": \"minecraft:navigation.climb\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NavigationFloat\",\n              \"value\": \"minecraft:navigation.float\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NavigationFly\",\n              \"value\": \"minecraft:navigation.fly\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NavigationGeneric\",\n              \"value\": \"minecraft:navigation.generic\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NavigationHover\",\n              \"value\": \"minecraft:navigation.hover\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NavigationWalk\",\n              \"value\": \"minecraft:navigation.walk\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"OnFire\",\n              \"value\": \"minecraft:onfire\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Exhaustion\",\n              \"value\": \"minecraft:player.exhaustion\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Hunger\",\n              \"value\": \"minecraft:player.hunger\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Saturation\",\n              \"value\": \"minecraft:player.saturation\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Projectile\",\n              \"value\": \"minecraft:projectile\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"PushThrough\",\n              \"value\": \"minecraft:push_through\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Rideable\",\n              \"value\": \"minecraft:rideable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Riding\",\n              \"value\": \"minecraft:riding\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Scale\",\n              \"value\": \"minecraft:scale\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"SkinId\",\n              \"value\": \"minecraft:skin_id\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Strength\",\n              \"value\": \"minecraft:strength\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Tameable\",\n              \"value\": \"minecraft:tameable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"TameMount\",\n              \"value\": \"minecraft:tamemount\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"TypeFamily\",\n              \"value\": \"minecraft:type_family\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"UnderwaterMovement\",\n              \"value\": \"minecraft:underwater_movement\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Variant\",\n              \"value\": \"minecraft:variant\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"WantsJockey\",\n              \"value\": \"minecraft:wants_jockey\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"entitycomponenttypes\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.EntityDamageCause\",\n          \"name\": \"EntityDamageCause\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Describes the source of damage from an Entity.\\r /\",\n          \"definition\": \"export enum EntityDamageCause {\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by a falling anvil.\\r\\n     *\\r\\n     */\\r\\n    anvil = 'anvil',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused from a non-Entity explosion. For example, an\\r\\n     * exploding bed.\\r\\n     *\\r\\n     */\\r\\n    blockExplosion = 'blockExplosion',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by Campfires.\\r\\n     *\\r\\n     */\\r\\n    campfire = 'campfire',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Unused.\\r\\n     *\\r\\n     */\\r\\n    charging = 'charging',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by physically touching an Entity or Block. For\\r\\n     * example, touching a Sweet Berry bush or Pufferfish.\\r\\n     *\\r\\n     */\\r\\n    contact = 'contact',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by an Entity being out of air and inside a\\r\\n     * liquid block.\\r\\n     *\\r\\n     */\\r\\n    drowning = 'drowning',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by an Entity attack.\\r\\n     *\\r\\n     */\\r\\n    entityAttack = 'entityAttack',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by an Entity explosion. For example, a Creeper\\r\\n     * or Wither.\\r\\n     *\\r\\n     */\\r\\n    entityExplosion = 'entityExplosion',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by falling onto the ground.\\r\\n     *\\r\\n     */\\r\\n    fall = 'fall',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by falling blocks. Note: Anvils and\\r\\n     * Stalactites have their own damage causes.\\r\\n     *\\r\\n     */\\r\\n    fallingBlock = 'fallingBlock',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by catching on fire.\\r\\n     *\\r\\n     */\\r\\n    fire = 'fire',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by burning over time.\\r\\n     *\\r\\n     */\\r\\n    fireTick = 'fireTick',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by fireworks.\\r\\n     *\\r\\n     */\\r\\n    fireworks = 'fireworks',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by flying into a wall at high speed while\\r\\n     * gliding with Elytra.\\r\\n     *\\r\\n     */\\r\\n    flyIntoWall = 'flyIntoWall',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by staying inside a Powder Snow block.\\r\\n     *\\r\\n     */\\r\\n    freezing = 'freezing',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by touching a Lava block.\\r\\n     *\\r\\n     */\\r\\n    lava = 'lava',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by being struck by lightning.\\r\\n     *\\r\\n     */\\r\\n    lightning = 'lightning',\\r\\n    maceSmash = 'maceSmash',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by magical attacks. For example, Evoker Fang\\r\\n     * or Conduit Block.\\r\\n     *\\r\\n     */\\r\\n    magic = 'magic',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by touching a Magma block.\\r\\n     *\\r\\n     */\\r\\n    magma = 'magma',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by no source. For example, from a command or\\r\\n     * script.\\r\\n     *\\r\\n     */\\r\\n    none = 'none',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by an indirect source. For example, setting a\\r\\n     * mob's health to 0 in a behavior pack.\\r\\n     *\\r\\n     */\\r\\n    override = 'override',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by a Piston.\\r\\n     *\\r\\n     */\\r\\n    piston = 'piston',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by a projectile.\\r\\n     *\\r\\n     */\\r\\n    projectile = 'projectile',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by Goat ramming.\\r\\n     *\\r\\n     */\\r\\n    ramAttack = 'ramAttack',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by the /kill command.\\r\\n     *\\r\\n     */\\r\\n    selfDestruct = 'selfDestruct',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by the Warden's Sonic Boom attack.\\r\\n     *\\r\\n     */\\r\\n    sonicBoom = 'sonicBoom',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by a Soul Campfire.\\r\\n     *\\r\\n     */\\r\\n    soulCampfire = 'soulCampfire',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by a falling Stalactite block.\\r\\n     *\\r\\n     */\\r\\n    stalactite = 'stalactite',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by touching a Stalagmite block.\\r\\n     *\\r\\n     */\\r\\n    stalagmite = 'stalagmite',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused over time by having an empty hunger bar.\\r\\n     *\\r\\n     */\\r\\n    starve = 'starve',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by an Entity being out of air and inside a\\r\\n     * non-liquid block.\\r\\n     *\\r\\n     */\\r\\n    suffocation = 'suffocation',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by an Entity being in an inhabitable climate.\\r\\n     * For example, a Snow Golem in a biome with a temperature\\r\\n     * greater than 1.\\r\\n     *\\r\\n     */\\r\\n    temperature = 'temperature',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by the Thorns armor enchantment and by the\\r\\n     * Guardian thorns effect.\\r\\n     *\\r\\n     */\\r\\n    thorns = 'thorns',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused over time by falling into the void.\\r\\n     *\\r\\n     */\\r\\n    'void' = 'void',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Damage caused by the Wither effect. For example, from\\r\\n     * touching a Wither Rose.\\r\\n     *\\r\\n     */\\r\\n    wither = 'wither',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Describes the source of damage from an Entity.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"anvil\",\n              \"value\": \"anvil\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"blockExplosion\",\n              \"value\": \"blockExplosion\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"campfire\",\n              \"value\": \"campfire\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"charging\",\n              \"value\": \"charging\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"contact\",\n              \"value\": \"contact\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"drowning\",\n              \"value\": \"drowning\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"entityAttack\",\n              \"value\": \"entityAttack\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"entityExplosion\",\n              \"value\": \"entityExplosion\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"fall\",\n              \"value\": \"fall\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"fallingBlock\",\n              \"value\": \"fallingBlock\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"fire\",\n              \"value\": \"fire\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"fireTick\",\n              \"value\": \"fireTick\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"fireworks\",\n              \"value\": \"fireworks\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"flyIntoWall\",\n              \"value\": \"flyIntoWall\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"freezing\",\n              \"value\": \"freezing\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"lava\",\n              \"value\": \"lava\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"lightning\",\n              \"value\": \"lightning\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"maceSmash\",\n              \"value\": \"maceSmash\"\n            },\n            {\n              \"name\": \"magic\",\n              \"value\": \"magic\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"magma\",\n              \"value\": \"magma\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"none\",\n              \"value\": \"none\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"override\",\n              \"value\": \"override\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"piston\",\n              \"value\": \"piston\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"projectile\",\n              \"value\": \"projectile\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ramAttack\",\n              \"value\": \"ramAttack\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"selfDestruct\",\n              \"value\": \"selfDestruct\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"sonicBoom\",\n              \"value\": \"sonicBoom\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"soulCampfire\",\n              \"value\": \"soulCampfire\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"stalactite\",\n              \"value\": \"stalactite\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"stalagmite\",\n              \"value\": \"stalagmite\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"starve\",\n              \"value\": \"starve\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"suffocation\",\n              \"value\": \"suffocation\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"temperature\",\n              \"value\": \"temperature\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"thorns\",\n              \"value\": \"thorns\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"wither\",\n              \"value\": \"wither\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"entitydamagecause\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.EntityInitializationCause\",\n          \"name\": \"EntityInitializationCause\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"An enumeration describing initialization cause of an entity.\\r /\",\n          \"definition\": \"export enum EntityInitializationCause {\\n    /**\\r\\n     * @remarks\\r\\n     * Case when an entity is created as child of other entity or\\r\\n     * entities, e.g., cows making a cow or slimes making smaller\\r\\n     * slimes after dying.\\r\\n     *\\r\\n     */\\r\\n    Born = 'Born',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Case when an entity is created by an event, e.g., a\\r\\n     * Wandering trader spawning llamas.\\r\\n     *\\r\\n     */\\r\\n    Event = 'Event',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Case when an entity is loaded into the world.\\r\\n     *\\r\\n     */\\r\\n    Loaded = 'Loaded',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Case when an entity is naturally spawned in the world.\\r\\n     *\\r\\n     */\\r\\n    Spawned = 'Spawned',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Case when an entity is transformed into another entity.\\r\\n     *\\r\\n     */\\r\\n    Transformed = 'Transformed',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * An enumeration describing initialization cause of an entity.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Born\",\n              \"value\": \"Born\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Event\",\n              \"value\": \"Event\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Loaded\",\n              \"value\": \"Loaded\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Spawned\",\n              \"value\": \"Spawned\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Transformed\",\n              \"value\": \"Transformed\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"entityinitializationcause\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.EquipmentSlot\",\n          \"name\": \"EquipmentSlot\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The equipment slot of the mob. This includes armor, offhand\\r and mainhand slots.\\r /\",\n          \"definition\": \"export enum EquipmentSlot {\\n    /**\\r\\n     * @remarks\\r\\n     * The chest slot. This slot is used to hold items such as\\r\\n     * Chestplate or Elytra.\\r\\n     *\\r\\n     */\\r\\n    Chest = 'Chest',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The feet slot. This slot is used to hold items such as\\r\\n     * Boots.\\r\\n     *\\r\\n     */\\r\\n    Feet = 'Feet',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The head slot. This slot is used to hold items such as\\r\\n     * Helmets or Carved Pumpkins.\\r\\n     *\\r\\n     */\\r\\n    Head = 'Head',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The legs slot. This slot is used to hold items such as\\r\\n     * Leggings.\\r\\n     *\\r\\n     */\\r\\n    Legs = 'Legs',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The mainhand slot. For players, the mainhand slot refers to\\r\\n     * the currently active hotbar slot.\\r\\n     *\\r\\n     */\\r\\n    Mainhand = 'Mainhand',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The offhand slot. This slot is used to hold items such as\\r\\n     * shields and maps.\\r\\n     *\\r\\n     */\\r\\n    Offhand = 'Offhand',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The equipment slot of the mob. This includes armor, offhand\\r\\n * and mainhand slots.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Chest\",\n              \"value\": \"Chest\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Feet\",\n              \"value\": \"Feet\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Head\",\n              \"value\": \"Head\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Legs\",\n              \"value\": \"Legs\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Mainhand\",\n              \"value\": \"Mainhand\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Offhand\",\n              \"value\": \"Offhand\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"equipmentslot\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.FluidType\",\n          \"name\": \"FluidType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents the type of fluid for use within a fluid\\r containing block, like a cauldron.\\r /\",\n          \"definition\": \"export enum FluidType {\\n    /**\\r\\n     * @remarks\\r\\n     * Represents lava as a type of fluid.\\r\\n     *\\r\\n     */\\r\\n    Lava = 'Lava',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Represents a potion as a type of fluid.\\r\\n     *\\r\\n     */\\r\\n    Potion = 'Potion',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Represents powder snow as a type of fluid.\\r\\n     *\\r\\n     */\\r\\n    PowderSnow = 'PowderSnow',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Represents water as a type of fluida.\\r\\n     *\\r\\n     */\\r\\n    Water = 'Water',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents the type of fluid for use within a fluid\\r\\n * containing block, like a cauldron.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Lava\",\n              \"value\": \"Lava\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Potion\",\n              \"value\": \"Potion\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"PowderSnow\",\n              \"value\": \"PowderSnow\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Water\",\n              \"value\": \"Water\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"fluidtype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.GameMode\",\n          \"name\": \"GameMode\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents a game mode for the current world experience.\\r /\",\n          \"definition\": \"export enum GameMode {\\n    /**\\r\\n     * @remarks\\r\\n     * World is in a more locked-down experience, where blocks may\\r\\n     * not be manipulated.\\r\\n     *\\r\\n     */\\r\\n    Adventure = 'Adventure',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * World is in a full creative mode. In creative mode, the\\r\\n     * player has all the resources available in the item selection\\r\\n     * tabs and the survival selection tab. They can also destroy\\r\\n     * blocks instantly including those which would normally be\\r\\n     * indestructible. Command and structure blocks can also be\\r\\n     * used in creative mode. Items also do not lose durability or\\r\\n     * disappear.\\r\\n     *\\r\\n     */\\r\\n    Creative = 'Creative',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * World is in spectator mode. In spectator mode, spectators\\r\\n     * are always flying and cannot become grounded. Spectators can\\r\\n     * pass through solid blocks and entities without any\\r\\n     * collisions, and cannot use items or interact with blocks or\\r\\n     * mobs. Spectators cannot be seen by mobs or other players,\\r\\n     * except for other spectators; spectators appear as a\\r\\n     * transparent floating head.\\r\\n     *\\r\\n     */\\r\\n    Spectator = 'Spectator',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * World is in a survival mode, where players can take damage\\r\\n     * and entities may not be peaceful. Survival mode is where the\\r\\n     * player must collect resources, build structures while\\r\\n     * surviving in their generated world. Activities can, over\\r\\n     * time, chip away at player health and hunger bar.\\r\\n     *\\r\\n     */\\r\\n    Survival = 'Survival',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents a game mode for the current world experience.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Adventure\",\n              \"value\": \"Adventure\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Creative\",\n              \"value\": \"Creative\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Spectator\",\n              \"value\": \"Spectator\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Survival\",\n              \"value\": \"Survival\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"gamemode\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.GameRule\",\n          \"name\": \"GameRule\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Game rules. These values can also be controlled via the\\r /gamerule command.\\r /\",\n          \"definition\": \"export enum GameRule {\\n    /**\\r\\n     * @remarks\\r\\n     * Whether command blocks should notify admins when they\\r\\n     * perform commands.\\r\\n     *\\r\\n     */\\r\\n    CommandBlockOutput = 'commandBlockOutput',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether command blocks can execute commands.\\r\\n     *\\r\\n     */\\r\\n    CommandBlocksEnabled = 'commandBlocksEnabled',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether the day and night cycles progress.\\r\\n     *\\r\\n     */\\r\\n    DoDayLightCycle = 'doDayLightCycle',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether non-mob entities do drops. ie. Item Frame\\r\\n     *\\r\\n     */\\r\\n    DoEntityDrops = 'doEntityDrops',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether fire spreads.\\r\\n     *\\r\\n     */\\r\\n    DoFireTick = 'doFireTick',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether players immediately respawn or are shown\\r\\n     * the death screen.\\r\\n     *\\r\\n     */\\r\\n    DoImmediateRespawn = 'doImmediateRespawn',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether players deal with the effects of not\\r\\n     * sleeping (such as Phantom spawning).\\r\\n     *\\r\\n     */\\r\\n    DoInsomnia = 'doInsomnia',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Determines whether players should be able to craft only\\r\\n     * those recipes that they've unlocked first - when\\r\\n     * dolimitedcrafting is set to true.\\r\\n     *\\r\\n     */\\r\\n    DoLimitedCrafting = 'doLimitedCrafting',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether mobs drop loot.\\r\\n     *\\r\\n     */\\r\\n    DoMobLoot = 'doMobLoot',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether mobs spawn naturally in the world.\\r\\n     *\\r\\n     */\\r\\n    DoMobSpawning = 'doMobSpawning',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether blocks drop items when destroyed.\\r\\n     *\\r\\n     */\\r\\n    DoTileDrops = 'doTileDrops',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether the weather can change naturally.\\r\\n     *\\r\\n     */\\r\\n    DoWeatherCycle = 'doWeatherCycle',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether entities take damage from drowning.\\r\\n     *\\r\\n     */\\r\\n    DrowningDamage = 'drowningDamage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether entities take damage from falling.\\r\\n     *\\r\\n     */\\r\\n    FallDamage = 'fallDamage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether entities take damage from fire.\\r\\n     *\\r\\n     */\\r\\n    FireDamage = 'fireDamage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether there is damage from freezing.\\r\\n     *\\r\\n     */\\r\\n    FreezeDamage = 'freezeDamage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The maximum number of commands that can be executed\\r\\n     * simultaneously by the /function command.\\r\\n     *\\r\\n     */\\r\\n    FunctionCommandLimit = 'functionCommandLimit',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether players keep their inventories when they\\r\\n     * die.\\r\\n     *\\r\\n     */\\r\\n    KeepInventory = 'keepInventory',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The maximum number of chained commands that can execute per\\r\\n     * tick.\\r\\n     *\\r\\n     */\\r\\n    MaxCommandChainLength = 'maxCommandChainLength',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether mob griefing can happen in the world.\\r\\n     * Example: A Creeper explosion destroying blocks.\\r\\n     *\\r\\n     */\\r\\n    MobGriefing = 'mobGriefing',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether players can regenerate health.\\r\\n     *\\r\\n     */\\r\\n    NaturalRegeneration = 'naturalRegeneration',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The percentage of players required to be sleeping in order\\r\\n     * to advance to the next day.\\r\\n     *\\r\\n     */\\r\\n    PlayersSleepingPercentage = 'playersSleepingPercentage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether projectiles (entities with a projectile\\r\\n     * component, like Arrows, thrown Tridents or Fireworks) can\\r\\n     * destroy certain blocks that support this interaction (such\\r\\n     * as Chorus Fruit, Dripstone or Decorated Pots). Restrictions\\r\\n     * on which projectiles can destroy certain blocks apply.\\r\\n     *\\r\\n     */\\r\\n    ProjectilesCanBreakBlocks = 'projectilesCanBreakBlocks',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether players can damage each other.\\r\\n     *\\r\\n     */\\r\\n    Pvp = 'pvp',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls how frequently random ticks occur. A value of 0 or\\r\\n     * less will disable random ticks. The default value is 1.\\r\\n     *\\r\\n     */\\r\\n    RandomTickSpeed = 'randomTickSpeed',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether built-in (vanilla) recipes automatically\\r\\n     * unlock as the player progresses through the game (one\\r\\n     * alternative to this is to use the /recipe command based on\\r\\n     * custom gameplay logic.)\\r\\n     *\\r\\n     */\\r\\n    RecipesUnlock = 'recipesUnlock',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether respawn blocks (e.g. Bed, Respawn Anchor)\\r\\n     * explode in other dimensions.\\r\\n     *\\r\\n     */\\r\\n    RespawnBlocksExplode = 'respawnBlocksExplode',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether command output is displayed to players.\\r\\n     * Also controls whether Command Block output is stored by\\r\\n     * default.\\r\\n     *\\r\\n     */\\r\\n    SendCommandFeedback = 'sendCommandFeedback',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether Border Block effects are shown.\\r\\n     *\\r\\n     */\\r\\n    ShowBorderEffect = 'showBorderEffect',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether player coordinates are displayed.\\r\\n     *\\r\\n     */\\r\\n    ShowCoordinates = 'showCoordinates',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether the days a player has played is displayed.\\r\\n     *\\r\\n     */\\r\\n    ShowDaysPlayed = 'showDaysPlayed',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether death messages are displayed in chat.\\r\\n     *\\r\\n     */\\r\\n    ShowDeathMessages = 'showDeathMessages',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether standard player notifications for recipes\\r\\n     * will show. When set to false, 'player unlocked recipes' are\\r\\n     * no longer sent as player notifications.\\r\\n     *\\r\\n     */\\r\\n    ShowRecipeMessages = 'showRecipeMessages',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether item tags are shown. E.g. 'Can Place On',\\r\\n     * 'Can Destroy', item lock icons, etc.\\r\\n     *\\r\\n     */\\r\\n    ShowTags = 'showTags',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The block radius from world spawn that a player is allowed\\r\\n     * to spawn in. Does not affect Adventure mode. The default\\r\\n     * value is 10 blocks.\\r\\n     *\\r\\n     */\\r\\n    SpawnRadius = 'spawnRadius',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Affects whether TNT blocks can be lit.\\r\\n     *\\r\\n     */\\r\\n    TntExplodes = 'tntExplodes',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Controls whether blocks randomly drop loot or all blocks\\r\\n     * drop loot when destroyed by an explosion. Defaults to false.\\r\\n     *\\r\\n     */\\r\\n    TntExplosionDropDecay = 'tntExplosionDropDecay',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Game rules. These values can also be controlled via the\\r\\n * /gamerule command.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"CommandBlockOutput\",\n              \"value\": \"commandBlockOutput\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"CommandBlocksEnabled\",\n              \"value\": \"commandBlocksEnabled\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoDayLightCycle\",\n              \"value\": \"doDayLightCycle\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoEntityDrops\",\n              \"value\": \"doEntityDrops\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoFireTick\",\n              \"value\": \"doFireTick\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoImmediateRespawn\",\n              \"value\": \"doImmediateRespawn\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoInsomnia\",\n              \"value\": \"doInsomnia\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoLimitedCrafting\",\n              \"value\": \"doLimitedCrafting\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoMobLoot\",\n              \"value\": \"doMobLoot\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoMobSpawning\",\n              \"value\": \"doMobSpawning\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoTileDrops\",\n              \"value\": \"doTileDrops\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DoWeatherCycle\",\n              \"value\": \"doWeatherCycle\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DrowningDamage\",\n              \"value\": \"drowningDamage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FallDamage\",\n              \"value\": \"fallDamage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FireDamage\",\n              \"value\": \"fireDamage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FreezeDamage\",\n              \"value\": \"freezeDamage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FunctionCommandLimit\",\n              \"value\": \"functionCommandLimit\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"KeepInventory\",\n              \"value\": \"keepInventory\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MaxCommandChainLength\",\n              \"value\": \"maxCommandChainLength\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MobGriefing\",\n              \"value\": \"mobGriefing\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NaturalRegeneration\",\n              \"value\": \"naturalRegeneration\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"PlayersSleepingPercentage\",\n              \"value\": \"playersSleepingPercentage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ProjectilesCanBreakBlocks\",\n              \"value\": \"projectilesCanBreakBlocks\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Pvp\",\n              \"value\": \"pvp\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"RandomTickSpeed\",\n              \"value\": \"randomTickSpeed\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"RecipesUnlock\",\n              \"value\": \"recipesUnlock\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"RespawnBlocksExplode\",\n              \"value\": \"respawnBlocksExplode\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"SendCommandFeedback\",\n              \"value\": \"sendCommandFeedback\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ShowBorderEffect\",\n              \"value\": \"showBorderEffect\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ShowCoordinates\",\n              \"value\": \"showCoordinates\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ShowDaysPlayed\",\n              \"value\": \"showDaysPlayed\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ShowDeathMessages\",\n              \"value\": \"showDeathMessages\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ShowRecipeMessages\",\n              \"value\": \"showRecipeMessages\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"ShowTags\",\n              \"value\": \"showTags\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"SpawnRadius\",\n              \"value\": \"spawnRadius\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"TntExplodes\",\n              \"value\": \"tntExplodes\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"TntExplosionDropDecay\",\n              \"value\": \"tntExplosionDropDecay\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"gamerule\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.GraphicsMode\",\n          \"name\": \"GraphicsMode\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Player.graphicsMode}\\r /\",\n          \"definition\": \"export enum GraphicsMode {\\n    /**\\r\\n     * @remarks\\r\\n     * A graphics mode that refers to the Deferred Technical\\r\\n     * Preview graphics mode setting.\\r\\n     *\\r\\n     */\\r\\n    Deferred = 'Deferred',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * A graphics mode that refers to the Fancy graphics mode\\r\\n     * setting. Most special graphics effects are turned on in this\\r\\n     * setting.\\r\\n     *\\r\\n     */\\r\\n    Fancy = 'Fancy',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * A graphics mode that refers to the Ray Traced graphics mode\\r\\n     * setting. This setting enables ray tracing.\\r\\n     *\\r\\n     */\\r\\n    RayTraced = 'RayTraced',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * A graphics mode that refers to the Simple graphics mode\\r\\n     * setting. Most graphics effects are turned off in this\\r\\n     * setting.\\r\\n     *\\r\\n     */\\r\\n    Simple = 'Simple',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Describes the graphics mode of a client. Used by {@link\\r\\n * Player.graphicsMode}\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Deferred\",\n              \"value\": \"Deferred\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Fancy\",\n              \"value\": \"Fancy\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"RayTraced\",\n              \"value\": \"RayTraced\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Simple\",\n              \"value\": \"Simple\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"graphicsmode\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.HudElement\",\n          \"name\": \"HudElement\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"A graphics mode that refers to the Simple graphics mode\\r setting. Most graphics effects are turned off in this\\r setting.\",\n          \"definition\": \"export enum HudElement {\\n    PaperDoll = 0,\\r\\n    Armor = 1,\\r\\n    ToolTips = 2,\\r\\n    TouchControls = 3,\\r\\n    Crosshair = 4,\\r\\n    Hotbar = 5,\\r\\n    Health = 6,\\r\\n    ProgressBar = 7,\\r\\n    Hunger = 8,\\r\\n    AirBubbles = 9,\\r\\n    HorseHealth = 10,\\r\\n    StatusEffects = 11,\\r\\n    ItemText = 12,\\r\\n}\\r\",\n          \"jsdoc\": \"    /**\\r\\n     * @remarks\\r\\n     * A graphics mode that refers to the Simple graphics mode\\r\\n     * setting. Most graphics effects are turned off in this\\r\\n     * setting.\\r\\n     *\\r\\n     */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"PaperDoll\",\n              \"value\": 0\n            },\n            {\n              \"name\": \"Armor\",\n              \"value\": 1\n            },\n            {\n              \"name\": \"ToolTips\",\n              \"value\": 2\n            },\n            {\n              \"name\": \"TouchControls\",\n              \"value\": 3\n            },\n            {\n              \"name\": \"Crosshair\",\n              \"value\": 4\n            },\n            {\n              \"name\": \"Hotbar\",\n              \"value\": 5\n            },\n            {\n              \"name\": \"Health\",\n              \"value\": 6\n            },\n            {\n              \"name\": \"ProgressBar\",\n              \"value\": 7\n            },\n            {\n              \"name\": \"Hunger\",\n              \"value\": 8\n            },\n            {\n              \"name\": \"AirBubbles\",\n              \"value\": 9\n            },\n            {\n              \"name\": \"HorseHealth\",\n              \"value\": 10\n            },\n            {\n              \"name\": \"StatusEffects\",\n              \"value\": 11\n            },\n            {\n              \"name\": \"ItemText\",\n              \"value\": 12\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"hudelement\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.HudVisibility\",\n          \"name\": \"HudVisibility\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Enumeration that specifies how to treat the visibility of a\\r HUD element.\\r /\",\n          \"definition\": \"export enum HudVisibility {\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies that this HUD element should be hidden.\\r\\n     *\\r\\n     */\\r\\n    Hide = 0,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies that this HUD element should be reset to its\\r\\n     * default state (while most HUD elements are visible, some HUD\\r\\n     * elements can be hidden by the player via settings.)\\r\\n     *\\r\\n     */\\r\\n    Reset = 1,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Enumeration that specifies how to treat the visibility of a\\r\\n * HUD element.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Hide\",\n              \"value\": 0,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Reset\",\n              \"value\": 1,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"hudvisibility\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.InputButton\",\n          \"name\": \"InputButton\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"All the different input buttons that are supported. Use with\\r /\",\n          \"definition\": \"export enum InputButton {\\n    /**\\r\\n     * @remarks\\r\\n     * This is mapped to the 'Jump' button on controllers,\\r\\n     * keyboards, and touch interfaces.\\r\\n     *\\r\\n     */\\r\\n    Jump = 'Jump',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * This is mapped to the 'Sneak' button on controllers,\\r\\n     * keyboards, and touch interfaces. By default, this is shift\\r\\n     * on a keyboard or B on an Xbox controller. On touch\\r\\n     * interfaces this will only be pressed for 1 tick or less and\\r\\n     * then it will be released immediately even if the player\\r\\n     * holds their finger down. Dismounting a horse or exiting a\\r\\n     * boat will not send a Sneak button change event.\\r\\n     *\\r\\n     */\\r\\n    Sneak = 'Sneak',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * All the different input buttons that are supported. Use with\\r\\n * {@link InputInfo.getButtonState} via {@link\\r\\n * Player.inputInfo} or {@link PlayerButtonInputAfterEvent} via\\r\\n * {@link WorldAfterEvents.playerButtonInput}\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Jump\",\n              \"value\": \"Jump\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Sneak\",\n              \"value\": \"Sneak\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"inputbutton\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.InputMode\",\n          \"name\": \"InputMode\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Describes the type of input of a device.\\r /\",\n          \"definition\": \"export enum InputMode {\\n    /**\\r\\n     * @remarks\\r\\n     * Gamepad input.\\r\\n     *\\r\\n     */\\r\\n    Gamepad = 'Gamepad',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Keyboard and mouse input.\\r\\n     *\\r\\n     */\\r\\n    KeyboardAndMouse = 'KeyboardAndMouse',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Motion controller input.\\r\\n     *\\r\\n     */\\r\\n    MotionController = 'MotionController',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Touch input.\\r\\n     *\\r\\n     */\\r\\n    Touch = 'Touch',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Describes the type of input of a device.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Gamepad\",\n              \"value\": \"Gamepad\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"KeyboardAndMouse\",\n              \"value\": \"KeyboardAndMouse\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MotionController\",\n              \"value\": \"MotionController\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Touch\",\n              \"value\": \"Touch\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"inputmode\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.InputPermissionCategory\",\n          \"name\": \"InputPermissionCategory\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"PlayerInputPermissionCategoryChangeAfterEvent} to specify\\r PlayerInputPermissions} to get or set permissions.\\r /\",\n          \"definition\": \"export enum InputPermissionCategory {\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to camera movement.\\r\\n     *\\r\\n     */\\r\\n    Camera = 1,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to all player movement. Disabling this\\r\\n     * is equivalent to disabling jump, sneak, lateral movement,\\r\\n     * mount, and dismount.\\r\\n     *\\r\\n     */\\r\\n    Movement = 2,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input for moving laterally in the world. This would\\r\\n     * be WASD on a keyboard or the movement joystick on gamepad or\\r\\n     * touch.\\r\\n     *\\r\\n     */\\r\\n    LateralMovement = 4,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to sneak. This also affects flying\\r\\n     * down.\\r\\n     *\\r\\n     */\\r\\n    Sneak = 5,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to jumping. This also affects flying\\r\\n     * up.\\r\\n     *\\r\\n     */\\r\\n    Jump = 6,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to mounting vehicles.\\r\\n     *\\r\\n     */\\r\\n    Mount = 7,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to dismounting. When disabled, the\\r\\n     * player can still dismount vehicles by other means, for\\r\\n     * example on horses players can still jump off and in boats\\r\\n     * players can go into another boat.\\r\\n     *\\r\\n     */\\r\\n    Dismount = 8,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to moving the player forward.\\r\\n     *\\r\\n     */\\r\\n    MoveForward = 9,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to moving the player backward.\\r\\n     *\\r\\n     */\\r\\n    MoveBackward = 10,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to moving the player left.\\r\\n     *\\r\\n     */\\r\\n    MoveLeft = 11,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Player input relating to moving the player right.\\r\\n     *\\r\\n     */\\r\\n    MoveRight = 12,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Input permission categories. Used by {@link\\r\\n * PlayerInputPermissionCategoryChangeAfterEvent} to specify\\r\\n * which category was changed and {@link\\r\\n * PlayerInputPermissions} to get or set permissions.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Camera\",\n              \"value\": 1,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Movement\",\n              \"value\": 2,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"LateralMovement\",\n              \"value\": 4,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Sneak\",\n              \"value\": 5,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Jump\",\n              \"value\": 6,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Mount\",\n              \"value\": 7,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Dismount\",\n              \"value\": 8,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MoveForward\",\n              \"value\": 9,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MoveBackward\",\n              \"value\": 10,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MoveLeft\",\n              \"value\": 11,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"MoveRight\",\n              \"value\": 12,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"inputpermissioncategory\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ItemComponentTypes\",\n          \"name\": \"ItemComponentTypes\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The types of item components that are accessible via\\r function ItemStack.getComponent.\\r /\",\n          \"definition\": \"export enum ItemComponentTypes {\\n    Compostable = 'minecraft:compostable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The minecraft:cooldown component.\\r\\n     *\\r\\n     */\\r\\n    Cooldown = 'minecraft:cooldown',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The minecraft:durability component.\\r\\n     *\\r\\n     */\\r\\n    Durability = 'minecraft:durability',\\r\\n    Dyeable = 'minecraft:dyeable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The minecraft:enchantable component.\\r\\n     *\\r\\n     */\\r\\n    Enchantable = 'minecraft:enchantable',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The minecraft:food component.\\r\\n     *\\r\\n     */\\r\\n    Food = 'minecraft:food',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The types of item components that are accessible via\\r\\n * function ItemStack.getComponent.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Compostable\",\n              \"value\": \"minecraft:compostable\"\n            },\n            {\n              \"name\": \"Cooldown\",\n              \"value\": \"minecraft:cooldown\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Durability\",\n              \"value\": \"minecraft:durability\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Dyeable\",\n              \"value\": \"minecraft:dyeable\"\n            },\n            {\n              \"name\": \"Enchantable\",\n              \"value\": \"minecraft:enchantable\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Food\",\n              \"value\": \"minecraft:food\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"itemcomponenttypes\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ItemLockMode\",\n          \"name\": \"ItemLockMode\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Describes how an an item can be moved within a container.\\r /\",\n          \"definition\": \"export enum ItemLockMode {\\n    /**\\r\\n     * @remarks\\r\\n     * The item cannot be dropped or crafted with.\\r\\n     *\\r\\n     */\\r\\n    inventory = 'inventory',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The item has no container restrictions.\\r\\n     *\\r\\n     */\\r\\n    none = 'none',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The item cannot be moved from its slot, dropped or crafted\\r\\n     * with.\\r\\n     *\\r\\n     */\\r\\n    slot = 'slot',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Describes how an an item can be moved within a container.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"inventory\",\n              \"value\": \"inventory\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"none\",\n              \"value\": \"none\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"slot\",\n              \"value\": \"slot\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"itemlockmode\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.LiquidType\",\n          \"name\": \"LiquidType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents the type of liquid that can be placed on a block\\r or flow dynamically in the world.\\r /\",\n          \"definition\": \"export enum LiquidType {\\n    /**\\r\\n     * @remarks\\r\\n     * Represents water as a type of liquid.\\r\\n     *\\r\\n     */\\r\\n    Water = 'Water',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents the type of liquid that can be placed on a block\\r\\n * or flow dynamically in the world.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Water\",\n              \"value\": \"Water\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"liquidtype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.MemoryTier\",\n          \"name\": \"MemoryTier\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Describes the memory of a device.\\r /\",\n          \"definition\": \"export enum MemoryTier {\\n    /**\\r\\n     * @remarks\\r\\n     * Max memory for Super Low Tier is 1.5GBs.\\r\\n     *\\r\\n     */\\r\\n    SuperLow = 0,\\r\\n    /**\\r\\n     * @remarks\\r\\n     *  Max memory for Low Tier is 2GBs.\\r\\n     *\\r\\n     */\\r\\n    Low = 1,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Max memory for Mid Tier is 4GBs.\\r\\n     *\\r\\n     */\\r\\n    Mid = 2,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Max memory for High Tier is 8GBs.\\r\\n     *\\r\\n     */\\r\\n    High = 3,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Memory for Super High Tier is above 8GBs.\\r\\n     *\\r\\n     */\\r\\n    SuperHigh = 4,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Describes the memory of a device.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"SuperLow\",\n              \"value\": 0,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Low\",\n              \"value\": 1,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Mid\",\n              \"value\": 2,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"High\",\n              \"value\": 3,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"SuperHigh\",\n              \"value\": 4,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"memorytier\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.MoonPhase\",\n          \"name\": \"MoonPhase\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Enum containing the different phases of the moon based on\\r the current day.,Obtain the current MoonPhase using\\r world.getMoonPhase.\\r  The fullness of the moon controls various mob behaviors such\\r as the number of slimes that spawn in Swamp biomes, the\\r chance skeletons and zombies have to spawn with armor, as\\r well as the chance for spiders to spawn with certain status\\r effects.\\r /\",\n          \"definition\": \"export enum MoonPhase {\\n    /**\\r\\n     * @remarks\\r\\n     * The brightest moon phase. During this phase, cats have a 50%\\r\\n     * chance of spawning as black cats.\\r\\n     *\\r\\n     */\\r\\n    FullMoon = 0,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The phase following the Full Moon.\\r\\n     *\\r\\n     */\\r\\n    WaningGibbous = 1,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The phase following the Waxing Crescent.\\r\\n     *\\r\\n     */\\r\\n    FirstQuarter = 2,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The phase following the Last Quarter.\\r\\n     *\\r\\n     */\\r\\n    WaningCrescent = 3,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The darkest moon phase.\\r\\n     *\\r\\n     */\\r\\n    NewMoon = 4,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The phase following the New Moon.\\r\\n     *\\r\\n     */\\r\\n    WaxingCrescent = 5,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The phase following the Waning Gibbous.\\r\\n     *\\r\\n     */\\r\\n    LastQuarter = 6,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The phase following the First Quarter.\\r\\n     *\\r\\n     */\\r\\n    WaxingGibbous = 7,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Enum containing the different phases of the moon based on\\r\\n * the current day.,Obtain the current MoonPhase using\\r\\n * world.getMoonPhase.\\r\\n *\\r\\n * The fullness of the moon controls various mob behaviors such\\r\\n * as the number of slimes that spawn in Swamp biomes, the\\r\\n * chance skeletons and zombies have to spawn with armor, as\\r\\n * well as the chance for spiders to spawn with certain status\\r\\n * effects.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"FullMoon\",\n              \"value\": 0,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"WaningGibbous\",\n              \"value\": 1,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FirstQuarter\",\n              \"value\": 2,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"WaningCrescent\",\n              \"value\": 3,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NewMoon\",\n              \"value\": 4,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"WaxingCrescent\",\n              \"value\": 5,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"LastQuarter\",\n              \"value\": 6,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"WaxingGibbous\",\n              \"value\": 7,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"moonphase\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.MovementType\",\n          \"name\": \"MovementType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The phase following the First Quarter.\",\n          \"definition\": \"export enum MovementType {\\n    Immovable = 'Immovable',\\r\\n    Popped = 'Popped',\\r\\n    Push = 'Push',\\r\\n    PushPull = 'PushPull',\\r\\n}\\r\",\n          \"jsdoc\": \"    /**\\r\\n     * @remarks\\r\\n     * The phase following the First Quarter.\\r\\n     *\\r\\n     */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Immovable\",\n              \"value\": \"Immovable\"\n            },\n            {\n              \"name\": \"Popped\",\n              \"value\": \"Popped\"\n            },\n            {\n              \"name\": \"Push\",\n              \"value\": \"Push\"\n            },\n            {\n              \"name\": \"PushPull\",\n              \"value\": \"PushPull\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"movementtype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.NamespaceNameErrorReason\",\n          \"name\": \"NamespaceNameErrorReason\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"An enumeration describing the reason for the namespace name\\r error being thrown\\r /\",\n          \"definition\": \"export enum NamespaceNameErrorReason {\\n    /**\\r\\n     * @remarks\\r\\n     * A restricted namespace was used as the namespace\\r\\n     *\\r\\n     */\\r\\n    DisallowedNamespace = 'DisallowedNamespace',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The name was missing a namespace when one is required\\r\\n     *\\r\\n     */\\r\\n    NoNamespace = 'NoNamespace',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * An enumeration describing the reason for the namespace name\\r\\n * error being thrown\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"DisallowedNamespace\",\n              \"value\": \"DisallowedNamespace\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NoNamespace\",\n              \"value\": \"NoNamespace\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"namespacenameerrorreason\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ObjectiveSortOrder\",\n          \"name\": \"ObjectiveSortOrder\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Used for specifying a sort order for how to display an\\r objective and its list of participants.\\r /\",\n          \"definition\": \"export enum ObjectiveSortOrder {\\n    /**\\r\\n     * @remarks\\r\\n     * Objective participant list is displayed in ascending (e.g.,\\r\\n     * A-Z) order.\\r\\n     *\\r\\n     */\\r\\n    Ascending = 0,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Objective participant list is displayed in descending (e.g.,\\r\\n     * Z-A) order.\\r\\n     *\\r\\n     */\\r\\n    Descending = 1,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Used for specifying a sort order for how to display an\\r\\n * objective and its list of participants.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Ascending\",\n              \"value\": 0,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Descending\",\n              \"value\": 1,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"objectivesortorder\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.PaletteColor\",\n          \"name\": \"PaletteColor\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Enum containing colors to be used with EntityColorComponent\\r and EntityColor2Component\\r /\",\n          \"definition\": \"export enum PaletteColor {\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #f0f0f0\\r\\n     *\\r\\n     */\\r\\n    White = 0,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #F9801D\\r\\n     *\\r\\n     */\\r\\n    Orange = 1,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #C74EBD\\r\\n     *\\r\\n     */\\r\\n    Magenta = 2,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #3AB3DA\\r\\n     *\\r\\n     */\\r\\n    LightBlue = 3,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #FED83D\\r\\n     *\\r\\n     */\\r\\n    Yellow = 4,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #80C71F\\r\\n     *\\r\\n     */\\r\\n    Lime = 5,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #F38BAA\\r\\n     *\\r\\n     */\\r\\n    Pink = 6,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #474F52\\r\\n     *\\r\\n     */\\r\\n    Gray = 7,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #9D9D97\\r\\n     *\\r\\n     */\\r\\n    Silver = 8,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #169C9C\\r\\n     *\\r\\n     */\\r\\n    Cyan = 9,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #8932B8\\r\\n     *\\r\\n     */\\r\\n    Purple = 10,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #3C44AA\\r\\n     *\\r\\n     */\\r\\n    Blue = 11,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #835432\\r\\n     *\\r\\n     */\\r\\n    Brown = 12,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #5E7C16\\r\\n     *\\r\\n     */\\r\\n    Green = 13,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #B02E26\\r\\n     *\\r\\n     */\\r\\n    Red = 14,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Hex color #1D1D21\\r\\n     *\\r\\n     */\\r\\n    Black = 15,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Enum containing colors to be used with EntityColorComponent\\r\\n * and EntityColor2Component\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"White\",\n              \"value\": 0,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Orange\",\n              \"value\": 1,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Magenta\",\n              \"value\": 2,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"LightBlue\",\n              \"value\": 3,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Yellow\",\n              \"value\": 4,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Lime\",\n              \"value\": 5,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Pink\",\n              \"value\": 6,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Gray\",\n              \"value\": 7,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Silver\",\n              \"value\": 8,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Cyan\",\n              \"value\": 9,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Purple\",\n              \"value\": 10,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Blue\",\n              \"value\": 11,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Brown\",\n              \"value\": 12,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Green\",\n              \"value\": 13,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Red\",\n              \"value\": 14,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Black\",\n              \"value\": 15,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"palettecolor\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.PlatformType\",\n          \"name\": \"PlatformType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Describes what kind of platform is a device.\\r /\",\n          \"definition\": \"export enum PlatformType {\\n    /**\\r\\n     * @remarks\\r\\n     * Specialized gaming device.\\r\\n     *\\r\\n     */\\r\\n    Console = 'Console',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Personal Computer (PC).\\r\\n     *\\r\\n     */\\r\\n    Desktop = 'Desktop',\\r\\n    /**\\r\\n     * @remarks\\r\\n     *  Handheld device such smartphone or tablet.\\r\\n     *\\r\\n     */\\r\\n    Mobile = 'Mobile',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Describes what kind of platform is a device.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Console\",\n              \"value\": \"Console\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Desktop\",\n              \"value\": \"Desktop\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Mobile\",\n              \"value\": \"Mobile\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"platformtype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.PlayerInventoryType\",\n          \"name\": \"PlayerInventoryType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Specifies the player inventory type.\\r /\",\n          \"definition\": \"export enum PlayerInventoryType {\\n    /**\\r\\n     * @remarks\\r\\n     * Hotbar inventory.\\r\\n     *\\r\\n     */\\r\\n    Hotbar = 'Hotbar',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Main inventory.\\r\\n     *\\r\\n     */\\r\\n    Inventory = 'Inventory',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Specifies the player inventory type.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Hotbar\",\n              \"value\": \"Hotbar\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Inventory\",\n              \"value\": \"Inventory\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"playerinventorytype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.PlayerPermissionLevel\",\n          \"name\": \"PlayerPermissionLevel\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The player permission level.\\r /\",\n          \"definition\": \"export enum PlayerPermissionLevel {\\n    /**\\r\\n     * @remarks\\r\\n     * Visitors can only observe the world, not interact with it.\\r\\n     *\\r\\n     */\\r\\n    Visitor = 0,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Members can build and mine, attack players and mobs, and\\r\\n     * interact with items and entities.\\r\\n     *\\r\\n     */\\r\\n    Member = 1,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Operators can teleport and use commands, in addition to\\r\\n     * everything Members can do.\\r\\n     *\\r\\n     */\\r\\n    Operator = 2,\\r\\n    Custom = 3,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The player permission level.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Visitor\",\n              \"value\": 0,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Member\",\n              \"value\": 1,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Operator\",\n              \"value\": 2,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Custom\",\n              \"value\": 3\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"playerpermissionlevel\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ScoreboardIdentityType\",\n          \"name\": \"ScoreboardIdentityType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains objectives and participants for the scoreboard.\\r /\",\n          \"definition\": \"export enum ScoreboardIdentityType {\\n    /**\\r\\n     * @remarks\\r\\n     * This scoreboard participant is tied to an entity.\\r\\n     *\\r\\n     */\\r\\n    Entity = 'Entity',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * This scoreboard participant is tied to a pseudo player\\r\\n     * entity - typically this is used to store scores as data or\\r\\n     * as abstract progress.\\r\\n     *\\r\\n     */\\r\\n    FakePlayer = 'FakePlayer',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * This scoreboard participant is tied to a player.\\r\\n     *\\r\\n     */\\r\\n    Player = 'Player',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains objectives and participants for the scoreboard.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Entity\",\n              \"value\": \"Entity\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"FakePlayer\",\n              \"value\": \"FakePlayer\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Player\",\n              \"value\": \"Player\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"scoreboardidentitytype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ScriptEventSource\",\n          \"name\": \"ScriptEventSource\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Describes where the script event originated from.\\r /\",\n          \"definition\": \"export enum ScriptEventSource {\\n    /**\\r\\n     * @remarks\\r\\n     * The script event originated from a Block such as a Command\\r\\n     * Block.\\r\\n     *\\r\\n     */\\r\\n    Block = 'Block',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The script event originated from an Entity such as a Player,\\r\\n     * Command Block Minecart or Animation Controller.\\r\\n     *\\r\\n     */\\r\\n    Entity = 'Entity',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The script event originated from an NPC dialogue.\\r\\n     *\\r\\n     */\\r\\n    NPCDialogue = 'NPCDialogue',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The script event originated from the server, such as from a\\r\\n     * runCommand API call or a dedicated server console.\\r\\n     *\\r\\n     */\\r\\n    Server = 'Server',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Describes where the script event originated from.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Block\",\n              \"value\": \"Block\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Entity\",\n              \"value\": \"Entity\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"NPCDialogue\",\n              \"value\": \"NPCDialogue\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Server\",\n              \"value\": \"Server\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"scripteventsource\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.SignSide\",\n          \"name\": \"SignSide\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents a side of a sign.\\r /\",\n          \"definition\": \"export enum SignSide {\\n    /**\\r\\n     * @remarks\\r\\n     * The back of the sign.\\r\\n     *\\r\\n     */\\r\\n    Back = 'Back',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The front of the sign.\\r\\n     *\\r\\n     */\\r\\n    Front = 'Front',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents a side of a sign.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Back\",\n              \"value\": \"Back\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Front\",\n              \"value\": \"Front\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"signside\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.StickyType\",\n          \"name\": \"StickyType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The front of the sign.\",\n          \"definition\": \"export enum StickyType {\\n    None = 'None',\\r\\n    Same = 'Same',\\r\\n}\\r\",\n          \"jsdoc\": \"    /**\\r\\n     * @remarks\\r\\n     * The front of the sign.\\r\\n     *\\r\\n     */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"None\",\n              \"value\": \"None\"\n            },\n            {\n              \"name\": \"Same\",\n              \"value\": \"Same\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"stickytype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.StructureAnimationMode\",\n          \"name\": \"StructureAnimationMode\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Specifies how structure blocks should be animated when a\\r structure is placed.\\r /\",\n          \"definition\": \"export enum StructureAnimationMode {\\n    /**\\r\\n     * @remarks\\r\\n     * Blocks will be randomly placed one at at time. Use\\r\\n     * @minecraft/server.StructurePlaceOptions.animationSeconds to\\r\\n     * control how long it takes for all blocks to be placed.\\r\\n     *\\r\\n     */\\r\\n    Blocks = 'Blocks',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Blocks will be placed one layer at a time from bottom to\\r\\n     * top. Use\\r\\n     * @minecraft/server.StructurePlaceOptions.animationSeconds to\\r\\n     * control how long it takes for all blocks to be placed.\\r\\n     *\\r\\n     */\\r\\n    Layers = 'Layers',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * All blocks will be placed immediately.\\r\\n     *\\r\\n     */\\r\\n    None = 'None',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Specifies how structure blocks should be animated when a\\r\\n * structure is placed.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Blocks\",\n              \"value\": \"Blocks\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Layers\",\n              \"value\": \"Layers\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"None\",\n              \"value\": \"None\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"structureanimationmode\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.StructureMirrorAxis\",\n          \"name\": \"StructureMirrorAxis\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Specifies how a structure should be mirrored when placed.\\r /\",\n          \"definition\": \"export enum StructureMirrorAxis {\\n    /**\\r\\n     * @remarks\\r\\n     * No mirroring.\\r\\n     *\\r\\n     */\\r\\n    None = 'None',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Structure is mirrored across the X axis.\\r\\n     *\\r\\n     */\\r\\n    X = 'X',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Structure is mirrored across both the X and Z axes.\\r\\n     *\\r\\n     */\\r\\n    XZ = 'XZ',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Structure is mirrored across the Z axis.\\r\\n     *\\r\\n     */\\r\\n    Z = 'Z',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Specifies how a structure should be mirrored when placed.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"None\",\n              \"value\": \"None\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"X\",\n              \"value\": \"X\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"XZ\",\n              \"value\": \"XZ\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Z\",\n              \"value\": \"Z\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"structuremirroraxis\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.StructureRotation\",\n          \"name\": \"StructureRotation\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Enum describing a structure's placement rotation.\\r /\",\n          \"definition\": \"export enum StructureRotation {\\n    /**\\r\\n     * @remarks\\r\\n     * No rotation.\\r\\n     *\\r\\n     */\\r\\n    None = 'None',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * 180 degree rotation.\\r\\n     *\\r\\n     */\\r\\n    Rotate180 = 'Rotate180',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * 270 degree rotation.\\r\\n     *\\r\\n     */\\r\\n    Rotate270 = 'Rotate270',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * 90 degree rotation.\\r\\n     *\\r\\n     */\\r\\n    Rotate90 = 'Rotate90',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Enum describing a structure's placement rotation.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"None\",\n              \"value\": \"None\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Rotate180\",\n              \"value\": \"Rotate180\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Rotate270\",\n              \"value\": \"Rotate270\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Rotate90\",\n              \"value\": \"Rotate90\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"structurerotation\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.StructureSaveMode\",\n          \"name\": \"StructureSaveMode\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Specifies how a structure should be saved.\\r /\",\n          \"definition\": \"export enum StructureSaveMode {\\n    /**\\r\\n     * @remarks\\r\\n     * The structure will be temporarily saved to memory. The\\r\\n     * structure will persist until the world is shut down.\\r\\n     *\\r\\n     */\\r\\n    Memory = 'Memory',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The structure will be saved to the world file and persist\\r\\n     * between world loads. A saved structure can be removed from\\r\\n     * the world via @minecraft/server.StructureManager.delete.\\r\\n     *\\r\\n     */\\r\\n    World = 'World',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Specifies how a structure should be saved.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Memory\",\n              \"value\": \"Memory\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"World\",\n              \"value\": \"World\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"structuresavemode\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.TimeOfDay\",\n          \"name\": \"TimeOfDay\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Provides numeric values for common periods in the Minecraft\\r day.\\r /\",\n          \"definition\": \"export enum TimeOfDay {\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the time to the start of the day, which is time of the\\r\\n     * day 1,000 (or the equivalent of 7am) in Minecraft.\\r\\n     *\\r\\n     */\\r\\n    Day = 1000,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the time to noon, which is time of the day 6,000 in\\r\\n     * Minecraft.\\r\\n     *\\r\\n     */\\r\\n    Noon = 6000,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the time to sunset, which is time of the day 12,000 (or\\r\\n     * the equivalent of 6pm) in Minecraft.\\r\\n     *\\r\\n     */\\r\\n    Sunset = 12000,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the time to night, which is time of the day 13,000 (or\\r\\n     * the equivalent of 7:00pm) in Minecraft.\\r\\n     *\\r\\n     */\\r\\n    Night = 13000,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the time to midnight, which is time of the day 18,000\\r\\n     * (or the equivalent of 12:00am) in Minecraft.\\r\\n     *\\r\\n     */\\r\\n    Midnight = 18000,\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the time to sunrise, which is time of the day 23,000\\r\\n     * (or the equivalent of 5am) in Minecraft.\\r\\n     *\\r\\n     */\\r\\n    Sunrise = 23000,\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Provides numeric values for common periods in the Minecraft\\r\\n * day.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Day\",\n              \"value\": 1000,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Noon\",\n              \"value\": 6000,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Sunset\",\n              \"value\": 12000,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Night\",\n              \"value\": 13000,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Midnight\",\n              \"value\": 18000,\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Sunrise\",\n              \"value\": 23000,\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"timeofday\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.TintMethod\",\n          \"name\": \"TintMethod\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Tint logic applied to a block or part of a block. The color\\r may vary when a world position is part of the context, as\\r biomes often have an influence on the resulting tint.\\r /\",\n          \"definition\": \"export enum TintMethod {\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies a birch foliage tint method.\\r\\n     *\\r\\n     */\\r\\n    BirchFoliage = 'BirchFoliage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies a default foliage tint method.\\r\\n     *\\r\\n     */\\r\\n    DefaultFoliage = 'DefaultFoliage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies a dry foliage tint method.\\r\\n     *\\r\\n     */\\r\\n    DryFoliage = 'DryFoliage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies an evergreen foliage tint method.\\r\\n     *\\r\\n     */\\r\\n    EvergreenFoliage = 'EvergreenFoliage',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies a grass tint method.\\r\\n     *\\r\\n     */\\r\\n    Grass = 'Grass',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies no tint method, resulting in a white tint.\\r\\n     *\\r\\n     */\\r\\n    None = 'None',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies a water tint method.\\r\\n     *\\r\\n     */\\r\\n    Water = 'Water',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Tint logic applied to a block or part of a block. The color\\r\\n * may vary when a world position is part of the context, as\\r\\n * biomes often have an influence on the resulting tint.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"BirchFoliage\",\n              \"value\": \"BirchFoliage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DefaultFoliage\",\n              \"value\": \"DefaultFoliage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"DryFoliage\",\n              \"value\": \"DryFoliage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"EvergreenFoliage\",\n              \"value\": \"EvergreenFoliage\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Grass\",\n              \"value\": \"Grass\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"None\",\n              \"value\": \"None\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Water\",\n              \"value\": \"Water\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"tintmethod\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.WeatherType\",\n          \"name\": \"WeatherType\",\n          \"type\": \"enum\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Used to specify the type of weather condition within the\\r world.\\r /\",\n          \"definition\": \"export enum WeatherType {\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies a clear weather condition.\\r\\n     *\\r\\n     */\\r\\n    Clear = 'Clear',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies a rain weather condition.\\r\\n     *\\r\\n     */\\r\\n    Rain = 'Rain',\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Specifies a rain and thunder weather condition.\\r\\n     *\\r\\n     */\\r\\n    Thunder = 'Thunder',\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Used to specify the type of weather condition within the\\r\\n * world.\\r\\n */\\r\",\n          \"enumValues\": [\n            {\n              \"name\": \"Clear\",\n              \"value\": \"Clear\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Rain\",\n              \"value\": \"Rain\",\n              \"description\": \"\"\n            },\n            {\n              \"name\": \"Thunder\",\n              \"value\": \"Thunder\",\n              \"description\": \"\"\n            }\n          ],\n          \"categories\": [\n            \"Enums\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"weathertype\",\n            \"enum\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentTypeMap\",\n          \"name\": \"BlockComponentTypeMap\",\n          \"type\": \"type\",\n          \"module\": \"@minecraft/server\",\n          \"definition\": \"export type BlockComponentTypeMap = {\",\n          \"jsdoc\": \"\",\n          \"typeDefinition\": \"{\",\n          \"categories\": [\n            \"Types\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponenttypemap\",\n            \"type\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.EntityComponentTypeMap\",\n          \"name\": \"EntityComponentTypeMap\",\n          \"type\": \"type\",\n          \"module\": \"@minecraft/server\",\n          \"definition\": \"export type EntityComponentTypeMap = {\",\n          \"jsdoc\": \"\",\n          \"typeDefinition\": \"{\",\n          \"categories\": [\n            \"Types\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"entitycomponenttypemap\",\n            \"type\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ItemComponentTypeMap\",\n          \"name\": \"ItemComponentTypeMap\",\n          \"type\": \"type\",\n          \"module\": \"@minecraft/server\",\n          \"definition\": \"export type ItemComponentTypeMap = {\",\n          \"jsdoc\": \"\",\n          \"typeDefinition\": \"{\",\n          \"categories\": [\n            \"Types\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"itemcomponenttypemap\",\n            \"type\"\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.Block\",\n          \"name\": \"Block\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents a block in a dimension. A block represents a\\r unique X, Y, and Z within a dimension and get/sets the state\\r of the block at that location. This type was significantly\\r updated in version 1.17.10.21.\\r /\",\n          \"definition\": \"export class Block {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the dimension that the block is within.\\r\\n     *\\r\\n     */\\r\\n    readonly dimension: Dimension;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns true if this block is an air block (i.e., empty\\r\\n     * space).\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly isAir: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns true if this block is a liquid block - (e.g., a\\r\\n     * water block and a lava block are liquid, while an air block\\r\\n     * and a stone block are not. Water logged blocks are not\\r\\n     * liquid blocks).\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly isLiquid: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns true if this reference to a block is still valid\\r\\n     * (for example, if the block is unloaded, references to that\\r\\n     * block will no longer be valid.)\\r\\n     *\\r\\n     */\\r\\n    readonly isValid: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns or sets whether this block has water on it.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly isWaterlogged: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Key for the localization of this block's name used in .lang\\r\\n     * files.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly localizationKey: string;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Coordinates of the specified block.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\\n    readonly location: Vector3;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Additional block configuration data that describes the\\r\\n     * block.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly permutation: BlockPermutation;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets the type of block.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly 'type': BlockType;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Identifier of the type of block for this block. Warning:\\r\\n     * Vanilla block names can be changed in future releases, try\\r\\n     * using 'Block.matches' instead for block comparison.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly typeId: string;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * X coordinate of the block.\\r\\n     *\\r\\n     */\\r\\n    readonly x: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Y coordinate of the block.\\r\\n     *\\r\\n     */\\r\\n    readonly y: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Z coordinate of the block.\\r\\n     *\\r\\n     */\\r\\n    readonly z: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} above this block (positive in the\\r\\n     * Y direction).\\r\\n     *\\r\\n     * @param steps\\r\\n     * Number of steps above to step before returning.\\r\\n     * Defaults to: 1\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    above(steps?: number): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} below this block (negative in the\\r\\n     * Y direction).\\r\\n     *\\r\\n     * @param steps\\r\\n     * Number of steps below to step before returning.\\r\\n     * Defaults to: 1\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    below(steps?: number): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Vector3} of the center of this block on\\r\\n     * the X and Z axis.\\r\\n     *\\r\\n     */\\r\\n    bottomCenter(): Vector3;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this block is removed when touched by\\r\\n     * liquid.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether this block is removed when touched by liquid.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this block can have a liquid placed over it,\\r\\n     * i.e. be waterlogged.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether this block can have a liquid placed over it.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    canContainLiquid(liquidType: LiquidType): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Vector3} of the center of this block on\\r\\n     * the X, Y, and Z axis.\\r\\n     *\\r\\n     */\\r\\n    center(): Vector3;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} to the east of this block\\r\\n     * (positive in the X direction).\\r\\n     *\\r\\n     * @param steps\\r\\n     * Number of steps to the east to step before returning.\\r\\n     * Defaults to: 1\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    east(steps?: number): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets a component (that represents additional capabilities)\\r\\n     * for a block - for example, an inventory component of a chest\\r\\n     * block.\\r\\n     *\\r\\n     * @param componentId\\r\\n     * The identifier of the component (e.g.,\\r\\n     * 'minecraft:inventory'). If no namespace prefix is specified,\\r\\n     * 'minecraft:' is assumed. Available component IDs are those\\r\\n     * in the {@link BlockComponentTypes} enum and custom component\\r\\n     * IDs registered with the {@link BlockComponentRegistry}.\\r\\n     * @returns\\r\\n     * Returns the component if it exists on the block, otherwise\\r\\n     * undefined.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    getComponent<T extends string>(componentId: T): BlockComponentReturnType<T> | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Creates a prototype item stack based on this block that can\\r\\n     * be used with Container/ContainerSlot APIs.\\r\\n     *\\r\\n     * @param amount\\r\\n     * Number of instances of this block to place in the item\\r\\n     * stack.\\r\\n     * Defaults to: 1\\r\\n     * @param withData\\r\\n     * Whether additional data facets of the item stack are\\r\\n     * included.\\r\\n     * Defaults to: false\\r\\n     * @returns\\r\\n     * An itemStack with the specified amount of items and data.\\r\\n     * Returns undefined if block type is incompatible.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    getItemStack(amount?: number, withData?: boolean): ItemStack | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the net redstone power of this block.\\r\\n     *\\r\\n     * @returns\\r\\n     * Returns undefined if redstone power is not applicable to\\r\\n     * this block.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    getRedstonePower(): number | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a set of tags for a block.\\r\\n     *\\r\\n     * @returns\\r\\n     * The list of tags that the block has.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    getTags(): string[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Checks to see if the permutation of this block has a\\r\\n     * specific tag.\\r\\n     *\\r\\n     * @param tag\\r\\n     * Tag to check for.\\r\\n     * @returns\\r\\n     * Returns `true` if the permutation of this block has the tag,\\r\\n     * else `false`.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     * @example checkBlockTags.ts\\r\\n     * ```typescript\\r\\n     * import { DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     *\\r\\n     * function checkBlockTags(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n     *   // Fetch the block\\r\\n     *   const block = targetLocation.dimension.getBlock(targetLocation);\\r\\n     *\\r\\n     *   // check that the block is loaded\\r\\n     *   if (block) {\\r\\n     *     log(`Block is dirt: ${block.hasTag(\\\"dirt\\\")}`);\\r\\n     *     log(`Block is wood: ${block.hasTag(\\\"wood\\\")}`);\\r\\n     *     log(`Block is stone: ${block.hasTag(\\\"stone\\\")}`);\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    hasTag(tag: string): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this block stops liquid from flowing.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether this block stops liquid from flowing.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    isLiquidBlocking(liquidType: LiquidType): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether liquid can flow into the block from the\\r\\n     * provided direction, or flow out from the provided direction\\r\\n     * when liquid is placed into it with a bucket.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether liquid can flow into the block from the provided\\r\\n     * direction, or flow out from the provided direction when\\r\\n     * liquid is placed into it with a bucket\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    liquidCanFlowFromDirection(liquidType: LiquidType, flowDirection: Direction): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this block is removed and spawns its item\\r\\n     * when touched by liquid.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether this block is removed and spawns its item when\\r\\n     * touched by liquid.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    liquidSpreadCausesSpawn(liquidType: LiquidType): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Tests whether this block matches a specific criteria.\\r\\n     *\\r\\n     * @param blockName\\r\\n     * Block type identifier to match this API against.\\r\\n     * @param states\\r\\n     * Optional set of block states to test this block against.\\r\\n     * @returns\\r\\n     * Returns true if the block matches the specified criteria.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    matches(blockName: string, states?: Record<string, boolean | number | string>): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} to the north of this block\\r\\n     * (negative in the Z direction).\\r\\n     *\\r\\n     * @param steps\\r\\n     * Number of steps to the north to step before returning.\\r\\n     * Defaults to: 1\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    north(steps?: number): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a block at an offset relative vector to this block.\\r\\n     *\\r\\n     * @param offset\\r\\n     * The offset vector. For example, an offset of 0, 1, 0 will\\r\\n     * return the block above the current block.\\r\\n     * @returns\\r\\n     * Block at the specified offset, or undefined if that block\\r\\n     * could not be retrieved (for example, the block and its\\r\\n     * relative chunk is not loaded yet.)\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    offset(offset: Vector3): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the block in the dimension to the state of the\\r\\n     * permutation.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param permutation\\r\\n     * Permutation that contains a set of property states for the\\r\\n     * Block.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    setPermutation(permutation: BlockPermutation): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the type of block.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param blockType\\r\\n     * Identifier of the type of block to apply - for example,\\r\\n     * minecraft:powered_repeater.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    setType(blockType: BlockType | string): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets whether this block has a water logged state - for\\r\\n     * example, whether stairs are submerged within water.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param isWaterlogged\\r\\n     * true if the block should have water within it.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    setWaterlogged(isWaterlogged: boolean): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} to the south of this block\\r\\n     * (positive in the Z direction).\\r\\n     *\\r\\n     * @param steps\\r\\n     * Number of steps to the south to step before returning.\\r\\n     * Defaults to: 1\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    south(steps?: number): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the {@link Block} to the west of this block\\r\\n     * (negative in the X direction).\\r\\n     *\\r\\n     * @param steps\\r\\n     * Number of steps to the west to step before returning.\\r\\n     * Defaults to: 1\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    west(steps?: number): Block | undefined;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents a block in a dimension. A block represents a\\r\\n * unique X, Y, and Z within a dimension and get/sets the state\\r\\n * of the block at that location. This type was significantly\\r\\n * updated in version 1.17.10.21.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"dimension\",\n              \"type\": \"Dimension\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"isAir\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"isLiquid\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"isValid\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"isWaterlogged\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"localizationKey\",\n              \"type\": \"string\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"location\",\n              \"type\": \"Vector3\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"permutation\",\n              \"type\": \"BlockPermutation\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"typeId\",\n              \"type\": \"string\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"x\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"y\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"z\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"above\",\n              \"parameters\": [],\n              \"returnType\": \"Block | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"above(steps?: number): Block | undefined\"\n            },\n            {\n              \"name\": \"below\",\n              \"parameters\": [],\n              \"returnType\": \"Block | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"below(steps?: number): Block | undefined\"\n            },\n            {\n              \"name\": \"bottomCenter\",\n              \"parameters\": [],\n              \"returnType\": \"Vector3\",\n              \"accessibility\": \"public\",\n              \"signature\": \"bottomCenter(): Vector3\"\n            },\n            {\n              \"name\": \"canBeDestroyedByLiquidSpread\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean\"\n            },\n            {\n              \"name\": \"canContainLiquid\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"canContainLiquid(liquidType: LiquidType): boolean\"\n            },\n            {\n              \"name\": \"center\",\n              \"parameters\": [],\n              \"returnType\": \"Vector3\",\n              \"accessibility\": \"public\",\n              \"signature\": \"center(): Vector3\"\n            },\n            {\n              \"name\": \"east\",\n              \"parameters\": [],\n              \"returnType\": \"Block | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"east(steps?: number): Block | undefined\"\n            },\n            {\n              \"name\": \"getItemStack\",\n              \"parameters\": [],\n              \"returnType\": \"ItemStack | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getItemStack(amount?: number, withData?: boolean): ItemStack | undefined\"\n            },\n            {\n              \"name\": \"getRedstonePower\",\n              \"parameters\": [],\n              \"returnType\": \"number | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getRedstonePower(): number | undefined\"\n            },\n            {\n              \"name\": \"getTags\",\n              \"parameters\": [],\n              \"returnType\": \"string[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getTags(): string[]\"\n            },\n            {\n              \"name\": \"hasTag\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"hasTag(tag: string): boolean\"\n            },\n            {\n              \"name\": \"isLiquidBlocking\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"isLiquidBlocking(liquidType: LiquidType): boolean\"\n            },\n            {\n              \"name\": \"liquidCanFlowFromDirection\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"liquidCanFlowFromDirection(liquidType: LiquidType, flowDirection: Direction): boolean\"\n            },\n            {\n              \"name\": \"liquidSpreadCausesSpawn\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"liquidSpreadCausesSpawn(liquidType: LiquidType): boolean\"\n            },\n            {\n              \"name\": \"matches\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"matches(blockName: string, states?: Record<string, boolean | number | string>): boolean\"\n            },\n            {\n              \"name\": \"north\",\n              \"parameters\": [],\n              \"returnType\": \"Block | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"north(steps?: number): Block | undefined\"\n            },\n            {\n              \"name\": \"offset\",\n              \"parameters\": [],\n              \"returnType\": \"Block | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"offset(offset: Vector3): Block | undefined\"\n            },\n            {\n              \"name\": \"setPermutation\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setPermutation(permutation: BlockPermutation): void\"\n            },\n            {\n              \"name\": \"setType\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setType(blockType: BlockType | string): void\"\n            },\n            {\n              \"name\": \"setWaterlogged\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setWaterlogged(isWaterlogged: boolean): void\"\n            },\n            {\n              \"name\": \"south\",\n              \"parameters\": [],\n              \"returnType\": \"Block | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"south(steps?: number): Block | undefined\"\n            },\n            {\n              \"name\": \"west\",\n              \"parameters\": [],\n              \"returnType\": \"Block | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"west(steps?: number): Block | undefined\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"block\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponent\",\n          \"name\": \"BlockComponent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Base type for components associated with blocks.\\r /\",\n          \"definition\": \"export class BlockComponent extends Component {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Block instance that this component pertains to.\\r\\n     *\\r\\n     */\\r\\n    readonly block: Block;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Base type for components associated with blocks.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"block\",\n              \"type\": \"Block\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"Component\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentEntityFallOnEvent\",\n          \"name\": \"BlockComponentEntityFallOnEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding an entity falling onto a\\r specific block.\\r /\",\n          \"definition\": \"export class BlockComponentEntityFallOnEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The entity that fell onto the block.\\r\\n     *\\r\\n     */\\r\\n    readonly entity?: Entity;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The distance that the entity fell onto this block with.\\r\\n     *\\r\\n     */\\r\\n    readonly fallDistance: number;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding an entity falling onto a\\r\\n * specific block.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"fallDistance\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponententityfallonevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentOnPlaceEvent\",\n          \"name\": \"BlockComponentOnPlaceEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding a specific block that was\\r placed.\\r /\",\n          \"definition\": \"export class BlockComponentOnPlaceEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Previous block at this location that was replaced.\\r\\n     *\\r\\n     */\\r\\n    readonly previousBlock: BlockPermutation;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding a specific block that was\\r\\n * placed.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"previousBlock\",\n              \"type\": \"BlockPermutation\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponentonplaceevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentPlayerBreakEvent\",\n          \"name\": \"BlockComponentPlayerBreakEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding a specific block being broken\\r by a player.\\r /\",\n          \"definition\": \"export class BlockComponentPlayerBreakEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns permutation information about this block before it\\r\\n     * was broken.\\r\\n     *\\r\\n     */\\r\\n    readonly brokenBlockPermutation: BlockPermutation;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The player that broke this block.\\r\\n     *\\r\\n     */\\r\\n    readonly player?: Player;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding a specific block being broken\\r\\n * by a player.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"brokenBlockPermutation\",\n              \"type\": \"BlockPermutation\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponentplayerbreakevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentPlayerInteractEvent\",\n          \"name\": \"BlockComponentPlayerInteractEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding a specific block being\\r interacted with.\\r /\",\n          \"definition\": \"export class BlockComponentPlayerInteractEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The block face that was interacted with.\\r\\n     *\\r\\n     */\\r\\n    readonly face: Direction;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Location relative to the bottom north-west corner of the\\r\\n     * block that the player interacted with.\\r\\n     *\\r\\n     */\\r\\n    readonly faceLocation?: Vector3;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The player that interacted with this block.\\r\\n     *\\r\\n     */\\r\\n    readonly player?: Player;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding a specific block being\\r\\n * interacted with.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"face\",\n              \"type\": \"Direction\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponentplayerinteractevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentPlayerPlaceBeforeEvent\",\n          \"name\": \"BlockComponentPlayerPlaceBeforeEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding an event before a player\\r places a block.\\r /\",\n          \"definition\": \"export class BlockComponentPlayerPlaceBeforeEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * If set to true, cancels the block place event.\\r\\n     *\\r\\n     */\\r\\n    cancel: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The block face that was placed onto.\\r\\n     *\\r\\n     */\\r\\n    readonly face: Direction;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The block permutation that will be placed if the event is\\r\\n     * not cancelled. If set to a different block permutation, that\\r\\n     * permutation will be placed instead.\\r\\n     *\\r\\n     */\\r\\n    permutationToPlace: BlockPermutation;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The player that is placing this block.\\r\\n     *\\r\\n     */\\r\\n    readonly player?: Player;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding an event before a player\\r\\n * places a block.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"face\",\n              \"type\": \"Direction\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponentplayerplacebeforeevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentRandomTickEvent\",\n          \"name\": \"BlockComponentRandomTickEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding a specific block randomly\\r ticking.\\r /\",\n          \"definition\": \"export class BlockComponentRandomTickEvent extends BlockEvent {\\n    private constructor();\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding a specific block randomly\\r\\n * ticking.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponentrandomtickevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentRegistry\",\n          \"name\": \"BlockComponentRegistry\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"definition\": \"export class BlockComponentRegistry {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link BlockCustomComponentAlreadyRegisteredError}\\r\\n     *\\r\\n     * {@link BlockCustomComponentReloadNewComponentError}\\r\\n     *\\r\\n     * {@link BlockCustomComponentReloadNewEventError}\\r\\n     *\\r\\n     * {@link BlockCustomComponentReloadVersionError}\\r\\n     *\\r\\n     * {@link CustomComponentInvalidRegistryError}\\r\\n     *\\r\\n     * {@link minecraftcommon.EngineError}\\r\\n     *\\r\\n     * {@link NamespaceNameError}\\r\\n     */\\r\\n    registerCustomComponent(name: string, customComponent: BlockCustomComponent): void;\\r\\n}\\r\",\n          \"jsdoc\": \"\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"registerCustomComponent\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"registerCustomComponent(name: string, customComponent: BlockCustomComponent): void\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponentregistry\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentStepOffEvent\",\n          \"name\": \"BlockComponentStepOffEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding an entity stepping off a\\r specific block.\\r /\",\n          \"definition\": \"export class BlockComponentStepOffEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The entity that stepped off the block.\\r\\n     *\\r\\n     */\\r\\n    readonly entity?: Entity;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding an entity stepping off a\\r\\n * specific block.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponentstepoffevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentStepOnEvent\",\n          \"name\": \"BlockComponentStepOnEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding an entity stepping onto a\\r specific block.\\r /\",\n          \"definition\": \"export class BlockComponentStepOnEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The entity that stepped on the block.\\r\\n     *\\r\\n     */\\r\\n    readonly entity?: Entity;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding an entity stepping onto a\\r\\n * specific block.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponentsteponevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockComponentTickEvent\",\n          \"name\": \"BlockComponentTickEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding a specific block ticking.\\r /\",\n          \"definition\": \"export class BlockComponentTickEvent extends BlockEvent {\\n    private constructor();\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding a specific block ticking.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcomponenttickevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockCustomComponentInstance\",\n          \"name\": \"BlockCustomComponentInstance\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"An instance of a custom component on a block.\\r /\",\n          \"definition\": \"export class BlockCustomComponentInstance extends BlockComponent {\\n    private constructor();\\r\\n    readonly customComponentParameters: CustomComponentParameters;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * An instance of a custom component on a block.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"customComponentParameters\",\n              \"type\": \"CustomComponentParameters\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockComponent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockcustomcomponentinstance\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockEvent\",\n          \"name\": \"BlockEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding an event that impacts a\\r specific block.\\r /\",\n          \"definition\": \"export class BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Block currently in the world at the location of this event.\\r\\n     *\\r\\n     */\\r\\n    readonly block: Block;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Dimension that contains the block that is the subject of\\r\\n     * this event.\\r\\n     *\\r\\n     */\\r\\n    readonly dimension: Dimension;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding an event that impacts a\\r\\n * specific block.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"block\",\n              \"type\": \"Block\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"dimension\",\n              \"type\": \"Dimension\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockExplodeAfterEvent\",\n          \"name\": \"BlockExplodeAfterEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information regarding an explosion that has\\r occurred for a specific block.\\r /\",\n          \"definition\": \"export class BlockExplodeAfterEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Description of the block that has exploded.\\r\\n     *\\r\\n     */\\r\\n    readonly explodedBlockPermutation: BlockPermutation;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Optional source of the explosion.\\r\\n     *\\r\\n     */\\r\\n    readonly source?: Entity;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information regarding an explosion that has\\r\\n * occurred for a specific block.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"explodedBlockPermutation\",\n              \"type\": \"BlockPermutation\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockexplodeafterevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockExplodeAfterEventSignal\",\n          \"name\": \"BlockExplodeAfterEventSignal\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Manages callbacks that are connected to when an explosion\\r occurs, as it impacts individual blocks.\\r /\",\n          \"definition\": \"export class BlockExplodeAfterEventSignal {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Adds a callback that will be called when an explosion\\r\\n     * occurs, as it impacts individual blocks.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     */\\r\\n    subscribe(callback: (arg0: BlockExplodeAfterEvent) => void): (arg0: BlockExplodeAfterEvent) => void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Removes a callback from being called when an explosion\\r\\n     * occurs, as it impacts individual blocks.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     */\\r\\n    unsubscribe(callback: (arg0: BlockExplodeAfterEvent) => void): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Manages callbacks that are connected to when an explosion\\r\\n * occurs, as it impacts individual blocks.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockexplodeaftereventsignal\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockFluidContainerComponent\",\n          \"name\": \"BlockFluidContainerComponent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents the fluid container of a block in the world. Used\\r with blocks like cauldrons.\\r /\",\n          \"definition\": \"export class BlockFluidContainerComponent extends BlockComponent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Relative fill level of the fluid container.\\r\\n     *\\r\\n     * This property can't be edited in read-only mode.\\r\\n     *\\r\\n     */\\r\\n    fillLevel: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Custom color of the fluid in the container.\\r\\n     *\\r\\n     * This property can't be edited in read-only mode.\\r\\n     *\\r\\n     */\\r\\n    fluidColor: RGBA;\\r\\n    static readonly componentId = 'minecraft:fluid_container';\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Adds a dye to the fluid. The dye color is combined with any\\r\\n     * existing custom color.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    addDye(dye: ItemType): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets the current fluid type in the container.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getFluidType(): FluidType;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the current fluid type in the container.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    setFluidType(fluidType: FluidType): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets a potion item in the container. Changes the container's\\r\\n     * fluid type to potion.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    setPotion(itemStack: ItemStack): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents the fluid container of a block in the world. Used\\r\\n * with blocks like cauldrons.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"minecraft\",\n              \"type\": \"fluid_container'\",\n              \"readonly\": false,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"addDye\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"addDye(dye: ItemType): void\"\n            },\n            {\n              \"name\": \"getFluidType\",\n              \"parameters\": [],\n              \"returnType\": \"FluidType\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getFluidType(): FluidType\"\n            },\n            {\n              \"name\": \"setFluidType\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setFluidType(fluidType: FluidType): void\"\n            },\n            {\n              \"name\": \"setPotion\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setPotion(itemStack: ItemStack): void\"\n            }\n          ],\n          \"extends\": \"BlockComponent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockfluidcontainercomponent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockInventoryComponent\",\n          \"name\": \"BlockInventoryComponent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents the inventory of a block in the world. Used with\\r blocks like chests.\\r ```typescript\\r  function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r   // Fetch block\\r   const block = targetLocation.dimension.getBlock(targetLocation);\\r    if (!block) {\\r     log(\\\"Could not find block. Maybe it is not loaded?\\\", -1);\\r     return;\\r   }\\r    // Make it a chest\\r   block.setType(MinecraftBlockTypes.Chest);\\r    // Get the inventory\\r   const inventoryComponent = block.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r    if (!inventoryComponent || !inventoryComponent.container) {\\r     log(\\\"Could not find inventory component.\\\", -1);\\r     return;\\r   }\\r    const inventoryContainer = inventoryComponent.container;\\r    // Set slot 0 to a stack of 10 apples\\r   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\\r }\\r ```\\r /\",\n          \"definition\": \"export class BlockInventoryComponent extends BlockComponent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The container which holds an {@link ItemStack}.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\\n    readonly container?: Container;\\r\\n    static readonly componentId = 'minecraft:inventory';\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents the inventory of a block in the world. Used with\\r\\n * blocks like chests.\\r\\n * @example placeItemsInChest.ts\\r\\n * ```typescript\\r\\n * import { ItemStack, BlockInventoryComponent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n * import { MinecraftBlockTypes, MinecraftItemTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n *\\r\\n * function placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n *   // Fetch block\\r\\n *   const block = targetLocation.dimension.getBlock(targetLocation);\\r\\n *\\r\\n *   if (!block) {\\r\\n *     log(\\\"Could not find block. Maybe it is not loaded?\\\", -1);\\r\\n *     return;\\r\\n *   }\\r\\n *\\r\\n *   // Make it a chest\\r\\n *   block.setType(MinecraftBlockTypes.Chest);\\r\\n *\\r\\n *   // Get the inventory\\r\\n *   const inventoryComponent = block.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r\\n *\\r\\n *   if (!inventoryComponent || !inventoryComponent.container) {\\r\\n *     log(\\\"Could not find inventory component.\\\", -1);\\r\\n *     return;\\r\\n *   }\\r\\n *\\r\\n *   const inventoryContainer = inventoryComponent.container;\\r\\n *\\r\\n *   // Set slot 0 to a stack of 10 apples\\r\\n *   inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\\r\\n * }\\r\\n * ```\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"minecraft\",\n              \"type\": \"inventory'\",\n              \"readonly\": false,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockComponent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockinventorycomponent\",\n            \"class\"\n          ],\n          \"examples\": [\n            {\n              \"title\": \"placeItemsInChest.ts\",\n              \"code\": \"import { ItemStack, BlockInventoryComponent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\nimport { MinecraftBlockTypes, MinecraftItemTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n\\nfunction placeItemsInChest(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n  // Fetch block\\r\\n  const block = targetLocation.dimension.getBlock(targetLocation);\\r\\n\\n  if (!block) {\\r\\n    log(\\\"Could not find block. Maybe it is not loaded?\\\", -1);\\r\\n    return;\\r\\n  }\\r\\n\\n  // Make it a chest\\r\\n  block.setType(MinecraftBlockTypes.Chest);\\r\\n\\n  // Get the inventory\\r\\n  const inventoryComponent = block.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r\\n\\n  if (!inventoryComponent || !inventoryComponent.container) {\\r\\n    log(\\\"Could not find inventory component.\\\", -1);\\r\\n    return;\\r\\n  }\\r\\n\\n  const inventoryContainer = inventoryComponent.container;\\r\\n\\n  // Set slot 0 to a stack of 10 apples\\r\\n  inventoryContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\\r\\n}\"\n            }\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockLocationIterator\",\n          \"name\": \"BlockLocationIterator\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"A BlockLocationIterator returns the next block location of\\r the block volume across which it is iterating.\\r The BlockLocationIterator is used to abstract the shape of\\r the block volume it was fetched from (so it can represent\\r all the block locations that make up rectangles, cubes,\\r spheres, lines and complex shapes).\\r Each iteration pass returns the next valid block location in\\r the parent shape.\\r Unless otherwise specified by the parent shape - the\\r BlockLocationIterator will iterate over a 3D space in the\\r order of increasing X, followed by increasing Z followed by\\r increasing Y.\\r (Effectively stepping across the XZ plane, and when all the\\r locations in that plane are exhausted, increasing the Y\\r coordinate to the next XZ slice)\\r /\",\n          \"definition\": \"export class BlockLocationIterator implements Iterable<Vector3> {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     */\\r\\n    [Symbol.iterator](): Iterator<Vector3>;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     */\\r\\n    next(): IteratorResult<Vector3>;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * A BlockLocationIterator returns the next block location of\\r\\n * the block volume across which it is iterating.\\r\\n * The BlockLocationIterator is used to abstract the shape of\\r\\n * the block volume it was fetched from (so it can represent\\r\\n * all the block locations that make up rectangles, cubes,\\r\\n * spheres, lines and complex shapes).\\r\\n * Each iteration pass returns the next valid block location in\\r\\n * the parent shape.\\r\\n * Unless otherwise specified by the parent shape - the\\r\\n * BlockLocationIterator will iterate over a 3D space in the\\r\\n * order of increasing X, followed by increasing Z followed by\\r\\n * increasing Y.\\r\\n * (Effectively stepping across the XZ plane, and when all the\\r\\n * locations in that plane are exhausted, increasing the Y\\r\\n * coordinate to the next XZ slice)\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"next\",\n              \"parameters\": [],\n              \"returnType\": \"IteratorResult<Vector3>\",\n              \"accessibility\": \"public\",\n              \"signature\": \"next(): IteratorResult<Vector3>\"\n            }\n          ],\n          \"implements\": [\n            \"Iterable<Vector3>\"\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blocklocationiterator\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockMapColorComponent\",\n          \"name\": \"BlockMapColorComponent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents the color of a block when displayed on a map.\\r /\",\n          \"definition\": \"export class BlockMapColorComponent extends BlockComponent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Base map color defined for that block.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\\n    readonly color: RGBA;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the base color multiplied to the evaluated tint at\\r\\n     * the given position.\\r\\n     *\\r\\n     */\\r\\n    readonly tintedColor: RGBA;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Type of tint applied to the color.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\\n    readonly tintMethod: TintMethod;\\r\\n    static readonly componentId = 'minecraft:map_color';\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents the color of a block when displayed on a map.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"color\",\n              \"type\": \"RGBA\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"tintedColor\",\n              \"type\": \"RGBA\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"tintMethod\",\n              \"type\": \"TintMethod\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"minecraft\",\n              \"type\": \"map_color'\",\n              \"readonly\": false,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockComponent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockmapcolorcomponent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockMovableComponent\",\n          \"name\": \"BlockMovableComponent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Type of tint applied to the color.\",\n          \"definition\": \"export class BlockMovableComponent extends BlockComponent {\\n    private constructor();\\r\\n    /**\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly movementType: MovementType;\\r\\n    /**\\r\\n     * @throws This property can throw when used.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    readonly stickyType: StickyType;\\r\\n    static readonly componentId = 'minecraft:movable';\\r\\n}\\r\",\n          \"jsdoc\": \"    /**\\r\\n     * @remarks\\r\\n     * Type of tint applied to the color.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"movementType\",\n              \"type\": \"MovementType\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"stickyType\",\n              \"type\": \"StickyType\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"minecraft\",\n              \"type\": \"movable'\",\n              \"readonly\": false,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockComponent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockmovablecomponent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockPermutation\",\n          \"name\": \"BlockPermutation\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"properties (also sometimes called block state) which\\r Block}).\\r ```typescript\\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r   const players = world.getPlayers();\\r    const dim = players[0].dimension;\\r    const signBlock = dim.getBlock(targetLocation);\\r    if (!signBlock) {\\r     log(\\\"Could not find a block at specified location.\\\");\\r     return -1;\\r   }\\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r    signBlock.setPermutation(signPerm);\\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r    signComponent?.setText({ translate: \\\"item.skull.player.name\\\", with: [players[0].name] });\\r }\\r ```\\r /\",\n          \"definition\": \"export class BlockPermutation {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The {@link BlockType} that the permutation has.\\r\\n     *\\r\\n     */\\r\\n    readonly 'type': BlockType;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this block is removed when touched by\\r\\n     * liquid.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether this block is removed when touched by liquid.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this block can have a liquid placed over it,\\r\\n     * i.e. be waterlogged.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether this block can have a liquid placed over it.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    canContainLiquid(liquidType: LiquidType): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns all available block states associated with this\\r\\n     * block.\\r\\n     *\\r\\n     * @returns\\r\\n     * Returns the list of all of the block states that the\\r\\n     * permutation has.\\r\\n     */\\r\\n    getAllStates(): Record<string, boolean | number | string>;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Retrieves a prototype item stack based on this block\\r\\n     * permutation that can be used with item\\r\\n     * Container/ContainerSlot APIs.\\r\\n     *\\r\\n     * @param amount\\r\\n     * Number of instances of this block to place in the prototype\\r\\n     * item stack.\\r\\n     * Defaults to: 1\\r\\n     */\\r\\n    getItemStack(amount?: number): ItemStack | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets a state for the permutation.\\r\\n     *\\r\\n     * @param stateName\\r\\n     * Name of the block state who's value is to be returned.\\r\\n     * @returns\\r\\n     * Returns the state if the permutation has it, else\\r\\n     * `undefined`.\\r\\n     */\\r\\n    getState<T extends keyof minecraftvanilladata.BlockStateSuperset>(\\r\\n        stateName: T,\\r\\n    ): minecraftvanilladata.BlockStateSuperset[T] | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Creates a copy of the permutation.\\r\\n     *\\r\\n     */\\r\\n    getTags(): string[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Checks to see if the permutation has a specific tag.\\r\\n     *\\r\\n     * @returns\\r\\n     * Returns `true` if the permutation has the tag, else `false`.\\r\\n     * @example checkBlockTags.ts\\r\\n     * ```typescript\\r\\n     * import { DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     *\\r\\n     * function checkBlockTags(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n     *   // Fetch the block\\r\\n     *   const block = targetLocation.dimension.getBlock(targetLocation);\\r\\n     *\\r\\n     *   // check that the block is loaded\\r\\n     *   if (block) {\\r\\n     *     log(`Block is dirt: ${block.hasTag(\\\"dirt\\\")}`);\\r\\n     *     log(`Block is wood: ${block.hasTag(\\\"wood\\\")}`);\\r\\n     *     log(`Block is stone: ${block.hasTag(\\\"stone\\\")}`);\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    hasTag(tag: string): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this block stops liquid from flowing.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether this block stops liquid from flowing.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    isLiquidBlocking(liquidType: LiquidType): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this block is removed and spawns its item\\r\\n     * when touched by liquid.\\r\\n     *\\r\\n     * @param liquidType\\r\\n     * The type of liquid this function should be called for.\\r\\n     * @returns\\r\\n     * Whether this block is removed and spawns its item when\\r\\n     * touched by liquid.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    liquidSpreadCausesSpawn(liquidType: LiquidType): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a boolean whether a specified permutation matches\\r\\n     * this permutation. If states is not specified, matches checks\\r\\n     * against the set of types more broadly.\\r\\n     *\\r\\n     * @param blockName\\r\\n     * An optional set of states to compare against.\\r\\n     */\\r\\n    matches<T extends string = minecraftvanilladata.MinecraftBlockTypes>(\\r\\n        blockName: T,\\r\\n        states?: BlockStateArg<T>,\\r\\n    ): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a derived BlockPermutation with a specific property\\r\\n     * set.\\r\\n     *\\r\\n     * @param name\\r\\n     * Identifier of the block property.\\r\\n     * @param value\\r\\n     * Value of the block property.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    withState<T extends keyof minecraftvanilladata.BlockStateSuperset>(\\r\\n        name: T,\\r\\n        value: minecraftvanilladata.BlockStateSuperset[T],\\r\\n    ): BlockPermutation;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Given a type identifier and an optional set of properties,\\r\\n     * will return a BlockPermutation object that is usable in\\r\\n     * other block APIs (e.g., block.setPermutation)\\r\\n     *\\r\\n     * @param blockName\\r\\n     * Identifier of the block to check.\\r\\n     * @throws This function can throw errors.\\r\\n     * @example addBlockColorCube.ts\\r\\n     * ```typescript\\r\\n     * import { BlockPermutation, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     * import { Vector3Utils } from \\\"@minecraft/math\\\";\\r\\n     * import { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n     *\\r\\n     * function addBlockColorCube(targetLocation: DimensionLocation) {\\r\\n     *   const allWoolBlocks: string[] = [\\r\\n     *     MinecraftBlockTypes.WhiteWool,\\r\\n     *     MinecraftBlockTypes.OrangeWool,\\r\\n     *     MinecraftBlockTypes.MagentaWool,\\r\\n     *     MinecraftBlockTypes.LightBlueWool,\\r\\n     *     MinecraftBlockTypes.YellowWool,\\r\\n     *     MinecraftBlockTypes.LimeWool,\\r\\n     *     MinecraftBlockTypes.PinkWool,\\r\\n     *     MinecraftBlockTypes.GrayWool,\\r\\n     *     MinecraftBlockTypes.LightGrayWool,\\r\\n     *     MinecraftBlockTypes.CyanWool,\\r\\n     *     MinecraftBlockTypes.PurpleWool,\\r\\n     *     MinecraftBlockTypes.BlueWool,\\r\\n     *     MinecraftBlockTypes.BrownWool,\\r\\n     *     MinecraftBlockTypes.GreenWool,\\r\\n     *     MinecraftBlockTypes.RedWool,\\r\\n     *     MinecraftBlockTypes.BlackWool,\\r\\n     *   ];\\r\\n     *\\r\\n     *   const cubeDim = 7;\\r\\n     *\\r\\n     *   let colorIndex = 0;\\r\\n     *\\r\\n     *   for (let x = 0; x <= cubeDim; x++) {\\r\\n     *     for (let y = 0; y <= cubeDim; y++) {\\r\\n     *       for (let z = 0; z <= cubeDim; z++) {\\r\\n     *         colorIndex++;\\r\\n     *         targetLocation.dimension\\r\\n     *           .getBlock(Vector3Utils.add(targetLocation, { x, y, z }))\\r\\n     *           ?.setPermutation(BlockPermutation.resolve(allWoolBlocks[colorIndex % allWoolBlocks.length]));\\r\\n     *       }\\r\\n     *     }\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    static resolve<T extends string = minecraftvanilladata.MinecraftBlockTypes>(\\r\\n        blockName: T,\\r\\n        states?: BlockStateArg<T>,\\r\\n    ): BlockPermutation;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains the combination of type {@link BlockType} and\\r\\n * properties (also sometimes called block state) which\\r\\n * describe a block (but does not belong to a specific {@link\\r\\n * Block}).\\r\\n * @example addTranslatedSign.ts\\r\\n * ```typescript\\r\\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n * import { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n *\\r\\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n *   const players = world.getPlayers();\\r\\n *\\r\\n *   const dim = players[0].dimension;\\r\\n *\\r\\n *   const signBlock = dim.getBlock(targetLocation);\\r\\n *\\r\\n *   if (!signBlock) {\\r\\n *     log(\\\"Could not find a block at specified location.\\\");\\r\\n *     return -1;\\r\\n *   }\\r\\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r\\n *\\r\\n *   signBlock.setPermutation(signPerm);\\r\\n *\\r\\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n *\\r\\n *   signComponent?.setText({ translate: \\\"item.skull.player.name\\\", with: [players[0].name] });\\r\\n * }\\r\\n * ```\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"canBeDestroyedByLiquidSpread\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"canBeDestroyedByLiquidSpread(liquidType: LiquidType): boolean\"\n            },\n            {\n              \"name\": \"canContainLiquid\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"canContainLiquid(liquidType: LiquidType): boolean\"\n            },\n            {\n              \"name\": \"getAllStates\",\n              \"parameters\": [],\n              \"returnType\": \"Record<string, boolean | number | string>\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getAllStates(): Record<string, boolean | number | string>\"\n            },\n            {\n              \"name\": \"getItemStack\",\n              \"parameters\": [],\n              \"returnType\": \"ItemStack | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getItemStack(amount?: number): ItemStack | undefined\"\n            },\n            {\n              \"name\": \"getTags\",\n              \"parameters\": [],\n              \"returnType\": \"string[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getTags(): string[]\"\n            },\n            {\n              \"name\": \"hasTag\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"hasTag(tag: string): boolean\"\n            },\n            {\n              \"name\": \"isLiquidBlocking\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"isLiquidBlocking(liquidType: LiquidType): boolean\"\n            },\n            {\n              \"name\": \"liquidSpreadCausesSpawn\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"liquidSpreadCausesSpawn(liquidType: LiquidType): boolean\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockpermutation\",\n            \"class\"\n          ],\n          \"examples\": [\n            {\n              \"title\": \"addTranslatedSign.ts\",\n              \"code\": \"import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\nimport { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n\\nfunction addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n  const players = world.getPlayers();\\r\\n\\n  const dim = players[0].dimension;\\r\\n\\n  const signBlock = dim.getBlock(targetLocation);\\r\\n\\n  if (!signBlock) {\\r\\n    log(\\\"Could not find a block at specified location.\\\");\\r\\n    return -1;\\r\\n  }\\r\\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r\\n\\n  signBlock.setPermutation(signPerm);\\r\\n\\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n\\n  signComponent?.setText({ translate: \\\"item.skull.player.name\\\", with: [players[0].name] });\\r\\n}\"\n            }\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockPistonComponent\",\n          \"name\": \"BlockPistonComponent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"When present, this block has piston-like behavior. Contains\\r additional properties for discovering block piston state.\\r /\",\n          \"definition\": \"export class BlockPistonComponent extends BlockComponent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Whether the piston is in the process of expanding or\\r\\n     * retracting.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\\n    readonly isMoving: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The current state of the piston.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\\n    readonly state: BlockPistonState;\\r\\n    static readonly componentId = 'minecraft:piston';\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Retrieves a set of blocks that this piston is connected\\r\\n     * with.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getAttachedBlocks(): Block[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Retrieves a set of block locations that this piston is\\r\\n     * connected with.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getAttachedBlocksLocations(): Vector3[];\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * When present, this block has piston-like behavior. Contains\\r\\n * additional properties for discovering block piston state.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"isMoving\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"state\",\n              \"type\": \"BlockPistonState\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"minecraft\",\n              \"type\": \"piston'\",\n              \"readonly\": false,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"getAttachedBlocks\",\n              \"parameters\": [],\n              \"returnType\": \"Block[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getAttachedBlocks(): Block[]\"\n            },\n            {\n              \"name\": \"getAttachedBlocksLocations\",\n              \"parameters\": [],\n              \"returnType\": \"Vector3[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getAttachedBlocksLocations(): Vector3[]\"\n            }\n          ],\n          \"extends\": \"BlockComponent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockpistoncomponent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockRecordPlayerComponent\",\n          \"name\": \"BlockRecordPlayerComponent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents a block that can play a record.\\r /\",\n          \"definition\": \"export class BlockRecordPlayerComponent extends BlockComponent {\\n    private constructor();\\r\\n    static readonly componentId = 'minecraft:record_player';\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Ejects the currently set record of this record-playing\\r\\n     * block.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    ejectRecord(): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets the currently set record of this record-playing block.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getRecord(): ItemStack | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns true if the record-playing block is currently\\r\\n     * playing a record.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    isPlaying(): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Pauses the currently playing record of this record-playing\\r\\n     * block.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    pauseRecord(): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Plays the currently set record of this record-playing block.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    playRecord(): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets and plays a record based on an item type.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param startPlaying\\r\\n     * Defaults to: true\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    setRecord(recordItemType?: ItemType | string, startPlaying?: boolean): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents a block that can play a record.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"minecraft\",\n              \"type\": \"record_player'\",\n              \"readonly\": false,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"ejectRecord\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"ejectRecord(): void\"\n            },\n            {\n              \"name\": \"getRecord\",\n              \"parameters\": [],\n              \"returnType\": \"ItemStack | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getRecord(): ItemStack | undefined\"\n            },\n            {\n              \"name\": \"isPlaying\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"isPlaying(): boolean\"\n            },\n            {\n              \"name\": \"pauseRecord\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"pauseRecord(): void\"\n            },\n            {\n              \"name\": \"playRecord\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"playRecord(): void\"\n            },\n            {\n              \"name\": \"setRecord\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setRecord(recordItemType?: ItemType | string, startPlaying?: boolean): void\"\n            }\n          ],\n          \"extends\": \"BlockComponent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockrecordplayercomponent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockSignComponent\",\n          \"name\": \"BlockSignComponent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents a block that can display text on it.\\r ```typescript\\r  function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r   const players = world.getPlayers();\\r    const dim = players[0].dimension;\\r    const signBlock = dim.getBlock(targetLocation);\\r    if (!signBlock) {\\r     log(\\\"Could not find a block at specified location.\\\");\\r     return -1;\\r   }\\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r    signBlock.setPermutation(signPerm);\\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r    signComponent?.setText(`Basic sign!\\\\nThis is green on the front.`);\\r }\\r ```\\r ```typescript\\r  function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r   const signBlock = targetLocation.dimension.getBlock(targetLocation);\\r    if (!signBlock) {\\r     log(\\\"Could not find a block at specified location.\\\");\\r     return -1;\\r   }\\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r    signBlock.setPermutation(signPerm);\\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r    if (signComponent) {\\r     signComponent.setText(`Party Sign!\\\\nThis is green on the front.`);\\r     signComponent.setText(`Party Sign!\\\\nThis is red on the back.`, SignSide.Back);\\r     signComponent.setTextDyeColor(DyeColor.Green);\\r     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\\r      // players cannot edit sign!\\r     signComponent.setWaxed(true);\\r   } else {\\r     log(\\\"Could not find sign component.\\\");\\r   }\\r }\\r ```\\r ```typescript\\r  function updateSignText(targetLocation: DimensionLocation) {\\r   const block = targetLocation.dimension.getBlock(targetLocation);\\r   if (!block) {\\r     console.warn(\\\"Could not find a block at specified location.\\\");\\r     return;\\r   }\\r    const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r   if (sign) {\\r     // RawMessage\\r     const helloWorldMessage: RawMessage = { text: \\\"Hello World\\\" };\\r     sign.setText(helloWorldMessage);\\r      // RawText\\r     const helloWorldText: RawText = { rawtext: [{ text: \\\"Hello World\\\" }] };\\r     sign.setText(helloWorldText);\\r      // Regular string\\r     sign.setText(\\\"Hello World\\\");\\r   } else {\\r     console.warn(\\\"Could not find a sign component on the block.\\\");\\r   }\\r }\\r ```\\r ```typescript\\r  function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r   const players = world.getPlayers();\\r    const dim = players[0].dimension;\\r    const signBlock = dim.getBlock(targetLocation);\\r    if (!signBlock) {\\r     log(\\\"Could not find a block at specified location.\\\");\\r     return -1;\\r   }\\r   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r    signBlock.setPermutation(signPerm);\\r    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r    signComponent?.setText({ translate: \\\"item.skull.player.name\\\", with: [players[0].name] });\\r }\\r ```\\r /\",\n          \"definition\": \"export class BlockSignComponent extends BlockComponent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Whether or not players can edit the sign. This happens if a\\r\\n     * sign has had a honeycomb used on it or `setWaxed` was called\\r\\n     * on the sign.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\\n    readonly isWaxed: boolean;\\r\\n    static readonly componentId = 'minecraft:sign';\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the RawText of the sign if `setText` was called with\\r\\n     * a RawMessage or a RawText object, otherwise returns\\r\\n     * undefined.\\r\\n     *\\r\\n     * @param side\\r\\n     * The side of the sign to read the message from. If not\\r\\n     * provided, this will return the message from the front side\\r\\n     * of the sign.\\r\\n     * Defaults to: 0\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getRawText(side?: SignSide): RawText | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the text of the sign if `setText` was called with a\\r\\n     * string, otherwise returns undefined.\\r\\n     *\\r\\n     * @param side\\r\\n     * The side of the sign to read the message from. If not\\r\\n     * provided, this will return the message from the front side\\r\\n     * of the sign.\\r\\n     * Defaults to: 0\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getText(side?: SignSide): string | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets the dye that is on the text or undefined if the sign\\r\\n     * has not been dyed.\\r\\n     *\\r\\n     * @param side\\r\\n     * The side of the sign to read the dye from. If not provided,\\r\\n     * this will return the dye on the front side of the sign.\\r\\n     * Defaults to: 0\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getTextDyeColor(side?: SignSide): DyeColor | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the text of the sign component.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param message\\r\\n     * The message to set on the sign. If set to a string, then\\r\\n     * call `getText` to read that string. If set to a RawMessage,\\r\\n     * then calling `getRawText` will return a RawText.\\r\\n     * @param side\\r\\n     * The side of the sign the message will be set on. If not\\r\\n     * provided, the message will be set on the front side of the\\r\\n     * sign.\\r\\n     * Defaults to: 0\\r\\n     * @throws\\r\\n     * Throws if the provided message is greater than 512\\r\\n     * characters in length.\\r\\n     */\\r\\n    setText(message: RawMessage | string, side?: SignSide): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the dye color of the text.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param color\\r\\n     * The dye color to apply to the sign or undefined to clear the\\r\\n     * dye on the sign.\\r\\n     * Defaults to: null\\r\\n     * @param side\\r\\n     * The side of the sign the color will be set on. If not\\r\\n     * provided, the color will be set on the front side of the\\r\\n     * sign.\\r\\n     * Defaults to: 0\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    setTextDyeColor(color?: DyeColor, side?: SignSide): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Makes it so players cannot edit this sign.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    setWaxed(waxed: boolean): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents a block that can display text on it.\\r\\n * @example addSign.ts\\r\\n * ```typescript\\r\\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n * import { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n *\\r\\n * function addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n *   const players = world.getPlayers();\\r\\n *\\r\\n *   const dim = players[0].dimension;\\r\\n *\\r\\n *   const signBlock = dim.getBlock(targetLocation);\\r\\n *\\r\\n *   if (!signBlock) {\\r\\n *     log(\\\"Could not find a block at specified location.\\\");\\r\\n *     return -1;\\r\\n *   }\\r\\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r\\n *\\r\\n *   signBlock.setPermutation(signPerm);\\r\\n *\\r\\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n *\\r\\n *   signComponent?.setText(`Basic sign!\\\\nThis is green on the front.`);\\r\\n * }\\r\\n * ```\\r\\n * @example addTwoSidedSign.ts\\r\\n * ```typescript\\r\\n * import { BlockPermutation, BlockSignComponent, SignSide, DyeColor, BlockComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n * import { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n *\\r\\n * function addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n *   const signBlock = targetLocation.dimension.getBlock(targetLocation);\\r\\n *\\r\\n *   if (!signBlock) {\\r\\n *     log(\\\"Could not find a block at specified location.\\\");\\r\\n *     return -1;\\r\\n *   }\\r\\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r\\n *\\r\\n *   signBlock.setPermutation(signPerm);\\r\\n *\\r\\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n *\\r\\n *   if (signComponent) {\\r\\n *     signComponent.setText(`Party Sign!\\\\nThis is green on the front.`);\\r\\n *     signComponent.setText(`Party Sign!\\\\nThis is red on the back.`, SignSide.Back);\\r\\n *     signComponent.setTextDyeColor(DyeColor.Green);\\r\\n *     signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\\r\\n *\\r\\n *     // players cannot edit sign!\\r\\n *     signComponent.setWaxed(true);\\r\\n *   } else {\\r\\n *     log(\\\"Could not find sign component.\\\");\\r\\n *   }\\r\\n * }\\r\\n * ```\\r\\n * @example updateSignText.ts\\r\\n * ```typescript\\r\\n * import { BlockSignComponent, BlockComponentTypes, DimensionLocation, RawMessage, RawText } from \\\"@minecraft/server\\\";\\r\\n *\\r\\n * function updateSignText(targetLocation: DimensionLocation) {\\r\\n *   const block = targetLocation.dimension.getBlock(targetLocation);\\r\\n *   if (!block) {\\r\\n *     console.warn(\\\"Could not find a block at specified location.\\\");\\r\\n *     return;\\r\\n *   }\\r\\n *\\r\\n *   const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n *   if (sign) {\\r\\n *     // RawMessage\\r\\n *     const helloWorldMessage: RawMessage = { text: \\\"Hello World\\\" };\\r\\n *     sign.setText(helloWorldMessage);\\r\\n *\\r\\n *     // RawText\\r\\n *     const helloWorldText: RawText = { rawtext: [{ text: \\\"Hello World\\\" }] };\\r\\n *     sign.setText(helloWorldText);\\r\\n *\\r\\n *     // Regular string\\r\\n *     sign.setText(\\\"Hello World\\\");\\r\\n *   } else {\\r\\n *     console.warn(\\\"Could not find a sign component on the block.\\\");\\r\\n *   }\\r\\n * }\\r\\n * ```\\r\\n * @example addTranslatedSign.ts\\r\\n * ```typescript\\r\\n * import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n * import { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n *\\r\\n * function addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n *   const players = world.getPlayers();\\r\\n *\\r\\n *   const dim = players[0].dimension;\\r\\n *\\r\\n *   const signBlock = dim.getBlock(targetLocation);\\r\\n *\\r\\n *   if (!signBlock) {\\r\\n *     log(\\\"Could not find a block at specified location.\\\");\\r\\n *     return -1;\\r\\n *   }\\r\\n *   const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r\\n *\\r\\n *   signBlock.setPermutation(signPerm);\\r\\n *\\r\\n *   const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n *\\r\\n *   signComponent?.setText({ translate: \\\"item.skull.player.name\\\", with: [players[0].name] });\\r\\n * }\\r\\n * ```\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"isWaxed\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"minecraft\",\n              \"type\": \"sign'\",\n              \"readonly\": false,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"getRawText\",\n              \"parameters\": [],\n              \"returnType\": \"RawText | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getRawText(side?: SignSide): RawText | undefined\"\n            },\n            {\n              \"name\": \"getText\",\n              \"parameters\": [],\n              \"returnType\": \"string | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getText(side?: SignSide): string | undefined\"\n            },\n            {\n              \"name\": \"getTextDyeColor\",\n              \"parameters\": [],\n              \"returnType\": \"DyeColor | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getTextDyeColor(side?: SignSide): DyeColor | undefined\"\n            },\n            {\n              \"name\": \"setText\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setText(message: RawMessage | string, side?: SignSide): void\"\n            },\n            {\n              \"name\": \"setTextDyeColor\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setTextDyeColor(color?: DyeColor, side?: SignSide): void\"\n            },\n            {\n              \"name\": \"setWaxed\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setWaxed(waxed: boolean): void\"\n            }\n          ],\n          \"extends\": \"BlockComponent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blocksigncomponent\",\n            \"class\"\n          ],\n          \"examples\": [\n            {\n              \"title\": \"addSign.ts\",\n              \"code\": \"import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\nimport { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n\\nfunction addSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n  const players = world.getPlayers();\\r\\n\\n  const dim = players[0].dimension;\\r\\n\\n  const signBlock = dim.getBlock(targetLocation);\\r\\n\\n  if (!signBlock) {\\r\\n    log(\\\"Could not find a block at specified location.\\\");\\r\\n    return -1;\\r\\n  }\\r\\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r\\n\\n  signBlock.setPermutation(signPerm);\\r\\n\\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n\\n  signComponent?.setText(`Basic sign!\\\\nThis is green on the front.`);\\r\\n}\"\n            },\n            {\n              \"title\": \"addTwoSidedSign.ts\",\n              \"code\": \"import { BlockPermutation, BlockSignComponent, SignSide, DyeColor, BlockComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\nimport { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n\\nfunction addTwoSidedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n  const signBlock = targetLocation.dimension.getBlock(targetLocation);\\r\\n\\n  if (!signBlock) {\\r\\n    log(\\\"Could not find a block at specified location.\\\");\\r\\n    return -1;\\r\\n  }\\r\\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r\\n\\n  signBlock.setPermutation(signPerm);\\r\\n\\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n\\n  if (signComponent) {\\r\\n    signComponent.setText(`Party Sign!\\\\nThis is green on the front.`);\\r\\n    signComponent.setText(`Party Sign!\\\\nThis is red on the back.`, SignSide.Back);\\r\\n    signComponent.setTextDyeColor(DyeColor.Green);\\r\\n    signComponent.setTextDyeColor(DyeColor.Red, SignSide.Back);\\r\\n\\n    // players cannot edit sign!\\r\\n    signComponent.setWaxed(true);\\r\\n  } else {\\r\\n    log(\\\"Could not find sign component.\\\");\\r\\n  }\\r\\n}\"\n            },\n            {\n              \"title\": \"updateSignText.ts\",\n              \"code\": \"import { BlockSignComponent, BlockComponentTypes, DimensionLocation, RawMessage, RawText } from \\\"@minecraft/server\\\";\\r\\n\\nfunction updateSignText(targetLocation: DimensionLocation) {\\r\\n  const block = targetLocation.dimension.getBlock(targetLocation);\\r\\n  if (!block) {\\r\\n    console.warn(\\\"Could not find a block at specified location.\\\");\\r\\n    return;\\r\\n  }\\r\\n\\n  const sign = block.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n  if (sign) {\\r\\n    // RawMessage\\r\\n    const helloWorldMessage: RawMessage = { text: \\\"Hello World\\\" };\\r\\n    sign.setText(helloWorldMessage);\\r\\n\\n    // RawText\\r\\n    const helloWorldText: RawText = { rawtext: [{ text: \\\"Hello World\\\" }] };\\r\\n    sign.setText(helloWorldText);\\r\\n\\n    // Regular string\\r\\n    sign.setText(\\\"Hello World\\\");\\r\\n  } else {\\r\\n    console.warn(\\\"Could not find a sign component on the block.\\\");\\r\\n  }\\r\\n}\"\n            },\n            {\n              \"title\": \"addTranslatedSign.ts\",\n              \"code\": \"import { world, BlockPermutation, BlockSignComponent, BlockComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\nimport { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n\\nfunction addTranslatedSign(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n  const players = world.getPlayers();\\r\\n\\n  const dim = players[0].dimension;\\r\\n\\n  const signBlock = dim.getBlock(targetLocation);\\r\\n\\n  if (!signBlock) {\\r\\n    log(\\\"Could not find a block at specified location.\\\");\\r\\n    return -1;\\r\\n  }\\r\\n  const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\\r\\n\\n  signBlock.setPermutation(signPerm);\\r\\n\\n  const signComponent = signBlock.getComponent(BlockComponentTypes.Sign) as BlockSignComponent;\\r\\n\\n  signComponent?.setText({ translate: \\\"item.skull.player.name\\\", with: [players[0].name] });\\r\\n}\"\n            }\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockStates\",\n          \"name\": \"BlockStates\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"/\",\n          \"definition\": \"export class BlockStates {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Retrieves a specific block state instance.\\r\\n     *\\r\\n     * @returns\\r\\n     * Returns the {@link Block} state instance if it is found. If\\r\\n     * the block state instance is not found returns undefined.\\r\\n     */\\r\\n    static get(stateName: string): BlockStateType | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Retrieves a set of all available block states.\\r\\n     *\\r\\n     */\\r\\n    static getAll(): BlockStateType[];\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Enumerates all {@link BlockStateType}s.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"get\",\n              \"parameters\": [],\n              \"returnType\": \"BlockStateType | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"get(stateName: string): BlockStateType | undefined\"\n            },\n            {\n              \"name\": \"getAll\",\n              \"parameters\": [],\n              \"returnType\": \"BlockStateType[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getAll(): BlockStateType[]\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockstates\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockStateType\",\n          \"name\": \"BlockStateType\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents a configurable state value of a block instance.\\r For example, the facing direction of stairs is accessible as\\r a block state.\\r /\",\n          \"definition\": \"export class BlockStateType {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Identifier of the block property.\\r\\n     *\\r\\n     */\\r\\n    readonly id: string;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * A set of valid values for the block property.\\r\\n     *\\r\\n     */\\r\\n    readonly validValues: (boolean | number | string)[];\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents a configurable state value of a block instance.\\r\\n * For example, the facing direction of stairs is accessible as\\r\\n * a block state.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"validValues\",\n              \"type\": \"(boolean | number | string)[]\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockstatetype\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockType\",\n          \"name\": \"BlockType\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"The type (or template) of a block. Does not contain\\r permutation data (state) other than the type of block it\\r represents. This type was introduced as of version\\r 1.17.10.21.\\r /\",\n          \"definition\": \"export class BlockType {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Block type name - for example, `minecraft:acacia_stairs`.\\r\\n     *\\r\\n     */\\r\\n    readonly id: string;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * The type (or template) of a block. Does not contain\\r\\n * permutation data (state) other than the type of block it\\r\\n * represents. This type was introduced as of version\\r\\n * 1.17.10.21.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blocktype\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockTypes\",\n          \"name\": \"BlockTypes\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains a catalog of Minecraft Block Types that are\\r available in this world.\\r /\",\n          \"definition\": \"export class BlockTypes {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a BlockType object for the specified identifier.\\r\\n     *\\r\\n     * @param typeName\\r\\n     * Identifier of the block type. Should follow a namespace:id\\r\\n     * pattern, such as minecraft:dirt.\\r\\n     * @returns\\r\\n     * BlockType object, or undefined if the block type is not\\r\\n     * available within this world.\\r\\n     */\\r\\n    static get(typeName: string): BlockType | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a collection of all available block types.\\r\\n     *\\r\\n     */\\r\\n    static getAll(): BlockType[];\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains a catalog of Minecraft Block Types that are\\r\\n * available in this world.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"get\",\n              \"parameters\": [],\n              \"returnType\": \"BlockType | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"get(typeName: string): BlockType | undefined\"\n            },\n            {\n              \"name\": \"getAll\",\n              \"parameters\": [],\n              \"returnType\": \"BlockType[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getAll(): BlockType[]\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blocktypes\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockVolume\",\n          \"name\": \"BlockVolume\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"A BlockVolume is a simple interface to an object which\\r represents a 3D rectangle of a given size (in blocks) at a\\r world block location.\\r Note that these are not analogous to \\\"min\\\" and \\\"max\\\" values,\\r in that the vector components are not guaranteed to be in\\r any order.\\r In addition, these vector positions are not interchangeable\\r with BlockLocation.\\r If you want to get this volume represented as range of of\\r BlockLocations, you can use the getBoundingBox utility\\r function.\\r This volume class will maintain the ordering of the corner\\r indexes as initially set. imagine that each corner is\\r assigned in Editor - as you move the corner around\\r (potentially inverting the min/max relationship of the\\r bounds) - what\\r you had originally selected as the top/left corner would\\r traditionally become the bottom/right.\\r When manually editing these kinds of volumes, you need to\\r maintain the identity of the corner as you edit - the\\r BlockVolume utility functions do this.\\r  Important to note that this measures block sizes (to/from) -\\r a normal AABB (0,0,0) to (0,0,0) would traditionally be of\\r size (0,0,0)\\r However, because we're measuring blocks - the size or span\\r of a BlockVolume would actually be (1,1,1)\\r  /\",\n          \"definition\": \"export class BlockVolume extends BlockVolumeBase {\\n    /**\\r\\n     * @remarks\\r\\n     * A world block location that represents a corner in a 3D\\r\\n     * rectangle\\r\\n     *\\r\\n     */\\r\\n    'from': Vector3;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * A world block location that represents the opposite corner\\r\\n     * in a 3D rectangle\\r\\n     *\\r\\n     */\\r\\n    to: Vector3;\\r\\n    constructor(from: Vector3, to: Vector3);\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Check to see if the given location is directly adjacent to\\r\\n     * the outer surface of a BlockVolume.\\r\\n     *\\r\\n     *\\r\\n     * @param pos\\r\\n     * The world block location to test\\r\\n     * @returns\\r\\n     * If the location is either inside or more than 0 blocks away,\\r\\n     * the function will return false.\\r\\n     * If the location is directly contacting the outer surface of\\r\\n     * the BlockVolume, the function will return true.\\r\\n     */\\r\\n    doesLocationTouchFaces(pos: Vector3): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Check to see if a two block volumes are directly adjacent\\r\\n     * and two faces touch.\\r\\n     *\\r\\n     * @param other\\r\\n     * The volume to test\\r\\n     * @returns\\r\\n     * If the outer faces of both block volumes touch and are\\r\\n     * directly adjacent at any point, return true.\\r\\n     */\\r\\n    doesVolumeTouchFaces(other: BlockVolume): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Return an enumeration which represents the intersection\\r\\n     * between two BlockVolume objects\\r\\n     *\\r\\n     */\\r\\n    intersects(other: BlockVolume): BlockVolumeIntersection;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * A BlockVolume is a simple interface to an object which\\r\\n * represents a 3D rectangle of a given size (in blocks) at a\\r\\n * world block location.\\r\\n * Note that these are not analogous to \\\"min\\\" and \\\"max\\\" values,\\r\\n * in that the vector components are not guaranteed to be in\\r\\n * any order.\\r\\n * In addition, these vector positions are not interchangeable\\r\\n * with BlockLocation.\\r\\n * If you want to get this volume represented as range of of\\r\\n * BlockLocations, you can use the getBoundingBox utility\\r\\n * function.\\r\\n * This volume class will maintain the ordering of the corner\\r\\n * indexes as initially set. imagine that each corner is\\r\\n * assigned in Editor - as you move the corner around\\r\\n * (potentially inverting the min/max relationship of the\\r\\n * bounds) - what\\r\\n * you had originally selected as the top/left corner would\\r\\n * traditionally become the bottom/right.\\r\\n * When manually editing these kinds of volumes, you need to\\r\\n * maintain the identity of the corner as you edit - the\\r\\n * BlockVolume utility functions do this.\\r\\n *\\r\\n * Important to note that this measures block sizes (to/from) -\\r\\n * a normal AABB (0,0,0) to (0,0,0) would traditionally be of\\r\\n * size (0,0,0)\\r\\n * However, because we're measuring blocks - the size or span\\r\\n * of a BlockVolume would actually be (1,1,1)\\r\\n *\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"doesLocationTouchFaces\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"doesLocationTouchFaces(pos: Vector3): boolean\"\n            },\n            {\n              \"name\": \"doesVolumeTouchFaces\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"doesVolumeTouchFaces(other: BlockVolume): boolean\"\n            },\n            {\n              \"name\": \"intersects\",\n              \"parameters\": [],\n              \"returnType\": \"BlockVolumeIntersection\",\n              \"accessibility\": \"public\",\n              \"signature\": \"intersects(other: BlockVolume): BlockVolumeIntersection\"\n            }\n          ],\n          \"extends\": \"BlockVolumeBase\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockvolume\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.BlockVolumeBase\",\n          \"name\": \"BlockVolumeBase\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Base type for BlockVolumes.\\r /\",\n          \"definition\": \"export class BlockVolumeBase {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Fetch a {@link BlockLocationIterator} that represents all of\\r\\n     * the block world locations within the specified volume\\r\\n     *\\r\\n     */\\r\\n    getBlockLocationIterator(): BlockLocationIterator;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Return the capacity (volume) of the BlockVolume (W*D*H)\\r\\n     *\\r\\n     */\\r\\n    getCapacity(): number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Get the largest corner position of the volume (guaranteed to\\r\\n     * be >= min)\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getMax(): Vector3;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Get the smallest corner position of the volume (guaranteed\\r\\n     * to be <= max)\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getMin(): Vector3;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Get a {@link Vector3} object where each component represents\\r\\n     * the number of blocks along that axis\\r\\n     *\\r\\n     */\\r\\n    getSpan(): Vector3;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Check to see if a given world block location is inside a\\r\\n     * BlockVolume\\r\\n     *\\r\\n     */\\r\\n    isInside(location: Vector3): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Move a BlockVolume by a specified amount\\r\\n     *\\r\\n     * @param delta\\r\\n     * Amount of blocks to move by\\r\\n     */\\r\\n    translate(delta: Vector3): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Base type for BlockVolumes.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"getBlockLocationIterator\",\n              \"parameters\": [],\n              \"returnType\": \"BlockLocationIterator\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getBlockLocationIterator(): BlockLocationIterator\"\n            },\n            {\n              \"name\": \"getCapacity\",\n              \"parameters\": [],\n              \"returnType\": \"number\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getCapacity(): number\"\n            },\n            {\n              \"name\": \"getMax\",\n              \"parameters\": [],\n              \"returnType\": \"Vector3\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getMax(): Vector3\"\n            },\n            {\n              \"name\": \"getMin\",\n              \"parameters\": [],\n              \"returnType\": \"Vector3\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getMin(): Vector3\"\n            },\n            {\n              \"name\": \"getSpan\",\n              \"parameters\": [],\n              \"returnType\": \"Vector3\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getSpan(): Vector3\"\n            },\n            {\n              \"name\": \"isInside\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"isInside(location: Vector3): boolean\"\n            },\n            {\n              \"name\": \"translate\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"translate(delta: Vector3): void\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"blockvolumebase\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ButtonPushAfterEvent\",\n          \"name\": \"ButtonPushAfterEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information related to changes to a button push.\\r ```typescript\\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r   // set up a button on cobblestone\\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\\r   const button = targetLocation.dimension.getBlock({\\r     x: targetLocation.x,\\r     y: targetLocation.y + 1,\\r     z: targetLocation.z,\\r   });\\r    if (cobblestone === undefined || button === undefined) {\\r     log(\\\"Could not find block at location.\\\");\\r     return -1;\\r   }\\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\\\"facing_direction\\\", 1));\\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\\r     const eventLoc = buttonPushEvent.block.location;\\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\\r       log(\\\"Button push event at tick \\\" + system.currentTick);\\r     }\\r   });\\r }\\r ```\\r /\",\n          \"definition\": \"export class ButtonPushAfterEvent extends BlockEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Optional source that triggered the button push.\\r\\n     *\\r\\n     */\\r\\n    readonly source: Entity;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information related to changes to a button push.\\r\\n * @example buttonPushEvent.ts\\r\\n * ```typescript\\r\\n * import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n * import { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n *\\r\\n * function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n *   // set up a button on cobblestone\\r\\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\\r\\n *   const button = targetLocation.dimension.getBlock({\\r\\n *     x: targetLocation.x,\\r\\n *     y: targetLocation.y + 1,\\r\\n *     z: targetLocation.z,\\r\\n *   });\\r\\n *\\r\\n *   if (cobblestone === undefined || button === undefined) {\\r\\n *     log(\\\"Could not find block at location.\\\");\\r\\n *     return -1;\\r\\n *   }\\r\\n *\\r\\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\\r\\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\\\"facing_direction\\\", 1));\\r\\n *\\r\\n *   world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\\r\\n *     const eventLoc = buttonPushEvent.block.location;\\r\\n *\\r\\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\\r\\n *       log(\\\"Button push event at tick \\\" + system.currentTick);\\r\\n *     }\\r\\n *   });\\r\\n * }\\r\\n * ```\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"source\",\n              \"type\": \"Entity\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"BlockEvent\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"buttonpushafterevent\",\n            \"class\"\n          ],\n          \"examples\": [\n            {\n              \"title\": \"buttonPushEvent.ts\",\n              \"code\": \"import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\nimport { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n\\nfunction buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n  // set up a button on cobblestone\\r\\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\\r\\n  const button = targetLocation.dimension.getBlock({\\r\\n    x: targetLocation.x,\\r\\n    y: targetLocation.y + 1,\\r\\n    z: targetLocation.z,\\r\\n  });\\r\\n\\n  if (cobblestone === undefined || button === undefined) {\\r\\n    log(\\\"Could not find block at location.\\\");\\r\\n    return -1;\\r\\n  }\\r\\n\\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\\r\\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\\\"facing_direction\\\", 1));\\r\\n\\n  world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\\r\\n    const eventLoc = buttonPushEvent.block.location;\\r\\n\\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\\r\\n      log(\\\"Button push event at tick \\\" + system.currentTick);\\r\\n    }\\r\\n  });\\r\\n}\"\n            }\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ButtonPushAfterEventSignal\",\n          \"name\": \"ButtonPushAfterEventSignal\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Manages callbacks that are connected to when a button is\\r pushed.\\r ```typescript\\r  function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r   // set up a button on cobblestone\\r   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\\r   const button = targetLocation.dimension.getBlock({\\r     x: targetLocation.x,\\r     y: targetLocation.y + 1,\\r     z: targetLocation.z,\\r   });\\r    if (cobblestone === undefined || button === undefined) {\\r     log(\\\"Could not find block at location.\\\");\\r     return -1;\\r   }\\r    cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\\r   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\\\"facing_direction\\\", 1));\\r    world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\\r     const eventLoc = buttonPushEvent.block.location;\\r      if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\\r       log(\\\"Button push event at tick \\\" + system.currentTick);\\r     }\\r   });\\r }\\r ```\\r /\",\n          \"definition\": \"export class ButtonPushAfterEventSignal {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Adds a callback that will be called when a button is pushed.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     */\\r\\n    subscribe(callback: (arg0: ButtonPushAfterEvent) => void): (arg0: ButtonPushAfterEvent) => void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Removes a callback from being called when a button is\\r\\n     * pushed.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     */\\r\\n    unsubscribe(callback: (arg0: ButtonPushAfterEvent) => void): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Manages callbacks that are connected to when a button is\\r\\n * pushed.\\r\\n * @example buttonPushEvent.ts\\r\\n * ```typescript\\r\\n * import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n * import { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n *\\r\\n * function buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n *   // set up a button on cobblestone\\r\\n *   const cobblestone = targetLocation.dimension.getBlock(targetLocation);\\r\\n *   const button = targetLocation.dimension.getBlock({\\r\\n *     x: targetLocation.x,\\r\\n *     y: targetLocation.y + 1,\\r\\n *     z: targetLocation.z,\\r\\n *   });\\r\\n *\\r\\n *   if (cobblestone === undefined || button === undefined) {\\r\\n *     log(\\\"Could not find block at location.\\\");\\r\\n *     return -1;\\r\\n *   }\\r\\n *\\r\\n *   cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\\r\\n *   button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\\\"facing_direction\\\", 1));\\r\\n *\\r\\n *   world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\\r\\n *     const eventLoc = buttonPushEvent.block.location;\\r\\n *\\r\\n *     if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\\r\\n *       log(\\\"Button push event at tick \\\" + system.currentTick);\\r\\n *     }\\r\\n *   });\\r\\n * }\\r\\n * ```\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"buttonpushaftereventsignal\",\n            \"class\"\n          ],\n          \"examples\": [\n            {\n              \"title\": \"buttonPushEvent.ts\",\n              \"code\": \"import { world, system, BlockPermutation, ButtonPushAfterEvent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\nimport { MinecraftBlockTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n\\nfunction buttonPushEvent(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n  // set up a button on cobblestone\\r\\n  const cobblestone = targetLocation.dimension.getBlock(targetLocation);\\r\\n  const button = targetLocation.dimension.getBlock({\\r\\n    x: targetLocation.x,\\r\\n    y: targetLocation.y + 1,\\r\\n    z: targetLocation.z,\\r\\n  });\\r\\n\\n  if (cobblestone === undefined || button === undefined) {\\r\\n    log(\\\"Could not find block at location.\\\");\\r\\n    return -1;\\r\\n  }\\r\\n\\n  cobblestone.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.Cobblestone));\\r\\n  button.setPermutation(BlockPermutation.resolve(MinecraftBlockTypes.AcaciaButton).withState(\\\"facing_direction\\\", 1));\\r\\n\\n  world.afterEvents.buttonPush.subscribe((buttonPushEvent: ButtonPushAfterEvent) => {\\r\\n    const eventLoc = buttonPushEvent.block.location;\\r\\n\\n    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {\\r\\n      log(\\\"Button push event at tick \\\" + system.currentTick);\\r\\n    }\\r\\n  });\\r\\n}\"\n            }\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.Camera\",\n          \"name\": \"Camera\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains methods relating to the active camera for the\\r specified player.\\r /\",\n          \"definition\": \"export class Camera {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether the Camera is valid to access and use. A\\r\\n     * Camera is considered valid when the owning Player of the\\r\\n     * Camera is loaded and valid itself.\\r\\n     *\\r\\n     */\\r\\n    readonly isValid: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Clears the active camera for the specified player. Causes\\r\\n     * the specified players to end any in-progress camera\\r\\n     * perspectives, including any eased camera motions, and return\\r\\n     * to their normal perspective.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    clear(): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Begins a camera fade transition. A fade transition is a\\r\\n     * full-screen color that fades-in, holds, and then fades-out.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param fadeCameraOptions\\r\\n     * Additional options around camera fade operations.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    fade(fadeCameraOptions?: CameraFadeOptions): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the current active camera for the specified player.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param cameraPreset\\r\\n     * Identifier of a camera preset file defined within JSON.\\r\\n     * @param setOptions\\r\\n     * Additional options for the camera.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    setCamera(\\r\\n        cameraPreset: string,\\r\\n        setOptions?:\\r\\n            | CameraFixedBoomOptions\\r\\n            | CameraSetFacingOptions\\r\\n            | CameraSetLocationOptions\\r\\n            | CameraSetPosOptions\\r\\n            | CameraSetRotOptions\\r\\n            | CameraTargetOptions,\\r\\n    ): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the current active camera for the specified player and\\r\\n     * resets the position and rotation to the values defined in\\r\\n     * the JSON.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param cameraPreset\\r\\n     * Identifier of a camera preset file defined within JSON.\\r\\n     * @param easeOptions\\r\\n     * Options to ease the camera back to its original position and\\r\\n     * rotation.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    setDefaultCamera(cameraPreset: string, easeOptions?: EaseOptions): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains methods relating to the active camera for the\\r\\n * specified player.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"isValid\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"clear\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"clear(): void\"\n            },\n            {\n              \"name\": \"fade\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"fade(fadeCameraOptions?: CameraFadeOptions): void\"\n            },\n            {\n              \"name\": \"setDefaultCamera\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setDefaultCamera(cameraPreset: string, easeOptions?: EaseOptions): void\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"camera\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ClientSystemInfo\",\n          \"name\": \"ClientSystemInfo\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains the device information for a client instance.\\r /\",\n          \"definition\": \"export class ClientSystemInfo extends SystemInfo {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The max render distance for the device in chunks.\\r\\n     *\\r\\n     */\\r\\n    readonly maxRenderDistance: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The platform type of the device.\\r\\n     *\\r\\n     */\\r\\n    readonly platformType: PlatformType;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains the device information for a client instance.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"maxRenderDistance\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"platformType\",\n              \"type\": \"PlatformType\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"extends\": \"SystemInfo\",\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"clientsysteminfo\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CommandResult\",\n          \"name\": \"CommandResult\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains return data on the result of a command execution.\\r /\",\n          \"definition\": \"export class CommandResult {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * If the command operates against a number of entities,\\r\\n     * blocks, or items, this returns the number of successful\\r\\n     * applications of this command.\\r\\n     *\\r\\n     */\\r\\n    readonly successCount: number;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains return data on the result of a command execution.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"successCount\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"commandresult\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.Component\",\n          \"name\": \"Component\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Base class for downstream Component implementations.\\r /\",\n          \"definition\": \"export class Component {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether the component is valid. A component is\\r\\n     * considered valid if its owner is valid, in addition to any\\r\\n     * addition to any additional validation required by the\\r\\n     * component.\\r\\n     *\\r\\n     */\\r\\n    readonly isValid: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Identifier of the component.\\r\\n     *\\r\\n     */\\r\\n    readonly typeId: string;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Base class for downstream Component implementations.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"isValid\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"typeId\",\n              \"type\": \"string\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"component\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.Container\",\n          \"name\": \"Container\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents a container that can hold sets of items. Used\\r with entities such as Players, Chest Minecarts, Llamas, and\\r more.\\r ```typescript\\r  function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r   const xLocation = targetLocation; // left chest location\\r   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\\r    const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\\r     x: targetLocation.x + 4,\\r     y: targetLocation.y,\\r     z: targetLocation.z,\\r   });\\r    const xChestBlock = targetLocation.dimension.getBlock(xLocation);\\r   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\\r    if (!xChestBlock || !xPlusTwoChestBlock) {\\r     log(\\\"Could not retrieve chest blocks.\\\");\\r     return;\\r   }\\r    xChestBlock.setType(MinecraftBlockTypes.Chest);\\r   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\\r    const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r   const xChestInventoryComponent = xChestBlock.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r   const chestCartInventoryComp = chestCart.getComponent(\\\"inventory\\\") as EntityInventoryComponent;\\r    const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\\r   const xChestContainer = xChestInventoryComponent.container;\\r   const chestCartContainer = chestCartInventoryComp.container;\\r    if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\\r     log(\\\"Could not retrieve chest containers.\\\");\\r     return;\\r   }\\r    xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\\r   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\\r     log(\\\"Expected apple in x+2 container slot index 0\\\", -1);\\r   }\\r    xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\\r   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\\r     log(\\\"Expected emerald in x+2 container slot index 1\\\", -1);\\r   }\\r    if (xPlusTwoChestContainer.size !== 27) {\\r     log(\\\"Unexpected size: \\\" + xPlusTwoChestContainer.size, -1);\\r   }\\r    if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\\r     log(\\\"Unexpected emptySlotsCount: \\\" + xPlusTwoChestContainer.emptySlotsCount, -1);\\r   }\\r    xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\\r    xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\\r   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\\r    if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\\r     log(\\\"Expected apple in minecraft chest container slot index 0\\\", -1);\\r   }\\r    if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\\r     log(\\\"Expected emerald in x container slot index 0\\\", -1);\\r   }\\r    if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\\r     log(\\\"Expected cake in x+2 container slot index 1\\\", -1);\\r   }\\r }\\r ```\\r /\",\n          \"definition\": \"export class Container {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Count of the slots in the container that are empty.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the container is invalid.\\r\\n     */\\r\\n    readonly emptySlotsCount: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether a container object (or the entity or block\\r\\n     * that this container is associated with) is still available\\r\\n     * for use in this context.\\r\\n     *\\r\\n     */\\r\\n    readonly isValid: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The number of slots in this container. For example, a\\r\\n     * standard single-block chest has a size of 27. Note, a\\r\\n     * player's inventory container contains a total of 36 slots, 9\\r\\n     * hotbar slots plus 27 inventory slots.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the container is invalid.\\r\\n     */\\r\\n    readonly size: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Adds an item to the container. The item is placed in the\\r\\n     * first available slot(s) and can be stacked with existing\\r\\n     * items of the same type. Note, use {@link Container.setItem}\\r\\n     * if you wish to set the item in a particular slot.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param itemStack\\r\\n     * The stack of items to add.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link ContainerRulesError}\\r\\n     *\\r\\n     * {@link Error}\\r\\n     */\\r\\n    addItem(itemStack: ItemStack): ItemStack | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Clears all inventory items in the container.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the container is invalid.\\r\\n     */\\r\\n    clearAll(): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Attempts to find an item inside the container\\r\\n     *\\r\\n     * @param itemStack\\r\\n     * The item to find.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link InvalidContainerError}\\r\\n     */\\r\\n    contains(itemStack: ItemStack): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Find the index of the first instance of an item inside the\\r\\n     * container\\r\\n     *\\r\\n     * @param itemStack\\r\\n     * The item to find.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link InvalidContainerError}\\r\\n     */\\r\\n    find(itemStack: ItemStack): number | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Find the index of the last instance of an item inside the\\r\\n     * container\\r\\n     *\\r\\n     * @param itemStack\\r\\n     * The item to find.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link InvalidContainerError}\\r\\n     */\\r\\n    findLast(itemStack: ItemStack): number | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Finds the index of the first empty slot inside the container\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link InvalidContainerError}\\r\\n     */\\r\\n    firstEmptySlot(): number | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Finds the index of the first item inside the container\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link InvalidContainerError}\\r\\n     */\\r\\n    firstItem(): number | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets an {@link ItemStack} of the item at the specified slot.\\r\\n     * If the slot is empty, returns `undefined`. This method does\\r\\n     * not change or clear the contents of the specified slot. To\\r\\n     * get a reference to a particular slot, see {@link\\r\\n     * Container.getSlot}.\\r\\n     *\\r\\n     * @param slot\\r\\n     * Zero-based index of the slot to retrieve items from.\\r\\n     * @throws\\r\\n     * Throws if the container is invalid or if the `slot` index is\\r\\n     * out of bounds.\\r\\n     * @example getFirstHotbarItem.ts\\r\\n     * ```typescript\\r\\n     * import { world, EntityInventoryComponent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     *\\r\\n     * function getFirstHotbarItem(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n     *   for (const player of world.getAllPlayers()) {\\r\\n     *     const inventory = player.getComponent(EntityInventoryComponent.componentId) as EntityInventoryComponent;\\r\\n     *     if (inventory && inventory.container) {\\r\\n     *       const firstItem = inventory.container.getItem(0);\\r\\n     *\\r\\n     *       if (firstItem) {\\r\\n     *         log(\\\"First item in hotbar is: \\\" + firstItem.typeId);\\r\\n     *       }\\r\\n     *\\r\\n     *       return inventory.container.getItem(0);\\r\\n     *     }\\r\\n     *     return undefined;\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    getItem(slot: number): ItemStack | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a container slot. This acts as a reference to a slot\\r\\n     * at the given index for this container.\\r\\n     *\\r\\n     * @param slot\\r\\n     * The index of the slot to return. This index must be within\\r\\n     * the bounds of the container.\\r\\n     * @throws\\r\\n     * Throws if the container is invalid or if the `slot` index is\\r\\n     * out of bounds.\\r\\n     */\\r\\n    getSlot(slot: number): ContainerSlot;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Moves an item from one slot to another, potentially across\\r\\n     * containers.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param fromSlot\\r\\n     * Zero-based index of the slot to transfer an item from, on\\r\\n     * this container.\\r\\n     * @param toSlot\\r\\n     * Zero-based index of the slot to transfer an item to, on\\r\\n     * `toContainer`.\\r\\n     * @param toContainer\\r\\n     * Target container to transfer to. Note this can be the same\\r\\n     * container as the source.\\r\\n     * @throws\\r\\n     * Throws if either this container or `toContainer` are invalid\\r\\n     * or if the `fromSlot` or `toSlot` indices out of bounds.\\r\\n     *\\r\\n     * {@link ContainerRulesError}\\r\\n     *\\r\\n     * {@link Error}\\r\\n     * @example moveBetweenContainers.ts\\r\\n     * ```typescript\\r\\n     * import { world, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     * import { MinecraftEntityTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n     *\\r\\n     * function moveBetweenContainers(\\r\\n     *     targetLocation: DimensionLocation\\r\\n     * ) {\\r\\n     *   const players = world.getAllPlayers();\\r\\n     *\\r\\n     *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\\r\\n     *     x: targetLocation.x + 1,\\r\\n     *     y: targetLocation.y,\\r\\n     *     z: targetLocation.z,\\r\\n     *   });\\r\\n     *\\r\\n     *   if (players.length > 0) {\\r\\n     *     const fromPlayer = players[0];\\r\\n     *\\r\\n     *     const fromInventory = fromPlayer.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\\r\\n     *     const toInventory = chestCart.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\\r\\n     *\\r\\n     *     if (fromInventory && toInventory && fromInventory.container && toInventory.container) {\\r\\n     *       fromInventory.container.moveItem(0, 0, toInventory.container);\\r\\n     *     }\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    moveItem(fromSlot: number, toSlot: number, toContainer: Container): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets an item stack within a particular slot.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param slot\\r\\n     * Zero-based index of the slot to set an item at.\\r\\n     * @param itemStack\\r\\n     * Stack of items to place within the specified slot. Setting\\r\\n     * `itemStack` to undefined will clear the slot.\\r\\n     * @throws\\r\\n     * Throws if the container is invalid or if the `slot` index is\\r\\n     * out of bounds.\\r\\n     *\\r\\n     * {@link ContainerRulesError}\\r\\n     *\\r\\n     * {@link Error}\\r\\n     */\\r\\n    setItem(slot: number, itemStack?: ItemStack): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Swaps items between two different slots within containers.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param slot\\r\\n     * Zero-based index of the slot to swap from this container.\\r\\n     * @param otherSlot\\r\\n     * Zero-based index of the slot to swap with.\\r\\n     * @param otherContainer\\r\\n     * Target container to swap with. Note this can be the same\\r\\n     * container as this source.\\r\\n     * @throws\\r\\n     * Throws if either this container or `otherContainer` are\\r\\n     * invalid or if the `slot` or `otherSlot` are out of bounds.\\r\\n     *\\r\\n     * {@link ContainerRulesError}\\r\\n     *\\r\\n     * {@link Error}\\r\\n     */\\r\\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Moves an item from one slot to another container, or to the\\r\\n     * first available slot in the same container.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param fromSlot\\r\\n     * Zero-based index of the slot to transfer an item from, on\\r\\n     * this container.\\r\\n     * @param toContainer\\r\\n     * Target container to transfer to. Note this can be the same\\r\\n     * container as the source.\\r\\n     * @returns\\r\\n     * An itemStack with the items that couldn't be transferred.\\r\\n     * Returns undefined if all items were transferred.\\r\\n     * @throws\\r\\n     * Throws if either this container or `toContainer` are invalid\\r\\n     * or if the `fromSlot` or `toSlot` indices out of bounds.\\r\\n     *\\r\\n     * {@link ContainerRulesError}\\r\\n     *\\r\\n     * {@link Error}\\r\\n     * @example transferBetweenContainers.ts\\r\\n     * ```typescript\\r\\n     * import { world, EntityInventoryComponent, EntityComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     * import { MinecraftEntityTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n     *\\r\\n     * function transferBetweenContainers(\\r\\n     *     targetLocation: DimensionLocation\\r\\n     * ) {\\r\\n     *   const players = world.getAllPlayers();\\r\\n     *\\r\\n     *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\\r\\n     *     x: targetLocation.x + 1,\\r\\n     *     y: targetLocation.y,\\r\\n     *     z: targetLocation.z,\\r\\n     *   });\\r\\n     *\\r\\n     *   if (players.length > 0) {\\r\\n     *     const fromPlayer = players[0];\\r\\n     *\\r\\n     *     const fromInventory = fromPlayer.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\\r\\n     *     const toInventory = chestCart.getComponent(EntityComponentTypes.Inventory) as EntityInventoryComponent;\\r\\n     *\\r\\n     *     if (fromInventory && toInventory && fromInventory.container && toInventory.container) {\\r\\n     *       fromInventory.container.transferItem(0, toInventory.container);\\r\\n     *     }\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    transferItem(fromSlot: number, toContainer: Container): ItemStack | undefined;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents a container that can hold sets of items. Used\\r\\n * with entities such as Players, Chest Minecarts, Llamas, and\\r\\n * more.\\r\\n * @example containers.ts\\r\\n * ```typescript\\r\\n * import { ItemStack, EntityInventoryComponent, BlockInventoryComponent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n * import { MinecraftBlockTypes, MinecraftItemTypes, MinecraftEntityTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n *\\r\\n * function containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n *   const xLocation = targetLocation; // left chest location\\r\\n *   const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\\r\\n *\\r\\n *   const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\\r\\n *     x: targetLocation.x + 4,\\r\\n *     y: targetLocation.y,\\r\\n *     z: targetLocation.z,\\r\\n *   });\\r\\n *\\r\\n *   const xChestBlock = targetLocation.dimension.getBlock(xLocation);\\r\\n *   const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\\r\\n *\\r\\n *   if (!xChestBlock || !xPlusTwoChestBlock) {\\r\\n *     log(\\\"Could not retrieve chest blocks.\\\");\\r\\n *     return;\\r\\n *   }\\r\\n *\\r\\n *   xChestBlock.setType(MinecraftBlockTypes.Chest);\\r\\n *   xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\\r\\n *\\r\\n *   const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r\\n *   const xChestInventoryComponent = xChestBlock.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r\\n *   const chestCartInventoryComp = chestCart.getComponent(\\\"inventory\\\") as EntityInventoryComponent;\\r\\n *\\r\\n *   const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\\r\\n *   const xChestContainer = xChestInventoryComponent.container;\\r\\n *   const chestCartContainer = chestCartInventoryComp.container;\\r\\n *\\r\\n *   if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\\r\\n *     log(\\\"Could not retrieve chest containers.\\\");\\r\\n *     return;\\r\\n *   }\\r\\n *\\r\\n *   xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\\r\\n *   if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\\r\\n *     log(\\\"Expected apple in x+2 container slot index 0\\\", -1);\\r\\n *   }\\r\\n *\\r\\n *   xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\\r\\n *   if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\\r\\n *     log(\\\"Expected emerald in x+2 container slot index 1\\\", -1);\\r\\n *   }\\r\\n *\\r\\n *   if (xPlusTwoChestContainer.size !== 27) {\\r\\n *     log(\\\"Unexpected size: \\\" + xPlusTwoChestContainer.size, -1);\\r\\n *   }\\r\\n *\\r\\n *   if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\\r\\n *     log(\\\"Unexpected emptySlotsCount: \\\" + xPlusTwoChestContainer.emptySlotsCount, -1);\\r\\n *   }\\r\\n *\\r\\n *   xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\\r\\n *\\r\\n *   xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\\r\\n *   xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\\r\\n *\\r\\n *   if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\\r\\n *     log(\\\"Expected apple in minecraft chest container slot index 0\\\", -1);\\r\\n *   }\\r\\n *\\r\\n *   if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\\r\\n *     log(\\\"Expected emerald in x container slot index 0\\\", -1);\\r\\n *   }\\r\\n *\\r\\n *   if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\\r\\n *     log(\\\"Expected cake in x+2 container slot index 1\\\", -1);\\r\\n *   }\\r\\n * }\\r\\n * ```\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"emptySlotsCount\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"isValid\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"size\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"addItem\",\n              \"parameters\": [],\n              \"returnType\": \"ItemStack | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"addItem(itemStack: ItemStack): ItemStack | undefined\"\n            },\n            {\n              \"name\": \"clearAll\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"clearAll(): void\"\n            },\n            {\n              \"name\": \"contains\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"contains(itemStack: ItemStack): boolean\"\n            },\n            {\n              \"name\": \"find\",\n              \"parameters\": [],\n              \"returnType\": \"number | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"find(itemStack: ItemStack): number | undefined\"\n            },\n            {\n              \"name\": \"findLast\",\n              \"parameters\": [],\n              \"returnType\": \"number | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"findLast(itemStack: ItemStack): number | undefined\"\n            },\n            {\n              \"name\": \"firstEmptySlot\",\n              \"parameters\": [],\n              \"returnType\": \"number | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"firstEmptySlot(): number | undefined\"\n            },\n            {\n              \"name\": \"firstItem\",\n              \"parameters\": [],\n              \"returnType\": \"number | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"firstItem(): number | undefined\"\n            },\n            {\n              \"name\": \"getItem\",\n              \"parameters\": [],\n              \"returnType\": \"ItemStack | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getItem(slot: number): ItemStack | undefined\"\n            },\n            {\n              \"name\": \"getSlot\",\n              \"parameters\": [],\n              \"returnType\": \"ContainerSlot\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getSlot(slot: number): ContainerSlot\"\n            },\n            {\n              \"name\": \"moveItem\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"moveItem(fromSlot: number, toSlot: number, toContainer: Container): void\"\n            },\n            {\n              \"name\": \"setItem\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setItem(slot: number, itemStack?: ItemStack): void\"\n            },\n            {\n              \"name\": \"swapItems\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"swapItems(slot: number, otherSlot: number, otherContainer: Container): void\"\n            },\n            {\n              \"name\": \"transferItem\",\n              \"parameters\": [],\n              \"returnType\": \"ItemStack | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"transferItem(fromSlot: number, toContainer: Container): ItemStack | undefined\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"container\",\n            \"class\"\n          ],\n          \"examples\": [\n            {\n              \"title\": \"containers.ts\",\n              \"code\": \"import { ItemStack, EntityInventoryComponent, BlockInventoryComponent, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\nimport { MinecraftBlockTypes, MinecraftItemTypes, MinecraftEntityTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n\\nfunction containers(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n  const xLocation = targetLocation; // left chest location\\r\\n  const xPlusTwoLocation = { x: targetLocation.x + 2, y: targetLocation.y, z: targetLocation.z }; // right chest\\r\\n\\n  const chestCart = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.ChestMinecart, {\\r\\n    x: targetLocation.x + 4,\\r\\n    y: targetLocation.y,\\r\\n    z: targetLocation.z,\\r\\n  });\\r\\n\\n  const xChestBlock = targetLocation.dimension.getBlock(xLocation);\\r\\n  const xPlusTwoChestBlock = targetLocation.dimension.getBlock(xPlusTwoLocation);\\r\\n\\n  if (!xChestBlock || !xPlusTwoChestBlock) {\\r\\n    log(\\\"Could not retrieve chest blocks.\\\");\\r\\n    return;\\r\\n  }\\r\\n\\n  xChestBlock.setType(MinecraftBlockTypes.Chest);\\r\\n  xPlusTwoChestBlock.setType(MinecraftBlockTypes.Chest);\\r\\n\\n  const xPlusTwoChestInventoryComp = xPlusTwoChestBlock.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r\\n  const xChestInventoryComponent = xChestBlock.getComponent(\\\"inventory\\\") as BlockInventoryComponent;\\r\\n  const chestCartInventoryComp = chestCart.getComponent(\\\"inventory\\\") as EntityInventoryComponent;\\r\\n\\n  const xPlusTwoChestContainer = xPlusTwoChestInventoryComp.container;\\r\\n  const xChestContainer = xChestInventoryComponent.container;\\r\\n  const chestCartContainer = chestCartInventoryComp.container;\\r\\n\\n  if (!xPlusTwoChestContainer || !xChestContainer || !chestCartContainer) {\\r\\n    log(\\\"Could not retrieve chest containers.\\\");\\r\\n    return;\\r\\n  }\\r\\n\\n  xPlusTwoChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Apple, 10));\\r\\n  if (xPlusTwoChestContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\\r\\n    log(\\\"Expected apple in x+2 container slot index 0\\\", -1);\\r\\n  }\\r\\n\\n  xPlusTwoChestContainer.setItem(1, new ItemStack(MinecraftItemTypes.Emerald, 10));\\r\\n  if (xPlusTwoChestContainer.getItem(1)?.typeId !== MinecraftItemTypes.Emerald) {\\r\\n    log(\\\"Expected emerald in x+2 container slot index 1\\\", -1);\\r\\n  }\\r\\n\\n  if (xPlusTwoChestContainer.size !== 27) {\\r\\n    log(\\\"Unexpected size: \\\" + xPlusTwoChestContainer.size, -1);\\r\\n  }\\r\\n\\n  if (xPlusTwoChestContainer.emptySlotsCount !== 25) {\\r\\n    log(\\\"Unexpected emptySlotsCount: \\\" + xPlusTwoChestContainer.emptySlotsCount, -1);\\r\\n  }\\r\\n\\n  xChestContainer.setItem(0, new ItemStack(MinecraftItemTypes.Cake, 10));\\r\\n\\n  xPlusTwoChestContainer.transferItem(0, chestCartContainer); // transfer the apple from the xPlusTwo chest to a chest cart\\r\\n  xPlusTwoChestContainer.swapItems(1, 0, xChestContainer); // swap the cake from x and the emerald from xPlusTwo\\r\\n\\n  if (chestCartContainer.getItem(0)?.typeId !== MinecraftItemTypes.Apple) {\\r\\n    log(\\\"Expected apple in minecraft chest container slot index 0\\\", -1);\\r\\n  }\\r\\n\\n  if (xChestContainer.getItem(0)?.typeId === MinecraftItemTypes.Emerald) {\\r\\n    log(\\\"Expected emerald in x container slot index 0\\\", -1);\\r\\n  }\\r\\n\\n  if (xPlusTwoChestContainer.getItem(1)?.typeId === MinecraftItemTypes.Cake) {\\r\\n    log(\\\"Expected cake in x+2 container slot index 1\\\", -1);\\r\\n  }\\r\\n}\"\n            }\n          ],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.ContainerSlot\",\n          \"name\": \"ContainerSlot\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Represents a slot within a broader container (e.g., entity\\r inventory.)\\r /\",\n          \"definition\": \"export class ContainerSlot {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Number of the items in the stack. Valid values range between\\r\\n     * 1-255. The provided value will be clamped to the item's\\r\\n     * maximum stack size.\\r\\n     *\\r\\n     * This property can't be edited in read-only mode.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the value is outside the range of 1-255.\\r\\n     */\\r\\n    amount: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether the item is stackable. An item is considered\\r\\n     * stackable if the item's maximum stack size is greater than 1\\r\\n     * and the item does not contain any custom data or properties.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    readonly isStackable: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether the ContainerSlot is valid. The container\\r\\n     * slot is valid if the container exists and is loaded, and the\\r\\n     * slot index is valid.\\r\\n     *\\r\\n     */\\r\\n    readonly isValid: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets or sets whether the item is kept on death.\\r\\n     *\\r\\n     * This property can't be edited in read-only mode.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     */\\r\\n    keepOnDeath: boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets or sets the item's lock mode. The default value is\\r\\n     * `ItemLockMode.none`.\\r\\n     *\\r\\n     * This property can't be edited in read-only mode.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     */\\r\\n    lockMode: ItemLockMode;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The maximum stack size. This value varies depending on the\\r\\n     * type of item. For example, torches have a maximum stack size\\r\\n     * of 64, while eggs have a maximum stack size of 16.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    readonly maxAmount: number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Given name of this stack of items. The name tag is displayed\\r\\n     * when hovering over the item. Setting the name tag to an\\r\\n     * empty string or `undefined` will remove the name tag.\\r\\n     *\\r\\n     * This property can't be edited in read-only mode.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid. Also throws if\\r\\n     * the length exceeds 255 characters.\\r\\n     */\\r\\n    nameTag?: string;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The type of the item.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link minecraftcommon.EngineError}\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    readonly 'type': ItemType;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Identifier of the type of items for the stack. If a\\r\\n     * namespace is not specified, 'minecraft:' is assumed.\\r\\n     * Examples include 'wheat' or 'apple'.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    readonly typeId: string;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Clears all dynamic properties that have been set on this\\r\\n     * item stack.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    clearDynamicProperties(): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether the item within this container slot can be\\r\\n     * destroyed.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    getCanDestroy(): string[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns if the item in this container slot can be placed on.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    getCanPlaceOn(): string[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a property value.\\r\\n     *\\r\\n     * @param identifier\\r\\n     * The property identifier.\\r\\n     * @returns\\r\\n     * Returns the value for the property, or undefined if the\\r\\n     * property has not been set.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the available set of dynamic property identifiers\\r\\n     * that have been used on this item stack.\\r\\n     *\\r\\n     * @returns\\r\\n     * A string array of the dynamic properties set on this entity.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    getDynamicPropertyIds(): string[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the total size, in bytes, of all the dynamic\\r\\n     * properties that are currently stored for this entity. This\\r\\n     * includes the size of both the key and the value.  This can\\r\\n     * be useful for diagnosing performance warning signs - if, for\\r\\n     * example, an entity has many megabytes of associated dynamic\\r\\n     * properties, it may be slow to load on various devices.\\r\\n     *\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    getDynamicPropertyTotalByteCount(): number;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Creates an exact copy of the item stack, including any\\r\\n     * custom data or properties.\\r\\n     *\\r\\n     * @returns\\r\\n     * Returns a copy of the item in the slot. Returns undefined if\\r\\n     * the slot is empty.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    getItem(): ItemStack | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the lore value - a secondary display string - for an\\r\\n     * ItemStack.\\r\\n     *\\r\\n     * @returns\\r\\n     * An array of lore strings. If the item does not have lore,\\r\\n     * returns an empty array.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    getLore(): string[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns all tags for the item in the slot.\\r\\n     *\\r\\n     * @returns\\r\\n     * Returns all tags for the item in the slot. Return an empty\\r\\n     * array if the the slot is empty.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    getTags(): string[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns true if this slot has an item.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    hasItem(): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether the item in the slot slot has the given tag.\\r\\n     *\\r\\n     * @param tag\\r\\n     * The item tag.\\r\\n     * @returns\\r\\n     * Returns false when the slot is empty or the item in the slot\\r\\n     * does not have the given tag.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    hasTag(tag: string): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns whether this item stack can be stacked with the\\r\\n     * given `itemStack`. This is determined by comparing the item\\r\\n     * type and any custom data and properties associated with the\\r\\n     * item stacks. The amount of each item stack is not taken into\\r\\n     * consideration.\\r\\n     *\\r\\n     * @param itemStack\\r\\n     * The ItemStack that is being compared.\\r\\n     * @returns\\r\\n     * Returns whether this item stack can be stacked with the\\r\\n     * given `itemStack`.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    isStackableWith(itemStack: ItemStack): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The list of block types this item can break in Adventure\\r\\n     * mode. The block names are displayed in the item's tooltip.\\r\\n     * Setting the value to undefined will clear the list.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param blockIdentifiers\\r\\n     * The list of blocks, given by their identifiers.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid. Also throws if\\r\\n     * any of the provided block identifiers are invalid.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    setCanDestroy(blockIdentifiers?: string[]): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * The list of block types this item can be placed on in\\r\\n     * Adventure mode. This is only applicable to block items. The\\r\\n     * block names are displayed in the item's tooltip. Setting the\\r\\n     * value to undefined will clear the list.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param blockIdentifiers\\r\\n     * The list of blocks, given by their identifiers.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid. Also throws if\\r\\n     * any of the provided block identifiers are invalid.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    setCanPlaceOn(blockIdentifiers?: string[]): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets a specified property to a value.\\r\\n     *\\r\\n     * @param identifier\\r\\n     * The property identifier.\\r\\n     * @param value\\r\\n     * Data value of the property to set.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     *\\r\\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\\r\\n     */\\r\\n    setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the given ItemStack in the slot, replacing any existing\\r\\n     * item.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param itemStack\\r\\n     * The ItemStack to be placed in the slot.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link ContainerRulesError}\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    setItem(itemStack?: ItemStack): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the lore value - a secondary display string - for an\\r\\n     * ItemStack.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param loreList\\r\\n     * A list of lore strings. Setting this argument to undefined\\r\\n     * will clear the lore.\\r\\n     * @throws\\r\\n     * Throws if the slot's container is invalid.\\r\\n     *\\r\\n     * {@link minecraftcommon.ArgumentOutOfBoundsError}\\r\\n     *\\r\\n     * {@link InvalidContainerSlotError}\\r\\n     */\\r\\n    setLore(loreList?: string[]): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Represents a slot within a broader container (e.g., entity\\r\\n * inventory.)\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"isStackable\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"isValid\",\n              \"type\": \"boolean\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"maxAmount\",\n              \"type\": \"number\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"typeId\",\n              \"type\": \"string\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"clearDynamicProperties\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"clearDynamicProperties(): void\"\n            },\n            {\n              \"name\": \"getCanDestroy\",\n              \"parameters\": [],\n              \"returnType\": \"string[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getCanDestroy(): string[]\"\n            },\n            {\n              \"name\": \"getCanPlaceOn\",\n              \"parameters\": [],\n              \"returnType\": \"string[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getCanPlaceOn(): string[]\"\n            },\n            {\n              \"name\": \"getDynamicProperty\",\n              \"parameters\": [],\n              \"returnType\": \"boolean | number | string | Vector3 | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getDynamicProperty(identifier: string): boolean | number | string | Vector3 | undefined\"\n            },\n            {\n              \"name\": \"getDynamicPropertyIds\",\n              \"parameters\": [],\n              \"returnType\": \"string[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getDynamicPropertyIds(): string[]\"\n            },\n            {\n              \"name\": \"getDynamicPropertyTotalByteCount\",\n              \"parameters\": [],\n              \"returnType\": \"number\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getDynamicPropertyTotalByteCount(): number\"\n            },\n            {\n              \"name\": \"getItem\",\n              \"parameters\": [],\n              \"returnType\": \"ItemStack | undefined\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getItem(): ItemStack | undefined\"\n            },\n            {\n              \"name\": \"getLore\",\n              \"parameters\": [],\n              \"returnType\": \"string[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getLore(): string[]\"\n            },\n            {\n              \"name\": \"getTags\",\n              \"parameters\": [],\n              \"returnType\": \"string[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getTags(): string[]\"\n            },\n            {\n              \"name\": \"hasItem\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"hasItem(): boolean\"\n            },\n            {\n              \"name\": \"hasTag\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"hasTag(tag: string): boolean\"\n            },\n            {\n              \"name\": \"isStackableWith\",\n              \"parameters\": [],\n              \"returnType\": \"boolean\",\n              \"accessibility\": \"public\",\n              \"signature\": \"isStackableWith(itemStack: ItemStack): boolean\"\n            },\n            {\n              \"name\": \"setCanDestroy\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setCanDestroy(blockIdentifiers?: string[]): void\"\n            },\n            {\n              \"name\": \"setCanPlaceOn\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setCanPlaceOn(blockIdentifiers?: string[]): void\"\n            },\n            {\n              \"name\": \"setDynamicProperty\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setDynamicProperty(identifier: string, value?: boolean | number | string | Vector3): void\"\n            },\n            {\n              \"name\": \"setItem\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setItem(itemStack?: ItemStack): void\"\n            },\n            {\n              \"name\": \"setLore\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"setLore(loreList?: string[]): void\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"containerslot\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CustomCommandOrigin\",\n          \"name\": \"CustomCommandOrigin\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Details about the origins of the command.\\r /\",\n          \"definition\": \"export class CustomCommandOrigin {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * If this command was initiated via an NPC, returns the entity\\r\\n     * that initiated the NPC dialogue.\\r\\n     *\\r\\n     */\\r\\n    readonly initiator?: Entity;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Source block if this command was triggered via a block\\r\\n     * (e.g., a commandblock.)\\r\\n     *\\r\\n     */\\r\\n    readonly sourceBlock?: Block;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Source entity if this command was triggered by an entity\\r\\n     * (e.g., a NPC).\\r\\n     *\\r\\n     */\\r\\n    readonly sourceEntity?: Entity;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the type of source that fired this command.\\r\\n     *\\r\\n     */\\r\\n    readonly sourceType: CustomCommandSource;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Details about the origins of the command.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"sourceType\",\n              \"type\": \"CustomCommandSource\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"customcommandorigin\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CustomCommandRegistry\",\n          \"name\": \"CustomCommandRegistry\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Provides the functionality for registering custom commands.\\r /\",\n          \"definition\": \"export class CustomCommandRegistry {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Registers a custom command that when executed triggers a\\r\\n     * script callback.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     * @param callback\\r\\n     * The callback triggered when the command executes.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link CustomCommandError}\\r\\n     *\\r\\n     * {@link minecraftcommon.EngineError}\\r\\n     *\\r\\n     * {@link NamespaceNameError}\\r\\n     */\\r\\n    registerCommand(\\r\\n        customCommand: CustomCommand,\\r\\n        callback: (origin: CustomCommandOrigin, ...args: any[]) => CustomCommandResult | undefined,\\r\\n    ): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Registers a custom command enum.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link CustomCommandError}\\r\\n     *\\r\\n     * {@link minecraftcommon.EngineError}\\r\\n     *\\r\\n     * {@link NamespaceNameError}\\r\\n     */\\r\\n    registerEnum(name: string, values: string[]): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Provides the functionality for registering custom commands.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [\n            {\n              \"name\": \"registerEnum\",\n              \"parameters\": [],\n              \"returnType\": \"void\",\n              \"accessibility\": \"public\",\n              \"signature\": \"registerEnum(name: string, values: string[]): void\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"customcommandregistry\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.CustomComponentParameters\",\n          \"name\": \"CustomComponentParameters\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains the custom component's JSON parameters\\r /\",\n          \"definition\": \"export class CustomComponentParameters {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * JSON object containing the parameters from the custom\\r\\n     * component definition\\r\\n     *\\r\\n     */\\r\\n    readonly params: unknown;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains the custom component's JSON parameters\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"params\",\n              \"type\": \"unknown\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"customcomponentparameters\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.DataDrivenEntityTriggerAfterEvent\",\n          \"name\": \"DataDrivenEntityTriggerAfterEvent\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains information related to firing of a data driven\\r entity event - for example, the minecraft:ageable_grow_up\\r event on a chicken.\\r /\",\n          \"definition\": \"export class DataDrivenEntityTriggerAfterEvent {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Entity that the event triggered on.\\r\\n     *\\r\\n     */\\r\\n    readonly entity: Entity;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Name of the data driven event being triggered.\\r\\n     *\\r\\n     */\\r\\n    readonly eventId: string;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * An updateable list of modifications to component state that\\r\\n     * are the effect of this triggered event.\\r\\n     *\\r\\n     */\\r\\n    getModifiers(): DefinitionModifier[];\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains information related to firing of a data driven\\r\\n * entity event - for example, the minecraft:ageable_grow_up\\r\\n * event on a chicken.\\r\\n */\\r\",\n          \"properties\": [\n            {\n              \"name\": \"entity\",\n              \"type\": \"Entity\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            },\n            {\n              \"name\": \"eventId\",\n              \"type\": \"string\",\n              \"readonly\": true,\n              \"accessibility\": \"public\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"name\": \"getModifiers\",\n              \"parameters\": [],\n              \"returnType\": \"DefinitionModifier[]\",\n              \"accessibility\": \"public\",\n              \"signature\": \"getModifiers(): DefinitionModifier[]\"\n            }\n          ],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"datadrivenentitytriggerafterevent\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.DataDrivenEntityTriggerAfterEventSignal\",\n          \"name\": \"DataDrivenEntityTriggerAfterEventSignal\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"Contains event registration related to firing of a data\\r driven entity event - for example, the\\r minecraft:ageable_grow_up event on a chicken.\\r /\",\n          \"definition\": \"export class DataDrivenEntityTriggerAfterEventSignal {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Adds a callback that will be called after a data driven\\r\\n     * entity event is triggered.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     */\\r\\n    subscribe(\\r\\n        callback: (arg0: DataDrivenEntityTriggerAfterEvent) => void,\\r\\n        options?: EntityDataDrivenTriggerEventOptions,\\r\\n    ): (arg0: DataDrivenEntityTriggerAfterEvent) => void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Removes a callback that will be called after a data driven\\r\\n     * entity event is triggered.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * This function can be called in early-execution mode.\\r\\n     *\\r\\n     */\\r\\n    unsubscribe(callback: (arg0: DataDrivenEntityTriggerAfterEvent) => void): void;\\r\\n}\\r\",\n          \"jsdoc\": \"/**\\r\\n * Contains event registration related to firing of a data\\r\\n * driven entity event - for example, the\\r\\n * minecraft:ageable_grow_up event on a chicken.\\r\\n */\\r\",\n          \"properties\": [],\n          \"methods\": [],\n          \"categories\": [\n            \"Classes\",\n            \"Server\"\n          ],\n          \"tags\": [],\n          \"keywords\": [\n            \"datadrivenentitytriggeraftereventsignal\",\n            \"class\"\n          ],\n          \"examples\": [],\n          \"stability\": \"stable\"\n        },\n        {\n          \"id\": \"@minecraft/server.Dimension\",\n          \"name\": \"Dimension\",\n          \"type\": \"class\",\n          \"module\": \"@minecraft/server\",\n          \"description\": \"A class that represents a particular dimension (e.g., The\\r End) within a world.\\r /\",\n          \"definition\": \"export class Dimension {\\n    private constructor();\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Height range of the dimension.\\r\\n     *\\r\\n     * @throws This property can throw when used.\\r\\n     */\\r\\n    readonly heightRange: minecraftcommon.NumberRange;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Identifier of the dimension.\\r\\n     *\\r\\n     */\\r\\n    readonly id: string;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Key for the localization of a dimension's name used by\\r\\n     * language files.\\r\\n     *\\r\\n     */\\r\\n    readonly localizationKey: string;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Searches the block volume for a block that satisfies the\\r\\n     * block filter.\\r\\n     *\\r\\n     * @param volume\\r\\n     * Volume of blocks that will be checked.\\r\\n     * @param filter\\r\\n     * Block filter that will be checked against each block in the\\r\\n     * volume.\\r\\n     * @param allowUnloadedChunks\\r\\n     * If set to true will suppress the UnloadedChunksError if some\\r\\n     * or all of the block volume is outside of the loaded chunks.\\r\\n     * Will only check the block locations that are within the\\r\\n     * loaded chunks in the volume.\\r\\n     * Defaults to: false\\r\\n     * @returns\\r\\n     * Returns true if at least one block in the volume satisfies\\r\\n     * the filter, false otherwise.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link UnloadedChunksError}\\r\\n     */\\r\\n    containsBlock(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Creates an explosion at the specified location.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param location\\r\\n     * The location of the explosion.\\r\\n     * @param radius\\r\\n     * Radius, in blocks, of the explosion to create.\\r\\n     * @param explosionOptions\\r\\n     * Additional configurable options for the explosion.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     * @example createExplosion.ts\\r\\n     * ```typescript\\r\\n     * import { DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     *\\r\\n     * function createExplosion(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n     *   log(\\\"Creating an explosion of radius 10.\\\");\\r\\n     *   targetLocation.dimension.createExplosion(targetLocation, 10);\\r\\n     * }\\r\\n     * ```\\r\\n     * @example createNoBlockExplosion.ts\\r\\n     * ```typescript\\r\\n     * import { DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     * import { Vector3Utils } from \\\"@minecraft/math\\\";\\r\\n     *\\r\\n     * function createNoBlockExplosion(\\r\\n     *   log: (message: string, status?: number) => void,\\r\\n     *   targetLocation: DimensionLocation\\r\\n     * ) {\\r\\n     *   const explodeNoBlocksLoc = Vector3Utils.floor(Vector3Utils.add(targetLocation, { x: 1, y: 2, z: 1 }));\\r\\n     *\\r\\n     *   log(\\\"Creating an explosion of radius 15 that does not break blocks.\\\");\\r\\n     *   targetLocation.dimension.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });\\r\\n     * }\\r\\n     * ```\\r\\n     * @example createExplosions.ts\\r\\n     * ```typescript\\r\\n     * import { DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     * import { Vector3Utils } from \\\"@minecraft/math\\\";\\r\\n     *\\r\\n     * function createExplosions(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n     *   const explosionLoc = Vector3Utils.add(targetLocation, { x: 0.5, y: 0.5, z: 0.5 });\\r\\n     *\\r\\n     *   log(\\\"Creating an explosion of radius 15 that causes fire.\\\");\\r\\n     *   targetLocation.dimension.createExplosion(explosionLoc, 15, { causesFire: true });\\r\\n     *\\r\\n     *   const belowWaterLoc = Vector3Utils.add(targetLocation, { x: 3, y: 1, z: 3 });\\r\\n     *\\r\\n     *   log(\\\"Creating an explosion of radius 10 that can go underwater.\\\");\\r\\n     *   targetLocation.dimension.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    createExplosion(location: Vector3, radius: number, explosionOptions?: ExplosionOptions): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Fills an area of blocks with a specific block type.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param volume\\r\\n     * Volume of blocks to be filled.\\r\\n     * @param block\\r\\n     * Type of block to fill the volume with.\\r\\n     * @param options\\r\\n     * A set of additional options, such as a block filter which\\r\\n     * can be used to include / exclude specific blocks in the\\r\\n     * fill.\\r\\n     * @returns\\r\\n     * Returns a ListBlockVolume which contains all the blocks that\\r\\n     * were placed.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link minecraftcommon.EngineError}\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link UnloadedChunksError}\\r\\n     */\\r\\n    fillBlocks(\\r\\n        volume: BlockVolumeBase,\\r\\n        block: BlockPermutation | BlockType | string,\\r\\n        options?: BlockFillOptions,\\r\\n    ): ListBlockVolume;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a block instance at the given location.\\r\\n     *\\r\\n     * @param location\\r\\n     * The location at which to return a block.\\r\\n     * @returns\\r\\n     * Block at the specified location, or 'undefined' if asking\\r\\n     * for a block at an unloaded chunk.\\r\\n     * @throws\\r\\n     * PositionInUnloadedChunkError: Exception thrown when trying\\r\\n     * to interact with a Block object that isn't in a loaded and\\r\\n     * ticking chunk anymore\\r\\n     *\\r\\n     * PositionOutOfWorldBoundariesError: Exception thrown when\\r\\n     * trying to interact with a position outside of dimension\\r\\n     * height range\\r\\n     *\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    getBlock(location: Vector3): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets the first block found above a given block location\\r\\n     * based on the given options (by default will find the first\\r\\n     * solid block above).\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param location\\r\\n     * Location to retrieve the block above from.\\r\\n     * @param options\\r\\n     * The options to decide if a block is a valid result.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getBlockAbove(location: Vector3, options?: BlockRaycastOptions): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets the first block found below a given block location\\r\\n     * based on the given options (by default will find the first\\r\\n     * solid block below).\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param location\\r\\n     * Location to retrieve the block below from.\\r\\n     * @param options\\r\\n     * The options to decide if a block is a valid result.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getBlockBelow(location: Vector3, options?: BlockRaycastOptions): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets the first block that intersects with a vector emanating\\r\\n     * from a location.\\r\\n     *\\r\\n     * @param location\\r\\n     * Location from where to initiate the ray check.\\r\\n     * @param direction\\r\\n     * Vector direction to cast the ray.\\r\\n     * @param options\\r\\n     * Additional options for processing this raycast query.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getBlockFromRay(location: Vector3, direction: Vector3, options?: BlockRaycastOptions): BlockRaycastHit | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets all the blocks in a volume that satisfy the filter.\\r\\n     *\\r\\n     * @param volume\\r\\n     * Volume of blocks that will be checked.\\r\\n     * @param filter\\r\\n     * Block filter that will be checked against each block in the\\r\\n     * volume.\\r\\n     * @param allowUnloadedChunks\\r\\n     * If set to true will suppress the UnloadedChunksError if some\\r\\n     * or all of the block volume is outside of the loaded chunks.\\r\\n     * Will only check the block locations that are within the\\r\\n     * loaded chunks in the volume.\\r\\n     * Defaults to: false\\r\\n     * @returns\\r\\n     * Returns the ListBlockVolume that contains all the block\\r\\n     * locations that satisfied the block filter.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link UnloadedChunksError}\\r\\n     */\\r\\n    getBlocks(volume: BlockVolumeBase, filter: BlockFilter, allowUnloadedChunks?: boolean): ListBlockVolume;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a set of entities based on a set of conditions\\r\\n     * defined via the EntityQueryOptions set of filter criteria.\\r\\n     *\\r\\n     * @param options\\r\\n     * Additional options that can be used to filter the set of\\r\\n     * entities returned.\\r\\n     * @returns\\r\\n     * An entity array.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link CommandError}\\r\\n     *\\r\\n     * {@link minecraftcommon.InvalidArgumentError}\\r\\n     * @example bounceSkeletons.ts\\r\\n     * ```typescript\\r\\n     * import { EntityQueryOptions, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     *\\r\\n     * function bounceSkeletons(targetLocation: DimensionLocation) {\\r\\n     *   const mobs = [\\\"creeper\\\", \\\"skeleton\\\", \\\"sheep\\\"];\\r\\n     *\\r\\n     *   // create some sample mob data\\r\\n     *   for (let i = 0; i < 10; i++) {\\r\\n     *     targetLocation.dimension.spawnEntity(mobs[i % mobs.length], targetLocation);\\r\\n     *   }\\r\\n     *\\r\\n     *   const eqo: EntityQueryOptions = {\\r\\n     *     type: \\\"skeleton\\\",\\r\\n     *   };\\r\\n     *\\r\\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\\r\\n     *     entity.applyKnockback(0, 0, 0, 1);\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     * @example tagsQuery.ts\\r\\n     * ```typescript\\r\\n     * import { EntityQueryOptions, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     *\\r\\n     * function tagsQuery(targetLocation: DimensionLocation) {\\r\\n     *   const mobs = [\\\"creeper\\\", \\\"skeleton\\\", \\\"sheep\\\"];\\r\\n     *\\r\\n     *   // create some sample mob data\\r\\n     *   for (let i = 0; i < 10; i++) {\\r\\n     *     const mobTypeId = mobs[i % mobs.length];\\r\\n     *     const entity = targetLocation.dimension.spawnEntity(mobTypeId, targetLocation);\\r\\n     *     entity.addTag(\\\"mobparty.\\\" + mobTypeId);\\r\\n     *   }\\r\\n     *\\r\\n     *   const eqo: EntityQueryOptions = {\\r\\n     *     tags: [\\\"mobparty.skeleton\\\"],\\r\\n     *   };\\r\\n     *\\r\\n     *   for (const entity of targetLocation.dimension.getEntities(eqo)) {\\r\\n     *     entity.kill();\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     * @example testThatEntityIsFeatherItem.ts\\r\\n     * ```typescript\\r\\n     * import { EntityItemComponent, EntityComponentTypes, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     *\\r\\n     * function testThatEntityIsFeatherItem(\\r\\n     *   log: (message: string, status?: number) => void,\\r\\n     *   targetLocation: DimensionLocation\\r\\n     * ) {\\r\\n     *   const items = targetLocation.dimension.getEntities({\\r\\n     *     location: targetLocation,\\r\\n     *     maxDistance: 20,\\r\\n     *   });\\r\\n     *\\r\\n     *   for (const item of items) {\\r\\n     *     const itemComp = item.getComponent(EntityComponentTypes.Item) as EntityItemComponent;\\r\\n     *\\r\\n     *     if (itemComp) {\\r\\n     *       if (itemComp.itemStack.typeId.endsWith(\\\"feather\\\")) {\\r\\n     *         log(\\\"Success! Found a feather\\\", 1);\\r\\n     *       }\\r\\n     *     }\\r\\n     *   }\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    getEntities(options?: EntityQueryOptions): Entity[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a set of entities at a particular location.\\r\\n     *\\r\\n     * @param location\\r\\n     * The location at which to return entities.\\r\\n     * @returns\\r\\n     * Zero or more entities at the specified location.\\r\\n     */\\r\\n    getEntitiesAtBlockLocation(location: Vector3): Entity[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Gets entities that intersect with a specified vector\\r\\n     * emanating from a location.\\r\\n     *\\r\\n     * @param options\\r\\n     * Additional options for processing this raycast query.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link minecraftcommon.EngineError}\\r\\n     *\\r\\n     * {@link minecraftcommon.InvalidArgumentError}\\r\\n     *\\r\\n     * {@link InvalidEntityError}\\r\\n     *\\r\\n     * {@link minecraftcommon.UnsupportedFunctionalityError}\\r\\n     */\\r\\n    getEntitiesFromRay(location: Vector3, direction: Vector3, options?: EntityRaycastOptions): EntityRaycastHit[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns a set of players based on a set of conditions\\r\\n     * defined via the EntityQueryOptions set of filter criteria.\\r\\n     *\\r\\n     * @param options\\r\\n     * Additional options that can be used to filter the set of\\r\\n     * players returned.\\r\\n     * @returns\\r\\n     * A player array.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link CommandError}\\r\\n     *\\r\\n     * {@link minecraftcommon.InvalidArgumentError}\\r\\n     */\\r\\n    getPlayers(options?: EntityQueryOptions): Player[];\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Returns the highest block at the given XZ location.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param locationXZ\\r\\n     * Location to retrieve the topmost block for.\\r\\n     * @param minHeight\\r\\n     * The Y height to begin the search from. Defaults to the\\r\\n     * maximum dimension height.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    getTopmostBlock(locationXZ: VectorXZ, minHeight?: number): Block | undefined;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Places the given feature into the dimension at the specified\\r\\n     * location.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param featureName\\r\\n     * The string identifier for the feature.\\r\\n     * @param location\\r\\n     * Location to place the feature.\\r\\n     * @param shouldThrow\\r\\n     * Specifies if the function call will throw an error if the\\r\\n     * feature could not be placed.\\r\\n     * Note: The function call will always throw an error if using\\r\\n     * an unknown feature name or trying to place in a unloaded\\r\\n     * chunk.\\r\\n     * Defaults to: false\\r\\n     * @throws\\r\\n     * An error will be thrown if the feature name is invalid.\\r\\n     * An error will be thrown if the location is in an unloaded\\r\\n     * chunk.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link minecraftcommon.InvalidArgumentError}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     */\\r\\n    placeFeature(featureName: string, location: Vector3, shouldThrow?: boolean): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Places the given feature rule into the dimension at the\\r\\n     * specified location.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param featureRuleName\\r\\n     * The string identifier for the feature rule.\\r\\n     * @param location\\r\\n     * Location to place the feature rule.\\r\\n     * @throws\\r\\n     * An error will be thrown if the feature rule name is invalid.\\r\\n     * An error will be thrown if the location is in an unloaded\\r\\n     * chunk.\\r\\n     *\\r\\n     * {@link minecraftcommon.InvalidArgumentError}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     */\\r\\n    placeFeatureRule(featureRuleName: string, location: Vector3): boolean;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Plays a sound for all players.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param soundId\\r\\n     * Identifier of the sound.\\r\\n     * @param location\\r\\n     * Location of the sound.\\r\\n     * @param soundOptions\\r\\n     * Additional options for configuring additional effects for\\r\\n     * the sound.\\r\\n     * @throws\\r\\n     * An error will be thrown if volume is less than 0.0.\\r\\n     * An error will be thrown if fade is less than 0.0.\\r\\n     * An error will be thrown if pitch is less than 0.01.\\r\\n     * An error will be thrown if volume is less than 0.0.\\r\\n     *\\r\\n     * {@link minecraftcommon.PropertyOutOfBoundsError}\\r\\n     */\\r\\n    playSound(soundId: string, location: Vector3, soundOptions?: WorldSoundOptions): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Runs a command synchronously using the context of the\\r\\n     * broader dimenion.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param commandString\\r\\n     * Command to run. Note that command strings should not start\\r\\n     * with slash.\\r\\n     * @returns\\r\\n     * Returns a command result with a count of successful values\\r\\n     * from the command.\\r\\n     * @throws\\r\\n     * Throws an exception if the command fails due to incorrect\\r\\n     * parameters or command syntax, or in erroneous cases for the\\r\\n     * command. Note that in many cases, if the command does not\\r\\n     * operate (e.g., a target selector found no matches), this\\r\\n     * method will not throw an exception.\\r\\n     *\\r\\n     * {@link CommandError}\\r\\n     */\\r\\n    runCommand(commandString: string): CommandResult;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets a block in the world using a BlockPermutation.\\r\\n     * BlockPermutations are blocks with a particular state.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param location\\r\\n     * The location within the dimension to set the block.\\r\\n     * @param permutation\\r\\n     * The block permutation to set.\\r\\n     * @throws\\r\\n     * Throws if the location is within an unloaded chunk or\\r\\n     * outside of the world bounds.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    setBlockPermutation(location: Vector3, permutation: BlockPermutation): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets a block at a given location within the dimension.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param location\\r\\n     * The location within the dimension to set the block.\\r\\n     * @param blockType\\r\\n     * The type of block to set. This can be either a string\\r\\n     * identifier or a BlockType. The default block permutation is\\r\\n     * used.\\r\\n     * @throws\\r\\n     * Throws if the location is within an unloaded chunk or\\r\\n     * outside of the world bounds.\\r\\n     *\\r\\n     * {@link Error}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     */\\r\\n    setBlockType(location: Vector3, blockType: BlockType | string): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Sets the current weather within the dimension\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param weatherType\\r\\n     * Set the type of weather to apply.\\r\\n     * @param duration\\r\\n     * Sets the duration of the weather (in ticks). If no duration\\r\\n     * is provided, the duration will be set to a random duration\\r\\n     * between 300 and 900 seconds.\\r\\n     * @throws This function can throw errors.\\r\\n     */\\r\\n    setWeather(weatherType: WeatherType, duration?: number): void;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Creates a new entity (e.g., a mob) at the specified\\r\\n     * location.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param identifier\\r\\n     * Identifier of the type of entity to spawn. If no namespace\\r\\n     * is specified, 'minecraft:' is assumed.\\r\\n     * @param location\\r\\n     * The location at which to create the entity.\\r\\n     * @returns\\r\\n     * Newly created entity at the specified location.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link EntitySpawnError}\\r\\n     *\\r\\n     * {@link minecraftcommon.InvalidArgumentError}\\r\\n     *\\r\\n     * {@link InvalidEntityError}\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     * @example spawnAdultHorse.ts\\r\\n     * ```typescript\\r\\n     * import { DimensionLocation } from '@minecraft/server';\\r\\n     * import { Vector3Utils } from '@minecraft/math';\\r\\n     *\\r\\n     * function spawnAdultHorse(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n     *     log('Create a horse and triggering the ageable_grow_up event, ensuring the horse is created as an adult');\\r\\n     *     targetLocation.dimension.spawnEntity(\\r\\n     *         'minecraft:horse<minecraft:ageable_grow_up>',\\r\\n     *         Vector3Utils.add(targetLocation, { x: 0, y: 1, z: 0 })\\r\\n     *     );\\r\\n     * }\\r\\n     * ```\\r\\n     * @example quickFoxLazyDog.ts\\r\\n     * ```typescript\\r\\n     * import { DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     * import { MinecraftEntityTypes, MinecraftEffectTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n     *\\r\\n     * function quickFoxLazyDog(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n     *   const fox = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Fox, {\\r\\n     *     x: targetLocation.x + 1,\\r\\n     *     y: targetLocation.y + 2,\\r\\n     *     z: targetLocation.z + 3,\\r\\n     *   });\\r\\n     *\\r\\n     *   fox.addEffect(MinecraftEffectTypes.Speed, 10, {\\r\\n     *     amplifier: 2,\\r\\n     *   });\\r\\n     *   log(\\\"Created a fox.\\\");\\r\\n     *\\r\\n     *   const wolf = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Wolf, {\\r\\n     *     x: targetLocation.x + 4,\\r\\n     *     y: targetLocation.y + 2,\\r\\n     *     z: targetLocation.z + 3,\\r\\n     *   });\\r\\n     *   wolf.addEffect(MinecraftEffectTypes.Slowness, 10, {\\r\\n     *     amplifier: 2,\\r\\n     *   });\\r\\n     *   wolf.isSneaking = true;\\r\\n     *   log(\\\"Created a sneaking wolf.\\\", 1);\\r\\n     * }\\r\\n     * ```\\r\\n     * @example triggerEvent.ts\\r\\n     * ```typescript\\r\\n     * import { DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     * import { MinecraftEntityTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n     *\\r\\n     * function triggerEvent(targetLocation: DimensionLocation) {\\r\\n     *   const creeper = targetLocation.dimension.spawnEntity(MinecraftEntityTypes.Creeper, targetLocation);\\r\\n     *\\r\\n     *   creeper.triggerEvent(\\\"minecraft:start_exploding_forced\\\");\\r\\n     * }\\r\\n     * ```\\r\\n     */\\r\\n    spawnEntity(identifier: EntityType | string, location: Vector3, options?: SpawnEntityOptions): Entity;\\r\\n    /**\\r\\n     * @remarks\\r\\n     * Creates a new item stack as an entity at the specified\\r\\n     * location.\\r\\n     *\\r\\n     * This function can't be called in read-only mode.\\r\\n     *\\r\\n     * @param location\\r\\n     * The location at which to create the item stack.\\r\\n     * @returns\\r\\n     * Newly created item stack entity at the specified location.\\r\\n     * @throws This function can throw errors.\\r\\n     *\\r\\n     * {@link LocationInUnloadedChunkError}\\r\\n     *\\r\\n     * {@link LocationOutOfWorldBoundariesError}\\r\\n     * @example itemStacks.ts\\r\\n     * ```typescript\\r\\n     * import { ItemStack, DimensionLocation } from \\\"@minecraft/server\\\";\\r\\n     * import { MinecraftItemTypes } from \\\"@minecraft/vanilla-data\\\";\\r\\n     *\\r\\n     * function itemStacks(log: (message: string, status?: number) => void, targetLocation: DimensionLocation) {\\r\\n     *   const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };\\r\\n     *   const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };\\r\\n     *   const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };\\r\\n     *\\r\\n     *   const oneEmerald = new ItemStack(MinecraftItemTypes.Emerald, 1);\\r\\n     *   const onePickaxe = new ItemStack(MinecraftItemTypes.DiamondPickaxe, 1);\\r\\n     *   const fiveEmeralds = new ItemStack(MinecraftItemTypes.Emerald, 5);\\r\\n     *\\r\\n     *   log(`Spawning an emerald at (${oneItemLoc.x}, ${oneItemLoc.y}, ${oneItemLoc.z})`);\\r\\n     *   targetLocation.dimension.spawnItem(oneEmerald, oneItemLoc);\\r\\n     *\\r\\n     *   log(`Spawning five emeralds at (${fiveItemsLoc.x}, ${fiveItemsLoc.y}, ${fiveItemsLoc.z})`);\\r\\n     *   targetLocation.dimension.spawnItem(fiveEmeralds, fiveItemsLoc);\\r\\n     *\\r\\n     *   log(`Spawning a diamond pickaxe at (${diamondPickaxeLoc.x}, ${diamondPick","size_bytes":360000},"shared/scriptRegistry.ts":{"content":"/**\n * Comprehensive Minecraft Script API Registry\n * Parsed from official TypeScript definitions\n */\n\n/**\n * Minecraft API module identifiers\n */\nexport type MinecraftModule = \n  | '@minecraft/server'\n  | '@minecraft/server-admin' \n  | '@minecraft/server-net'\n  | '@minecraft/server-ui'\n  | '@minecraft/common'\n  | '@minecraft/vanilla-data'\n  | '@minecraft/math';\n\n/**\n * Types of API elements that can be registered\n */\nexport type ApiElementType = \n  | 'enum'\n  | 'class' \n  | 'interface'\n  | 'type'\n  | 'function'\n  | 'constant'\n  | 'variable'\n  | 'event'\n  | 'namespace';\n\n/**\n * Parameter definition for methods and functions\n */\nexport interface ApiParameter {\n  /** Parameter name */\n  name: string;\n  /** TypeScript type */\n  type: string;\n  /** Whether parameter is optional */\n  optional: boolean;\n  /** Parameter description */\n  description?: string;\n  /** Default value if any */\n  defaultValue?: string;\n}\n\n/**\n * Method or function signature\n */\nexport interface ApiMethod {\n  /** Method name */\n  name: string;\n  /** Method description */\n  description?: string;\n  /** Parameters */\n  parameters: ApiParameter[];\n  /** Return type */\n  returnType: string;\n  /** Return type description */\n  returnDescription?: string;\n  /** Whether method is static */\n  isStatic?: boolean;\n  /** Whether method is async */\n  isAsync?: boolean;\n  /** Access modifier */\n  accessibility?: 'public' | 'protected' | 'private';\n  /** Full method signature */\n  signature: string;\n  /** Usage example */\n  example?: string;\n  /** JSDoc tags */\n  tags?: string[];\n}\n\n/**\n * Property definition for classes and interfaces\n */\nexport interface ApiProperty {\n  /** Property name */\n  name: string;\n  /** Property type */\n  type: string;\n  /** Property description */\n  description?: string;\n  /** Whether property is readonly */\n  readonly?: boolean;\n  /** Whether property is optional */\n  optional?: boolean;\n  /** Whether property is static */\n  isStatic?: boolean;\n  /** Access modifier */\n  accessibility?: 'public' | 'protected' | 'private';\n  /** Default value if any */\n  defaultValue?: string;\n}\n\n/**\n * Enum value definition\n */\nexport interface ApiEnumValue {\n  /** Enum key name */\n  name: string;\n  /** Enum value */\n  value: string | number;\n  /** Description of this enum value */\n  description?: string;\n}\n\n/**\n * Event definition\n */\nexport interface ApiEvent {\n  /** Event name */\n  name: string;\n  /** Event description */\n  description?: string;\n  /** Event data type */\n  dataType: string;\n  /** Event properties */\n  properties: ApiProperty[];\n  /** Usage example */\n  example?: string;\n}\n\n/**\n * Generic API element that covers all types\n */\nexport interface ApiElement {\n  /** Unique identifier */\n  id: string;\n  /** Element name */\n  name: string;\n  /** Element type */\n  type: ApiElementType;\n  /** Module this element belongs to */\n  module: MinecraftModule;\n  /** Element description */\n  description?: string;\n  /** Full TypeScript definition */\n  definition: string;\n  /** JSDoc comment block */\n  jsdoc?: string;\n  \n  // Type-specific properties\n  /** For enums: enum values */\n  enumValues?: ApiEnumValue[];\n  /** For classes/interfaces: properties */\n  properties?: ApiProperty[];\n  /** For classes/interfaces: methods */\n  methods?: ApiMethod[];\n  /** For functions: parameters */\n  parameters?: ApiParameter[];\n  /** For functions: return type */\n  returnType?: string;\n  /** For events: event data */\n  eventData?: ApiEvent;\n  /** For classes: parent class */\n  extends?: string;\n  /** For classes/interfaces: implemented interfaces */\n  implements?: string[];\n  /** For types: type definition */\n  typeDefinition?: string;\n  \n  // Categorization and search\n  /** Categories for organization */\n  categories: string[];\n  /** Tags for filtering */\n  tags: string[];\n  /** Keywords for search */\n  keywords: string[];\n  \n  // Usage and examples  \n  /** Code examples */\n  examples?: CodeExample[];\n  /** Related elements */\n  relatedElements?: string[];\n  \n  // Metadata\n  /** Whether this is deprecated */\n  deprecated?: boolean;\n  /** Deprecation message */\n  deprecationMessage?: string;\n  /** Whether this is experimental/preview */\n  experimental?: boolean;\n  /** Version introduced */\n  since?: string;\n  /** Stability level */\n  stability?: 'stable' | 'experimental' | 'deprecated';\n}\n\n/**\n * Code example with description\n */\nexport interface CodeExample {\n  /** Example title */\n  title: string;\n  /** Example description */\n  description?: string;\n  /** TypeScript code */\n  code: string;\n  /** Expected output or explanation */\n  output?: string;\n  /** Required imports */\n  imports?: string[];\n}\n\n/**\n * Module registry containing all elements for a module\n */\nexport interface ModuleRegistry {\n  /** Module identifier */\n  module: MinecraftModule;\n  /** Module version */\n  version: string;\n  /** Module description */\n  description?: string;\n  /** All elements in this module */\n  elements: ApiElement[];\n  /** Exports by type */\n  exports: {\n    enums: ApiElement[];\n    classes: ApiElement[];\n    interfaces: ApiElement[];\n    functions: ApiElement[];\n    types: ApiElement[];\n    constants: ApiElement[];\n    events: ApiElement[];\n  };\n}\n\n/**\n * Complete script registry containing all modules\n */\nexport interface ScriptRegistry {\n  /** Registry metadata */\n  metadata: {\n    /** Generation timestamp */\n    generatedAt: string;\n    /** Source file info */\n    sourceFile: string;\n    /** Total number of elements */\n    totalElements: number;\n    /** Modules included */\n    modules: MinecraftModule[];\n    /** Parser version */\n    parserVersion: string;\n  };\n  /** Registry data by module */\n  modules: Record<MinecraftModule, ModuleRegistry>;\n  /** Global index of all elements */\n  index: Record<string, ApiElement>;\n  /** Search categories */\n  categories: Record<string, string[]>; // category -> element ids\n  /** Tags index */\n  tags: Record<string, string[]>; // tag -> element ids\n}\n\n/**\n * Searchable index for UI consumption\n */\nexport interface SearchIndex {\n  /** All searchable elements */\n  elements: SearchableElement[];\n  /** Categories for filtering */\n  categories: Record<string, number>; // category -> count\n  /** Tags for filtering */\n  tags: Record<string, number>; // tag -> count\n  /** Modules for filtering */\n  modules: Record<MinecraftModule, number>; // module -> count\n  /** Element types for filtering */\n  types: Record<ApiElementType, number>; // type -> count\n}\n\n/**\n * Searchable element for UI\n */\nexport interface SearchableElement {\n  /** Element ID */\n  id: string;\n  /** Display name */\n  name: string;\n  /** Element type */\n  type: ApiElementType;\n  /** Module */\n  module: MinecraftModule;\n  /** Short description */\n  description?: string;\n  /** Categories */\n  categories: string[];\n  /** Tags */\n  tags: string[];\n  /** Search keywords */\n  keywords: string[];\n  /** Quick signature (for methods/functions) */\n  signature?: string;\n  /** Deprecation status */\n  deprecated?: boolean;\n  /** Experimental status */\n  experimental?: boolean;\n}\n\n/**\n * Filter options for searching the registry\n */\nexport interface SearchFilters {\n  /** Text query */\n  query?: string;\n  /** Filter by element type */\n  types?: ApiElementType[];\n  /** Filter by module */\n  modules?: MinecraftModule[];\n  /** Filter by categories */\n  categories?: string[];\n  /** Filter by tags */\n  tags?: string[];\n  /** Include deprecated elements */\n  includeDeprecated?: boolean;\n  /** Include experimental elements */\n  includeExperimental?: boolean;\n}\n\n/**\n * Search result\n */\nexport interface SearchResult {\n  /** Matching elements */\n  elements: SearchableElement[];\n  /** Total count */\n  total: number;\n  /** Applied filters */\n  filters: SearchFilters;\n  /** Available filter options based on results */\n  availableFilters: {\n    types: Record<ApiElementType, number>;\n    modules: Record<MinecraftModule, number>;\n    categories: Record<string, number>;\n    tags: Record<string, number>;\n  };\n}","size_bytes":7965},"client/src/hooks/useLayeredCanvas.ts":{"content":"import { useState, useCallback, useRef, useEffect } from 'react';\nimport { LayerManager, LayerData } from '@/lib/canvas/layers';\nimport { CanvasTool, BrushSettings, Point } from '@/lib/canvas/tools';\n\n// Throttling utility for performance\nfunction throttle<T extends (...args: any[]) => any>(func: T, delay: number): T {\n  let timeoutId: NodeJS.Timeout | null = null;\n  let lastExecTime = 0;\n  return ((...args: any[]) => {\n    const currentTime = Date.now();\n    \n    if (currentTime - lastExecTime > delay) {\n      func(...args);\n      lastExecTime = currentTime;\n    } else {\n      if (timeoutId) clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        func(...args);\n        lastExecTime = Date.now();\n      }, delay - (currentTime - lastExecTime));\n    }\n  }) as T;\n}\n\ninterface LayeredCanvasState {\n  textureWidth: number;\n  textureHeight: number;\n  displayScale: number;\n  layerManager: LayerManager | null;\n  history: LayerHistoryState[];\n  historyIndex: number;\n}\n\ninterface LayerHistoryState {\n  timestamp: number;\n  layersData: any[];\n  activeLayerId: string | null;\n}\n\nexport function useLayeredCanvas(initialWidth: number = 16, initialHeight: number = 16) {\n  const [state, setState] = useState<LayeredCanvasState>({\n    textureWidth: initialWidth,\n    textureHeight: initialHeight,\n    displayScale: 320 / Math.max(initialWidth, initialHeight), // Keep display at 320px\n    layerManager: null,\n    history: [],\n    historyIndex: -1\n  });\n\n  const displayCanvasRef = useRef<HTMLCanvasElement | null>(null);\n  const cursorCanvasRef = useRef<HTMLCanvasElement | null>(null);\n  const isDrawingRef = useRef(false);\n  const lastPointRef = useRef<Point | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n  const pendingUpdateRef = useRef(false);\n  const cleanupCallbacksRef = useRef<(() => void)[]>([]);\n  const currentMousePosRef = useRef<Point | null>(null);\n  const currentToolRef = useRef<CanvasTool>('pencil');\n  const currentBrushSettingsRef = useRef<BrushSettings>({ size: 4, opacity: 1, hardness: 1, color: '#000000' });\n\n  // Update display canvas with optimized rendering\n  const updateDisplay = useCallback(() => {\n    if (!displayCanvasRef.current || !state.layerManager) return;\n\n    const canvas = displayCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size only if it has changed (avoid unnecessary resize)\n    const displayWidth = state.textureWidth * state.displayScale;\n    const displayHeight = state.textureHeight * state.displayScale;\n    \n    if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n    }\n\n    // Clear and draw composite\n    ctx.clearRect(0, 0, displayWidth, displayHeight);\n    \n    // Disable anti-aliasing for pixel-perfect rendering\n    ctx.imageSmoothingEnabled = false;\n    \n    // Get composite from layer manager and scale it up\n    const composite = state.layerManager.getCompositeCanvas();\n    ctx.drawImage(composite, 0, 0, displayWidth, displayHeight);\n  }, [state.layerManager, state.textureWidth, state.textureHeight, state.displayScale]);\n  \n  // Optimized update display with requestAnimationFrame\n  const scheduleDisplayUpdate = useCallback(() => {\n    if (pendingUpdateRef.current) return;\n    \n    pendingUpdateRef.current = true;\n    animationFrameRef.current = requestAnimationFrame(() => {\n      updateDisplay();\n      pendingUpdateRef.current = false;\n    });\n  }, [updateDisplay]);\n\n  // Initialize LayerManager when dimensions change\n  useEffect(() => {\n    const manager = new LayerManager(state.textureWidth, state.textureHeight);\n    \n    // Subscribe to composite updates for automatic display refresh\n    const unsubscribe = manager.onCompositeUpdate(() => {\n      scheduleDisplayUpdate();\n    });\n    cleanupCallbacksRef.current.push(unsubscribe);\n    \n    setState(prev => ({ ...prev, layerManager: manager }));\n    \n    // Add initial history state\n    const initialHistory: LayerHistoryState = {\n      timestamp: Date.now(),\n      layersData: manager.exportLayers(),\n      activeLayerId: manager.getActiveLayer()?.id || null\n    };\n    \n    setState(prev => ({\n      ...prev,\n      history: [initialHistory],\n      historyIndex: 0\n    }));\n    \n    // Initial display update\n    scheduleDisplayUpdate();\n    \n    // Cleanup on unmount or size change\n    return () => {\n      cleanupCallbacksRef.current.forEach(cleanup => cleanup());\n      cleanupCallbacksRef.current = [];\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [state.textureWidth, state.textureHeight, scheduleDisplayUpdate]);\n  \n  // Update cursor outline\n  const updateCursorOutline = useCallback((mousePos: Point | null, tool: CanvasTool, settings: BrushSettings) => {\n    if (!cursorCanvasRef.current || !mousePos) return;\n\n    const canvas = cursorCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear previous cursor\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Convert display position to texture coordinates for accurate preview\n    const texturePos = displayToTexture(mousePos.x, mousePos.y);\n    const displayPos = textureToDisplay(texturePos.x, texturePos.y);\n\n    ctx.save();\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';\n    ctx.lineWidth = 1;\n    \n    // Add contrast outline for visibility against all backgrounds\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 2;\n\n    switch (tool) {\n      case 'pencil':\n        // Rectangular pixel preview\n        const pixelSize = state.displayScale;\n        ctx.strokeRect(displayPos.x, displayPos.y, pixelSize, pixelSize);\n        ctx.fillRect(displayPos.x, displayPos.y, pixelSize, pixelSize);\n        break;\n      \n      case 'brush':\n        // Larger rectangular brush preview\n        const brushPixelSize = Math.max(1, Math.floor(settings.size / 4));\n        const brushDisplaySize = brushPixelSize * state.displayScale;\n        const brushX = displayPos.x - (brushDisplaySize - state.displayScale) / 2;\n        const brushY = displayPos.y - (brushDisplaySize - state.displayScale) / 2;\n        ctx.strokeRect(brushX, brushY, brushDisplaySize, brushDisplaySize);\n        ctx.fillRect(brushX, brushY, brushDisplaySize, brushDisplaySize);\n        break;\n      \n      case 'eraser':\n        // Circular eraser preview\n        const eraserSize = Math.max(1, Math.floor(settings.size / 4)) * state.displayScale;\n        ctx.beginPath();\n        ctx.arc(displayPos.x + state.displayScale / 2, displayPos.y + state.displayScale / 2, eraserSize / 2, 0, Math.PI * 2);\n        ctx.stroke();\n        ctx.fill();\n        break;\n      \n      case 'fill':\n        // Bucket icon preview\n        const bucketSize = state.displayScale;\n        ctx.strokeRect(displayPos.x, displayPos.y, bucketSize, bucketSize);\n        ctx.fillRect(displayPos.x, displayPos.y, bucketSize, bucketSize);\n        break;\n      \n      case 'rectangle':\n      case 'circle':\n      case 'line':\n        // Crosshair for shape tools\n        const crosshairSize = state.displayScale * 2;\n        const centerX = displayPos.x + state.displayScale / 2;\n        const centerY = displayPos.y + state.displayScale / 2;\n        \n        ctx.beginPath();\n        ctx.moveTo(centerX - crosshairSize / 2, centerY);\n        ctx.lineTo(centerX + crosshairSize / 2, centerY);\n        ctx.moveTo(centerX, centerY - crosshairSize / 2);\n        ctx.lineTo(centerX, centerY + crosshairSize / 2);\n        ctx.stroke();\n        break;\n      \n      case 'select':\n        // Selection cursor\n        const selectSize = state.displayScale;\n        ctx.strokeStyle = 'rgba(0, 120, 255, 0.8)';\n        ctx.setLineDash([2, 2]);\n        ctx.strokeRect(displayPos.x, displayPos.y, selectSize, selectSize);\n        break;\n    }\n    \n    ctx.restore();\n  }, [state.displayScale, displayToTexture, textureToDisplay]);\n  \n  // Throttled cursor update for performance\n  const throttledCursorUpdate = useCallback(\n    throttle((mousePos: Point, tool: CanvasTool, settings: BrushSettings) => {\n      updateCursorOutline(mousePos, tool, settings);\n    }, 16), // ~60 FPS\n    [updateCursorOutline]\n  );\n\n  // Add to history\n  const addToHistory = useCallback(() => {\n    if (!state.layerManager) return;\n\n    const historyState: LayerHistoryState = {\n      timestamp: Date.now(),\n      layersData: state.layerManager.exportLayers(),\n      activeLayerId: state.layerManager.getActiveLayer()?.id || null\n    };\n\n    setState(prev => {\n      const newHistory = prev.history.slice(0, prev.historyIndex + 1);\n      newHistory.push(historyState);\n      \n      // Keep only last 50 states\n      if (newHistory.length > 50) {\n        newHistory.shift();\n      }\n\n      return {\n        ...prev,\n        history: newHistory,\n        historyIndex: newHistory.length - 1\n      };\n    });\n  }, [state.layerManager]);\n\n  // Convert display coordinates to texture coordinates\n  const displayToTexture = useCallback((displayX: number, displayY: number): Point => {\n    return {\n      x: Math.floor(displayX / state.displayScale),\n      y: Math.floor(displayY / state.displayScale)\n    };\n  }, [state.displayScale]);\n\n  // Convert texture coordinates to display coordinates\n  const textureToDisplay = useCallback((textureX: number, textureY: number): Point => {\n    return {\n      x: textureX * state.displayScale,\n      y: textureY * state.displayScale\n    };\n  }, [state.displayScale]);\n\n  // Draw pixel-perfect on active layer\n  const drawOnActiveLayer = useCallback((texturePoint: Point, tool: CanvasTool, settings: BrushSettings) => {\n    if (!state.layerManager) return;\n\n    const activeLayer = state.layerManager.getActiveLayer();\n    if (!activeLayer || !activeLayer.canvas) return;\n\n    const ctx = activeLayer.canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Disable anti-aliasing for pixel-perfect drawing\n    ctx.imageSmoothingEnabled = false;\n\n    switch (tool) {\n      case 'pencil':\n        // Pixel-perfect rectangular brush\n        drawPixelRectangle(ctx, texturePoint, 1, settings.color, settings.opacity);\n        break;\n      \n      case 'brush':\n        // Larger rectangular brush based on size\n        const brushSize = Math.max(1, Math.floor(settings.size / 4)); // Scale brush size for texture\n        drawPixelRectangle(ctx, texturePoint, brushSize, settings.color, settings.opacity);\n        break;\n      \n      case 'eraser':\n        erasePixelRectangle(ctx, texturePoint, Math.max(1, Math.floor(settings.size / 4)));\n        break;\n      \n      case 'fill':\n        floodFill(ctx, texturePoint, settings.color, state.textureWidth, state.textureHeight);\n        break;\n      \n      case 'rectangle':\n        // This will be handled differently for shape tools\n        break;\n      \n      case 'circle':\n        // This will be handled differently for shape tools\n        break;\n    }\n\n    // Display update is now handled by layer manager callbacks\n  }, [state.layerManager, state.textureWidth, state.textureHeight]);\n\n  // Draw filled shapes\n  const drawShape = useCallback((startPoint: Point, endPoint: Point, tool: CanvasTool, settings: BrushSettings, filled: boolean = true) => {\n    if (!state.layerManager) return;\n\n    const activeLayer = state.layerManager.getActiveLayer();\n    if (!activeLayer || !activeLayer.canvas) return;\n\n    const ctx = activeLayer.canvas.getContext('2d');\n    if (!ctx) return;\n\n    ctx.save();\n    ctx.imageSmoothingEnabled = false;\n    ctx.globalAlpha = settings.opacity;\n\n    if (tool === 'rectangle') {\n      const width = endPoint.x - startPoint.x;\n      const height = endPoint.y - startPoint.y;\n      \n      if (filled) {\n        ctx.fillStyle = settings.color;\n        ctx.fillRect(startPoint.x, startPoint.y, width, height);\n      } else {\n        ctx.strokeStyle = settings.color;\n        ctx.lineWidth = 1;\n        ctx.strokeRect(startPoint.x, startPoint.y, width, height);\n      }\n    } else if (tool === 'circle') {\n      const centerX = (startPoint.x + endPoint.x) / 2;\n      const centerY = (startPoint.y + endPoint.y) / 2;\n      const radius = Math.sqrt(\n        Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2)\n      ) / 2;\n\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      \n      if (filled) {\n        ctx.fillStyle = settings.color;\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = settings.color;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n    } else if (tool === 'line') {\n      ctx.strokeStyle = settings.color;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.moveTo(startPoint.x, startPoint.y);\n      ctx.lineTo(endPoint.x, endPoint.y);\n      ctx.stroke();\n    }\n\n    ctx.restore();\n    // Display update is now handled by layer manager callbacks\n  }, [state.layerManager]);\n\n  // Helper function to draw pixel-perfect rectangles\n  const drawPixelRectangle = (ctx: CanvasRenderingContext2D, center: Point, size: number, color: string, opacity: number) => {\n    ctx.save();\n    ctx.globalAlpha = opacity;\n    ctx.fillStyle = color;\n    \n    const halfSize = Math.floor(size / 2);\n    const x = center.x - halfSize;\n    const y = center.y - halfSize;\n    \n    ctx.fillRect(x, y, size, size);\n    ctx.restore();\n  };\n\n  // Helper function to erase pixel-perfect rectangles\n  const erasePixelRectangle = (ctx: CanvasRenderingContext2D, center: Point, size: number) => {\n    ctx.save();\n    ctx.globalCompositeOperation = 'destination-out';\n    \n    const halfSize = Math.floor(size / 2);\n    const x = center.x - halfSize;\n    const y = center.y - halfSize;\n    \n    ctx.fillRect(x, y, size, size);\n    ctx.restore();\n  };\n\n  // Pixel-perfect flood fill\n  const floodFill = (ctx: CanvasRenderingContext2D, startPoint: Point, fillColor: string, width: number, height: number) => {\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    const startIndex = (startPoint.y * width + startPoint.x) * 4;\n    \n    const startR = data[startIndex];\n    const startG = data[startIndex + 1];\n    const startB = data[startIndex + 2];\n    const startA = data[startIndex + 3];\n    \n    // Convert fill color to RGB\n    const fillRGB = hexToRgb(fillColor);\n    if (!fillRGB) return;\n    \n    // Check if we're trying to fill with the same color\n    if (startR === fillRGB.r && startG === fillRGB.g && startB === fillRGB.b) {\n      return;\n    }\n    \n    const pixelStack = [startPoint.x, startPoint.y];\n    const visitedPixels = new Set<string>();\n    \n    while (pixelStack.length > 0) {\n      const y = pixelStack.pop()!;\n      const x = pixelStack.pop()!;\n      \n      if (x < 0 || x >= width || y < 0 || y >= height) continue;\n      \n      const pixelKey = `${x},${y}`;\n      if (visitedPixels.has(pixelKey)) continue;\n      visitedPixels.add(pixelKey);\n      \n      const index = (y * width + x) * 4;\n      \n      if (data[index] === startR && data[index + 1] === startG && \n          data[index + 2] === startB && data[index + 3] === startA) {\n        \n        // Fill this pixel\n        data[index] = fillRGB.r;\n        data[index + 1] = fillRGB.g;\n        data[index + 2] = fillRGB.b;\n        data[index + 3] = 255;\n        \n        // Add neighboring pixels to stack\n        pixelStack.push(x + 1, y);\n        pixelStack.push(x - 1, y);\n        pixelStack.push(x, y + 1);\n        pixelStack.push(x, y - 1);\n      }\n    }\n    \n    ctx.putImageData(imageData, 0, 0);\n  };\n\n  // Utility function\n  const hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  };\n\n  // Initialize cursor canvas\n  const initializeCursorCanvas = useCallback((canvas: HTMLCanvasElement) => {\n    cursorCanvasRef.current = canvas;\n    \n    // Set initial size\n    const displayWidth = state.textureWidth * state.displayScale;\n    const displayHeight = state.textureHeight * state.displayScale;\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }, [state.textureWidth, state.textureHeight, state.displayScale]);\n  \n  // Handle mouse move for cursor outline\n  const updateCursorPosition = useCallback((displayPoint: Point, tool: CanvasTool, settings: BrushSettings) => {\n    currentMousePosRef.current = displayPoint;\n    currentToolRef.current = tool;\n    currentBrushSettingsRef.current = settings;\n    throttledCursorUpdate(displayPoint, tool, settings);\n  }, [throttledCursorUpdate]);\n  \n  // Handle mouse enter/leave for cursor visibility\n  const showCursor = useCallback((tool: CanvasTool, settings: BrushSettings) => {\n    if (currentMousePosRef.current) {\n      updateCursorOutline(currentMousePosRef.current, tool, settings);\n    }\n  }, [updateCursorOutline]);\n  \n  const hideCursor = useCallback(() => {\n    if (cursorCanvasRef.current) {\n      const ctx = cursorCanvasRef.current.getContext('2d');\n      if (ctx) {\n        ctx.clearRect(0, 0, cursorCanvasRef.current.width, cursorCanvasRef.current.height);\n      }\n    }\n  }, []);\n\n  // Public API\n  const initializeCanvas = useCallback((canvas: HTMLCanvasElement) => {\n    displayCanvasRef.current = canvas;\n    updateDisplay();\n  }, [updateDisplay]);\n\n  const startDrawing = useCallback((displayPoint: Point, tool: CanvasTool, settings: BrushSettings) => {\n    isDrawingRef.current = true;\n    const texturePoint = displayToTexture(displayPoint.x, displayPoint.y);\n    lastPointRef.current = texturePoint;\n    \n    drawOnActiveLayer(texturePoint, tool, settings);\n  }, [displayToTexture, drawOnActiveLayer]);\n\n  const continueDrawing = useCallback((displayPoint: Point, tool: CanvasTool, settings: BrushSettings) => {\n    if (!isDrawingRef.current || !lastPointRef.current) return;\n    \n    const texturePoint = displayToTexture(displayPoint.x, displayPoint.y);\n    \n    // For continuous tools like brush and pencil, draw a line of pixels\n    if (tool === 'brush' || tool === 'pencil') {\n      drawLineBetweenPoints(lastPointRef.current, texturePoint, tool, settings);\n    }\n    \n    lastPointRef.current = texturePoint;\n  }, [displayToTexture]);\n\n  const drawLineBetweenPoints = useCallback((from: Point, to: Point, tool: CanvasTool, settings: BrushSettings) => {\n    const dx = Math.abs(to.x - from.x);\n    const dy = Math.abs(to.y - from.y);\n    const steps = Math.max(dx, dy);\n    \n    if (steps === 0) return;\n    \n    for (let i = 0; i <= steps; i++) {\n      const t = i / steps;\n      const x = Math.round(from.x + (to.x - from.x) * t);\n      const y = Math.round(from.y + (to.y - from.y) * t);\n      drawOnActiveLayer({ x, y }, tool, settings);\n    }\n  }, [drawOnActiveLayer]);\n\n  const endDrawing = useCallback(() => {\n    if (isDrawingRef.current) {\n      isDrawingRef.current = false;\n      lastPointRef.current = null;\n      addToHistory();\n    }\n  }, [addToHistory]);\n\n  const resizeCanvas = useCallback((width: number, height: number) => {\n    setState(prev => ({\n      ...prev,\n      textureWidth: width,\n      textureHeight: height,\n      displayScale: 320 / Math.max(width, height)\n    }));\n  }, []);\n\n  const undo = useCallback(() => {\n    if (state.historyIndex > 0 && state.layerManager) {\n      const newIndex = state.historyIndex - 1;\n      const historyState = state.history[newIndex];\n      \n      state.layerManager.importLayers(historyState.layersData);\n      if (historyState.activeLayerId) {\n        state.layerManager.setActiveLayer(historyState.activeLayerId);\n      }\n      \n      setState(prev => ({ ...prev, historyIndex: newIndex }));\n      scheduleDisplayUpdate();\n    }\n  }, [state.historyIndex, state.history, state.layerManager, scheduleDisplayUpdate]);\n\n  const redo = useCallback(() => {\n    if (state.historyIndex < state.history.length - 1 && state.layerManager) {\n      const newIndex = state.historyIndex + 1;\n      const historyState = state.history[newIndex];\n      \n      state.layerManager.importLayers(historyState.layersData);\n      if (historyState.activeLayerId) {\n        state.layerManager.setActiveLayer(historyState.activeLayerId);\n      }\n      \n      setState(prev => ({ ...prev, historyIndex: newIndex }));\n      scheduleDisplayUpdate();\n    }\n  }, [state.historyIndex, state.history, state.layerManager, scheduleDisplayUpdate]);\n\n  const exportTexture = useCallback(async (): Promise<Blob | null> => {\n    if (!state.layerManager) return null;\n    \n    const flattened = state.layerManager.flattenImage();\n    \n    return new Promise((resolve) => {\n      flattened.toBlob((blob) => {\n        resolve(blob);\n      }, 'image/png');\n    });\n  }, [state.layerManager]);\n\n  return {\n    // Canvas management\n    initializeCanvas,\n    updateDisplay,\n    \n    // Drawing operations\n    startDrawing,\n    continueDrawing,\n    endDrawing,\n    drawShape,\n    \n    // Layer management\n    layerManager: state.layerManager,\n    \n    // Canvas state\n    textureWidth: state.textureWidth,\n    textureHeight: state.textureHeight,\n    displayScale: state.displayScale,\n    \n    // History\n    canUndo: state.historyIndex > 0,\n    canRedo: state.historyIndex < state.history.length - 1,\n    undo,\n    redo,\n    \n    // Utilities\n    displayToTexture,\n    textureToDisplay,\n    resizeCanvas,\n    exportTexture,\n    \n    // Cursor system\n    initializeCursorCanvas,\n    updateCursorPosition,\n    showCursor,\n    hideCursor\n  };\n}","size_bytes":21571},"client/src/components/Common/ComponentForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Minus, Info, AlertCircle, Check, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\n\nexport interface ComponentProperty {\n  name: string;\n  type: 'number' | 'boolean' | 'string' | 'array' | 'object' | 'range' | 'vector3' | 'material' | 'filter' | 'condition' | 'effect';\n  description: string;\n  required?: boolean;\n  default?: any;\n  min?: number;\n  max?: number;\n  options?: string[];\n  example?: any;\n}\n\nexport interface ComponentDefinition {\n  name: string;\n  description: string;\n  category: string;\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: ComponentProperty[];\n  example: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n  dependencies?: string[];\n  conflicts?: string[];\n}\n\ninterface ComponentFormProps {\n  component: ComponentDefinition;\n  initialValues?: Record<string, any>;\n  onSubmit: (values: Record<string, any>) => void;\n  onCancel?: () => void;\n  isEditing?: boolean;\n  showExample?: boolean;\n  className?: string;\n}\n\nexport default function ComponentForm({\n  component,\n  initialValues = {},\n  onSubmit,\n  onCancel,\n  isEditing = false,\n  showExample = true,\n  className = \"\"\n}: ComponentFormProps) {\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  \n  // Generate Zod schema from component properties\n  const generateSchema = (properties: ComponentProperty[]) => {\n    const schemaFields: Record<string, z.ZodTypeAny> = {};\n    \n    properties.forEach(prop => {\n      let fieldSchema: z.ZodTypeAny;\n      \n      switch (prop.type) {\n        case 'number':\n          fieldSchema = z.number();\n          if (prop.min !== undefined) fieldSchema = fieldSchema.min(prop.min);\n          if (prop.max !== undefined) fieldSchema = fieldSchema.max(prop.max);\n          break;\n          \n        case 'boolean':\n          fieldSchema = z.boolean();\n          break;\n          \n        case 'string':\n          fieldSchema = z.string();\n          if (prop.options) {\n            fieldSchema = z.enum(prop.options as [string, ...string[]]);\n          }\n          break;\n          \n        case 'range':\n          fieldSchema = z.object({\n            min: z.number(),\n            max: z.number()\n          });\n          break;\n          \n        case 'vector3':\n          fieldSchema = z.object({\n            x: z.number(),\n            y: z.number(),\n            z: z.number()\n          });\n          break;\n          \n        case 'array':\n          fieldSchema = z.array(z.any());\n          break;\n          \n        case 'object':\n          fieldSchema = z.record(z.any());\n          break;\n          \n        default:\n          fieldSchema = z.any();\n      }\n      \n      if (!prop.required) {\n        fieldSchema = fieldSchema.optional();\n      }\n      \n      schemaFields[prop.name] = fieldSchema;\n    });\n    \n    return z.object(schemaFields);\n  };\n\n  const schema = generateSchema(component.properties);\n  \n  // Generate default values from component properties\n  const getDefaultValues = () => {\n    const defaults: Record<string, any> = { ...initialValues };\n    \n    component.properties.forEach(prop => {\n      if (defaults[prop.name] === undefined && prop.default !== undefined) {\n        defaults[prop.name] = prop.default;\n      } else if (defaults[prop.name] === undefined) {\n        switch (prop.type) {\n          case 'number':\n            defaults[prop.name] = prop.min ?? 0;\n            break;\n          case 'boolean':\n            defaults[prop.name] = false;\n            break;\n          case 'string':\n            defaults[prop.name] = prop.options?.[0] ?? '';\n            break;\n          case 'range':\n            defaults[prop.name] = { min: prop.min ?? 0, max: prop.max ?? 1 };\n            break;\n          case 'vector3':\n            defaults[prop.name] = { x: 0, y: 0, z: 0 };\n            break;\n          case 'array':\n            defaults[prop.name] = [];\n            break;\n          case 'object':\n            defaults[prop.name] = {};\n            break;\n        }\n      }\n    });\n    \n    return defaults;\n  };\n\n  const form = useForm({\n    resolver: zodResolver(schema),\n    defaultValues: getDefaultValues()\n  });\n\n  const handleSubmit = (values: Record<string, any>) => {\n    // Clean up undefined and empty values\n    const cleanedValues = Object.entries(values).reduce((acc, [key, value]) => {\n      if (value !== undefined && value !== '' && !(Array.isArray(value) && value.length === 0)) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {} as Record<string, any>);\n    \n    onSubmit(cleanedValues);\n  };\n\n  const renderPropertyField = (property: ComponentProperty) => {\n    const isAdvanced = property.name.startsWith('_') || \n                      component.difficulty === 'advanced' && \n                      !['name', 'value', 'enabled', 'priority'].includes(property.name);\n\n    if (isAdvanced && !showAdvanced) return null;\n\n    return (\n      <FormField\n        key={property.name}\n        control={form.control}\n        name={property.name}\n        render={({ field }) => (\n          <FormItem className=\"space-y-2\" data-testid={`form-field-${property.name}`}>\n            <FormLabel className=\"flex items-center gap-2\">\n              {property.name}\n              {property.required && <span className=\"text-red-500\">*</span>}\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Info className=\"w-3 h-3 text-muted-foreground cursor-help\" />\n                </TooltipTrigger>\n                <TooltipContent side=\"right\" className=\"max-w-xs\">\n                  <div className=\"space-y-1 text-xs\">\n                    <p><strong>Description:</strong> {property.description}</p>\n                    <p><strong>Type:</strong> {property.type}</p>\n                    {property.min !== undefined && <p><strong>Min:</strong> {property.min}</p>}\n                    {property.max !== undefined && <p><strong>Max:</strong> {property.max}</p>}\n                    {property.example !== undefined && (\n                      <p><strong>Example:</strong> {JSON.stringify(property.example)}</p>\n                    )}\n                  </div>\n                </TooltipContent>\n              </Tooltip>\n            </FormLabel>\n            \n            <FormControl>\n              {renderFieldInput(property, field)}\n            </FormControl>\n            \n            {property.description && (\n              <FormDescription className=\"text-xs\">{property.description}</FormDescription>\n            )}\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n    );\n  };\n\n  const renderFieldInput = (property: ComponentProperty, field: any) => {\n    switch (property.type) {\n      case 'boolean':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              checked={field.value}\n              onCheckedChange={field.onChange}\n              data-testid={`switch-${property.name}`}\n            />\n            <Label className=\"text-sm\">{field.value ? 'Enabled' : 'Disabled'}</Label>\n          </div>\n        );\n\n      case 'number':\n        if (property.min !== undefined && property.max !== undefined && (property.max - property.min) <= 100) {\n          // Use slider for small ranges\n          return (\n            <div className=\"space-y-2\">\n              <Slider\n                value={[field.value]}\n                onValueChange={(values) => field.onChange(values[0])}\n                min={property.min}\n                max={property.max}\n                step={1}\n                className=\"w-full\"\n                data-testid={`slider-${property.name}`}\n              />\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\n                <span>{property.min}</span>\n                <span className=\"font-medium\">{field.value}</span>\n                <span>{property.max}</span>\n              </div>\n            </div>\n          );\n        } else {\n          return (\n            <Input\n              type=\"number\"\n              {...field}\n              min={property.min}\n              max={property.max}\n              placeholder={property.example?.toString() || '0'}\n              data-testid={`input-${property.name}`}\n            />\n          );\n        }\n\n      case 'string':\n        if (property.options && property.options.length > 0) {\n          return (\n            <Select value={field.value} onValueChange={field.onChange}>\n              <SelectTrigger data-testid={`select-${property.name}`}>\n                <SelectValue placeholder=\"Select an option...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {property.options.map(option => (\n                  <SelectItem key={option} value={option}>{option}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          );\n        } else if (property.description.includes('multiline') || property.name.includes('description')) {\n          return (\n            <Textarea\n              {...field}\n              placeholder={property.example?.toString() || ''}\n              rows={3}\n              data-testid={`textarea-${property.name}`}\n            />\n          );\n        } else {\n          return (\n            <Input\n              {...field}\n              placeholder={property.example?.toString() || ''}\n              data-testid={`input-${property.name}`}\n            />\n          );\n        }\n\n      case 'range':\n        return (\n          <div className=\"space-y-2\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <Label className=\"text-xs\">Min</Label>\n                <Input\n                  type=\"number\"\n                  value={field.value?.min || 0}\n                  onChange={(e) => field.onChange({ ...field.value, min: parseFloat(e.target.value) })}\n                  data-testid={`input-${property.name}-min`}\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs\">Max</Label>\n                <Input\n                  type=\"number\"\n                  value={field.value?.max || 1}\n                  onChange={(e) => field.onChange({ ...field.value, max: parseFloat(e.target.value) })}\n                  data-testid={`input-${property.name}-max`}\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'vector3':\n        return (\n          <div className=\"space-y-2\">\n            <div className=\"grid grid-cols-3 gap-2\">\n              <div>\n                <Label className=\"text-xs\">X</Label>\n                <Input\n                  type=\"number\"\n                  value={field.value?.x || 0}\n                  onChange={(e) => field.onChange({ ...field.value, x: parseFloat(e.target.value) })}\n                  data-testid={`input-${property.name}-x`}\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs\">Y</Label>\n                <Input\n                  type=\"number\"\n                  value={field.value?.y || 0}\n                  onChange={(e) => field.onChange({ ...field.value, y: parseFloat(e.target.value) })}\n                  data-testid={`input-${property.name}-y`}\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs\">Z</Label>\n                <Input\n                  type=\"number\"\n                  value={field.value?.z || 0}\n                  onChange={(e) => field.onChange({ ...field.value, z: parseFloat(e.target.value) })}\n                  data-testid={`input-${property.name}-z`}\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'array':\n        return <ArrayFieldEditor property={property} field={field} />;\n\n      case 'object':\n        return <ObjectFieldEditor property={property} field={field} />;\n\n      default:\n        return (\n          <Input\n            {...field}\n            placeholder={property.example?.toString() || ''}\n            data-testid={`input-${property.name}`}\n          />\n        );\n    }\n  };\n\n  // Separate components for complex field types\n  const ArrayFieldEditor = ({ property, field }: { property: ComponentProperty; field: any }) => {\n    const { fields, append, remove } = useFieldArray({\n      control: form.control,\n      name: property.name\n    });\n\n    return (\n      <div className=\"space-y-2\">\n        {fields.map((item, index) => (\n          <div key={item.id} className=\"flex items-center gap-2\">\n            <Input\n              value={field.value?.[index] || ''}\n              onChange={(e) => {\n                const newArray = [...(field.value || [])];\n                newArray[index] = e.target.value;\n                field.onChange(newArray);\n              }}\n              placeholder={`Item ${index + 1}`}\n              data-testid={`input-${property.name}-${index}`}\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => remove(index)}\n              data-testid={`button-remove-${property.name}-${index}`}\n            >\n              <Minus className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        ))}\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => append('')}\n          data-testid={`button-add-${property.name}`}\n        >\n          <Plus className=\"w-3 h-3 mr-1\" />\n          Add Item\n        </Button>\n      </div>\n    );\n  };\n\n  const ObjectFieldEditor = ({ property, field }: { property: ComponentProperty; field: any }) => {\n    const [newKey, setNewKey] = useState('');\n    const [newValue, setNewValue] = useState('');\n    \n    const addProperty = () => {\n      if (newKey && newValue) {\n        field.onChange({\n          ...field.value,\n          [newKey]: newValue\n        });\n        setNewKey('');\n        setNewValue('');\n      }\n    };\n\n    const removeProperty = (key: string) => {\n      const newObj = { ...field.value };\n      delete newObj[key];\n      field.onChange(newObj);\n    };\n\n    return (\n      <div className=\"space-y-2\">\n        {Object.entries(field.value || {}).map(([key, value]) => (\n          <div key={key} className=\"flex items-center gap-2\">\n            <Input value={key} disabled className=\"flex-1\" />\n            <Input\n              value={value as string}\n              onChange={(e) => field.onChange({ ...field.value, [key]: e.target.value })}\n              className=\"flex-1\"\n              data-testid={`input-${property.name}-${key}`}\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => removeProperty(key)}\n              data-testid={`button-remove-${property.name}-${key}`}\n            >\n              <Minus className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        ))}\n        <div className=\"flex items-center gap-2\">\n          <Input\n            value={newKey}\n            onChange={(e) => setNewKey(e.target.value)}\n            placeholder=\"Property name\"\n            className=\"flex-1\"\n            data-testid={`input-${property.name}-new-key`}\n          />\n          <Input\n            value={newValue}\n            onChange={(e) => setNewValue(e.target.value)}\n            placeholder=\"Value\"\n            className=\"flex-1\"\n            data-testid={`input-${property.name}-new-value`}\n          />\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={addProperty}\n            disabled={!newKey || !newValue}\n            data-testid={`button-add-${property.name}-property`}\n          >\n            <Plus className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  const basicProperties = component.properties.filter(prop => \n    !prop.name.startsWith('_') && \n    (component.difficulty !== 'advanced' || ['name', 'value', 'enabled', 'priority'].includes(prop.name))\n  );\n  \n  const advancedProperties = component.properties.filter(prop =>\n    prop.name.startsWith('_') || \n    (component.difficulty === 'advanced' && !['name', 'value', 'enabled', 'priority'].includes(prop.name))\n  );\n\n  return (\n    <TooltipProvider>\n      <Card className={`component-form ${className}`} data-testid={`component-form-${component.name}`}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <span className=\"text-base\">{component.name}</span>\n            <Badge className={`text-xs ${\n              component.stability === 'stable' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :\n              component.stability === 'beta' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300' :\n              'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'\n            }`}>\n              {component.stability}\n            </Badge>\n          </CardTitle>\n          <CardDescription className=\"text-sm\">{component.description}</CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n              {/* Basic Properties */}\n              {basicProperties.length > 0 && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-sm\">Basic Settings</h4>\n                  {basicProperties.map(renderPropertyField)}\n                </div>\n              )}\n\n              {/* Advanced Properties */}\n              {advancedProperties.length > 0 && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium text-sm\">Advanced Settings</h4>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setShowAdvanced(!showAdvanced)}\n                      data-testid=\"button-toggle-advanced\"\n                    >\n                      {showAdvanced ? 'Hide' : 'Show'} Advanced ({advancedProperties.length})\n                    </Button>\n                  </div>\n                  {showAdvanced && advancedProperties.map(renderPropertyField)}\n                </div>\n              )}\n\n              {/* Example */}\n              {showExample && (\n                <Accordion type=\"single\" collapsible>\n                  <AccordionItem value=\"example\">\n                    <AccordionTrigger className=\"text-sm\" data-testid=\"accordion-example\">\n                      View Example JSON\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <pre className=\"text-xs bg-muted p-3 rounded overflow-x-auto\">\n                        {component.example}\n                      </pre>\n                    </AccordionContent>\n                  </AccordionItem>\n                </Accordion>\n              )}\n\n              {/* Form Actions */}\n              <div className=\"flex items-center gap-3 pt-4 border-t\">\n                <Button type=\"submit\" data-testid=\"button-save-component\">\n                  <Check className=\"w-4 h-4 mr-2\" />\n                  {isEditing ? 'Update Component' : 'Add Component'}\n                </Button>\n                {onCancel && (\n                  <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel-component\">\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Cancel\n                  </Button>\n                )}\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </TooltipProvider>\n  );\n}","size_bytes":20768},"client/src/components/Common/ComponentSelector.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Search, Plus, Filter, Info, Zap, Settings, AlertTriangle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nexport interface ComponentItem {\n  name: string;\n  description: string;\n  category: string;\n  subcategory?: string;\n  version: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  properties: any[];\n  example: string;\n  keywords: string[];\n  stability: 'stable' | 'experimental' | 'beta';\n  dependencies?: string[];\n  conflicts?: string[];\n}\n\ninterface ComponentSelectorProps {\n  components: ComponentItem[];\n  selectedComponents: string[];\n  onAddComponent: (componentName: string) => void;\n  onRemoveComponent?: (componentName: string) => void;\n  title?: string;\n  description?: string;\n  maxComponents?: number;\n  showCategories?: boolean;\n  showCompatibility?: boolean;\n}\n\nexport default function ComponentSelector({\n  components,\n  selectedComponents,\n  onAddComponent,\n  onRemoveComponent,\n  title = \"Component Selector\",\n  description = \"Choose components to add to your build\",\n  maxComponents,\n  showCategories = true,\n  showCompatibility = true\n}: ComponentSelectorProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedDifficulty, setSelectedDifficulty] = useState<string>(\"all\");\n  const [selectedStability, setSelectedStability] = useState<string>(\"all\");\n  const [activeTab, setActiveTab] = useState(\"browse\");\n\n  // Group components by category\n  const categories = useMemo(() => {\n    const cats = Array.from(new Set(components.map(c => c.category)));\n    return cats.sort();\n  }, [components]);\n\n  // Filter components based on search and filters\n  const filteredComponents = useMemo(() => {\n    return components.filter(component => {\n      const matchesSearch = \n        component.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        component.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        component.keywords.some(k => k.toLowerCase().includes(searchTerm.toLowerCase()));\n      \n      const matchesCategory = selectedCategory === \"all\" || component.category === selectedCategory;\n      const matchesDifficulty = selectedDifficulty === \"all\" || component.difficulty === selectedDifficulty;\n      const matchesStability = selectedStability === \"all\" || component.stability === selectedStability;\n      \n      return matchesSearch && matchesCategory && matchesDifficulty && matchesStability;\n    });\n  }, [components, searchTerm, selectedCategory, selectedDifficulty, selectedStability]);\n\n  // Group filtered components by category\n  const componentsByCategory = useMemo(() => {\n    const grouped: Record<string, ComponentItem[]> = {};\n    filteredComponents.forEach(component => {\n      if (!grouped[component.category]) {\n        grouped[component.category] = [];\n      }\n      grouped[component.category].push(component);\n    });\n    return grouped;\n  }, [filteredComponents]);\n\n  // Check component compatibility\n  const checkCompatibility = (component: ComponentItem) => {\n    if (!showCompatibility) return { compatible: true, issues: [] };\n    \n    const issues: string[] = [];\n    const selectedComponentObjects = components.filter(c => selectedComponents.includes(c.name));\n    \n    // Check conflicts\n    if (component.conflicts) {\n      const conflictingSelected = component.conflicts.filter(conflict => \n        selectedComponents.includes(conflict)\n      );\n      if (conflictingSelected.length > 0) {\n        issues.push(`Conflicts with: ${conflictingSelected.join(', ')}`);\n      }\n    }\n    \n    // Check dependencies\n    if (component.dependencies) {\n      const missingDeps = component.dependencies.filter(dep => \n        !selectedComponents.includes(dep)\n      );\n      if (missingDeps.length > 0) {\n        issues.push(`Requires: ${missingDeps.join(', ')}`);\n      }\n    }\n    \n    // Check for reverse conflicts\n    selectedComponentObjects.forEach(selected => {\n      if (selected.conflicts?.includes(component.name)) {\n        issues.push(`Conflicts with selected: ${selected.name}`);\n      }\n    });\n    \n    return {\n      compatible: issues.length === 0,\n      issues\n    };\n  };\n\n  const getDifficultyIcon = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return <Zap className=\"w-3 h-3 text-green-500\" />;\n      case 'intermediate': return <Settings className=\"w-3 h-3 text-yellow-500\" />;\n      case 'advanced': return <AlertTriangle className=\"w-3 h-3 text-red-500\" />;\n      default: return null;\n    }\n  };\n\n  const getStabilityColor = (stability: string) => {\n    switch (stability) {\n      case 'stable': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'beta': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'experimental': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const isComponentSelected = (componentName: string) => selectedComponents.includes(componentName);\n  const canAddMore = !maxComponents || selectedComponents.length < maxComponents;\n\n  return (\n    <TooltipProvider>\n      <Card className=\"component-selector\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"w-5 h-5\" />\n            {title}\n          </CardTitle>\n          <CardDescription>{description}</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"browse\" data-testid=\"tab-browse\">Browse Components</TabsTrigger>\n              <TabsTrigger value=\"selected\" data-testid=\"tab-selected\">\n                Selected ({selectedComponents.length})\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"browse\" className=\"space-y-4\">\n              {/* Search and Filters */}\n              <div className=\"space-y-3\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search components...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-8\"\n                    data-testid=\"input-search-components\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                  {showCategories && (\n                    <div>\n                      <Label htmlFor=\"category-filter\">Category</Label>\n                      <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                        <SelectTrigger id=\"category-filter\" data-testid=\"select-category\">\n                          <SelectValue placeholder=\"All Categories\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Categories</SelectItem>\n                          {categories.map(category => (\n                            <SelectItem key={category} value={category}>{category}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                  \n                  <div>\n                    <Label htmlFor=\"difficulty-filter\">Difficulty</Label>\n                    <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>\n                      <SelectTrigger id=\"difficulty-filter\" data-testid=\"select-difficulty\">\n                        <SelectValue placeholder=\"All Levels\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Levels</SelectItem>\n                        <SelectItem value=\"beginner\">Beginner</SelectItem>\n                        <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                        <SelectItem value=\"advanced\">Advanced</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"stability-filter\">Stability</Label>\n                    <Select value={selectedStability} onValueChange={setSelectedStability}>\n                      <SelectTrigger id=\"stability-filter\" data-testid=\"select-stability\">\n                        <SelectValue placeholder=\"All Types\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Types</SelectItem>\n                        <SelectItem value=\"stable\">Stable</SelectItem>\n                        <SelectItem value=\"beta\">Beta</SelectItem>\n                        <SelectItem value=\"experimental\">Experimental</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n\n              {/* Component Grid */}\n              <ScrollArea className=\"h-[500px]\">\n                <div className=\"space-y-6\">\n                  {Object.entries(componentsByCategory).map(([category, categoryComponents]) => (\n                    <div key={category} className=\"space-y-3\">\n                      {showCategories && (\n                        <h4 className=\"font-semibold text-sm text-muted-foreground uppercase tracking-wide\">\n                          {category} ({categoryComponents.length})\n                        </h4>\n                      )}\n                      <div className=\"grid gap-3\">\n                        {categoryComponents.map((component) => {\n                          const compatibility = checkCompatibility(component);\n                          const isSelected = isComponentSelected(component.name);\n                          \n                          return (\n                            <Card \n                              key={component.name} \n                              className={`cursor-pointer transition-all hover:shadow-md ${\n                                isSelected ? 'ring-2 ring-primary' : ''\n                              } ${\n                                !compatibility.compatible ? 'opacity-60' : ''\n                              }`}\n                              data-testid={`component-card-${component.name}`}\n                            >\n                              <CardContent className=\"p-4\">\n                                <div className=\"flex items-start justify-between gap-3\">\n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className=\"flex items-center gap-2 mb-2\">\n                                      <h5 className=\"font-medium text-sm truncate\">{component.name}</h5>\n                                      {getDifficultyIcon(component.difficulty)}\n                                      <Badge className={`text-xs ${getStabilityColor(component.stability)}`}>\n                                        {component.stability}\n                                      </Badge>\n                                    </div>\n                                    <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n                                      {component.description}\n                                    </p>\n                                    <div className=\"flex flex-wrap gap-1 mb-2\">\n                                      {component.keywords.slice(0, 3).map((keyword) => (\n                                        <Badge key={keyword} variant=\"outline\" className=\"text-xs\">\n                                          {keyword}\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                    {!compatibility.compatible && (\n                                      <div className=\"text-xs text-red-600 dark:text-red-400\">\n                                        {compatibility.issues.join('; ')}\n                                      </div>\n                                    )}\n                                  </div>\n                                  <div className=\"flex flex-col gap-1\">\n                                    <Tooltip>\n                                      <TooltipTrigger asChild>\n                                        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                                          <Info className=\"w-4 h-4\" />\n                                        </Button>\n                                      </TooltipTrigger>\n                                      <TooltipContent side=\"left\" className=\"max-w-xs\">\n                                        <div className=\"space-y-1 text-xs\">\n                                          <p><strong>Version:</strong> {component.version}</p>\n                                          <p><strong>Properties:</strong> {component.properties.length}</p>\n                                          {component.subcategory && (\n                                            <p><strong>Subcategory:</strong> {component.subcategory}</p>\n                                          )}\n                                        </div>\n                                      </TooltipContent>\n                                    </Tooltip>\n                                    \n                                    {isSelected ? (\n                                      onRemoveComponent && (\n                                        <Button\n                                          variant=\"destructive\"\n                                          size=\"sm\"\n                                          className=\"h-8\"\n                                          onClick={() => onRemoveComponent(component.name)}\n                                          data-testid={`button-remove-${component.name}`}\n                                        >\n                                          Remove\n                                        </Button>\n                                      )\n                                    ) : (\n                                      <Button\n                                        variant=\"default\"\n                                        size=\"sm\"\n                                        className=\"h-8\"\n                                        disabled={!compatibility.compatible || !canAddMore}\n                                        onClick={() => onAddComponent(component.name)}\n                                        data-testid={`button-add-${component.name}`}\n                                      >\n                                        <Plus className=\"w-3 h-3 mr-1\" />\n                                        Add\n                                      </Button>\n                                    )}\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {filteredComponents.length === 0 && (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Filter className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                      <p>No components found matching your filters.</p>\n                      <p className=\"text-sm\">Try adjusting your search terms or filters.</p>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n            </TabsContent>\n\n            <TabsContent value=\"selected\" className=\"space-y-4\">\n              {selectedComponents.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Settings className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No components selected yet.</p>\n                  <p className=\"text-sm\">Switch to the Browse tab to add components.</p>\n                </div>\n              ) : (\n                <ScrollArea className=\"h-[500px]\">\n                  <div className=\"space-y-3\">\n                    {selectedComponents.map((componentName) => {\n                      const component = components.find(c => c.name === componentName);\n                      if (!component) return null;\n                      \n                      return (\n                        <Card key={componentName} data-testid={`selected-component-${componentName}`}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start justify-between gap-3\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <h5 className=\"font-medium text-sm\">{component.name}</h5>\n                                  {getDifficultyIcon(component.difficulty)}\n                                  <Badge className={`text-xs ${getStabilityColor(component.stability)}`}>\n                                    {component.stability}\n                                  </Badge>\n                                </div>\n                                <p className=\"text-xs text-muted-foreground mb-2\">\n                                  {component.description}\n                                </p>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {component.category}\n                                </Badge>\n                              </div>\n                              {onRemoveComponent && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => onRemoveComponent(componentName)}\n                                  data-testid={`button-remove-selected-${componentName}`}\n                                >\n                                  Remove\n                                </Button>\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                </ScrollArea>\n              )}\n              \n              {maxComponents && (\n                <div className=\"text-sm text-muted-foreground text-center\">\n                  {selectedComponents.length} / {maxComponents} components selected\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </TooltipProvider>\n  );\n}","size_bytes":19660},"client/src/lib/minecraft/componentUtils.ts":{"content":"import { ComponentItem } from \"@/components/Common/ComponentSelector\";\n\n// Component compatibility and utility functions\nexport interface ComponentInstance {\n  name: string;\n  enabled: boolean;\n  properties: Record<string, any>;\n  metadata?: {\n    addedAt: number;\n    category: string;\n    difficulty: string;\n  };\n}\n\nexport interface CompatibilityCheck {\n  compatible: boolean;\n  issues: string[];\n  warnings: string[];\n  suggestions: string[];\n}\n\n/**\n * Check compatibility between components\n */\nexport function checkComponentCompatibility(\n  targetComponent: ComponentItem,\n  selectedComponents: ComponentInstance[],\n  allComponents: ComponentItem[]\n): CompatibilityCheck {\n  const issues: string[] = [];\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n\n  // Check if component is already added\n  const isAlreadySelected = selectedComponents.some(c => c.name === targetComponent.name);\n  if (isAlreadySelected) {\n    issues.push('Component is already added');\n  }\n\n  // Check conflicts\n  if (targetComponent.conflicts) {\n    const conflictingSelected = targetComponent.conflicts.filter(conflict => \n      selectedComponents.some(c => c.name === conflict && c.enabled)\n    );\n    if (conflictingSelected.length > 0) {\n      issues.push(`Conflicts with: ${conflictingSelected.join(', ')}`);\n    }\n  }\n\n  // Check dependencies\n  if (targetComponent.dependencies) {\n    const missingDeps = targetComponent.dependencies.filter(dep => \n      !selectedComponents.some(c => c.name === dep && c.enabled)\n    );\n    if (missingDeps.length > 0) {\n      warnings.push(`Recommended dependencies: ${missingDeps.join(', ')}`);\n      suggestions.push(...missingDeps.map(dep => `Add ${dep} component`));\n    }\n  }\n\n  // Check for reverse conflicts\n  selectedComponents.forEach(selected => {\n    const selectedDef = allComponents.find(c => c.name === selected.name);\n    if (selectedDef?.conflicts?.includes(targetComponent.name)) {\n      issues.push(`Conflicts with selected: ${selected.name}`);\n    }\n  });\n\n  // Category-specific compatibility checks\n  if (targetComponent.category === 'Movement') {\n    const hasMovementBase = selectedComponents.some(c => \n      c.name.includes('movement.basic') || c.name.includes('physics')\n    );\n    if (!hasMovementBase) {\n      warnings.push('Movement components typically require minecraft:physics or minecraft:movement.basic');\n    }\n  }\n\n  if (targetComponent.category === 'Behavior') {\n    const hasBehaviorBase = selectedComponents.some(c => \n      c.name.includes('behavior.') || c.name.includes('navigation')\n    );\n    if (!hasBehaviorBase && !targetComponent.name.includes('behavior.float')) {\n      suggestions.push('Consider adding navigation components for behavior');\n    }\n  }\n\n  return {\n    compatible: issues.length === 0,\n    issues,\n    warnings,\n    suggestions\n  };\n}\n\n/**\n * Get recommended components based on selected components\n */\nexport function getRecommendedComponents(\n  selectedComponents: ComponentInstance[],\n  allComponents: ComponentItem[],\n  maxRecommendations: number = 5\n): ComponentItem[] {\n  const selectedNames = selectedComponents.map(c => c.name);\n  const recommendations: ComponentItem[] = [];\n\n  // Find dependencies of selected components\n  selectedComponents.forEach(selected => {\n    const def = allComponents.find(c => c.name === selected.name);\n    if (def?.dependencies) {\n      def.dependencies.forEach(dep => {\n        if (!selectedNames.includes(dep)) {\n          const depComponent = allComponents.find(c => c.name === dep);\n          if (depComponent && !recommendations.some(r => r.name === dep)) {\n            recommendations.push(depComponent);\n          }\n        }\n      });\n    }\n  });\n\n  // Category-based recommendations\n  const categories = Array.from(new Set(selectedComponents.map(c => {\n    const def = allComponents.find(comp => comp.name === c.name);\n    return def?.category;\n  }).filter(Boolean)));\n\n  categories.forEach(category => {\n    const categoryComponents = allComponents.filter(c => \n      c.category === category && \n      !selectedNames.includes(c.name) &&\n      !recommendations.some(r => r.name === c.name)\n    );\n    \n    // Add popular components from same category\n    const popular = categoryComponents\n      .filter(c => c.stability === 'stable' && c.difficulty !== 'advanced')\n      .slice(0, 2);\n    \n    recommendations.push(...popular);\n  });\n\n  return recommendations.slice(0, maxRecommendations);\n}\n\n/**\n * Validate component properties\n */\nexport function validateComponentProperties(\n  component: ComponentItem,\n  properties: Record<string, any>\n): { isValid: boolean; errors: string[]; warnings: string[] } {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  component.properties.forEach(prop => {\n    const value = properties[prop.name];\n\n    // Check required properties\n    if (prop.required && (value === undefined || value === null || value === '')) {\n      errors.push(`${prop.name} is required`);\n      return;\n    }\n\n    if (value === undefined || value === null) return;\n\n    // Type validation\n    switch (prop.type) {\n      case 'number':\n        if (isNaN(Number(value))) {\n          errors.push(`${prop.name} must be a number`);\n        } else {\n          const numValue = Number(value);\n          if (prop.min !== undefined && numValue < prop.min) {\n            errors.push(`${prop.name} must be at least ${prop.min}`);\n          }\n          if (prop.max !== undefined && numValue > prop.max) {\n            errors.push(`${prop.name} must be at most ${prop.max}`);\n          }\n        }\n        break;\n\n      case 'string':\n        if (typeof value !== 'string') {\n          errors.push(`${prop.name} must be a string`);\n        } else if (prop.options && !prop.options.includes(value)) {\n          errors.push(`${prop.name} must be one of: ${prop.options.join(', ')}`);\n        }\n        break;\n\n      case 'boolean':\n        if (typeof value !== 'boolean') {\n          errors.push(`${prop.name} must be true or false`);\n        }\n        break;\n\n      case 'range':\n        if (typeof value !== 'object' || !value.min || !value.max) {\n          errors.push(`${prop.name} must have min and max values`);\n        } else if (value.min > value.max) {\n          errors.push(`${prop.name} min value cannot be greater than max value`);\n        }\n        break;\n\n      case 'vector3':\n        if (typeof value !== 'object' || \n            typeof value.x !== 'number' || \n            typeof value.y !== 'number' || \n            typeof value.z !== 'number') {\n          errors.push(`${prop.name} must have numeric x, y, and z values`);\n        }\n        break;\n\n      case 'array':\n        if (!Array.isArray(value)) {\n          errors.push(`${prop.name} must be an array`);\n        }\n        break;\n    }\n\n    // Performance warnings\n    if (prop.name === 'max_health' && Number(value) > 1000) {\n      warnings.push('Very high health values may impact performance');\n    }\n    if (prop.name === 'speed' && Number(value) > 2.0) {\n      warnings.push('High speed values may cause movement issues');\n    }\n  });\n\n  return { isValid: errors.length === 0, errors, warnings };\n}\n\n/**\n * Generate component JSON from instances\n */\nexport function generateComponentsJSON(components: ComponentInstance[]): Record<string, any> {\n  const json: Record<string, any> = {};\n\n  components.forEach(component => {\n    if (component.enabled && Object.keys(component.properties).length > 0) {\n      // Clean empty properties\n      const cleanProperties = Object.entries(component.properties).reduce((acc, [key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {} as Record<string, any>);\n\n      if (Object.keys(cleanProperties).length > 0) {\n        json[component.name] = cleanProperties;\n      } else {\n        // Component with no properties (like physics)\n        json[component.name] = {};\n      }\n    }\n  });\n\n  return json;\n}\n\n/**\n * Create component presets\n */\nexport const ENTITY_PRESETS = {\n  basic_mob: [\n    'minecraft:health',\n    'minecraft:physics',\n    'minecraft:movement.basic',\n    'minecraft:navigation.walk',\n    'minecraft:behavior.random_stroll',\n    'minecraft:behavior.look_at_player'\n  ],\n  hostile_mob: [\n    'minecraft:health',\n    'minecraft:physics',\n    'minecraft:movement.basic',\n    'minecraft:navigation.walk',\n    'minecraft:behavior.nearest_attackable_target',\n    'minecraft:behavior.melee_attack',\n    'minecraft:behavior.random_stroll',\n    'minecraft:behavior.look_at_player'\n  ],\n  passive_animal: [\n    'minecraft:health',\n    'minecraft:physics',\n    'minecraft:movement.basic',\n    'minecraft:navigation.walk',\n    'minecraft:behavior.random_stroll',\n    'minecraft:behavior.look_at_player',\n    'minecraft:behavior.panic',\n    'minecraft:behavior.breed'\n  ],\n  flying_mob: [\n    'minecraft:health',\n    'minecraft:physics',\n    'minecraft:movement.fly',\n    'minecraft:navigation.fly',\n    'minecraft:behavior.random_fly',\n    'minecraft:behavior.look_at_player'\n  ]\n};\n\nexport const BLOCK_PRESETS = {\n  basic_block: [\n    'minecraft:destructible_by_mining',\n    'minecraft:destructible_by_explosion',\n    'minecraft:material_instances'\n  ],\n  interactive_block: [\n    'minecraft:destructible_by_mining',\n    'minecraft:destructible_by_explosion',\n    'minecraft:material_instances',\n    'minecraft:on_interact'\n  ],\n  light_source: [\n    'minecraft:destructible_by_mining',\n    'minecraft:destructible_by_explosion',\n    'minecraft:material_instances',\n    'minecraft:light_emission'\n  ],\n  crop_block: [\n    'minecraft:destructible_by_mining',\n    'minecraft:material_instances',\n    'minecraft:random_ticking',\n    'minecraft:on_interact'\n  ]\n};\n\nexport const ITEM_PRESETS = {\n  basic_item: [\n    'minecraft:max_stack_size',\n    'minecraft:icon'\n  ],\n  food_item: [\n    'minecraft:max_stack_size',\n    'minecraft:icon',\n    'minecraft:food',\n    'minecraft:use_animation'\n  ],\n  tool_item: [\n    'minecraft:max_stack_size',\n    'minecraft:icon',\n    'minecraft:durability',\n    'minecraft:digger'\n  ],\n  weapon_item: [\n    'minecraft:max_stack_size',\n    'minecraft:icon',\n    'minecraft:durability',\n    'minecraft:weapon'\n  ],\n  armor_item: [\n    'minecraft:max_stack_size',\n    'minecraft:icon',\n    'minecraft:durability',\n    'minecraft:wearable',\n    'minecraft:armor'\n  ]\n};\n\n/**\n * Apply preset to component list\n */\nexport function applyPreset(\n  presetName: string,\n  presetType: 'entity' | 'block' | 'item',\n  allComponents: ComponentItem[]\n): ComponentInstance[] {\n  let presetComponents: string[] = [];\n\n  switch (presetType) {\n    case 'entity':\n      presetComponents = ENTITY_PRESETS[presetName as keyof typeof ENTITY_PRESETS] || [];\n      break;\n    case 'block':\n      presetComponents = BLOCK_PRESETS[presetName as keyof typeof BLOCK_PRESETS] || [];\n      break;\n    case 'item':\n      presetComponents = ITEM_PRESETS[presetName as keyof typeof ITEM_PRESETS] || [];\n      break;\n  }\n\n  return presetComponents.map(componentName => {\n    const component = allComponents.find(c => c.name === componentName);\n    const defaultProperties: Record<string, any> = {};\n\n    // Set default values from component definition\n    component?.properties.forEach(prop => {\n      if (prop.default !== undefined) {\n        defaultProperties[prop.name] = prop.default;\n      } else {\n        switch (prop.type) {\n          case 'number':\n            defaultProperties[prop.name] = prop.min ?? 0;\n            break;\n          case 'boolean':\n            defaultProperties[prop.name] = false;\n            break;\n          case 'string':\n            defaultProperties[prop.name] = prop.options?.[0] ?? '';\n            break;\n        }\n      }\n    });\n\n    return {\n      name: componentName,\n      enabled: true,\n      properties: defaultProperties,\n      metadata: {\n        addedAt: Date.now(),\n        category: component?.category || 'Unknown',\n        difficulty: component?.difficulty || 'beginner'\n      }\n    };\n  }).filter(c => c.name); // Filter out missing components\n}\n\n/**\n * Export utilities for specific builder types\n */\nexport function getComponentsByCategory(components: ComponentItem[], category: string): ComponentItem[] {\n  return components.filter(c => c.category === category);\n}\n\nexport function searchComponents(components: ComponentItem[], query: string): ComponentItem[] {\n  const lowercaseQuery = query.toLowerCase();\n  return components.filter(component => \n    component.name.toLowerCase().includes(lowercaseQuery) ||\n    component.description.toLowerCase().includes(lowercaseQuery) ||\n    component.keywords.some(k => k.toLowerCase().includes(lowercaseQuery))\n  );\n}","size_bytes":12699},"client/src/components/Community/CommunitySection.tsx":{"content":"import { MessageCircle, ExternalLink, Globe, Users, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function CommunitySection() {\n  const handleDiscordClick = () => {\n    window.open('https://discord.gg/xMy34mQCJ3', '_blank', 'noopener,noreferrer');\n  };\n\n  const handleOmniScienceClick = () => {\n    window.open('https://sites.google.com/view/omni-science-/home?authuser=0', '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <section className=\"p-6\" data-testid=\"community-section\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4 flex items-center justify-center\">\n            <Users className=\"mr-3\" size={36} />\n            Community & Resources\n          </h1>\n          <p className=\"text-lg text-muted-foreground mb-6\">\n            Connect with the Omni-Science Game Studio community and explore our professional tools and community support\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n          {/* Discord Community Card */}\n          <Card className=\"bg-card border border-border hover:border-primary transition-colors group\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center text-foreground\">\n                <div className=\"w-12 h-12 bg-[#5865F2] rounded-lg flex items-center justify-center mr-4\">\n                  <MessageCircle className=\"text-white\" size={24} />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold\">Join Our Discord</h3>\n                  <p className=\"text-sm text-muted-foreground font-normal\">Community Hub</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-6\">\n                From a parasitic apocalypse Minecraft server to developing Steam games of the future, join the fun and support us in our journey!\n              </p>\n              \n              <div className=\"space-y-3 mb-6\">\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                  Get instant help from experienced creators\n                </div>\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                  Share your addon creations and get feedback\n                </div>\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                  Access exclusive tutorials and resources\n                </div>\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                  Participate in community events and challenges\n                </div>\n              </div>\n\n              <Button \n                onClick={handleDiscordClick}\n                className=\"w-full bg-[#5865F2] hover:bg-[#4752C4] text-white\"\n                data-testid=\"button-join-discord\"\n              >\n                <MessageCircle className=\"mr-2\" size={20} />\n                Join Discord Community\n                <ExternalLink className=\"ml-2\" size={16} />\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Omni-Science Website Card */}\n          <Card className=\"bg-card border border-border hover:border-primary transition-colors group\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center text-foreground\">\n                <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4\">\n                  <Globe className=\"text-primary-foreground\" size={24} />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold\">Omni-Science Game Studio</h3>\n                  <p className=\"text-sm text-muted-foreground font-normal\">Game Design Studio</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-6\">\n                Discover Omni-Science, a professional game design studio with 6 years of industry experience. \n                Our team of 7 skilled developers creates innovative games while supporting The Helping Guild charity \n                to make a positive impact in our community.\n              </p>\n              \n              <div className=\"space-y-3 mb-6\">\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mr-3\"></div>\n                  Professional game design and development expertise\n                </div>\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mr-3\"></div>\n                  Team of 7 experienced developers and designers\n                </div>\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mr-3\"></div>\n                  6 years of proven industry experience\n                </div>\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mr-3\"></div>\n                  Proudly supporting The Helping Guild charity\n                </div>\n              </div>\n\n              <Button \n                onClick={handleOmniScienceClick}\n                variant=\"secondary\"\n                className=\"w-full\"\n                data-testid=\"button-visit-omniscience\"\n              >\n                <Globe className=\"mr-2\" size={20} />\n                Visit Omni-Science Game Studio\n                <ExternalLink className=\"ml-2\" size={16} />\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Community Stats */}\n        <div className=\"bg-muted rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n            <Heart className=\"mr-2 text-primary\" size={20} />\n            Join the Community\n          </h3>\n          <div className=\"grid md:grid-cols-3 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">Active</div>\n              <div className=\"text-sm text-muted-foreground\">Community Support</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">Game Studio</div>\n              <div className=\"text-sm text-muted-foreground\">Professional Development</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">Open Source</div>\n              <div className=\"text-sm text-muted-foreground\">Creator Tools</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7345},"client/src/components/Tools/ExternalTools.tsx":{"content":"import { useState, useRef, useEffect, useCallback } from \"react\";\nimport { ExternalLink, Loader2, AlertTriangle, RefreshCw, Maximize2, Info, X } from \"lucide-react\";\nimport { getEmojiWithFallback, type EmojiName } from \"@/assets/emoji-mapping\";\nimport { useCollapsible } from \"@/hooks/useCollapsible\";\nimport { CollapsibleSection, CollapsibleGroup } from \"@/components/ui/collapsible-section\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface ExternalTool {\n  id: string;\n  name: string;\n  url: string;\n  description: string;\n  features: string[];\n  icon: string;\n  category: 'modeling' | 'editing' | 'effects';\n}\n\ninterface IframeState {\n  [key: string]: {\n    loading: boolean;\n    error: boolean;\n    loaded: boolean;\n  };\n}\n\nconst externalTools: ExternalTool[] = [\n  {\n    id: 'blockbench',\n    name: 'Blockbench',\n    url: 'https://web.blockbench.net',\n    description: 'Professional 3D model editor for creating custom entities, blocks, and items',\n    features: [\n      'Entity & Block Modeling',\n      'Texture Painting',\n      'Animation Editor',\n      'Bedrock Format Export',\n      'Model Optimization'\n    ],\n    icon: 'blockbench',\n    category: 'modeling'\n  },\n  {\n    id: 'bridge-core',\n    name: 'Bridge Core',\n    url: 'https://editor.bridge-core.app',\n    description: 'Advanced behavior and resource pack editor with intelligent auto-completion',\n    features: [\n      'Behavior Pack Editor',\n      'Resource Pack Editor',\n      'Auto-completion',\n      'Error Detection',\n      'Version Control'\n    ],\n    icon: 'bridgeCore',\n    category: 'editing'\n  },\n  {\n    id: 'snowstorm',\n    name: 'Snowstorm',\n    url: 'https://snowstorm.app',\n    description: 'Powerful particle system editor for creating stunning visual effects',\n    features: [\n      'Particle Design',\n      'Real-time Preview',\n      'Parameter Tweaking',\n      'Export to Bedrock',\n      'Effect Library'\n    ],\n    icon: 'snowstorm',\n    category: 'effects'\n  },\n  {\n    id: 'pixilart',\n    name: 'Pixilart',\n    url: 'https://www.pixilart.com/draw?ref=home-page',\n    description: 'Professional pixel art editor for creating custom textures and sprites',\n    features: [\n      'Pixel Art Creation',\n      'Custom Brush Tools',\n      'Layer Support',\n      'Color Palettes',\n      'Export Formats'\n    ],\n    icon: 'pixilart',\n    category: 'editing'\n  },\n  {\n    id: 'structure-editor',\n    name: 'Structure Editor',\n    url: 'https://mcbe-essentials.github.io/structure-editor/',\n    description: 'Professional tool for creating and editing Minecraft Bedrock structures with advanced features and export capabilities',\n    features: [\n      'Structure Creation',\n      'Advanced Editing',\n      'Export Capabilities',\n      'Block Placement',\n      'Template Management'\n    ],\n    icon: 'structureEditor',\n    category: 'editing'\n  },\n  {\n    id: 'loot-tabler',\n    name: 'Loot Tabler',\n    url: 'https://mcbe-essentials.github.io/structure-editor/loot-tabler/',\n    description: 'Comprehensive loot table generator for Minecraft Bedrock with advanced configuration options and validation',\n    features: [\n      'Loot Table Generation',\n      'Advanced Configuration',\n      'Validation System',\n      'Drop Rate Calculation',\n      'Condition Management'\n    ],\n    icon: 'lootTabler',\n    category: 'editing'\n  },\n  {\n    id: 'dialogue-editor',\n    name: 'Dialogue Editor',\n    url: 'https://mcbe-essentials.github.io/dialogue-editor',\n    description: 'Interactive dialogue system editor for creating complex NPC conversations and scripted interactions in Minecraft Bedrock',\n    features: [\n      'Interactive Dialogue Design',\n      'NPC Conversation Trees',\n      'Scripted Interactions',\n      'Branching Logic',\n      'Response Management'\n    ],\n    icon: 'dialogueEditor',\n    category: 'editing'\n  }\n];\n\nexport default function ExternalTools() {\n  const [activeTab, setActiveTab] = useState('blockbench');\n  const [iframeStates, setIframeStates] = useState<IframeState>({});\n  const [autoReload, setAutoReload] = useState(true);\n  const [fullscreenMode, setFullscreenMode] = useState(false);\n  const iframeRefs = useRef<{ [key: string]: HTMLIFrameElement | null }>({});\n  const fullscreenContainerRef = useRef<HTMLDivElement | null>(null);\n  const isMobile = useIsMobile();\n\n  // Initialize iframe states\n  useEffect(() => {\n    const initialStates = externalTools.reduce((acc, tool) => {\n      acc[tool.id] = { loading: true, error: false, loaded: false };\n      return acc;\n    }, {} as IframeState);\n    setIframeStates(initialStates);\n  }, []);\n\n  // Enhanced fullscreen functionality\n  const enterFullscreen = useCallback(async () => {\n    if (fullscreenContainerRef.current) {\n      try {\n        await fullscreenContainerRef.current.requestFullscreen();\n        setFullscreenMode(true);\n      } catch (error) {\n        // Fallback to CSS fullscreen if Fullscreen API fails\n        setFullscreenMode(true);\n      }\n    }\n  }, []);\n\n  const exitFullscreen = useCallback(async () => {\n    try {\n      if (document.fullscreenElement) {\n        await document.exitFullscreen();\n      }\n      setFullscreenMode(false);\n    } catch (error) {\n      setFullscreenMode(false);\n    }\n  }, []);\n\n  const toggleFullscreen = useCallback(() => {\n    if (fullscreenMode) {\n      exitFullscreen();\n    } else {\n      enterFullscreen();\n    }\n  }, [fullscreenMode, enterFullscreen, exitFullscreen]);\n\n  // Keyboard event handlers\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // F11 for fullscreen toggle\n      if (event.key === 'F11') {\n        event.preventDefault();\n        toggleFullscreen();\n      }\n      // Escape to exit fullscreen\n      if (event.key === 'Escape' && fullscreenMode) {\n        exitFullscreen();\n      }\n    };\n\n    const handleFullscreenChange = () => {\n      // Sync state with actual fullscreen status\n      if (!document.fullscreenElement && fullscreenMode) {\n        setFullscreenMode(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, [fullscreenMode, toggleFullscreen, exitFullscreen]);\n\n  const updateIframeState = (toolId: string, updates: Partial<IframeState[string]>) => {\n    setIframeStates(prev => ({\n      ...prev,\n      [toolId]: { ...prev[toolId], ...updates }\n    }));\n  };\n\n  const handleIframeLoad = (toolId: string) => {\n    updateIframeState(toolId, { loading: false, loaded: true, error: false });\n  };\n\n  const handleIframeError = (toolId: string) => {\n    updateIframeState(toolId, { loading: false, error: true, loaded: false });\n  };\n\n  const reloadIframe = (toolId: string) => {\n    const iframe = iframeRefs.current[toolId];\n    if (iframe) {\n      updateIframeState(toolId, { loading: true, error: false, loaded: false });\n      iframe.src = iframe.src;\n    }\n  };\n\n  const openInNewWindow = (tool: ExternalTool) => {\n    window.open(tool.url, '_blank', 'noopener,noreferrer');\n  };\n\n  const renderIframe = (tool: ExternalTool) => {\n    const state = iframeStates[tool.id] || { loading: true, error: false, loaded: false };\n\n    return (\n      <div className=\"relative w-full h-full overflow-hidden\">\n        {/* Loading State */}\n        {state.loading && (\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-background/80 backdrop-blur-sm z-10\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-primary mb-3\" />\n            <p className=\"text-sm text-muted-foreground\">Loading {tool.name}...</p>\n          </div>\n        )}\n\n        {/* Error State */}\n        {state.error && (\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-background/90 backdrop-blur-sm z-10 p-4\">\n            <AlertTriangle className=\"w-8 h-8 text-destructive mb-3\" />\n            <p className=\"text-sm text-foreground mb-4 text-center\">Failed to load {tool.name}</p>\n            <div className=\"flex flex-col sm:flex-row gap-2 w-full max-w-xs\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => reloadIframe(tool.id)}\n                className=\"min-h-[44px] flex-1\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Retry\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => openInNewWindow(tool)}\n                className=\"min-h-[44px] flex-1\"\n              >\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                Open Externally\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Iframe */}\n        <iframe\n          ref={(el) => { iframeRefs.current[tool.id] = el; }}\n          src={tool.url}\n          className=\"w-full h-full border-0 bg-white\"\n          sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms allow-downloads\"\n          referrerPolicy=\"strict-origin-when-cross-origin\"\n          onLoad={() => handleIframeLoad(tool.id)}\n          onError={() => handleIframeError(tool.id)}\n          title={`${tool.name} - ${tool.description}`}\n          data-testid={`iframe-${tool.id}`}\n        />\n      </div>\n    );\n  };\n\n  const renderToolOverview = (tool: ExternalTool) => (\n    <div className=\"mb-4 p-3 sm:p-4 bg-muted/50 rounded-lg border\">\n      <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 mb-3\">\n        <div className=\"flex items-start space-x-3 min-w-0 flex-1\">\n          <span className=\"text-2xl flex-shrink-0\">\n            {getEmojiWithFallback(tool.icon as EmojiName)}\n          </span>\n          <div className=\"min-w-0 flex-1\">\n            <h3 className=\"font-semibold text-foreground text-sm sm:text-base\">{tool.name}</h3>\n            <p className=\"text-xs sm:text-sm text-muted-foreground line-clamp-2\">{tool.description}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-between sm:justify-end space-x-2 flex-shrink-0\">\n          <Badge \n            variant={tool.category === 'modeling' ? 'default' : tool.category === 'editing' ? 'secondary' : 'outline'}\n            className=\"text-xs\"\n          >\n            {tool.category}\n          </Badge>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => openInNewWindow(tool)}\n            data-testid={`button-open-external-${tool.id}`}\n            className=\"min-h-[44px] text-xs sm:text-sm\"\n          >\n            <ExternalLink className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">Open External</span>\n            <span className=\"sm:hidden\">Open</span>\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2\">\n        {tool.features.map((feature, index) => (\n          <div key={index} className=\"flex items-center space-x-2 text-xs sm:text-sm\">\n            <div className=\"w-1.5 h-1.5 bg-primary rounded-full flex-shrink-0\" />\n            <span className=\"text-muted-foreground\">{feature}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    <section className=\"h-full flex flex-col\" data-testid=\"external-tools\">\n      <div className=\"mb-4 sm:mb-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4 mb-4\">\n          <div className=\"min-w-0 flex-1\">\n            <h2 className=\"text-xl sm:text-2xl font-bold text-foreground mb-2\">External Tools</h2>\n            <p className=\"text-sm sm:text-base text-muted-foreground line-clamp-2\">\n              Professional tools for complete Minecraft Bedrock Edition development workflow\n            </p>\n          </div>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4 flex-shrink-0\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                checked={autoReload}\n                onCheckedChange={setAutoReload}\n                data-testid=\"switch-auto-reload\"\n              />\n              <Label className=\"text-xs sm:text-sm\">Auto-reload on error</Label>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleFullscreen}\n              data-testid=\"button-fullscreen-toggle\"\n              title=\"Toggle fullscreen (F11)\"\n              className=\"min-h-[44px] w-full sm:w-auto\"\n            >\n              <Maximize2 className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">\n                {fullscreenMode ? 'Exit Fullscreen' : 'Fullscreen'}\n              </span>\n              <span className=\"sm:hidden\">\n                {fullscreenMode ? 'Exit' : 'Full'}\n              </span>\n            </Button>\n          </div>\n        </div>\n\n        <Alert className=\"mb-4\">\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-xs sm:text-sm\">\n            These tools run in secure sandboxed iframes. Some features may require opening in a new window for full functionality.\n          </AlertDescription>\n        </Alert>\n      </div>\n\n      <div className=\"flex-1 min-h-0\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"h-full flex flex-col\">\n          <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 mb-4 h-auto\">\n            {externalTools.map((tool) => (\n              <TabsTrigger \n                key={tool.id} \n                value={tool.id} \n                className=\"flex flex-col sm:flex-row items-center gap-1 sm:gap-2 p-2 sm:p-3 min-h-[44px]\"\n                data-testid={`tab-${tool.id}`}\n              >\n                <div className=\"flex items-center gap-1 sm:gap-2\">\n                  <span className=\"text-base\">\n                    {getEmojiWithFallback(tool.icon as EmojiName)}\n                  </span>\n                  <span className=\"text-xs sm:text-sm font-medium truncate\">{tool.name}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  {iframeStates[tool.id]?.loading && (\n                    <Loader2 className=\"w-3 h-3 animate-spin\" />\n                  )}\n                  {iframeStates[tool.id]?.error && (\n                    <AlertTriangle className=\"w-3 h-3 text-destructive\" />\n                  )}\n                </div>\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {externalTools.map((tool) => (\n            <TabsContent \n              key={tool.id} \n              value={tool.id} \n              className=\"flex-1 min-h-0 mt-0 h-full\"\n              data-testid={`content-${tool.id}`}\n            >\n              <div \n                ref={fullscreenContainerRef}\n                className={`h-full flex flex-col ${\n                  fullscreenMode \n                    ? 'fixed inset-0 z-50 bg-background p-0' \n                    : ''\n                }`}\n              >\n                {!fullscreenMode && renderToolOverview(tool)}\n                \n                <div className=\"flex-1 min-h-0\">\n                  {fullscreenMode ? (\n                    // True fullscreen mode - no card, minimal UI\n                    <div className=\"h-full flex flex-col\">\n                      <div className=\"flex items-center justify-between p-3 sm:p-4 bg-background/95 backdrop-blur-sm border-b\">\n                        <div className=\"flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1\">\n                          <span className=\"text-2xl\">\n                            {getEmojiWithFallback(tool.icon as EmojiName)}\n                          </span>\n                          <div className=\"min-w-0\">\n                            <h3 className=\"font-semibold text-foreground text-sm sm:text-base truncate\">{tool.name}</h3>\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">Fullscreen Mode</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-1 sm:space-x-2 flex-shrink-0\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => reloadIframe(tool.id)}\n                            disabled={iframeStates[tool.id]?.loading}\n                            data-testid={`button-reload-${tool.id}`}\n                            title=\"Reload iframe\"\n                            className=\"min-h-[44px] min-w-[44px] p-2\"\n                          >\n                            <RefreshCw className={`w-4 h-4 ${iframeStates[tool.id]?.loading ? 'animate-spin' : ''}`} />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => openInNewWindow(tool)}\n                            title=\"Open in new window\"\n                            className=\"min-h-[44px] min-w-[44px] p-2\"\n                          >\n                            <ExternalLink className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={exitFullscreen}\n                            title=\"Exit fullscreen (Esc)\"\n                            className=\"min-h-[44px] min-w-[44px] p-2\"\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"flex-1\">\n                        {renderIframe(tool)}\n                      </div>\n                    </div>\n                  ) : (\n                    // Normal card mode\n                    <Card className=\"h-full flex flex-col\">\n                      <CardHeader className=\"pb-2 sm:pb-3 px-3 sm:px-6 pt-3 sm:pt-6\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                          <div className=\"min-w-0 flex-1\">\n                            <CardTitle className=\"flex items-center space-x-2 text-sm sm:text-base\">\n                              <span className=\"text-lg\">\n                                {getEmojiWithFallback(tool.icon as EmojiName)}\n                              </span>\n                              <span className=\"truncate\">{tool.name}</span>\n                            </CardTitle>\n                            <CardDescription className=\"text-xs sm:text-sm\">\n                              Integrated {tool.name.toLowerCase()} workspace\n                            </CardDescription>\n                          </div>\n                          <div className=\"flex items-center justify-end space-x-1 sm:space-x-2 flex-shrink-0\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => reloadIframe(tool.id)}\n                              disabled={iframeStates[tool.id]?.loading}\n                              data-testid={`button-reload-${tool.id}`}\n                              title=\"Reload iframe\"\n                              className=\"min-h-[44px] min-w-[44px] p-2\"\n                            >\n                              <RefreshCw className={`w-4 h-4 ${iframeStates[tool.id]?.loading ? 'animate-spin' : ''}`} />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => openInNewWindow(tool)}\n                              title=\"Open in new window\"\n                              className=\"min-h-[44px] min-w-[44px] p-2\"\n                            >\n                              <ExternalLink className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={toggleFullscreen}\n                              title=\"Enter fullscreen (F11)\"\n                              className=\"min-h-[44px] min-w-[44px] p-2\"\n                            >\n                              <Maximize2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"p-0 flex-1 min-h-0\">\n                        <div className=\"h-full min-h-[400px] md:min-h-[500px] lg:min-h-[600px]\">\n                          {renderIframe(tool)}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n      </div>\n    </section>\n  );\n}","size_bytes":21622},"client/src/hooks/useCollapsible.ts":{"content":"import { useState, useCallback } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\nexport interface CollapsibleState {\n  [key: string]: boolean;\n}\n\nexport interface UseCollapsibleProps {\n  /** Storage key for localStorage persistence */\n  storageKey: string;\n  /** Default collapsed state for sections */\n  defaultCollapsed?: boolean;\n  /** Initial sections to set up */\n  initialSections?: string[];\n}\n\nexport interface UseCollapsibleReturn {\n  /** Current collapsed state for all sections */\n  collapsedSections: CollapsibleState;\n  /** Toggle a specific section's collapsed state */\n  toggleSection: (sectionId: string) => void;\n  /** Set a specific section's collapsed state */\n  setSection: (sectionId: string, collapsed: boolean) => void;\n  /** Check if a section is collapsed */\n  isCollapsed: (sectionId: string) => boolean;\n  /** Expand all sections */\n  expandAll: () => void;\n  /** Collapse all sections */\n  collapseAll: () => void;\n  /** Get count of collapsed sections */\n  getCollapsedCount: () => number;\n  /** Get count of expanded sections */\n  getExpandedCount: () => number;\n  /** Get all section IDs */\n  getSectionIds: () => string[];\n  /** Add a new section with default state */\n  addSection: (sectionId: string, collapsed?: boolean) => void;\n  /** Remove a section from state */\n  removeSection: (sectionId: string) => void;\n}\n\n/**\n * A hook for managing collapsible sections with localStorage persistence.\n * Provides utilities for expanding/collapsing sections individually or all at once.\n */\nexport function useCollapsible({\n  storageKey,\n  defaultCollapsed = false,\n  initialSections = []\n}: UseCollapsibleProps): UseCollapsibleReturn {\n  // Initialize localStorage state with initial sections\n  const getInitialState = (): CollapsibleState => {\n    const initial: CollapsibleState = {};\n    initialSections.forEach(sectionId => {\n      initial[sectionId] = defaultCollapsed;\n    });\n    return initial;\n  };\n\n  const [collapsedSections, setCollapsedSections] = useLocalStorage<CollapsibleState>(\n    `collapsible-${storageKey}`,\n    getInitialState()\n  );\n\n  const toggleSection = useCallback((sectionId: string) => {\n    setCollapsedSections(prev => ({\n      ...prev,\n      [sectionId]: !prev[sectionId]\n    }));\n  }, [setCollapsedSections]);\n\n  const setSection = useCallback((sectionId: string, collapsed: boolean) => {\n    setCollapsedSections(prev => ({\n      ...prev,\n      [sectionId]: collapsed\n    }));\n  }, [setCollapsedSections]);\n\n  const isCollapsed = useCallback((sectionId: string) => {\n    return collapsedSections[sectionId] ?? defaultCollapsed;\n  }, [collapsedSections, defaultCollapsed]);\n\n  const expandAll = useCallback(() => {\n    const allSections = Object.keys(collapsedSections);\n    const updated: CollapsibleState = {};\n    allSections.forEach(sectionId => {\n      updated[sectionId] = false;\n    });\n    setCollapsedSections(updated);\n  }, [collapsedSections, setCollapsedSections]);\n\n  const collapseAll = useCallback(() => {\n    const allSections = Object.keys(collapsedSections);\n    const updated: CollapsibleState = {};\n    allSections.forEach(sectionId => {\n      updated[sectionId] = true;\n    });\n    setCollapsedSections(updated);\n  }, [collapsedSections, setCollapsedSections]);\n\n  const getCollapsedCount = useCallback(() => {\n    return Object.values(collapsedSections).filter(Boolean).length;\n  }, [collapsedSections]);\n\n  const getExpandedCount = useCallback(() => {\n    return Object.values(collapsedSections).filter(collapsed => !collapsed).length;\n  }, [collapsedSections]);\n\n  const getSectionIds = useCallback(() => {\n    return Object.keys(collapsedSections);\n  }, [collapsedSections]);\n\n  const addSection = useCallback((sectionId: string, collapsed?: boolean) => {\n    setCollapsedSections(prev => ({\n      ...prev,\n      [sectionId]: collapsed ?? defaultCollapsed\n    }));\n  }, [setCollapsedSections, defaultCollapsed]);\n\n  const removeSection = useCallback((sectionId: string) => {\n    setCollapsedSections(prev => {\n      const { [sectionId]: removed, ...rest } = prev;\n      return rest;\n    });\n  }, [setCollapsedSections]);\n\n  return {\n    collapsedSections,\n    toggleSection,\n    setSection,\n    isCollapsed,\n    expandAll,\n    collapseAll,\n    getCollapsedCount,\n    getExpandedCount,\n    getSectionIds,\n    addSection,\n    removeSection\n  };\n}","size_bytes":4352},"client/src/components/ui/collapsible-section.tsx":{"content":"import { ReactNode, KeyboardEvent } from 'react';\nimport { ChevronDown, ChevronRight } from 'lucide-react';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\n\nexport interface CollapsibleSectionProps {\n  /** Unique identifier for the section */\n  id: string;\n  /** Section title/label */\n  title: string;\n  /** Section content */\n  children: ReactNode;\n  /** Whether the section is collapsed */\n  collapsed?: boolean;\n  /** Callback when collapse state changes */\n  onToggle?: (collapsed: boolean) => void;\n  /** Optional description or subtitle */\n  description?: string;\n  /** Icon to display next to title */\n  icon?: ReactNode;\n  /** Badge content (e.g., count) */\n  badge?: string | number;\n  /** Badge variant */\n  badgeVariant?: 'default' | 'secondary' | 'destructive' | 'outline';\n  /** Additional CSS classes for the container */\n  className?: string;\n  /** Additional CSS classes for the trigger */\n  triggerClassName?: string;\n  /** Additional CSS classes for the content */\n  contentClassName?: string;\n  /** Whether to show the chevron icon */\n  showChevron?: boolean;\n  /** Custom chevron icons */\n  chevronIcons?: {\n    collapsed: ReactNode;\n    expanded: ReactNode;\n  };\n  /** Animation duration in milliseconds */\n  animationDuration?: number;\n  /** Whether to disable the section */\n  disabled?: boolean;\n  /** Test ID for the component */\n  'data-testid'?: string;\n}\n\n/**\n * A reusable collapsible section component with consistent styling and behavior.\n * Supports localStorage persistence when used with useCollapsible hook.\n */\nexport function CollapsibleSection({\n  id,\n  title,\n  children,\n  collapsed = false,\n  onToggle,\n  description,\n  icon,\n  badge,\n  badgeVariant = 'secondary',\n  className,\n  triggerClassName,\n  contentClassName,\n  showChevron = true,\n  chevronIcons,\n  animationDuration = 200,\n  disabled = false,\n  'data-testid': testId,\n}: CollapsibleSectionProps) {\n  const handleToggle = () => {\n    if (disabled) return;\n    onToggle?.(!collapsed);\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLButtonElement>) => {\n    // Support Enter and Space for accessibility\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      handleToggle();\n    }\n  };\n\n  const defaultChevronIcons = {\n    collapsed: <ChevronRight className=\"w-4 h-4\" />,\n    expanded: <ChevronDown className=\"w-4 h-4\" />\n  };\n\n  const activeChevronIcons = chevronIcons || defaultChevronIcons;\n\n  return (\n    <Collapsible \n      open={!collapsed} \n      onOpenChange={(open) => onToggle?.(!open)}\n      className={cn(\n        \"group\",\n        className\n      )}\n      data-testid={testId}\n    >\n      <CollapsibleTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          className={cn(\n            \"w-full justify-between p-3 h-auto\",\n            \"hover:bg-muted/50 transition-colors duration-200\",\n            \"focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n            disabled && \"opacity-50 cursor-not-allowed\",\n            triggerClassName\n          )}\n          disabled={disabled}\n          onKeyDown={handleKeyDown}\n          data-testid={testId ? `${testId}-trigger` : `collapsible-trigger-${id}`}\n        >\n          <div className=\"flex items-center gap-3 min-w-0 flex-1 text-left\">\n            {/* Chevron */}\n            {showChevron && (\n              <div className={cn(\n                \"flex-shrink-0 transition-transform duration-200\",\n                !collapsed && \"rotate-0\",\n                collapsed && \"-rotate-90\"\n              )}>\n                {collapsed ? activeChevronIcons.collapsed : activeChevronIcons.expanded}\n              </div>\n            )}\n\n            {/* Icon */}\n            {icon && (\n              <div className=\"flex-shrink-0\">\n                {icon}\n              </div>\n            )}\n\n            {/* Title and description */}\n            <div className=\"min-w-0 flex-1\">\n              <div className=\"flex items-center gap-2\">\n                <h3 className=\"font-medium text-foreground text-sm leading-tight truncate\">\n                  {title}\n                </h3>\n                {badge !== undefined && (\n                  <Badge \n                    variant={badgeVariant}\n                    className=\"text-xs flex-shrink-0\"\n                    data-testid={testId ? `${testId}-badge` : `collapsible-badge-${id}`}\n                  >\n                    {badge}\n                  </Badge>\n                )}\n              </div>\n              {description && (\n                <p className=\"text-xs text-muted-foreground mt-0.5 line-clamp-2\">\n                  {description}\n                </p>\n              )}\n            </div>\n          </div>\n        </Button>\n      </CollapsibleTrigger>\n\n      <CollapsibleContent \n        className={cn(\n          \"overflow-hidden transition-all duration-200\",\n          \"data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down\",\n          contentClassName\n        )}\n        style={{\n          '--collapsible-animation-duration': `${animationDuration}ms`\n        } as React.CSSProperties}\n        data-testid={testId ? `${testId}-content` : `collapsible-content-${id}`}\n      >\n        <div className=\"pt-2 pb-1 px-3\">\n          {children}\n        </div>\n      </CollapsibleContent>\n    </Collapsible>\n  );\n}\n\nexport interface CollapsibleGroupProps {\n  /** Group title */\n  title?: string;\n  /** Group description */\n  description?: string;\n  /** Whether to show expand/collapse all controls */\n  showControls?: boolean;\n  /** Callback for expand all */\n  onExpandAll?: () => void;\n  /** Callback for collapse all */\n  onCollapseAll?: () => void;\n  /** Number of collapsed sections */\n  collapsedCount?: number;\n  /** Number of expanded sections */\n  expandedCount?: number;\n  /** Children (CollapsibleSection components) */\n  children: ReactNode;\n  /** Additional CSS classes */\n  className?: string;\n  /** Test ID for the component */\n  'data-testid'?: string;\n}\n\n/**\n * A container component for grouping collapsible sections with optional controls.\n */\nexport function CollapsibleGroup({\n  title,\n  description,\n  showControls = false,\n  onExpandAll,\n  onCollapseAll,\n  collapsedCount = 0,\n  expandedCount = 0,\n  children,\n  className,\n  'data-testid': testId,\n}: CollapsibleGroupProps) {\n  return (\n    <div className={cn(\"space-y-2\", className)} data-testid={testId}>\n      {(title || showControls) && (\n        <div className=\"flex items-center justify-between mb-4\">\n          {title && (\n            <div>\n              <h2 className=\"text-lg font-semibold text-foreground\">{title}</h2>\n              {description && (\n                <p className=\"text-sm text-muted-foreground\">{description}</p>\n              )}\n            </div>\n          )}\n          \n          {showControls && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs text-muted-foreground\">\n                {expandedCount} expanded, {collapsedCount} collapsed\n              </span>\n              <div className=\"flex gap-1\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onExpandAll}\n                  disabled={expandedCount === expandedCount + collapsedCount}\n                  data-testid={testId ? `${testId}-expand-all` : 'expand-all'}\n                >\n                  Expand All\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onCollapseAll}\n                  disabled={collapsedCount === expandedCount + collapsedCount}\n                  data-testid={testId ? `${testId}-collapse-all` : 'collapse-all'}\n                >\n                  Collapse All\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n      \n      <div className=\"space-y-2\">\n        {children}\n      </div>\n    </div>\n  );\n}","size_bytes":8133},"client/extract-icons.js":{"content":"import JSZip from 'jszip';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nasync function extractIcons() {\n  try {\n    console.log('Starting icon extraction...');\n    \n    // Read the zip file\n    const zipData = fs.readFileSync('../website_icons.zip');\n    const zip = new JSZip();\n    const contents = await zip.loadAsync(zipData);\n    \n    // Create icons directory\n    const iconsDir = path.join(__dirname, 'src', 'assets', 'icons');\n    if (!fs.existsSync(iconsDir)) {\n      fs.mkdirSync(iconsDir, { recursive: true });\n    }\n    \n    // Extract each file\n    const iconList = [];\n    for (const filename of Object.keys(contents.files)) {\n      const file = contents.files[filename];\n      \n      if (!file.dir && (filename.endsWith('.png') || filename.endsWith('.svg') || filename.endsWith('.jpg'))) {\n        console.log(`Extracting: ${filename}`);\n        \n        const content = await file.async('nodebuffer');\n        const outputPath = path.join(iconsDir, filename);\n        \n        // Create subdirectories if needed\n        const dir = path.dirname(outputPath);\n        if (!fs.existsSync(dir)) {\n          fs.mkdirSync(dir, { recursive: true });\n        }\n        \n        fs.writeFileSync(outputPath, content);\n        iconList.push({\n          filename: filename,\n          path: outputPath,\n          size: content.length\n        });\n      }\n    }\n    \n    console.log(`✅ Extracted ${iconList.length} icons successfully!`);\n    console.log('Icons:', iconList.map(i => i.filename));\n    \n    // Write icon manifest\n    fs.writeFileSync(\n      path.join(iconsDir, 'manifest.json'),\n      JSON.stringify(iconList, null, 2)\n    );\n    \n    return iconList;\n    \n  } catch (error) {\n    console.error('❌ Error extracting icons:', error);\n    throw error;\n  }\n}\n\nextractIcons()\n  .then(() => {\n    console.log('🎉 Icon extraction completed successfully!');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('💥 Icon extraction failed:', error);\n    process.exit(1);\n  });","size_bytes":2140},"client/src/assets/icons/index.ts":{"content":"// Centralized icon mapping system for Minecraft Bedrock Creator Suite\n// Maps semantic icon names to actual PNG file names\n\nexport const iconMap = {\n  // Navigation Icons\n  entityBuilder: 'armor_stand.png',\n  blockBuilder: 'brick.png',\n  itemBuilder: 'apple.png',\n  recipeBuilder: 'anvil-hammer.png',\n  lootBuilder: 'diamond.png',\n  biomeBuilder: 'brick.png', // terrain/block representation\n  spawnBuilder: 'egg.png',\n  textureCreator: 'brush.png',\n  scriptStudio: 'minecart_command_block.png',\n  addonPackager: 'bundle.png',\n  validator: 'book_enchanted.png',\n  externalTools: 'anvil-crossout.png',\n  documentation: 'book_normal.png',\n  coreConcepts: 'book_portfolio.png',\n  community: 'banner_pattern.png',\n  omniScience: 'nether_star.png',\n  \n  // Action Icons\n  add: 'arrow_large.png',\n  remove: 'arrowLeft.png', \n  edit: 'book_writable.png',\n  delete: 'brick.png', // block barrier representation\n  settings: 'anvil-arrow.png',\n  save: 'auto_save.png',\n  export: 'auto_save.png',\n  import: 'bundle.png',\n  copy: 'book_written.png',\n  download: 'bundle.png',\n  folder: 'bundle.png', // folder icon for documentation\n  \n  // Tool Icons (TextureCreator)\n  brush: 'brush.png',\n  pencil: 'feather.png',\n  eraser: 'clay_ball.png', // placeholder for eraser\n  fill: 'bucket_water.png',\n  rectangle: 'brick.png',\n  circle: 'ender_pearl.png', // round object\n  line: 'arrow.png',\n  select: 'fishing_rod_uncast.png', // pointing tool\n  \n  // Feature Icons (Welcome page)\n  dragon: 'egg_null.png', // entity icon\n  blocks: 'brick.png',\n  textures: 'brush.png',\n  scripts: 'redstone_dust.png',\n  docs: 'book_normal.png',\n  packages: 'bundle.png',\n  \n  // External Tools\n  blockbench: 'diamond_pickaxe.png', // modeling tool\n  bridgeCore: 'bamboo_door.png', // bridge-like structure\n  snowstorm: 'bucket_powder_snow.png', // particle effects/snow\n  pixilart: 'brush.png', // pixel art editor\n  \n  // Category Icons (Registries)\n  core: 'anvil-hammer.png', // ⚙️\n  movement: 'gold_boots.png', // 🏃 movement/speed\n  behavior: 'book_enchanted.png', // 🧠 intelligence/behavior\n  interaction: 'carrot_golden.png', // 🤝 interaction/reward \n  environment: 'bamboo.png', // 🌍 nature/environment\n  visual: 'brush.png', // 🎨\n  utility: 'anvil-crossout.png', // 🔧\n  physics: 'nether_star.png', // ⚛️ placeholder\n  lighting: 'glowstone_dust.png', // 💡\n  transformation: 'clock_item.png', // 🔄 placeholder\n  redstone: 'redstone_dust.png', // 🔴\n  placement: 'compass_item.png', // 📐 placeholder\n  loot: 'diamond.png', // 💎\n  states: 'comparator.png', // 🔢 placeholder\n} as const;\n\n// Type for all available icon names\nexport type IconName = keyof typeof iconMap;\n\n// Helper function to get icon file name from semantic name\nexport function getIconPath(iconName: IconName): string {\n  return iconMap[iconName];\n}\n\n// Validation helper to check if icon exists\nexport function isValidIcon(iconName: string): iconName is IconName {\n  return iconName in iconMap;\n}\n\n// Development-time validation function to check if mapped files exist\nexport function validateIconMappings(): Promise<{ valid: boolean; missing: string[]; results: Record<string, boolean> }> {\n  const results: Record<string, boolean> = {};\n  const missing: string[] = [];\n  \n  const validationPromises = Object.entries(iconMap).map(async ([iconName, fileName]) => {\n    try {\n      const response = await fetch(`/icons/website-icons/${fileName}`, { method: 'HEAD' });\n      const exists = response.ok;\n      results[iconName] = exists;\n      if (!exists) {\n        missing.push(`${iconName} -> ${fileName}`);\n      }\n      return exists;\n    } catch {\n      results[iconName] = false;\n      missing.push(`${iconName} -> ${fileName} (network error)`);\n      return false;\n    }\n  });\n  \n  return Promise.all(validationPromises).then(validations => ({\n    valid: validations.every(Boolean),\n    missing,\n    results\n  }));\n}\n\n// Runtime icon existence check with fallback\nexport function getValidatedIconPath(iconName: IconName): string {\n  const fileName = iconMap[iconName];\n  \n  // In development, warn about potential issues\n  if (import.meta.env.DEV) {\n    // Use a simple check without async for runtime usage\n    const img = new Image();\n    img.onerror = () => {\n      console.warn(`Icon file not found: ${iconName} -> ${fileName}`);\n    };\n    img.src = `/icons/website-icons/${fileName}`;\n  }\n  \n  return fileName;\n}\n\n// Type-safe icon validation\nexport function assertValidIcon(iconName: string): asserts iconName is IconName {\n  if (!isValidIcon(iconName)) {\n    throw new Error(`Invalid icon name: ${iconName}. Available icons: ${Object.keys(iconMap).join(', ')}`);\n  }\n}","size_bytes":4668},"client/src/components/Documentation/Documentation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { \n  Search, BookOpen, Rocket, Layers, Package, Code, Image, \n  Zap, Wrench, Lightbulb, AlertTriangle, Star, Filter,\n  ChevronRight, ArrowRight, Copy, ExternalLink, Eye,\n  FileText, Settings, Target, Shield, Clock, Users\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SimpleCollapsibleTabs, CollapsibleTab } from \"@/components/ui/collapsible-tabs\";\n\n// Import existing documentation components\nimport CoreConcepts from \"./CoreConcepts\";\nimport EntityDocs from \"./EntityDocs\";\nimport BlockDocs from \"./BlockDocs\";\nimport ItemDocs from \"./ItemDocs\";\nimport ScriptingDocs from \"./ScriptingDocs\";\nimport QuickStart from \"../Tutorial/QuickStart\";\nimport InteractiveTutorial from \"../Tutorial/InteractiveTutorial\";\n\n// New component imports (to be created)\nimport GettingStartedTab from \"./tabs/GettingStartedTab\";\nimport EntityDevelopmentTab from \"./tabs/EntityDevelopmentTab\";\nimport BlockDevelopmentTab from \"./tabs/BlockDevelopmentTab\";\nimport ItemDevelopmentTab from \"./tabs/ItemDevelopmentTab\";\nimport ScriptingApiTab from \"./tabs/ScriptingApiTab\";\nimport ResourcePacksTab from \"./tabs/ResourcePacksTab\";\nimport BehaviorPacksTab from \"./tabs/BehaviorPacksTab\";\nimport AdvancedTopicsTab from \"./tabs/AdvancedTopicsTab\";\nimport BestPracticesTab from \"./tabs/BestPracticesTab\";\nimport TroubleshootingTab from \"./tabs/TroubleshootingTab\";\n\ninterface DocumentationProps {\n  onNavigate?: (section: string) => void;\n  initialTab?: string;\n}\n\nexport default function Documentation({ onNavigate, initialTab = 'getting-started' }: DocumentationProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [globalSearchResults, setGlobalSearchResults] = useState<any[]>([]);\n  const [showGlobalSearch, setShowGlobalSearch] = useState(false);\n  const [readingProgress, setReadingProgress] = useState<Record<string, number>>({});\n  const [bookmarks, setBookmarks] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  // Handle initialTab for auto-expanding specific sections\n  useEffect(() => {\n    if (initialTab && initialTab !== 'getting-started') {\n      // When navigating from sidebar, expand the specific tab\n      const storageKey = 'simple-tabs-documentation';\n      const currentCollapsed = localStorage.getItem(storageKey);\n      let collapsedState: Record<string, boolean> = {};\n      \n      if (currentCollapsed) {\n        try {\n          collapsedState = JSON.parse(currentCollapsed);\n        } catch (e) {\n          collapsedState = {};\n        }\n      }\n      \n      // Ensure the target tab is expanded\n      collapsedState[initialTab] = false;\n      localStorage.setItem(storageKey, JSON.stringify(collapsedState));\n      \n      // Small delay to ensure the component renders with updated state\n      setTimeout(() => {\n        const targetElement = document.querySelector(`[data-testid=\"simple-tab-trigger-${initialTab}\"]`);\n        if (targetElement) {\n          targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 100);\n    }\n  }, [initialTab]);\n\n  // Documentation tab configuration\n  const documentationTabs = [\n    {\n      id: 'getting-started',\n      title: 'Getting Started',\n      icon: Rocket,\n      emoji: '🚀',\n      description: 'Setup, first steps, and basic concepts',\n      difficulty: 'beginner' as const,\n      estimatedTime: '30 min',\n      completion: readingProgress['getting-started'] || 0\n    },\n    {\n      id: 'entity-development',\n      title: 'Entity Development',\n      icon: Target,\n      emoji: '🏗️',\n      description: 'Creating custom entities, behaviors, and AI',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '2 hours',\n      completion: readingProgress['entity-development'] || 0\n    },\n    {\n      id: 'block-development',\n      title: 'Block Development',\n      icon: Package,\n      emoji: '🧱',\n      description: 'Custom blocks, mechanics, and interactions',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '1.5 hours',\n      completion: readingProgress['block-development'] || 0\n    },\n    {\n      id: 'item-development',\n      title: 'Item Development',\n      icon: Shield,\n      emoji: '📦',\n      description: 'Items, tools, armor, and special mechanics',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '1.5 hours',\n      completion: readingProgress['item-development'] || 0\n    },\n    {\n      id: 'scripting-apis',\n      title: 'Scripting & APIs',\n      icon: Code,\n      emoji: '💻',\n      description: 'JavaScript/TypeScript scripting and API reference',\n      difficulty: 'advanced' as const,\n      estimatedTime: '3 hours',\n      completion: readingProgress['scripting-apis'] || 0\n    },\n    {\n      id: 'resource-packs',\n      title: 'Resource Packs',\n      icon: Image,\n      emoji: '🎨',\n      description: 'Textures, models, animations, and visual assets',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '2 hours',\n      completion: readingProgress['resource-packs'] || 0\n    },\n    {\n      id: 'behavior-packs',\n      title: 'Behavior Packs',\n      icon: Settings,\n      emoji: '⚡',\n      description: 'Game rules, loot tables, recipes, and worldgen',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '2 hours',\n      completion: readingProgress['behavior-packs'] || 0\n    },\n    {\n      id: 'advanced-topics',\n      title: 'Advanced Topics',\n      icon: Layers,\n      emoji: '🛠️',\n      description: 'Performance, architecture, and complex patterns',\n      difficulty: 'advanced' as const,\n      estimatedTime: '2 hours',\n      completion: readingProgress['advanced-topics'] || 0\n    },\n    {\n      id: 'best-practices',\n      title: 'Best Practices',\n      icon: Lightbulb,\n      emoji: '📚',\n      description: 'Organization, testing, and deployment guidelines',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '1 hour',\n      completion: readingProgress['best-practices'] || 0\n    },\n    {\n      id: 'troubleshooting',\n      title: 'Troubleshooting',\n      icon: AlertTriangle,\n      emoji: '🔧',\n      description: 'Common errors, debugging, and solutions',\n      difficulty: 'beginner' as const,\n      estimatedTime: '45 min',\n      completion: readingProgress['troubleshooting'] || 0\n    }\n  ];\n\n  // Load reading progress from localStorage\n  useEffect(() => {\n    const savedProgress = localStorage.getItem('documentation-progress');\n    if (savedProgress) {\n      setReadingProgress(JSON.parse(savedProgress));\n    }\n    \n    const savedBookmarks = localStorage.getItem('documentation-bookmarks');\n    if (savedBookmarks) {\n      setBookmarks(JSON.parse(savedBookmarks));\n    }\n  }, []);\n\n  // Save reading progress to localStorage\n  const updateProgress = (tabId: string, progress: number) => {\n    const newProgress = { ...readingProgress, [tabId]: progress };\n    setReadingProgress(newProgress);\n    localStorage.setItem('documentation-progress', JSON.stringify(newProgress));\n  };\n\n  // Toggle bookmarks\n  const toggleBookmark = (tabId: string) => {\n    const newBookmarks = bookmarks.includes(tabId)\n      ? bookmarks.filter(id => id !== tabId)\n      : [...bookmarks, tabId];\n    setBookmarks(newBookmarks);\n    localStorage.setItem('documentation-bookmarks', JSON.stringify(newBookmarks));\n    \n    toast({\n      title: bookmarks.includes(tabId) ? \"Bookmark removed\" : \"Bookmark added\",\n      description: `${documentationTabs.find(tab => tab.id === tabId)?.title} ${bookmarks.includes(tabId) ? 'removed from' : 'added to'} bookmarks.`,\n    });\n  };\n\n  // Global search functionality\n  const performGlobalSearch = (term: string) => {\n    if (!term.trim()) {\n      setGlobalSearchResults([]);\n      setShowGlobalSearch(false);\n      return;\n    }\n\n    // This would be enhanced with actual search indexing\n    const results = documentationTabs.filter(tab => \n      tab.title.toLowerCase().includes(term.toLowerCase()) ||\n      tab.description.toLowerCase().includes(term.toLowerCase())\n    );\n    \n    setGlobalSearchResults(results);\n    setShowGlobalSearch(true);\n  };\n\n  // Difficulty colors\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  // Render individual tab content\n  const renderTabContent = (tabId: string) => {\n    switch (tabId) {\n      case 'getting-started':\n        return <GettingStartedTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('getting-started', progress)} />;\n      case 'entity-development':\n        return <EntityDevelopmentTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('entity-development', progress)} />;\n      case 'block-development':\n        return <BlockDevelopmentTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('block-development', progress)} />;\n      case 'item-development':\n        return <ItemDevelopmentTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('item-development', progress)} />;\n      case 'scripting-apis':\n        return <ScriptingApiTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('scripting-apis', progress)} />;\n      case 'resource-packs':\n        return <ResourcePacksTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('resource-packs', progress)} />;\n      case 'behavior-packs':\n        return <BehaviorPacksTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('behavior-packs', progress)} />;\n      case 'advanced-topics':\n        return <AdvancedTopicsTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('advanced-topics', progress)} />;\n      case 'best-practices':\n        return <BestPracticesTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('best-practices', progress)} />;\n      case 'troubleshooting':\n        return <TroubleshootingTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('troubleshooting', progress)} />;\n      default:\n        return <GettingStartedTab onNavigate={onNavigate} onProgressUpdate={(progress) => updateProgress('getting-started', progress)} />;\n    }\n  };\n\n  // Convert documentation tabs to CollapsibleTab format\n  const collapsibleTabs: CollapsibleTab[] = documentationTabs.map((tab) => ({\n    id: tab.id,\n    title: tab.title,\n    description: `${tab.description} • ${tab.difficulty} • ${tab.estimatedTime}`,\n    icon: (\n      <div className=\"flex items-center gap-2\">\n        <span className=\"text-lg\">{tab.emoji}</span>\n        <tab.icon className=\"h-4 w-4\" />\n      </div>\n    ),\n    badge: `${Math.round(tab.completion)}%`,\n    content: (\n      <div className=\"space-y-4\">\n        {/* Section header with progress and bookmark */}\n        <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 rounded-lg border\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-2xl\">{tab.emoji}</span>\n              <tab.icon className=\"h-5 w-5\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-bold\">{tab.title}</h3>\n              <p className=\"text-sm text-muted-foreground\">{tab.description}</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <Badge variant=\"outline\" className={getDifficultyColor(tab.difficulty)}>\n              {tab.difficulty}\n            </Badge>\n            <div className=\"text-right\">\n              <div className=\"text-xs text-muted-foreground\">Progress</div>\n              <div className=\"font-medium\">{Math.round(tab.completion)}%</div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleBookmark(tab.id);\n              }}\n              className=\"p-2\"\n              data-testid={`bookmark-${tab.id}`}\n            >\n              <Star className={`h-4 w-4 ${bookmarks.includes(tab.id) ? 'fill-yellow-400 text-yellow-400' : ''}`} />\n            </Button>\n          </div>\n        </div>\n\n        {/* Progress bar */}\n        <div className=\"space-y-1\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Reading Progress</span>\n            <span className=\"font-medium\">{Math.round(tab.completion)}%</span>\n          </div>\n          <Progress value={tab.completion} className=\"h-2\" />\n        </div>\n\n        {/* Tab content */}\n        <div className=\"min-h-96\">\n          {renderTabContent(tab.id)}\n        </div>\n      </div>\n    )\n  }));\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto p-6 space-y-6\" data-testid=\"documentation-hub\">\n      {/* Header */}\n      <div className=\"text-center space-y-4 mb-8\">\n        <div className=\"flex items-center justify-center gap-3 mb-4\">\n          <BookOpen className=\"h-8 w-8 text-blue-500\" />\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Minecraft Bedrock Documentation\n          </h1>\n        </div>\n        <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n          The complete guide to Minecraft Bedrock addon development. From beginner tutorials to advanced techniques,\n          everything you need to create amazing addons for Minecraft Bedrock Edition.\n        </p>\n        \n        {/* Global Search */}\n        <div className=\"relative max-w-2xl mx-auto\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search all documentation...\"\n            value={searchTerm}\n            onChange={(e) => {\n              setSearchTerm(e.target.value);\n              performGlobalSearch(e.target.value);\n            }}\n            className=\"pl-10 py-2 text-lg\"\n            data-testid=\"global-search-input\"\n          />\n          \n          {/* Global Search Results */}\n          {showGlobalSearch && globalSearchResults.length > 0 && (\n            <Card className=\"absolute top-full left-0 right-0 mt-2 z-50 max-h-96 overflow-auto\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm\">Search Results</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {globalSearchResults.map((result) => (\n                  <Button\n                    key={result.id}\n                    variant=\"ghost\"\n                    className=\"w-full justify-start h-auto p-3\"\n                    onClick={() => {\n                      // Close search and let user manually expand the section they want\n                      setShowGlobalSearch(false);\n                      setSearchTerm('');\n                    }}\n                    data-testid={`search-result-${result.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <result.icon className=\"h-5 w-5\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">{result.emoji} {result.title}</div>\n                        <div className=\"text-sm text-muted-foreground\">{result.description}</div>\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Collapsible Documentation Sections */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-semibold\">Documentation Sections</h2>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\" className=\"text-sm\">\n              {documentationTabs.length} Sections\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-sm\">\n              {bookmarks.length} Bookmarked\n            </Badge>\n          </div>\n        </div>\n\n        {/* Collapsible Documentation Tabs */}\n        <SimpleCollapsibleTabs\n          tabs={collapsibleTabs}\n          storageKey=\"documentation\"\n          title=\"Interactive Documentation Hub\"\n          description=\"Expand the sections you're working on. All sections can be open simultaneously for easy reference.\"\n          showGlobalControls={true}\n          data-testid=\"documentation-collapsible-tabs\"\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":17417},"client/src/components/ui/Icon.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\n// Icon size variants\nexport type IconSize = 'xs' | 'sm' | 'base' | 'lg' | 'xl' | 'nav' | 'toolbar' | 'tab' | 'action';\n\nconst sizeClasses: Record<IconSize, string> = {\n  xs: 'w-3 h-3', // 12px\n  sm: 'w-4 h-4', // 16px  \n  base: 'w-5 h-5', // 20px\n  lg: 'w-6 h-6', // 24px\n  xl: 'w-8 h-8', // 32px\n  nav: 'w-6 h-6', // 24px for navigation\n  toolbar: 'w-5 h-5', // 20px for toolbar\n  tab: 'w-4 h-4', // 18px for tabs (using 16px as closest)\n  action: 'w-4 h-4', // 16px for actions\n};\n\nexport interface IconProps {\n  name: string;\n  size?: IconSize;\n  className?: string;\n  alt?: string;\n}\n\n/**\n * Centralized Icon component for displaying custom Minecraft icons\n * Handles proper scaling and loading for 16x16 pixel art icons\n */\nexport function Icon({ name, size = 'base', className, alt }: IconProps) {\n  return (\n    <img\n      src={`/icons/website-icons/${name}`}\n      alt={alt || name.replace('.png', '').replace(/[-_]/g, ' ')}\n      className={cn(\n        sizeClasses[size],\n        'object-contain',\n        className\n      )}\n      style={{\n        imageRendering: 'pixelated', // Ensure crisp pixel art display\n        WebkitImageRendering: '-webkit-optimize-contrast',\n        MozImageRendering: '-moz-crisp-edges',\n      }}\n      data-testid={`icon-${name.replace('.png', '')}`}\n    />\n  );\n}\n\nexport default Icon;","size_bytes":1361},"client/src/components/Documentation/tabs/AdvancedTopicsTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Layers, Copy, ExternalLink, Filter, BookOpen, Zap, \n  Cpu, BarChart3, Network, Shield, Target, Settings,\n  ChevronRight, CheckCircle, AlertTriangle, Info, Lightbulb, \n  Clock, Activity, Database, Code, FileText, Wrench,\n  ArrowRight, TrendingUp, Brain, Users, Globe\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\ninterface AdvancedTopicsTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function AdvancedTopicsTab({ onNavigate, onProgressUpdate }: AdvancedTopicsTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Advanced topics\n  const advancedTopics = [\n    {\n      id: 'performance-optimization',\n      title: 'Performance Optimization',\n      description: 'Advanced techniques for optimizing addon performance',\n      difficulty: 'advanced' as const,\n      estimatedTime: '3 hours',\n      icon: TrendingUp,\n      content: {\n        overview: 'Performance optimization ensures your addons run smoothly without impacting game performance.',\n        strategies: [\n          'Entity optimization - Efficient AI and component usage',\n          'Script optimization - Memory management and execution',\n          'Asset optimization - Texture and model compression',\n          'Network optimization - Multiplayer performance',\n          'Memory management - Preventing memory leaks'\n        ],\n        metrics: [\n          'Frame rate impact assessment',\n          'Memory usage monitoring',\n          'Entity count optimization',\n          'Script execution profiling',\n          'Network bandwidth analysis'\n        ],\n        tools: [\n          'Minecraft profiler commands',\n          'Performance monitoring tools',\n          'Memory usage analyzers',\n          'Script debuggers',\n          'Network traffic monitors'\n        ]\n      }\n    },\n    {\n      id: 'custom-components',\n      title: 'Custom Component Development',\n      description: 'Creating reusable components and systems',\n      difficulty: 'advanced' as const,\n      estimatedTime: '4 hours',\n      icon: Layers,\n      content: {\n        overview: 'Custom components allow you to create modular, reusable systems that can be shared across projects.',\n        componentTypes: [\n          'Entity components - Reusable entity behaviors',\n          'Block components - Custom block functionality',\n          'Item components - Specialized item behaviors',\n          'UI components - Custom interface elements',\n          'System components - Cross-cutting concerns'\n        ],\n        designPrinciples: [\n          'Single responsibility principle',\n          'Dependency injection patterns',\n          'Event-driven architecture',\n          'State management patterns',\n          'Error handling strategies'\n        ],\n        patterns: [\n          'Factory patterns for component creation',\n          'Observer patterns for event handling',\n          'Strategy patterns for behavior variation',\n          'Decorator patterns for feature extension',\n          'Registry patterns for component management'\n        ]\n      }\n    },\n    {\n      id: 'architecture-patterns',\n      title: 'Complex Architecture Patterns',\n      description: 'Design patterns for large-scale addon development',\n      difficulty: 'advanced' as const,\n      estimatedTime: '3.5 hours',\n      icon: Brain,\n      content: {\n        overview: 'Architecture patterns help organize complex addons into maintainable, scalable systems.',\n        patterns: [\n          'Model-View-Controller (MVC) - Separation of concerns',\n          'Entity-Component-System (ECS) - Data-driven design',\n          'Observer pattern - Event-driven communication',\n          'Command pattern - Action encapsulation',\n          'State machine pattern - Complex state management'\n        ],\n        principles: [\n          'Separation of concerns',\n          'Dependency inversion',\n          'Open/closed principle',\n          'Interface segregation',\n          'Single responsibility'\n        ],\n        scalability: [\n          'Modular addon architecture',\n          'Plugin system design',\n          'Configuration management',\n          'Asset loading strategies',\n          'Performance monitoring'\n        ]\n      }\n    },\n    {\n      id: 'version-compatibility',\n      title: 'Version Compatibility Management',\n      description: 'Handling different Minecraft versions and format updates',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '2 hours',\n      icon: Shield,\n      content: {\n        overview: 'Version compatibility ensures your addons work across different Minecraft versions.',\n        strategies: [\n          'Format version management',\n          'Feature detection patterns',\n          'Graceful degradation',\n          'Version-specific implementations',\n          'Migration strategies'\n        ],\n        challenges: [\n          'API changes between versions',\n          'Deprecated component handling',\n          'New feature integration',\n          'Backward compatibility',\n          'Testing across versions'\n        ],\n        solutions: [\n          'Conditional feature loading',\n          'Version abstraction layers',\n          'Feature flag systems',\n          'Automated testing pipelines',\n          'Documentation versioning'\n        ]\n      }\n    },\n    {\n      id: 'memory-management',\n      title: 'Memory Management & Optimization',\n      description: 'Advanced memory optimization techniques',\n      difficulty: 'advanced' as const,\n      estimatedTime: '2.5 hours',\n      icon: Brain,\n      content: {\n        overview: 'Proper memory management prevents performance issues and crashes in complex addons.',\n        techniques: [\n          'Object pooling for frequent allocations',\n          'Garbage collection optimization',\n          'Memory leak detection and prevention',\n          'Efficient data structures',\n          'Resource cleanup strategies'\n        ],\n        monitoring: [\n          'Memory usage profiling',\n          'Leak detection tools',\n          'Performance metrics collection',\n          'Resource tracking systems',\n          'Automated testing for memory issues'\n        ],\n        patterns: [\n          'Lazy loading for large assets',\n          'Caching strategies for computed data',\n          'Weak references for event handlers',\n          'Resource disposal patterns',\n          'Memory-efficient algorithms'\n        ]\n      }\n    },\n    {\n      id: 'multiplayer-systems',\n      title: 'Multiplayer System Design',\n      description: 'Creating addons that work seamlessly in multiplayer',\n      difficulty: 'advanced' as const,\n      estimatedTime: '4 hours',\n      icon: Users,\n      content: {\n        overview: 'Multiplayer systems require careful consideration of networking, synchronization, and server performance.',\n        challenges: [\n          'State synchronization between clients',\n          'Network latency handling',\n          'Server authority patterns',\n          'Client prediction and rollback',\n          'Bandwidth optimization'\n        ],\n        patterns: [\n          'Client-server architecture',\n          'Event-driven networking',\n          'State replication systems',\n          'Conflict resolution strategies',\n          'Load balancing techniques'\n        ],\n        considerations: [\n          'Server performance impact',\n          'Network security concerns',\n          'Player experience consistency',\n          'Graceful disconnection handling',\n          'Cross-platform compatibility'\n        ]\n      }\n    }\n  ];\n\n  // Performance metrics and benchmarks\n  const performanceMetrics = [\n    {\n      category: 'Entity Performance',\n      metrics: [\n        { name: 'Entity Count', target: '< 100 active', description: 'Active entities with AI' },\n        { name: 'Component Updates', target: '< 1000/tick', description: 'Component updates per tick' },\n        { name: 'Pathfinding', target: '< 10 active', description: 'Concurrent pathfinding operations' },\n        { name: 'AI Complexity', target: '< 20 behaviors', description: 'Behaviors per entity' }\n      ]\n    },\n    {\n      category: 'Script Performance',\n      metrics: [\n        { name: 'Execution Time', target: '< 5ms/frame', description: 'Script execution per frame' },\n        { name: 'Memory Usage', target: '< 100MB', description: 'Script memory consumption' },\n        { name: 'Event Handlers', target: '< 50 active', description: 'Active event subscriptions' },\n        { name: 'API Calls', target: '< 1000/sec', description: 'API calls per second' }\n      ]\n    },\n    {\n      category: 'Asset Performance',\n      metrics: [\n        { name: 'Texture Memory', target: '< 256MB', description: 'Total texture memory' },\n        { name: 'Model Complexity', target: '< 1000 vertices', description: 'Vertices per model' },\n        { name: 'Animation Data', target: '< 50MB', description: 'Animation memory usage' },\n        { name: 'Audio Files', target: '< 100MB', description: 'Total audio memory' }\n      ]\n    }\n  ];\n\n  // Best practices by topic\n  const bestPractices = [\n    {\n      topic: 'Code Organization',\n      practices: [\n        'Use modular architecture with clear separation of concerns',\n        'Implement consistent naming conventions across all files',\n        'Create reusable components and utility functions',\n        'Document complex logic and architectural decisions',\n        'Use version control with meaningful commit messages'\n      ]\n    },\n    {\n      topic: 'Performance',\n      practices: [\n        'Profile regularly and optimize bottlenecks',\n        'Use object pooling for frequently created objects',\n        'Implement lazy loading for large assets',\n        'Cache expensive computations when possible',\n        'Monitor memory usage and prevent leaks'\n      ]\n    },\n    {\n      topic: 'Testing',\n      practices: [\n        'Write automated tests for critical functionality',\n        'Test across different game versions',\n        'Perform load testing with many entities',\n        'Test multiplayer scenarios thoroughly',\n        'Use continuous integration for automated testing'\n      ]\n    },\n    {\n      topic: 'Maintenance',\n      practices: [\n        'Keep dependencies up to date',\n        'Maintain comprehensive documentation',\n        'Plan for version migrations early',\n        'Monitor community feedback and bug reports',\n        'Provide clear update and migration guides'\n      ]\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"advanced-topics-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Advanced Topics</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Master advanced techniques for creating professional-grade addons. Learn performance optimization,\n          complex architecture patterns, and best practices for large-scale development.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"topics\" data-testid=\"tab-topics\">🚀 Advanced Topics</TabsTrigger>\n          <TabsTrigger value=\"performance\" data-testid=\"tab-performance\">📊 Performance</TabsTrigger>\n          <TabsTrigger value=\"patterns\" data-testid=\"tab-patterns\">🏗️ Patterns</TabsTrigger>\n          <TabsTrigger value=\"best-practices\" data-testid=\"tab-practices\">💡 Best Practices</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Layers className=\"h-5 w-5\" />\n                  Advanced Skills\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Topics Covered</span>\n                    <span className=\"font-medium\">6+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Design Patterns</span>\n                    <span className=\"font-medium\">15+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Optimization Techniques</span>\n                    <span className=\"font-medium\">25+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('script-studio')}\n                  data-testid=\"open-advanced-tools\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Advanced Tools\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Key Areas */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5\" />\n                  Key Areas\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Performance</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Architecture</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Memory Management</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Multiplayer</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Optimization</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Performance Tools\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Code className=\"h-4 w-4 mr-2\" />\n                  Architecture Guide\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Brain className=\"h-4 w-4 mr-2\" />\n                  Memory Profiler\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Network className=\"h-4 w-4 mr-2\" />\n                  Network Tools\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Advanced Development Principles */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Development Principles</CardTitle>\n              <CardDescription>Core principles for professional addon development</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n                    Performance First\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Design with performance in mind from the beginning\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Profile early and often</li>\n                    <li>• Optimize critical paths</li>\n                    <li>• Monitor resource usage</li>\n                    <li>• Test under load</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Layers className=\"h-4 w-4 text-green-500\" />\n                    Modular Architecture\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Build systems that are maintainable and extensible\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Separate concerns clearly</li>\n                    <li>• Use dependency injection</li>\n                    <li>• Design for testability</li>\n                    <li>• Plan for changes</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Shield className=\"h-4 w-4 text-purple-500\" />\n                    Robust Error Handling\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Handle failures gracefully and provide good user experience\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Anticipate failure modes</li>\n                    <li>• Provide meaningful errors</li>\n                    <li>• Implement recovery strategies</li>\n                    <li>• Log for debugging</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-orange-500\" />\n                    Multiplayer Awareness\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Design systems that work well in multiplayer environments\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Consider server performance</li>\n                    <li>• Handle network latency</li>\n                    <li>• Synchronize state properly</li>\n                    <li>• Test with multiple players</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Topics Tab */}\n        <TabsContent value=\"topics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {advancedTopics.map((topic) => (\n              <Card key={topic.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <topic.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                        <CardDescription>{topic.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={topic.difficulty === 'advanced' ? 'destructive' : 'secondary'}>\n                        {topic.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{topic.estimatedTime}</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm\">{topic.content.overview}</p>\n                  \n                  {topic.content.strategies && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Key Strategies</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.strategies.map((strategy, index) => (\n                          <li key={index}>• {strategy}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.componentTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Component Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.componentTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.patterns && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Design Patterns</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.patterns.map((pattern, index) => (\n                          <li key={index}>• {pattern}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.techniques && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Techniques</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.techniques.map((technique, index) => (\n                          <li key={index}>• {technique}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.challenges && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Challenges</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.challenges.map((challenge, index) => (\n                          <li key={index}>• {challenge}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Performance Tab */}\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Metrics & Benchmarks</CardTitle>\n              <CardDescription>Target metrics for optimal addon performance</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {performanceMetrics.map((category) => (\n                <div key={category.category} className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">{category.category}</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {category.metrics.map((metric, index) => (\n                      <div key={index} className=\"p-4 border rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h5 className=\"font-medium\">{metric.name}</h5>\n                          <Badge variant=\"outline\">{metric.target}</Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{metric.description}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Performance Tools */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Monitoring Tools</CardTitle>\n              <CardDescription>Tools and techniques for measuring addon performance</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <BarChart3 className=\"h-4 w-4 text-blue-500\" />\n                    Built-in Profiling\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Use Minecraft's built-in profiling commands\n                  </p>\n                  <CodePreview\n                    code=\"/execute run debug start\n/execute run debug stop\n/tick profiler start\n/tick profiler stop\"\n                    language=\"text\"\n                    title=\"Profiler Commands\"\n                  />\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Brain className=\"h-4 w-4 text-green-500\" />\n                    Memory Monitoring\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Script-based memory usage tracking\n                  </p>\n                  <CodePreview\n                    code={`// Memory usage tracking\nclass MemoryMonitor {\n  track(name, obj) {\n    const size = JSON.stringify(obj).length;\n    console.log(\\`\\${name}: \\${size} bytes\\`);\n  }\n}`}\n                    language=\"javascript\"\n                    title=\"Memory Monitor\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Patterns Tab */}\n        <TabsContent value=\"patterns\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Architecture Design Patterns</CardTitle>\n              <CardDescription>Proven patterns for complex addon development</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-6\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-3\">Entity-Component-System (ECS) Pattern</h4>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Separate data (components) from logic (systems) for better performance and maintainability.\n                  </p>\n                  <CodePreview\n                    code={`// ECS Implementation Example\nclass ComponentManager {\n  constructor() {\n    this.components = new Map();\n  }\n  \n  addComponent(entityId, componentType, data) {\n    if (!this.components.has(componentType)) {\n      this.components.set(componentType, new Map());\n    }\n    this.components.get(componentType).set(entityId, data);\n  }\n  \n  getComponent(entityId, componentType) {\n    return this.components.get(componentType)?.get(entityId);\n  }\n}\n\nclass MovementSystem {\n  update(componentManager) {\n    const positions = componentManager.components.get('Position');\n    const velocities = componentManager.components.get('Velocity');\n    \n    for (const [entityId, velocity] of velocities) {\n      const position = positions.get(entityId);\n      if (position) {\n        position.x += velocity.x;\n        position.y += velocity.y;\n        position.z += velocity.z;\n      }\n    }\n  }\n}`}\n                    language=\"javascript\"\n                    title=\"ECS Pattern Implementation\"\n                  />\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-3\">Observer Pattern for Events</h4>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Decouple event producers from consumers for flexible, maintainable event systems.\n                  </p>\n                  <CodePreview\n                    code={`// Observer Pattern Implementation\nclass EventEmitter {\n  constructor() {\n    this.listeners = new Map();\n  }\n  \n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  \n  emit(event, data) {\n    const callbacks = this.listeners.get(event);\n    if (callbacks) {\n      callbacks.forEach(callback => callback(data));\n    }\n  }\n  \n  off(event, callback) {\n    const callbacks = this.listeners.get(event);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n}\n\n// Usage\nconst gameEvents = new EventEmitter();\ngameEvents.on('playerJoin', (player) => {\n  console.log(\\`\\${player.name} joined the game\\`);\n});`}\n                    language=\"javascript\"\n                    title=\"Observer Pattern for Events\"\n                  />\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-3\">Factory Pattern for Component Creation</h4>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Standardize object creation with configurable factories for different component types.\n                  </p>\n                  <CodePreview\n                    code={`// Factory Pattern for Components\nclass ComponentFactory {\n  static create(type, config) {\n    switch (type) {\n      case 'health':\n        return new HealthComponent(config.maxHealth, config.currentHealth);\n      case 'movement':\n        return new MovementComponent(config.speed, config.acceleration);\n      case 'inventory':\n        return new InventoryComponent(config.size, config.items);\n      default:\n        throw new Error(\\`Unknown component type: \\${type}\\`);\n    }\n  }\n}\n\n// Component definitions\nclass HealthComponent {\n  constructor(maxHealth = 100, currentHealth = maxHealth) {\n    this.maxHealth = maxHealth;\n    this.currentHealth = currentHealth;\n  }\n}\n\nclass MovementComponent {\n  constructor(speed = 1, acceleration = 0.1) {\n    this.speed = speed;\n    this.acceleration = acceleration;\n  }\n}\n\n// Usage\nconst healthComp = ComponentFactory.create('health', { \n  maxHealth: 200, \n  currentHealth: 150 \n});`}\n                    language=\"javascript\"\n                    title=\"Factory Pattern Implementation\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Best Practices Tab */}\n        <TabsContent value=\"best-practices\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Development Best Practices</CardTitle>\n              <CardDescription>Essential practices for professional addon development</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {bestPractices.map((section) => (\n                <div key={section.topic} className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">{section.topic}</h4>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {section.practices.map((practice, index) => (\n                      <div key={index} className=\"flex items-start gap-3 p-3 border rounded-lg\">\n                        <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm\">{practice}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Advanced Testing Strategies */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Testing Strategies</CardTitle>\n              <CardDescription>Comprehensive testing approaches for complex addons</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Unit Testing</h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">Test individual components in isolation</p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Test component functionality</li>\n                    <li>• Mock external dependencies</li>\n                    <li>• Verify edge cases</li>\n                    <li>• Automated test execution</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Integration Testing</h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">Test component interactions</p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Test system integration</li>\n                    <li>• Verify data flow</li>\n                    <li>• Test event handling</li>\n                    <li>• Cross-component communication</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Performance Testing</h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">Validate performance requirements</p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Load testing with many entities</li>\n                    <li>• Memory usage validation</li>\n                    <li>• Frame rate impact measurement</li>\n                    <li>• Stress testing scenarios</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">User Acceptance Testing</h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">Validate real-world usage</p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Player experience testing</li>\n                    <li>• Multiplayer scenario testing</li>\n                    <li>• Different device testing</li>\n                    <li>• Community feedback integration</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":36317},"client/src/components/Documentation/tabs/BehaviorPacksTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Settings, Copy, ExternalLink, Filter, BookOpen, Zap, \n  Database, Trophy, Coins, MapPin, Hammer, Pickaxe, Target,\n  ChevronRight, CheckCircle, AlertTriangle, Info, Lightbulb, \n  Download, Upload, ArrowRight, Code, FileText, Cog,\n  Activity, BarChart3, Users, Globe, Clock\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\ninterface BehaviorPacksTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function BehaviorPacksTab({ onNavigate, onProgressUpdate }: BehaviorPacksTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Behavior pack topics\n  const behaviorTopics = [\n    {\n      id: 'game-rules',\n      title: 'Game Rules & Mechanics',\n      description: 'Modifying core game mechanics and rules',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '1.5 hours',\n      icon: Settings,\n      content: {\n        overview: 'Game rules allow you to modify fundamental Minecraft mechanics without scripting.',\n        ruleTypes: [\n          'Player mechanics - Health, hunger, movement',\n          'World generation - Ore distribution, biomes',\n          'Game modes - Custom survival/creative rules',\n          'Time and weather - Day/night cycles, seasons'\n        ],\n        examples: [\n          'Custom difficulty scaling',\n          'Modified player capabilities',\n          'Environmental changes',\n          'Resource availability'\n        ]\n      }\n    },\n    {\n      id: 'loot-tables',\n      title: 'Loot Table Systems',\n      description: 'Creating complex drop systems and rewards',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '2 hours',\n      icon: Trophy,\n      content: {\n        overview: 'Loot tables control what items drop from various sources in the game.',\n        lootSources: [\n          'Entity drops - Mob death rewards',\n          'Block drops - Mining and breaking',\n          'Container loot - Chests, dungeons',\n          'Fishing rewards - Custom catch tables'\n        ],\n        features: [\n          'Conditional drops based on tools',\n          'Random item selection with weights',\n          'Fortune and looting enchantment support',\n          'Complex condition combinations'\n        ]\n      }\n    },\n    {\n      id: 'recipe-systems',\n      title: 'Recipe & Crafting Systems',\n      description: 'Custom crafting recipes and item creation',\n      difficulty: 'beginner' as const,\n      estimatedTime: '1 hour',\n      icon: Hammer,\n      content: {\n        overview: 'Recipe systems allow players to craft custom items and modify existing recipes.',\n        recipeTypes: [\n          'Shaped crafting - Pattern-based recipes',\n          'Shapeless crafting - Ingredient-based recipes',\n          'Furnace recipes - Smelting and cooking',\n          'Brewing recipes - Potion creation'\n        ],\n        features: [\n          'Custom unlock conditions',\n          'Recipe book integration',\n          'Group organization',\n          'Batch crafting support'\n        ]\n      }\n    },\n    {\n      id: 'worldgen-features',\n      title: 'World Generation & Features',\n      description: 'Custom world generation and terrain features',\n      difficulty: 'advanced' as const,\n      estimatedTime: '3 hours',\n      icon: Globe,\n      content: {\n        overview: 'World generation features allow you to add custom structures and modify terrain.',\n        featureTypes: [\n          'Structure generation - Buildings, ruins',\n          'Ore distribution - Custom mineral placement',\n          'Biome features - Trees, plants, decoration',\n          'Terrain modification - Height maps, caves'\n        ],\n        complexity: [\n          'Simple feature placement',\n          'Conditional generation rules',\n          'Multi-block structures',\n          'Procedural generation systems'\n        ]\n      }\n    },\n    {\n      id: 'trading-systems',\n      title: 'Trading & Economy Systems',\n      description: 'Custom villager trades and economic mechanics',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '1.5 hours',\n      icon: Coins,\n      content: {\n        overview: 'Trading systems enable custom economic interactions between players and NPCs.',\n        tradeTypes: [\n          'Villager trades - Custom profession trades',\n          'Wandering trader - Special item trades',\n          'Custom NPCs - Scripted trading entities',\n          'Player markets - Community trading systems'\n        ],\n        mechanics: [\n          'Dynamic pricing systems',\n          'Supply and demand mechanics',\n          'Trade unlocking conditions',\n          'Reputation-based trading'\n        ]\n      }\n    },\n    {\n      id: 'spawn-biome-rules',\n      title: 'Spawn Rules & Biome Configuration',\n      description: 'Controlling entity spawning and biome properties',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '2 hours',\n      icon: MapPin,\n      content: {\n        overview: 'Spawn rules and biome configuration control where and when entities appear in the world.',\n        spawnControls: [\n          'Entity spawn conditions - Location, time, biome',\n          'Spawn density limits - Population control',\n          'Biome restrictions - Environment-specific spawning',\n          'Player proximity rules - Distance-based spawning'\n        ],\n        biomeFeatures: [\n          'Custom biome properties - Temperature, humidity',\n          'Biome-specific spawn rules',\n          'Environmental effects',\n          'Biome transition rules'\n        ]\n      }\n    }\n  ];\n\n  // Behavior pack creation workflow\n  const workflowSteps = [\n    {\n      id: 'planning-design',\n      title: '1. Planning & Design',\n      description: 'Define gameplay changes and mechanics',\n      icon: Lightbulb,\n      tasks: [\n        'Define gameplay objectives',\n        'Plan system interactions',\n        'Document behavior changes',\n        'Consider balance implications'\n      ]\n    },\n    {\n      id: 'core-implementation',\n      title: '2. Core Implementation',\n      description: 'Implement basic behavior modifications',\n      icon: Cog,\n      tasks: [\n        'Set up pack structure',\n        'Create manifest files',\n        'Implement core mechanics',\n        'Configure basic rules'\n      ]\n    },\n    {\n      id: 'system-integration',\n      title: '3. System Integration',\n      description: 'Connect different behavior systems',\n      icon: Activity,\n      tasks: [\n        'Link related systems',\n        'Balance interactions',\n        'Test system conflicts',\n        'Optimize performance'\n      ]\n    },\n    {\n      id: 'testing-balancing',\n      title: '4. Testing & Balancing',\n      description: 'Test gameplay and balance mechanics',\n      icon: BarChart3,\n      tasks: [\n        'Playtest all mechanics',\n        'Balance difficulty curves',\n        'Fix interaction bugs',\n        'Optimize spawn rates'\n      ]\n    },\n    {\n      id: 'polish-release',\n      title: '5. Polish & Release',\n      description: 'Final polish and community release',\n      icon: Upload,\n      tasks: [\n        'Polish user experience',\n        'Create documentation',\n        'Package for distribution',\n        'Gather community feedback'\n      ]\n    }\n  ];\n\n  // Quick reference for behavior pack components\n  const quickReference = [\n    {\n      category: 'Core Files',\n      items: [\n        { name: 'manifest.json', description: 'Pack metadata and dependencies' },\n        { name: 'pack_icon.png', description: 'Pack thumbnail image' },\n        { name: 'biomes/', description: 'Biome configuration files' },\n        { name: 'spawn_rules/', description: 'Entity spawn conditions' }\n      ]\n    },\n    {\n      category: 'Game Systems',\n      items: [\n        { name: 'loot_tables/', description: 'Drop and reward definitions' },\n        { name: 'recipes/', description: 'Crafting recipe definitions' },\n        { name: 'trading/', description: 'Villager and NPC trades' },\n        { name: 'features/', description: 'World generation features' }\n      ]\n    },\n    {\n      category: 'Entities & Blocks',\n      items: [\n        { name: 'entities/', description: 'Entity behavior definitions' },\n        { name: 'blocks/', description: 'Block behavior and properties' },\n        { name: 'items/', description: 'Item behavior and mechanics' },\n        { name: 'functions/', description: 'Command function files' }\n      ]\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"behavior-packs-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Behavior Packs</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Modify Minecraft's core gameplay mechanics with behavior packs. Create custom rules, recipes, loot tables,\n          and world generation features to transform how the game works.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"systems\" data-testid=\"tab-systems\">⚙️ Systems</TabsTrigger>\n          <TabsTrigger value=\"workflow\" data-testid=\"tab-workflow\">📋 Workflow</TabsTrigger>\n          <TabsTrigger value=\"examples\" data-testid=\"tab-examples\">💡 Examples</TabsTrigger>\n          <TabsTrigger value=\"reference\" data-testid=\"tab-reference\">📚 Reference</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Behavior Power\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">System Types</span>\n                    <span className=\"font-medium\">6+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Game Rules</span>\n                    <span className=\"font-medium\">50+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Recipe Types</span>\n                    <span className=\"font-medium\">10+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('builder-recipe')}\n                  data-testid=\"open-recipe-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Recipe Builder\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Key Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Key Features\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Custom Recipes</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Loot Tables</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Trading Systems</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">World Generation</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Spawn Rules</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Pack Template\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Hammer className=\"h-4 w-4 mr-2\" />\n                  Recipe Creator\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Trophy className=\"h-4 w-4 mr-2\" />\n                  Loot Designer\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Coins className=\"h-4 w-4 mr-2\" />\n                  Trade Editor\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Reference Sections */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {quickReference.map((section) => (\n              <Card key={section.category}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{section.category}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {section.items.map((item, index) => (\n                    <div key={index} className=\"space-y-1\">\n                      <div className=\"font-mono text-sm font-medium text-blue-600 dark:text-blue-400\">\n                        {item.name}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {item.description}\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Behavior Pack Systems */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Behavior Pack Systems</CardTitle>\n              <CardDescription>Core systems that behavior packs can modify and extend</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Settings className=\"h-4 w-4 text-blue-500\" />\n                    Core Mechanics\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Fundamental game rules and mechanics\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Player capabilities and limits</li>\n                    <li>• World physics and rules</li>\n                    <li>• Time and weather systems</li>\n                    <li>• Difficulty and progression</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Database className=\"h-4 w-4 text-green-500\" />\n                    Content Systems\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Item and content generation systems\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Crafting and recipe systems</li>\n                    <li>• Loot and reward distribution</li>\n                    <li>• Trading and economy</li>\n                    <li>• Item and block behaviors</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Globe className=\"h-4 w-4 text-purple-500\" />\n                    World Systems\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    World generation and environmental systems\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Terrain and biome generation</li>\n                    <li>• Structure placement</li>\n                    <li>• Feature distribution</li>\n                    <li>• Environmental effects</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-orange-500\" />\n                    Entity Systems\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Entity behavior and interaction systems\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Spawn rules and population</li>\n                    <li>• AI behavior patterns</li>\n                    <li>• Entity interactions</li>\n                    <li>• Player-entity relationships</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Systems Tab */}\n        <TabsContent value=\"systems\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {behaviorTopics.map((topic) => (\n              <Card key={topic.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <topic.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                        <CardDescription>{topic.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={topic.difficulty === 'advanced' ? 'destructive' : topic.difficulty === 'intermediate' ? 'secondary' : 'outline'}>\n                        {topic.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{topic.estimatedTime}</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm\">{topic.content.overview}</p>\n                  \n                  {topic.content.ruleTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Rule Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.ruleTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.lootSources && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Loot Sources</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.lootSources.map((source, index) => (\n                          <li key={index}>• {source}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.recipeTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Recipe Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.recipeTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.featureTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Feature Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.featureTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.tradeTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Trade Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.tradeTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.spawnControls && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Spawn Controls</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.spawnControls.map((control, index) => (\n                          <li key={index}>• {control}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Workflow Tab */}\n        <TabsContent value=\"workflow\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Behavior Pack Development Workflow</CardTitle>\n              <CardDescription>A systematic approach to creating comprehensive behavior packs</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {workflowSteps.map((step, index) => (\n                <div key={step.id} className=\"flex gap-4\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"flex items-center justify-center w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900\">\n                      <step.icon className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    {index < workflowSteps.length - 1 && (\n                      <div className=\"w-px h-16 bg-border mt-2\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 space-y-3\">\n                    <div>\n                      <h4 className=\"font-semibold text-lg\">{step.title}</h4>\n                      <p className=\"text-muted-foreground\">{step.description}</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {step.tasks.map((task, taskIndex) => (\n                        <div key={taskIndex} className=\"flex items-center gap-2 text-sm\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <span>{task}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Examples Tab */}\n        <TabsContent value=\"examples\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Custom Recipe */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Hammer className=\"h-5 w-5 text-orange-500\" />\n                  Custom Crafting Recipe\n                </CardTitle>\n                <CardDescription>Simple shaped crafting recipe for custom items</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">Beginner</Badge>\n                  <Badge variant=\"outline\">15 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:recipe_shaped\": {\n    \"description\": {\n      \"identifier\": \"my_addon:magic_wand_recipe\"\n    },\n    \"tags\": [\"crafting_table\"],\n    \"pattern\": [\n      \" D \",\n      \" S \",\n      \" S \"\n    ],\n    \"key\": {\n      \"D\": {\n        \"item\": \"minecraft:diamond\"\n      },\n      \"S\": {\n        \"item\": \"minecraft:stick\"\n      }\n    },\n    \"result\": {\n      \"item\": \"my_addon:magic_wand\",\n      \"count\": 1\n    }\n  }\n}`}\n                  language=\"json\"\n                  title=\"Magic Wand Recipe\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('builder-recipe')}\n                  data-testid=\"create-recipe\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Create Recipe\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Custom Loot Table */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Trophy className=\"h-5 w-5 text-yellow-500\" />\n                  Custom Loot Table\n                </CardTitle>\n                <CardDescription>Advanced loot table with conditions and weights</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"secondary\">Intermediate</Badge>\n                  <Badge variant=\"outline\">25 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"item\",\n          \"name\": \"minecraft:diamond\",\n          \"weight\": 1,\n          \"conditions\": [\n            {\n              \"condition\": \"random_chance\",\n              \"chance\": 0.1\n            }\n          ]\n        },\n        {\n          \"type\": \"item\",\n          \"name\": \"minecraft:emerald\",\n          \"weight\": 3,\n          \"functions\": [\n            {\n              \"function\": \"set_count\",\n              \"count\": {\n                \"min\": 1,\n                \"max\": 3\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}`}\n                  language=\"json\"\n                  title=\"Treasure Chest Loot\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('builder-loot')}\n                  data-testid=\"create-loot-table\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Create Loot Table\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Reference Tab */}\n        <TabsContent value=\"reference\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Behavior Pack File Structure</CardTitle>\n              <CardDescription>Complete reference for organizing behavior pack files</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-gray-50 dark:bg-gray-900 p-4 rounded-lg\">\n                <pre className=\"text-sm font-mono\">\n{`behavior_pack/\n├── manifest.json                    # Pack metadata\n├── pack_icon.png                   # Pack thumbnail\n├── biomes/                         # Biome definitions\n│   └── custom_biome.json\n├── entities/                       # Entity behaviors\n│   └── custom_entity.json\n├── loot_tables/                    # Drop tables\n│   ├── blocks/\n│   ├── entities/\n│   └── chests/\n├── recipes/                        # Crafting recipes\n│   ├── shaped/\n│   ├── shapeless/\n│   └── furnace/\n├── spawn_rules/                    # Entity spawning\n│   └── custom_spawn.json\n├── trading/                        # Villager trades\n│   └── trades.json\n├── features/                       # World generation\n│   └── custom_feature.json\n├── feature_rules/                  # Feature placement\n│   └── placement_rules.json\n├── items/                          # Item behaviors\n│   └── custom_item.json\n├── blocks/                         # Block behaviors\n│   └── custom_block.json\n└── functions/                      # Command functions\n    └── setup.mcfunction`}\n                </pre>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Common Patterns */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Common Behavior Patterns</CardTitle>\n              <CardDescription>Frequently used patterns and best practices</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">Recipe Patterns</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Tool Recipes</h5>\n                      <p className=\"text-sm text-muted-foreground\">Standard tool crafting patterns</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Armor Recipes</h5>\n                      <p className=\"text-sm text-muted-foreground\">Helmet, chestplate, leggings, boots</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Block Recipes</h5>\n                      <p className=\"text-sm text-muted-foreground\">Building and decorative blocks</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">Loot Patterns</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Conditional Drops</h5>\n                      <p className=\"text-sm text-muted-foreground\">Tool and enchantment requirements</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Weighted Drops</h5>\n                      <p className=\"text-sm text-muted-foreground\">Rare vs common item distribution</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Quantity Ranges</h5>\n                      <p className=\"text-sm text-muted-foreground\">Variable drop amounts</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":33584},"client/src/components/Documentation/tabs/BestPracticesTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Lightbulb, Copy, ExternalLink, Filter, BookOpen, Target, \n  CheckCircle, FileText, Code, Database, Shield, Users, Settings,\n  ChevronRight, AlertTriangle, Info, Clock, Activity, BarChart3,\n  Download, Upload, ArrowRight, Wrench, Eye, Layers, Globe,\n  Star, Award, TrendingUp, GitBranch, TestTube\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\ninterface BestPracticesTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function BestPracticesTab({ onNavigate, onProgressUpdate }: BestPracticesTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Best practices categories\n  const practiceCategories = [\n    {\n      id: 'code-organization',\n      title: 'Code Organization & Structure',\n      description: 'Organizing code for maintainability and scalability',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '1 hour',\n      icon: FileText,\n      content: {\n        overview: 'Proper code organization is essential for maintaining large addons and collaborating with others.',\n        principles: [\n          'Single Responsibility Principle - Each file/function has one job',\n          'Don\\'t Repeat Yourself (DRY) - Avoid code duplication',\n          'Keep It Simple, Stupid (KISS) - Prefer simple solutions',\n          'Separation of Concerns - Separate different aspects of functionality',\n          'Consistent Naming Conventions - Use clear, descriptive names'\n        ],\n        structure: [\n          'Logical folder hierarchy based on functionality',\n          'Consistent file naming conventions',\n          'Clear separation between data and logic',\n          'Reusable utility modules',\n          'Configuration files for settings'\n        ],\n        examples: [\n          'entities/ - All entity-related files',\n          'blocks/ - Block definitions and behaviors',\n          'utils/ - Shared utility functions',\n          'config/ - Configuration and constants',\n          'tests/ - Test files and test data'\n        ]\n      }\n    },\n    {\n      id: 'testing-methodologies',\n      title: 'Testing Methodologies',\n      description: 'Comprehensive testing strategies for addon reliability',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '2 hours',\n      icon: TestTube,\n      content: {\n        overview: 'Testing ensures your addons work correctly across different scenarios and game versions.',\n        testingTypes: [\n          'Unit Testing - Test individual components in isolation',\n          'Integration Testing - Test component interactions',\n          'Performance Testing - Validate performance requirements',\n          'User Acceptance Testing - Test real-world usage scenarios',\n          'Regression Testing - Ensure changes don\\'t break existing functionality'\n        ],\n        strategies: [\n          'Test-Driven Development (TDD) approach',\n          'Automated testing pipelines',\n          'Mock objects for external dependencies',\n          'Test data management',\n          'Continuous integration testing'\n        ],\n        tools: [\n          'Custom testing frameworks for Minecraft',\n          'Automated testing scripts',\n          'Performance monitoring tools',\n          'Version compatibility testing',\n          'Community feedback collection'\n        ]\n      }\n    },\n    {\n      id: 'version-control',\n      title: 'Version Control & Collaboration',\n      description: 'Managing code changes and team collaboration',\n      difficulty: 'beginner' as const,\n      estimatedTime: '45 min',\n      icon: GitBranch,\n      content: {\n        overview: 'Version control enables safe code changes, collaboration, and release management.',\n        practices: [\n          'Meaningful commit messages describing changes',\n          'Feature branches for new development',\n          'Regular commits with small, focused changes',\n          'Code reviews before merging changes',\n          'Tagged releases for stable versions'\n        ],\n        workflow: [\n          'Clone repository and create feature branch',\n          'Make changes and test thoroughly',\n          'Commit changes with descriptive messages',\n          'Submit pull request for review',\n          'Merge after approval and testing'\n        ],\n        collaboration: [\n          'Clear documentation for contributors',\n          'Coding standards and style guides',\n          'Issue tracking for bugs and features',\n          'Regular team communication',\n          'Knowledge sharing sessions'\n        ]\n      }\n    },\n    {\n      id: 'deployment-strategies',\n      title: 'Deployment & Distribution',\n      description: 'Best practices for releasing and distributing addons',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '1.5 hours',\n      icon: Upload,\n      content: {\n        overview: 'Proper deployment ensures users can easily install and use your addons.',\n        strategies: [\n          'Semantic versioning for releases',\n          'Automated build and packaging',\n          'Beta testing with community',\n          'Rollback plans for problematic releases',\n          'Multi-platform compatibility testing'\n        ],\n        packaging: [\n          'Clean build processes',\n          'Asset optimization before packaging',\n          'Manifest validation and testing',\n          'Package size optimization',\n          'Installation instructions and documentation'\n        ],\n        distribution: [\n          'Multiple distribution channels',\n          'Clear installation guides',\n          'Version compatibility documentation',\n          'Community support channels',\n          'Update notification systems'\n        ]\n      }\n    },\n    {\n      id: 'performance-optimization',\n      title: 'Performance & Optimization',\n      description: 'Ensuring addons run efficiently without impacting gameplay',\n      difficulty: 'advanced' as const,\n      estimatedTime: '2 hours',\n      icon: TrendingUp,\n      content: {\n        overview: 'Performance optimization ensures addons enhance rather than degrade the Minecraft experience.',\n        principles: [\n          'Profile before optimizing - Measure actual performance',\n          'Optimize the critical path first',\n          'Cache expensive computations',\n          'Use efficient algorithms and data structures',\n          'Monitor resource usage continuously'\n        ],\n        techniques: [\n          'Entity pooling for frequently spawned objects',\n          'Lazy loading for large assets',\n          'Batch operations where possible',\n          'Efficient memory management',\n          'Network optimization for multiplayer'\n        ],\n        monitoring: [\n          'Frame rate impact measurement',\n          'Memory usage tracking',\n          'Entity count monitoring',\n          'Script execution profiling',\n          'User experience metrics'\n        ]\n      }\n    },\n    {\n      id: 'community-guidelines',\n      title: 'Community & Documentation',\n      description: 'Building community and maintaining excellent documentation',\n      difficulty: 'beginner' as const,\n      estimatedTime: '1 hour',\n      icon: Users,\n      content: {\n        overview: 'Strong community and documentation practices ensure long-term success of addon projects.',\n        documentation: [\n          'Clear README with installation instructions',\n          'API documentation for developers',\n          'User guides with examples',\n          'Changelog for version updates',\n          'Troubleshooting guides for common issues'\n        ],\n        community: [\n          'Responsive support for user questions',\n          'Regular communication about updates',\n          'Community feedback collection',\n          'Contribution guidelines for collaborators',\n          'Recognition of community contributors'\n        ],\n        maintenance: [\n          'Regular updates for game version compatibility',\n          'Bug fix responsiveness',\n          'Feature request evaluation process',\n          'Security update procedures',\n          'End-of-life planning for old versions'\n        ]\n      }\n    }\n  ];\n\n  // Quality checklists\n  const qualityChecklists = [\n    {\n      category: 'Code Quality',\n      items: [\n        { text: 'Code follows consistent naming conventions', critical: true },\n        { text: 'Functions are focused and do one thing well', critical: true },\n        { text: 'Code is properly commented and documented', critical: false },\n        { text: 'No hardcoded values, use configuration files', critical: false },\n        { text: 'Error handling is implemented where needed', critical: true },\n        { text: 'Code is organized into logical modules', critical: false }\n      ]\n    },\n    {\n      category: 'Performance',\n      items: [\n        { text: 'Addon maintains stable frame rates', critical: true },\n        { text: 'Memory usage is within reasonable limits', critical: true },\n        { text: 'Entity counts are optimized', critical: true },\n        { text: 'Scripts execute efficiently', critical: true },\n        { text: 'Assets are optimized for size', critical: false },\n        { text: 'Multiplayer performance is tested', critical: false }\n      ]\n    },\n    {\n      category: 'Testing',\n      items: [\n        { text: 'All major features have been tested', critical: true },\n        { text: 'Edge cases and error conditions tested', critical: true },\n        { text: 'Performance testing completed', critical: true },\n        { text: 'Multiplayer functionality verified', critical: false },\n        { text: 'Cross-platform compatibility checked', critical: false },\n        { text: 'Automated tests implemented', critical: false }\n      ]\n    },\n    {\n      category: 'Documentation',\n      items: [\n        { text: 'Installation instructions are clear', critical: true },\n        { text: 'Feature documentation is complete', critical: true },\n        { text: 'API documentation is available', critical: false },\n        { text: 'Troubleshooting guide provided', critical: false },\n        { text: 'Changelog is maintained', critical: false },\n        { text: 'Contributing guidelines exist', critical: false }\n      ]\n    }\n  ];\n\n  // Common anti-patterns to avoid\n  const antiPatterns = [\n    {\n      title: 'God Objects',\n      description: 'Single files or classes that do too many things',\n      problems: ['Hard to maintain', 'Difficult to test', 'Poor reusability'],\n      solution: 'Break into smaller, focused modules with single responsibilities'\n    },\n    {\n      title: 'Magic Numbers',\n      description: 'Hardcoded values without explanation',\n      problems: ['Hard to modify', 'Unclear meaning', 'Error-prone'],\n      solution: 'Use named constants and configuration files for all values'\n    },\n    {\n      title: 'Copy-Paste Programming',\n      description: 'Duplicating code instead of creating reusable functions',\n      problems: ['Maintenance nightmare', 'Inconsistent behavior', 'Bug multiplication'],\n      solution: 'Extract common functionality into reusable utilities'\n    },\n    {\n      title: 'No Error Handling',\n      description: 'Not handling potential failure cases',\n      problems: ['Poor user experience', 'Crashes and instability', 'Difficult debugging'],\n      solution: 'Implement comprehensive error handling and graceful degradation'\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"best-practices-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Best Practices</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Master the best practices for professional Minecraft Bedrock addon development. Learn code organization,\n          testing methodologies, deployment strategies, and community management for successful projects.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"practices\" data-testid=\"tab-practices\">📋 Practices</TabsTrigger>\n          <TabsTrigger value=\"checklists\" data-testid=\"tab-checklists\">✅ Checklists</TabsTrigger>\n          <TabsTrigger value=\"anti-patterns\" data-testid=\"tab-anti-patterns\">🚫 Anti-Patterns</TabsTrigger>\n          <TabsTrigger value=\"resources\" data-testid=\"tab-resources\">📚 Resources</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Lightbulb className=\"h-5 w-5\" />\n                  Best Practices\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Practice Areas</span>\n                    <span className=\"font-medium\">6+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Quality Checks</span>\n                    <span className=\"font-medium\">24+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Anti-Patterns</span>\n                    <span className=\"font-medium\">10+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('validator')}\n                  data-testid=\"open-validator\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Validator\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Key Areas */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Focus Areas\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Code Quality</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Testing</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Performance</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Documentation</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Community</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Quality Checklist\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <TestTube className=\"h-4 w-4 mr-2\" />\n                  Testing Guide\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <GitBranch className=\"h-4 w-4 mr-2\" />\n                  Version Control\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                  Performance Tips\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Development Principles */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Core Development Principles</CardTitle>\n              <CardDescription>Fundamental principles that guide professional addon development</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Star className=\"h-4 w-4 text-yellow-500\" />\n                    Quality First\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Prioritize code quality and user experience over speed of development\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Write clean, readable code</li>\n                    <li>• Test thoroughly before release</li>\n                    <li>• Document your work</li>\n                    <li>• Consider edge cases</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-blue-500\" />\n                    User-Centered Design\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Always consider the end user's experience and needs\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Clear installation processes</li>\n                    <li>• Intuitive user interfaces</li>\n                    <li>• Helpful error messages</li>\n                    <li>• Responsive support</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                    Continuous Improvement\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Always look for ways to improve and optimize your work\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Regular performance reviews</li>\n                    <li>• Community feedback integration</li>\n                    <li>• Stay updated with best practices</li>\n                    <li>• Refactor when necessary</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Shield className=\"h-4 w-4 text-purple-500\" />\n                    Security & Stability\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Ensure your addons are secure and don't compromise game stability\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Validate all inputs</li>\n                    <li>• Handle errors gracefully</li>\n                    <li>• Test for edge cases</li>\n                    <li>• Monitor performance impact</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Development Lifecycle */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Professional Development Lifecycle</CardTitle>\n              <CardDescription>The complete process for developing high-quality addons</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mb-2\">\n                    <Lightbulb className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Planning</h4>\n                  <p className=\"text-xs text-muted-foreground\">Define requirements and architecture</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-2\">\n                    <Code className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Development</h4>\n                  <p className=\"text-xs text-muted-foreground\">Write clean, well-organized code</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center mb-2\">\n                    <TestTube className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Testing</h4>\n                  <p className=\"text-xs text-muted-foreground\">Comprehensive testing and validation</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mb-2\">\n                    <Upload className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Deployment</h4>\n                  <p className=\"text-xs text-muted-foreground\">Release and distribution</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center mb-2\">\n                    <Wrench className=\"h-6 w-6 text-red-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Maintenance</h4>\n                  <p className=\"text-xs text-muted-foreground\">Updates and community support</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Practices Tab */}\n        <TabsContent value=\"practices\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {practiceCategories.map((category) => (\n              <Card key={category.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <category.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{category.title}</CardTitle>\n                        <CardDescription>{category.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={category.difficulty === 'advanced' ? 'destructive' : category.difficulty === 'intermediate' ? 'secondary' : 'outline'}>\n                        {category.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{category.estimatedTime}</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm\">{category.content.overview}</p>\n                  \n                  {category.content.principles && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Key Principles</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {category.content.principles.map((principle, index) => (\n                          <li key={index}>• {principle}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {category.content.testingTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Testing Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {category.content.testingTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {category.content.practices && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Best Practices</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {category.content.practices.map((practice, index) => (\n                          <li key={index}>• {practice}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {category.content.strategies && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Strategies</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {category.content.strategies.map((strategy, index) => (\n                          <li key={index}>• {strategy}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {category.content.techniques && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Techniques</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {category.content.techniques.map((technique, index) => (\n                          <li key={index}>• {technique}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {category.content.documentation && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Documentation</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {category.content.documentation.map((doc, index) => (\n                          <li key={index}>• {doc}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Checklists Tab */}\n        <TabsContent value=\"checklists\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Quality Assurance Checklists</CardTitle>\n              <CardDescription>Comprehensive checklists to ensure addon quality before release</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {qualityChecklists.map((checklist) => (\n                <div key={checklist.category} className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">{checklist.category}</h4>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {checklist.items.map((item, index) => (\n                      <div key={index} className={`flex items-center gap-3 p-3 border rounded-lg ${item.critical ? 'border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-950' : 'border-border'}`}>\n                        <input \n                          type=\"checkbox\" \n                          className=\"h-4 w-4\" \n                          data-testid={`checklist-${checklist.category.toLowerCase()}-${index}`}\n                        />\n                        <span className=\"text-sm flex-1\">{item.text}</span>\n                        {item.critical && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">Critical</Badge>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Release Checklist */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Pre-Release Checklist</CardTitle>\n              <CardDescription>Final checks before releasing your addon to the community</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-3\">\n                  <h5 className=\"font-medium\">Technical Validation</h5>\n                  <div className=\"space-y-2\">\n                    {[\n                      'All manifest files are valid',\n                      'No syntax errors in JSON files',\n                      'All assets are properly linked',\n                      'Performance testing completed',\n                      'Memory usage is within limits',\n                      'Multiplayer functionality tested'\n                    ].map((item, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <input type=\"checkbox\" className=\"h-4 w-4\" />\n                        <span className=\"text-sm\">{item}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h5 className=\"font-medium\">User Experience</h5>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Installation instructions are clear',\n                      'User documentation is complete',\n                      'Error messages are helpful',\n                      'UI is intuitive and responsive',\n                      'Features work as expected',\n                      'Community feedback addressed'\n                    ].map((item, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <input type=\"checkbox\" className=\"h-4 w-4\" />\n                        <span className=\"text-sm\">{item}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Anti-Patterns Tab */}\n        <TabsContent value=\"anti-patterns\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Common Anti-Patterns to Avoid</CardTitle>\n              <CardDescription>Patterns that seem helpful but cause problems in the long run</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {antiPatterns.map((pattern, index) => (\n                  <div key={index} className=\"p-4 border border-red-200 dark:border-red-800 rounded-lg bg-red-50 dark:bg-red-950\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                      <h4 className=\"font-semibold text-red-800 dark:text-red-200\">{pattern.title}</h4>\n                    </div>\n                    <p className=\"text-sm text-red-700 dark:text-red-300 mb-3\">{pattern.description}</p>\n                    \n                    <div className=\"space-y-3\">\n                      <div>\n                        <h5 className=\"font-medium text-sm text-red-800 dark:text-red-200 mb-1\">Problems:</h5>\n                        <ul className=\"text-xs text-red-600 dark:text-red-400 space-y-1\">\n                          {pattern.problems.map((problem, pIndex) => (\n                            <li key={pIndex}>• {problem}</li>\n                          ))}\n                        </ul>\n                      </div>\n                      \n                      <div>\n                        <h5 className=\"font-medium text-sm text-green-800 dark:text-green-200 mb-1\">Solution:</h5>\n                        <p className=\"text-xs text-green-700 dark:text-green-300\">{pattern.solution}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Code Smells */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Code Smells & Warning Signs</CardTitle>\n              <CardDescription>Early warning signs that your code might need refactoring</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Structure Smells</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Files over 1000 lines long</li>\n                    <li>• Functions with 50+ lines</li>\n                    <li>• Deeply nested code (6+ levels)</li>\n                    <li>• Duplicate code in multiple places</li>\n                    <li>• Unclear variable names</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Performance Smells</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Frame drops during gameplay</li>\n                    <li>• Memory usage growing over time</li>\n                    <li>• Slow startup times</li>\n                    <li>• Laggy user interactions</li>\n                    <li>• High CPU usage when idle</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Maintenance Smells</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Fear of making changes</li>\n                    <li>• Bugs that keep coming back</li>\n                    <li>• Difficulty adding new features</li>\n                    <li>• Tests that break frequently</li>\n                    <li>• Complex deployment process</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Resources Tab */}\n        <TabsContent value=\"resources\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Additional Resources & Tools</CardTitle>\n              <CardDescription>External resources to help improve your development practices</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">Development Tools</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Code Editors</h5>\n                      <p className=\"text-sm text-muted-foreground\">VS Code, Sublime Text, Atom</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Version Control</h5>\n                      <p className=\"text-sm text-muted-foreground\">Git, GitHub, GitLab</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Testing Tools</h5>\n                      <p className=\"text-sm text-muted-foreground\">Jest, Mocha, Custom test frameworks</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">Learning Resources</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Documentation</h5>\n                      <p className=\"text-sm text-muted-foreground\">Official Minecraft docs, MDN Web Docs</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Community</h5>\n                      <p className=\"text-sm text-muted-foreground\">Discord servers, Reddit, Stack Overflow</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Books</h5>\n                      <p className=\"text-sm text-muted-foreground\">Clean Code, Design Patterns, Refactoring</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Reference */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Reference Commands</CardTitle>\n              <CardDescription>Useful commands and shortcuts for addon development</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <h5 className=\"font-medium mb-2\">Git Commands</h5>\n                  <CodePreview\n                    code={`# Create feature branch\ngit checkout -b feature/new-feature\n\n# Stage and commit changes\ngit add .\ngit commit -m \"Add new feature\"\n\n# Push to remote\ngit push origin feature/new-feature\n\n# Merge back to main\ngit checkout main\ngit merge feature/new-feature`}\n                    language=\"bash\"\n                    title=\"Git Workflow\"\n                  />\n                </div>\n\n                <div>\n                  <h5 className=\"font-medium mb-2\">Testing Commands</h5>\n                  <CodePreview\n                    code={`# Run all tests\nnpm test\n\n# Run tests with coverage\nnpm run test:coverage\n\n# Run performance tests\nnpm run test:performance\n\n# Lint code\nnpm run lint\n\n# Format code\nnpm run format`}\n                    language=\"bash\"\n                    title=\"Testing & Quality\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":40662},"client/src/components/Documentation/tabs/BlockDevelopmentTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Box, Copy, ExternalLink, Filter, BookOpen, Layers, \n  Settings, Shield, Zap, Eye, Hammer, Pickaxe, Mountain,\n  Grid3X3, Palette, Cog, Target, ChevronRight,\n  CheckCircle, AlertTriangle, Info, Lightbulb, Play,\n  Clock, Activity, BarChart3, Wrench, Building2,\n  ArrowRight, Code, FileText\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\n// Import the existing BlockDocs to leverage its content\nimport BlockDocs from \"../BlockDocs\";\n\ninterface BlockDevelopmentTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function BlockDevelopmentTab({ onNavigate, onProgressUpdate }: BlockDevelopmentTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Advanced block development topics\n  const advancedTopics = [\n    {\n      id: 'redstone-integration',\n      title: 'Redstone Integration',\n      description: 'Creating blocks that interact with redstone circuits',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '30 min',\n      icon: Zap,\n      content: {\n        overview: 'Redstone integration allows your blocks to send and receive redstone signals, creating interactive contraptions.',\n        example: `{\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:redstone_sensor\"\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 2.0\n      },\n      \"minecraft:block_light_emission\": 0,\n      \"minecraft:redstone_conductivity\": {\n        \"redstone_conductor\": true,\n        \"allows_wire_to_step_down\": true\n      }\n    }\n  }\n}`\n      }\n    },\n    {\n      id: 'container-blocks',\n      title: 'Container Blocks',\n      description: 'Blocks with inventory storage and custom interfaces',\n      difficulty: 'advanced' as const,\n      estimatedTime: '45 min',\n      icon: Box,\n      content: {\n        overview: 'Container blocks provide storage functionality and can have custom interfaces for player interaction.',\n        example: `{\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:storage_crate\"\n    },\n    \"components\": {\n      \"minecraft:container\": {\n        \"size\": 27,\n        \"private\": false\n      },\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 3.0\n      }\n    }\n  }\n}`\n      }\n    },\n    {\n      id: 'multi-block-structures',\n      title: 'Multi-Block Structures',\n      description: 'Creating structures that span multiple block positions',\n      difficulty: 'advanced' as const,\n      estimatedTime: '60 min',\n      icon: Building2,\n      content: {\n        overview: 'Multi-block structures allow you to create large, complex constructions that work together as a single system.',\n        tips: [\n          'Use block tags to identify structure components',\n          'Implement structure validation logic',\n          'Handle partial structure destruction gracefully',\n          'Consider performance implications of large structures'\n        ]\n      }\n    },\n    {\n      id: 'custom-rendering',\n      title: 'Custom Block Rendering',\n      description: 'Advanced rendering techniques and custom geometries',\n      difficulty: 'advanced' as const,\n      estimatedTime: '40 min',\n      icon: Eye,\n      content: {\n        overview: 'Custom rendering allows you to create blocks with unique visual appearances beyond standard cube shapes.',\n        techniques: [\n          'Custom geometry models',\n          'Animated textures',\n          'Particle effect integration',\n          'Light emission patterns',\n          'Transparency and blending modes'\n        ]\n      }\n    }\n  ];\n\n  // Block creation workflow\n  const workflowSteps = [\n    {\n      id: 'concept-planning',\n      title: '1. Concept & Planning',\n      description: 'Define the block\\'s purpose and behavior',\n      icon: Lightbulb,\n      tasks: [\n        'Define block functionality',\n        'Plan interaction methods',\n        'Consider placement rules',\n        'Design visual appearance'\n      ]\n    },\n    {\n      id: 'basic-structure',\n      title: '2. Basic Block Structure',\n      description: 'Create the fundamental block definition',\n      icon: Box,\n      tasks: [\n        'Set up block identifier',\n        'Add core components',\n        'Configure basic properties',\n        'Test basic placement'\n      ]\n    },\n    {\n      id: 'mechanics-implementation',\n      title: '3. Mechanics Implementation',\n      description: 'Add gameplay mechanics and interactions',\n      icon: Cog,\n      tasks: [\n        'Implement interaction logic',\n        'Add state management',\n        'Configure drop behavior',\n        'Set up crafting recipes'\n      ]\n    },\n    {\n      id: 'visual-design',\n      title: '4. Visual Design',\n      description: 'Create textures and visual effects',\n      icon: Palette,\n      tasks: [\n        'Create or assign textures',\n        'Set up geometry if needed',\n        'Add particle effects',\n        'Configure lighting'\n      ]\n    },\n    {\n      id: 'integration-testing',\n      title: '5. Integration & Testing',\n      description: 'Test with other systems and optimize',\n      icon: CheckCircle,\n      tasks: [\n        'Test block interactions',\n        'Verify worldgen compatibility',\n        'Optimize performance',\n        'Test multiplayer scenarios'\n      ]\n    }\n  ];\n\n  // Block types and patterns\n  const blockTypes = [\n    {\n      type: 'Decorative',\n      description: 'Purely visual blocks for building',\n      examples: ['Custom stones', 'Furniture blocks', 'Ornamental items'],\n      difficulty: 'beginner' as const,\n      icon: Palette\n    },\n    {\n      type: 'Functional',\n      description: 'Blocks with gameplay mechanics',\n      examples: ['Crafting stations', 'Storage containers', 'Interactive devices'],\n      difficulty: 'intermediate' as const,\n      icon: Wrench\n    },\n    {\n      type: 'Redstone',\n      description: 'Blocks that interact with redstone',\n      examples: ['Sensors', 'Logic gates', 'Automated systems'],\n      difficulty: 'intermediate' as const,\n      icon: Zap\n    },\n    {\n      type: 'Advanced',\n      description: 'Complex blocks with multiple systems',\n      examples: ['Multi-block structures', 'Animated blocks', 'Network devices'],\n      difficulty: 'advanced' as const,\n      icon: Settings\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"block-development-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Block Development</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Create custom blocks that enhance Minecraft gameplay. From simple decorative blocks to complex\n          mechanical systems, learn to build blocks that players will love to use.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"component-reference\" data-testid=\"tab-components\">🧩 Components</TabsTrigger>\n          <TabsTrigger value=\"advanced-topics\" data-testid=\"tab-advanced\">🚀 Advanced</TabsTrigger>\n          <TabsTrigger value=\"workflow\" data-testid=\"tab-workflow\">📋 Workflow</TabsTrigger>\n          <TabsTrigger value=\"examples\" data-testid=\"tab-examples\">💡 Examples</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Box className=\"h-5 w-5\" />\n                  Block Basics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Component Types</span>\n                    <span className=\"font-medium\">40+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Block States</span>\n                    <span className=\"font-medium\">Unlimited</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Patterns</span>\n                    <span className=\"font-medium\">15+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('builder-block')}\n                  data-testid=\"open-block-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Block Builder\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Key Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Layers className=\"h-5 w-5\" />\n                  Key Features\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Custom Textures</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Interaction Logic</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">State Management</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Drop Control</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Redstone Integration</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Block Template\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Palette className=\"h-4 w-4 mr-2\" />\n                  Texture Creator\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Code className=\"h-4 w-4 mr-2\" />\n                  State Examples\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Wrench className=\"h-4 w-4 mr-2\" />\n                  Testing Tools\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Block Types Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Block Types & Categories</CardTitle>\n              <CardDescription>Understanding different approaches to block creation</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {blockTypes.map((blockType) => (\n                  <div key={blockType.type} className=\"p-4 border rounded-lg space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <blockType.icon className=\"h-5 w-5\" />\n                        <h4 className=\"font-semibold\">{blockType.type} Blocks</h4>\n                      </div>\n                      <Badge variant=\"outline\" className={getDifficultyColor(blockType.difficulty)}>\n                        {blockType.difficulty}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{blockType.description}</p>\n                    <div className=\"space-y-1\">\n                      <h5 className=\"text-sm font-medium\">Examples:</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {blockType.examples.map((example, index) => (\n                          <li key={index}>• {example}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Block Component System */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Block Component System</CardTitle>\n              <CardDescription>How components define block behavior</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Box className=\"h-4 w-4 text-blue-500\" />\n                    Physical Properties\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Define how the block exists in the world\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Hardness & Mining</li>\n                    <li>• Collision Detection</li>\n                    <li>• Light Properties</li>\n                    <li>• Material Type</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Target className=\"h-4 w-4 text-green-500\" />\n                    Interaction System\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Control how players interact with blocks\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Click Interactions</li>\n                    <li>• Placement Rules</li>\n                    <li>• Break Behavior</li>\n                    <li>• Drop Logic</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Zap className=\"h-4 w-4 text-yellow-500\" />\n                    Dynamic Behavior\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Blocks that change and interact\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• State Changes</li>\n                    <li>• Tick Updates</li>\n                    <li>• Redstone Logic</li>\n                    <li>• Network Events</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Component Reference Tab */}\n        <TabsContent value=\"component-reference\" className=\"space-y-6\">\n          {/* Embed the existing BlockDocs component */}\n          <BlockDocs onNavigate={onNavigate} />\n        </TabsContent>\n\n        {/* Advanced Topics Tab */}\n        <TabsContent value=\"advanced-topics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {advancedTopics.map((topic) => (\n              <Card key={topic.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <topic.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                        <CardDescription>{topic.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={topic.difficulty === 'advanced' ? 'destructive' : 'secondary'}>\n                        {topic.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{topic.estimatedTime}</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm\">{topic.content.overview}</p>\n                  \n                  {topic.content.example && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Example Implementation</h5>\n                      <CodePreview\n                        code={topic.content.example}\n                        language=\"json\"\n                        title={`${topic.title} Example`}\n                      />\n                    </div>\n                  )}\n\n                  {topic.content.tips && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Best Practices</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.tips.map((tip, index) => (\n                          <li key={index}>• {tip}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.techniques && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Key Techniques</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.techniques.map((technique, index) => (\n                          <li key={index}>• {technique}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Workflow Tab */}\n        <TabsContent value=\"workflow\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Block Development Workflow</CardTitle>\n              <CardDescription>A systematic approach to creating high-quality blocks</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {workflowSteps.map((step, index) => (\n                <div key={step.id} className=\"flex gap-4\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"flex items-center justify-center w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900\">\n                      <step.icon className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    {index < workflowSteps.length - 1 && (\n                      <div className=\"w-px h-16 bg-border mt-2\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 space-y-3\">\n                    <div>\n                      <h4 className=\"font-semibold text-lg\">{step.title}</h4>\n                      <p className=\"text-muted-foreground\">{step.description}</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {step.tasks.map((task, taskIndex) => (\n                        <div key={taskIndex} className=\"flex items-center gap-2 text-sm\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <span>{task}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Examples Tab */}\n        <TabsContent value=\"examples\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Simple Decorative Block */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Palette className=\"h-5 w-5 text-blue-500\" />\n                  Custom Stone Block\n                </CardTitle>\n                <CardDescription>A simple decorative block with custom properties</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">Beginner</Badge>\n                  <Badge variant=\"outline\">10 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:marble_block\",\n      \"menu_category\": {\n        \"category\": \"construction\"\n      }\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 3.0\n      },\n      \"minecraft:destructible_by_explosion\": {\n        \"explosion_resistance\": 6.0\n      },\n      \"minecraft:friction\": 0.6\n    }\n  }\n}`}\n                  language=\"json\"\n                  title=\"Marble Block\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('builder-block')}\n                  data-testid=\"open-marble-block-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Build This Example\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Interactive Block */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Wrench className=\"h-5 w-5 text-orange-500\" />\n                  Magic Workbench\n                </CardTitle>\n                <CardDescription>An interactive block with custom functionality</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"secondary\">Intermediate</Badge>\n                  <Badge variant=\"outline\">25 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:magic_workbench\",\n      \"menu_category\": {\n        \"category\": \"equipment\"\n      }\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 4.0\n      },\n      \"minecraft:block_light_emission\": 5,\n      \"minecraft:on_interact\": {\n        \"event\": \"open_workbench_ui\"\n      }\n    }\n  }\n}`}\n                  language=\"json\"\n                  title=\"Magic Workbench\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('builder-block')}\n                  data-testid=\"open-workbench-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Build This Example\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":25596},"client/src/components/Documentation/tabs/EntityDevelopmentTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Target, Copy, ExternalLink, Filter, BookOpen, Zap, \n  Info, Eye, Brain, Settings, Layers, Shield, Heart, \n  Activity, MapPin, Users, Clock, AlertTriangle, CheckCircle, \n  Play, Pause, SkipForward, HelpCircle, Github, FileText, TrendingUp,\n  ArrowRight, ChevronRight, Lightbulb, Wrench, Code\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\n// Import the existing EntityDocs to leverage its content\nimport EntityDocs from \"../EntityDocs\";\n\ninterface EntityDevelopmentTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function EntityDevelopmentTab({ onNavigate, onProgressUpdate }: EntityDevelopmentTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Advanced entity development topics\n  const advancedTopics = [\n    {\n      id: 'state-machines',\n      title: 'Entity State Machines',\n      description: 'Advanced behavior control using state machines',\n      difficulty: 'advanced' as const,\n      estimatedTime: '45 min',\n      icon: Brain,\n      content: {\n        overview: 'State machines provide a powerful way to control complex entity behaviors by defining discrete states and transitions.',\n        example: `{\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:guard_entity\",\n      \"is_spawnable\": true\n    },\n    \"component_groups\": {\n      \"patrol_mode\": {\n        \"minecraft:behavior.random_stroll\": {\n          \"priority\": 2,\n          \"speed_multiplier\": 0.5\n        }\n      },\n      \"alert_mode\": {\n        \"minecraft:behavior.nearest_attackable_target\": {\n          \"priority\": 1,\n          \"entity_types\": [{\"filters\": {\"test\": \"is_family\", \"subject\": \"other\", \"value\": \"player\"}}]\n        }\n      },\n      \"combat_mode\": {\n        \"minecraft:behavior.melee_attack\": {\n          \"priority\": 1,\n          \"speed_multiplier\": 1.5\n        }\n      }\n    },\n    \"events\": {\n      \"enter_patrol\": {\"add\": {\"component_groups\": [\"patrol_mode\"]}},\n      \"enter_alert\": {\"add\": {\"component_groups\": [\"alert_mode\"]}},\n      \"enter_combat\": {\"add\": {\"component_groups\": [\"combat_mode\"]}}\n    }\n  }\n}`\n      }\n    },\n    {\n      id: 'animation-integration',\n      title: 'Animation Integration',\n      description: 'Syncing animations with entity behaviors and states',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '30 min',\n      icon: Play,\n      content: {\n        overview: 'Proper animation integration creates immersive entity experiences by syncing visual feedback with behavior.',\n        example: `{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:client_entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_mob\"\n    },\n    \"render_controllers\": [\n      \"controller.render.custom_mob\"\n    ],\n    \"animations\": {\n      \"walk\": \"animation.custom_mob.walk\",\n      \"idle\": \"animation.custom_mob.idle\",\n      \"attack\": \"animation.custom_mob.attack\"\n    },\n    \"animation_controllers\": [\n      \"controller.animation.custom_mob.movement\"\n    ]\n  }\n}`\n      }\n    },\n    {\n      id: 'performance-optimization',\n      title: 'Entity Performance Optimization',\n      description: 'Optimization techniques for entity-heavy worlds',\n      difficulty: 'advanced' as const,\n      estimatedTime: '40 min',\n      icon: TrendingUp,\n      content: {\n        overview: 'Optimize entity performance through component selection, behavior priorities, and efficient AI patterns.',\n        tips: [\n          'Use appropriate behavior priorities to prevent conflicts',\n          'Limit expensive behaviors like pathfinding for distant entities',\n          'Use component groups for state management instead of adding/removing components',\n          'Implement entity culling for decorative entities',\n          'Use efficient target selectors and filters'\n        ]\n      }\n    },\n    {\n      id: 'multiplayer-considerations',\n      title: 'Multiplayer Entity Design',\n      description: 'Designing entities that work well in multiplayer environments',\n      difficulty: 'advanced' as const,\n      estimatedTime: '35 min',\n      icon: Users,\n      content: {\n        overview: 'Multiplayer entities require careful consideration of networking, synchronization, and server performance.',\n        considerations: [\n          'Minimize server-side calculations for cosmetic entities',\n          'Use appropriate targeting behaviors for multi-player scenarios',\n          'Consider entity limits and spawn management',\n          'Handle player disconnections gracefully',\n          'Optimize for network bandwidth'\n        ]\n      }\n    }\n  ];\n\n  // Entity creation workflow steps\n  const workflowSteps = [\n    {\n      id: 'concept-design',\n      title: '1. Concept & Design',\n      description: 'Define the entity\\'s purpose, behavior, and appearance',\n      icon: Lightbulb,\n      tasks: [\n        'Define entity role and purpose',\n        'Sketch behavior patterns',\n        'Plan interaction systems',\n        'Consider performance impact'\n      ]\n    },\n    {\n      id: 'basic-setup',\n      title: '2. Basic Entity Setup',\n      description: 'Create the basic entity structure and core components',\n      icon: Settings,\n      tasks: [\n        'Set up entity identifier and description',\n        'Add core components (health, movement)',\n        'Configure basic spawning properties',\n        'Test basic functionality'\n      ]\n    },\n    {\n      id: 'behavior-implementation',\n      title: '3. Behavior Implementation',\n      description: 'Add AI behaviors and interaction logic',\n      icon: Brain,\n      tasks: [\n        'Implement movement behaviors',\n        'Add targeting and combat logic',\n        'Configure interaction behaviors',\n        'Set up component groups for states'\n      ]\n    },\n    {\n      id: 'visual-polish',\n      title: '4. Visual Polish',\n      description: 'Add textures, models, and animations',\n      icon: Eye,\n      tasks: [\n        'Create or assign textures',\n        'Set up geometry and models',\n        'Implement animations',\n        'Add particle effects'\n      ]\n    },\n    {\n      id: 'testing-optimization',\n      title: '5. Testing & Optimization',\n      description: 'Test thoroughly and optimize performance',\n      icon: CheckCircle,\n      tasks: [\n        'Test all behaviors and interactions',\n        'Optimize component usage',\n        'Test in multiplayer scenarios',\n        'Validate performance impact'\n      ]\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"entity-development-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Entity Development</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Master the art of creating custom entities in Minecraft Bedrock Edition. From simple mobs to complex AI systems,\n          learn everything you need to bring your entity concepts to life.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"component-reference\" data-testid=\"tab-components\">🧩 Components</TabsTrigger>\n          <TabsTrigger value=\"advanced-topics\" data-testid=\"tab-advanced\">🚀 Advanced</TabsTrigger>\n          <TabsTrigger value=\"workflow\" data-testid=\"tab-workflow\">📋 Workflow</TabsTrigger>\n          <TabsTrigger value=\"examples\" data-testid=\"tab-examples\">💡 Examples</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Entity Basics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Component Types</span>\n                    <span className=\"font-medium\">100+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Behavior Types</span>\n                    <span className=\"font-medium\">50+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">AI Patterns</span>\n                    <span className=\"font-medium\">25+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('builder-entity')}\n                  data-testid=\"open-entity-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Entity Builder\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Key Concepts */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5\" />\n                  Key Concepts\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Component System</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Behavior Priorities</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Component Groups</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Event System</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">State Management</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Entity Template\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Behavior Examples\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Code className=\"h-4 w-4 mr-2\" />\n                  AI Patterns\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Wrench className=\"h-4 w-4 mr-2\" />\n                  Debug Tools\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Entity Architecture Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Entity Architecture Overview</CardTitle>\n              <CardDescription>Understanding the component-based entity system</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Heart className=\"h-4 w-4 text-red-500\" />\n                    Core Components\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Essential components that define basic entity properties\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Health & Damage</li>\n                    <li>• Movement & Physics</li>\n                    <li>• Collision & Hitbox</li>\n                    <li>• Spawn Rules</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Brain className=\"h-4 w-4 text-blue-500\" />\n                    Behavior Components\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    AI behaviors that control entity actions\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Movement Patterns</li>\n                    <li>• Target Selection</li>\n                    <li>• Combat Behaviors</li>\n                    <li>• Interaction Logic</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4 text-green-500\" />\n                    Visual Components\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Rendering and visual effects\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Geometry & Models</li>\n                    <li>• Textures & Materials</li>\n                    <li>• Animations</li>\n                    <li>• Particle Effects</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Common Entity Patterns */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Common Entity Patterns</CardTitle>\n              <CardDescription>Proven patterns for different entity types</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold\">Passive Entities</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                    <li>• Random stroll behavior</li>\n                    <li>• Avoid player on approach</li>\n                    <li>• Panic when damaged</li>\n                    <li>• Look at interesting entities</li>\n                  </ul>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold\">Hostile Entities</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                    <li>• Target nearest attackable</li>\n                    <li>• Melee or ranged attack</li>\n                    <li>• Pursue and path-find</li>\n                    <li>• Guard and patrol areas</li>\n                  </ul>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold\">Utility Entities</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                    <li>• Interact with players</li>\n                    <li>• Custom trade systems</li>\n                    <li>• Follow specific players</li>\n                    <li>• Conditional behaviors</li>\n                  </ul>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold\">Environmental Entities</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                    <li>• Decorative and ambient</li>\n                    <li>• Particle effect triggers</li>\n                    <li>• Sound effect sources</li>\n                    <li>• World interaction points</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Component Reference Tab */}\n        <TabsContent value=\"component-reference\" className=\"space-y-6\">\n          {/* Embed the existing EntityDocs component */}\n          <EntityDocs onNavigate={onNavigate} />\n        </TabsContent>\n\n        {/* Advanced Topics Tab */}\n        <TabsContent value=\"advanced-topics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {advancedTopics.map((topic) => (\n              <Card key={topic.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <topic.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                        <CardDescription>{topic.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={topic.difficulty === 'advanced' ? 'destructive' : 'secondary'}>\n                        {topic.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{topic.estimatedTime}</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm\">{topic.content.overview}</p>\n                  \n                  {topic.content.example && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Example Implementation</h5>\n                      <CodePreview\n                        code={topic.content.example}\n                        language=\"json\"\n                        title={`${topic.title} Example`}\n                      />\n                    </div>\n                  )}\n\n                  {topic.content.tips && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Optimization Tips</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.tips.map((tip, index) => (\n                          <li key={index}>• {tip}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.considerations && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Key Considerations</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.considerations.map((consideration, index) => (\n                          <li key={index}>• {consideration}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Workflow Tab */}\n        <TabsContent value=\"workflow\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Entity Development Workflow</CardTitle>\n              <CardDescription>A step-by-step guide to creating professional entities</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {workflowSteps.map((step, index) => (\n                <div key={step.id} className=\"flex gap-4\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"flex items-center justify-center w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900\">\n                      <step.icon className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    {index < workflowSteps.length - 1 && (\n                      <div className=\"w-px h-16 bg-border mt-2\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 space-y-3\">\n                    <div>\n                      <h4 className=\"font-semibold text-lg\">{step.title}</h4>\n                      <p className=\"text-muted-foreground\">{step.description}</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {step.tasks.map((task, taskIndex) => (\n                        <div key={taskIndex} className=\"flex items-center gap-2 text-sm\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <span>{task}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Examples Tab */}\n        <TabsContent value=\"examples\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Simple Friendly NPC */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"h-5 w-5 text-green-500\" />\n                  Friendly Village NPC\n                </CardTitle>\n                <CardDescription>A simple, approachable entity that looks at players</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">Beginner</Badge>\n                  <Badge variant=\"outline\">15 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:friendly_villager\",\n      \"is_spawnable\": true,\n      \"is_summonable\": true\n    },\n    \"components\": {\n      \"minecraft:health\": {\"value\": 20},\n      \"minecraft:movement\": {\"value\": 0.25},\n      \"minecraft:behavior.look_at_player\": {\n        \"priority\": 1,\n        \"look_distance\": 8\n      },\n      \"minecraft:behavior.random_stroll\": {\n        \"priority\": 2,\n        \"speed_multiplier\": 0.8\n      }\n    }\n  }\n}`}\n                  language=\"json\"\n                  title=\"Friendly NPC Entity\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('builder-entity')}\n                  data-testid=\"open-friendly-npc-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Build This Example\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Guard Entity */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5 text-red-500\" />\n                  Guard Entity\n                </CardTitle>\n                <CardDescription>A protective entity that attacks threats</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"destructive\">Advanced</Badge>\n                  <Badge variant=\"outline\">45 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:guard_entity\",\n      \"is_spawnable\": true\n    },\n    \"components\": {\n      \"minecraft:health\": {\"value\": 40},\n      \"minecraft:movement\": {\"value\": 0.3},\n      \"minecraft:behavior.nearest_attackable_target\": {\n        \"priority\": 1,\n        \"entity_types\": [\n          {\"filters\": {\"test\": \"is_family\", \"subject\": \"other\", \"value\": \"monster\"}}\n        ]\n      },\n      \"minecraft:behavior.melee_attack\": {\n        \"priority\": 2,\n        \"speed_multiplier\": 1.2\n      }\n    }\n  }\n}`}\n                  language=\"json\"\n                  title=\"Guard Entity\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('builder-entity')}\n                  data-testid=\"open-guard-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Build This Example\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":26262},"client/src/components/Documentation/tabs/GettingStartedTab.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { \n  ChevronRight, BookOpen, FileText, Code, Layers, ArrowRight, Copy, Search, \n  Package, FolderTree, Settings, Play, CheckCircle, AlertCircle, \n  Download, Upload, Zap, BookmarkPlus, Eye, Lightbulb, Clock,\n  Rocket, Target, Shield, Wrench, Users, Star, Globe\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\ninterface GettingStartedTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function GettingStartedTab({ onNavigate, onProgressUpdate }: GettingStartedTabProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<string[]>([]);\n  const [selectedTrack, setSelectedTrack] = useState('complete-beginner');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Learning tracks for different experience levels\n  const learningTracks = {\n    'complete-beginner': {\n      title: 'Complete Beginner',\n      description: 'Never created an addon before? Start here!',\n      estimatedTime: '2-3 hours',\n      difficulty: 'beginner' as const,\n      icon: Rocket,\n      steps: [\n        {\n          id: 'setup-environment',\n          title: 'Setup Development Environment',\n          description: 'Install tools and configure your workspace',\n          estimatedTime: '20 min',\n          completed: false\n        },\n        {\n          id: 'understand-basics',\n          title: 'Understand Addon Basics',\n          description: 'Learn the fundamental concepts and structure',\n          estimatedTime: '30 min',\n          completed: false\n        },\n        {\n          id: 'first-addon',\n          title: 'Create Your First Addon',\n          description: 'Build a simple custom block step by step',\n          estimatedTime: '45 min',\n          completed: false\n        },\n        {\n          id: 'test-addon',\n          title: 'Test in Minecraft',\n          description: 'Load and test your addon in the game',\n          estimatedTime: '15 min',\n          completed: false\n        },\n        {\n          id: 'next-steps',\n          title: 'Next Steps',\n          description: 'Where to go from here',\n          estimatedTime: '10 min',\n          completed: false\n        }\n      ]\n    },\n    'some-experience': {\n      title: 'Some Experience',\n      description: 'Familiar with basic modding concepts',\n      estimatedTime: '1-2 hours',\n      difficulty: 'intermediate' as const,\n      icon: Target,\n      steps: [\n        {\n          id: 'bedrock-differences',\n          title: 'Bedrock vs Java Differences',\n          description: 'Key differences from Java Edition modding',\n          estimatedTime: '15 min',\n          completed: false\n        },\n        {\n          id: 'component-system',\n          title: 'Component-Based Architecture',\n          description: 'Understanding the component system',\n          estimatedTime: '25 min',\n          completed: false\n        },\n        {\n          id: 'advanced-addon',\n          title: 'Create an Advanced Addon',\n          description: 'Build something with entities and behaviors',\n          estimatedTime: '60 min',\n          completed: false\n        },\n        {\n          id: 'best-practices',\n          title: 'Best Practices',\n          description: 'Learn optimization and organization tips',\n          estimatedTime: '20 min',\n          completed: false\n        }\n      ]\n    },\n    'experienced': {\n      title: 'Experienced Developer',\n      description: 'Ready for advanced concepts and scripting',\n      estimatedTime: '30-60 min',\n      difficulty: 'advanced' as const,\n      icon: Shield,\n      steps: [\n        {\n          id: 'scripting-overview',\n          title: 'Scripting API Overview',\n          description: 'Introduction to JavaScript/TypeScript scripting',\n          estimatedTime: '15 min',\n          completed: false\n        },\n        {\n          id: 'performance-optimization',\n          title: 'Performance Optimization',\n          description: 'Advanced optimization techniques',\n          estimatedTime: '20 min',\n          completed: false\n        },\n        {\n          id: 'complex-systems',\n          title: 'Complex System Design',\n          description: 'Architecture patterns for large addons',\n          estimatedTime: '25 min',\n          completed: false\n        }\n      ]\n    }\n  };\n\n  // Table of contents for comprehensive reference\n  const tableOfContents = [\n    { \n      id: 'environment-setup', \n      title: 'Development Environment Setup', \n      icon: Settings,\n      description: 'Tools, software, and workspace configuration'\n    },\n    { \n      id: 'addon-basics', \n      title: 'Addon Architecture & Concepts', \n      icon: FolderTree,\n      description: 'File structure, manifests, and basic concepts'\n    },\n    { \n      id: 'behavior-vs-resource', \n      title: 'Behavior vs Resource Packs', \n      icon: Package,\n      description: 'Understanding the two pack types and when to use each'\n    },\n    { \n      id: 'identifiers-namespaces', \n      title: 'Identifiers & Namespaces', \n      icon: Code,\n      description: 'Proper naming conventions and avoiding conflicts'\n    },\n    { \n      id: 'manifest-files', \n      title: 'Manifest Files Deep Dive', \n      icon: FileText,\n      description: 'Complete manifest configuration and metadata'\n    },\n    { \n      id: 'component-system', \n      title: 'Component System Overview', \n      icon: Layers,\n      description: 'How components work across entities, blocks, and items'\n    },\n    { \n      id: 'development-workflow', \n      title: 'Development Workflow', \n      icon: Wrench,\n      description: 'Testing, debugging, and deployment strategies'\n    },\n    { \n      id: 'version-management', \n      title: 'Version Compatibility', \n      icon: BookmarkPlus,\n      description: 'Format versions and backward compatibility'\n    }\n  ];\n\n  // Update progress based on completed steps\n  useEffect(() => {\n    const track = learningTracks[selectedTrack as keyof typeof learningTracks];\n    const completed = completedSteps.length;\n    const total = track.steps.length;\n    const progress = (completed / total) * 100;\n    onProgressUpdate?.(progress);\n  }, [completedSteps, selectedTrack, onProgressUpdate]);\n\n  const markStepCompleted = (stepId: string) => {\n    if (!completedSteps.includes(stepId)) {\n      setCompletedSteps([...completedSteps, stepId]);\n      toast({\n        title: \"Step completed!\",\n        description: \"Great progress! Keep going.\",\n      });\n    }\n  };\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  // Filter table of contents based on search\n  const filteredTOC = tableOfContents.filter(item =>\n    searchTerm === '' || \n    item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const currentTrack = learningTracks[selectedTrack as keyof typeof learningTracks];\n  const progressPercentage = (completedSteps.length / currentTrack.steps.length) * 100;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"getting-started-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Welcome to Minecraft Bedrock Addon Development!</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Learn everything you need to create amazing addons for Minecraft Bedrock Edition. \n          Whether you're a complete beginner or an experienced developer, we'll guide you through every step.\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"guided-learning\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"guided-learning\" data-testid=\"tab-guided-learning\">🎯 Guided Learning</TabsTrigger>\n          <TabsTrigger value=\"quick-reference\" data-testid=\"tab-quick-reference\">📚 Quick Reference</TabsTrigger>\n          <TabsTrigger value=\"examples\" data-testid=\"tab-examples\">💡 Examples & Templates</TabsTrigger>\n        </TabsList>\n\n        {/* Guided Learning Tab */}\n        <TabsContent value=\"guided-learning\" className=\"space-y-6\">\n          {/* Learning Track Selection */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-2xl font-semibold\">Choose Your Learning Path</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {Object.entries(learningTracks).map(([key, track]) => (\n                <Card \n                  key={key}\n                  className={`cursor-pointer transition-all hover:shadow-lg ${\n                    selectedTrack === key ? 'ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-950' : ''\n                  }`}\n                  onClick={() => setSelectedTrack(key)}\n                  data-testid={`track-${key}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <track.icon className=\"h-6 w-6\" />\n                      <CardTitle className=\"text-lg\">{track.title}</CardTitle>\n                    </div>\n                    <CardDescription>{track.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant={track.difficulty === 'beginner' ? 'default' : track.difficulty === 'intermediate' ? 'secondary' : 'destructive'}>\n                        {track.difficulty}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                        <Clock className=\"h-4 w-4\" />\n                        {track.estimatedTime}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {track.steps.length} steps\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Selected Track Progress */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <currentTrack.icon className=\"h-6 w-6\" />\n                  <div>\n                    <CardTitle>{currentTrack.title} Track</CardTitle>\n                    <CardDescription>{currentTrack.description}</CardDescription>\n                  </div>\n                </div>\n                <Badge variant=\"outline\">\n                  {completedSteps.length} / {currentTrack.steps.length} completed\n                </Badge>\n              </div>\n              <Progress value={progressPercentage} className=\"mt-4\" />\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {currentTrack.steps.map((step, index) => (\n                <div \n                  key={step.id}\n                  className={`p-4 rounded-lg border transition-all ${\n                    completedSteps.includes(step.id) ? 'bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800' :\n                    index === currentStep ? 'bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800' :\n                    'bg-gray-50 dark:bg-gray-950'\n                  }`}\n                  data-testid={`step-${step.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      {completedSteps.includes(step.id) ? (\n                        <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                      ) : (\n                        <div className=\"h-6 w-6 rounded-full border-2 border-muted-foreground flex items-center justify-center\">\n                          <span className=\"text-sm font-medium\">{index + 1}</span>\n                        </div>\n                      )}\n                      <div>\n                        <h4 className=\"font-medium\">{step.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{step.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-sm text-muted-foreground\">{step.estimatedTime}</span>\n                      {!completedSteps.includes(step.id) && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => markStepCompleted(step.id)}\n                          data-testid={`complete-${step.id}`}\n                        >\n                          Mark Complete\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Quick Reference Tab */}\n        <TabsContent value=\"quick-reference\" className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-2xl font-semibold\">Quick Reference Guide</h3>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search topics...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                  data-testid=\"reference-search\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {filteredTOC.map((item) => (\n                <Card key={item.id} className=\"hover:shadow-lg transition-all cursor-pointer group\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <item.icon className=\"h-5 w-5 text-blue-600\" />\n                      <CardTitle className=\"text-lg group-hover:text-blue-600 transition-colors\">\n                        {item.title}\n                      </CardTitle>\n                      <ChevronRight className=\"h-4 w-4 ml-auto opacity-0 group-hover:opacity-100 transition-opacity\" />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Examples & Templates Tab */}\n        <TabsContent value=\"examples\" className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <h3 className=\"text-2xl font-semibold\">Starter Examples & Templates</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {/* Basic Block Example */}\n              <Card className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"h-5 w-5\" />\n                    Basic Custom Block\n                  </CardTitle>\n                  <CardDescription>Simple block with custom properties</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Badge variant=\"outline\">Beginner</Badge>\n                  <CodePreview\n                    code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:block\": {\n    \"description\": {\n      \"identifier\": \"my_addon:custom_stone\"\n    },\n    \"components\": {\n      \"minecraft:destructible_by_mining\": {\n        \"seconds_to_destroy\": 3.0\n      },\n      \"minecraft:friction\": 0.6\n    }\n  }\n}`}\n                    language=\"json\"\n                    title=\"Basic Block Definition\"\n                  />\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => onNavigate?.('builder-block')}\n                    className=\"w-full\"\n                    data-testid=\"open-block-builder\"\n                  >\n                    <ArrowRight className=\"h-4 w-4 mr-2\" />\n                    Open in Block Builder\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Simple Entity Example */}\n              <Card className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"h-5 w-5\" />\n                    Friendly NPC\n                  </CardTitle>\n                  <CardDescription>Basic entity with movement and AI</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Badge variant=\"outline\">Intermediate</Badge>\n                  <CodePreview\n                    code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:entity\": {\n    \"description\": {\n      \"identifier\": \"my_addon:friendly_npc\",\n      \"is_spawnable\": true,\n      \"is_summonable\": true\n    },\n    \"components\": {\n      \"minecraft:health\": {\n        \"value\": 20\n      },\n      \"minecraft:movement\": {\n        \"value\": 0.25\n      },\n      \"minecraft:behavior.look_at_player\": {\n        \"priority\": 1,\n        \"look_distance\": 8\n      }\n    }\n  }\n}`}\n                    language=\"json\"\n                    title=\"Simple Entity Definition\"\n                  />\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => onNavigate?.('builder-entity')}\n                    className=\"w-full\"\n                    data-testid=\"open-entity-builder\"\n                  >\n                    <ArrowRight className=\"h-4 w-4 mr-2\" />\n                    Open in Entity Builder\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Custom Item Example */}\n              <Card className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Star className=\"h-5 w-5\" />\n                    Magic Wand Item\n                  </CardTitle>\n                  <CardDescription>Custom item with special properties</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Badge variant=\"outline\">Beginner</Badge>\n                  <CodePreview\n                    code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:magic_wand\"\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 1,\n      \"minecraft:durability\": {\n        \"max_durability\": 100\n      },\n      \"minecraft:enchantable\": {\n        \"value\": 10\n      }\n    }\n  }\n}`}\n                    language=\"json\"\n                    title=\"Custom Item Definition\"\n                  />\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => onNavigate?.('builder-item')}\n                    className=\"w-full\"\n                    data-testid=\"open-item-builder\"\n                  >\n                    <ArrowRight className=\"h-4 w-4 mr-2\" />\n                    Open in Item Builder\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Quick Start Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Start Actions</CardTitle>\n              <CardDescription>Jump straight into creating content</CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Button \n                onClick={() => onNavigate?.('builder-entity')}\n                className=\"h-auto flex-col gap-2 p-4\"\n                data-testid=\"quick-start-entity\"\n              >\n                <Target className=\"h-6 w-6\" />\n                Create Entity\n              </Button>\n              <Button \n                onClick={() => onNavigate?.('builder-block')}\n                className=\"h-auto flex-col gap-2 p-4\"\n                variant=\"outline\"\n                data-testid=\"quick-start-block\"\n              >\n                <Package className=\"h-6 w-6\" />\n                Create Block\n              </Button>\n              <Button \n                onClick={() => onNavigate?.('builder-item')}\n                className=\"h-auto flex-col gap-2 p-4\"\n                variant=\"outline\"\n                data-testid=\"quick-start-item\"\n              >\n                <Star className=\"h-6 w-6\" />\n                Create Item\n              </Button>\n              <Button \n                onClick={() => onNavigate?.('texture-creator')}\n                className=\"h-auto flex-col gap-2 p-4\"\n                variant=\"outline\"\n                data-testid=\"quick-start-texture\"\n              >\n                <Eye className=\"h-6 w-6\" />\n                Create Texture\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":22246},"client/src/components/Documentation/tabs/ItemDevelopmentTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Shield, Copy, ExternalLink, Filter, BookOpen, Package, \n  Utensils, Sword, Sparkles, Zap, Eye, Clock, Target,\n  ChevronRight, CheckCircle, AlertTriangle, Info, Lightbulb, \n  Hammer, Pickaxe, Apple, Crown, Shirt, Wrench, Activity,\n  ArrowUpDown, BarChart3, Settings, ArrowRight, Code, FileText\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\n// Import the existing ItemDocs to leverage its content\nimport ItemDocs from \"../ItemDocs\";\n\ninterface ItemDevelopmentTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function ItemDevelopmentTab({ onNavigate, onProgressUpdate }: ItemDevelopmentTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Advanced item development topics\n  const advancedTopics = [\n    {\n      id: 'durability-systems',\n      title: 'Advanced Durability Systems',\n      description: 'Creating complex durability and repair mechanics',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '35 min',\n      icon: Activity,\n      content: {\n        overview: 'Advanced durability systems allow for complex item degradation, repair mechanics, and conditional durability loss.',\n        example: `{\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:magic_sword\"\n    },\n    \"components\": {\n      \"minecraft:durability\": {\n        \"max_durability\": 500,\n        \"damage_chance\": {\n          \"min\": 5,\n          \"max\": 10\n        }\n      },\n      \"minecraft:repairable\": {\n        \"repair_items\": [\n          {\n            \"items\": [\"my_addon:magic_crystal\"],\n            \"repair_amount\": 100\n          }\n        ]\n      }\n    }\n  }\n}`\n      }\n    },\n    {\n      id: 'enchantment-integration',\n      title: 'Enchantment Integration',\n      description: 'Making items compatible with enchantments',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '25 min',\n      icon: Sparkles,\n      content: {\n        overview: 'Enchantment integration allows your custom items to receive and benefit from various enchantments.',\n        example: `{\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:crystal_pickaxe\"\n    },\n    \"components\": {\n      \"minecraft:enchantable\": {\n        \"value\": 15,\n        \"slot\": \"pickaxe\"\n      },\n      \"minecraft:durability\": {\n        \"max_durability\": 800\n      }\n    }\n  }\n}`\n      }\n    },\n    {\n      id: 'custom-use-mechanics',\n      title: 'Custom Use Mechanics',\n      description: 'Creating items with special use behaviors',\n      difficulty: 'advanced' as const,\n      estimatedTime: '45 min',\n      icon: Target,\n      content: {\n        overview: 'Custom use mechanics allow items to perform special actions when used, eaten, or activated.',\n        patterns: [\n          'Right-click activation items',\n          'Consumable items with effects',\n          'Tools with special abilities',\n          'Throwable and projectile items'\n        ]\n      }\n    },\n    {\n      id: 'rendering-models',\n      title: 'Item Rendering & Models',\n      description: 'Advanced visual customization for items',\n      difficulty: 'advanced' as const,\n      estimatedTime: '40 min',\n      icon: Eye,\n      content: {\n        overview: 'Custom rendering and models allow items to have unique appearances beyond simple texture changes.',\n        techniques: [\n          'Custom geometry models',\n          'Animated item textures',\n          'Conditional rendering states',\n          'Hand-held model positioning',\n          'Inventory vs world appearance'\n        ]\n      }\n    }\n  ];\n\n  // Item creation workflow\n  const workflowSteps = [\n    {\n      id: 'concept-design',\n      title: '1. Concept & Design',\n      description: 'Define the item\\'s purpose and mechanics',\n      icon: Lightbulb,\n      tasks: [\n        'Define item category and purpose',\n        'Plan gameplay mechanics',\n        'Design visual appearance',\n        'Consider balance implications'\n      ]\n    },\n    {\n      id: 'basic-implementation',\n      title: '2. Basic Implementation',\n      description: 'Create the core item structure',\n      icon: Package,\n      tasks: [\n        'Set up item identifier',\n        'Add basic components',\n        'Configure stack properties',\n        'Test basic functionality'\n      ]\n    },\n    {\n      id: 'mechanics-integration',\n      title: '3. Mechanics Integration',\n      description: 'Add special behaviors and interactions',\n      icon: Wrench,\n      tasks: [\n        'Implement use mechanics',\n        'Add durability if needed',\n        'Configure enchantability',\n        'Set up crafting recipes'\n      ]\n    },\n    {\n      id: 'visual-polish',\n      title: '4. Visual Polish',\n      description: 'Create textures and visual effects',\n      icon: Eye,\n      tasks: [\n        'Create item textures',\n        'Set up custom models if needed',\n        'Add held item positioning',\n        'Configure visual effects'\n      ]\n    },\n    {\n      id: 'testing-balancing',\n      title: '5. Testing & Balancing',\n      description: 'Optimize and balance the item',\n      icon: CheckCircle,\n      tasks: [\n        'Test all item mechanics',\n        'Balance gameplay impact',\n        'Optimize performance',\n        'Verify multiplayer compatibility'\n      ]\n    }\n  ];\n\n  // Item categories and patterns\n  const itemCategories = [\n    {\n      type: 'Tools & Weapons',\n      description: 'Functional items for gameplay',\n      examples: ['Custom pickaxes', 'Magic wands', 'Special weapons'],\n      difficulty: 'intermediate' as const,\n      icon: Hammer\n    },\n    {\n      type: 'Food & Consumables',\n      description: 'Items that can be consumed',\n      examples: ['Custom foods', 'Potions', 'Healing items'],\n      difficulty: 'beginner' as const,\n      icon: Apple\n    },\n    {\n      type: 'Armor & Wearables',\n      description: 'Protective and cosmetic gear',\n      examples: ['Custom armor sets', 'Accessories', 'Cosmetic items'],\n      difficulty: 'intermediate' as const,\n      icon: Shield\n    },\n    {\n      type: 'Utility Items',\n      description: 'Items with special functions',\n      examples: ['Transportation items', 'Building tools', 'Information items'],\n      difficulty: 'advanced' as const,\n      icon: Wrench\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"item-development-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Item Development</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Create custom items that enhance the Minecraft experience. From simple collectibles to complex tools\n          and weapons, learn to craft items that players will treasure and use.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"component-reference\" data-testid=\"tab-components\">🧩 Components</TabsTrigger>\n          <TabsTrigger value=\"advanced-topics\" data-testid=\"tab-advanced\">🚀 Advanced</TabsTrigger>\n          <TabsTrigger value=\"workflow\" data-testid=\"tab-workflow\">📋 Workflow</TabsTrigger>\n          <TabsTrigger value=\"examples\" data-testid=\"tab-examples\">💡 Examples</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"h-5 w-5\" />\n                  Item Basics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Component Types</span>\n                    <span className=\"font-medium\">30+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Item Categories</span>\n                    <span className=\"font-medium\">10+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Use Patterns</span>\n                    <span className=\"font-medium\">20+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('builder-item')}\n                  data-testid=\"open-item-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Item Builder\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Key Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Sparkles className=\"h-5 w-5\" />\n                  Key Features\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Custom Textures</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Durability Systems</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Enchantments</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Use Mechanics</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Custom Models</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Item Template\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Texture Creator\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Code className=\"h-4 w-4 mr-2\" />\n                  Recipe Generator\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Wrench className=\"h-4 w-4 mr-2\" />\n                  Testing Tools\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Item Categories Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Item Categories & Types</CardTitle>\n              <CardDescription>Understanding different approaches to item creation</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {itemCategories.map((category) => (\n                  <div key={category.type} className=\"p-4 border rounded-lg space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <category.icon className=\"h-5 w-5\" />\n                        <h4 className=\"font-semibold\">{category.type}</h4>\n                      </div>\n                      <Badge variant=\"outline\" className={getDifficultyColor(category.difficulty)}>\n                        {category.difficulty}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{category.description}</p>\n                    <div className=\"space-y-1\">\n                      <h5 className=\"text-sm font-medium\">Examples:</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {category.examples.map((example, index) => (\n                          <li key={index}>• {example}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Item Component System */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Item Component System</CardTitle>\n              <CardDescription>How components define item properties and behavior</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Package className=\"h-4 w-4 text-blue-500\" />\n                    Core Properties\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Basic item characteristics and behavior\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Stack Size</li>\n                    <li>• Display Name</li>\n                    <li>• Tooltip Text</li>\n                    <li>• Category</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Wrench className=\"h-4 w-4 text-green-500\" />\n                    Functionality\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    What the item can do and how it behaves\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Use Actions</li>\n                    <li>• Durability</li>\n                    <li>• Tool Properties</li>\n                    <li>• Consumable Effects</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4 text-purple-500\" />\n                    Visual & Audio\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    How the item appears and sounds\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Icon Texture</li>\n                    <li>• 3D Models</li>\n                    <li>• Animations</li>\n                    <li>• Sound Effects</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Component Reference Tab */}\n        <TabsContent value=\"component-reference\" className=\"space-y-6\">\n          {/* Embed the existing ItemDocs component */}\n          <ItemDocs onNavigate={onNavigate} />\n        </TabsContent>\n\n        {/* Advanced Topics Tab */}\n        <TabsContent value=\"advanced-topics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {advancedTopics.map((topic) => (\n              <Card key={topic.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <topic.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                        <CardDescription>{topic.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={topic.difficulty === 'advanced' ? 'destructive' : 'secondary'}>\n                        {topic.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{topic.estimatedTime}</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm\">{topic.content.overview}</p>\n                  \n                  {topic.content.example && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Example Implementation</h5>\n                      <CodePreview\n                        code={topic.content.example}\n                        language=\"json\"\n                        title={`${topic.title} Example`}\n                      />\n                    </div>\n                  )}\n\n                  {topic.content.patterns && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Common Patterns</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.patterns.map((pattern, index) => (\n                          <li key={index}>• {pattern}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.techniques && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Key Techniques</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.techniques.map((technique, index) => (\n                          <li key={index}>• {technique}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Workflow Tab */}\n        <TabsContent value=\"workflow\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Item Development Workflow</CardTitle>\n              <CardDescription>A systematic approach to creating high-quality items</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {workflowSteps.map((step, index) => (\n                <div key={step.id} className=\"flex gap-4\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"flex items-center justify-center w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900\">\n                      <step.icon className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    {index < workflowSteps.length - 1 && (\n                      <div className=\"w-px h-16 bg-border mt-2\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 space-y-3\">\n                    <div>\n                      <h4 className=\"font-semibold text-lg\">{step.title}</h4>\n                      <p className=\"text-muted-foreground\">{step.description}</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {step.tasks.map((task, taskIndex) => (\n                        <div key={taskIndex} className=\"flex items-center gap-2 text-sm\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <span>{task}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Examples Tab */}\n        <TabsContent value=\"examples\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Magic Crystal Item */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Sparkles className=\"h-5 w-5 text-purple-500\" />\n                  Magic Crystal\n                </CardTitle>\n                <CardDescription>A collectible item with special properties</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">Beginner</Badge>\n                  <Badge variant=\"outline\">10 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:magic_crystal\",\n      \"menu_category\": {\n        \"category\": \"items\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 16,\n      \"minecraft:rarity\": \"rare\",\n      \"minecraft:glint\": true,\n      \"minecraft:icon\": {\n        \"texture\": \"magic_crystal\"\n      }\n    }\n  }\n}`}\n                  language=\"json\"\n                  title=\"Magic Crystal Item\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('builder-item')}\n                  data-testid=\"open-crystal-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Build This Example\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Magic Sword Tool */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Sword className=\"h-5 w-5 text-red-500\" />\n                  Enchanted Sword\n                </CardTitle>\n                <CardDescription>A powerful weapon with durability and enchantments</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"secondary\">Intermediate</Badge>\n                  <Badge variant=\"outline\">25 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": \"1.21.0\",\n  \"minecraft:item\": {\n    \"description\": {\n      \"identifier\": \"my_addon:enchanted_sword\",\n      \"menu_category\": {\n        \"category\": \"equipment\"\n      }\n    },\n    \"components\": {\n      \"minecraft:max_stack_size\": 1,\n      \"minecraft:durability\": {\n        \"max_durability\": 800\n      },\n      \"minecraft:enchantable\": {\n        \"value\": 15,\n        \"slot\": \"sword\"\n      },\n      \"minecraft:weapon\": {\n        \"on_hurt_entity\": {\n          \"event\": \"sword_hit_effect\"\n        }\n      }\n    }\n  }\n}`}\n                  language=\"json\"\n                  title=\"Enchanted Sword\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('builder-item')}\n                  data-testid=\"open-sword-builder\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Build This Example\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":25600},"client/src/components/Documentation/tabs/ResourcePacksTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Image, Copy, ExternalLink, Filter, BookOpen, Palette, \n  Eye, Volume2, Sparkles, Layers, Play, Activity, Settings,\n  ChevronRight, CheckCircle, AlertTriangle, Info, Lightbulb, \n  Download, Upload, ArrowRight, Code, FileText, Camera,\n  Brush, Music, Film, Grid3X3, Zap, Target\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\ninterface ResourcePacksTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function ResourcePacksTab({ onNavigate, onProgressUpdate }: ResourcePacksTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Resource pack topics\n  const resourceTopics = [\n    {\n      id: 'texture-creation',\n      title: 'Texture Creation & Optimization',\n      description: 'Creating beautiful, optimized textures for all game elements',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '2 hours',\n      icon: Brush,\n      content: {\n        overview: 'Texture creation is fundamental to resource packs, affecting every visual aspect of the game.',\n        techniques: [\n          'Proper UV mapping and texture layouts',\n          'Compression and optimization techniques',\n          'Animated texture creation',\n          'Alpha channel and transparency',\n          'Seamless texture tiling'\n        ],\n        resolutions: [\n          '16x16 - Vanilla resolution',\n          '32x32 - HD textures',\n          '64x64 - High detail',\n          '128x128+ - Ultra HD (performance impact)'\n        ],\n        formats: [\n          'PNG - Standard format with transparency',\n          'TGA - Alternative with alpha support',\n          'Animated textures - .mcmeta files'\n        ]\n      }\n    },\n    {\n      id: 'model-creation',\n      title: 'Custom Models & Geometry',\n      description: 'Creating 3D models for blocks, items, and entities',\n      difficulty: 'advanced' as const,\n      estimatedTime: '3 hours',\n      icon: Grid3X3,\n      content: {\n        overview: 'Custom models allow you to break free from standard block shapes and create unique visual elements.',\n        modelTypes: [\n          'Block models - Custom block shapes',\n          'Item models - Handheld and inventory items',\n          'Entity models - Custom entity geometry',\n          'Attachables - Wearable items and accessories'\n        ],\n        tools: [\n          'Blockbench - Primary modeling tool',\n          'Blender - Advanced 3D modeling',\n          'MCreator - Visual model editor',\n          'JSON editors - Manual editing'\n        ]\n      }\n    },\n    {\n      id: 'animation-systems',\n      title: 'Animation Systems',\n      description: 'Creating smooth animations for models and textures',\n      difficulty: 'advanced' as const,\n      estimatedTime: '2.5 hours',\n      icon: Play,\n      content: {\n        overview: 'Animations bring life to your models through movement, rotation, and transformation.',\n        animationTypes: [\n          'Texture animations - Animated block/item textures',\n          'Model animations - 3D model movement',\n          'Entity animations - Character and creature animations',\n          'Particle animations - Visual effects'\n        ],\n        controllers: [\n          'Animation controllers - Logic-based animation',\n          'Render controllers - Conditional rendering',\n          'State machines - Complex animation flows'\n        ]\n      }\n    },\n    {\n      id: 'sound-integration',\n      title: 'Sound & Audio Integration',\n      description: 'Adding custom sounds and music to enhance immersion',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '1.5 hours',\n      icon: Volume2,\n      content: {\n        overview: 'Custom audio creates atmospheric and immersive experiences through sound effects and music.',\n        audioTypes: [\n          'Sound effects - Game interaction sounds',\n          'Ambient sounds - Environmental audio',\n          'Music - Background and situational music',\n          'Voice lines - Character speech'\n        ],\n        formats: [\n          'OGG Vorbis - Primary audio format',\n          'WAV - Uncompressed audio',\n          'MP3 - Compressed alternative'\n        ]\n      }\n    },\n    {\n      id: 'ui-customization',\n      title: 'UI Customization',\n      description: 'Customizing the game interface and HUD elements',\n      difficulty: 'advanced' as const,\n      estimatedTime: '3 hours',\n      icon: Settings,\n      content: {\n        overview: 'UI customization allows you to modify the game interface for better user experience.',\n        uiElements: [\n          'HUD elements - Health, hunger, hotbar',\n          'Menu screens - Start, pause, settings',\n          'Inventory interfaces - Chests, crafting',\n          'Dialog boxes - Trading, books'\n        ],\n        techniques: [\n          'Texture replacement - Swapping UI textures',\n          'JSON modification - Changing UI behavior',\n          'Custom fonts - Typography customization',\n          'Icon replacement - Custom item/block icons'\n        ]\n      }\n    },\n    {\n      id: 'particle-effects',\n      title: 'Particle Effects',\n      description: 'Creating stunning visual effects with particles',\n      difficulty: 'advanced' as const,\n      estimatedTime: '2 hours',\n      icon: Sparkles,\n      content: {\n        overview: 'Particle effects add dynamic visual flair to your resource pack.',\n        particleTypes: [\n          'Environmental particles - Rain, snow, leaves',\n          'Interactive particles - Breaking, hitting',\n          'Magical effects - Spells, enchantments',\n          'Atmospheric effects - Fog, dust, sparkles'\n        ],\n        properties: [\n          'Emission patterns - How particles spawn',\n          'Lifetime and decay - Particle duration',\n          'Physics simulation - Movement and collision',\n          'Texture and animation - Visual appearance'\n        ]\n      }\n    }\n  ];\n\n  // Resource pack creation workflow\n  const workflowSteps = [\n    {\n      id: 'planning-concept',\n      title: '1. Planning & Concept',\n      description: 'Define the visual style and scope',\n      icon: Lightbulb,\n      tasks: [\n        'Define art style and theme',\n        'Create reference mood boards',\n        'Plan texture resolution',\n        'Identify required assets'\n      ]\n    },\n    {\n      id: 'asset-creation',\n      title: '2. Asset Creation',\n      description: 'Create textures, models, and sounds',\n      icon: Brush,\n      tasks: [\n        'Create base textures',\n        'Design custom models',\n        'Record or source audio',\n        'Optimize file sizes'\n      ]\n    },\n    {\n      id: 'technical-implementation',\n      title: '3. Technical Implementation',\n      description: 'Implement assets in the resource pack',\n      icon: Code,\n      tasks: [\n        'Structure pack directories',\n        'Configure manifest files',\n        'Set up model definitions',\n        'Link audio files'\n      ]\n    },\n    {\n      id: 'testing-refinement',\n      title: '4. Testing & Refinement',\n      description: 'Test and polish the resource pack',\n      icon: Eye,\n      tasks: [\n        'Test in-game appearance',\n        'Check performance impact',\n        'Refine animations',\n        'Fix visual issues'\n      ]\n    },\n    {\n      id: 'distribution',\n      title: '5. Distribution',\n      description: 'Package and share your resource pack',\n      icon: Upload,\n      tasks: [\n        'Package as .mcpack file',\n        'Test installation process',\n        'Create preview images',\n        'Share with community'\n      ]\n    }\n  ];\n\n  // Quick reference for common tasks\n  const quickReference = [\n    {\n      category: 'Texture Sizes',\n      items: [\n        { name: '16x16', description: 'Vanilla resolution, best performance' },\n        { name: '32x32', description: 'HD quality, good balance' },\n        { name: '64x64', description: 'High detail, moderate impact' },\n        { name: '128x128+', description: 'Ultra HD, high impact' }\n      ]\n    },\n    {\n      category: 'File Formats',\n      items: [\n        { name: 'PNG', description: 'Standard for textures with transparency' },\n        { name: 'JSON', description: 'Model and animation definitions' },\n        { name: 'OGG', description: 'Audio files for sounds and music' },\n        { name: 'MCMeta', description: 'Animation and metadata files' }\n      ]\n    },\n    {\n      category: 'Directory Structure',\n      items: [\n        { name: '/textures/', description: 'All texture files' },\n        { name: '/models/', description: 'Custom geometry definitions' },\n        { name: '/sounds/', description: 'Audio files and definitions' },\n        { name: '/animations/', description: 'Animation files' }\n      ]\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"resource-packs-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Resource Packs</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Transform the visual and audio experience of Minecraft with custom textures, models, animations, and sounds.\n          Create immersive worlds that look and feel exactly as you envision.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"creation-guides\" data-testid=\"tab-guides\">🎨 Creation Guides</TabsTrigger>\n          <TabsTrigger value=\"workflow\" data-testid=\"tab-workflow\">📋 Workflow</TabsTrigger>\n          <TabsTrigger value=\"examples\" data-testid=\"tab-examples\">💡 Examples</TabsTrigger>\n          <TabsTrigger value=\"tools\" data-testid=\"tab-tools\">🛠️ Tools</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Image className=\"h-5 w-5\" />\n                  Resource Power\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Asset Types</span>\n                    <span className=\"font-medium\">6+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Texture Categories</span>\n                    <span className=\"font-medium\">20+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Model Types</span>\n                    <span className=\"font-medium\">10+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('texture-creator')}\n                  data-testid=\"open-texture-creator\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Texture Creator\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Key Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Palette className=\"h-5 w-5\" />\n                  Key Features\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Custom Textures</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">3D Models</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Animations</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Sound Effects</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">UI Customization</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Pack Template\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Brush className=\"h-4 w-4 mr-2\" />\n                  Texture Editor\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Grid3X3 className=\"h-4 w-4 mr-2\" />\n                  Model Creator\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Volume2 className=\"h-4 w-4 mr-2\" />\n                  Sound Manager\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Reference Sections */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {quickReference.map((section) => (\n              <Card key={section.category}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{section.category}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {section.items.map((item, index) => (\n                    <div key={index} className=\"space-y-1\">\n                      <div className=\"font-mono text-sm font-medium text-blue-600 dark:text-blue-400\">\n                        {item.name}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {item.description}\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Resource Pack Structure */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Resource Pack Structure</CardTitle>\n              <CardDescription>Understanding the anatomy of a resource pack</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <FileText className=\"h-4 w-4 text-blue-500\" />\n                    Core Files\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Essential files for pack function\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• manifest.json - Pack metadata</li>\n                    <li>• pack_icon.png - Pack thumbnail</li>\n                    <li>• sounds.json - Audio definitions</li>\n                    <li>• biomes_client.json - Biome visuals</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Image className=\"h-4 w-4 text-green-500\" />\n                    Asset Directories\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Organized folders for different assets\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• /textures/ - All texture files</li>\n                    <li>• /models/ - 3D model definitions</li>\n                    <li>• /sounds/ - Audio files</li>\n                    <li>• /animations/ - Animation data</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Creation Guides Tab */}\n        <TabsContent value=\"creation-guides\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {resourceTopics.map((topic) => (\n              <Card key={topic.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <topic.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                        <CardDescription>{topic.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={topic.difficulty === 'advanced' ? 'destructive' : 'secondary'}>\n                        {topic.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{topic.estimatedTime}</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm\">{topic.content.overview}</p>\n                  \n                  {topic.content.techniques && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Key Techniques</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.techniques.map((technique, index) => (\n                          <li key={index}>• {technique}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.modelTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Model Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.modelTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.animationTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Animation Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.animationTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.audioTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Audio Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.audioTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.uiElements && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">UI Elements</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.uiElements.map((element, index) => (\n                          <li key={index}>• {element}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.particleTypes && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Particle Types</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.particleTypes.map((type, index) => (\n                          <li key={index}>• {type}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Workflow Tab */}\n        <TabsContent value=\"workflow\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Resource Pack Creation Workflow</CardTitle>\n              <CardDescription>A step-by-step guide to creating professional resource packs</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {workflowSteps.map((step, index) => (\n                <div key={step.id} className=\"flex gap-4\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"flex items-center justify-center w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900\">\n                      <step.icon className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    {index < workflowSteps.length - 1 && (\n                      <div className=\"w-px h-16 bg-border mt-2\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 space-y-3\">\n                    <div>\n                      <h4 className=\"font-semibold text-lg\">{step.title}</h4>\n                      <p className=\"text-muted-foreground\">{step.description}</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {step.tasks.map((task, taskIndex) => (\n                        <div key={taskIndex} className=\"flex items-center gap-2 text-sm\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <span>{task}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Examples Tab */}\n        <TabsContent value=\"examples\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Basic Resource Pack */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Palette className=\"h-5 w-5 text-purple-500\" />\n                  Basic Texture Pack\n                </CardTitle>\n                <CardDescription>Simple texture replacements for blocks and items</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">Beginner</Badge>\n                  <Badge variant=\"outline\">30 min</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": 2,\n  \"header\": {\n    \"description\": \"My Custom Texture Pack\",\n    \"name\": \"Custom Textures\",\n    \"uuid\": \"generated-uuid-here\",\n    \"version\": [1, 0, 0],\n    \"min_engine_version\": [1, 20, 0]\n  },\n  \"modules\": [\n    {\n      \"description\": \"Resource Pack\",\n      \"type\": \"resources\",\n      \"uuid\": \"generated-uuid-here\",\n      \"version\": [1, 0, 0]\n    }\n  ]\n}`}\n                  language=\"json\"\n                  title=\"Basic Resource Pack Manifest\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('texture-creator')}\n                  data-testid=\"create-texture-pack\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Create Texture Pack\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Advanced Model Pack */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Grid3X3 className=\"h-5 w-5 text-green-500\" />\n                  Custom Model Pack\n                </CardTitle>\n                <CardDescription>Resource pack with custom 3D models and animations</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"destructive\">Advanced</Badge>\n                  <Badge variant=\"outline\">2 hours</Badge>\n                </div>\n                <CodePreview\n                  code={`{\n  \"format_version\": \"1.12.0\",\n  \"minecraft:geometry\": [\n    {\n      \"description\": {\n        \"identifier\": \"geometry.custom_block\",\n        \"texture_width\": 64,\n        \"texture_height\": 64\n      },\n      \"bones\": [\n        {\n          \"name\": \"root\",\n          \"pivot\": [0, 0, 0],\n          \"cubes\": [\n            {\n              \"origin\": [-8, 0, -8],\n              \"size\": [16, 12, 16],\n              \"uv\": [0, 0]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}`}\n                  language=\"json\"\n                  title=\"Custom Block Geometry\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  data-testid=\"create-model-pack\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Try Advanced Pack\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tools Tab */}\n        <TabsContent value=\"tools\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Essential Tools for Resource Pack Creation</CardTitle>\n              <CardDescription>Recommended tools and software for different aspects of resource pack development</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">Texture Creation</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">GIMP (Free)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Powerful image editor with plugin support</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Paint.NET (Free)</h5>\n                      <p className=\"text-sm text-muted-foreground\">User-friendly editor with great plugins</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Photoshop (Paid)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Industry standard with advanced features</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">3D Modeling</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Blockbench (Free)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Minecraft-specific modeling tool</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Blender (Free)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Professional 3D modeling suite</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Maya (Paid)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Advanced modeling and animation</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">Audio Editing</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Audacity (Free)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Simple audio editor for sound effects</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Reaper (Paid)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Professional audio workstation</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">FL Studio (Paid)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Music creation and sound design</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">Pack Management</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">VS Code (Free)</h5>\n                      <p className=\"text-sm text-muted-foreground\">JSON editing with extensions</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Bridge (Free)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Minecraft addon development IDE</p>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h5 className=\"font-medium\">Regolith (Free)</h5>\n                      <p className=\"text-sm text-muted-foreground\">Build system for addon development</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":32444},"client/src/components/Documentation/tabs/ScriptingApiTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, Code, Copy, ExternalLink, Server, Terminal, Zap, \n  BookOpen, Database, Users, Globe, Gamepad2, MessageSquare,\n  ChevronRight, CheckCircle, AlertTriangle, Info, Lightbulb,\n  Play, Clock, Activity, BarChart3, Settings, Target, Layers,\n  FileCode, Package, Shield, Eye, Wrench, Cpu, ArrowRight\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\n// Import the existing ScriptingDocs to leverage its content\nimport ScriptingDocs from \"../ScriptingDocs\";\n\ninterface ScriptingApiTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function ScriptingApiTab({ onNavigate, onProgressUpdate }: ScriptingApiTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Advanced scripting topics\n  const advancedTopics = [\n    {\n      id: 'performance-patterns',\n      title: 'Performance Optimization Patterns',\n      description: 'Writing efficient scripts that don\\'t impact game performance',\n      difficulty: 'advanced' as const,\n      estimatedTime: '45 min',\n      icon: BarChart3,\n      content: {\n        overview: 'Performance optimization is crucial for scripts that run frequently or handle large amounts of data.',\n        patterns: [\n          'Event batching and throttling',\n          'Efficient entity querying and filtering',\n          'Memory management and cleanup',\n          'Asynchronous operation handling',\n          'Caching strategies for expensive operations'\n        ],\n        example: `import { system, world } from '@minecraft/server';\n\n// Efficient entity querying with batching\nclass EntityManager {\n  private entityCache = new Map();\n  private lastCacheUpdate = 0;\n  private readonly CACHE_DURATION = 100; // ticks\n\n  getEntitiesInRange(location, range, typeId) {\n    const now = system.currentTick;\n    const cacheKey = \\`\\${location.x},\\${location.y},\\${location.z}_\\${range}_\\${typeId}\\`;\n    \n    if (now - this.lastCacheUpdate < this.CACHE_DURATION && \n        this.entityCache.has(cacheKey)) {\n      return this.entityCache.get(cacheKey);\n    }\n    \n    const entities = world.getEntities({\n      location,\n      maxDistance: range,\n      type: typeId\n    });\n    \n    this.entityCache.set(cacheKey, entities);\n    this.lastCacheUpdate = now;\n    return entities;\n  }\n}`\n      }\n    },\n    {\n      id: 'event-system-mastery',\n      title: 'Event System Deep Dive',\n      description: 'Advanced event handling and custom event systems',\n      difficulty: 'advanced' as const,\n      estimatedTime: '50 min',\n      icon: Zap,\n      content: {\n        overview: 'Master the event system to create responsive and interactive addons.',\n        concepts: [\n          'Event priority and ordering',\n          'Custom event creation and dispatch',\n          'Event cancellation and modification',\n          'Cross-script communication',\n          'Event-driven architecture patterns'\n        ],\n        example: `import { world, system } from '@minecraft/server';\n\n// Custom event system for addon communication\nclass EventBus {\n  private listeners = new Map();\n\n  on(eventName, callback, priority = 0) {\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, []);\n    }\n    \n    const eventListeners = this.listeners.get(eventName);\n    eventListeners.push({ callback, priority });\n    eventListeners.sort((a, b) => b.priority - a.priority);\n  }\n\n  emit(eventName, data) {\n    const listeners = this.listeners.get(eventName);\n    if (!listeners) return;\n\n    for (const { callback } of listeners) {\n      try {\n        const result = callback(data);\n        if (result === false) break; // Stop propagation\n      } catch (error) {\n        console.error(\\`Event handler error for \\${eventName}:\\`, error);\n      }\n    }\n  }\n}\n\nexport const eventBus = new EventBus();`\n      }\n    },\n    {\n      id: 'debugging-testing',\n      title: 'Debugging & Testing Strategies',\n      description: 'Effective techniques for debugging and testing scripts',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '35 min',\n      icon: Wrench,\n      content: {\n        overview: 'Proper debugging and testing practices are essential for creating reliable scripts.',\n        strategies: [\n          'Console logging and debug output',\n          'Error handling and graceful failures',\n          'Unit testing for script functions',\n          'Integration testing in game',\n          'Performance profiling and monitoring'\n        ],\n        example: `// Debug utility class\nclass Debug {\n  static enabled = true;\n  static logLevel = 'info'; // 'debug', 'info', 'warn', 'error'\n  \n  static log(level, message, ...args) {\n    if (!this.enabled) return;\n    \n    const levels = ['debug', 'info', 'warn', 'error'];\n    const currentLevelIndex = levels.indexOf(this.logLevel);\n    const messageLevelIndex = levels.indexOf(level);\n    \n    if (messageLevelIndex >= currentLevelIndex) {\n      console.log(\\`[\\${level.toUpperCase()}] \\${message}\\`, ...args);\n    }\n  }\n  \n  static debug(message, ...args) { this.log('debug', message, ...args); }\n  static info(message, ...args) { this.log('info', message, ...args); }\n  static warn(message, ...args) { this.log('warn', message, ...args); }\n  static error(message, ...args) { this.log('error', message, ...args); }\n}`\n      }\n    },\n    {\n      id: 'typescript-integration',\n      title: 'TypeScript Development',\n      description: 'Using TypeScript for better script development',\n      difficulty: 'intermediate' as const,\n      estimatedTime: '40 min',\n      icon: FileCode,\n      content: {\n        overview: 'TypeScript provides type safety and better development experience for Minecraft scripts.',\n        benefits: [\n          'Type safety and error prevention',\n          'Better IDE support and autocomplete',\n          'Refactoring tools and navigation',\n          'Interface definitions for complex data',\n          'Compile-time error checking'\n        ],\n        setup: `// tsconfig.json for Minecraft Bedrock scripting\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ES2020\",\n    \"moduleResolution\": \"node\",\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"declaration\": true,\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\"\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}`\n      }\n    }\n  ];\n\n  // Scripting learning path\n  const learningPath = [\n    {\n      id: 'basics',\n      title: 'JavaScript/TypeScript Basics',\n      description: 'Core language features and concepts',\n      estimatedTime: '2 hours',\n      icon: Code,\n      topics: [\n        'Variables, functions, and objects',\n        'Async/await and promises',\n        'Modules and imports',\n        'Error handling'\n      ]\n    },\n    {\n      id: 'minecraft-apis',\n      title: 'Minecraft API Fundamentals',\n      description: 'Understanding the core Minecraft scripting APIs',\n      estimatedTime: '3 hours',\n      icon: Gamepad2,\n      topics: [\n        'World and dimension access',\n        'Entity manipulation',\n        'Block operations',\n        'Player interactions'\n      ]\n    },\n    {\n      id: 'event-handling',\n      title: 'Event-Driven Programming',\n      description: 'Responding to game events and creating interactions',\n      estimatedTime: '2 hours',\n      icon: Zap,\n      topics: [\n        'Event subscription and handling',\n        'Custom event creation',\n        'Event timing and scheduling',\n        'Performance considerations'\n      ]\n    },\n    {\n      id: 'advanced-systems',\n      title: 'Advanced System Design',\n      description: 'Creating complex, maintainable script systems',\n      estimatedTime: '4 hours',\n      icon: Layers,\n      topics: [\n        'Modular architecture patterns',\n        'State management',\n        'Cross-script communication',\n        'Performance optimization'\n      ]\n    }\n  ];\n\n  // Quick reference sections\n  const quickReference = [\n    {\n      id: 'common-apis',\n      title: 'Most Used APIs',\n      items: [\n        { name: 'world.getPlayers()', description: 'Get all players in the world' },\n        { name: 'player.runCommand()', description: 'Execute a command as a player' },\n        { name: 'world.getEntities()', description: 'Query entities with filters' },\n        { name: 'dimension.getBlock()', description: 'Get block at location' },\n        { name: 'system.runTimeout()', description: 'Schedule delayed execution' }\n      ]\n    },\n    {\n      id: 'event-types',\n      title: 'Common Events',\n      items: [\n        { name: 'world.afterEvents.playerJoin', description: 'When a player joins' },\n        { name: 'world.afterEvents.itemUse', description: 'When an item is used' },\n        { name: 'world.afterEvents.blockBreak', description: 'When a block is broken' },\n        { name: 'world.afterEvents.entityHit', description: 'When an entity is hit' },\n        { name: 'system.afterEvents.scriptEventReceive', description: 'Custom script events' }\n      ]\n    },\n    {\n      id: 'utilities',\n      title: 'Utility Functions',\n      items: [\n        { name: 'Vector3Utils.add()', description: 'Vector addition operations' },\n        { name: 'BlockPermutation.resolve()', description: 'Create block permutations' },\n        { name: 'Entity.getComponent()', description: 'Access entity components' },\n        { name: 'Player.sendMessage()', description: 'Send messages to players' },\n        { name: 'Dimension.runCommand()', description: 'Execute commands in dimension' }\n      ]\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"scripting-api-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Scripting & APIs</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Harness the power of JavaScript and TypeScript to create dynamic, interactive addons.\n          From simple automation to complex game mechanics, scripting opens unlimited possibilities.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"learning-path\" data-testid=\"tab-learning\">📚 Learning Path</TabsTrigger>\n          <TabsTrigger value=\"api-reference\" data-testid=\"tab-api\">🔍 API Reference</TabsTrigger>\n          <TabsTrigger value=\"advanced-topics\" data-testid=\"tab-advanced\">🚀 Advanced</TabsTrigger>\n          <TabsTrigger value=\"examples\" data-testid=\"tab-examples\">💡 Examples</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Code className=\"h-5 w-5\" />\n                  Scripting Power\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">API Modules</span>\n                    <span className=\"font-medium\">8+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Available APIs</span>\n                    <span className=\"font-medium\">476+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Event Types</span>\n                    <span className=\"font-medium\">50+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('script-studio')}\n                  data-testid=\"open-script-studio\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Script Studio\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Key Capabilities */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Key Capabilities\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">World Manipulation</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Entity Control</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Player Interactions</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">UI Systems</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Event Handling</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Terminal className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <FileCode className=\"h-4 w-4 mr-2\" />\n                  Script Template\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  API Explorer\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Example Scripts\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Wrench className=\"h-4 w-4 mr-2\" />\n                  Debug Tools\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Reference Sections */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {quickReference.map((section) => (\n              <Card key={section.id}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{section.title}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {section.items.map((item, index) => (\n                    <div key={index} className=\"space-y-1\">\n                      <div className=\"font-mono text-sm font-medium text-blue-600 dark:text-blue-400\">\n                        {item.name}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {item.description}\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Scripting Modules Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Scripting Modules Overview</CardTitle>\n              <CardDescription>Core modules available for Minecraft Bedrock scripting</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Server className=\"h-4 w-4 text-blue-500\" />\n                    @minecraft/server\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Core server-side scripting capabilities\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• World and dimension access</li>\n                    <li>• Entity and player management</li>\n                    <li>• Block operations</li>\n                    <li>• Event system</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <MessageSquare className=\"h-4 w-4 text-green-500\" />\n                    @minecraft/server-ui\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    User interface and form creation\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Modal forms and dialogs</li>\n                    <li>• Action bars and titles</li>\n                    <li>• Custom UI elements</li>\n                    <li>• Player input handling</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Shield className=\"h-4 w-4 text-red-500\" />\n                    @minecraft/server-admin\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Server administration and management\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Variable management</li>\n                    <li>• Secret handling</li>\n                    <li>• Server configuration</li>\n                    <li>• Admin commands</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                    <Target className=\"h-4 w-4 text-purple-500\" />\n                    @minecraft/server-gametest\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Testing and validation framework\n                  </p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Automated testing</li>\n                    <li>• Structure templates</li>\n                    <li>• Test assertions</li>\n                    <li>• Mock environments</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Learning Path Tab */}\n        <TabsContent value=\"learning-path\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Scripting Learning Path</CardTitle>\n              <CardDescription>A structured approach to mastering Minecraft Bedrock scripting</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {learningPath.map((step, index) => (\n                <div key={step.id} className=\"flex gap-4\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-blue-100 dark:bg-blue-900\">\n                      <step.icon className=\"h-6 w-6 text-blue-600\" />\n                    </div>\n                    {index < learningPath.length - 1 && (\n                      <div className=\"w-px h-20 bg-border mt-2\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h4 className=\"font-semibold text-lg\">{step.title}</h4>\n                        <p className=\"text-muted-foreground\">{step.description}</p>\n                      </div>\n                      <Badge variant=\"outline\">{step.estimatedTime}</Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {step.topics.map((topic, topicIndex) => (\n                        <div key={topicIndex} className=\"flex items-center gap-2 text-sm\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <span>{topic}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* API Reference Tab */}\n        <TabsContent value=\"api-reference\" className=\"space-y-6\">\n          {/* Embed the existing ScriptingDocs component */}\n          <ScriptingDocs onNavigate={onNavigate} />\n        </TabsContent>\n\n        {/* Advanced Topics Tab */}\n        <TabsContent value=\"advanced-topics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {advancedTopics.map((topic) => (\n              <Card key={topic.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <topic.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                        <CardDescription>{topic.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={topic.difficulty === 'advanced' ? 'destructive' : 'secondary'}>\n                        {topic.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{topic.estimatedTime}</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm\">{topic.content.overview}</p>\n                  \n                  {topic.content.example && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Example Implementation</h5>\n                      <CodePreview\n                        code={topic.content.example}\n                        language=\"javascript\"\n                        title={`${topic.title} Example`}\n                      />\n                    </div>\n                  )}\n\n                  {topic.content.patterns && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Key Patterns</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.patterns.map((pattern, index) => (\n                          <li key={index}>• {pattern}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.concepts && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Core Concepts</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.concepts.map((concept, index) => (\n                          <li key={index}>• {concept}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.strategies && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Strategies</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.strategies.map((strategy, index) => (\n                          <li key={index}>• {strategy}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.benefits && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Benefits</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {topic.content.benefits.map((benefit, index) => (\n                          <li key={index}>• {benefit}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {topic.content.setup && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Setup Configuration</h5>\n                      <CodePreview\n                        code={topic.content.setup}\n                        language=\"json\"\n                        title=\"Configuration Example\"\n                      />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Examples Tab */}\n        <TabsContent value=\"examples\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Simple Player Welcome Script */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5 text-green-500\" />\n                  Player Welcome System\n                </CardTitle>\n                <CardDescription>Greet players when they join the world</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">Beginner</Badge>\n                  <Badge variant=\"outline\">10 min</Badge>\n                </div>\n                <CodePreview\n                  code={`import { world } from '@minecraft/server';\n\n// Welcome new players\nworld.afterEvents.playerJoin.subscribe((event) => {\n  const player = event.player;\n  \n  // Send welcome message\n  player.sendMessage('§aWelcome to our server!');\n  \n  // Give starter items\n  const inventory = player.getComponent('inventory').container;\n  inventory.addItem(new ItemStack('minecraft:bread', 5));\n  \n  // Teleport to spawn\n  player.teleport({ x: 0, y: 70, z: 0 });\n  \n  console.log(\\`Player \\${player.name} joined the game\\`);\n});`}\n                  language=\"javascript\"\n                  title=\"Welcome Script\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('script-studio')}\n                  data-testid=\"open-welcome-script\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Try This Script\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Advanced Entity Controller */}\n            <Card className=\"hover:shadow-lg transition-all\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5 text-purple-500\" />\n                  Dynamic Entity Controller\n                </CardTitle>\n                <CardDescription>Advanced entity manipulation and AI control</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"destructive\">Advanced</Badge>\n                  <Badge variant=\"outline\">45 min</Badge>\n                </div>\n                <CodePreview\n                  code={`import { world, system } from '@minecraft/server';\n\nclass EntityController {\n  constructor(entityTypeId) {\n    this.entityTypeId = entityTypeId;\n    this.controlledEntities = new Set();\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    world.afterEvents.entitySpawn.subscribe((event) => {\n      if (event.entity.typeId === this.entityTypeId) {\n        this.registerEntity(event.entity);\n      }\n    });\n  }\n\n  registerEntity(entity) {\n    this.controlledEntities.add(entity);\n    \n    // Add custom behavior\n    system.runInterval(() => {\n      if (entity.isValid()) {\n        this.updateEntityBehavior(entity);\n      } else {\n        this.controlledEntities.delete(entity);\n      }\n    }, 20); // Run every second\n  }\n\n  updateEntityBehavior(entity) {\n    const nearbyPlayers = entity.dimension.getPlayers({\n      location: entity.location,\n      maxDistance: 10\n    });\n\n    if (nearbyPlayers.length > 0) {\n      // Custom AI behavior when players are near\n      entity.addTag('player_nearby');\n    } else {\n      entity.removeTag('player_nearby');\n    }\n  }\n}\n\n// Initialize controller for custom entities\nconst myEntityController = new EntityController('my_addon:custom_mob');`}\n                  language=\"javascript\"\n                  title=\"Entity Controller\"\n                />\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => onNavigate?.('script-studio')}\n                  data-testid=\"open-entity-controller\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Try This Script\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":31386},"client/src/components/Documentation/tabs/TroubleshootingTab.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Search, AlertTriangle, Copy, ExternalLink, Filter, BookOpen, Wrench, \n  Bug, HelpCircle, Shield, Database, Network, Eye, Settings,\n  ChevronRight, CheckCircle, Info, Lightbulb, Clock, Activity,\n  Download, Upload, ArrowRight, Code, FileText, Zap,\n  BarChart3, Users, Globe, Target, Layers\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CodePreview from \"@/components/Common/CodePreview\";\n\ninterface TroubleshootingTabProps {\n  onNavigate?: (section: string) => void;\n  onProgressUpdate?: (progress: number) => void;\n}\n\nexport default function TroubleshootingTab({ onNavigate, onProgressUpdate }: TroubleshootingTabProps) {\n  const [activeSubTab, setActiveSubTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  // Common error categories\n  const errorCategories = [\n    {\n      id: 'manifest-errors',\n      title: 'Manifest & Configuration Errors',\n      description: 'Issues with manifest.json and pack configuration',\n      difficulty: 'beginner' as const,\n      icon: FileText,\n      errorCount: 12,\n      commonErrors: [\n        {\n          error: 'Invalid manifest format',\n          cause: 'Syntax errors in manifest.json',\n          solution: 'Validate JSON syntax and format version',\n          code: `{\n  \"format_version\": 2,\n  \"header\": {\n    \"description\": \"My Addon\",\n    \"name\": \"My Addon\",\n    \"uuid\": \"valid-uuid-here\",\n    \"version\": [1, 0, 0],\n    \"min_engine_version\": [1, 20, 0]\n  }\n}`\n        },\n        {\n          error: 'Pack not loading',\n          cause: 'Incorrect file structure or missing files',\n          solution: 'Check file paths and ensure all required files exist',\n          steps: [\n            'Verify manifest.json is in root directory',\n            'Check all file paths are correct',\n            'Ensure pack_icon.png exists',\n            'Validate all JSON files'\n          ]\n        }\n      ]\n    },\n    {\n      id: 'scripting-errors',\n      title: 'Scripting & Code Errors',\n      description: 'JavaScript/TypeScript runtime and logic errors',\n      difficulty: 'intermediate' as const,\n      icon: Code,\n      errorCount: 18,\n      commonErrors: [\n        {\n          error: 'Script execution failed',\n          cause: 'Runtime errors in JavaScript code',\n          solution: 'Check console logs and fix syntax/logic errors',\n          debugging: [\n            'Use console.log() for debugging',\n            'Check browser/game console for errors',\n            'Validate API calls and parameters',\n            'Test with simplified code first'\n          ]\n        },\n        {\n          error: 'API call failures',\n          cause: 'Incorrect API usage or unavailable methods',\n          solution: 'Verify API availability and correct usage',\n          code: `// Check API availability before use\nif (world && world.getPlayers) {\n  const players = world.getPlayers();\n  // Safe to use players array\n} else {\n  console.error('Players API not available');\n}`\n        }\n      ]\n    },\n    {\n      id: 'performance-issues',\n      title: 'Performance & Optimization Issues',\n      description: 'Frame drops, memory leaks, and performance problems',\n      difficulty: 'advanced' as const,\n      icon: BarChart3,\n      errorCount: 8,\n      commonErrors: [\n        {\n          error: 'Frame rate drops',\n          cause: 'Too many entities or expensive operations',\n          solution: 'Optimize entity counts and script execution',\n          optimization: [\n            'Limit active entities to <100',\n            'Use entity pooling for frequent spawns',\n            'Batch operations where possible',\n            'Profile and optimize hot paths'\n          ]\n        },\n        {\n          error: 'Memory leaks',\n          cause: 'Objects not being garbage collected',\n          solution: 'Proper cleanup and memory management',\n          prevention: [\n            'Remove event listeners when done',\n            'Clear object references',\n            'Use weak references where appropriate',\n            'Monitor memory usage during development'\n          ]\n        }\n      ]\n    },\n    {\n      id: 'multiplayer-issues',\n      title: 'Multiplayer & Networking Issues',\n      description: 'Problems that occur in multiplayer environments',\n      difficulty: 'advanced' as const,\n      icon: Users,\n      errorCount: 10,\n      commonErrors: [\n        {\n          error: 'Desync between players',\n          cause: 'State not properly synchronized',\n          solution: 'Implement proper state synchronization',\n          patterns: [\n            'Use server authority for important state',\n            'Send state updates to all players',\n            'Handle player disconnections gracefully',\n            'Validate state changes on server'\n          ]\n        },\n        {\n          error: 'Network lag issues',\n          cause: 'Too frequent network updates',\n          solution: 'Optimize network communication',\n          techniques: [\n            'Batch network updates',\n            'Use delta compression',\n            'Prioritize important updates',\n            'Implement client prediction'\n          ]\n        }\n      ]\n    },\n    {\n      id: 'compatibility-issues',\n      title: 'Compatibility & Version Issues',\n      description: 'Problems with different game versions or platforms',\n      difficulty: 'intermediate' as const,\n      icon: Globe,\n      errorCount: 6,\n      commonErrors: [\n        {\n          error: 'Addon not working on new version',\n          cause: 'API changes or deprecated features',\n          solution: 'Update code for new API versions',\n          migration: [\n            'Check format version requirements',\n            'Update deprecated API calls',\n            'Test on target game version',\n            'Provide fallbacks for missing features'\n          ]\n        },\n        {\n          error: 'Platform-specific issues',\n          cause: 'Different behavior on mobile/console',\n          solution: 'Test and adapt for platform differences',\n          considerations: [\n            'Performance differences',\n            'Input method variations',\n            'Screen size adaptations',\n            'Platform-specific limitations'\n          ]\n        }\n      ]\n    }\n  ];\n\n  // Debugging tools and techniques\n  const debuggingTools = [\n    {\n      tool: 'Console Logging',\n      description: 'Basic debugging with console output',\n      usage: [\n        'Use console.log() for variable inspection',\n        'console.error() for error reporting',\n        'console.warn() for warnings',\n        'console.time() for performance timing'\n      ],\n      example: `// Debug logging example\nconsole.log('Player count:', players.length);\nconsole.error('Failed to spawn entity:', error);\nconsole.time('entity-update');\n// ... expensive operation\nconsole.timeEnd('entity-update');`\n    },\n    {\n      tool: 'Game Commands',\n      description: 'Built-in Minecraft debugging commands',\n      commands: [\n        '/tick query - Check game tick rate',\n        '/debug start/stop - Performance profiling',\n        '/reload - Reload behavior packs',\n        '/function - Test custom functions'\n      ],\n      example: `# Performance debugging\n/tick query\n/debug start\n# ... perform actions to test\n/debug stop`\n    },\n    {\n      tool: 'Error Boundaries',\n      description: 'Structured error handling in scripts',\n      patterns: [\n        'Try-catch blocks for error handling',\n        'Graceful degradation on failures',\n        'Error reporting to logs',\n        'Recovery mechanisms'\n      ],\n      example: `try {\n  // Potentially failing operation\n  const result = dangerousOperation();\n  console.log('Success:', result);\n} catch (error) {\n  console.error('Operation failed:', error);\n  // Fallback behavior\n  handleFailure();\n}`\n    }\n  ];\n\n  // Performance troubleshooting checklist\n  const performanceChecklist = [\n    {\n      category: 'Entity Performance',\n      checks: [\n        { item: 'Entity count under 100 active entities', critical: true },\n        { item: 'No entities with unused AI components', critical: true },\n        { item: 'Pathfinding limited to nearby entities', critical: true },\n        { item: 'Entity despawning working correctly', critical: false },\n        { item: 'Entity pooling implemented for frequent spawns', critical: false }\n      ]\n    },\n    {\n      category: 'Script Performance',\n      checks: [\n        { item: 'Scripts execute under 5ms per frame', critical: true },\n        { item: 'No infinite loops or runaway scripts', critical: true },\n        { item: 'Event handlers are properly cleaned up', critical: true },\n        { item: 'Heavy operations are batched or async', critical: false },\n        { item: 'Memory usage is stable over time', critical: false }\n      ]\n    },\n    {\n      category: 'Asset Performance',\n      checks: [\n        { item: 'Textures are optimized for size', critical: false },\n        { item: 'Models have reasonable vertex counts', critical: false },\n        { item: 'Audio files are compressed', critical: false },\n        { item: 'Animations are not too complex', critical: false },\n        { item: 'Particle effects are optimized', critical: false }\n      ]\n    }\n  ];\n\n  // Quick fixes for common issues\n  const quickFixes = [\n    {\n      problem: 'Addon not appearing in game',\n      fixes: [\n        'Check manifest.json syntax',\n        'Verify file structure',\n        'Restart Minecraft',\n        'Clear game cache'\n      ]\n    },\n    {\n      problem: 'Script not running',\n      fixes: [\n        'Check console for errors',\n        'Verify import statements',\n        'Ensure proper event registration',\n        'Test with minimal code'\n      ]\n    },\n    {\n      problem: 'Poor performance',\n      fixes: [\n        'Reduce entity count',\n        'Optimize script execution',\n        'Check for memory leaks',\n        'Profile critical sections'\n      ]\n    },\n    {\n      problem: 'Multiplayer issues',\n      fixes: [\n        'Test with multiple players',\n        'Check state synchronization',\n        'Verify server authority',\n        'Handle disconnections'\n      ]\n    }\n  ];\n\n  const copyToClipboard = async (code: string, title: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied to clipboard\",\n        description: `${title} has been copied to your clipboard.`,\n      });\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n      case 'intermediate': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';\n      case 'advanced': return 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';\n      default: return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"troubleshooting-tab\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h2 className=\"text-3xl font-bold\">Troubleshooting</h2>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Solve common problems and debug issues in your Minecraft Bedrock addons. From manifest errors to\n          performance issues, find solutions to keep your addons running smoothly.\n        </p>\n      </div>\n\n      <Tabs value={activeSubTab} onValueChange={setActiveSubTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">🎯 Overview</TabsTrigger>\n          <TabsTrigger value=\"common-errors\" data-testid=\"tab-errors\">🐛 Common Errors</TabsTrigger>\n          <TabsTrigger value=\"debugging\" data-testid=\"tab-debugging\">🔍 Debugging</TabsTrigger>\n          <TabsTrigger value=\"performance\" data-testid=\"tab-performance\">⚡ Performance</TabsTrigger>\n          <TabsTrigger value=\"quick-fixes\" data-testid=\"tab-quick-fixes\">🚀 Quick Fixes</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-5 w-5\" />\n                  Issue Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Error Types</span>\n                    <span className=\"font-medium\">5+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Common Issues</span>\n                    <span className=\"font-medium\">54+</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Debug Tools</span>\n                    <span className=\"font-medium\">10+</span>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => onNavigate?.('validator')}\n                  data-testid=\"open-debug-tools\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Open Debug Tools\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Issue Types */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Bug className=\"h-5 w-5\" />\n                  Issue Types\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Manifest Errors</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Script Issues</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Performance</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Multiplayer</Badge>\n                  <Badge variant=\"outline\" className=\"w-full justify-center\">Compatibility</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Wrench className=\"h-5 w-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Validate Manifest\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <Code className=\"h-4 w-4 mr-2\" />\n                  Check Scripts\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Performance Test\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                  <HelpCircle className=\"h-4 w-4 mr-2\" />\n                  Get Help\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Error Categories Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {errorCategories.slice(0, 3).map((category) => (\n              <Card key={category.id} className=\"hover:shadow-lg transition-all cursor-pointer\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <category.icon className=\"h-5 w-5\" />\n                      <CardTitle className=\"text-lg\">{category.title}</CardTitle>\n                    </div>\n                    <Badge variant=\"outline\">{category.errorCount} issues</Badge>\n                  </div>\n                  <CardDescription>{category.description}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"outline\" className={getDifficultyColor(category.difficulty)}>\n                      {category.difficulty}\n                    </Badge>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      View Details\n                      <ChevronRight className=\"h-4 w-4 ml-1\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Troubleshooting Process */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Systematic Troubleshooting Process</CardTitle>\n              <CardDescription>Follow this process to efficiently diagnose and fix issues</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mb-2\">\n                    <Eye className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Identify</h4>\n                  <p className=\"text-xs text-muted-foreground\">What exactly is the problem?</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-2\">\n                    <Search className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Investigate</h4>\n                  <p className=\"text-xs text-muted-foreground\">Gather information and logs</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center mb-2\">\n                    <Target className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Isolate</h4>\n                  <p className=\"text-xs text-muted-foreground\">Narrow down the cause</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mb-2\">\n                    <Wrench className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Fix</h4>\n                  <p className=\"text-xs text-muted-foreground\">Apply the solution</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 mx-auto bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center mb-2\">\n                    <CheckCircle className=\"h-6 w-6 text-red-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-1\">Verify</h4>\n                  <p className=\"text-xs text-muted-foreground\">Test the fix thoroughly</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Common Errors Tab */}\n        <TabsContent value=\"common-errors\" className=\"space-y-6\">\n          <div className=\"space-y-6\">\n            {errorCategories.map((category) => (\n              <Card key={category.id} className=\"hover:shadow-lg transition-all\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <category.icon className=\"h-6 w-6\" />\n                      <div>\n                        <CardTitle className=\"text-lg\">{category.title}</CardTitle>\n                        <CardDescription>{category.description}</CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={category.difficulty === 'advanced' ? 'destructive' : category.difficulty === 'intermediate' ? 'secondary' : 'outline'}>\n                        {category.difficulty}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">{category.errorCount} common issues</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Accordion type=\"single\" collapsible>\n                    {category.commonErrors.map((error, index) => (\n                      <AccordionItem key={index} value={`error-${category.id}-${index}`}>\n                        <AccordionTrigger className=\"text-left\">\n                          <div className=\"flex items-center gap-2\">\n                            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                            <span className=\"font-medium\">{error.error}</span>\n                          </div>\n                        </AccordionTrigger>\n                        <AccordionContent className=\"space-y-4\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div>\n                              <h5 className=\"font-medium mb-2 text-red-700 dark:text-red-300\">Cause:</h5>\n                              <p className=\"text-sm text-muted-foreground\">{error.cause}</p>\n                            </div>\n                            <div>\n                              <h5 className=\"font-medium mb-2 text-green-700 dark:text-green-300\">Solution:</h5>\n                              <p className=\"text-sm text-muted-foreground\">{error.solution}</p>\n                            </div>\n                          </div>\n                          \n                          {error.code && (\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-medium\">Example Fix:</h5>\n                              <CodePreview\n                                code={error.code}\n                                language=\"json\"\n                                title=\"Solution Code\"\n                              />\n                            </div>\n                          )}\n\n                          {error.steps && (\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-medium\">Steps to Fix:</h5>\n                              <ol className=\"text-sm text-muted-foreground space-y-1 list-decimal list-inside\">\n                                {error.steps.map((step, stepIndex) => (\n                                  <li key={stepIndex}>{step}</li>\n                                ))}\n                              </ol>\n                            </div>\n                          )}\n\n                          {error.debugging && (\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-medium\">Debugging Tips:</h5>\n                              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                                {error.debugging.map((tip, tipIndex) => (\n                                  <li key={tipIndex}>• {tip}</li>\n                                ))}\n                              </ul>\n                            </div>\n                          )}\n\n                          {error.optimization && (\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-medium\">Optimization Tips:</h5>\n                              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                                {error.optimization.map((tip, tipIndex) => (\n                                  <li key={tipIndex}>• {tip}</li>\n                                ))}\n                              </ul>\n                            </div>\n                          )}\n                        </AccordionContent>\n                      </AccordionItem>\n                    ))}\n                  </Accordion>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Debugging Tab */}\n        <TabsContent value=\"debugging\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Debugging Tools & Techniques</CardTitle>\n              <CardDescription>Essential tools and methods for diagnosing addon issues</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {debuggingTools.map((tool, index) => (\n                <div key={index} className=\"p-4 border rounded-lg space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">{tool.tool}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{tool.description}</p>\n                  \n                  {tool.usage && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Usage:</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {tool.usage.map((usage, usageIndex) => (\n                          <li key={usageIndex}>• {usage}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {tool.commands && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Commands:</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {tool.commands.map((command, commandIndex) => (\n                          <li key={commandIndex} className=\"font-mono\">• {command}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {tool.patterns && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Patterns:</h5>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {tool.patterns.map((pattern, patternIndex) => (\n                          <li key={patternIndex}>• {pattern}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {tool.example && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium\">Example:</h5>\n                      <CodePreview\n                        code={tool.example}\n                        language={tool.tool.includes('Command') ? 'bash' : 'javascript'}\n                        title={`${tool.tool} Example`}\n                      />\n                    </div>\n                  )}\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Advanced Debugging */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Debugging Techniques</CardTitle>\n              <CardDescription>Professional debugging strategies for complex issues</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Bisection Debugging</h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Systematically disable half of your code to isolate issues\n                  </p>\n                  <ol className=\"text-sm space-y-1 list-decimal list-inside\">\n                    <li>Disable half of your features</li>\n                    <li>Test if issue persists</li>\n                    <li>Focus on the problematic half</li>\n                    <li>Repeat until issue is isolated</li>\n                  </ol>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Rubber Duck Debugging</h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Explain your problem step-by-step to find the solution\n                  </p>\n                  <ol className=\"text-sm space-y-1 list-decimal list-inside\">\n                    <li>Describe what should happen</li>\n                    <li>Explain what actually happens</li>\n                    <li>Walk through the code logic</li>\n                    <li>Often reveals the problem</li>\n                  </ol>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Log Analysis</h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Use structured logging to trace execution flow\n                  </p>\n                  <CodePreview\n                    code={`// Structured logging\nconst logger = {\n  trace: (msg, data) => console.log(\\`[TRACE] \\${msg}\\`, data),\n  error: (msg, error) => console.error(\\`[ERROR] \\${msg}\\`, error)\n};\n\nlogger.trace('Starting entity update', { entityId });\nlogger.error('Failed to update entity', error);`}\n                    language=\"javascript\"\n                    title=\"Structured Logging\"\n                  />\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Performance Profiling</h4>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Measure and optimize performance bottlenecks\n                  </p>\n                  <CodePreview\n                    code={`// Performance profiling\nconsole.time('entity-system-update');\nupdateAllEntities();\nconsole.timeEnd('entity-system-update');\n\n// Memory usage tracking\nconsole.log('Memory usage:', \n  performance.memory?.usedJSHeapSize || 'N/A');`}\n                    language=\"javascript\"\n                    title=\"Performance Profiling\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Performance Tab */}\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Troubleshooting Checklist</CardTitle>\n              <CardDescription>Systematic checks to identify and resolve performance issues</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {performanceChecklist.map((category) => (\n                <div key={category.category} className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold\">{category.category}</h4>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {category.checks.map((check, index) => (\n                      <div key={index} className={`flex items-center gap-3 p-3 border rounded-lg ${check.critical ? 'border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-950' : 'border-border'}`}>\n                        <input \n                          type=\"checkbox\" \n                          className=\"h-4 w-4\" \n                          data-testid={`perf-check-${category.category.toLowerCase()}-${index}`}\n                        />\n                        <span className=\"text-sm flex-1\">{check.item}</span>\n                        {check.critical && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">Critical</Badge>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Performance Monitoring */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Monitoring Tools</CardTitle>\n              <CardDescription>Tools and commands for monitoring addon performance</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Game Commands</h4>\n                  <CodePreview\n                    code={`# Check tick rate\n/tick query\n\n# Performance profiling\n/debug start\n# ... perform test actions\n/debug stop\n\n# Memory information\n/tellraw @s {\"rawtext\":[{\"text\":\"Entities: \"},{\"score\":{\"name\":\"*\",\"objective\":\"entity_count\"}}]}`}\n                    language=\"text\"\n                    title=\"Performance Commands\"\n                  />\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Script Monitoring</h4>\n                  <CodePreview\n                    code={`// Performance monitoring class\nclass PerformanceMonitor {\n  static startTimer(name) {\n    console.time(name);\n  }\n  \n  static endTimer(name) {\n    console.timeEnd(name);\n  }\n  \n  static logMemory() {\n    if (performance.memory) {\n      console.log('Memory:', {\n        used: performance.memory.usedJSHeapSize,\n        total: performance.memory.totalJSHeapSize\n      });\n    }\n  }\n}`}\n                    language=\"javascript\"\n                    title=\"Script Performance Monitor\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Quick Fixes Tab */}\n        <TabsContent value=\"quick-fixes\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Fixes for Common Problems</CardTitle>\n              <CardDescription>Immediate solutions for frequently encountered issues</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {quickFixes.map((fix, index) => (\n                  <div key={index} className=\"p-4 border rounded-lg space-y-3\">\n                    <h4 className=\"font-semibold text-lg\">{fix.problem}</h4>\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium text-sm\">Quick Fixes:</h5>\n                      <ul className=\"space-y-2\">\n                        {fix.fixes.map((solution, solutionIndex) => (\n                          <li key={solutionIndex} className=\"flex items-center gap-2 text-sm\">\n                            <CheckCircle className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                            <span>{solution}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Emergency Troubleshooting */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Emergency Troubleshooting</CardTitle>\n              <CardDescription>When everything breaks - steps to get back to a working state</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-4 border border-red-200 dark:border-red-800 rounded-lg bg-red-50 dark:bg-red-950\">\n                <h4 className=\"font-semibold mb-3 text-red-800 dark:text-red-200\">🚨 Emergency Recovery Steps</h4>\n                <ol className=\"text-sm text-red-700 dark:text-red-300 space-y-2 list-decimal list-inside\">\n                  <li><strong>Disable the addon</strong> - Remove from active packs to stop further damage</li>\n                  <li><strong>Backup your world</strong> - Create a backup before any major changes</li>\n                  <li><strong>Restart Minecraft</strong> - Clear any memory issues or stuck processes</li>\n                  <li><strong>Check recent changes</strong> - Revert the last modifications made</li>\n                  <li><strong>Test with minimal code</strong> - Strip down to basics and rebuild</li>\n                  <li><strong>Validate all JSON</strong> - Ensure all files have correct syntax</li>\n                  <li><strong>Clear cache</strong> - Remove cached files and temporary data</li>\n                  <li><strong>Reinstall addon</strong> - Fresh installation to rule out corruption</li>\n                </ol>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Community Support */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Getting Community Help</CardTitle>\n              <CardDescription>How to effectively ask for help when you're stuck</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">What to Include</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Clear description of the problem</li>\n                    <li>• Steps to reproduce the issue</li>\n                    <li>• Expected vs actual behavior</li>\n                    <li>• Error messages and logs</li>\n                    <li>• Relevant code snippets</li>\n                    <li>• Game version and platform</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Where to Get Help</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Official Minecraft Discord</li>\n                    <li>• Bedrock Addons Reddit</li>\n                    <li>• GitHub issues for tools</li>\n                    <li>• Stack Overflow</li>\n                    <li>• Community forums</li>\n                    <li>• Developer documentation</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":39590},"client/src/components/ui/collapsible-tabs.tsx":{"content":"import { ReactNode, useState, useCallback } from 'react';\nimport { ChevronDown, ChevronRight, MoreHorizontal, Minimize2, Maximize2 } from 'lucide-react';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { useCollapsible } from '@/hooks/useCollapsible';\nimport { cn } from '@/lib/utils';\n\nexport interface CollapsibleTab {\n  /** Unique identifier for the tab */\n  id: string;\n  /** Tab title/label */\n  title: string;\n  /** Tab content */\n  content: ReactNode;\n  /** Optional description */\n  description?: string;\n  /** Icon to display next to title */\n  icon?: ReactNode;\n  /** Badge content (e.g., count) */\n  badge?: string | number;\n  /** Whether this tab is collapsible */\n  collapsible?: boolean;\n  /** Whether to disable this tab */\n  disabled?: boolean;\n}\n\nexport interface CollapsibleTabsContainerProps {\n  /** Array of tab definitions */\n  tabs: CollapsibleTab[];\n  /** Currently active tab ID */\n  activeTab?: string;\n  /** Callback when active tab changes */\n  onActiveTabChange?: (tabId: string) => void;\n  /** Storage key for localStorage persistence */\n  storageKey: string;\n  /** Container title */\n  title?: string;\n  /** Container description */\n  description?: string;\n  /** Whether to show global expand/collapse controls */\n  showGlobalControls?: boolean;\n  /** Additional CSS classes for the container */\n  className?: string;\n  /** Whether to show content in collapsed state (as preview) */\n  showCollapsedPreview?: boolean;\n  /** Test ID for the component */\n  'data-testid'?: string;\n}\n\n/**\n * A container component that makes individual tabs collapsible while maintaining the tab interface.\n * Integrates with the existing tab system and provides localStorage persistence.\n */\nexport function CollapsibleTabsContainer({\n  tabs,\n  activeTab,\n  onActiveTabChange,\n  storageKey,\n  title,\n  description,\n  showGlobalControls = true,\n  className,\n  showCollapsedPreview = false,\n  'data-testid': testId,\n}: CollapsibleTabsContainerProps) {\n  const [internalActiveTab, setInternalActiveTab] = useState(tabs[0]?.id || '');\n  const currentActiveTab = activeTab || internalActiveTab;\n\n  // Initialize collapsible state for all collapsible tabs\n  const collapsibleTabIds = tabs.filter(tab => tab.collapsible !== false).map(tab => tab.id);\n  const collapsible = useCollapsible({\n    storageKey: `tabs-${storageKey}`,\n    defaultCollapsed: false,\n    initialSections: collapsibleTabIds\n  });\n\n  const handleTabChange = useCallback((tabId: string) => {\n    if (onActiveTabChange) {\n      onActiveTabChange(tabId);\n    } else {\n      setInternalActiveTab(tabId);\n    }\n  }, [onActiveTabChange]);\n\n  const renderTabContent = (tab: CollapsibleTab) => {\n    if (tab.collapsible === false) {\n      // Non-collapsible tab - render content directly\n      return (\n        <div className=\"p-4\" data-testid={`tab-content-${tab.id}`}>\n          {tab.content}\n        </div>\n      );\n    }\n\n    const isCollapsed = collapsible.isCollapsed(tab.id);\n\n    return (\n      <Collapsible\n        open={!isCollapsed}\n        onOpenChange={(open) => collapsible.setSection(tab.id, !open)}\n        data-testid={`collapsible-tab-${tab.id}`}\n      >\n        <CollapsibleTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className={cn(\n              \"w-full justify-between p-4 h-auto rounded-none border-b\",\n              \"hover:bg-muted/50 transition-colors duration-200\",\n              \"focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n            )}\n            data-testid={`tab-collapse-trigger-${tab.id}`}\n          >\n            <div className=\"flex items-center gap-3 min-w-0 flex-1 text-left\">\n              {/* Tab icon */}\n              {tab.icon && (\n                <div className=\"flex-shrink-0\">\n                  {tab.icon}\n                </div>\n              )}\n\n              {/* Title and description */}\n              <div className=\"min-w-0 flex-1\">\n                <div className=\"flex items-center gap-2\">\n                  <h3 className=\"font-medium text-foreground text-sm leading-tight truncate\">\n                    {tab.title}\n                  </h3>\n                  {tab.badge !== undefined && (\n                    <Badge variant=\"secondary\" className=\"text-xs flex-shrink-0\">\n                      {tab.badge}\n                    </Badge>\n                  )}\n                </div>\n                {tab.description && (\n                  <p className=\"text-xs text-muted-foreground mt-0.5 line-clamp-2\">\n                    {tab.description}\n                  </p>\n                )}\n                {isCollapsed && showCollapsedPreview && (\n                  <p className=\"text-xs text-muted-foreground mt-1 opacity-70\">\n                    Click to expand content...\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Chevron */}\n            <div className={cn(\n              \"flex-shrink-0 transition-transform duration-200\",\n              isCollapsed ? \"rotate-0\" : \"rotate-180\"\n            )}>\n              <ChevronDown className=\"w-4 h-4\" />\n            </div>\n          </Button>\n        </CollapsibleTrigger>\n\n        <CollapsibleContent \n          className=\"overflow-hidden transition-all duration-200 data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down\"\n          data-testid={`tab-collapsible-content-${tab.id}`}\n        >\n          <div className=\"p-4 pt-0\">\n            {tab.content}\n          </div>\n        </CollapsibleContent>\n      </Collapsible>\n    );\n  };\n\n  return (\n    <TooltipProvider>\n      <div className={cn(\"w-full\", className)} data-testid={testId}>\n        {/* Header with title and controls */}\n        {(title || showGlobalControls) && (\n          <div className=\"flex items-center justify-between mb-4 p-4 bg-muted/30 rounded-t-lg border\">\n            {title && (\n              <div>\n                <h2 className=\"text-lg font-semibold text-foreground\">{title}</h2>\n                {description && (\n                  <p className=\"text-sm text-muted-foreground\">{description}</p>\n                )}\n              </div>\n            )}\n            \n            {showGlobalControls && collapsibleTabIds.length > 0 && (\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-muted-foreground\">\n                  {collapsible.getExpandedCount()} expanded, {collapsible.getCollapsedCount()} collapsed\n                </span>\n                <div className=\"flex gap-1\">\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={collapsible.expandAll}\n                        disabled={collapsible.getCollapsedCount() === 0}\n                        data-testid={`${testId}-expand-all`}\n                      >\n                        <Maximize2 className=\"w-4 h-4\" />\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Expand all tabs</TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={collapsible.collapseAll}\n                        disabled={collapsible.getExpandedCount() === 0}\n                        data-testid={`${testId}-collapse-all`}\n                      >\n                        <Minimize2 className=\"w-4 h-4\" />\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Collapse all tabs</TooltipContent>\n                  </Tooltip>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Tabs container */}\n        <Card className=\"overflow-hidden\">\n          <Tabs value={currentActiveTab} onValueChange={handleTabChange}>\n            {/* Tab navigation */}\n            <CardHeader className=\"p-0\">\n              <TabsList className=\"grid w-full h-auto bg-transparent p-0 rounded-none border-b\">\n                {tabs.map((tab) => (\n                  <TabsTrigger\n                    key={tab.id}\n                    value={tab.id}\n                    disabled={tab.disabled}\n                    className={cn(\n                      \"flex items-center gap-2 px-4 py-3 rounded-none border-r last:border-r-0\",\n                      \"data-[state=active]:bg-background data-[state=active]:shadow-sm\",\n                      \"data-[state=active]:border-b-2 data-[state=active]:border-primary\"\n                    )}\n                    data-testid={`tab-trigger-${tab.id}`}\n                  >\n                    {tab.icon}\n                    <span className=\"font-medium\">{tab.title}</span>\n                    {tab.badge !== undefined && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {tab.badge}\n                      </Badge>\n                    )}\n                    {tab.collapsible !== false && (\n                      <div className=\"ml-auto\">\n                        {collapsible.isCollapsed(tab.id) ? (\n                          <ChevronRight className=\"w-3 h-3 opacity-50\" />\n                        ) : (\n                          <ChevronDown className=\"w-3 h-3 opacity-50\" />\n                        )}\n                      </div>\n                    )}\n                  </TabsTrigger>\n                ))}\n              </TabsList>\n            </CardHeader>\n\n            {/* Tab content */}\n            <CardContent className=\"p-0\">\n              {tabs.map((tab) => (\n                <TabsContent \n                  key={tab.id} \n                  value={tab.id}\n                  className=\"m-0 border-0 ring-0 focus-visible:ring-0\"\n                  data-testid={`tab-panel-${tab.id}`}\n                >\n                  {renderTabContent(tab)}\n                </TabsContent>\n              ))}\n            </CardContent>\n          </Tabs>\n        </Card>\n      </div>\n    </TooltipProvider>\n  );\n}\n\n/**\n * A simplified collapsible tab container for when you don't need the full tab interface,\n * just collapsible sections that look like tabs.\n */\nexport interface SimpleCollapsibleTabsProps {\n  /** Array of tab definitions */\n  tabs: CollapsibleTab[];\n  /** Storage key for localStorage persistence */\n  storageKey: string;\n  /** Container title */\n  title?: string;\n  /** Container description */\n  description?: string;\n  /** Whether to show global expand/collapse controls */\n  showGlobalControls?: boolean;\n  /** Additional CSS classes for the container */\n  className?: string;\n  /** Test ID for the component */\n  'data-testid'?: string;\n}\n\nexport function SimpleCollapsibleTabs({\n  tabs,\n  storageKey,\n  title,\n  description,\n  showGlobalControls = true,\n  className,\n  'data-testid': testId,\n}: SimpleCollapsibleTabsProps) {\n  const collapsible = useCollapsible({\n    storageKey: `simple-tabs-${storageKey}`,\n    defaultCollapsed: false,\n    initialSections: tabs.map(tab => tab.id)\n  });\n\n  return (\n    <TooltipProvider>\n      <div className={cn(\"w-full space-y-2\", className)} data-testid={testId}>\n        {/* Header with title and controls */}\n        {(title || showGlobalControls) && (\n          <div className=\"flex items-center justify-between mb-4\">\n            {title && (\n              <div>\n                <h2 className=\"text-lg font-semibold text-foreground\">{title}</h2>\n                {description && (\n                  <p className=\"text-sm text-muted-foreground\">{description}</p>\n                )}\n              </div>\n            )}\n            \n            {showGlobalControls && (\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-muted-foreground\">\n                  {collapsible.getExpandedCount()} expanded, {collapsible.getCollapsedCount()} collapsed\n                </span>\n                <div className=\"flex gap-1\">\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={collapsible.expandAll}\n                        disabled={collapsible.getCollapsedCount() === 0}\n                        data-testid={`${testId}-expand-all`}\n                      >\n                        <Maximize2 className=\"w-4 h-4\" />\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Expand all sections</TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={collapsible.collapseAll}\n                        disabled={collapsible.getExpandedCount() === 0}\n                        data-testid={`${testId}-collapse-all`}\n                      >\n                        <Minimize2 className=\"w-4 h-4\" />\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Collapse all sections</TooltipContent>\n                  </Tooltip>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Simple collapsible sections */}\n        <div className=\"space-y-2\">\n          {tabs.map((tab) => (\n            <Card key={tab.id} className=\"overflow-hidden\">\n              <Collapsible\n                open={!collapsible.isCollapsed(tab.id)}\n                onOpenChange={(open) => collapsible.setSection(tab.id, !open)}\n              >\n                <CollapsibleTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className={cn(\n                      \"w-full justify-between p-4 h-auto rounded-none\",\n                      \"hover:bg-muted/50 transition-colors duration-200\",\n                      \"focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                    )}\n                    disabled={tab.disabled}\n                    data-testid={`simple-tab-trigger-${tab.id}`}\n                  >\n                    <div className=\"flex items-center gap-3 min-w-0 flex-1 text-left\">\n                      {tab.icon && (\n                        <div className=\"flex-shrink-0\">\n                          {tab.icon}\n                        </div>\n                      )}\n                      <div className=\"min-w-0 flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <h3 className=\"font-medium text-foreground text-sm leading-tight truncate\">\n                            {tab.title}\n                          </h3>\n                          {tab.badge !== undefined && (\n                            <Badge variant=\"secondary\" className=\"text-xs flex-shrink-0\">\n                              {tab.badge}\n                            </Badge>\n                          )}\n                        </div>\n                        {tab.description && (\n                          <p className=\"text-xs text-muted-foreground mt-0.5 line-clamp-2\">\n                            {tab.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className={cn(\n                      \"flex-shrink-0 transition-transform duration-200\",\n                      collapsible.isCollapsed(tab.id) ? \"rotate-0\" : \"rotate-180\"\n                    )}>\n                      <ChevronDown className=\"w-4 h-4\" />\n                    </div>\n                  </Button>\n                </CollapsibleTrigger>\n\n                <CollapsibleContent className=\"overflow-hidden transition-all duration-200\">\n                  <div className=\"p-4 pt-0 border-t\">\n                    {tab.content}\n                  </div>\n                </CollapsibleContent>\n              </Collapsible>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n}","size_bytes":16592},"client/src/assets/emoji-mapping.ts":{"content":"// Emoji mapping system for Minecraft Bedrock Creator Suite\n// Maps semantic icon names to appropriate emoji equivalents\n\nexport const emojiMap = {\n  // Navigation Icons\n  entityBuilder: '🏃', // entity/character\n  blockBuilder: '🧱', // blocks/building\n  itemBuilder: '🍎', // items/objects\n  recipeBuilder: '⚒️', // crafting/tools\n  lootBuilder: '💎', // treasure/loot\n  biomeBuilder: '🌍', // world/environment\n  spawnBuilder: '🥚', // spawning/birth\n  textureCreator: '🎨', // pixel art/creativity\n  scriptStudio: '💻', // coding/programming\n  addonPackager: '📦', // packaging/export\n  validator: '✅', // validation/checking\n  externalTools: '🔗', // external links\n  documentation: '📖', // documentation/books\n  coreConcepts: '📚', // core concepts/books\n  community: '👥', // community/people\n  omniScience: '⭐', // star/special\n  \n  // Action Icons\n  add: '➕', // add/plus\n  remove: '➖', // remove/minus\n  edit: '✏️', // edit/pencil\n  delete: '🗑️', // delete/trash\n  settings: '⚙️', // settings/gear\n  save: '💾', // save/disk\n  export: '📤', // export/upload\n  import: '📥', // import/download\n  copy: '📋', // copy/clipboard\n  download: '⬇️', // download/arrow down\n  folder: '📁', // folder\n  \n  // Tool Icons (TextureCreator)\n  brush: '🖌️', // brush/paint\n  pencil: '✏️', // pencil/edit\n  eraser: '🧽', // eraser/sponge\n  fill: '🪣', // fill/bucket\n  rectangle: '🔲', // rectangle/square\n  circle: '⭕', // circle\n  line: '📏', // line/ruler\n  select: '👆', // select/pointer\n  \n  // Feature Icons (Welcome page)\n  dragon: '🐉', // entity/dragon\n  blocks: '🧱', // blocks\n  textures: '🎨', // textures/art\n  scripts: '📜', // scripts/code\n  docs: '📖', // documentation\n  packages: '📦', // packages/bundles\n  \n  // External Tools\n  blockbench: '🎯', // modeling/precision tool\n  bridgeCore: '🌉', // bridge/connection\n  snowstorm: '❄️', // particles/effects\n  pixilart: '🎨', // pixel art/creativity\n  structureEditor: '🏗️', // structure/building\n  lootTabler: '📊', // tables/data/analysis\n  dialogueEditor: '💬', // conversation/dialogue/chat\n  \n  // Category Icons (Registries)\n  core: '⚙️', // core/settings\n  movement: '🏃', // movement/speed\n  behavior: '🧠', // intelligence/behavior\n  interaction: '🤝', // interaction/handshake\n  environment: '🌍', // nature/environment\n  visual: '🎨', // visual/art\n  utility: '🔧', // utility/tools\n  physics: '⚛️', // physics/atom\n  lighting: '💡', // lighting/bulb\n  transformation: '🔄', // transformation/cycle\n  redstone: '🔴', // redstone/red circle\n  placement: '📐', // placement/ruler\n  loot: '💎', // loot/gem\n  states: '🔢', // states/numbers\n} as const;\n\n// Type for all available emoji names\nexport type EmojiName = keyof typeof emojiMap;\n\n// Helper function to get emoji from semantic name\nexport function getEmoji(iconName: EmojiName): string {\n  return emojiMap[iconName];\n}\n\n// Validation helper to check if emoji mapping exists\nexport function isValidEmojiName(iconName: string): iconName is EmojiName {\n  return iconName in emojiMap;\n}\n\n// Get emoji with fallback\nexport function getEmojiWithFallback(iconName: string, fallback: string = '❓'): string {\n  if (isValidEmojiName(iconName)) {\n    return emojiMap[iconName];\n  }\n  console.warn(`No emoji mapping found for: ${iconName}`);\n  return fallback;\n}","size_bytes":3431}},"version":1}